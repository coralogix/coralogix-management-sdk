syntax = "proto3";
package com.coralogix.archive.kafka_out_targets.v1;

import "com/coralogix/archive/v1/audit_log.proto";
import "google/protobuf/timestamp.proto";

service KafkaOutTargetService {
  rpc GetKafkaOutTargets(GetKafkaOutTargetsRequest) returns (GetKafkaOutTargetsResponse) {
    option (com.coralogix.archive.v1.audit_log_description).description = "Get kafka out targets";
  }
  rpc UpsertKafkaOutTarget(UpsertKafkaOutTargetRequest) returns (UpsertKafkaOutTargetResponse) {
    option (com.coralogix.archive.v1.audit_log_description).description = "Upsert kafka out target";
  }
  rpc DeleteKafkaOutTarget(DeleteKafkaOutTargetRequest) returns (DeleteKafkaOutTargetResponse) {
    option (com.coralogix.archive.v1.audit_log_description).description = "Delete kafka out target";
  }
  rpc SendKafkaOutTestMessage(SendKafkaOutTestMessageRequest) returns (SendKafkaOutTestMessageResponse) {
    option (com.coralogix.archive.v1.audit_log_description).description = "Send kafka out test message";
  }
}

enum CompressionType {
  COMPRESSION_TYPE_UNSPECIFIED = 0;
  COMPRESSION_TYPE_GZIP = 1;
}

message GetKafkaOutTargetsRequest {
}

message GetKafkaOutTargetsResponse {
  repeated Target targets = 1;
}

message UpsertKafkaOutTargetRequest {
  Target target = 1;
}
message UpsertKafkaOutTargetResponse {
  Target target = 1;
}

message DeleteKafkaOutTargetRequest {
  uint32 id = 1;
}

message DeleteKafkaOutTargetResponse {}

message SendKafkaOutTestMessageRequest {
  Target target = 1;
}

message SendKafkaOutTestMessageResponse {}

message Target {
    uint32 id = 1;
    string name = 2;
    bool is_active = 4;
    string topic = 5;
    string brokers = 6;
    string dpxl_expression = 7;
    google.protobuf.Timestamp created_at = 8;
    google.protobuf.Timestamp updated_at = 9;
    string api_key = 10;
    optional CompressionType compression_type = 11;
}
