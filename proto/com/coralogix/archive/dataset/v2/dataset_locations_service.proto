syntax = "proto3";

import "com/coralogix/archive/v1/audit_log.proto";
import "google/protobuf/timestamp.proto";
import "com/coralogix/archive/dataset/v2/dataset.proto";
import "com/coralogix/archive/dataset/v2/physical_location.proto";
import "com/coralogix/archive/v2/format.proto";
import "com/coralogix/archive/v2/target.proto";
import "com/coralogix/archive/dataset/v2/default_keys.proto";

package com.coralogix.archive.dataset.v2;

service DatasetLocationsService {
  rpc GetDatasetLocations(GetDatasetLocationsRequest) returns (GetDatasetLocationsResponse) {
    option (com.coralogix.archive.v1.audit_log_description).description = "Get dataset locations by team_id, dataspace, dataset and timeframe";
  }
  rpc GetDatasetList(GetDatasetListRequest) returns (GetDatasetListResponse) {
    option (com.coralogix.archive.v1.audit_log_description).description = "Get dataset list according to company id";
  }
}

service InternalDatasetLocationsService {
  rpc GetDatasetLocations(InternalDatasetLocationsServiceGetDatasetLocationsRequest) returns (InternalDatasetLocationsServiceGetDatasetLocationsResponse) {
    option (com.coralogix.archive.v1.audit_log_description).description = "Get dataset locations by team_id, dataspace, dataset and timeframe";
  }
  rpc GetDatasetList(InternalDatasetLocationsServiceGetDatasetListRequest) returns (InternalDatasetLocationsServiceGetDatasetListResponse) {
    option (com.coralogix.archive.v1.audit_log_description).description = "Get dataset list according to company id";
  }
  rpc UpdateDatasetLocation(InternalDatasetLocationsServiceUpdateDatasetLocationRequest) returns (InternalDatasetLocationsServiceUpdateDatasetLocationResponse) {
    option (com.coralogix.archive.v1.audit_log_description).description = "Update dataset location according to companyId, location, dataspace and dataset";
  }
}

message Timeframe {
  google.protobuf.Timestamp start_time = 1;
  google.protobuf.Timestamp end_time = 2;
}

message GetDatasetLocationsRequest {
  repeated DatasetLocationRequest datasets_locations = 1;

}

message InternalDatasetLocationsServiceGetDatasetLocationsRequest {
  repeated DatasetLocationRequest datasets_locations = 1;

}

message DatasetLocationRequest {
  repeated uint32 company_ids = 1;
  string dataspace_regex = 2;
  string dataset_regex = 3;
  optional Timeframe timeframe = 4;
}

message GetDatasetLocationsResponse {
  repeated DatasetLocations dataset_locations = 1;
}

message InternalDatasetLocationsServiceGetDatasetLocationsResponse {
  repeated DatasetLocations dataset_locations = 1;
}

message DatasetLocations {
  repeated DatasetLocation locations = 1;
}

message DatasetLocation {
  uint32 company_id = 1;
  Dataset dataset = 2;
  FinalLocation physical_location = 3;
  google.protobuf.Timestamp first_event_time = 4;
  google.protobuf.Timestamp last_event_time = 5;
  repeated FieldPath default_key_fields = 6;
}

message GetDatasetListRequest {
  repeated uint32 company_ids = 1;
}
message InternalDatasetLocationsServiceGetDatasetListRequest {
  repeated uint32 company_ids = 1;
}

message DatasetsInfo {
  uint32 company_id = 1;
  repeated Dataset datasets = 2;
}

message GetDatasetListResponse {
    repeated DatasetsInfo datasets_info = 1;
}

message InternalDatasetLocationsServiceGetDatasetListResponse {
  repeated DatasetsInfo datasets_info = 1;
}

message InternalDatasetLocationsServiceUpdateDatasetLocationRequest {
  uint32 company_id = 1;
  Dataset dataset = 2;
  DatasetLocationDetails location = 3;
  Timeframe timeframe = 4;
}

message DatasetLocationDetails {
  oneof bucket {
    archive.v2.S3TargetSpec s3 = 1;
    archive.v2.IBMCosTargetSpec ibm_cos = 2;
  };
  com.coralogix.archive.v2.Format format = 3;
  // the base path in the bucket (not including: dt/hr). for example: cx/parquet/v1/team_id=555585
  string final_location_base_prefix = 4;
}

message InternalDatasetLocationsServiceUpdateDatasetLocationResponse {
    DatasetLocation dataset_location = 1;
}