syntax = "proto3";

package com.coralogix.dataprime.ast.v1;

import "com/coralogix/dataprime/ast/v1/types.proto";
import "google/protobuf/wrappers.proto";

message Expression {
  reserved 5, 11, 13, 14, 18;
  oneof expression {
    Null null_e                           = 1;
    Keypath keypath                       = 2;
    google.protobuf.BoolValue boolean     = 3;
    google.protobuf.Int32Value integer    = 4;
    google.protobuf.StringValue str       = 6;
    Regex regex                           = 7;
    InfixOp infix_op                      = 8;
    Not not                               = 9;
    FunctionCall function_call            = 10;
    Cast cast                             = 12;
    google.protobuf.Int64Value long       = 15;
    google.protobuf.DoubleValue double    = 16;
    TimeUnit time_unit                    = 19;
    Interval interval                     = 20;
    Timestamp timestamp                   = 21;
    DateUnit date_unit                    = 22;
    Array array                           = 23;
    ArraySlice array_slice                = 24;
    EnumValue enum_value                  = 25;
    ArrayElement array_element            = 26;
  }

  Datatype datatype = 17;

  message Match {
    oneof match {
      google.protobuf.StringValue str = 1;
      Regex regex                     = 2;
    }
  }

  message Null {}

  message Keypath {
    Root root                                          = 1;
    repeated google.protobuf.StringValue path_elements = 2;
    Datatype datatype                                  = 3;
    optional JoinSide join_side                        = 4;


    enum Root {
      ROOT_UNSPECIFIED     = 0;
      ROOT_EVENT_LABELS    = 1;
      ROOT_EVENT_METADATA  = 2;
      ROOT_USER_DATA       = 3;
    }

    enum JoinSide {
      JOIN_SIDE_UNSPECIFIED = 0;
      JOIN_SIDE_LEFT        = 1;
      JOIN_SIDE_RIGHT       = 2;
    }
  }

  message Regex {
    google.protobuf.StringValue regex = 1;
    google.protobuf.StringValue flags = 2;
  }

  message InfixOp {
    Expression left  = 1;
    Op op            = 2;
    Expression right = 3;

    enum Op {
      // Formerly OP_LIKE
      reserved 13;
      OP_UNSPECIFIED   = 0;
      OP_ADD           = 1;
      OP_SUB           = 2;
      OP_MUL           = 3;
      OP_DIV           = 4;
      OP_AND           = 5;
      OP_OR            = 6;
      OP_EQ            = 7;
      OP_NEQ           = 8;
      OP_LT            = 9;
      OP_LTE           = 10;
      OP_GT            = 11;
      OP_GTE           = 12;
      OP_MOD           = 14;
      OP_ILIKE         = 15;
    }
  }

  message Not {
    Expression expression = 1;
  }

  message FunctionCall {
    reserved 1, 2;
    FunctionCallV2 v2             = 3;
  }

  // A time interval with nanosecond resolution.
  // A negative interval is represented by negative `nanos`.
  // The largest representable interval is roughly 292 years.
  message Interval {
    int64 nanos = 1;
  }

  // A timestamp anchored at the Unix epoch (1970-01-01) with nanosecond resolution.
  // Earlier timestamps are represented by negative `epoch_nanos`.
  // The range of representable timestamps falls roughly within the years 1678 to 2262 (1970 +- 292 years).
  message Timestamp {
    int64 epoch_nanos = 1;
  }

  enum TimeUnit {
    TIME_UNIT_UNSPECIFIED = 0;
    TIME_UNIT_NANO        = 1;
    TIME_UNIT_MICRO       = 2;
    TIME_UNIT_MILLI       = 3;
    TIME_UNIT_SECOND      = 4;
    TIME_UNIT_MINUTE      = 5;
    TIME_UNIT_HOUR        = 6;
    TIME_UNIT_DAY         = 7;
  }

  enum DateUnit {
    DATE_UNIT_UNSPECIFIED = 0;
    DATE_UNIT_YEAR        = 1;
    DATE_UNIT_MONTH       = 2;
    DATE_UNIT_WEEK        = 3;
    DATE_UNIT_DAY_OF_YEAR = 4;
    DATE_UNIT_DAY_OF_WEEK = 5;
  }

  message Array {
    repeated Expression elements = 1;
  }

  message ArraySlice {
    Expression array = 1;
    optional Expression start = 2; // inclusive
    optional Expression end = 3; // exclusive
  }

  message ArrayElement {
    Expression array = 1;
    Expression index = 2;
  }

  message FunctionCallV2 {
    reserved 29;

    // GENERIC //
    message FirstNonNull {
      Expression value           = 1;
      repeated Expression values = 2;
    }

    message In {
      Expression comparand       = 1;
      Expression value           = 2;
      repeated Expression values = 3;
    }

    message If {
      Expression condition     = 1;
      Expression then          = 2;
      optional Expression else = 3;
    }

    // Binary //
    message DecodeBase64 {
      Expression value = 1;
    }

    message EncodeBase64 {
      Expression value = 1;
    }

    // String //
    message Length {
      Expression value = 1;
    }

    message Substr {
      Expression value           = 1;
      Expression from            = 2;
      optional Expression length = 3;
    }

    message Concat {
      Expression value           = 1;
      repeated Expression values = 2;
    }

    message Trim {
      Expression value = 1;
    }

    message Rtrim {
      Expression value = 1;
    }

    message Ltrim {
      Expression value = 1;
    }

    message Pad {
      Expression value = 1;
      Expression char_count = 2;
      Expression fill_with = 3;
    }

    message PadLeft {
      Expression value = 1;
      Expression char_count = 2;
      Expression fill_with = 3;
    }

    message PadRight {
      Expression value = 1;
      Expression char_count = 2;
      Expression fill_with = 3;
    }

    message Chr {
      Expression number = 1;
    }

    message Codepoint {
      Expression string = 1;
    }
    message SplitParts {
      Expression string = 1;
      Expression delimiter = 2;
      Expression index = 3;
    }

    message ToLowerCase {
      Expression value = 1;
    }

    message ToUpperCase {
      Expression value = 1;
    }

    message Contains {
      Expression string    = 1;
      Expression substring = 2;
    }

    message IndexOf {
      Expression string    = 1;
      Expression substring = 2;
    }

    message StartsWith {
      Expression string = 1;
      Expression prefix = 2;
    }

    message EndsWith {
      Expression string = 1;
      Expression suffix = 2;
    }

    // Number //
    message Round {
      Expression number          = 1;
      optional Expression digits = 2;
    }

    message FromBase {
      Expression string          = 1;
      Expression radix           = 2;
    }

    message ToBase {
      Expression number          = 1;
      Expression radix           = 2;
    }

    message Mod {
      Expression number        = 1;
      Expression divisor       = 2;
    }

    message Sqrt {
      Expression number        = 1;
    }

    message Abs {
      Expression number = 1;
    }

    message E {}

    message Pi {}

    message Random {}

    message RandomInt {
      Expression upper_bound = 1;
    }

    message Min {
      Expression value           = 1;
      repeated Expression values = 2;
    }

    message Max {
      Expression value           = 1;
      repeated Expression values = 2;
    }

    message Floor {
      Expression number = 1;
    }

    message Ceil {
      Expression number = 1;
    }

    message Power {
      Expression number   = 1;
      Expression exponent = 2;
    }

    message Log2 {
      Expression number = 1;
    }

    message Log {
      Expression base   = 1;
      Expression number = 2;
    }

    message Ln {
      Expression number = 1;
    }

    // Time //
    message ToIso8601DateTime {
      Expression timestamp = 1;
    }

    message RoundTime {
      Expression interval = 1;
      optional Expression date = 2;
    }

    message FromUnixTime {
      Expression unix_time = 1;
      optional Expression time_unit = 2;
    }

    message ToUnixTime {
      Expression timestamp = 1;
      optional Expression time_unit = 2;
    }

    message Now {} // returns timestamp

    message ParseInterval {
      Expression string = 1;
    }

    message FormatInterval {
      Expression interval = 1;
      optional Expression scale = 2; // timeunit
    }

    message ToInterval {
      Expression number = 1;
      optional Expression time_unit = 2;
    }

    message ParseTimestamp {
      Expression string = 1;
      optional Expression format = 2;
      optional Expression tz = 3;
    }

    message FormatTimestamp {
      Expression timestamp = 1;
      optional Expression format = 2;
      optional Expression tz = 3;
    }

    message RoundInterval {
      Expression interval = 1;
      optional Expression scale = 2; // timeunit
    }

    message ExtractTime {
      Expression timestamp = 1;
      Expression unit = 2; // timeunit | dateunit
      optional Expression tz = 3;
    }

    // URL //
    message UrlEncode{
      Expression string                     = 1;
    }
    message UrlDecode{
      Expression string                     = 1;
    }

    // Regexp //
    message Matches{
      Expression string                     = 1;
      Expression regexp                      = 2;
    }

    message RegexpSplitParts{
      Expression string                     = 1;
      Expression delimiter                  = 2;
      Expression index                      = 3;
    }

    // IP //
    message IpPrefix{
      Expression ip = 1; //string
      Expression subnet_size = 2;
    }

    message IpInSubnet{
      Expression ip = 1; //string
      Expression ip_prefix = 2; //string
    }

    message IpInRange {
      Expression ip       = 1;
      Expression start_ip = 2;
      Expression end_ip   = 3;
    }

    // UUID //
    message RandomUuid{} //returns UUIDv4

    message IsUuid{
      Expression uuid  = 1;
    }

    message RecordLocation{}

    // Arrays //

    message ArrayLength {
      Expression array = 1;
    }

    message IsEmpty {
      Expression array = 1;
    }

    message Cardinality {
      Expression array = 1;
    }

    message ArrayContains {
      Expression array = 1;
      Expression element = 2;
    }

    message ArraySplit {
      Expression string = 1;
      Expression delimiter = 2; // string | regex
    }

    message ArrayJoin {
      Expression array = 1;
      Expression delimiter = 2; // string
    }

    message ArrayConcat {
      Expression array1 = 1;
      Expression array2 = 2;
    }

    message ArrayAppend {
      Expression array = 1;
      Expression element = 2;
    }

    message ArrayInsertAt {
      Expression array = 1;
      Expression position = 2;
      Expression value = 3;
    }

    message ArrayReplaceAt {
      Expression array = 1;
      Expression position = 2;
      Expression value = 3;
    }

    message ArrayReplaceAll {
      Expression array = 1;
      Expression value = 2;
      Expression new_value = 3;
    }

    message ArrayRemoveAt {
      Expression array = 1;
      Expression position = 2;
    }

    message ArrayRemove {
      Expression array = 1;
      Expression element = 2;
    }

    message SetUnion {
      Expression array1 = 1;
      Expression array2 = 2;
    }

    message SetIntersection {
      Expression array1 = 1;
      Expression array2 = 2;
    }

    message SetDiff {
      Expression array1 = 1;
      Expression array2 = 2;
    }

    message SetDiffSymmetric {
      Expression array1 = 1;
      Expression array2 = 2;
    }

    message IsSubset {
      Expression array1 = 1;
      Expression array2 = 2;
    }

    message IsSuperset {
      Expression array1 = 1;
      Expression array2 = 2;
    }

    message SetEqualsTo {
      Expression array1 = 1;
      Expression array2 = 2;
    }

    message ArraySort {
      Expression array = 1;
      optional Expression desc = 2;
      optional Expression nulls_first = 3;
    }

    oneof function {
      FirstNonNull first_non_null             = 1;
      If if                                   = 2;
      DecodeBase64 decode_base_64             = 3;
      EncodeBase64 encode_base_64             = 4;
      Length length                           = 5;
      Substr substr                           = 6;
      Concat concat                           = 7;
      Trim trim                               = 8;
      Rtrim rtrim                             = 9;
      Ltrim ltrim                             = 10;
      ToLowerCase to_lower_case               = 11;
      ToUpperCase to_upper_case               = 12;
      RoundTime round_time                    = 13;
      Contains contains                       = 14;
      IndexOf index_of                        = 15;
      StartsWith starts_with                  = 16;
      EndsWith ends_with                      = 17;
      Round round                             = 18;
      Abs abs                                 = 19;
      Min min                                 = 20;
      Max max                                 = 21;
      Floor floor                             = 22;
      Ceil ceil                               = 23;
      Power power                             = 24;
      Log log                                 = 25;
      Log2 log2                               = 26;
      Ln ln                                   = 27;
      ToIso8601DateTime to_iso_8601_date_time = 28;
      FromUnixTime from_unix_time             = 30;
      In in                                   = 31;
      Pad pad                                 = 32;
      PadLeft pad_left                        = 33;
      PadRight pad_right                      = 34;
      Chr chr                                 = 35;
      Codepoint codepoint                     = 36;
      SplitParts split_parts                  = 37;
      FromBase from_base                      = 38;
      ToBase to_base                          = 39;
      Mod mod                                 = 40;
      Sqrt sqrt                               = 41;
      E e                                     = 42;
      Pi pi                                   = 43;
      Random random                           = 44;
      RandomInt random_int                    = 45;
      UrlEncode url_encode                    = 47;
      UrlDecode url_decode                    = 48;
      Matches matches                         = 49;
      RegexpSplitParts regexp_split_parts     = 50;
      IpPrefix ip_prefix                      = 51;
      IpInSubnet ip_in_subnet                 = 52;
      RandomUuid random_uuid                  = 53;
      IsUuid is_uuid                          = 54;
      ToUnixTime to_unix_time                 = 55;
      Now now                                 = 56;
      RecordLocation record_location          = 57;
      ParseInterval parse_interval            = 58;
      FormatInterval format_interval          = 59;
      ToInterval to_interval                  = 60;
      ParseTimestamp parse_timestamp          = 61;
      FormatTimestamp format_timestamp        = 62;
      RoundInterval round_interval            = 63;
      ExtractTime extract_time                = 64;
      ArrayLength array_length                = 65;
      IsEmpty array_is_empty                  = 66;
      Cardinality cardinality                 = 67;
      ArrayContains array_contains            = 68;
      ArraySplit array_split                  = 69;
      ArrayJoin array_join                    = 70;
      SetUnion set_union                      = 71;
      SetIntersection set_intersection        = 72;
      SetDiff set_diff                        = 73;
      SetDiffSymmetric set_diff_symmetric     = 74;
      IsSubset is_subset                      = 75;
      IsSuperset is_superset                  = 76;
      SetEqualsTo set_equals_to               = 77;
      ArrayConcat array_concat                = 78;
      ArrayAppend array_append                = 79;
      ArrayInsertAt array_insert_at           = 80;
      ArrayReplaceAt array_replace_at         = 81;
      ArrayReplaceAll array_replace_all       = 82;
      ArrayRemoveAt array_remove_at           = 83;
      ArrayRemove array_remove                = 84;
      IpInRange ip_in_range                   = 85;
      ArraySort array_sort                    = 86;
    }
  }

  message Cast {
    Expression expression = 1;
    Datatype datatype     = 2;
  }

  message EnumValue {
    // The name of the enum type, e.g. Severity
    string name  = 1;
    // The value of the enum, e.g INFO
    string value = 2;
  }
}
