syntax = "proto3";

package com.coralogix.dataprime.v1;

import "com/coralogix/dataprime/v1/audit_log.proto";
import "com/coralogix/dataprime/v1/metrics.proto";
import "com/coralogix/dataprime/v1/query.proto";
import "com/coralogix/dataprime/v1/results.proto";
import "com/coralogix/dataprime/v1/list_queries.proto";
import "google/api/annotations.proto";
import "google/protobuf/descriptor.proto";

service DataprimeService {
  rpc SubmitQuery(SubmitQueryRequest) returns (SubmitQueryResponse) {
    option (audit_log_description).description = "submit dataprime query";
    option (google.api.http) = {post: "/api/v1/dataprime/query/submit"};
  }
  rpc SubmitDdlQuery(SubmitDdlQueryRequest) returns (SubmitDdlQueryResponse) {
    option (audit_log_description).description = "submit dataprime ddl query";
    option (google.api.http) = {post: "/api/v1/dataprime/ddl-query/submit"};
  }
  rpc ExplainQuery(ExplainQueryRequest) returns (ExplainQueryResponse) {
    option (audit_log_description).description = "explain dataprime query plan";
    option (google.api.http) = {post: "/api/v1/dataprime/query/explain"};
  }
  rpc AwaitReady(AwaitReadyRequest) returns (AwaitReadyResponse) {
    option (audit_log_description).description = "Await query results to be ready";
    option (google.api.http) = {post: "/api/v1/dataprime/query/await"};
  }
  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse) {
    option (audit_log_description).description = "gather dataprime query manager";
    option (google.api.http) = {post: "/api/v1/dataprime/query/manager"};
  }
  rpc GetQueryResults(GetQueryResultsRequest) returns (stream GetQueryResultsResponse) {
    option (audit_log_description).description = "gather dataprime query streamed result";
    option (google.api.http) = {post: "/api/v1/dataprime/query/results"};
  }
  rpc GetDataset(GetDatasetRequest) returns (stream GetDatasetResponse) {
    option (audit_log_description).description = "query existing dataset";
    option (google.api.http) = {post: "/api/v1/dataprime/query/dataset"};
  }
  rpc GetPresignedDownloadUrl(GetPresignedDownloadUrlRequest) returns (GetPresignedDownloadUrlResponse) {
    option (audit_log_description).description = "obtain presigned download url";
    option (google.api.http) = {post: "/api/v1/dataprime/query/presigned-download-url"};
  }
  rpc DropDataset(DropDatasetRequest) returns (DropDatasetResponse) {
    option (audit_log_description).description = "drop dataset";
    option (google.api.http) = {post: "/api/v1/dataprime/ddl-query/submit"};
  }
  rpc GetQueryStatus(GetQueryStatusRequest) returns (GetQueryStatusResponse) {
    option (audit_log_description).description = "gather dataprime query status";
    option (google.api.http) = {post: "/api/v1/dataprime/query/status"};
  }
  rpc CancelQuery(CancelQueryRequest) returns (CancelQueryResponse) {
    option (audit_log_description).description = "cancel datapriame query";
    option (google.api.http) = {post: "/api/v1/dataprime/query/cancel"};
  }
  rpc ListQuery(ListQueryRequest) returns (ListQueryResponse) {
    option (audit_log_description).description = "list running dataprime queries";
    option (google.api.http) = {post: "/api/v1/dataprime/query/list"};
  }
}
