syntax = "proto3";

package com.coralogix.dpxl.v1;

import "com/coralogix/dpxl/v1/unauthenticated_internal_dpxl_request.proto";
import "com/coralogix/dpxl/v1/unauthenticated_internal_dpxl_response.proto";
import "com/coralogix/dataprime/v1/audit_log.proto";

import "google/protobuf/descriptor.proto";

service UnauthenticatedInternalDpxlService {
  rpc Compile(UnauthenticatedInternalDpxlServiceCompileRequest) returns (UnauthenticatedInternalDpxlServiceCompileResponse) {
    option (com.coralogix.dataprime.v1.audit_log_description).description = "Compile DPXL to serialized form";
  }

  rpc ToDpxlText(UnauthenticatedInternalDpxlServiceToDpxlTextRequest) returns (UnauthenticatedInternalDpxlServiceToDpxlTextResponse) {
    option (com.coralogix.dataprime.v1.audit_log_description).description = "Convert serialized DPXL to DPXL text";
  }

  rpc ToOpenSearchClause(UnauthenticatedInternalDpxlServiceToOpenSearchClauseRequest) returns(UnauthenticatedInternalDpxlServiceToOpenSearchClauseResponse) {
    option (com.coralogix.dataprime.v1.audit_log_description).description = "Translate serialized DPXL to OpenSearch";
  }

  rpc ToSerializedDataprimeCoreAst(UnauthenticatedInternalDpxlServiceToSerializedDataprimeCoreAstRequest) returns(UnauthenticatedInternalDpxlServiceToSerializedDataprimeCoreAstResponse) {
    option (com.coralogix.dataprime.v1.audit_log_description).description = "Translate serialized DPXL to serialized Dataprime Core AST";
  }

  rpc Combine(UnauthenticatedInternalDpxlServiceCombineRequest) returns (UnauthenticatedInternalDpxlServiceCombineResponse) {
    option (com.coralogix.dataprime.v1.audit_log_description).description = "Combine two DPXL expressions into one";
  }

  rpc CheckType(UnauthenticatedInternalDpxlServiceCheckTypeRequest) returns (UnauthenticatedInternalDpxlServiceCheckTypeResponse) {
    option (com.coralogix.dataprime.v1.audit_log_description).description = "Check the type of a DPXL expression";
  }
}
