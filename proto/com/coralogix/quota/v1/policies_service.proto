syntax = "proto3";

package com.coralogix.quota.v1;

import "com/coralogix/common/v1/audit_log.proto";

import "com/coralogix/quota/v1/get_policy_request.proto";
import "com/coralogix/quota/v1/get_policy_response.proto";
import "com/coralogix/quota/v1/create_policy_request.proto";
import "com/coralogix/quota/v1/create_policy_response.proto";
import "com/coralogix/quota/v1/update_policy_request.proto";
import "com/coralogix/quota/v1/update_policy_response.proto";
import "com/coralogix/quota/v1/get_company_policies_request.proto";
import "com/coralogix/quota/v1/get_company_policies_response.proto";
import "com/coralogix/quota/v1/delete_policy_request.proto";
import "com/coralogix/quota/v1/delete_policy_response.proto";
import "com/coralogix/quota/v1/reorder_policies_request.proto";
import "com/coralogix/quota/v1/reorder_policies_response.proto";
import "com/coralogix/quota/v1/bulk_test_log_policies_request.proto";
import "com/coralogix/quota/v1/bulk_test_log_policies_response.proto";
import "com/coralogix/quota/v1/toggle_policy_request.proto";
import "com/coralogix/quota/v1/toggle_policy_response.proto";
import "com/coralogix/quota/v1/bulk_create_policy_request.proto";
import "com/coralogix/quota/v1/bulk_create_policy_response.proto";
import "com/coralogix/quota/v1/atomic_overwrite_policies_response.proto";
import "com/coralogix/quota/v1/atomic_overwrite_policies_request.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

service PoliciesService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    name: "Policies Service"
    description: "View and manage your TCO policies"
  };

  rpc GetPolicy(GetPolicyRequest) returns (GetPolicyResponse) {
    option (com.coralogix.common.v1.audit_log_description).description = "Get Policy";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Policies Service"]
      summary: "Get Policy by ID"
    };
    option (google.api.http) = {
      get: "/v1/policies/{id}"
    };
  }

  rpc CreatePolicy(CreatePolicyRequest) returns (CreatePolicyResponse) {
    option (com.coralogix.common.v1.audit_log_description).description = "Create Policy";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Policies Service"]
      summary: "Get Policy by ID"
    };
    option (google.api.http) = {
      post: "/v1/policies"
      body: "*"
    };
  }

  rpc UpdatePolicy(UpdatePolicyRequest) returns (UpdatePolicyResponse) {
    option (com.coralogix.common.v1.audit_log_description).description = "Update Policy";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Policies Service"]
      summary: "Update Policy"
    };
    option (google.api.http) = {
      put: "/v1/policies"
      body: "*"
    };
  }

  rpc GetCompanyPolicies(GetCompanyPoliciesRequest) returns (GetCompanyPoliciesResponse) {
    option (com.coralogix.common.v1.audit_log_description).description = "Get Company Policies";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Policies Service"]
      summary: "Get Company Policies"
    };
    option (google.api.http) = {
      get: "/v1/policies"
    };
  }

  rpc DeletePolicy(DeletePolicyRequest) returns (DeletePolicyResponse) {
    option (com.coralogix.common.v1.audit_log_description).description = "Delete Policy";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Policies Service"]
      summary: "Delete Policy"
    };
    option (google.api.http) = {
      delete: "/v1/policies/{id}"
    };
  }

  rpc ReorderPolicies(ReorderPoliciesRequest) returns (ReorderPoliciesResponse) {
    option (com.coralogix.common.v1.audit_log_description).description = "Reorder Policies";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Policies Service"]
      summary: "Reorder Policies"
    };
    option (google.api.http) = {
      post: "/v1/policies:reorder"
      body: "*"
    };
  }

  rpc BulkTestLogPolicies(BulkTestLogPoliciesRequest) returns (BulkTestLogPoliciesResponse) {
    option (com.coralogix.common.v1.audit_log_description).description = "Bulk Test Log Policies";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Policies Service"]
      summary: "Bulk Test Log Policies"
    };
    option (google.api.http) = {
      post: "/v1/policies:bulkTestLog"
      body: "*"
    };
  }

  rpc TogglePolicy(TogglePolicyRequest) returns (TogglePolicyResponse) {
    option (com.coralogix.common.v1.audit_log_description).description = "Toggle Policy";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Policies Service"]
      summary: "Toggle Policies"
    };
    option (google.api.http) = {
      post: "/v1/policies:toggle"
      body: "*"
    };
  }

  rpc AtomicBatchCreatePolicy(AtomicBatchCreatePolicyRequest) returns (AtomicBatchCreatePolicyResponse) {
    option (com.coralogix.common.v1.audit_log_description).description = "Bulk Create Policy";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Policies Service"]
      summary: "Atomic Batch Create Policy"
    };
    option (google.api.http) = {
      post: "/v1/policies:bulkCreate"
      body: "*"
    };
  }

  rpc AtomicOverwriteLogPolicies(AtomicOverwriteLogPoliciesRequest) returns (AtomicOverwriteLogPoliciesResponse) {
    option (com.coralogix.common.v1.audit_log_description).description = "Deletes all existing log policies and creates the newly provided one atomically";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Policies Service"]
      summary: "Atomic Overwrite Log Policies"
    };
    option (google.api.http) = {
      post: "/v1/policies:atomicOverwriteLogPolicies"
      body: "*"
    };
  }

  rpc AtomicOverwriteSpanPolicies(AtomicOverwriteSpanPoliciesRequest) returns (AtomicOverwriteSpanPoliciesResponse) {
    option (com.coralogix.common.v1.audit_log_description).description = "Deletes all existing span policies and creates the newly provided one atomically";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Policies Service"]
      summary: "Atomic Overwrite Span Policies"
    };
    option (google.api.http) = {
      post: "/v1/policies:atomicOverwriteSpanPolicies"
      body: "*"
    };
  }
}
