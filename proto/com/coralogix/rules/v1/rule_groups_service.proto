syntax = "proto3";

package com.coralogix.rules.v1;

import "com/coralogix/common/v1/audit_log.proto";
import "com/coralogix/rules/v1/rule.proto";
import "com/coralogix/rules/v1/rule_group.proto";
import "com/coralogix/rules/v1/rule_matcher.proto";
import "google/api/annotations.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

service RuleGroupsService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    name: "Rule Groups Service"
    description: "A service to manage rule groups."
  };

  rpc GetRuleGroup(GetRuleGroupRequest) returns (GetRuleGroupResponse) {
    option (com.coralogix.common.v1.audit_log_description).description = "get rule group";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Rule Groups Service"]
      summary: "Get Rule Group"
    };
    option (google.api.http) = {get: "/api/v1/rulegroups/{group_id}"};
  }
  rpc ListRuleGroups(ListRuleGroupsRequest) returns (ListRuleGroupsResponse) {
    option (com.coralogix.common.v1.audit_log_description).description = "get all rule groups";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Rule Groups Service"]
      summary: "List Rule Groups"
    };
    option (google.api.http) = {get: "/api/v1/rulegroups"};
  }
  rpc CreateRuleGroup(CreateRuleGroupRequest) returns (CreateRuleGroupResponse) {
    option (com.coralogix.common.v1.audit_log_description).description = "create rule group";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Rule Groups Service"]
      summary: "Create Rule Group"
    };
    option (google.api.http) = {
      post: "/api/v1/rulegroups"
      body: "*"
    };
  }
  rpc UpdateRuleGroup(UpdateRuleGroupRequest) returns (UpdateRuleGroupResponse) {
    option (com.coralogix.common.v1.audit_log_description).description = "update rule group";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Rule Groups Service"]
      summary: "Update Rule Group"
    };
    option (google.api.http) = {
      put: "/api/v1/rulegroups/{group_id}"
      body: "rule_group"
    };
  }
  rpc DeleteRuleGroup(DeleteRuleGroupRequest) returns (DeleteRuleGroupResponse) {
    option (com.coralogix.common.v1.audit_log_description).description = "delete rule group";
    option (google.api.http) = {delete: "/api/v1/rulegroups/{group_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Rule Groups Service"]
      summary: "Delete Rule Group"
    };
  }

  rpc BulkDeleteRuleGroup(BulkDeleteRuleGroupRequest) returns (BulkDeleteRuleGroupResponse) {
    option (com.coralogix.common.v1.audit_log_description).description = "bulk delete rule groups";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Rule Groups Service"]
      summary: "Bulk Delete Rule Group"
    };
    option (google.api.http) = {delete: "/api/v1/rulegroups"};
  }

  rpc GetRuleGroupModelMapping(GetRuleGroupModelMappingRequest) returns (GetRuleGroupModelMappingResponse) {
    option (com.coralogix.common.v1.audit_log_description).description = "get rule mapping";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Rule Groups Service"]
      summary: "Get Rule Group Model Mapping"
    };
    option (google.api.http) = {
      post: "/api/v1/rulegroup-mapping"
      body: "*"
    };
  }

  rpc GetCompanyUsageLimits(GetCompanyUsageLimitsRequest) returns (GetCompanyUsageLimitsResponse) {
    option (com.coralogix.common.v1.audit_log_description).description = "get company usage with limits";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Rule Groups Service"]
      summary: "Get Company Usage Limits"
    };
    option (google.api.http) = {
      post: "/api/v1/rulegroups/company-limits"
      body: "*"
    };
  }
}

message GetRuleGroupRequest {
  string group_id = 1;
}

message ListRuleGroupsRequest {}

message ListRuleGroupsResponse {
  repeated RuleGroup rule_groups = 1;
}

message GetRuleGroupResponse {
  RuleGroup rule_group = 1;
}

message CreateRuleGroupRequest {
  google.protobuf.StringValue name = 1;
  google.protobuf.StringValue description = 2;
  google.protobuf.BoolValue enabled = 3;
  google.protobuf.BoolValue hidden = 4;
  google.protobuf.StringValue creator = 5;

  repeated RuleMatcher rule_matchers = 6;

  message CreateRuleSubgroup {
    message CreateRule {
      google.protobuf.StringValue name = 1;

      reserved "rule";
      reserved 2;

      google.protobuf.StringValue description = 3;
      google.protobuf.StringValue source_field = 4;

      RuleParameters parameters = 5;

      google.protobuf.BoolValue enabled = 6;

      google.protobuf.UInt32Value order = 7;
    }

    repeated CreateRule rules = 1;

    google.protobuf.BoolValue enabled = 2;
    google.protobuf.UInt32Value order = 3;
  }

  repeated CreateRuleSubgroup rule_subgroups = 7;

  google.protobuf.UInt32Value order = 8;
  TeamId team_id = 9;
}

message CreateRuleGroupResponse {
  RuleGroup rule_group = 1;
}

message UpdateRuleGroupRequest {
  google.protobuf.StringValue group_id = 1;

  CreateRuleGroupRequest rule_group = 2;
}

message UpdateRuleGroupResponse {
  RuleGroup rule_group = 1;
}

message DeleteRuleGroupRequest {
  string group_id = 1;
}

message BulkDeleteRuleGroupRequest {
  repeated string group_ids = 1;
}

message DeleteRuleGroupResponse {}

message BulkDeleteRuleGroupResponse {}

message GetRuleGroupModelMappingRequest {
  google.protobuf.StringValue name = 1;
  google.protobuf.StringValue description = 2;
  google.protobuf.BoolValue enabled = 3;
  google.protobuf.BoolValue hidden = 4;
  google.protobuf.StringValue creator = 5;

  repeated RuleMatcher rule_matchers = 6;

  message CreateRuleSubgroup {
    message CreateRule {
      google.protobuf.StringValue name = 1;

      reserved "rule";
      reserved 2;

      google.protobuf.StringValue description = 3;
      google.protobuf.StringValue source_field = 4;

      RuleParameters parameters = 5;

      google.protobuf.BoolValue enabled = 6;

      google.protobuf.UInt32Value order = 7;
    }

    repeated CreateRule rules = 1;

    google.protobuf.BoolValue enabled = 2;
    google.protobuf.UInt32Value order = 3;
  }

  repeated CreateRuleSubgroup rule_subgroups = 7;

  google.protobuf.UInt32Value order = 8;
}

message GetRuleGroupModelMappingResponse {
  google.protobuf.Struct rule_definition = 1;
}

message GetCompanyUsageLimitsRequest {}

message GetCompanyUsageLimitsResponse {
  message Counts {
    google.protobuf.Int32Value parsing_themes = 1;
    google.protobuf.Int32Value groups = 2;
    google.protobuf.Int32Value rules = 3;
  }
  google.protobuf.StringValue company_id = 1;
  Counts limits = 2;
  Counts usage = 3;
}
