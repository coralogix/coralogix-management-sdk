syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "com/coralogix/enrichment/v1/enrichment.proto";
import "com/coralogix/enrichment/v1/enrichment_request_model.proto";
import "com/coralogix/enrichment/v1/audit_log.proto";
import "com/coralogix/enrichment/v1/enrichment_type.proto";
import "com/coralogix/enrichment/v1/company_enrichment_settings.proto";

package com.coralogix.enrichment.v1;

message GetEnrichmentLimitRequest {}

message GetEnrichmentLimitResponse {
  uint32 limit = 1;
  uint32 used = 2;
}

message GetEnrichmentsRequest {}

message GetEnrichmentsResponse {
  repeated Enrichment enrichments = 1;
}

message AddEnrichmentsRequest {
  repeated EnrichmentRequestModel request_enrichments = 1;
}

message AddEnrichmentsResponse {
  repeated Enrichment enrichments = 1;
}

message RemoveEnrichmentsRequest {
  repeated google.protobuf.UInt32Value enrichment_ids = 1;
}

message RemoveEnrichmentsResponse {
  repeated Enrichment remaining_enrichments = 1;
}

// Deletes all enrichments of the given type and replaces them with the new ones
message AtomicOverwriteEnrichmentsRequest {
  EnrichmentType enrichment_type = 1;
  repeated EnrichmentFieldDefinition enrichment_fields = 2;
}

message AtomicOverwriteEnrichmentsResponse {
  repeated Enrichment enrichments = 1;
}

message GetCompanyEnrichmentSettingsRequest {
}

message GetCompanyEnrichmentSettingsResponse {
  CompanyEnrichmentSettings enrichment_settings = 1;
}

service EnrichmentService {
  rpc GetEnrichments(GetEnrichmentsRequest) returns (GetEnrichmentsResponse) {
    option (audit_log_description).description = "Get enrichments";
  };
  rpc AddEnrichments(AddEnrichmentsRequest) returns (AddEnrichmentsResponse) {
    option (audit_log_description).description = "Add enrichments";
  };
  rpc RemoveEnrichments(RemoveEnrichmentsRequest) returns (RemoveEnrichmentsResponse) {
    option (audit_log_description).description = "Delete enrichments";
  };
  rpc GetEnrichmentLimit(GetEnrichmentLimitRequest) returns (GetEnrichmentLimitResponse) {
    option (audit_log_description).description = "Get enrichments limit";
  };
  rpc AtomicOverwriteEnrichments(AtomicOverwriteEnrichmentsRequest) returns (AtomicOverwriteEnrichmentsResponse) {
    option (audit_log_description).description = "Atomic overwrite enrichments";
  };
  rpc GetCompanyEnrichmentSettings(GetCompanyEnrichmentSettingsRequest) returns (GetCompanyEnrichmentSettingsResponse) {
    option (audit_log_description).description = "Get company enrichment settings";
  };
}
