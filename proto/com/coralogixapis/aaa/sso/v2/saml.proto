syntax = "proto3";

package com.coralogixapis.aaa.sso.v2;

import "google/api/annotations.proto";
import "protoc-gen-openapiv3/options/annotations.proto";

message GetSPParametersRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Get SP Parameters Request"
      description: "This data structure is used to retrieve the parameters of a SAML service provider"
      required: ["team_id"]
    }
    external_docs: {
      url: "https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/"
      description: "Find out more about enrichments"
    }
  };

  uint32 team_id = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "1234567"}];
}

message SPParameters {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Service Provider Parameters"
      description: "This data structure represents the parameters of a SAML service provider"
      required: [
        "metadata_url",
        "signing_cert_pem",
        "name_id_format",
        "assertion_consumer_service_url",
        "binding"
      ]
    }
    external_docs: {
      url: "https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/"
      description: "Find out more about enrichments"
    }
  };
  string metadata_url = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"https://<...>.okta.com/app/<...>/sso/saml/metadata\""}];
  string signing_cert_pem = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"certificate\""}];
  string name_id_format = 3 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"name_id\""}];
  string assertion_consumer_service_url = 4 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"assertion\""}];
  string binding = 5 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"binding\""}];
}

message GetSPParametersResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Get SP Parameters Response"
      description: "This data structure is obtained as a response to a request to retrieve the parameters of a SAML service provider"
      required: ["params"]
    }
    external_docs: {
      url: "https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/"
      description: "Find out more about enrichments"
    }
  };
  SPParameters params = 1;
}

message IDPParameters {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "IDP Parameters"
      description: "This data structure represents a set of SAML identity provider parameters"
      required: [
        "active",
        "metadata",
        "team_entity_id",
        "group_names"
      ]
    }
    external_docs: {
      url: "https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/"
      description: "Find out more about enrichments"
    }
  };
  bool active = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "true"}];
  oneof metadata {
    string metadata_url = 3 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"https://<...>.okta.com/app/<...>/sso/saml/metadata\""}];
    string metadata_content = 4 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"<?xml version= ...\""}];
  }
  optional uint32 team_entity_id = 5 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "1234567"}];
  repeated string group_names = 6 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "[\"group1\"]"}];
}

message SetIDPParametersRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Set IDP Parameters Request"
      description: "This data structure is used to set the parameters of a SAML identity provider"
      required: [
        "team_id",
        "params"
      ]
    }
    external_docs: {
      url: "https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/"
      description: "Find out more about enrichments"
    }
  };
  uint32 team_id = 1;
  IDPParameters params = 2;
}

message SetIDPParametersResponse {}

message SetActiveRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Set Active Request"
      description: "This data structure is used to activate or deactivate a SAML identity provider"
      required: [
        "team_id",
        "is_active"
      ]
    }
    external_docs: {
      url: "https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/"
      description: "Find out more about enrichments"
    }
  };
  uint32 team_id = 1;
  bool is_active = 2;
}

message SetActiveResponse {}

message GetConfigurationRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Get Configuration Request"
      description: "This data structure is used to retrieve the configuration of a SAML service provider and identity provider"
      required: ["team_id"]
    }
    external_docs: {
      url: "https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/"
      description: "Find out more about enrichments"
    }
  };
  uint32 team_id = 1;
}

message GetConfigurationResponse {
  message IDPDetails {
    string name = 1;
    string icon = 2;
  }
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Get Configuration Response"
      description: "This data structure is obtained as a response to a request to retrieve the configuration of a SAML service provider and identity provider"
      required: [
        "team_id",
        "sp_parameters",
        "idp_parameters"
      ]
    }
    external_docs: {
      url: "https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/"
      description: "Find out more about enrichments"
    }
  };
  uint32 team_id = 1;
  SPParameters sp_parameters = 2;
  IDPParameters idp_parameters = 3;
  optional IDPDetails idp_details = 4;
}

service SamlConfigurationService {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_tag) = {
    name: "SAML Configuration Service"
    description: "Manage your SAML configuration"
  };
  rpc GetSPParameters(GetSPParametersRequest) returns (GetSPParametersResponse) {
    option (google.api.http) = {
      get: "/aaa/team-saml/v1/sp_parameters"
      additional_bindings: {get: "/v1/sso/saml/sp_parameters"}
    };
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["SAML Configuration Service"]
      summary: "Get SP Parameters"
    };
  }
  rpc SetIDPParameters(SetIDPParametersRequest) returns (SetIDPParametersResponse) {
    option (google.api.http) = {
      post: "/aaa/team-saml/v1/idp_parameters"
      additional_bindings: {post: "/v1/sso/saml/idp_parameters"}
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["SAML Configuration Service"]
      summary: "Set IDP Parameters"
    };
  }
  rpc SetActive(SetActiveRequest) returns (SetActiveResponse) {
    option (google.api.http) = {
      post: "/aaa/team-saml/v1/active"
      additional_bindings: {post: "/v1/sso/saml/active"}
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["SAML Configuration Service"]
      summary: "Activate/Deactivate SAML"
    };
  }
  rpc GetConfiguration(GetConfigurationRequest) returns (GetConfigurationResponse) {
    option (google.api.http) = {
      get: "/aaa/team-saml/v1/configuration"
      additional_bindings: {get: "/v1/sso/saml/configuration"}
    };
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["SAML Configuration Service"]
      summary: "Get SAML Configuration"
    };
  }
}
