syntax = "proto3";
package com.coralogix.catalog.v1;

import "com/coralogix/catalog/v1/common.proto";
import "com/coralogixapis/apm/common/v2/audit_log.proto";
import "com/coralogixapis/apm/common/v2/time_range.proto";
import "google/protobuf/wrappers.proto";

import "com/coralogix/common/v1/audit_log.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/http.proto";

enum ContainerDataSource {
  KUBERNETES = 0;
  ECS = 1;
}

message GetServiceContainerDataSourcesRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Get Service Container Data Sources Request"
      description: "This data structure represents a request to get Service Container Data Sources."
      required: [
        "service_name",
        "time_range"
      ]
    }
    external_docs: {}
  };
  google.protobuf.StringValue service_name = 1;
  com.coralogixapis.apm.common.v2.TimeRange time_range = 2;
}

message GetServiceContainerDataSourcesResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Get Service Container Data Sources Response"
      description: "This data structure represents a response to get Service Container Data Sources."
      required: []
    }
    external_docs: {}
  };
  repeated ContainerDataSource container_data_source = 1;
}

service ResourcesService {
  rpc GetServiceContainerDataSources(GetServiceContainerDataSourcesRequest) returns (GetServiceContainerDataSourcesResponse) {
    option (google.api.http) = {
      get: "/v1/service-resources"
    };
    option (com.coralogix.common.v1.audit_log_description).description = "get databases operation column stream";
  }
}
