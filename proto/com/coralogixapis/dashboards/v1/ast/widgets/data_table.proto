syntax = "proto3";

package com.coralogixapis.dashboards.v1.ast.widgets;

import "com/coralogixapis/dashboards/v1/ast/filters/filter.proto";
import "com/coralogixapis/dashboards/v1/ast/widgets/common/data_mode_type.proto";
import "com/coralogixapis/dashboards/v1/ast/widgets/common/metrics_query_editor_mode.proto";
import "com/coralogixapis/dashboards/v1/ast/widgets/common/queries.proto";
import "com/coralogixapis/dashboards/v1/common/logs_aggregation.proto";
import "com/coralogixapis/dashboards/v1/common/observation_field.proto";
import "com/coralogixapis/dashboards/v1/common/ordering_field.proto";
import "com/coralogixapis/dashboards/v1/common/query.proto";
import "com/coralogixapis/dashboards/v1/common/span_field.proto";
import "com/coralogixapis/dashboards/v1/common/spans_aggregation.proto";
import "com/coralogixapis/dashboards/v1/common/time_frame.proto";
import "google/protobuf/wrappers.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

message DataTable {
  Query query = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "A query object containing query definition"}];
  google.protobuf.Int32Value results_per_page = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "How many results are displayed per table page"
    example: "10"
  }];
  RowStyle row_style = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Specifies how rows are displayed"}];
  repeated Column columns = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of column definitions"}];
  v1.common.OrderingField order_by = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Defines how to order the results in the table"}];
  common.DataModeType data_mode_type = 11 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Data mode type, either high or archive"}];

  message Query {
    oneof value {
      LogsQuery logs = 1;
      SpansQuery spans = 2;
      MetricsQuery metrics = 3;
      DataprimeQuery dataprime = 4;
    }
  }

  message LogsQuery {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
      json_schema: {
        title: "LogsQuery"
        description: "A logs variant of the query"
        required: []
      }
    };

    common.LuceneQuery lucene_query = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "A Lucene query string to search logs"
      example: '{ "value": "coralogix.metadata.subsystemName: cx_rum" }'
    }];
    repeated v1.ast.filters.Filter.LogsFilter filters = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of filters that narrow down query results"}];
    Grouping grouping = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Definition of grouping and aggregations"}];
    v1.common.TimeFrameSelect time_frame = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Specifies the time period for which the results should be returned"}];

    message Grouping {
      repeated google.protobuf.StringValue group_by = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of field names to group the query results"}];
      repeated Aggregation aggregations = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of aggregations"}];
      repeated v1.common.ObservationField group_bys = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of observation fields to group the results"}];
    }

    message Aggregation {
      google.protobuf.StringValue id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "Aggregation unique identifier"
        example: '{ "value": "52d192ac-a28f-4c51-97f5-5ba004249ba1" }'
      }];
      google.protobuf.StringValue name = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Aggregation name"}];
      google.protobuf.BoolValue is_visible = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Whether the aggregation is visible in the table"}];
      v1.common.LogsAggregation aggregation = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Type of aggregation function"}];
    }
  }

  message SpansQuery {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
      json_schema: {
        title: "SpansQuery"
        description: "A spans variant of the query"
        required: []
      }
    };

    common.LuceneQuery lucene_query = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "A Lucene query string to search span records"}];
    repeated v1.ast.filters.Filter.SpansFilter filters = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of span query filters"}];
    Grouping grouping = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Definition of grouping and aggregations"}];
    v1.common.TimeFrameSelect time_frame = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Specifies the time period for which the records should be returned"}];

    message Grouping {
      repeated v1.common.SpanField group_by = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of field names to group the span records"}];
      repeated Aggregation aggregations = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of aggregations applied to span records"}];
      repeated v1.common.SpanObservationField group_bys = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "A list of observation fields definitions to group the records by"}];
    }

    message Aggregation {
      google.protobuf.StringValue id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "Aggregation unique identifier"
        example: '{ "value": "52d192ac-a28f-4c51-97f5-5ba004249ba1" }'
      }];
      google.protobuf.StringValue name = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Aggregation name"}];
      google.protobuf.BoolValue is_visible = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Whether the aggregation is visible in the table"}];
      v1.common.SpansAggregation aggregation = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Type of spans aggregation function"}];
    }
  }

  message MetricsQuery {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
      json_schema: {
        title: "MetricsQuery"
        description: "A metrics variant of the query"
        required: []
      }
    };

    common.PromQlQuery promql_query = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "PromQL query string for querying metrics"
      example: '{ "value": "up{job=\'abc\'}" }'
    }];
    repeated v1.ast.filters.Filter.MetricsFilter filters = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of metrics filters"}];
    common.MetricsQueryEditorMode editor_mode = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Type of the query editor used to generate the query, can be text or builder based"
      example: "2"
    }];
    v1.common.TimeFrameSelect time_frame = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Specifies the time period for which the result should be returned"}];
    v1.common.PromQLQueryType promql_query_type = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Type of the PromQL query, can be Range or Instant"}];
  }

  message DataprimeQuery {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
      json_schema: {
        title: "DataprimeQuery"
        description: "A Dataprime variant of the query"
        required: []
      }
    };

    v1.common.DataprimeQuery dataprime_query = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Dataprime query text"}];
    repeated v1.ast.filters.Filter.Source filters = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of query filters"}];
    v1.common.TimeFrameSelect time_frame = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Specifies the time period for which the records should be returned"}];
  }

  message Column {
    google.protobuf.StringValue field = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Name of the field to display in the column"
      example: '{ "value": "coralogix.metadata.applicationName" }'
    }];
    google.protobuf.Int32Value width = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Custom width of the column, by default it's automatically adjusted"}];
  }
}

enum RowStyle {
  ROW_STYLE_UNSPECIFIED = 0;
  ROW_STYLE_ONE_LINE = 1;
  ROW_STYLE_TWO_LINE = 2;
  ROW_STYLE_CONDENSED = 3;
  ROW_STYLE_JSON = 4;
  ROW_STYLE_LIST = 5;
}
