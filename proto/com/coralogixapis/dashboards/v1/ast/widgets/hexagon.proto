syntax = "proto3";

package com.coralogixapis.dashboards.v1.ast.widgets;

import "com/coralogixapis/dashboards/v1/ast/filters/filter.proto";
import "com/coralogixapis/dashboards/v1/ast/widgets/common/data_mode_type.proto";
import "com/coralogixapis/dashboards/v1/ast/widgets/common/legend.proto";
import "com/coralogixapis/dashboards/v1/ast/widgets/common/metrics_aggregation_type.proto";
import "com/coralogixapis/dashboards/v1/ast/widgets/common/metrics_query_editor_mode.proto";
import "com/coralogixapis/dashboards/v1/ast/widgets/common/thresholds.proto";
import "com/coralogixapis/dashboards/v1/ast/widgets/common/units.proto";
import "com/coralogixapis/dashboards/v1/common/logs_aggregation.proto";
import "com/coralogixapis/dashboards/v1/common/observation_field.proto";
import "com/coralogixapis/dashboards/v1/common/query.proto";
import "com/coralogixapis/dashboards/v1/common/span_field.proto";
import "com/coralogixapis/dashboards/v1/common/spans_aggregation.proto";
import "com/coralogixapis/dashboards/v1/common/time_frame.proto";
import "google/protobuf/wrappers.proto";
import "protoc-gen-openapiv3/options/annotations.proto";

message Hexagon {
  Query query = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "A query object containing query definition"}];

  google.protobuf.DoubleValue min = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "A minimum value used in percentage threshold calculation and for visual value representation"
    example: "0"
  }];

  google.protobuf.DoubleValue max = 3 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "A maximum value used in percentage threshold calculation and for visual value representation"
    example: "150000"
  }];

  common.Unit unit = 6 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "Unit of the value - one from a predefined list, or custom"
    example: "17"
  }];

  repeated common.Threshold thresholds = 7 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "List of value thresholds, each with a certain color and an optional name label"}];

  common.DataModeType data_mode_type = 8 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Data mode type, either high or archive"}];

  google.protobuf.StringValue custom_unit = 10 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "Custom unit (requires to have unit field set as UNIT_CUSTOM to take effect)"
    example: '{ "value" : "rpm" }'
  }];

  google.protobuf.Int32Value decimal = 11 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "Number indicating the decimal precision of the numeric values, within range 0-15"
    example: "2"
  }];

  common.ThresholdType threshold_type = 12 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Type of the threshold, relative or absolute"}];

  common.Legend legend = 13 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Widget's legend settings"}];

  common.LegendBy legend_by = 14 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Indicates how to group the legend elements, either by thresholds or by query groups"}];

  google.protobuf.BoolValue decimal_precision = 15 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "Whether to render numeric value without abbreviation"
    example: "false"
  }];

  message Query {
    oneof value {
      MetricsQuery metrics = 1;
      LogsQuery logs = 2;
      SpansQuery spans = 3;
      DataprimeQuery dataprime = 4;
    }
  }

  message MetricsQuery {
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
      json_schema: {
        title: "MetricsQuery"
        description: "A metrics variant of the query"
        required: []
      }
    };

    v1.common.PromQlQuery promql_query = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
      description: "PromQL query string for querying metrics"
      example: '{ "value": "up{job=\'abc\'}" }'
    }];
    repeated v1.ast.filters.Filter.MetricsFilter filters = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "List of metrics filters"}];
    common.MetricsQueryEditorMode editor_mode = 3 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
      description: "Type of the query editor used to generate the query, can be text or builder based"
      example: "1"
    }];
    v1.common.TimeFrameSelect time_frame = 4 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Specifies the time period for which the result should be returned"}];
    common.Aggregation aggregation = 5 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Aggregation function"}];
    v1.common.PromQLQueryType promql_query_type = 6 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Type of the PromQL query, can be Range or Instant"}];
  }

  message LogsQuery {
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
      json_schema: {
        title: "LogsQuery"
        description: "A logs variant of the query"
        required: []
      }
    };

    v1.common.LuceneQuery lucene_query = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
      description: "A Lucene query string to search logs"
      example: '{ "value": "coralogix.metadata.subsystemName: cx_rum" }'
    }];
    v1.common.LogsAggregation logs_aggregation = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Aggregation function"}];
    repeated v1.ast.filters.Filter.LogsFilter filters = 3 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "List of filters that narrow down query results"}];
    repeated v1.common.ObservationField group_by = 4 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "A list of observation fields by which to group the results"}];
    v1.common.TimeFrameSelect time_frame = 5 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Specifies the time period for which the result should be returned"}];
  }

  message SpansQuery {
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
      json_schema: {
        title: "SpansQuery"
        description: "A spans variant of the query"
        required: []
      }
    };

    v1.common.LuceneQuery lucene_query = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Lucene query string to search span records"}];
    v1.common.SpansAggregation spans_aggregation = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Span query aggregation function"}];
    repeated v1.ast.filters.Filter.SpansFilter filters = 3 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "List of span query filters"}];
    repeated v1.common.SpanField group_by = 4 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "List of field names to group the span records"}];
    v1.common.TimeFrameSelect time_frame = 5 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Specifies the time period for which the records should be returned"}];
    repeated v1.common.SpanObservationField group_bys = 6 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "A list of observation fields to group the records by"}];
  }

  message DataprimeQuery {
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
      json_schema: {
        title: "DataprimeQuery"
        description: "A Dataprime variant of the query"
        required: []
      }
    };

    v1.common.DataprimeQuery dataprime_query = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Dataprime query text"}];
    repeated v1.ast.filters.Filter.Source filters = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "List of query filters"}];
    v1.common.TimeFrameSelect time_frame = 3 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Specifies the time period for which the records should be returned"}];
  }
}
