syntax = "proto3";

package com.coralogixapis.dashboards.v1.ast.widgets;

import "com/coralogixapis/dashboards/v1/ast/filter.proto";
import "com/coralogixapis/dashboards/v1/ast/widgets/common/data_mode_type.proto";
import "com/coralogixapis/dashboards/v1/ast/widgets/common/legend.proto";
import "com/coralogixapis/dashboards/v1/ast/widgets/common/metrics_query_editor_mode.proto";
import "com/coralogixapis/dashboards/v1/ast/widgets/common/queries.proto";
import "com/coralogixapis/dashboards/v1/ast/widgets/common/thresholds.proto";
import "com/coralogixapis/dashboards/v1/common/logs_aggregation.proto";
import "com/coralogixapis/dashboards/v1/common/observation_field.proto";
import "com/coralogixapis/dashboards/v1/common/query.proto";
import "com/coralogixapis/dashboards/v1/common/span_field.proto";
import "com/coralogixapis/dashboards/v1/common/spans_aggregation.proto";
import "com/coralogixapis/dashboards/v1/common/time_frame.proto";
import "google/protobuf/wrappers.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

message Gauge {
  Query query = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "A query object containing query definition"}];
  google.protobuf.DoubleValue min = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "A minimum gauge value used in percentage threshold calculation and for visual value representation"
    example: "0"
  }];
  google.protobuf.DoubleValue max = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "A maximum gauge value used in percentage threshold calculation and for visual value representation"
    example: "150000"
  }];
  google.protobuf.BoolValue show_inner_arc = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Whether to show the inner arc of gauge which graphically represents the value"
    example: "false"
  }];
  google.protobuf.BoolValue show_outer_arc = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Whether to show the outer arc of gauge which graphically represents the min/max range"
    example: "true"
  }];
  Unit unit = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Unit of the value - one from a predefined list, or 'custom'"
    example: "3"
  }];
  repeated Threshold thresholds = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of value thresholds, each with a certain color and an optional name label"}];
  common.DataModeType data_mode_type = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Data mode type, either high or archive"}];
  ThresholdBy threshold_by = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Indicates which widget element should be colorized as the threshold, either the value or the background"}];
  google.protobuf.StringValue custom_unit = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Custom unit (requires to have unit field set as 'custom' to take effect)"
    example: '{ "value": "kvs" }'
  }];
  google.protobuf.Int32Value decimal = 11 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Number indicating the decimal precision of the numeric values, within range 0-15"
    example: "3"
  }];
  common.ThresholdType threshold_type = 12 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Type of the threshold, relative or absolute"}];
  common.Legend legend = 13 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Widget's legend settings"}];
  common.LegendBy legend_by = 14 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "(multigauge display only) Indicates how to group the legend elements, either by thresholds or by standard groups"}];
  google.protobuf.BoolValue display_series_name = 15 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "(multigauge display only) Whether to show the series names above the value"}];

  message Query {
    oneof value {
      MetricsQuery metrics = 1;
      LogsQuery logs = 2;
      SpansQuery spans = 3;
      DataprimeQuery dataprime = 4;
    }
  }

  message MetricsQuery {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
      json_schema: {
        title: "MetricsQuery"
        description: "A metrics variant of the query"
        required: []
      }
    };

    common.PromQlQuery promql_query = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "PromQL query string for querying metrics"
      example: '{ "value": "up{job=\'abc\'}" }'
    }];
    Aggregation aggregation = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Aggregation function"}];
    repeated Filter.MetricsFilter filters = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of metrics filters"}];
    common.MetricsQueryEditorMode editor_mode = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Type of the query editor used to generate the query, can be text or builder based"
      example: "2"
    }];
    v1.common.TimeFrameSelect time_frame = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Specifies the time period for which the result should be returned"}];
    v1.common.PromQLQueryType promql_query_type = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Type of the PromQL query, can be Range or Instant"}];
  }

  message LogsQuery {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
      json_schema: {
        title: "LogsQuery"
        description: "A logs variant of the query"
        required: []
      }
    };

    common.LuceneQuery lucene_query = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "A Lucene query string to search logs"
      example: '{ "value": "coralogix.metadata.subsystemName: cx_rum" }'
    }];
    v1.common.LogsAggregation logs_aggregation = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Aggregation function"}];
    Aggregation aggregation = 3 [deprecated = true];
    repeated Filter.LogsFilter filters = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of filters that narrow down query results"}];
    repeated v1.common.ObservationField group_by = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "A list of observation fields by which to group the results"}];
    v1.common.TimeFrameSelect time_frame = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Specifies the time period for which the result should be returned"}];
  }

  message SpansQuery {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
      json_schema: {
        title: "SpansQuery"
        description: "A spans variant of the query"
        required: []
      }
    };

    common.LuceneQuery lucene_query = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Lucene query string to search span records"}];
    v1.common.SpansAggregation spans_aggregation = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Span query aggregation function"}];
    Aggregation aggregation = 3 [deprecated = true];
    repeated Filter.SpansFilter filters = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of span query filters"}];
    repeated v1.common.SpanField group_by = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of field names to group the span records"}];
    v1.common.TimeFrameSelect time_frame = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Specifies the time period for which the records should be returned"}];
    repeated v1.common.SpanObservationField group_bys = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "A list of observation fields to group the records by"}];
  }

  message DataprimeQuery {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
      json_schema: {
        title: "DataprimeQuery"
        description: "A Dataprime variant of the query"
        required: []
      }
    };
    v1.common.DataprimeQuery dataprime_query = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Dataprime query text"}];
    repeated Filter.Source filters = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of query filters"}];
    v1.common.TimeFrameSelect time_frame = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Specifies the time period for which the records should be returned"}];
  }

  message Threshold {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
      json_schema: {
        title: "Threshold"
        description: "Definition of a single gauge threshold"
        required: []
      }
    };
    google.protobuf.DoubleValue from = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Minimum bound value of the threshold"}];
    google.protobuf.StringValue color = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Color of the threshold"}];
    google.protobuf.StringValue label = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Optional label of the threshold"}];
  }

  enum Aggregation {
    AGGREGATION_UNSPECIFIED = 0;
    AGGREGATION_LAST = 1;
    AGGREGATION_MIN = 2;
    AGGREGATION_MAX = 3;
    AGGREGATION_AVG = 4;
    AGGREGATION_SUM = 5;
  }

  enum Unit {
    UNIT_UNSPECIFIED = 0;
    UNIT_NUMBER = 1;
    UNIT_PERCENT = 2;
    UNIT_MICROSECONDS = 3;
    UNIT_MILLISECONDS = 4;
    UNIT_SECONDS = 5;
    UNIT_BYTES = 6;
    UNIT_KBYTES = 7;
    UNIT_MBYTES = 8;
    UNIT_GBYTES = 9;
    UNIT_BYTES_IEC = 10;
    UNIT_KIBYTES = 11;
    UNIT_MIBYTES = 12;
    UNIT_GIBYTES = 13;
    UNIT_EUR_CENTS = 14;
    UNIT_EUR = 15;
    UNIT_USD_CENTS = 16;
    UNIT_USD = 17;
    UNIT_CUSTOM = 18;
    UNIT_PERCENT_ZERO_ONE = 19;
    UNIT_PERCENT_ZERO_HUNDRED = 20;
    UNIT_NANOSECONDS = 21;
  }

  enum ThresholdBy {
    THRESHOLD_BY_UNSPECIFIED = 0;
    THRESHOLD_BY_VALUE = 1;
    THRESHOLD_BY_BACKGROUND = 2;
  }
}
