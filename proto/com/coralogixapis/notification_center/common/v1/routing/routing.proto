syntax = "proto3";

package com.coralogixapis.notification_center.routing;

import "com/coralogixapis/notification_center/common/common.proto";
import "com/coralogixapis/notification_center/common/v1/config_fields.proto";
import "protoc-gen-openapiv3/options/annotations.proto";

option go_package = "com/coralogixapis/notification_center/routing";

/**
   * This file contains public models used across the notification sources APIs.
   * any updates should be made with caution to ensure backward compatibility.

   * Proto definitions for specifying notification routing rules, targets, global router identifiers.
*/

message RoutingRule {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Routing Rule"
      description: "Defines routing rule for notifications"
      required: [
        "condition",
        "targets"
      ]
    }
    external_docs: {
      url: "https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/"
      description: "Find out more about notification center"
    }
  };

  //Condition template that is rendered to true or false and used to determine if the rule should be applied
  string condition = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"alertDef.priority == 'P3'\""}];
  //List of targets to send the notification to
  repeated RoutingTarget targets = 2;
  map<string, string> custom_details = 3;
  optional string name = 4;
  // Entity type associated with the routing rule and its condition.
  // This field is marked as optional as a temporary solution to ensure backward compatibility.
  // If not provided, EntityType.Alerts will be assumed.
  // This field will be made mandatory after all clients have migrated.
  optional EntityType entity_type = 5 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"ALERTS\""}];
}

message RoutingTarget {
  reserved 1, 2, 3, 5, 6;
  reserved "deprecated_connector_id", "deprecated_preset_id", "config_overrides", "connector_identifier", "preset_identifier";

  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Routing Target"
      description: "Defines routing target for notifications"
      required: ["connector_id"]
    }
    external_docs: {
      url: "https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/"
      description: "Find out more about notification center"
    }
  };

  map<string, string> custom_details = 4;
  string connector_id = 7;
  optional string preset_id = 8;
}

// The ConnectorSchemaService can be used to retrieve the connector config and message config schemas
// and the list of supported payload types for each connector.
message SourceOverrides {
  reserved 4;
  reserved "deprecated_connector_config_fields";

  // Payload type for the notification.
  string payload_type = 1;
  // Overrides for the message configuration that defines notification content.
  repeated MessageConfigField message_config_fields = 3;
  // Overrides for the connector configuration that identify where the notification should be sent and auth details.
  // Fields are customizable if they have requires_rendering = true in the connector configuration schema.
  repeated TemplatedConnectorConfigField connector_config_fields = 5;
}
