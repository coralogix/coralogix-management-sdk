syntax = "proto3";

package com.coralogixapis.incidents.v1;

import "com/coralogixapis/common/v1/audit_log.proto";
import "com/coralogixapis/incidents/v1/assignee.proto";
import "com/coralogixapis/incidents/v1/incident.proto";
import "com/coralogixapis/incidents/v1/incident_event/incident_event.proto";
import "com/coralogixapis/incidents/v1/incident_event_extended/incident_event_extended.proto";
import "com/coralogixapis/incidents/v1/incident_event_query_filter.proto";
import "com/coralogixapis/incidents/v1/incident_query.proto";
import "com/coralogixapis/incidents/v1/incident_query_filter.proto";
import "com/coralogixapis/incidents/v1/incident_query_filters_values.proto";
import "google/api/annotations.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "protoc-gen-openapiv3/options/annotations.proto";

service IncidentsService {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_tag) = {
    name: "Incidents service"
    description: "Handle all operations related to incident management within Coralogix. Identify, manage, and resolve incidents efficiently through automated workflows and team collaboration."
    external_docs: {
      description: "Find out more about incident management in our documentation"
      url: "https://coralogix.com/docs/user-guides/alerting/incidents/"
    }
  };

  rpc GetIncident(GetIncidentRequest) returns (GetIncidentResponse) {
    option (com.coralogixapis.common.v1.audit_log_description).description = "Get incident";
    option (google.api.http) = {
      get: "/incidents/incidents/v1/{id}"
      additional_bindings: {get: "/v1/incidents/{id}"}
    };
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Incidents service"]
      summary: "Get incident by ID"
      description: "Retrieve detailed information about a single incident by its unique identifier."
      extensions: {
        key: "x-coralogixPermissions"
        value: {
          list_value: {
            values: {string_value: "incidents:read"}
          }
        }
      }
    };
  }

  rpc BatchGetIncident(BatchGetIncidentRequest) returns (BatchGetIncidentResponse) {
    option (com.coralogixapis.common.v1.audit_log_description).description = "Batch get incidents";
    option (google.api.http) = {
      get: "/incidents/incidents/v1/batch"
      additional_bindings: {post: "/v1/incidents:batchGet"}
    };
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Incidents service"]
      summary: "Get multiple incidents by IDs"
      description: "Retrieve multiple incidents by their IDs in a single request."
      extensions: {
        key: "x-coralogixPermissions"
        value: {
          list_value: {
            values: {string_value: "incidents:read"}
          }
        }
      }
    };
  }

  rpc ListIncidents(ListIncidentsRequest) returns (ListIncidentsResponse) {
    option (com.coralogixapis.common.v1.audit_log_description).description = "Get incidents list";
    option (google.api.http) = {
      post: "/incidents/incidents/v1"
      body: "*"
      additional_bindings: {post: "/v1/incidents"}
    };
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Incidents service"]
      summary: "List incidents with filters"
      description: "Lists all available incidents based on specified filters and order. The list is ordered in an unspecified direction and sorted by creation time."
      extensions: {
        key: "x-coralogixPermissions"
        value: {
          list_value: {
            values: {string_value: "incidents:read"}
          }
        }
      }
    };
  }
  rpc ListIncidentAggregations(ListIncidentAggregationsRequest) returns (ListIncidentAggregationsResponse) {
    option (com.coralogixapis.common.v1.audit_log_description).description = "List incident aggregations";
    option (google.api.http) = {
      post: "/incidents/incidents/v1/aggregations"
      body: "*"
      additional_bindings: {post: "/v1/incidents:listIncidentAggregations"}
    };
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Incidents service"]
      summary: "Get incident aggregations"
      description: "Retrieve aggregated incident data with support for grouping and filtering."
      extensions: {
        key: "x-coralogixPermissions"
        value: {
          list_value: {
            values: {string_value: "incidents:read"}
          }
        }
      }
    };
  }

  rpc GetFilterValues(GetFilterValuesRequest) returns (GetFilterValuesResponse) {
    option (com.coralogixapis.common.v1.audit_log_description).description = "Get filter values";
    option (google.api.http) = {
      get: "/incidents/incidents/v1/filter-values"
      body: "*"
      additional_bindings: {post: "/v1/incidents:get-filter-values"}
    };
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Incidents service"]
      summary: "Get available filter values"
      extensions: {
        key: "x-coralogixPermissions"
        value: {
          list_value: {
            values: {string_value: "incidents:read"}
          }
        }
      }
    };
  }

  rpc AssignIncidents(AssignIncidentsRequest) returns (AssignIncidentsResponse) {
    option (com.coralogixapis.common.v1.audit_log_description).description = "Assign incidents";
    option (google.api.http) = {
      post: "/incidents/incidents/v1/by-user"
      body: "*"
      additional_bindings: {post: "/v1/incidents:assign"}
    };
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Incidents service"]
      summary: "Assign incidents to a user"
      description: "Assign one or more incidents to a specific user."
      extensions: {
        key: "x-coralogixPermissions"
        value: {
          list_value: {
            values: {string_value: "incidents:assign"}
          }
        }
      }
    };
  }

  rpc UnassignIncidents(UnassignIncidentsRequest) returns (UnassignIncidentsResponse) {
    option (com.coralogixapis.common.v1.audit_log_description).description = "Unassign incidents";
    option (google.api.http) = {
      delete: "/incidents/incidents/v1/by-user"
      body: "*"
      additional_bindings: {post: "/v1/incidents:unassign"}
    };
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Incidents service"]
      summary: "Remove incident user assignments"
      description: "Remove user assignments from one or more incidents."
      extensions: {
        key: "x-coralogixPermissions"
        value: {
          list_value: {
            values: {string_value: "incidents:assign"}
          }
        }
      }
    };
  }
  rpc AcknowledgeIncidents(AcknowledgeIncidentsRequest) returns (AcknowledgeIncidentsResponse) {
    option (com.coralogixapis.common.v1.audit_log_description).description = "Acknowledge incidents";
    option (google.api.http) = {
      post: "/incidents/incidents/v1/acknowledge"
      body: "*"
      additional_bindings: {post: "/v1/incidents:acknowledge"}
    };
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Incidents service"]
      summary: "Acknowledge incidents"
      description: "Mark one or more incidents as acknowledged."
      extensions: {
        key: "x-coralogixPermissions"
        value: {
          list_value: {
            values: {string_value: "incidents:acknowledge"}
          }
        }
      }
    };
  }
  rpc CloseIncidents(CloseIncidentsRequest) returns (CloseIncidentsResponse) {
    option (com.coralogixapis.common.v1.audit_log_description).description = "Close incidents";
    option (google.api.http) = {
      post: "/incidents/incidents/v1/close"
      body: "*"
      additional_bindings: {post: "/v1/incidents:close"}
    };
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Incidents service"]
      summary: "Close incidents"
      extensions: {
        key: "x-coralogixPermissions"
        value: {
          list_value: {
            values: {string_value: "incidents:close"}
          }
        }
      }
    };
  }
  rpc GetIncidentEvents(GetIncidentEventsRequest) returns (GetIncidentEventsResponse) {
    option (com.coralogixapis.common.v1.audit_log_description).description = "Get all incident events of the incident";
    option (google.api.http) = {
      get: "/incidents/incidents/v1/{incident_id}/events"
      additional_bindings: {get: "/v1/incidents/{incident_id}/events"}
    };
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Incidents service"]
      summary: "Get incident events"
      description: "Retrieve a chronological list of all events associated with a specific incident. Includes state changes, assignments, acknowledgments, and resolutions."
      extensions: {
        key: "x-coralogixPermissions"
        value: {
          list_value: {
            values: {string_value: "incidents:read"}
          }
        }
      }
    };
  }

  rpc ResolveIncidents(ResolveIncidentsRequest) returns (ResolveIncidentsResponse) {
    option (com.coralogixapis.common.v1.audit_log_description).description = "Resolve incidents";
    option (google.api.http) = {
      post: "/incidents/incidents/v1/resolve"
      body: "*"
      additional_bindings: {post: "/v1/incidents:resolve"}
    };
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Incidents service"]
      summary: "Resolve incidents"
      description: "Mark one or more incidents as resolved."
      extensions: {
        key: "x-coralogixPermissions"
        value: {
          list_value: {
            values: {string_value: "incidents:close"}
          }
        }
      }
    };
  }

  rpc GetIncidentByEventId(GetIncidentByEventIdRequest) returns (GetIncidentByEventIdResponse) {
    option (com.coralogixapis.common.v1.audit_log_description).description = "Get incident by event id";
    option (google.api.http) = {
      get: "/incidents/incidents/v1/events/{event_id}"
      additional_bindings: {get: "/v1/incidents/by:event/{event_id}"}
    };
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Incidents service"]
      summary: "Get incident by event ID"
      description: "Retrieve detailed information about a single incident by related alert event id."
      extensions: {
        key: "x-coralogixPermissions"
        value: {
          list_value: {
            values: {string_value: "incidents:read"}
          }
        }
      }
    };
  }
  rpc AcknowledgeIncidentByEventId(AcknowledgeIncidentByEventIdRequest) returns (AcknowledgeIncidentByEventIdResponse) {
    option (com.coralogixapis.common.v1.audit_log_description).description = "Acknowledge incident by event id";
    option (google.api.http) = {
      post: "/incidents/incidents/v1/events/{event_id}/acknowledge"
      body: "*"
      additional_bindings: {post: "/v1/by:event/incidents:acknowledge/{event_id}"}
    };
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Incidents service"]
      summary: "Acknowledge incident by event id"
      description: "Mark incident as acknowledged by event id."
      extensions: {
        key: "x-coralogixPermissions"
        value: {
          list_value: {
            values: {string_value: "incidents:acknowledge"}
          }
        }
      }
    };
  }
  rpc ResolveIncidentByEventId(ResolveIncidentByEventIdRequest) returns (ResolveIncidentByEventIdResponse) {
    option (com.coralogixapis.common.v1.audit_log_description).description = "Resolve incident by event id";
    option (google.api.http) = {
      post: "/incidents/incidents/v1/events/{event_id}/resolve"
      body: "*"
      additional_bindings: {post: "/v1/by:event/incidents:resolve/{event_id}"}
    };
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Incidents service"]
      summary: "Resolve incident by event id"
      description: "Mark incident as resolved by event id."
      extensions: {
        key: "x-coralogixPermissions"
        value: {
          list_value: {
            values: {string_value: "incidents:close"}
          }
        }
      }
    };
  }

  /*
     This shouldn't be exposed in the docs, it has no external usecase
  */
  rpc GetIncidentUsingCorrelationKey(GetIncidentUsingCorrelationKeyRequest) returns (GetIncidentUsingCorrelationKeyResponse) {
    option (com.coralogixapis.common.v1.audit_log_description).description = "Get incident by correlation key and specific point in time";
  }

  rpc ListIncidentEvents(ListIncidentEventsRequest) returns (ListIncidentEventsResponse) {
    option (com.coralogixapis.common.v1.audit_log_description).description = "List incident events";
    option (google.api.http) = {
      get: "/incidents/incidents/v1/events"
      body: "*"
      additional_bindings: {post: "/v1/incidents:list-incident-events"}
    };
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Incidents service"]
      summary: "List incident events with filters"
      description: "List incident events with support for filtering, pagination, and ordering."
      extensions: {
        key: "x-coralogixPermissions"
        value: {
          list_value: {
            values: {string_value: "incidents:read"}
          }
        }
      }
    };
  }

  rpc ListIncidentEventsTotalCount(ListIncidentEventsTotalCountRequest) returns (ListIncidentEventsTotalCountResponse) {
    option (com.coralogixapis.common.v1.audit_log_description).description = "List incident events total count";
    option (google.api.http) = {
      get: "/incidents/incidents/v1/events/count"
      body: "*"
      additional_bindings: {post: "/v1/incidents:list-incident-events-total-count"}
    };
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Incidents service"]
      summary: "Get total count of incident events"
      description: "Retrieve the total count of incident events matching a filter."
      extensions: {
        key: "x-coralogixPermissions"
        value: {
          list_value: {
            values: {string_value: "incidents:read"}
          }
        }
      }
    };
  }

  rpc ListIncidentEventsFilterValues(ListIncidentEventsFilterValuesRequest) returns (ListIncidentEventsFilterValuesResponse) {
    option (com.coralogixapis.common.v1.audit_log_description).description = "List incident events filter values";
    option (google.api.http) = {
      get: "/incidents/incidents/v1/events/filter-values"
      body: "*"
      additional_bindings: {post: "/v1/incidents:list-incident-events-filter-values"}
    };
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Incidents service"]
      summary: "Get available incident event filter values"
      extensions: {
        key: "x-coralogixPermissions"
        value: {
          list_value: {
            values: {string_value: "incidents:read"}
          }
        }
      }
    };
  }
}

message GetIncidentRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Get incident request"
      required: ["id"]
    }
  };
  google.protobuf.StringValue id = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"incident_id\""}];
}

message GetIncidentResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Get incident response"
      description: "Response containing the requested incident"
      required: ["incident"]
    }
  };
  Incident incident = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "The requested incident"}];
}

message ListIncidentsResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "List incidents response"
      description: "Response containing a list of incidents and pagination information"
      required: [
        "incidents",
        "pagination"
      ]
    }
  };
  repeated Incident incidents = 1;
  PaginationResponse pagination = 4;
}

message ListIncidentsRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "List incidents request"
      description: "Request to list incidents with filtering, pagination and ordering options"
    }
  };
  IncidentQueryFilter filter = 4 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Filter for incidents"}];
  PaginationRequest pagination = 5 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Pagination parameters"}];
  repeated OrderBy order_bys = 6 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Order by fields"}];
}

message BatchGetIncidentRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Batch get incidents request"
      description: "Request to get multiple incidents by their IDs"
      required: ["ids"]
    }
  };
  repeated google.protobuf.StringValue ids = 1;
}

message BatchGetIncidentResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Batch get incidents response"
      description: "Response containing the requested incidents and any IDs that weren't found"
      required: [
        "incidents",
        "not_found_ids"
      ]
    }
  };
  map<string, Incident> incidents = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Map of incident IDs to their corresponding incidents"}];
  repeated google.protobuf.StringValue not_found_ids = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "List of IDs that were not found"
    example: "[\"not_found_id_1\", \"not_found_id_2\"]"
  }];
}

message DeleteIncidentRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Delete incident request"
      description: "Request to delete an incident by its ID"
      required: ["id"]
    }
  };
  google.protobuf.StringValue id = 1;
}
message PaginationRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Pagination request"
      description: "Pagination parameters for list requests"
      required: ["page_size"]
    }
  };
  google.protobuf.UInt32Value page_size = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "Number of items to return per page"
    example: "10"
  }];
  google.protobuf.StringValue page_token = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "Token for the next page of results"
    example: "\"next_page_token\""
  }];
}
message PaginationResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Pagination response"
      description: "Pagination information for list responses"
      required: ["total_size"]
    }
  };
  google.protobuf.UInt32Value total_size = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "Total number of items available"
    example: "100"
  }];
  google.protobuf.StringValue next_page_token = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "Token for the next page of results"
    example: "\"next_page_token\""
  }];
}

message ListIncidentAggregationsRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "List incident aggregations request"
      description: "Request to get aggregated incident data with filtering and grouping options"
    }
  };
  IncidentQueryFilter filter = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Filter for incidents"}];
  repeated GroupBy group_bys = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Group by fields for aggregation"}];
  PaginationRequest pagination = 3 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Pagination parameters"}];
}
message ListIncidentAggregationsResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "List incident aggregations response"
      description: "Response containing aggregated incident data and pagination information"
      required: [
        "incident_aggs",
        "pagination"
      ]
    }
  };
  repeated IncidentAggregation incident_aggs = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "List of incident aggregations"}];
  PaginationResponse pagination = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Pagination information for the response"}];
}

message GetFilterValuesRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Get filter values request"
      description: "Request to get available filter values for incidents"
    }
  };
  IncidentQueryFilter filter = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Filter for incidents"}];
}
message GetFilterValuesResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Get filter values response"
      description: "Response containing available filter values for incidents"
      required: ["filters_values"]
    }
  };
  IncidentQueryFiltersValues filters_values = 1;
}

message GetIncidentEventsRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Get incident events request"
      description: "Request to get all events associated with a specific incident"
      required: ["incident_id"]
    }
  };
  google.protobuf.StringValue incident_id = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "ID of the incident to retrieve events for"
    example: "\"incident_id\""
  }];
}

message GetIncidentEventsResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Get incident events response"
      description: "Response containing all events associated with the requested incident"
    }
  };
  repeated IncidentEvent incident_events = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "List of incident events"}];
}

message AssignIncidentsRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Assign incidents request"
      description: "Request to assign one or more incidents to a user"
      required: [
        "incident_ids",
        "assigned_to"
      ]
    }
  };
  repeated google.protobuf.StringValue incident_ids = 5 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "List of incident IDs to assign"
    example: "[\"incident_id_1\", \"incident_id_2\"]"
  }];
  UserDetails assigned_to = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "User to assign the incidents to"
    example: "{\"user_id\": \"user_id_123\"}"
  }];
}

message UnassignIncidentsRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Unassign incidents request"
      description: "Request to remove assignments from one or more incidents"
      required: ["incident_ids"]
    }
  };
  repeated google.protobuf.StringValue incident_ids = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "List of incident IDs to unassign"
    example: "[\"incident_id_1\", \"incident_id_2\"]"
  }];
}

message UnassignIncidentsResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Unassign incidents response"
      description: "Response containing the updated incidents after unassignment"
      required: ["incidents"]
    }
  };
  repeated Incident incidents = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "List of incidents after unassignment"}];
}

message AssignIncidentsResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Assign incidents response"
      description: "Response containing the updated incidents after assignment"
      required: ["incidents"]
    }
  };
  repeated Incident incidents = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "List of incidents after assignment"}];
}

message AcknowledgeIncidentsRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Acknowledge incidents request"
      description: "Request to acknowledge one or more incidents"
      required: ["incident_ids"]
    }
  };
  repeated google.protobuf.StringValue incident_ids = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "List of incident IDs to acknowledge"
    example: "[\"incident_id_1\", \"incident_id_2\"]"
  }];
}

message AcknowledgeIncidentsResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Acknowledge incidents response"
      description: "Response containing the updated incidents after acknowledgment"
      required: ["incidents"]
    }
  };
  repeated Incident incidents = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "List of incidents after acknowledgment"}];
}

message CloseIncidentsRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Close incidents request"
      description: "Request to close one or more incidents"
      required: ["incident_ids"]
    }
  };
  repeated google.protobuf.StringValue incident_ids = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "List of incident IDs to close"
    example: "[\"incident_id_1\", \"incident_id_2\"]"
  }];
}

message CloseIncidentsResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Close incidents response"
      description: "Response containing the updated incidents after closing"
      required: ["incidents"]
    }
  };
  repeated Incident incidents = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "List of incidents after closing"}];
}

message ResolveIncidentsRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Resolve incidents request"
      description: "Request to resolve one or more incidents"
      required: ["incident_ids"]
    }
  };
  repeated google.protobuf.StringValue incident_ids = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "List of incident IDs to resolve"
    example: "[\"incident_id_1\", \"incident_id_2\"]"
  }];
}

message ResolveIncidentsResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Resolve incidents response"
      description: "Response containing the updated incidents after resolution"
      required: ["incidents"]
    }
  };
  repeated Incident incidents = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "List of incidents after resolution"}];
}

message GetIncidentByEventIdRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Get incident by event id request"
      required: ["event_id"]
    }
  };
  google.protobuf.StringValue event_id = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "Event ID associated to the Incident to acknowledge"
    example: "\"event_id_1\""
  }];
}

message GetIncidentByEventIdResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Get incident by event id response"
      description: "Response containing the requested incident"
      required: ["incident"]
    }
  };
  Incident incident = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "The requested incident"}];
}

message AcknowledgeIncidentByEventIdRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Acknowledge incident by event id request"
      description: "Request to acknowledge incident"
      required: ["event_id"]
    }
  };
  google.protobuf.StringValue event_id = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "Event ID associated to the Incident to acknowledge"
    example: "\"event_id_1\""
  }];
}

message AcknowledgeIncidentByEventIdResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Acknowledge incident by event id response"
      description: "Response containing the updated incident after acknowledgment"
      required: ["incident"]
    }
  };
  Incident incident = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Incident after acknowledgment"}];
}

message ResolveIncidentByEventIdRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Resolve incidents request"
      description: "Request to resolve one or more incidents"
      required: ["event_id"]
    }
  };
  google.protobuf.StringValue event_id = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "Event ID associated to the Incident to resolve"
    example: "\"event_id_1\""
  }];
}

message ResolveIncidentByEventIdResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Acknowledge incident by event id response"
      description: "Response containing the updated incident after resolution"
      required: ["incident"]
    }
  };
  Incident incident = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Incident after resolution"}];
}

message GetIncidentUsingCorrelationKeyRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Get incident using correlation key request"
      description: "Request to get an incident using a correlation key and timestamp"
      required: [
        "correlation_key",
        "incident_point_in_time"
      ]
    }
  };
  google.protobuf.StringValue correlation_key = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "Correlation key to identify the incident"
    example: "\"correlation_key_123\""
  }];
  google.protobuf.Timestamp incident_point_in_time = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "Timestamp to identify the specific point in time for the incident"
    example: "\"2024-01-01T00:00:00Z\""
  }];
}

message GetIncidentUsingCorrelationKeyResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Get incident by correlation response"
      description: "Response containing the incident matching the correlation key and timestamp"
    }
  };
  Incident incident = 1;
}

message ListIncidentEventsRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "List incident events request"
      description: "Request to list incident events with filtering, pagination and ordering options"
    }
  };
  IncidentEventQueryFilter filter = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Filter for incident events"}];
  PaginationRequest pagination = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Pagination parameters"}];
  ListIncidentEventRequestOrderBy order_by = 3 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Order by fields for incident events"}];
}

message ListIncidentEventRequestOrderBy {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {title: "List incident events order by request"}
  };
  IncidentEventOrderByFieldType field = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "Field to order by"
    example: "\"INCIDENT_EVENT_ORDER_BY_FIELD_TYPE_TIMESTAMP_OR_UNSPECIFIED\""
  }];
  OrderByDirection direction = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "Sort direction (ascending or descending)"
    example: "\"ORDER_BY_DIRECTION_ASC\""
  }];
}

enum IncidentEventOrderByFieldType {
  INCIDENT_EVENT_ORDER_BY_FIELD_TYPE_TIMESTAMP_OR_UNSPECIFIED = 0;
}

message ListIncidentEventsResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "List incident events response"
      description: "A response containing a list of incident events and pagination information"
      required: ["items"]
    }
  };
  repeated IncidentEventExtended items = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "List of incident events"}];
  PaginationResponse pagination = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Pagination information for the response"}];
}

message ListIncidentEventsTotalCountRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "List incident events total count request"
      description: "A request to get the total count of incident events matching a filter"
    }
  };
  IncidentEventQueryFilter filter = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Filter for incident events"}];
}

message ListIncidentEventsTotalCountResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "List incident events total count response"
      description: "A response containing the total count of matching incident events and whether the count limit was reached"
    }
  };
  google.protobuf.UInt64Value count = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "Total number of incident events matching the filter"
    example: "100"
  }];
  google.protobuf.BoolValue reached_limit = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {
    description: "Indicates if the count reached the system limit"
    example: "false"
  }];
}

message ListIncidentEventsFilterValuesRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "List incident events filter values request"
      description: "A request to get available filter values for incident events"
    }
  };
  IncidentEventQueryFilter filter = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Filter for incident events"}];
}

message ListIncidentEventsFilterValuesResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "List incident events filter values response"
      description: "A response containing available filter values for incident events"
    }
  };
  IncidentQueryFiltersValues filters_values = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {description: "Available filter values for incident events"}];
}
