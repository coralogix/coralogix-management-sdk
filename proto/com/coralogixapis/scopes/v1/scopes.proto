syntax = "proto3";

package com.coralogixapis.scopes.v1;

import "com/coralogixapis/scopes/v1/entity_type.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv3/options/annotations.proto";

service ScopesService {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_tag) = {
    name: "Scopes Service"
    description: "A service to manage scopes"
  };
  rpc GetTeamScopesByIds(GetTeamScopesByIdsRequest) returns (GetScopesResponse) {
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Scopes Service"]
      summary: "Get Team Scopes By Ids"
    };
    option (google.api.http) = {
      get: "/aaa/team-scopes/v1"
      additional_bindings: {get: "/v1/scopes"}
    };
  }

  rpc GetTeamScopes(GetTeamScopesRequest) returns (GetScopesResponse) {
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Scopes Service"]
      summary: "Get Team Scopes"
    };
    option (google.api.http) = {
      get: "/aaa/team-scopes/v1/list"
      additional_bindings: {get: "/v1/scopes/list"}
    };
  }

  rpc CreateScope(CreateScopeRequest) returns (CreateScopeResponse) {
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Scopes Service"]
      summary: "Create Scope"
    };
    option (google.api.http) = {
      post: "/aaa/team-scopes/v1"
      body: "*"
      additional_bindings: {post: "/v1/scopes"}
    };
  }

  rpc UpdateScope(UpdateScopeRequest) returns (UpdateScopeResponse) {
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Scopes Service"]
      summary: "Update Scope"
    };
    option (google.api.http) = {
      put: "/aaa/team-scopes/v1"
      body: "*"
      additional_bindings: {put: "/v1/scopes"}
    };
  }

  rpc DeleteScope(DeleteScopeRequest) returns (DeleteScopeResponse) {
    option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_operation) = {
      responses: {
        key: "400"
        value: {description: "Bad Request"}
      }
      responses: {
        key: "401"
        value: {description: "Unauthorized request"}
      }
      responses: {
        key: "500"
        value: {description: "Internal server error"}
      }
      tags: ["Scopes Service"]
      summary: "Delete Scope"
    };
    option (google.api.http) = {
      delete: "/aaa/team-scopes/v1/{id}"
      additional_bindings: {delete: "/v1/scopes/{id}"}
    };
  }
}

message Scope {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Scope"
      description: "This data structure represents a scope"
      required: []
    }
    external_docs: {
      url: "https://coralogix.com/docs/user-guides/account-management/user-management/scopes/"
      description: "Find out more about scopes"
    }
  };

  string id = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"60c82be2-413f-4b8e-8201-7f5c51e2ef2b\""}];
  string display_name = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"my-scope\""}];
  optional string description = 3 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"The best scope\""}];
  int32 team_id = 4 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "1234"}];
  repeated Filter filters = 5;
  string default_expression = 6 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"<v1>true\""}];
}

message Filter {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Filter"
      description: "This data structure represents a filter"
      required: []
    }
    external_docs: {
      url: "https://coralogix.com/docs/user-guides/account-management/user-management/scopes/"
      description: "Find out more about scopes"
    }
  };
  EntityType entity_type = 1;
  string expression = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"<v1>true\""}];
}

// We get user information from context
// Source: https://www.notion.so/coralogix/Generic-Scopes-7ba56b0ba8f846228ca34fa6257f7258?pvs=4#3d61c9746d0c407b9b40e35deca9e60c
message GetTeamScopesRequest {}

message GetTeamScopesByIdsRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Get Team Scopes By Ids Request"
      description: "This data structure represents a request to get team scopes by ids"
      required: ["ids"]
    }
    external_docs: {
      url: "https://coralogix.com/docs/user-guides/account-management/user-management/scopes/"
      description: "Find out more about scopes"
    }
  };
  repeated string ids = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"60c82be2-413f-4b8e-8201-7f5c51e2ef2b\""}];
}

message GetScopesResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Get Scopes Response"
      description: "This data structure represents a response to get scopes"
      required: ["scopes"]
    }
    external_docs: {
      url: "https://coralogix.com/docs/user-guides/account-management/user-management/scopes/"
      description: "Find out more about scopes"
    }
  };
  repeated Scope scopes = 1;
}

message CreateScopeRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Create Scope Request"
      description: "This data structure represents a request to create a scope"
      required: [
        "display_name",
        "filters"
      ]
    }
    external_docs: {
      url: "https://coralogix.com/docs/user-guides/account-management/user-management/scopes/"
      description: "Find out more about scopes"
    }
  };
  string display_name = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"my-scope\""}];
  optional string description = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"The best scope\""}];
  repeated Filter filters = 3;
  string default_expression = 4 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"<v1>true\""}];
}

message CreateScopeResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Create Scope Response"
      description: "This data structure represents a response to create a scope"
      required: ["scope"]
    }
    external_docs: {
      url: "https://coralogix.com/docs/user-guides/account-management/user-management/scopes/"
      description: "Find out more about scopes"
    }
  };
  Scope scope = 1;
}

message UpdateScopeRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Update Scope Request"
      description: "This data structure represents a request to update a scope"
      required: [
        "id",
        "display_name",
        "filters",
        "default_expression"
      ]
    }
    external_docs: {
      url: "https://coralogix.com/docs/user-guides/account-management/user-management/scopes/"
      description: "Find out more about scopes"
    }
  };
  string id = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"60c82be2-413f-4b8e-8201-7f5c51e2ef2b\""}];
  string display_name = 2 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"my-scope\""}];
  optional string description = 3 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"The best scope\""}];
  repeated Filter filters = 4;
  string default_expression = 5 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"<v1>true\""}];
}

message UpdateScopeResponse {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Update Scope Response"
      description: "This data structure represents a response to update a scope"
      required: ["scope"]
    }
    external_docs: {
      url: "https://coralogix.com/docs/user-guides/account-management/user-management/scopes/"
      description: "Find out more about scopes"
    }
  };
  Scope scope = 1;
}

message DeleteScopeRequest {
  option (grpc.gateway.protoc_gen_openapiv3.options.openapiv3_schema) = {
    json_schema: {
      title: "Delete Scope Request"
      description: "This data structure represents a request to delete a scope"
      required: ["id"]
    }
    external_docs: {
      url: "https://coralogix.com/docs/user-guides/account-management/user-management/scopes/"
      description: "Find out more about scopes"
    }
  };
  string id = 1 [(grpc.gateway.protoc_gen_openapiv3.options.openapiv3_field) = {example: "\"60c82be2-413f-4b8e-8201-7f5c51e2ef2b\""}];
}

message DeleteScopeResponse {}
