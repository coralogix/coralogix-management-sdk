{
  "openapi": "3.0.0",
  "info": {
    "title": "",
    "version": "1.0.0"
  },
  "paths": {
    "/logs/data-setup/v2": {
      "get": {
        "tags": [
          "Target Service"
        ],
        "summary": "Get target",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "S3TargetService_GetTarget",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/S3TargetServiceGetTargetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/logs/data-setup/v2';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/logs/data-setup/v2\"\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url https://api.coralogix.com/mgmt/openapi/logs/data-setup/v2 \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      },
      "post": {
        "tags": [
          "Target Service"
        ],
        "summary": "Set target",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "S3TargetService_SetTarget",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Set Target Response",
                "description": "This data structure is used to set a storage target for logs.",
                "type": "object",
                "properties": {
                  "isActive": {
                    "example": true,
                    "type": "boolean"
                  },
                  "s3": {
                    "$ref": "#/components/schemas/S3TargetSpec"
                  }
                },
                "required": [
                  "isActive",
                  "targetSpec"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/S3TargetServiceSetTargetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/logs/data-setup/v2';\n\nlet options = {\n  method: 'POST',\n  headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},\n  body: '{\"isActive\":true,\"s3\":{\"bucket\":\"bucket\",\"region\":\"us-west-2\"}}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/logs/data-setup/v2\"\n\npayload = {\n    \"isActive\": True,\n    \"s3\": {\n        \"bucket\": \"bucket\",\n        \"region\": \"us-west-2\"\n    }\n}\nheaders = {\n    \"Authorization\": \"Bearer <API_KEY>\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url https://api.coralogix.com/mgmt/openapi/logs/data-setup/v2 \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --header 'content-type: application/json' \\\n  --data '{\"isActive\":true,\"s3\":{\"bucket\":\"bucket\",\"region\":\"us-west-2\"}}'"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ArchiveSpec": {
        "externalDocs": {
          "description": "Find out more about archives",
          "url": "https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/"
        },
        "title": "Archive Spec",
        "description": "This data structure contains metadata about the archive.",
        "type": "object",
        "properties": {
          "archivingFormatId": {
            "example": "json_id",
            "type": "string"
          },
          "enableTags": {
            "example": true,
            "type": "boolean"
          },
          "isActive": {
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "bucket"
        ]
      },
      "ColorsByAggregation": {
        "type": "object",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/ColorsByAggregation"
          }
        },
        "additionalProperties": false
      },
      "ColorsByGroupBy": {
        "type": "object",
        "properties": {
          "groupBy": {
            "$ref": "#/components/schemas/ColorsByGroupBy"
          }
        },
        "additionalProperties": false
      },
      "ColorsByStack": {
        "type": "object",
        "properties": {
          "stack": {
            "$ref": "#/components/schemas/ColorsByStack"
          }
        },
        "additionalProperties": false
      },
      "FieldGroup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "FilterPathAndValues": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/FilterPathAndValuesMultipleValues"
          },
          {
            "$ref": "#/components/schemas/FilterPathAndValuesFilters"
          }
        ]
      },
      "FilterPathAndValuesFilters": {
        "externalDocs": {
          "url": ""
        },
        "title": "FilterPathAndValues",
        "description": "This data structure represents a filter path and values",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/Filters"
          },
          "path": {
            "example": "test",
            "type": "string"
          }
        },
        "required": [
          "path",
          "values"
        ],
        "additionalProperties": false
      },
      "FilterPathAndValuesMultipleValues": {
        "externalDocs": {
          "url": ""
        },
        "title": "FilterPathAndValues",
        "description": "This data structure represents a filter path and values",
        "type": "object",
        "properties": {
          "multipleValues": {
            "$ref": "#/components/schemas/MultipleValues"
          },
          "path": {
            "example": "test",
            "type": "string"
          }
        },
        "required": [
          "path",
          "values"
        ],
        "additionalProperties": false
      },
      "Filters": {
        "externalDocs": {
          "url": ""
        },
        "title": "Filters",
        "description": "This data structure represents a filter",
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/v3.FilterOperator"
          },
          "pathAndValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterPathAndValues"
            }
          }
        },
        "required": [
          "pathAndValues"
        ]
      },
      "IBMCosTargetSpec": {
        "externalDocs": {
          "description": "Find out more about archives",
          "url": "https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/"
        },
        "title": "IBM COS Target Spec",
        "description": "This data structure represents an IBM COS target.",
        "type": "object",
        "properties": {
          "bucketCrn": {
            "example": "bucket_crn",
            "type": "string"
          },
          "bucketType": {
            "$ref": "#/components/schemas/IbmBucketType"
          },
          "endpoint": {
            "example": "http://some.endpoint.com:8081",
            "type": "string"
          },
          "serviceCrn": {
            "example": "service_crn",
            "type": "string"
          }
        },
        "required": [
          "bucketCrn",
          "endpoint"
        ]
      },
      "IbmBucketType": {
        "type": "string",
        "enum": [
          "IBM_BUCKET_TYPE_UNSPECIFIED",
          "IBM_BUCKET_TYPE_EXTERNAL",
          "IBM_BUCKET_TYPE_INTERNAL"
        ]
      },
      "MultipleValues": {
        "type": "object",
        "properties": {
          "matcher": {
            "$ref": "#/components/schemas/events.v3.FilterMatcher"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "S3TargetServiceGetTargetResponse": {
        "externalDocs": {
          "description": "Find out more about archives",
          "url": "https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/"
        },
        "title": "Get Target Response",
        "description": "This data structure is used to retrieve a storage target for logs.",
        "type": "object",
        "properties": {
          "target": {
            "$ref": "#/components/schemas/Target"
          }
        },
        "required": [
          "target"
        ]
      },
      "S3TargetServiceSetTargetResponse": {
        "externalDocs": {
          "description": "Find out more about archives",
          "url": "https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/"
        },
        "title": "Set Target Response",
        "description": "This data structure is obtained after setting a storage target for logs.",
        "type": "object",
        "properties": {
          "target": {
            "$ref": "#/components/schemas/Target"
          }
        },
        "required": [
          "target"
        ]
      },
      "S3TargetSpec": {
        "externalDocs": {
          "description": "Find out more about archives",
          "url": "https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/"
        },
        "title": "S3 Target Spec",
        "description": "This data structure represents an S3 target.",
        "type": "object",
        "properties": {
          "bucket": {
            "example": "bucket",
            "type": "string"
          },
          "region": {
            "example": "us-west-2",
            "type": "string"
          }
        },
        "required": [
          "bucket"
        ]
      },
      "Target": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TargetS3"
          },
          {
            "$ref": "#/components/schemas/TargetIbmCos"
          }
        ]
      },
      "TargetIbmCos": {
        "externalDocs": {
          "description": "Find out more about archives",
          "url": "https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/"
        },
        "title": "Target",
        "description": "This data structure represents a target to archive logs.",
        "type": "object",
        "properties": {
          "archiveSpec": {
            "$ref": "#/components/schemas/ArchiveSpec"
          },
          "ibmCos": {
            "$ref": "#/components/schemas/IBMCosTargetSpec"
          }
        },
        "required": [
          "targetSpecarchiveSpec"
        ],
        "additionalProperties": false
      },
      "TargetS3": {
        "externalDocs": {
          "description": "Find out more about archives",
          "url": "https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/"
        },
        "title": "Target",
        "description": "This data structure represents a target to archive logs.",
        "type": "object",
        "properties": {
          "archiveSpec": {
            "$ref": "#/components/schemas/ArchiveSpec"
          },
          "s3": {
            "$ref": "#/components/schemas/S3TargetSpec"
          }
        },
        "required": [
          "targetSpecarchiveSpec"
        ],
        "additionalProperties": false
      },
      "common.Group": {
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/FieldGroup"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/common.Group"
            }
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "events.v3.FilterMatcher": {
        "type": "string",
        "enum": [
          "FILTER_MATCHER_TEXT_OR_UNSPECIFIED",
          "FILTER_MATCHER_REGEXP"
        ]
      },
      "v3.FilterOperator": {
        "type": "string",
        "enum": [
          "FILTER_OPERATOR_AND_OR_UNSPECIFIED",
          "FILTER_OPERATOR_OR"
        ]
      }
    },
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "API key authentication"
      }
    }
  }
}