{
  "openapi": "3.0.0",
  "info": {
    "title": "",
    "version": "1.0.0"
  },
  "paths": {
    "/v1/view_folders": {
      "get": {
        "tags": [
          "Folders for views service"
        ],
        "summary": "List view folders service",
        "description": "List view's folders",
        "externalDocs": {
          "url": ""
        },
        "operationId": "ViewsFoldersService_ListViewFolders",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListViewFoldersResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/v1/view_folders';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/v1/view_folders\"\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url https://api.coralogix.com/mgmt/openapi/v1/view_folders \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      },
      "post": {
        "tags": [
          "Folders for views service"
        ],
        "summary": "Create View Folder service",
        "description": "Create view folder",
        "externalDocs": {
          "url": ""
        },
        "operationId": "ViewsFoldersService_CreateViewFolder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateViewFolderRequest",
                "description": "Create view folder.",
                "type": "object",
                "properties": {
                  "name": {
                    "example": "My Folder",
                    "description": "Folder name",
                    "type": "string",
                    "minLength": 1
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewFolder"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/v1/view_folders';\n\nlet options = {\n  method: 'POST',\n  headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},\n  body: '{\"name\":\"My Folder\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/v1/view_folders\"\n\npayload = {\"name\": \"My Folder\"}\nheaders = {\n    \"Authorization\": \"Bearer <API_KEY>\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url https://api.coralogix.com/mgmt/openapi/v1/view_folders \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"My Folder\"}'"
          }
        ]
      }
    },
    "/v1/view_folders/{folder.id}": {
      "put": {
        "tags": [
          "Folders for views service"
        ],
        "summary": "Replace View Folder service",
        "description": "Replaces an existing view folder",
        "externalDocs": {
          "url": ""
        },
        "operationId": "ViewsFoldersService_ReplaceViewFolder",
        "parameters": [
          {
            "in": "path",
            "name": "folder.id",
            "required": true,
            "schema": {
              "example": "3dc02998-0b50-4ea8-b68a-4779d716fa1f",
              "description": "Unique identifier for folders",
              "type": "string",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "minLength": 36,
              "maxLength": 36
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "ViewFolder",
                "description": "View folder.",
                "type": "object",
                "properties": {
                  "name": {
                    "example": "My Folder",
                    "description": "Folder name",
                    "type": "string",
                    "minLength": 1
                  }
                },
                "required": [
                  "name"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewFolder"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f';\n\nlet options = {\n  method: 'PUT',\n  headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},\n  body: '{\"name\":\"My Folder\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f\"\n\npayload = {\"name\": \"My Folder\"}\nheaders = {\n    \"Authorization\": \"Bearer <API_KEY>\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request PUT \\\n  --url https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"My Folder\"}'"
          }
        ]
      }
    },
    "/v1/view_folders/{id}": {
      "get": {
        "tags": [
          "Folders for views service"
        ],
        "summary": "Get View Folder service",
        "description": "Create view folder",
        "externalDocs": {
          "url": ""
        },
        "operationId": "ViewsFoldersService_GetViewFolder",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "3dc02998-0b50-4ea8-b68a-4779d716fa1f",
              "description": "Unique identifier for folders",
              "type": "string",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "minLength": 36,
              "maxLength": 36
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewFolder"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f\"\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      },
      "delete": {
        "tags": [
          "Folders for views service"
        ],
        "summary": "Delete View Folder service",
        "description": "Deletes a view folder by ID",
        "externalDocs": {
          "url": ""
        },
        "operationId": "ViewsFoldersService_DeleteViewFolder",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "3dc02998-0b50-4ea8-b68a-4779d716fa1f",
              "description": "Unique identifier for folders",
              "type": "string",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "minLength": 36,
              "maxLength": 36
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteViewFolderResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f';\n\nlet options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f\"\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"DELETE\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request DELETE \\\n  --url https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ColorsByAggregation": {
        "type": "object",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/ColorsByAggregation"
          }
        },
        "additionalProperties": false
      },
      "ColorsByGroupBy": {
        "type": "object",
        "properties": {
          "groupBy": {
            "$ref": "#/components/schemas/ColorsByGroupBy"
          }
        },
        "additionalProperties": false
      },
      "ColorsByStack": {
        "type": "object",
        "properties": {
          "stack": {
            "$ref": "#/components/schemas/ColorsByStack"
          }
        },
        "additionalProperties": false
      },
      "DeleteViewFolderResponse": {
        "type": "object"
      },
      "FieldGroup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "FilterPathAndValues": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/FilterPathAndValuesMultipleValues"
          },
          {
            "$ref": "#/components/schemas/FilterPathAndValuesFilters"
          }
        ]
      },
      "FilterPathAndValuesFilters": {
        "externalDocs": {
          "url": ""
        },
        "title": "FilterPathAndValues",
        "description": "This data structure represents a filter path and values",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/Filters"
          },
          "path": {
            "example": "test",
            "type": "string"
          }
        },
        "required": [
          "path",
          "values"
        ],
        "additionalProperties": false
      },
      "FilterPathAndValuesMultipleValues": {
        "externalDocs": {
          "url": ""
        },
        "title": "FilterPathAndValues",
        "description": "This data structure represents a filter path and values",
        "type": "object",
        "properties": {
          "multipleValues": {
            "$ref": "#/components/schemas/MultipleValues"
          },
          "path": {
            "example": "test",
            "type": "string"
          }
        },
        "required": [
          "path",
          "values"
        ],
        "additionalProperties": false
      },
      "Filters": {
        "externalDocs": {
          "url": ""
        },
        "title": "Filters",
        "description": "This data structure represents a filter",
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/v3.FilterOperator"
          },
          "pathAndValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterPathAndValues"
            }
          }
        },
        "required": [
          "pathAndValues"
        ]
      },
      "ListViewFoldersResponse": {
        "type": "object",
        "properties": {
          "folders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViewFolder"
            }
          }
        }
      },
      "MultipleValues": {
        "type": "object",
        "properties": {
          "matcher": {
            "$ref": "#/components/schemas/events.v3.FilterMatcher"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ViewFolder": {
        "externalDocs": {
          "url": ""
        },
        "title": "ViewFolder",
        "description": "View folder.",
        "type": "object",
        "properties": {
          "id": {
            "example": "3dc02998-0b50-4ea8-b68a-4779d716fa1f",
            "description": "Unique identifier for folders",
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
            "minLength": 36,
            "maxLength": 36
          },
          "name": {
            "example": "My Folder",
            "description": "Folder name",
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "name"
        ]
      },
      "common.Group": {
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/FieldGroup"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/common.Group"
            }
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "events.v3.FilterMatcher": {
        "type": "string",
        "enum": [
          "FILTER_MATCHER_TEXT_OR_UNSPECIFIED",
          "FILTER_MATCHER_REGEXP"
        ]
      },
      "v3.FilterOperator": {
        "type": "string",
        "enum": [
          "FILTER_OPERATOR_AND_OR_UNSPECIFIED",
          "FILTER_OPERATOR_OR"
        ]
      }
    },
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "API key authentication"
      }
    }
  }
}