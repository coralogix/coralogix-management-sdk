{
  "openapi": "3.0.0",
  "info": {
    "title": "",
    "version": "1.0.0"
  },
  "paths": {
    "/aaa/team-scopes/v1": {
      "get": {
        "tags": [
          "Scopes Service"
        ],
        "summary": "Get Team Scopes By Ids",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "ScopesService_GetTeamScopesByIds",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "array",
              "items": {
                "example": "60c82be2-413f-4b8e-8201-7f5c51e2ef2b",
                "type": "string"
              }
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetScopesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1?ids=SOME_ARRAY_VALUE';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1\"\n\nquerystring = {\"ids\":\"SOME_ARRAY_VALUE\"}\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1?ids=SOME_ARRAY_VALUE' \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      },
      "put": {
        "tags": [
          "Scopes Service"
        ],
        "summary": "Update Scope",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "ScopesService_UpdateScope",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Update Scope Request",
                "description": "This data structure represents a request to update a scope",
                "type": "object",
                "properties": {
                  "defaultExpression": {
                    "example": "<v1>true",
                    "type": "string"
                  },
                  "description": {
                    "example": "The best scope",
                    "type": "string"
                  },
                  "displayName": {
                    "example": "my-scope",
                    "type": "string"
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/scopes.v1.Filter"
                    }
                  },
                  "id": {
                    "example": "60c82be2-413f-4b8e-8201-7f5c51e2ef2b",
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "displayName",
                  "filters",
                  "defaultExpression"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateScopeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1';\n\nlet options = {\n  method: 'PUT',\n  headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},\n  body: '{\"defaultExpression\":\"<v1>true\",\"description\":\"The best scope\",\"displayName\":\"my-scope\",\"filters\":[{\"entityType\":\"ENTITY_TYPE_UNSPECIFIED\",\"expression\":\"<v1>true\"}],\"id\":\"60c82be2-413f-4b8e-8201-7f5c51e2ef2b\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1\"\n\npayload = {\n    \"defaultExpression\": \"<v1>true\",\n    \"description\": \"The best scope\",\n    \"displayName\": \"my-scope\",\n    \"filters\": [\n        {\n            \"entityType\": \"ENTITY_TYPE_UNSPECIFIED\",\n            \"expression\": \"<v1>true\"\n        }\n    ],\n    \"id\": \"60c82be2-413f-4b8e-8201-7f5c51e2ef2b\"\n}\nheaders = {\n    \"Authorization\": \"Bearer <API_KEY>\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request PUT \\\n  --url https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1 \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --header 'content-type: application/json' \\\n  --data '{\"defaultExpression\":\"<v1>true\",\"description\":\"The best scope\",\"displayName\":\"my-scope\",\"filters\":[{\"entityType\":\"ENTITY_TYPE_UNSPECIFIED\",\"expression\":\"<v1>true\"}],\"id\":\"60c82be2-413f-4b8e-8201-7f5c51e2ef2b\"}'"
          }
        ]
      },
      "post": {
        "tags": [
          "Scopes Service"
        ],
        "summary": "Create Scope",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "ScopesService_CreateScope",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Create Scope Request",
                "description": "This data structure represents a request to create a scope",
                "type": "object",
                "properties": {
                  "defaultExpression": {
                    "example": "<v1>true",
                    "type": "string"
                  },
                  "description": {
                    "example": "The best scope",
                    "type": "string"
                  },
                  "displayName": {
                    "example": "my-scope",
                    "type": "string"
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/scopes.v1.Filter"
                    }
                  }
                },
                "required": [
                  "displayName",
                  "filters"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateScopeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1';\n\nlet options = {\n  method: 'POST',\n  headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},\n  body: '{\"defaultExpression\":\"<v1>true\",\"description\":\"The best scope\",\"displayName\":\"my-scope\",\"filters\":[{\"entityType\":\"ENTITY_TYPE_UNSPECIFIED\",\"expression\":\"<v1>true\"}]}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1\"\n\npayload = {\n    \"defaultExpression\": \"<v1>true\",\n    \"description\": \"The best scope\",\n    \"displayName\": \"my-scope\",\n    \"filters\": [\n        {\n            \"entityType\": \"ENTITY_TYPE_UNSPECIFIED\",\n            \"expression\": \"<v1>true\"\n        }\n    ]\n}\nheaders = {\n    \"Authorization\": \"Bearer <API_KEY>\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1 \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --header 'content-type: application/json' \\\n  --data '{\"defaultExpression\":\"<v1>true\",\"description\":\"The best scope\",\"displayName\":\"my-scope\",\"filters\":[{\"entityType\":\"ENTITY_TYPE_UNSPECIFIED\",\"expression\":\"<v1>true\"}]}'"
          }
        ]
      }
    },
    "/aaa/team-scopes/v1/list": {
      "get": {
        "tags": [
          "Scopes Service"
        ],
        "summary": "Get Team Scopes",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "ScopesService_GetTeamScopes",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetScopesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1/list';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1/list\"\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1/list \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/aaa/team-scopes/v1/{id}": {
      "delete": {
        "tags": [
          "Scopes Service"
        ],
        "summary": "Delete Scope",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "ScopesService_DeleteScope",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "60c82be2-413f-4b8e-8201-7f5c51e2ef2b",
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteScopeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1/60c82be2-413f-4b8e-8201-7f5c51e2ef2b';\n\nlet options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1/60c82be2-413f-4b8e-8201-7f5c51e2ef2b\"\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"DELETE\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request DELETE \\\n  --url https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1/60c82be2-413f-4b8e-8201-7f5c51e2ef2b \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "CreateScopeResponse": {
        "externalDocs": {
          "description": "Find out more about scopes",
          "url": "https://coralogix.com/docs/user-guides/account-management/user-management/scopes/"
        },
        "title": "Create Scope Response",
        "description": "This data structure represents a response to create a scope",
        "type": "object",
        "properties": {
          "scope": {
            "$ref": "#/components/schemas/scopes.v1.Scope"
          }
        },
        "required": [
          "scope"
        ]
      },
      "DeleteScopeResponse": {
        "type": "object"
      },
      "FieldGroup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "FilterPathAndValues": {
        "oneOf": [
          {
            "externalDocs": {
              "url": ""
            },
            "title": "FilterPathAndValues",
            "description": "This data structure represents a filter path and values",
            "type": "object",
            "properties": {
              "multipleValues": {
                "$ref": "#/components/schemas/MultipleValues"
              },
              "path": {
                "example": "test",
                "type": "string"
              }
            },
            "required": [
              "path",
              "values"
            ],
            "additionalProperties": false
          },
          {
            "externalDocs": {
              "url": ""
            },
            "title": "FilterPathAndValues",
            "description": "This data structure represents a filter path and values",
            "type": "object",
            "properties": {
              "filters": {
                "$ref": "#/components/schemas/Filters"
              },
              "path": {
                "example": "test",
                "type": "string"
              }
            },
            "required": [
              "path",
              "values"
            ],
            "additionalProperties": false
          }
        ]
      },
      "Filters": {
        "externalDocs": {
          "url": ""
        },
        "title": "Filters",
        "description": "This data structure represents a filter",
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/v3.FilterOperator"
          },
          "pathAndValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterPathAndValues"
            }
          }
        },
        "required": [
          "pathAndValues"
        ]
      },
      "GetScopesResponse": {
        "externalDocs": {
          "description": "Find out more about scopes",
          "url": "https://coralogix.com/docs/user-guides/account-management/user-management/scopes/"
        },
        "title": "Get Scopes Response",
        "description": "This data structure represents a response to get scopes",
        "type": "object",
        "properties": {
          "scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/scopes.v1.Scope"
            }
          }
        },
        "required": [
          "scopes"
        ]
      },
      "MultipleValues": {
        "type": "object",
        "properties": {
          "matcher": {
            "$ref": "#/components/schemas/events.v3.FilterMatcher"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateScopeResponse": {
        "externalDocs": {
          "description": "Find out more about scopes",
          "url": "https://coralogix.com/docs/user-guides/account-management/user-management/scopes/"
        },
        "title": "Update Scope Response",
        "description": "This data structure represents a response to update a scope",
        "type": "object",
        "properties": {
          "scope": {
            "$ref": "#/components/schemas/scopes.v1.Scope"
          }
        },
        "required": [
          "scope"
        ]
      },
      "common.Group": {
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/FieldGroup"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/common.Group"
            }
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "events.v3.FilterMatcher": {
        "type": "string",
        "enum": [
          "FILTER_MATCHER_TEXT_OR_UNSPECIFIED",
          "FILTER_MATCHER_REGEXP"
        ]
      },
      "scopes.v1.Filter": {
        "externalDocs": {
          "description": "Find out more about scopes",
          "url": "https://coralogix.com/docs/user-guides/account-management/user-management/scopes/"
        },
        "title": "Filter",
        "description": "This data structure represents a filter",
        "type": "object",
        "properties": {
          "entityType": {
            "$ref": "#/components/schemas/v1.EntityType"
          },
          "expression": {
            "example": "<v1>true",
            "type": "string"
          }
        }
      },
      "scopes.v1.Scope": {
        "externalDocs": {
          "description": "Find out more about scopes",
          "url": "https://coralogix.com/docs/user-guides/account-management/user-management/scopes/"
        },
        "title": "Scope",
        "description": "This data structure represents a scope",
        "type": "object",
        "properties": {
          "defaultExpression": {
            "example": "<v1>true",
            "type": "string"
          },
          "description": {
            "example": "The best scope",
            "type": "string"
          },
          "displayName": {
            "example": "my-scope",
            "type": "string"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/scopes.v1.Filter"
            }
          },
          "id": {
            "example": "60c82be2-413f-4b8e-8201-7f5c51e2ef2b",
            "type": "string"
          },
          "teamId": {
            "example": 1234,
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "v1.EntityType": {
        "type": "string",
        "enum": [
          "ENTITY_TYPE_UNSPECIFIED",
          "ENTITY_TYPE_LOGS",
          "ENTITY_TYPE_SPANS"
        ]
      },
      "v3.FilterOperator": {
        "type": "string",
        "enum": [
          "FILTER_OPERATOR_AND_OR_UNSPECIFIED",
          "FILTER_OPERATOR_OR"
        ]
      }
    },
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "API key authentication"
      }
    }
  }
}