{
  "openapi": "3.0.0",
  "info": {
    "title": "",
    "version": "1.0.0"
  },
  "paths": {
    "/incidents/incidents/v1": {
      "post": {
        "tags": [
          "Incidents service"
        ],
        "summary": "List incidents with filters",
        "description": "Lists all available incidents based on specified filters and order. The list is ordered in an unspecified direction and sorted by creation time.\n\nRequires the following permissions:\n- `incidents:read`",
        "externalDocs": {
          "url": ""
        },
        "operationId": "IncidentsService_ListIncidents",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "externalDocs": {
                "url": ""
              },
              "title": "Incident query filter",
              "description": "Filter configuration for incidents",
              "type": "object",
              "properties": {
                "applicationName": {
                  "type": "array",
                  "items": {
                    "description": "Filter by application names",
                    "type": "string"
                  }
                },
                "assignee": {
                  "type": "array",
                  "items": {
                    "description": "Filter by assignee",
                    "type": "string"
                  }
                },
                "contextualLabels": {
                  "description": "Filter by contextual labels",
                  "type": "object",
                  "additionalProperties": {}
                },
                "createdAtRange": {},
                "displayLabels": {
                  "description": "Filter by display labels",
                  "type": "object",
                  "additionalProperties": {}
                },
                "endTime": {
                  "deprecated": true,
                  "description": "Filters all incidents that were open in the given timeframe end time (deprecated, use incident_open_range instead)",
                  "type": "string",
                  "format": "date-time"
                },
                "incidentDurationRange": {},
                "isMuted": {
                  "description": "Indicates if the incident is muted",
                  "type": "boolean"
                },
                "metaLabels": {
                  "type": "array",
                  "items": {
                    "externalDocs": {
                      "url": ""
                    },
                    "title": "Incident meta label",
                    "type": "object",
                    "properties": {
                      "key": {
                        "example": "key",
                        "type": "string"
                      },
                      "value": {
                        "example": "value",
                        "type": "string"
                      }
                    }
                  }
                },
                "metaLabelsOp": {
                  "$ref": "#/components/schemas/v1.FilterOperator"
                },
                "searchQuery": {},
                "severity": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentSeverity"
                  }
                },
                "startTime": {
                  "deprecated": true,
                  "description": "Filters all incidents that were open in the given timeframe start time (deprecated, use incident_open_range instead)",
                  "type": "string",
                  "format": "date-time"
                },
                "state": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentState"
                  }
                },
                "status": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentStatus"
                  }
                },
                "subsystemName": {
                  "type": "array",
                  "items": {
                    "description": "Filter by subsystem names",
                    "type": "string"
                  }
                }
              }
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "pagination",
            "schema": {
              "externalDocs": {
                "url": ""
              },
              "title": "Pagination request",
              "description": "Pagination parameters for list requests",
              "type": "object",
              "properties": {
                "pageSize": {
                  "example": 10,
                  "description": "Number of items to return per page",
                  "type": "integer",
                  "format": "int64"
                },
                "pageToken": {
                  "example": "next_page_token",
                  "description": "Token for the next page of results",
                  "type": "string"
                }
              },
              "required": [
                "pageSize"
              ]
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "order_bys",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/V1OrderByIncidentField"
                  },
                  {
                    "$ref": "#/components/schemas/V1OrderByContextualLabel"
                  }
                ]
              }
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListIncidentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "incidents:read"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1?filter=SOME_OBJECT_VALUE&pagination=SOME_OBJECT_VALUE&order_bys=SOME_ARRAY_VALUE';\n\nlet options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1\"\n\nquerystring = {\"filter\":\"SOME_OBJECT_VALUE\",\"pagination\":\"SOME_OBJECT_VALUE\",\"order_bys\":\"SOME_ARRAY_VALUE\"}\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"POST\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1?filter=SOME_OBJECT_VALUE&pagination=SOME_OBJECT_VALUE&order_bys=SOME_ARRAY_VALUE' \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/incidents/incidents/v1/acknowledge": {
      "post": {
        "tags": [
          "Incidents service"
        ],
        "summary": "Acknowledge incidents",
        "description": "Mark one or more incidents as acknowledged.\n\nRequires the following permissions:\n- `incidents:acknowledge`",
        "externalDocs": {
          "url": ""
        },
        "operationId": "IncidentsService_AcknowledgeIncidents",
        "parameters": [
          {
            "in": "query",
            "name": "incident_ids",
            "schema": {
              "type": "array",
              "items": {
                "example": [
                  "incident_id_1",
                  "incident_id_2"
                ],
                "description": "List of incident IDs to acknowledge",
                "type": "string"
              }
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcknowledgeIncidentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "incidents:acknowledge"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/acknowledge?incident_ids=SOME_ARRAY_VALUE';\n\nlet options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/acknowledge\"\n\nquerystring = {\"incident_ids\":\"SOME_ARRAY_VALUE\"}\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"POST\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/acknowledge?incident_ids=SOME_ARRAY_VALUE' \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/incidents/incidents/v1/aggregations": {
      "get": {
        "tags": [
          "Incidents service"
        ],
        "summary": "Get incident aggregations",
        "description": "Retrieve aggregated incident data with support for grouping and filtering.\n\nRequires the following permissions:\n- `incidents:read`",
        "externalDocs": {
          "url": ""
        },
        "operationId": "IncidentsService_ListIncidentAggregations",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "externalDocs": {
                "url": ""
              },
              "title": "Incident query filter",
              "description": "Filter configuration for incidents",
              "type": "object",
              "properties": {
                "applicationName": {
                  "type": "array",
                  "items": {
                    "description": "Filter by application names",
                    "type": "string"
                  }
                },
                "assignee": {
                  "type": "array",
                  "items": {
                    "description": "Filter by assignee",
                    "type": "string"
                  }
                },
                "contextualLabels": {
                  "description": "Filter by contextual labels",
                  "type": "object",
                  "additionalProperties": {}
                },
                "createdAtRange": {},
                "displayLabels": {
                  "description": "Filter by display labels",
                  "type": "object",
                  "additionalProperties": {}
                },
                "endTime": {
                  "deprecated": true,
                  "description": "Filters all incidents that were open in the given timeframe end time (deprecated, use incident_open_range instead)",
                  "type": "string",
                  "format": "date-time"
                },
                "incidentDurationRange": {},
                "isMuted": {
                  "description": "Indicates if the incident is muted",
                  "type": "boolean"
                },
                "metaLabels": {
                  "type": "array",
                  "items": {
                    "externalDocs": {
                      "url": ""
                    },
                    "title": "Incident meta label",
                    "type": "object",
                    "properties": {
                      "key": {
                        "example": "key",
                        "type": "string"
                      },
                      "value": {
                        "example": "value",
                        "type": "string"
                      }
                    }
                  }
                },
                "metaLabelsOp": {
                  "$ref": "#/components/schemas/v1.FilterOperator"
                },
                "searchQuery": {},
                "severity": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentSeverity"
                  }
                },
                "startTime": {
                  "deprecated": true,
                  "description": "Filters all incidents that were open in the given timeframe start time (deprecated, use incident_open_range instead)",
                  "type": "string",
                  "format": "date-time"
                },
                "state": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentState"
                  }
                },
                "status": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentStatus"
                  }
                },
                "subsystemName": {
                  "type": "array",
                  "items": {
                    "description": "Filter by subsystem names",
                    "type": "string"
                  }
                }
              }
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "group_bys",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/GroupByIncidentField"
                  },
                  {
                    "$ref": "#/components/schemas/GroupByContextualLabel"
                  }
                ]
              }
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "pagination",
            "schema": {
              "externalDocs": {
                "url": ""
              },
              "title": "Pagination request",
              "description": "Pagination parameters for list requests",
              "type": "object",
              "properties": {
                "pageSize": {
                  "example": 10,
                  "description": "Number of items to return per page",
                  "type": "integer",
                  "format": "int64"
                },
                "pageToken": {
                  "example": "next_page_token",
                  "description": "Token for the next page of results",
                  "type": "string"
                }
              },
              "required": [
                "pageSize"
              ]
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListIncidentAggregationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "incidents:read"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/aggregations?filter=SOME_OBJECT_VALUE&group_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/aggregations\"\n\nquerystring = {\"filter\":\"SOME_OBJECT_VALUE\",\"group_bys\":\"SOME_ARRAY_VALUE\",\"pagination\":\"SOME_OBJECT_VALUE\"}\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/aggregations?filter=SOME_OBJECT_VALUE&group_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE' \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/incidents/incidents/v1/batch": {
      "get": {
        "tags": [
          "Incidents service"
        ],
        "summary": "Get multiple incidents by IDs",
        "description": "Retrieve multiple incidents by their IDs in a single request.\n\nRequires the following permissions:\n- `incidents:read`",
        "externalDocs": {
          "url": ""
        },
        "operationId": "IncidentsService_BatchGetIncident",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchGetIncidentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "incidents:read"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/batch?ids=SOME_ARRAY_VALUE';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/batch\"\n\nquerystring = {\"ids\":\"SOME_ARRAY_VALUE\"}\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/batch?ids=SOME_ARRAY_VALUE' \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/incidents/incidents/v1/by-user": {
      "post": {
        "tags": [
          "Incidents service"
        ],
        "summary": "Assign incidents to a user",
        "description": "Assign one or more incidents to a specific user.\n\nRequires the following permissions:\n- `incidents:assign`",
        "externalDocs": {
          "url": ""
        },
        "operationId": "IncidentsService_AssignIncidents",
        "parameters": [
          {
            "in": "query",
            "name": "incident_ids",
            "schema": {
              "type": "array",
              "items": {
                "example": [
                  "incident_id_1",
                  "incident_id_2"
                ],
                "description": "List of incident IDs to assign",
                "type": "string"
              }
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "assigned_to",
            "schema": {
              "externalDocs": {
                "url": ""
              },
              "title": "User details",
              "type": "object",
              "properties": {
                "userId": {
                  "example": "user_id",
                  "type": "string"
                }
              },
              "required": [
                "userId"
              ]
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignIncidentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "incidents:assign"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/by-user?incident_ids=SOME_ARRAY_VALUE&assigned_to=SOME_OBJECT_VALUE';\n\nlet options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/by-user\"\n\nquerystring = {\"incident_ids\":\"SOME_ARRAY_VALUE\",\"assigned_to\":\"SOME_OBJECT_VALUE\"}\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"POST\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/by-user?incident_ids=SOME_ARRAY_VALUE&assigned_to=SOME_OBJECT_VALUE' \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      },
      "delete": {
        "tags": [
          "Incidents service"
        ],
        "summary": "Remove incident user assignments",
        "description": "Remove user assignments from one or more incidents.\n\nRequires the following permissions:\n- `incidents:assign`",
        "externalDocs": {
          "url": ""
        },
        "operationId": "IncidentsService_UnassignIncidents",
        "parameters": [
          {
            "in": "query",
            "name": "incident_ids",
            "schema": {
              "type": "array",
              "items": {
                "example": [
                  "incident_id_1",
                  "incident_id_2"
                ],
                "description": "List of incident IDs to unassign",
                "type": "string"
              }
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnassignIncidentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "incidents:assign"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/by-user?incident_ids=SOME_ARRAY_VALUE';\n\nlet options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/by-user\"\n\nquerystring = {\"incident_ids\":\"SOME_ARRAY_VALUE\"}\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request DELETE \\\n  --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/by-user?incident_ids=SOME_ARRAY_VALUE' \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/incidents/incidents/v1/close": {
      "post": {
        "tags": [
          "Incidents service"
        ],
        "summary": "Close incidents",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "IncidentsService_CloseIncidents",
        "parameters": [
          {
            "in": "query",
            "name": "incident_ids",
            "schema": {
              "type": "array",
              "items": {
                "example": [
                  "incident_id_1",
                  "incident_id_2"
                ],
                "description": "List of incident IDs to close",
                "type": "string"
              }
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloseIncidentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "incidents:close"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/close?incident_ids=SOME_ARRAY_VALUE';\n\nlet options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/close\"\n\nquerystring = {\"incident_ids\":\"SOME_ARRAY_VALUE\"}\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"POST\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/close?incident_ids=SOME_ARRAY_VALUE' \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/incidents/incidents/v1/events": {
      "get": {
        "tags": [
          "Incidents service"
        ],
        "summary": "List incident events with filters",
        "description": "List incident events with support for filtering, pagination, and ordering.\n\nRequires the following permissions:\n- `incidents:read`",
        "externalDocs": {
          "url": ""
        },
        "operationId": "IncidentsService_ListIncidentEvents",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "externalDocs": {
                "url": ""
              },
              "title": "Incident event query filter",
              "description": "Filter configuration for incident events",
              "type": "object",
              "properties": {
                "contextualLabels": {
                  "description": "The contextual labels of the incident",
                  "type": "object",
                  "additionalProperties": {}
                },
                "displayLabels": {
                  "description": "The display labels of the incident",
                  "type": "object",
                  "additionalProperties": {}
                },
                "isMuted": {
                  "description": "Indicates if the incident is muted",
                  "type": "boolean"
                },
                "labels": {},
                "name": {
                  "description": "The name of the incident",
                  "type": "string"
                },
                "severity": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentSeverity"
                  }
                },
                "status": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentStatus"
                  }
                },
                "timestamp": {}
              }
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "pagination",
            "schema": {
              "externalDocs": {
                "url": ""
              },
              "title": "Pagination request",
              "description": "Pagination parameters for list requests",
              "type": "object",
              "properties": {
                "pageSize": {
                  "example": 10,
                  "description": "Number of items to return per page",
                  "type": "integer",
                  "format": "int64"
                },
                "pageToken": {
                  "example": "next_page_token",
                  "description": "Token for the next page of results",
                  "type": "string"
                }
              },
              "required": [
                "pageSize"
              ]
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "externalDocs": {
                "url": ""
              },
              "title": "List incident events order by request",
              "type": "object",
              "properties": {
                "direction": {
                  "$ref": "#/components/schemas/v1.OrderByDirection"
                },
                "field": {
                  "$ref": "#/components/schemas/IncidentEventOrderByFieldType"
                }
              }
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListIncidentEventsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "incidents:read"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events?filter=SOME_OBJECT_VALUE&pagination=SOME_OBJECT_VALUE&order_by=SOME_OBJECT_VALUE';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events\"\n\nquerystring = {\"filter\":\"SOME_OBJECT_VALUE\",\"pagination\":\"SOME_OBJECT_VALUE\",\"order_by\":\"SOME_OBJECT_VALUE\"}\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events?filter=SOME_OBJECT_VALUE&pagination=SOME_OBJECT_VALUE&order_by=SOME_OBJECT_VALUE' \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/incidents/incidents/v1/events/count": {
      "get": {
        "tags": [
          "Incidents service"
        ],
        "summary": "Get total count of incident events",
        "description": "Retrieve the total count of incident events matching a filter.\n\nRequires the following permissions:\n- `incidents:read`",
        "externalDocs": {
          "url": ""
        },
        "operationId": "IncidentsService_ListIncidentEventsTotalCount",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "externalDocs": {
                "url": ""
              },
              "title": "Incident event query filter",
              "description": "Filter configuration for incident events",
              "type": "object",
              "properties": {
                "contextualLabels": {
                  "description": "The contextual labels of the incident",
                  "type": "object",
                  "additionalProperties": {}
                },
                "displayLabels": {
                  "description": "The display labels of the incident",
                  "type": "object",
                  "additionalProperties": {}
                },
                "isMuted": {
                  "description": "Indicates if the incident is muted",
                  "type": "boolean"
                },
                "labels": {},
                "name": {
                  "description": "The name of the incident",
                  "type": "string"
                },
                "severity": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentSeverity"
                  }
                },
                "status": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentStatus"
                  }
                },
                "timestamp": {}
              }
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListIncidentEventsTotalCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "incidents:read"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/count?filter=SOME_OBJECT_VALUE';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/count\"\n\nquerystring = {\"filter\":\"SOME_OBJECT_VALUE\"}\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/count?filter=SOME_OBJECT_VALUE' \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/incidents/incidents/v1/events/filter-values": {
      "get": {
        "tags": [
          "Incidents service"
        ],
        "summary": "Get available incident event filter values",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "IncidentsService_ListIncidentEventsFilterValues",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "externalDocs": {
                "url": ""
              },
              "title": "Incident event query filter",
              "description": "Filter configuration for incident events",
              "type": "object",
              "properties": {
                "contextualLabels": {
                  "description": "The contextual labels of the incident",
                  "type": "object",
                  "additionalProperties": {}
                },
                "displayLabels": {
                  "description": "The display labels of the incident",
                  "type": "object",
                  "additionalProperties": {}
                },
                "isMuted": {
                  "description": "Indicates if the incident is muted",
                  "type": "boolean"
                },
                "labels": {},
                "name": {
                  "description": "The name of the incident",
                  "type": "string"
                },
                "severity": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentSeverity"
                  }
                },
                "status": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentStatus"
                  }
                },
                "timestamp": {}
              }
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListIncidentEventsFilterValuesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "incidents:read"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/filter-values?filter=SOME_OBJECT_VALUE';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/filter-values\"\n\nquerystring = {\"filter\":\"SOME_OBJECT_VALUE\"}\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/filter-values?filter=SOME_OBJECT_VALUE' \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/incidents/incidents/v1/events/{event_id}": {
      "get": {
        "tags": [
          "Incidents service"
        ],
        "summary": "Get incident by event ID",
        "description": "Retrieve detailed information about a single incident by related alert event id.\n\nRequires the following permissions:\n- `incidents:read`",
        "externalDocs": {
          "url": ""
        },
        "operationId": "IncidentsService_GetIncidentByEventId",
        "parameters": [
          {
            "in": "path",
            "name": "event_id",
            "required": true,
            "schema": {
              "example": "event_id_1",
              "description": "Event ID associated to the Incident to acknowledge",
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetIncidentByEventIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "incidents:read"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1\"\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1 \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/incidents/incidents/v1/events/{event_id}/acknowledge": {
      "post": {
        "tags": [
          "Incidents service"
        ],
        "summary": "Acknowledge incident by event id",
        "description": "Mark incident as acknowledged by event id.\n\nRequires the following permissions:\n- `incidents:acknowledge`",
        "externalDocs": {
          "url": ""
        },
        "operationId": "IncidentsService_AcknowledgeIncidentByEventId",
        "parameters": [
          {
            "in": "path",
            "name": "event_id",
            "required": true,
            "schema": {
              "example": "event_id_1",
              "description": "Event ID associated to the Incident to acknowledge",
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcknowledgeIncidentByEventIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "incidents:acknowledge"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1/acknowledge';\n\nlet options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1/acknowledge\"\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1/acknowledge \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/incidents/incidents/v1/events/{event_id}/resolve": {
      "post": {
        "tags": [
          "Incidents service"
        ],
        "summary": "Resolve incident by event id",
        "description": "Mark incident as resolved by event id.\n\nRequires the following permissions:\n- `incidents:close`",
        "externalDocs": {
          "url": ""
        },
        "operationId": "IncidentsService_ResolveIncidentByEventId",
        "parameters": [
          {
            "in": "path",
            "name": "event_id",
            "required": true,
            "schema": {
              "example": "event_id_1",
              "description": "Event ID associated to the Incident to resolve",
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResolveIncidentByEventIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "incidents:close"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1/resolve';\n\nlet options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1/resolve\"\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1/resolve \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/incidents/incidents/v1/filter-values": {
      "post": {
        "tags": [
          "Incidents service"
        ],
        "summary": "Get available filter values",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "IncidentsService_GetFilterValues",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "externalDocs": {
                "url": ""
              },
              "title": "Incident query filter",
              "description": "Filter configuration for incidents",
              "type": "object",
              "properties": {
                "applicationName": {
                  "type": "array",
                  "items": {
                    "description": "Filter by application names",
                    "type": "string"
                  }
                },
                "assignee": {
                  "type": "array",
                  "items": {
                    "description": "Filter by assignee",
                    "type": "string"
                  }
                },
                "contextualLabels": {
                  "description": "Filter by contextual labels",
                  "type": "object",
                  "additionalProperties": {}
                },
                "createdAtRange": {},
                "displayLabels": {
                  "description": "Filter by display labels",
                  "type": "object",
                  "additionalProperties": {}
                },
                "endTime": {
                  "deprecated": true,
                  "description": "Filters all incidents that were open in the given timeframe end time (deprecated, use incident_open_range instead)",
                  "type": "string",
                  "format": "date-time"
                },
                "incidentDurationRange": {},
                "isMuted": {
                  "description": "Indicates if the incident is muted",
                  "type": "boolean"
                },
                "metaLabels": {
                  "type": "array",
                  "items": {
                    "externalDocs": {
                      "url": ""
                    },
                    "title": "Incident meta label",
                    "type": "object",
                    "properties": {
                      "key": {
                        "example": "key",
                        "type": "string"
                      },
                      "value": {
                        "example": "value",
                        "type": "string"
                      }
                    }
                  }
                },
                "metaLabelsOp": {
                  "$ref": "#/components/schemas/v1.FilterOperator"
                },
                "searchQuery": {},
                "severity": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentSeverity"
                  }
                },
                "startTime": {
                  "deprecated": true,
                  "description": "Filters all incidents that were open in the given timeframe start time (deprecated, use incident_open_range instead)",
                  "type": "string",
                  "format": "date-time"
                },
                "state": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentState"
                  }
                },
                "status": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentStatus"
                  }
                },
                "subsystemName": {
                  "type": "array",
                  "items": {
                    "description": "Filter by subsystem names",
                    "type": "string"
                  }
                }
              }
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFilterValuesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "incidents:read"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/filter-values?filter=SOME_OBJECT_VALUE';\n\nlet options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/filter-values\"\n\nquerystring = {\"filter\":\"SOME_OBJECT_VALUE\"}\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"POST\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/filter-values?filter=SOME_OBJECT_VALUE' \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/incidents/incidents/v1/resolve": {
      "post": {
        "tags": [
          "Incidents service"
        ],
        "summary": "Resolve incidents",
        "description": "Mark one or more incidents as resolved.\n\nRequires the following permissions:\n- `incidents:close`",
        "externalDocs": {
          "url": ""
        },
        "operationId": "IncidentsService_ResolveIncidents",
        "parameters": [
          {
            "in": "query",
            "name": "incident_ids",
            "schema": {
              "type": "array",
              "items": {
                "example": [
                  "incident_id_1",
                  "incident_id_2"
                ],
                "description": "List of incident IDs to resolve",
                "type": "string"
              }
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResolveIncidentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "incidents:close"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/resolve?incident_ids=SOME_ARRAY_VALUE';\n\nlet options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/resolve\"\n\nquerystring = {\"incident_ids\":\"SOME_ARRAY_VALUE\"}\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"POST\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/resolve?incident_ids=SOME_ARRAY_VALUE' \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/incidents/incidents/v1/{id}": {
      "get": {
        "tags": [
          "Incidents service"
        ],
        "summary": "Get incident by ID",
        "description": "Retrieve detailed information about a single incident by its unique identifier.\n\nRequires the following permissions:\n- `incidents:read`",
        "externalDocs": {
          "url": ""
        },
        "operationId": "IncidentsService_GetIncident",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "incident_id",
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetIncidentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "incidents:read"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/incident_id';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/incident_id\"\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/incident_id \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/incidents/incidents/v1/{incident_id}/events": {
      "get": {
        "tags": [
          "Incidents service"
        ],
        "summary": "Get incident events",
        "description": "Retrieve a chronological list of all events associated with a specific incident. Includes state changes, assignments, acknowledgments, and resolutions.\n\nRequires the following permissions:\n- `incidents:read`",
        "externalDocs": {
          "url": ""
        },
        "operationId": "IncidentsService_GetIncidentEvents",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "example": "incident_id",
              "description": "ID of the incident to retrieve events for",
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetIncidentEventsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "incidents:read"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/incident_id/events';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/incident_id/events\"\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/incident_id/events \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AcknowledgeIncidentByEventIdResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "Acknowledge incident by event id response",
        "description": "Response containing the updated incident after acknowledgment",
        "type": "object",
        "properties": {
          "incident": {
            "$ref": "#/components/schemas/Incident"
          }
        },
        "required": [
          "incident"
        ]
      },
      "AcknowledgeIncidentsResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "Acknowledge incidents response",
        "description": "Response containing the updated incidents after acknowledgment",
        "type": "object",
        "properties": {
          "incidents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Incident"
            }
          }
        },
        "required": [
          "incidents"
        ]
      },
      "AssignIncidentsResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "Assign incidents response",
        "description": "Response containing the updated incidents after assignment",
        "type": "object",
        "properties": {
          "incidents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Incident"
            }
          }
        },
        "required": [
          "incidents"
        ]
      },
      "AssigneeWithCount": {
        "externalDocs": {
          "url": ""
        },
        "title": "Assignee with count",
        "type": "object",
        "properties": {
          "assignee": {
            "example": "assignee",
            "type": "string"
          },
          "count": {
            "example": 10,
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "assignee",
          "count"
        ]
      },
      "Assignment": {
        "externalDocs": {
          "url": ""
        },
        "title": "Assignment",
        "description": "Details of the user who assigned the incident and the user to whom it was assigned",
        "type": "object",
        "properties": {
          "assignedBy": {
            "$ref": "#/components/schemas/UserDetails"
          },
          "assignedTo": {
            "$ref": "#/components/schemas/UserDetails"
          }
        },
        "required": [
          "assignedTo",
          "assignedBy"
        ]
      },
      "BatchGetIncidentResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "Batch get incidents response",
        "description": "Response containing the requested incidents and any IDs that weren't found",
        "type": "object",
        "properties": {
          "incidents": {
            "description": "Map of incident IDs to their corresponding incidents",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Incident"
            }
          },
          "notFoundIds": {
            "type": "array",
            "items": {
              "example": [
                "not_found_id_1",
                "not_found_id_2"
              ],
              "description": "List of IDs that were not found",
              "type": "string"
            }
          }
        },
        "required": [
          "incidents",
          "notFoundIds"
        ]
      },
      "CloseIncidentsResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "Close incidents response",
        "description": "Response containing the updated incidents after closing",
        "type": "object",
        "properties": {
          "incidents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Incident"
            }
          }
        },
        "required": [
          "incidents"
        ]
      },
      "ColorsByAggregation": {
        "type": "object",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/ColorsByAggregation"
          }
        },
        "additionalProperties": false
      },
      "ColorsByGroupBy": {
        "type": "object",
        "properties": {
          "groupBy": {
            "$ref": "#/components/schemas/ColorsByGroupBy"
          }
        },
        "additionalProperties": false
      },
      "ColorsByStack": {
        "type": "object",
        "properties": {
          "stack": {
            "$ref": "#/components/schemas/ColorsByStack"
          }
        },
        "additionalProperties": false
      },
      "ContextualLabelValueWithCount": {
        "externalDocs": {
          "url": ""
        },
        "title": "Contextual label value with count",
        "type": "object",
        "properties": {
          "contextualLabelValue": {
            "example": "contextual_label_value",
            "type": "string"
          },
          "count": {
            "example": 10,
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "contextualLabelValue",
          "count"
        ]
      },
      "ContextualLabelValuesWithCount": {
        "externalDocs": {
          "url": ""
        },
        "title": "Contextual label values with count",
        "type": "object",
        "properties": {
          "valuesWithCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContextualLabelValueWithCount"
            }
          }
        },
        "required": [
          "valuesWithCount"
        ]
      },
      "ContextualLabels": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident contextual labels",
        "type": "object",
        "properties": {
          "fieldName": {
            "example": "field_name",
            "type": "string"
          },
          "fieldValue": {
            "example": "field_value",
            "type": "string"
          }
        },
        "required": [
          "fieldName",
          "fieldValue"
        ]
      },
      "DisplayLabelValueWithCount": {
        "externalDocs": {
          "url": ""
        },
        "title": "Display label value with count",
        "type": "object",
        "properties": {
          "count": {
            "example": 10,
            "type": "integer",
            "format": "int32"
          },
          "displayLabelValue": {
            "example": "display_label_value",
            "type": "string"
          }
        },
        "required": [
          "displayLabelValue",
          "count"
        ]
      },
      "DisplayLabelValuesWithCount": {
        "externalDocs": {
          "url": ""
        },
        "title": "Display label values with count",
        "type": "object",
        "properties": {
          "valuesWithCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplayLabelValueWithCount"
            }
          }
        },
        "required": [
          "valuesWithCount"
        ]
      },
      "FieldGroup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "FilterPathAndValues": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/FilterPathAndValuesMultipleValues"
          },
          {
            "$ref": "#/components/schemas/FilterPathAndValuesFilters"
          }
        ]
      },
      "FilterPathAndValuesFilters": {
        "externalDocs": {
          "url": ""
        },
        "title": "FilterPathAndValues",
        "description": "This data structure represents a filter path and values",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/Filters"
          },
          "path": {
            "example": "test",
            "type": "string"
          }
        },
        "required": [
          "path",
          "values"
        ],
        "additionalProperties": false
      },
      "FilterPathAndValuesMultipleValues": {
        "externalDocs": {
          "url": ""
        },
        "title": "FilterPathAndValues",
        "description": "This data structure represents a filter path and values",
        "type": "object",
        "properties": {
          "multipleValues": {
            "$ref": "#/components/schemas/MultipleValues"
          },
          "path": {
            "example": "test",
            "type": "string"
          }
        },
        "required": [
          "path",
          "values"
        ],
        "additionalProperties": false
      },
      "Filters": {
        "externalDocs": {
          "url": ""
        },
        "title": "Filters",
        "description": "This data structure represents a filter",
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/v3.FilterOperator"
          },
          "pathAndValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterPathAndValues"
            }
          }
        },
        "required": [
          "pathAndValues"
        ]
      },
      "GetFilterValuesResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "Get filter values response",
        "description": "Response containing available filter values for incidents",
        "type": "object",
        "properties": {
          "filtersValues": {
            "$ref": "#/components/schemas/IncidentQueryFiltersValues"
          }
        },
        "required": [
          "filtersValues"
        ]
      },
      "GetIncidentByEventIdResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "Get incident by event id response",
        "description": "Response containing the requested incident",
        "type": "object",
        "properties": {
          "incident": {
            "$ref": "#/components/schemas/Incident"
          }
        },
        "required": [
          "incident"
        ]
      },
      "GetIncidentEventsResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "Get incident events response",
        "description": "Response containing all events associated with the requested incident",
        "type": "object",
        "properties": {
          "incidentEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentEvent"
            }
          }
        }
      },
      "GetIncidentResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "Get incident response",
        "description": "Response containing the requested incident",
        "type": "object",
        "properties": {
          "incident": {
            "$ref": "#/components/schemas/Incident"
          }
        },
        "required": [
          "incident"
        ]
      },
      "GroupByContextualLabel": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident group by",
        "type": "object",
        "properties": {
          "contextualLabel": {
            "description": "The contextual label to group by.",
            "type": "string"
          },
          "orderByDirection": {
            "$ref": "#/components/schemas/v1.OrderByDirection"
          }
        },
        "required": [
          "field"
        ],
        "additionalProperties": false
      },
      "GroupByIncidentField": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident group by",
        "type": "object",
        "properties": {
          "incidentField": {
            "$ref": "#/components/schemas/IncidentFields"
          },
          "orderByDirection": {
            "$ref": "#/components/schemas/v1.OrderByDirection"
          }
        },
        "required": [
          "field"
        ],
        "additionalProperties": false
      },
      "GroupByValues": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/GroupByValuesIncidentField"
          },
          {
            "$ref": "#/components/schemas/GroupByValuesContextualLabels"
          }
        ]
      },
      "GroupByValuesContextualLabels": {
        "type": "object",
        "properties": {
          "contextualLabels": {
            "$ref": "#/components/schemas/ContextualLabels"
          }
        },
        "additionalProperties": false
      },
      "GroupByValuesIncidentField": {
        "type": "object",
        "properties": {
          "incidentField": {
            "$ref": "#/components/schemas/IncidentFieldOneOf"
          }
        },
        "additionalProperties": false
      },
      "Incident": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident",
        "type": "object",
        "properties": {
          "assignments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignment"
            }
          },
          "closedAt": {
            "example": "2024-01-01T00:00:00.000Z",
            "type": "string",
            "format": "date-time"
          },
          "contextualLabels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "createdAt": {
            "example": "2024-01-01T00:00:00.000Z",
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "example": "incident_description",
            "type": "string"
          },
          "displayLabels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "duration": {
            "type": "string"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentEvent"
            }
          },
          "id": {
            "example": "incident_id",
            "type": "string"
          },
          "isMuted": {
            "example": false,
            "type": "boolean"
          },
          "lastStateUpdateKey": {
            "example": "last_state_update_key",
            "type": "string"
          },
          "lastStateUpdateTime": {
            "example": "2024-01-01T00:00:00.000Z",
            "type": "string",
            "format": "date-time"
          },
          "metaLabels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/incidents.v1.MetaLabel"
            }
          },
          "name": {
            "example": "incident_name",
            "type": "string"
          },
          "severity": {
            "$ref": "#/components/schemas/IncidentSeverity"
          },
          "state": {
            "$ref": "#/components/schemas/IncidentState"
          },
          "status": {
            "$ref": "#/components/schemas/IncidentStatus"
          }
        },
        "required": [
          "id",
          "state",
          "status",
          "assignments",
          "severity",
          "contextualLabels",
          "displayLabels",
          "events",
          "createdAt",
          "lastStateUpdateTime",
          "lastStateUpdateKey",
          "duration"
        ]
      },
      "IncidentAggregation": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident aggregation",
        "type": "object",
        "properties": {
          "aggAssignmentsCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentAssignmentCount"
            }
          },
          "aggMetaLabelsCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentMetaLabelsCount"
            }
          },
          "aggSeverityCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentSeverityCount"
            }
          },
          "aggStateCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentStateCount"
            }
          },
          "aggStatusCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentStatusCount"
            }
          },
          "allValuesCount": {
            "type": "integer",
            "format": "int64"
          },
          "firstCreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "groupBysValue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupByValues"
            }
          },
          "lastClosedAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastStateUpdateTime": {
            "type": "string",
            "format": "date-time"
          },
          "listIncidentsId": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "groupBysValue",
          "aggStateCount",
          "aggStatusCount",
          "aggSeverityCount",
          "aggAssignmentsCount",
          "firstCreatedAt",
          "lastClosedAt",
          "allValuesCount",
          "listIncidentsId",
          "lastStateUpdateTime",
          "aggMetaLabelsCount"
        ]
      },
      "IncidentAssignmentCount": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident assignment count",
        "type": "object",
        "properties": {
          "assignedTo": {
            "$ref": "#/components/schemas/UserDetails"
          },
          "count": {
            "example": 10,
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "assignedTo",
          "count"
        ]
      },
      "IncidentEvent": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/IncidentEventSnoozeIndicatorOperationalEvent"
          },
          {
            "$ref": "#/components/schemas/IncidentEventAssignmentOperationalEvent"
          },
          {
            "$ref": "#/components/schemas/IncidentEventUnassignAdministrativeEvent"
          },
          {
            "$ref": "#/components/schemas/IncidentEventUnassignOperationalEvent"
          },
          {
            "$ref": "#/components/schemas/IncidentEventAcknowledgeOperationalEvent"
          },
          {
            "$ref": "#/components/schemas/IncidentEventCloseOperationalEvent"
          },
          {
            "$ref": "#/components/schemas/IncidentEventSnoozeIndicatorAdministrativeEvent"
          },
          {
            "$ref": "#/components/schemas/IncidentEventAssignmentAdministrativeEvent"
          },
          {
            "$ref": "#/components/schemas/IncidentEventUpsertStateAdministrativeEvent"
          },
          {
            "$ref": "#/components/schemas/IncidentEventUpsertStateOperationalEvent"
          },
          {
            "$ref": "#/components/schemas/IncidentEventAcknowledgeAdministrativeEvent"
          },
          {
            "$ref": "#/components/schemas/IncidentEventCloseAdministrativeEvent"
          }
        ]
      },
      "IncidentEventAcknowledge": {
        "type": "object",
        "properties": {
          "acknowledgedBy": {
            "$ref": "#/components/schemas/UserDetails"
          }
        }
      },
      "IncidentEventAcknowledgeAdministrativeEvent": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident event",
        "type": "object",
        "properties": {
          "acknowledge": {
            "$ref": "#/components/schemas/IncidentEventAcknowledge"
          },
          "administrativeEvent": {
            "$ref": "#/components/schemas/IncidentEventOriginatorAdministrative"
          },
          "id": {
            "example": "incident_event_id",
            "description": "The ID of the incident event",
            "type": "string"
          },
          "incidentEventType": {
            "$ref": "#/components/schemas/IncidentEventType"
          },
          "originatorType": {
            "$ref": "#/components/schemas/OriginatorType"
          }
        },
        "required": [
          "id",
          "incidentEventType",
          "originatorType",
          "originator",
          "incidentEventPayload"
        ],
        "additionalProperties": false
      },
      "IncidentEventAcknowledgeOperationalEvent": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident event",
        "type": "object",
        "properties": {
          "acknowledge": {
            "$ref": "#/components/schemas/IncidentEventAcknowledge"
          },
          "id": {
            "example": "incident_event_id",
            "description": "The ID of the incident event",
            "type": "string"
          },
          "incidentEventType": {
            "$ref": "#/components/schemas/IncidentEventType"
          },
          "operationalEvent": {
            "$ref": "#/components/schemas/IncidentEventOriginatorOperational"
          },
          "originatorType": {
            "$ref": "#/components/schemas/OriginatorType"
          }
        },
        "required": [
          "id",
          "incidentEventType",
          "originatorType",
          "originator",
          "incidentEventPayload"
        ],
        "additionalProperties": false
      },
      "IncidentEventAlertType": {
        "type": "string",
        "enum": [
          "INCIDENT_EVENT_ALERT_TYPE_STANDARD_OR_UNSPECIFIED",
          "INCIDENT_EVENT_ALERT_TYPE_METRIC",
          "INCIDENT_EVENT_ALERT_TYPE_NEW_VALUE",
          "INCIDENT_EVENT_ALERT_TYPE_RATIO",
          "INCIDENT_EVENT_ALERT_TYPE_TIME_RELATIVE",
          "INCIDENT_EVENT_ALERT_TYPE_UNIQUE_COUNT",
          "INCIDENT_EVENT_ALERT_TYPE_TRACING",
          "INCIDENT_EVENT_ALERT_TYPE_FLOW",
          "INCIDENT_EVENT_ALERT_TYPE_SLO"
        ]
      },
      "IncidentEventAssign": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident event assignment details",
        "type": "object",
        "properties": {
          "assignment": {
            "$ref": "#/components/schemas/Assignment"
          }
        }
      },
      "IncidentEventAssignmentAdministrativeEvent": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident event",
        "type": "object",
        "properties": {
          "administrativeEvent": {
            "$ref": "#/components/schemas/IncidentEventOriginatorAdministrative"
          },
          "assignment": {
            "$ref": "#/components/schemas/IncidentEventAssign"
          },
          "id": {
            "example": "incident_event_id",
            "description": "The ID of the incident event",
            "type": "string"
          },
          "incidentEventType": {
            "$ref": "#/components/schemas/IncidentEventType"
          },
          "originatorType": {
            "$ref": "#/components/schemas/OriginatorType"
          }
        },
        "required": [
          "id",
          "incidentEventType",
          "originatorType",
          "originator",
          "incidentEventPayload"
        ],
        "additionalProperties": false
      },
      "IncidentEventAssignmentOperationalEvent": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident event",
        "type": "object",
        "properties": {
          "assignment": {
            "$ref": "#/components/schemas/IncidentEventAssign"
          },
          "id": {
            "example": "incident_event_id",
            "description": "The ID of the incident event",
            "type": "string"
          },
          "incidentEventType": {
            "$ref": "#/components/schemas/IncidentEventType"
          },
          "operationalEvent": {
            "$ref": "#/components/schemas/IncidentEventOriginatorOperational"
          },
          "originatorType": {
            "$ref": "#/components/schemas/OriginatorType"
          }
        },
        "required": [
          "id",
          "incidentEventType",
          "originatorType",
          "originator",
          "incidentEventPayload"
        ],
        "additionalProperties": false
      },
      "IncidentEventClose": {
        "type": "object",
        "properties": {
          "closedBy": {
            "$ref": "#/components/schemas/UserDetails"
          }
        }
      },
      "IncidentEventCloseAdministrativeEvent": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident event",
        "type": "object",
        "properties": {
          "administrativeEvent": {
            "$ref": "#/components/schemas/IncidentEventOriginatorAdministrative"
          },
          "close": {
            "$ref": "#/components/schemas/IncidentEventClose"
          },
          "id": {
            "example": "incident_event_id",
            "description": "The ID of the incident event",
            "type": "string"
          },
          "incidentEventType": {
            "$ref": "#/components/schemas/IncidentEventType"
          },
          "originatorType": {
            "$ref": "#/components/schemas/OriginatorType"
          }
        },
        "required": [
          "id",
          "incidentEventType",
          "originatorType",
          "originator",
          "incidentEventPayload"
        ],
        "additionalProperties": false
      },
      "IncidentEventCloseOperationalEvent": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident event",
        "type": "object",
        "properties": {
          "close": {
            "$ref": "#/components/schemas/IncidentEventClose"
          },
          "id": {
            "example": "incident_event_id",
            "description": "The ID of the incident event",
            "type": "string"
          },
          "incidentEventType": {
            "$ref": "#/components/schemas/IncidentEventType"
          },
          "operationalEvent": {
            "$ref": "#/components/schemas/IncidentEventOriginatorOperational"
          },
          "originatorType": {
            "$ref": "#/components/schemas/OriginatorType"
          }
        },
        "required": [
          "id",
          "incidentEventType",
          "originatorType",
          "originator",
          "incidentEventPayload"
        ],
        "additionalProperties": false
      },
      "IncidentEventExtended": {
        "externalDocs": {
          "url": ""
        },
        "title": "Extended incident event",
        "type": "object",
        "properties": {
          "cxEventKey": {
            "type": "string"
          },
          "cxEventTimestamp": {
            "type": "string",
            "format": "date-time"
          },
          "incidentEvent": {
            "$ref": "#/components/schemas/IncidentEvent"
          },
          "incidentEventExtendedMetadata": {
            "$ref": "#/components/schemas/IncidentEventExtendedMetadata"
          }
        },
        "required": [
          "cxEventKey",
          "incidentEvent",
          "cxEventTimestamp"
        ]
      },
      "IncidentEventExtendedMetadata": {
        "type": "object",
        "properties": {
          "alertGroupByFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "alertId": {
            "type": "string"
          },
          "alertLabels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/incidents.v1.MetaLabel"
            }
          },
          "alertName": {
            "type": "string"
          },
          "alertType": {
            "$ref": "#/components/schemas/IncidentEventAlertType"
          },
          "incidentPermutation": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "incidentSeverity": {
            "$ref": "#/components/schemas/IncidentSeverity"
          },
          "incidentState": {
            "$ref": "#/components/schemas/IncidentState"
          },
          "incidentStatus": {
            "$ref": "#/components/schemas/IncidentStatus"
          },
          "isMuted": {
            "type": "boolean"
          }
        }
      },
      "IncidentEventOrderByFieldType": {
        "type": "string",
        "enum": [
          "INCIDENT_EVENT_ORDER_BY_FIELD_TYPE_TIMESTAMP_OR_UNSPECIFIED"
        ]
      },
      "IncidentEventOriginatorAdministrative": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          }
        }
      },
      "IncidentEventOriginatorOperational": {
        "type": "object",
        "properties": {
          "systemName": {
            "type": "string"
          }
        }
      },
      "IncidentEventSnoozeIndicator": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident event snooze indicator",
        "type": "object",
        "properties": {
          "durationMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "IncidentEventSnoozeIndicatorAdministrativeEvent": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident event",
        "type": "object",
        "properties": {
          "administrativeEvent": {
            "$ref": "#/components/schemas/IncidentEventOriginatorAdministrative"
          },
          "id": {
            "example": "incident_event_id",
            "description": "The ID of the incident event",
            "type": "string"
          },
          "incidentEventType": {
            "$ref": "#/components/schemas/IncidentEventType"
          },
          "originatorType": {
            "$ref": "#/components/schemas/OriginatorType"
          },
          "snoozeIndicator": {
            "$ref": "#/components/schemas/IncidentEventSnoozeIndicator"
          }
        },
        "required": [
          "id",
          "incidentEventType",
          "originatorType",
          "originator",
          "incidentEventPayload"
        ],
        "additionalProperties": false
      },
      "IncidentEventSnoozeIndicatorOperationalEvent": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident event",
        "type": "object",
        "properties": {
          "id": {
            "example": "incident_event_id",
            "description": "The ID of the incident event",
            "type": "string"
          },
          "incidentEventType": {
            "$ref": "#/components/schemas/IncidentEventType"
          },
          "operationalEvent": {
            "$ref": "#/components/schemas/IncidentEventOriginatorOperational"
          },
          "originatorType": {
            "$ref": "#/components/schemas/OriginatorType"
          },
          "snoozeIndicator": {
            "$ref": "#/components/schemas/IncidentEventSnoozeIndicator"
          }
        },
        "required": [
          "id",
          "incidentEventType",
          "originatorType",
          "originator",
          "incidentEventPayload"
        ],
        "additionalProperties": false
      },
      "IncidentEventType": {
        "type": "string",
        "enum": [
          "INCIDENT_EVENT_TYPE_UNSPECIFIED",
          "INCIDENT_EVENT_TYPE_UPSERT_STATE",
          "INCIDENT_EVENT_TYPE_OPEN",
          "INCIDENT_EVENT_TYPE_CLOSE",
          "INCIDENT_EVENT_TYPE_SNOOZE_INDICATOR",
          "INCIDENT_EVENT_TYPE_ASSIGN",
          "INCIDENT_EVENT_TYPE_UNASSIGN",
          "INCIDENT_EVENT_TYPE_ACKNOWLEDGE"
        ]
      },
      "IncidentEventUnassign": {
        "type": "object"
      },
      "IncidentEventUnassignAdministrativeEvent": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident event",
        "type": "object",
        "properties": {
          "administrativeEvent": {
            "$ref": "#/components/schemas/IncidentEventOriginatorAdministrative"
          },
          "id": {
            "example": "incident_event_id",
            "description": "The ID of the incident event",
            "type": "string"
          },
          "incidentEventType": {
            "$ref": "#/components/schemas/IncidentEventType"
          },
          "originatorType": {
            "$ref": "#/components/schemas/OriginatorType"
          },
          "unassign": {
            "$ref": "#/components/schemas/IncidentEventUnassign"
          }
        },
        "required": [
          "id",
          "incidentEventType",
          "originatorType",
          "originator",
          "incidentEventPayload"
        ],
        "additionalProperties": false
      },
      "IncidentEventUnassignOperationalEvent": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident event",
        "type": "object",
        "properties": {
          "id": {
            "example": "incident_event_id",
            "description": "The ID of the incident event",
            "type": "string"
          },
          "incidentEventType": {
            "$ref": "#/components/schemas/IncidentEventType"
          },
          "operationalEvent": {
            "$ref": "#/components/schemas/IncidentEventOriginatorOperational"
          },
          "originatorType": {
            "$ref": "#/components/schemas/OriginatorType"
          },
          "unassign": {
            "$ref": "#/components/schemas/IncidentEventUnassign"
          }
        },
        "required": [
          "id",
          "incidentEventType",
          "originatorType",
          "originator",
          "incidentEventPayload"
        ],
        "additionalProperties": false
      },
      "IncidentEventUpsertState": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident event upsert state",
        "type": "object",
        "properties": {
          "isMuted": {
            "type": "boolean"
          },
          "payload": {
            "$ref": "#/components/schemas/UpsertIncidentStatePayload"
          },
          "stateType": {
            "$ref": "#/components/schemas/UpsertIncidentStateType"
          }
        },
        "required": [
          "stateType",
          "payload"
        ]
      },
      "IncidentEventUpsertStateAdministrativeEvent": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident event",
        "type": "object",
        "properties": {
          "administrativeEvent": {
            "$ref": "#/components/schemas/IncidentEventOriginatorAdministrative"
          },
          "id": {
            "example": "incident_event_id",
            "description": "The ID of the incident event",
            "type": "string"
          },
          "incidentEventType": {
            "$ref": "#/components/schemas/IncidentEventType"
          },
          "originatorType": {
            "$ref": "#/components/schemas/OriginatorType"
          },
          "upsertState": {
            "$ref": "#/components/schemas/IncidentEventUpsertState"
          }
        },
        "required": [
          "id",
          "incidentEventType",
          "originatorType",
          "originator",
          "incidentEventPayload"
        ],
        "additionalProperties": false
      },
      "IncidentEventUpsertStateOperationalEvent": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident event",
        "type": "object",
        "properties": {
          "id": {
            "example": "incident_event_id",
            "description": "The ID of the incident event",
            "type": "string"
          },
          "incidentEventType": {
            "$ref": "#/components/schemas/IncidentEventType"
          },
          "operationalEvent": {
            "$ref": "#/components/schemas/IncidentEventOriginatorOperational"
          },
          "originatorType": {
            "$ref": "#/components/schemas/OriginatorType"
          },
          "upsertState": {
            "$ref": "#/components/schemas/IncidentEventUpsertState"
          }
        },
        "required": [
          "id",
          "incidentEventType",
          "originatorType",
          "originator",
          "incidentEventPayload"
        ],
        "additionalProperties": false
      },
      "IncidentFieldOneOf": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/IncidentFieldOneOfSeverity"
          },
          {
            "$ref": "#/components/schemas/IncidentFieldOneOfCreatedAt"
          },
          {
            "$ref": "#/components/schemas/IncidentFieldOneOfState"
          },
          {
            "$ref": "#/components/schemas/IncidentFieldOneOfApplicationName"
          },
          {
            "$ref": "#/components/schemas/IncidentFieldOneOfName"
          },
          {
            "$ref": "#/components/schemas/IncidentFieldOneOfClosedAt"
          },
          {
            "$ref": "#/components/schemas/IncidentFieldOneOfStatus"
          },
          {
            "$ref": "#/components/schemas/IncidentFieldOneOfLastStateUpdateTime"
          },
          {
            "$ref": "#/components/schemas/IncidentFieldOneOfSubsystemName"
          },
          {
            "$ref": "#/components/schemas/IncidentFieldOneOfDuration"
          },
          {
            "$ref": "#/components/schemas/IncidentFieldOneOfId"
          }
        ]
      },
      "IncidentFieldOneOfApplicationName": {
        "type": "object",
        "properties": {
          "applicationName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "IncidentFieldOneOfClosedAt": {
        "type": "object",
        "properties": {
          "closedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "IncidentFieldOneOfCreatedAt": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "IncidentFieldOneOfDuration": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "IncidentFieldOneOfId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "IncidentFieldOneOfLastStateUpdateTime": {
        "type": "object",
        "properties": {
          "lastStateUpdateTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "IncidentFieldOneOfName": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "IncidentFieldOneOfSeverity": {
        "type": "object",
        "properties": {
          "severity": {
            "$ref": "#/components/schemas/IncidentSeverity"
          }
        },
        "additionalProperties": false
      },
      "IncidentFieldOneOfState": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/IncidentState"
          }
        },
        "additionalProperties": false
      },
      "IncidentFieldOneOfStatus": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/IncidentStatus"
          }
        },
        "additionalProperties": false
      },
      "IncidentFieldOneOfSubsystemName": {
        "type": "object",
        "properties": {
          "subsystemName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "IncidentFields": {
        "type": "string",
        "enum": [
          "INCIDENTS_FIELDS_UNSPECIFIED",
          "INCIDENTS_FIELDS_ID",
          "INCIDENTS_FIELDS_SEVERITY",
          "INCIDENTS_FIELDS_NAME",
          "INCIDENTS_FIELDS_CREATED_TIME",
          "INCIDENTS_FIELDS_CLOSED_TIME",
          "INCIDENTS_FIELDS_STATE",
          "INCIDENTS_FIELDS_STATUS",
          "INCIDENTS_FIELDS_LAST_STATE_UPDATE_TIME",
          "INCIDENTS_FIELDS_APPLICATION_NAME",
          "INCIDENTS_FIELDS_SUBSYSTEM_NAME",
          "INCIDENTS_FIELDS_DURATION"
        ]
      },
      "IncidentMetaLabelsCount": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident meta labels count",
        "type": "object",
        "properties": {
          "count": {
            "example": 10,
            "type": "integer",
            "format": "int64"
          },
          "metaLabel": {
            "$ref": "#/components/schemas/incidents.v1.MetaLabel"
          }
        },
        "required": [
          "metaLabel",
          "count"
        ]
      },
      "IncidentMetaLabelsWithCount": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident meta labels with count",
        "type": "object",
        "properties": {
          "count": {
            "example": 10,
            "type": "integer",
            "format": "int32"
          },
          "metaLabel": {
            "$ref": "#/components/schemas/incidents.v1.MetaLabel"
          }
        },
        "required": [
          "metaLabel",
          "count"
        ]
      },
      "IncidentQueryFiltersValues": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident query filter values",
        "type": "object",
        "properties": {
          "assigneeWithCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssigneeWithCount"
            }
          },
          "contextualLabels": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ContextualLabelValuesWithCount"
            }
          },
          "displayLabels": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DisplayLabelValuesWithCount"
            }
          },
          "metaLabelsOp": {
            "$ref": "#/components/schemas/v1.FilterOperator"
          },
          "metaLabelsWithCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentMetaLabelsWithCount"
            }
          },
          "severityWithCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentSeverityWithCount"
            }
          },
          "stateWithCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentStateWithCount"
            }
          },
          "statusWithCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentStatusWithCount"
            }
          }
        },
        "required": [
          "assigneeWithCount",
          "statusWithCount",
          "stateWithCount",
          "severityWithCount",
          "contextualLabels",
          "displayLabels",
          "metaLabelsWithCount",
          "metaLabelsOp"
        ]
      },
      "IncidentSeverity": {
        "type": "string",
        "enum": [
          "INCIDENT_SEVERITY_UNSPECIFIED",
          "INCIDENT_SEVERITY_INFO",
          "INCIDENT_SEVERITY_WARNING",
          "INCIDENT_SEVERITY_ERROR",
          "INCIDENT_SEVERITY_CRITICAL",
          "INCIDENT_SEVERITY_LOW"
        ]
      },
      "IncidentSeverityCount": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident severity count",
        "type": "object",
        "properties": {
          "count": {
            "example": 10,
            "type": "integer",
            "format": "int64"
          },
          "severity": {
            "$ref": "#/components/schemas/IncidentSeverity"
          }
        },
        "required": [
          "severity",
          "count"
        ]
      },
      "IncidentSeverityWithCount": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident severity with count",
        "type": "object",
        "properties": {
          "count": {
            "example": 10,
            "type": "integer",
            "format": "int32"
          },
          "severity": {
            "$ref": "#/components/schemas/IncidentSeverity"
          }
        },
        "required": [
          "severity",
          "count"
        ]
      },
      "IncidentState": {
        "type": "string",
        "enum": [
          "INCIDENT_STATE_UNSPECIFIED",
          "INCIDENT_STATE_TRIGGERED",
          "INCIDENT_STATE_RESOLVED"
        ]
      },
      "IncidentStateCount": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident state count",
        "type": "object",
        "properties": {
          "count": {
            "example": 10,
            "type": "integer",
            "format": "int64"
          },
          "state": {
            "$ref": "#/components/schemas/IncidentState"
          }
        },
        "required": [
          "state",
          "count"
        ]
      },
      "IncidentStateWithCount": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident state with count",
        "type": "object",
        "properties": {
          "count": {
            "example": 10,
            "type": "integer",
            "format": "int32"
          },
          "state": {
            "$ref": "#/components/schemas/IncidentState"
          }
        },
        "required": [
          "state",
          "count"
        ]
      },
      "IncidentStatus": {
        "type": "string",
        "enum": [
          "INCIDENT_STATUS_UNSPECIFIED",
          "INCIDENT_STATUS_TRIGGERED",
          "INCIDENT_STATUS_ACKNOWLEDGED",
          "INCIDENT_STATUS_RESOLVED"
        ]
      },
      "IncidentStatusCount": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident status count",
        "type": "object",
        "properties": {
          "count": {
            "example": 10,
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "$ref": "#/components/schemas/IncidentStatus"
          }
        },
        "required": [
          "status",
          "count"
        ]
      },
      "IncidentStatusWithCount": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident status with count",
        "type": "object",
        "properties": {
          "count": {
            "example": 10,
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/IncidentStatus"
          }
        },
        "required": [
          "status",
          "count"
        ]
      },
      "ListIncidentAggregationsResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "List incident aggregations response",
        "description": "Response containing aggregated incident data and pagination information",
        "type": "object",
        "properties": {
          "incidentAggs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentAggregation"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/v1.PaginationResponse"
          }
        },
        "required": [
          "incidentAggs",
          "pagination"
        ]
      },
      "ListIncidentEventsFilterValuesResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "List incident events filter values response",
        "description": "A response containing available filter values for incident events",
        "type": "object",
        "properties": {
          "filtersValues": {
            "$ref": "#/components/schemas/IncidentQueryFiltersValues"
          }
        }
      },
      "ListIncidentEventsResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "List incident events response",
        "description": "A response containing a list of incident events and pagination information",
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentEventExtended"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/v1.PaginationResponse"
          }
        },
        "required": [
          "items"
        ]
      },
      "ListIncidentEventsTotalCountResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "List incident events total count response",
        "description": "A response containing the total count of matching incident events and whether the count limit was reached",
        "type": "object",
        "properties": {
          "count": {
            "example": 100,
            "description": "Total number of incident events matching the filter",
            "type": "string",
            "format": "uint64"
          },
          "reachedLimit": {
            "example": false,
            "description": "Indicates if the count reached the system limit",
            "type": "boolean"
          }
        }
      },
      "ListIncidentsResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "List incidents response",
        "description": "Response containing a list of incidents and pagination information",
        "type": "object",
        "properties": {
          "incidents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Incident"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/v1.PaginationResponse"
          }
        },
        "required": [
          "incidents",
          "pagination"
        ]
      },
      "MultipleValues": {
        "type": "object",
        "properties": {
          "matcher": {
            "$ref": "#/components/schemas/events.v3.FilterMatcher"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OriginatorType": {
        "type": "string",
        "enum": [
          "ORIGINATOR_TYPE_UNSPECIFIED",
          "ORIGINATOR_TYPE_OPERATIONAL",
          "ORIGINATOR_TYPE_ADMINISTRATIVE"
        ]
      },
      "ResolveIncidentByEventIdResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "Acknowledge incident by event id response",
        "description": "Response containing the updated incident after resolution",
        "type": "object",
        "properties": {
          "incident": {
            "$ref": "#/components/schemas/Incident"
          }
        },
        "required": [
          "incident"
        ]
      },
      "ResolveIncidentsResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "Resolve incidents response",
        "description": "Response containing the updated incidents after resolution",
        "type": "object",
        "properties": {
          "incidents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Incident"
            }
          }
        },
        "required": [
          "incidents"
        ]
      },
      "UnassignIncidentsResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "Unassign incidents response",
        "description": "Response containing the updated incidents after unassignment",
        "type": "object",
        "properties": {
          "incidents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Incident"
            }
          }
        },
        "required": [
          "incidents"
        ]
      },
      "UpsertIncidentStatePayload": {
        "type": "object",
        "properties": {
          "cxEventKey": {
            "type": "string"
          }
        }
      },
      "UpsertIncidentStateType": {
        "type": "string",
        "enum": [
          "UPSERT_INCIDENT_STATE_TYPE_UNSPECIFIED",
          "UPSERT_INCIDENT_STATE_TYPE_TRIGGERED",
          "UPSERT_INCIDENT_STATE_TYPE_RESOLVED"
        ]
      },
      "UserDetails": {
        "externalDocs": {
          "url": ""
        },
        "title": "User details",
        "type": "object",
        "properties": {
          "userId": {
            "example": "user_id",
            "type": "string"
          }
        },
        "required": [
          "userId"
        ]
      },
      "V1OrderByContextualLabel": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident order by",
        "type": "object",
        "properties": {
          "contextualLabel": {
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/v1.OrderByDirection"
          }
        },
        "required": [
          "field",
          "direction"
        ],
        "additionalProperties": false
      },
      "V1OrderByIncidentField": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident order by",
        "type": "object",
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/v1.OrderByDirection"
          },
          "incidentField": {
            "$ref": "#/components/schemas/IncidentFields"
          }
        },
        "required": [
          "field",
          "direction"
        ],
        "additionalProperties": false
      },
      "common.Group": {
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/FieldGroup"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/common.Group"
            }
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "events.v3.FilterMatcher": {
        "type": "string",
        "enum": [
          "FILTER_MATCHER_TEXT_OR_UNSPECIFIED",
          "FILTER_MATCHER_REGEXP"
        ]
      },
      "incidents.v1.MetaLabel": {
        "externalDocs": {
          "url": ""
        },
        "title": "Incident meta label",
        "type": "object",
        "properties": {
          "key": {
            "example": "key",
            "type": "string"
          },
          "value": {
            "example": "value",
            "type": "string"
          }
        }
      },
      "v1.FilterOperator": {
        "type": "string",
        "enum": [
          "FILTER_OPERATOR_OR_OR_UNSPECIFIED",
          "FILTER_OPERATOR_AND"
        ]
      },
      "v1.OrderByDirection": {
        "type": "string",
        "enum": [
          "ORDER_BY_DIRECTION_UNSPECIFIED",
          "ORDER_BY_DIRECTION_ASC",
          "ORDER_BY_DIRECTION_DESC"
        ]
      },
      "v1.PaginationResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "Pagination response",
        "description": "Pagination information for list responses",
        "type": "object",
        "properties": {
          "nextPageToken": {
            "example": "next_page_token",
            "description": "Token for the next page of results",
            "type": "string"
          },
          "totalSize": {
            "example": 100,
            "description": "Total number of items available",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "totalSize"
        ]
      },
      "v3.FilterOperator": {
        "type": "string",
        "enum": [
          "FILTER_OPERATOR_AND_OR_UNSPECIFIED",
          "FILTER_OPERATOR_OR"
        ]
      }
    },
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "API key authentication"
      }
    }
  }
}