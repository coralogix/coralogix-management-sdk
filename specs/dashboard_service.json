{
  "openapi": "3.0.0",
  "info": {
    "title": "",
    "version": "1.0.0"
  },
  "paths": {
    "/dashboards/dashboards/v1/catalog": {
      "get": {
        "tags": [
          "Dashboard service"
        ],
        "summary": "Get dashboard catalog",
        "description": "Get a list of all dashboards accessible.\n\nRequires the following permissions:\n- `team-dashboards:Read`",
        "externalDocs": {
          "url": ""
        },
        "operationId": "DashboardCatalogService_GetDashboardCatalog",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDashboardCatalogResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "team-dashboards:Read"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/catalog';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/catalog\"\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/catalog \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/v1/dashboards/by-slug/{slug}": {
      "get": {
        "tags": [
          "Dashboard service"
        ],
        "summary": "Get a dashboard by URL slug",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "DashboardsService_GetDashboardBySlug",
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDashboardBySlugResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "team-dashboards:Read"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/v1/dashboards/by-slug/%7Bslug%7D';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/v1/dashboards/by-slug/%7Bslug%7D\"\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/by-slug/%7Bslug%7D \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/v1/dashboards/dashboards": {
      "put": {
        "tags": [
          "Dashboard service"
        ],
        "summary": "Replace a dashboard",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "DashboardsService_ReplaceDashboard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Replace dashboard request data structure",
                "description": "This is a request sent to update an existing dashboard with new information",
                "type": "object",
                "properties": {
                  "dashboard": {
                    "$ref": "#/components/schemas/Dashboard"
                  },
                  "isLocked": {
                    "type": "boolean"
                  },
                  "requestId": {
                    "type": "string"
                  }
                },
                "required": [
                  "requestId",
                  "dashboard"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplaceDashboardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "team-dashboards:Update"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards';\n\nlet options = {\n  method: 'PUT',\n  headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},\n  body: '{\"dashboard\":{\"absoluteTimeFrame\":{\"from\":\"2019-08-24T14:15:22Z\",\"to\":\"2019-08-24T14:15:22Z\"},\"actions\":[{\"dataSource\":\"ACTION_DATA_SOURCE_TYPE_NONE_UNSPECIFIED\",\"definition\":{\"customAction\":{\"url\":\"string\"}},\"id\":\"string\",\"name\":\"string\",\"shouldOpenInNewWindow\":true,\"widgetId\":\"string\"}],\"annotations\":[{\"description\":\"string\",\"enabled\":true,\"id\":\"string\",\"name\":\"string\",\"scope\":{\"allWidgets\":{}},\"source\":{\"metrics\":{\"labels\":[\"string\"],\"messageTemplate\":\"string\",\"orientation\":\"ANNOTATION_ORIENTATION_VERTICAL_UNSPECIFIED\",\"promqlQuery\":{\"value\":\"string\"},\"strategy\":{\"startTimeMetric\":{}}}}}],\"description\":\"Sample description\",\"filters\":[{\"collapsed\":true,\"displayName\":\"string\",\"enabled\":true,\"source\":{\"logs\":{\"field\":\"string\",\"observationField\":{\"keypath\":[\"string\"],\"scope\":\"DATASET_SCOPE_UNSPECIFIED\"},\"operator\":{\"equals\":{\"selection\":{\"all\":{}}}}}}}],\"folderId\":{\"value\":\"string\"},\"id\":\"GZLHSeqelCbD3I7HbIDtL\",\"layout\":{\"sections\":[{\"id\":{\"value\":\"string\"},\"options\":{\"internal\":{}},\"rows\":[{\"appearance\":{\"height\":{\"value\":16}},\"id\":{\"value\":\"string\"},\"widgets\":[{\"appearance\":{\"width\":0},\"createdAt\":\"2019-08-24T14:15:22Z\",\"definition\":{\"lineChart\":{\"connectNulls\":false,\"legend\":{\"columns\":[\"LEGEND_COLUMN_UNSPECIFIED\"],\"groupByQuery\":true,\"isVisible\":true,\"placement\":\"LEGEND_PLACEMENT_UNSPECIFIED\"},\"queryDefinitions\":[{\"colorScheme\":{\"value\":\"classic\"},\"customUnit\":{\"value\":\"rpm\"},\"dataModeType\":\"DATA_MODE_TYPE_HIGH_UNSPECIFIED\",\"decimal\":4,\"decimalPrecision\":false,\"hashColors\":false,\"id\":{\"value\":\"73c65643-91d5-dba2-35cd-baa49dc65331\"},\"isVisible\":true,\"name\":{\"value\":\"Query A\"},\"query\":{\"logs\":{\"aggregations\":[],\"filters\":[],\"groupBy\":[],\"groupBys\":[]}},\"resolution\":{\"bucketsPresented\":0,\"interval\":\"string\"},\"scaleType\":\"SCALE_TYPE_UNSPECIFIED\",\"seriesCountLimit\":{\"value\":50},\"seriesNameTemplate\":{\"value\":\"Trace of {{ application }}\"},\"unit\":\"UNIT_UNSPECIFIED\",\"yAxisMax\":1000,\"yAxisMin\":-1000}],\"stackedLine\":\"STACKED_LINE_UNSPECIFIED\",\"tooltip\":{\"showLabels\":true,\"type\":\"TOOLTIP_TYPE_UNSPECIFIED\"}}},\"description\":{\"value\":\"Average delay of application\"},\"id\":{\"value\":\"string\"},\"title\":{\"value\":\"Gauge\"},\"updatedAt\":\"2019-08-24T14:15:22Z\"}]}]}]},\"name\":\"Example Name\",\"off\":{},\"slugName\":\"system-health-monitoring\",\"variables\":[{\"definition\":{\"constant\":{\"value\":\"string\"}},\"description\":\"string\",\"displayName\":\"string\",\"displayType\":\"VARIABLE_DISPLAY_TYPE_UNSPECIFIED\",\"name\":\"string\"}],\"variablesV2\":[{\"description\":\"string\",\"displayFullRow\":true,\"displayName\":\"string\",\"displayType\":\"VARIABLE_DISPLAY_TYPE_V2_UNSPECIFIED\",\"name\":\"string\",\"source\":{\"static\":{\"allOption\":{\"includeAll\":true,\"label\":\"string\"},\"values\":[{\"isDefault\":true,\"label\":\"string\",\"value\":\"string\"}],\"valuesOrderDirection\":\"ORDER_DIRECTION_UNSPECIFIED\"}},\"value\":{\"multiString\":{\"all\":{}}}}]},\"isLocked\":true,\"requestId\":\"string\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards\"\n\npayload = {\n    \"dashboard\": {\n        \"absoluteTimeFrame\": {\n            \"from\": \"2019-08-24T14:15:22Z\",\n            \"to\": \"2019-08-24T14:15:22Z\"\n        },\n        \"actions\": [\n            {\n                \"dataSource\": \"ACTION_DATA_SOURCE_TYPE_NONE_UNSPECIFIED\",\n                \"definition\": {\"customAction\": {\"url\": \"string\"}},\n                \"id\": \"string\",\n                \"name\": \"string\",\n                \"shouldOpenInNewWindow\": True,\n                \"widgetId\": \"string\"\n            }\n        ],\n        \"annotations\": [\n            {\n                \"description\": \"string\",\n                \"enabled\": True,\n                \"id\": \"string\",\n                \"name\": \"string\",\n                \"scope\": {\"allWidgets\": {}},\n                \"source\": {\"metrics\": {\n                        \"labels\": [\"string\"],\n                        \"messageTemplate\": \"string\",\n                        \"orientation\": \"ANNOTATION_ORIENTATION_VERTICAL_UNSPECIFIED\",\n                        \"promqlQuery\": {\"value\": \"string\"},\n                        \"strategy\": {\"startTimeMetric\": {}}\n                    }}\n            }\n        ],\n        \"description\": \"Sample description\",\n        \"filters\": [\n            {\n                \"collapsed\": True,\n                \"displayName\": \"string\",\n                \"enabled\": True,\n                \"source\": {\"logs\": {\n                        \"field\": \"string\",\n                        \"observationField\": {\n                            \"keypath\": [\"string\"],\n                            \"scope\": \"DATASET_SCOPE_UNSPECIFIED\"\n                        },\n                        \"operator\": {\"equals\": {\"selection\": {\"all\": {}}}}\n                    }}\n            }\n        ],\n        \"folderId\": {\"value\": \"string\"},\n        \"id\": \"GZLHSeqelCbD3I7HbIDtL\",\n        \"layout\": {\"sections\": [\n                {\n                    \"id\": {\"value\": \"string\"},\n                    \"options\": {\"internal\": {}},\n                    \"rows\": [\n                        {\n                            \"appearance\": {\"height\": {\"value\": 16}},\n                            \"id\": {\"value\": \"string\"},\n                            \"widgets\": [\n                                {\n                                    \"appearance\": {\"width\": 0},\n                                    \"createdAt\": \"2019-08-24T14:15:22Z\",\n                                    \"definition\": {\"lineChart\": {\n                                            \"connectNulls\": False,\n                                            \"legend\": {\n                                                \"columns\": [\"LEGEND_COLUMN_UNSPECIFIED\"],\n                                                \"groupByQuery\": True,\n                                                \"isVisible\": True,\n                                                \"placement\": \"LEGEND_PLACEMENT_UNSPECIFIED\"\n                                            },\n                                            \"queryDefinitions\": [\n                                                {\n                                                    \"colorScheme\": {\"value\": \"classic\"},\n                                                    \"customUnit\": {\"value\": \"rpm\"},\n                                                    \"dataModeType\": \"DATA_MODE_TYPE_HIGH_UNSPECIFIED\",\n                                                    \"decimal\": 4,\n                                                    \"decimalPrecision\": False,\n                                                    \"hashColors\": False,\n                                                    \"id\": {\"value\": \"73c65643-91d5-dba2-35cd-baa49dc65331\"},\n                                                    \"isVisible\": True,\n                                                    \"name\": {\"value\": \"Query A\"},\n                                                    \"query\": {\"logs\": {\n                                                            \"aggregations\": [],\n                                                            \"filters\": [],\n                                                            \"groupBy\": [],\n                                                            \"groupBys\": []\n                                                        }},\n                                                    \"resolution\": {\n                                                        \"bucketsPresented\": 0,\n                                                        \"interval\": \"string\"\n                                                    },\n                                                    \"scaleType\": \"SCALE_TYPE_UNSPECIFIED\",\n                                                    \"seriesCountLimit\": {\"value\": 50},\n                                                    \"seriesNameTemplate\": {\"value\": \"Trace of {{ application }}\"},\n                                                    \"unit\": \"UNIT_UNSPECIFIED\",\n                                                    \"yAxisMax\": 1000,\n                                                    \"yAxisMin\": -1000\n                                                }\n                                            ],\n                                            \"stackedLine\": \"STACKED_LINE_UNSPECIFIED\",\n                                            \"tooltip\": {\n                                                \"showLabels\": True,\n                                                \"type\": \"TOOLTIP_TYPE_UNSPECIFIED\"\n                                            }\n                                        }},\n                                    \"description\": {\"value\": \"Average delay of application\"},\n                                    \"id\": {\"value\": \"string\"},\n                                    \"title\": {\"value\": \"Gauge\"},\n                                    \"updatedAt\": \"2019-08-24T14:15:22Z\"\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]},\n        \"name\": \"Example Name\",\n        \"off\": {},\n        \"slugName\": \"system-health-monitoring\",\n        \"variables\": [\n            {\n                \"definition\": {\"constant\": {\"value\": \"string\"}},\n                \"description\": \"string\",\n                \"displayName\": \"string\",\n                \"displayType\": \"VARIABLE_DISPLAY_TYPE_UNSPECIFIED\",\n                \"name\": \"string\"\n            }\n        ],\n        \"variablesV2\": [\n            {\n                \"description\": \"string\",\n                \"displayFullRow\": True,\n                \"displayName\": \"string\",\n                \"displayType\": \"VARIABLE_DISPLAY_TYPE_V2_UNSPECIFIED\",\n                \"name\": \"string\",\n                \"source\": {\"static\": {\n                        \"allOption\": {\n                            \"includeAll\": True,\n                            \"label\": \"string\"\n                        },\n                        \"values\": [\n                            {\n                                \"isDefault\": True,\n                                \"label\": \"string\",\n                                \"value\": \"string\"\n                            }\n                        ],\n                        \"valuesOrderDirection\": \"ORDER_DIRECTION_UNSPECIFIED\"\n                    }},\n                \"value\": {\"multiString\": {\"all\": {}}}\n            }\n        ]\n    },\n    \"isLocked\": True,\n    \"requestId\": \"string\"\n}\nheaders = {\n    \"Authorization\": \"Bearer <API_KEY>\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request PUT \\\n  --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --header 'content-type: application/json' \\\n  --data '{\"dashboard\":{\"absoluteTimeFrame\":{\"from\":\"2019-08-24T14:15:22Z\",\"to\":\"2019-08-24T14:15:22Z\"},\"actions\":[{\"dataSource\":\"ACTION_DATA_SOURCE_TYPE_NONE_UNSPECIFIED\",\"definition\":{\"customAction\":{\"url\":\"string\"}},\"id\":\"string\",\"name\":\"string\",\"shouldOpenInNewWindow\":true,\"widgetId\":\"string\"}],\"annotations\":[{\"description\":\"string\",\"enabled\":true,\"id\":\"string\",\"name\":\"string\",\"scope\":{\"allWidgets\":{}},\"source\":{\"metrics\":{\"labels\":[\"string\"],\"messageTemplate\":\"string\",\"orientation\":\"ANNOTATION_ORIENTATION_VERTICAL_UNSPECIFIED\",\"promqlQuery\":{\"value\":\"string\"},\"strategy\":{\"startTimeMetric\":{}}}}}],\"description\":\"Sample description\",\"filters\":[{\"collapsed\":true,\"displayName\":\"string\",\"enabled\":true,\"source\":{\"logs\":{\"field\":\"string\",\"observationField\":{\"keypath\":[\"string\"],\"scope\":\"DATASET_SCOPE_UNSPECIFIED\"},\"operator\":{\"equals\":{\"selection\":{\"all\":{}}}}}}}],\"folderId\":{\"value\":\"string\"},\"id\":\"GZLHSeqelCbD3I7HbIDtL\",\"layout\":{\"sections\":[{\"id\":{\"value\":\"string\"},\"options\":{\"internal\":{}},\"rows\":[{\"appearance\":{\"height\":{\"value\":16}},\"id\":{\"value\":\"string\"},\"widgets\":[{\"appearance\":{\"width\":0},\"createdAt\":\"2019-08-24T14:15:22Z\",\"definition\":{\"lineChart\":{\"connectNulls\":false,\"legend\":{\"columns\":[\"LEGEND_COLUMN_UNSPECIFIED\"],\"groupByQuery\":true,\"isVisible\":true,\"placement\":\"LEGEND_PLACEMENT_UNSPECIFIED\"},\"queryDefinitions\":[{\"colorScheme\":{\"value\":\"classic\"},\"customUnit\":{\"value\":\"rpm\"},\"dataModeType\":\"DATA_MODE_TYPE_HIGH_UNSPECIFIED\",\"decimal\":4,\"decimalPrecision\":false,\"hashColors\":false,\"id\":{\"value\":\"73c65643-91d5-dba2-35cd-baa49dc65331\"},\"isVisible\":true,\"name\":{\"value\":\"Query A\"},\"query\":{\"logs\":{\"aggregations\":[],\"filters\":[],\"groupBy\":[],\"groupBys\":[]}},\"resolution\":{\"bucketsPresented\":0,\"interval\":\"string\"},\"scaleType\":\"SCALE_TYPE_UNSPECIFIED\",\"seriesCountLimit\":{\"value\":50},\"seriesNameTemplate\":{\"value\":\"Trace of {{ application }}\"},\"unit\":\"UNIT_UNSPECIFIED\",\"yAxisMax\":1000,\"yAxisMin\":-1000}],\"stackedLine\":\"STACKED_LINE_UNSPECIFIED\",\"tooltip\":{\"showLabels\":true,\"type\":\"TOOLTIP_TYPE_UNSPECIFIED\"}}},\"description\":{\"value\":\"Average delay of application\"},\"id\":{\"value\":\"string\"},\"title\":{\"value\":\"Gauge\"},\"updatedAt\":\"2019-08-24T14:15:22Z\"}]}]}]},\"name\":\"Example Name\",\"off\":{},\"slugName\":\"system-health-monitoring\",\"variables\":[{\"definition\":{\"constant\":{\"value\":\"string\"}},\"description\":\"string\",\"displayName\":\"string\",\"displayType\":\"VARIABLE_DISPLAY_TYPE_UNSPECIFIED\",\"name\":\"string\"}],\"variablesV2\":[{\"description\":\"string\",\"displayFullRow\":true,\"displayName\":\"string\",\"displayType\":\"VARIABLE_DISPLAY_TYPE_V2_UNSPECIFIED\",\"name\":\"string\",\"source\":{\"static\":{\"allOption\":{\"includeAll\":true,\"label\":\"string\"},\"values\":[{\"isDefault\":true,\"label\":\"string\",\"value\":\"string\"}],\"valuesOrderDirection\":\"ORDER_DIRECTION_UNSPECIFIED\"}},\"value\":{\"multiString\":{\"all\":{}}}}]},\"isLocked\":true,\"requestId\":\"string\"}'"
          }
        ]
      },
      "post": {
        "tags": [
          "Dashboard service"
        ],
        "summary": "Create a new dashboard",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "DashboardsService_CreateDashboard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Create dashboard request data structure",
                "description": "This is a request used to create a new custom dashboard",
                "type": "object",
                "properties": {
                  "dashboard": {
                    "$ref": "#/components/schemas/Dashboard"
                  },
                  "isLocked": {
                    "type": "boolean"
                  },
                  "requestId": {
                    "type": "string"
                  }
                },
                "required": [
                  "requestId",
                  "dashboard"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDashboardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "team-dashboards:Update"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards';\n\nlet options = {\n  method: 'POST',\n  headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},\n  body: '{\"dashboard\":{\"absoluteTimeFrame\":{\"from\":\"2019-08-24T14:15:22Z\",\"to\":\"2019-08-24T14:15:22Z\"},\"actions\":[{\"dataSource\":\"ACTION_DATA_SOURCE_TYPE_NONE_UNSPECIFIED\",\"definition\":{\"customAction\":{\"url\":\"string\"}},\"id\":\"string\",\"name\":\"string\",\"shouldOpenInNewWindow\":true,\"widgetId\":\"string\"}],\"annotations\":[{\"description\":\"string\",\"enabled\":true,\"id\":\"string\",\"name\":\"string\",\"scope\":{\"allWidgets\":{}},\"source\":{\"metrics\":{\"labels\":[\"string\"],\"messageTemplate\":\"string\",\"orientation\":\"ANNOTATION_ORIENTATION_VERTICAL_UNSPECIFIED\",\"promqlQuery\":{\"value\":\"string\"},\"strategy\":{\"startTimeMetric\":{}}}}}],\"description\":\"Sample description\",\"filters\":[{\"collapsed\":true,\"displayName\":\"string\",\"enabled\":true,\"source\":{\"logs\":{\"field\":\"string\",\"observationField\":{\"keypath\":[\"string\"],\"scope\":\"DATASET_SCOPE_UNSPECIFIED\"},\"operator\":{\"equals\":{\"selection\":{\"all\":{}}}}}}}],\"folderId\":{\"value\":\"string\"},\"id\":\"GZLHSeqelCbD3I7HbIDtL\",\"layout\":{\"sections\":[{\"id\":{\"value\":\"string\"},\"options\":{\"internal\":{}},\"rows\":[{\"appearance\":{\"height\":{\"value\":16}},\"id\":{\"value\":\"string\"},\"widgets\":[{\"appearance\":{\"width\":0},\"createdAt\":\"2019-08-24T14:15:22Z\",\"definition\":{\"lineChart\":{\"connectNulls\":false,\"legend\":{\"columns\":[\"LEGEND_COLUMN_UNSPECIFIED\"],\"groupByQuery\":true,\"isVisible\":true,\"placement\":\"LEGEND_PLACEMENT_UNSPECIFIED\"},\"queryDefinitions\":[{\"colorScheme\":{\"value\":\"classic\"},\"customUnit\":{\"value\":\"rpm\"},\"dataModeType\":\"DATA_MODE_TYPE_HIGH_UNSPECIFIED\",\"decimal\":4,\"decimalPrecision\":false,\"hashColors\":false,\"id\":{\"value\":\"73c65643-91d5-dba2-35cd-baa49dc65331\"},\"isVisible\":true,\"name\":{\"value\":\"Query A\"},\"query\":{\"logs\":{\"aggregations\":[],\"filters\":[],\"groupBy\":[],\"groupBys\":[]}},\"resolution\":{\"bucketsPresented\":0,\"interval\":\"string\"},\"scaleType\":\"SCALE_TYPE_UNSPECIFIED\",\"seriesCountLimit\":{\"value\":50},\"seriesNameTemplate\":{\"value\":\"Trace of {{ application }}\"},\"unit\":\"UNIT_UNSPECIFIED\",\"yAxisMax\":1000,\"yAxisMin\":-1000}],\"stackedLine\":\"STACKED_LINE_UNSPECIFIED\",\"tooltip\":{\"showLabels\":true,\"type\":\"TOOLTIP_TYPE_UNSPECIFIED\"}}},\"description\":{\"value\":\"Average delay of application\"},\"id\":{\"value\":\"string\"},\"title\":{\"value\":\"Gauge\"},\"updatedAt\":\"2019-08-24T14:15:22Z\"}]}]}]},\"name\":\"Example Name\",\"off\":{},\"slugName\":\"system-health-monitoring\",\"variables\":[{\"definition\":{\"constant\":{\"value\":\"string\"}},\"description\":\"string\",\"displayName\":\"string\",\"displayType\":\"VARIABLE_DISPLAY_TYPE_UNSPECIFIED\",\"name\":\"string\"}],\"variablesV2\":[{\"description\":\"string\",\"displayFullRow\":true,\"displayName\":\"string\",\"displayType\":\"VARIABLE_DISPLAY_TYPE_V2_UNSPECIFIED\",\"name\":\"string\",\"source\":{\"static\":{\"allOption\":{\"includeAll\":true,\"label\":\"string\"},\"values\":[{\"isDefault\":true,\"label\":\"string\",\"value\":\"string\"}],\"valuesOrderDirection\":\"ORDER_DIRECTION_UNSPECIFIED\"}},\"value\":{\"multiString\":{\"all\":{}}}}]},\"isLocked\":true,\"requestId\":\"string\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards\"\n\npayload = {\n    \"dashboard\": {\n        \"absoluteTimeFrame\": {\n            \"from\": \"2019-08-24T14:15:22Z\",\n            \"to\": \"2019-08-24T14:15:22Z\"\n        },\n        \"actions\": [\n            {\n                \"dataSource\": \"ACTION_DATA_SOURCE_TYPE_NONE_UNSPECIFIED\",\n                \"definition\": {\"customAction\": {\"url\": \"string\"}},\n                \"id\": \"string\",\n                \"name\": \"string\",\n                \"shouldOpenInNewWindow\": True,\n                \"widgetId\": \"string\"\n            }\n        ],\n        \"annotations\": [\n            {\n                \"description\": \"string\",\n                \"enabled\": True,\n                \"id\": \"string\",\n                \"name\": \"string\",\n                \"scope\": {\"allWidgets\": {}},\n                \"source\": {\"metrics\": {\n                        \"labels\": [\"string\"],\n                        \"messageTemplate\": \"string\",\n                        \"orientation\": \"ANNOTATION_ORIENTATION_VERTICAL_UNSPECIFIED\",\n                        \"promqlQuery\": {\"value\": \"string\"},\n                        \"strategy\": {\"startTimeMetric\": {}}\n                    }}\n            }\n        ],\n        \"description\": \"Sample description\",\n        \"filters\": [\n            {\n                \"collapsed\": True,\n                \"displayName\": \"string\",\n                \"enabled\": True,\n                \"source\": {\"logs\": {\n                        \"field\": \"string\",\n                        \"observationField\": {\n                            \"keypath\": [\"string\"],\n                            \"scope\": \"DATASET_SCOPE_UNSPECIFIED\"\n                        },\n                        \"operator\": {\"equals\": {\"selection\": {\"all\": {}}}}\n                    }}\n            }\n        ],\n        \"folderId\": {\"value\": \"string\"},\n        \"id\": \"GZLHSeqelCbD3I7HbIDtL\",\n        \"layout\": {\"sections\": [\n                {\n                    \"id\": {\"value\": \"string\"},\n                    \"options\": {\"internal\": {}},\n                    \"rows\": [\n                        {\n                            \"appearance\": {\"height\": {\"value\": 16}},\n                            \"id\": {\"value\": \"string\"},\n                            \"widgets\": [\n                                {\n                                    \"appearance\": {\"width\": 0},\n                                    \"createdAt\": \"2019-08-24T14:15:22Z\",\n                                    \"definition\": {\"lineChart\": {\n                                            \"connectNulls\": False,\n                                            \"legend\": {\n                                                \"columns\": [\"LEGEND_COLUMN_UNSPECIFIED\"],\n                                                \"groupByQuery\": True,\n                                                \"isVisible\": True,\n                                                \"placement\": \"LEGEND_PLACEMENT_UNSPECIFIED\"\n                                            },\n                                            \"queryDefinitions\": [\n                                                {\n                                                    \"colorScheme\": {\"value\": \"classic\"},\n                                                    \"customUnit\": {\"value\": \"rpm\"},\n                                                    \"dataModeType\": \"DATA_MODE_TYPE_HIGH_UNSPECIFIED\",\n                                                    \"decimal\": 4,\n                                                    \"decimalPrecision\": False,\n                                                    \"hashColors\": False,\n                                                    \"id\": {\"value\": \"73c65643-91d5-dba2-35cd-baa49dc65331\"},\n                                                    \"isVisible\": True,\n                                                    \"name\": {\"value\": \"Query A\"},\n                                                    \"query\": {\"logs\": {\n                                                            \"aggregations\": [],\n                                                            \"filters\": [],\n                                                            \"groupBy\": [],\n                                                            \"groupBys\": []\n                                                        }},\n                                                    \"resolution\": {\n                                                        \"bucketsPresented\": 0,\n                                                        \"interval\": \"string\"\n                                                    },\n                                                    \"scaleType\": \"SCALE_TYPE_UNSPECIFIED\",\n                                                    \"seriesCountLimit\": {\"value\": 50},\n                                                    \"seriesNameTemplate\": {\"value\": \"Trace of {{ application }}\"},\n                                                    \"unit\": \"UNIT_UNSPECIFIED\",\n                                                    \"yAxisMax\": 1000,\n                                                    \"yAxisMin\": -1000\n                                                }\n                                            ],\n                                            \"stackedLine\": \"STACKED_LINE_UNSPECIFIED\",\n                                            \"tooltip\": {\n                                                \"showLabels\": True,\n                                                \"type\": \"TOOLTIP_TYPE_UNSPECIFIED\"\n                                            }\n                                        }},\n                                    \"description\": {\"value\": \"Average delay of application\"},\n                                    \"id\": {\"value\": \"string\"},\n                                    \"title\": {\"value\": \"Gauge\"},\n                                    \"updatedAt\": \"2019-08-24T14:15:22Z\"\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]},\n        \"name\": \"Example Name\",\n        \"off\": {},\n        \"slugName\": \"system-health-monitoring\",\n        \"variables\": [\n            {\n                \"definition\": {\"constant\": {\"value\": \"string\"}},\n                \"description\": \"string\",\n                \"displayName\": \"string\",\n                \"displayType\": \"VARIABLE_DISPLAY_TYPE_UNSPECIFIED\",\n                \"name\": \"string\"\n            }\n        ],\n        \"variablesV2\": [\n            {\n                \"description\": \"string\",\n                \"displayFullRow\": True,\n                \"displayName\": \"string\",\n                \"displayType\": \"VARIABLE_DISPLAY_TYPE_V2_UNSPECIFIED\",\n                \"name\": \"string\",\n                \"source\": {\"static\": {\n                        \"allOption\": {\n                            \"includeAll\": True,\n                            \"label\": \"string\"\n                        },\n                        \"values\": [\n                            {\n                                \"isDefault\": True,\n                                \"label\": \"string\",\n                                \"value\": \"string\"\n                            }\n                        ],\n                        \"valuesOrderDirection\": \"ORDER_DIRECTION_UNSPECIFIED\"\n                    }},\n                \"value\": {\"multiString\": {\"all\": {}}}\n            }\n        ]\n    },\n    \"isLocked\": True,\n    \"requestId\": \"string\"\n}\nheaders = {\n    \"Authorization\": \"Bearer <API_KEY>\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --header 'content-type: application/json' \\\n  --data '{\"dashboard\":{\"absoluteTimeFrame\":{\"from\":\"2019-08-24T14:15:22Z\",\"to\":\"2019-08-24T14:15:22Z\"},\"actions\":[{\"dataSource\":\"ACTION_DATA_SOURCE_TYPE_NONE_UNSPECIFIED\",\"definition\":{\"customAction\":{\"url\":\"string\"}},\"id\":\"string\",\"name\":\"string\",\"shouldOpenInNewWindow\":true,\"widgetId\":\"string\"}],\"annotations\":[{\"description\":\"string\",\"enabled\":true,\"id\":\"string\",\"name\":\"string\",\"scope\":{\"allWidgets\":{}},\"source\":{\"metrics\":{\"labels\":[\"string\"],\"messageTemplate\":\"string\",\"orientation\":\"ANNOTATION_ORIENTATION_VERTICAL_UNSPECIFIED\",\"promqlQuery\":{\"value\":\"string\"},\"strategy\":{\"startTimeMetric\":{}}}}}],\"description\":\"Sample description\",\"filters\":[{\"collapsed\":true,\"displayName\":\"string\",\"enabled\":true,\"source\":{\"logs\":{\"field\":\"string\",\"observationField\":{\"keypath\":[\"string\"],\"scope\":\"DATASET_SCOPE_UNSPECIFIED\"},\"operator\":{\"equals\":{\"selection\":{\"all\":{}}}}}}}],\"folderId\":{\"value\":\"string\"},\"id\":\"GZLHSeqelCbD3I7HbIDtL\",\"layout\":{\"sections\":[{\"id\":{\"value\":\"string\"},\"options\":{\"internal\":{}},\"rows\":[{\"appearance\":{\"height\":{\"value\":16}},\"id\":{\"value\":\"string\"},\"widgets\":[{\"appearance\":{\"width\":0},\"createdAt\":\"2019-08-24T14:15:22Z\",\"definition\":{\"lineChart\":{\"connectNulls\":false,\"legend\":{\"columns\":[\"LEGEND_COLUMN_UNSPECIFIED\"],\"groupByQuery\":true,\"isVisible\":true,\"placement\":\"LEGEND_PLACEMENT_UNSPECIFIED\"},\"queryDefinitions\":[{\"colorScheme\":{\"value\":\"classic\"},\"customUnit\":{\"value\":\"rpm\"},\"dataModeType\":\"DATA_MODE_TYPE_HIGH_UNSPECIFIED\",\"decimal\":4,\"decimalPrecision\":false,\"hashColors\":false,\"id\":{\"value\":\"73c65643-91d5-dba2-35cd-baa49dc65331\"},\"isVisible\":true,\"name\":{\"value\":\"Query A\"},\"query\":{\"logs\":{\"aggregations\":[],\"filters\":[],\"groupBy\":[],\"groupBys\":[]}},\"resolution\":{\"bucketsPresented\":0,\"interval\":\"string\"},\"scaleType\":\"SCALE_TYPE_UNSPECIFIED\",\"seriesCountLimit\":{\"value\":50},\"seriesNameTemplate\":{\"value\":\"Trace of {{ application }}\"},\"unit\":\"UNIT_UNSPECIFIED\",\"yAxisMax\":1000,\"yAxisMin\":-1000}],\"stackedLine\":\"STACKED_LINE_UNSPECIFIED\",\"tooltip\":{\"showLabels\":true,\"type\":\"TOOLTIP_TYPE_UNSPECIFIED\"}}},\"description\":{\"value\":\"Average delay of application\"},\"id\":{\"value\":\"string\"},\"title\":{\"value\":\"Gauge\"},\"updatedAt\":\"2019-08-24T14:15:22Z\"}]}]}]},\"name\":\"Example Name\",\"off\":{},\"slugName\":\"system-health-monitoring\",\"variables\":[{\"definition\":{\"constant\":{\"value\":\"string\"}},\"description\":\"string\",\"displayName\":\"string\",\"displayType\":\"VARIABLE_DISPLAY_TYPE_UNSPECIFIED\",\"name\":\"string\"}],\"variablesV2\":[{\"description\":\"string\",\"displayFullRow\":true,\"displayName\":\"string\",\"displayType\":\"VARIABLE_DISPLAY_TYPE_V2_UNSPECIFIED\",\"name\":\"string\",\"source\":{\"static\":{\"allOption\":{\"includeAll\":true,\"label\":\"string\"},\"values\":[{\"isDefault\":true,\"label\":\"string\",\"value\":\"string\"}],\"valuesOrderDirection\":\"ORDER_DIRECTION_UNSPECIFIED\"}},\"value\":{\"multiString\":{\"all\":{}}}}]},\"isLocked\":true,\"requestId\":\"string\"}'"
          }
        ]
      }
    },
    "/v1/dashboards/dashboards/{dashboard_id}": {
      "get": {
        "tags": [
          "Dashboard service"
        ],
        "summary": "Get a dashboard",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "DashboardsService_GetDashboard",
        "parameters": [
          {
            "in": "path",
            "name": "dashboard_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDashboardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "team-dashboards:Read"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D\"\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      },
      "delete": {
        "tags": [
          "Dashboard service"
        ],
        "summary": "Delete a dashboard",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "DashboardsService_DeleteDashboard",
        "parameters": [
          {
            "in": "path",
            "name": "dashboard_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "request_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteDashboardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "team-dashboards:Update"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D?request_id=SOME_STRING_VALUE';\n\nlet options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D\"\n\nquerystring = {\"request_id\":\"SOME_STRING_VALUE\"}\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request DELETE \\\n  --url 'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D?request_id=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/v1/dashboards/dashboards/{dashboard_id}/default": {
      "put": {
        "tags": [
          "Dashboard service"
        ],
        "summary": "Replace the default dashboard",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "DashboardsService_ReplaceDefaultDashboard",
        "parameters": [
          {
            "in": "path",
            "name": "dashboard_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Replace default dashboard request data structure",
                "description": "This is a request to replace a default dashboard",
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string"
                  }
                },
                "required": [
                  "requestId",
                  "dashboardId"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplaceDefaultDashboardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "team-dashboards:Update"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D/default';\n\nlet options = {\n  method: 'PUT',\n  headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},\n  body: '{\"requestId\":\"string\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D/default\"\n\npayload = {\"requestId\": \"string\"}\nheaders = {\n    \"Authorization\": \"Bearer <API_KEY>\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request PUT \\\n  --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D/default \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --header 'content-type: application/json' \\\n  --data '{\"requestId\":\"string\"}'"
          }
        ]
      }
    },
    "/v1/dashboards/dashboards/{dashboard_id}/folder": {
      "post": {
        "tags": [
          "Dashboard service"
        ],
        "summary": "Assign a dashboard to a folder",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "DashboardsService_AssignDashboardFolder",
        "parameters": [
          {
            "in": "path",
            "name": "dashboard_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Assign dashboard to folder request data structure",
                "description": "This is a request for assigning a folder to a dashboard",
                "type": "object",
                "properties": {
                  "folderId": {
                    "type": "string"
                  },
                  "requestId": {
                    "type": "string"
                  }
                },
                "required": [
                  "requestId",
                  "dashboardId"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignDashboardFolderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "team-dashboards:Update"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D/folder';\n\nlet options = {\n  method: 'POST',\n  headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},\n  body: '{\"folderId\":\"string\",\"requestId\":\"string\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D/folder\"\n\npayload = {\n    \"folderId\": \"string\",\n    \"requestId\": \"string\"\n}\nheaders = {\n    \"Authorization\": \"Bearer <API_KEY>\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D/folder \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --header 'content-type: application/json' \\\n  --data '{\"folderId\":\"string\",\"requestId\":\"string\"}'"
          }
        ]
      }
    },
    "/v1/dashboards/dashboards/{dashboard_id}:pin": {
      "patch": {
        "tags": [
          "Dashboard service"
        ],
        "summary": "Add dashboard to favorites",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "DashboardsService_PinDashboard",
        "parameters": [
          {
            "in": "path",
            "name": "dashboard_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Pin dashboard request data structure",
                "description": "This is a request used to mark certain dashboard as pinned",
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string"
                  }
                },
                "required": [
                  "requestId",
                  "dashboardId"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PinDashboardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "team-dashboards:Read"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D:pin';\n\nlet options = {\n  method: 'PATCH',\n  headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},\n  body: '{\"requestId\":\"string\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D:pin\"\n\npayload = {\"requestId\": \"string\"}\nheaders = {\n    \"Authorization\": \"Bearer <API_KEY>\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.request(\"PATCH\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request PATCH \\\n  --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D:pin \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --header 'content-type: application/json' \\\n  --data '{\"requestId\":\"string\"}'"
          }
        ]
      }
    },
    "/v1/dashboards/dashboards/{dashboard_id}:unpin": {
      "patch": {
        "tags": [
          "Dashboard service"
        ],
        "summary": "Remove dashboard from favorites",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "DashboardsService_UnpinDashboard",
        "parameters": [
          {
            "in": "path",
            "name": "dashboard_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Unpin dashboard request data structure",
                "description": "This is a request used to unpin a certain dashboard",
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string"
                  }
                },
                "required": [
                  "requestId",
                  "dashboardId"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnpinDashboardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-coralogixPermissions": [
          "team-dashboards:Read"
        ],
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D:unpin';\n\nlet options = {\n  method: 'PATCH',\n  headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},\n  body: '{\"requestId\":\"string\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D:unpin\"\n\npayload = {\"requestId\": \"string\"}\nheaders = {\n    \"Authorization\": \"Bearer <API_KEY>\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.request(\"PATCH\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request PATCH \\\n  --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D:unpin \\\n  --header 'Authorization: Bearer <API_KEY>' \\\n  --header 'content-type: application/json' \\\n  --data '{\"requestId\":\"string\"}'"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ActionDataSourceType": {
        "type": "string",
        "enum": [
          "ACTION_DATA_SOURCE_TYPE_NONE_UNSPECIFIED",
          "ACTION_DATA_SOURCE_TYPE_LOGS",
          "ACTION_DATA_SOURCE_TYPE_SPANS",
          "ACTION_DATA_SOURCE_TYPE_METRICS",
          "ACTION_DATA_SOURCE_TYPE_DATAPRIME"
        ]
      },
      "ActionDefinition": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "customAction": {
                "$ref": "#/components/schemas/CustomAction"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "goToDashboardAction": {
                "$ref": "#/components/schemas/GoToDashboardTemplateAction"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AllOption": {
        "type": "object",
        "properties": {
          "includeAll": {
            "type": "boolean"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "AllValue": {
        "type": "object"
      },
      "AllWidgets": {
        "type": "object"
      },
      "Annotation": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/WidgetScope"
          },
          "source": {
            "$ref": "#/components/schemas/Annotation.Source"
          }
        }
      },
      "Annotation.Source": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "metrics": {
                "$ref": "#/components/schemas/MetricsSource"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "logs": {
                "$ref": "#/components/schemas/LogsSource"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "spans": {
                "$ref": "#/components/schemas/SpansSource"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "dataprime": {
                "$ref": "#/components/schemas/DataprimeSource"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "manual": {
                "$ref": "#/components/schemas/ManualSource"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AnnotationOrientation": {
        "type": "string",
        "enum": [
          "ANNOTATION_ORIENTATION_VERTICAL_UNSPECIFIED",
          "ANNOTATION_ORIENTATION_HORIZONTAL"
        ]
      },
      "AssignDashboardFolderResponse": {
        "externalDocs": {
          "description": "Find out more about Dashboards in our documentation.",
          "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
        },
        "title": "Assign dashboard to folder response data structure",
        "description": "This is a response confirming that folder has been successfully assigned to a dashboard",
        "type": "object"
      },
      "AutoRefreshFiveMinutes": {
        "type": "object"
      },
      "AutoRefreshOff": {
        "type": "object"
      },
      "AutoRefreshTwoMinutes": {
        "type": "object"
      },
      "Average": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "observationField": {
            "$ref": "#/components/schemas/ObservationField"
          }
        }
      },
      "BarChart": {
        "externalDocs": {
          "url": ""
        },
        "title": "BarChart",
        "description": "BarChart represents the configuration of a vertical bar chart widget.",
        "type": "object",
        "properties": {
          "barValueDisplay": {
            "$ref": "#/components/schemas/widgets.BarValueDisplay"
          },
          "colorScheme": {
            "example": "classic",
            "description": "Applied color scheme, one of the predefined values",
            "type": "string"
          },
          "colorsBy": {
            "$ref": "#/components/schemas/ColorsBy"
          },
          "customUnit": {
            "example": "mph",
            "description": "Custom unit (requires to have unit field set to custom to take effect)",
            "type": "string"
          },
          "dataModeType": {
            "$ref": "#/components/schemas/widgets.common.DataModeType"
          },
          "decimal": {
            "example": 4,
            "description": "Number indicating the decimal precision of the numeric values, within range 0-15",
            "type": "integer",
            "format": "int32"
          },
          "decimalPrecision": {
            "example": false,
            "description": "Whether to render numeric value without abbreviation",
            "type": "boolean"
          },
          "groupNameTemplate": {
            "example": "Result - {{ variable }}",
            "description": "Custom template name for a bar group, can contain variables",
            "type": "string"
          },
          "hashColors": {
            "example": false,
            "description": "Whether to ignore color scheme and derive colors from algorithm",
            "type": "boolean"
          },
          "legend": {
            "$ref": "#/components/schemas/Legend"
          },
          "maxBarsPerChart": {
            "example": 20,
            "description": "Maximum number of bars on a chart",
            "type": "integer",
            "format": "int32"
          },
          "query": {
            "$ref": "#/components/schemas/BarChart.Query"
          },
          "scaleType": {
            "$ref": "#/components/schemas/ScaleType"
          },
          "sortBy": {
            "$ref": "#/components/schemas/SortByType"
          },
          "stackDefinition": {
            "$ref": "#/components/schemas/BarChart.StackDefinition"
          },
          "unit": {
            "$ref": "#/components/schemas/common.Unit"
          },
          "xAxis": {
            "$ref": "#/components/schemas/XAxis"
          },
          "yAxisMax": {
            "example": 1000,
            "description": "Number indicating the upper band for y axis",
            "type": "number",
            "format": "float"
          },
          "yAxisMin": {
            "example": -1000,
            "description": "Number indicating the lower band for y axis",
            "type": "number",
            "format": "float"
          }
        }
      },
      "BarChart.DataprimeQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "DataprimeQuery",
        "description": "A Dataprime variant of the query",
        "type": "object",
        "properties": {
          "dataprimeQuery": {
            "$ref": "#/components/schemas/common.DataprimeQuery"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter.Source"
            }
          },
          "groupNames": {
            "type": "array",
            "items": {
              "description": "List of field names by which results are grouped",
              "type": "string"
            }
          },
          "stackedGroupName": {
            "description": "Field name by which results in groups are divided into subgroups",
            "type": "string"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "BarChart.LogsQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "LogsQuery",
        "description": "A logs variant of the query",
        "type": "object",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/LogsAggregation"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter.LogsFilter"
            }
          },
          "groupNames": {
            "type": "array",
            "items": {
              "description": "List of field names to group the query results",
              "type": "string"
            }
          },
          "groupNamesFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "luceneQuery": {
            "$ref": "#/components/schemas/LuceneQuery"
          },
          "stackedGroupName": {
            "description": "Field name by which results are stacked in individual group",
            "type": "string"
          },
          "stackedGroupNameField": {
            "$ref": "#/components/schemas/ObservationField"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "BarChart.MetricsQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "MetricsQuery",
        "description": "A metrics variant of the query",
        "type": "object",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/common.Aggregation"
          },
          "editorMode": {
            "$ref": "#/components/schemas/MetricsQueryEditorMode"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricsFilter"
            }
          },
          "groupNames": {
            "type": "array",
            "items": {
              "description": "List of field names by which metric results are grouped",
              "type": "string"
            }
          },
          "promqlQuery": {
            "$ref": "#/components/schemas/PromQlQuery"
          },
          "promqlQueryType": {
            "$ref": "#/components/schemas/PromQLQueryType"
          },
          "stackedGroupName": {
            "description": "Field name by which results in groups are divided into subgroups",
            "type": "string"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "BarChart.Query": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "logs": {
                "$ref": "#/components/schemas/BarChart.LogsQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "spans": {
                "$ref": "#/components/schemas/BarChart.SpansQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "metrics": {
                "$ref": "#/components/schemas/BarChart.MetricsQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "dataprime": {
                "$ref": "#/components/schemas/BarChart.DataprimeQuery"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "BarChart.SpansQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "SpansQuery",
        "description": "A spans variant of the query",
        "type": "object",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/SpansAggregation"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpansFilter"
            }
          },
          "groupNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpanField"
            }
          },
          "groupNamesFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpanObservationField"
            }
          },
          "luceneQuery": {
            "$ref": "#/components/schemas/LuceneQuery"
          },
          "stackedGroupName": {
            "$ref": "#/components/schemas/SpanField"
          },
          "stackedGroupNameField": {
            "$ref": "#/components/schemas/SpanObservationField"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "BarChart.StackDefinition": {
        "type": "object",
        "properties": {
          "maxSlicesPerBar": {
            "description": "How many slices can fit in a single bar",
            "type": "integer",
            "format": "int32"
          },
          "stackNameTemplate": {
            "description": "Custom template name of an individual stack",
            "type": "string"
          }
        }
      },
      "ColorsBy": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "stack": {
                "$ref": "#/components/schemas/ColorsByStack"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "groupBy": {
                "$ref": "#/components/schemas/ColorsByGroupBy"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "aggregation": {
                "$ref": "#/components/schemas/ColorsByAggregation"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ColorsByAggregation": {
        "type": "object"
      },
      "ColorsByGroupBy": {
        "type": "object"
      },
      "ColorsByStack": {
        "type": "object"
      },
      "Constant": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        }
      },
      "ConstantListSource": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Count": {
        "type": "object"
      },
      "CountDistinct": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "observationField": {
            "$ref": "#/components/schemas/ObservationField"
          }
        }
      },
      "CreateDashboardResponse": {
        "externalDocs": {
          "description": "Find out more Dashboards in our documentation.",
          "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
        },
        "title": "Create dashboard response data structure",
        "description": "This is a response received when a custom dashboard is successfully created",
        "type": "object",
        "properties": {
          "dashboardId": {
            "type": "string"
          }
        }
      },
      "CustomAction": {
        "type": "object",
        "properties": {
          "url": {
            "description": "Static URL that may contain variables using {{variable_name}} syntax",
            "type": "string"
          }
        }
      },
      "CustomSectionOptions": {
        "type": "object",
        "properties": {
          "collapsed": {
            "example": false,
            "description": "Indicator if the section is collapsed",
            "type": "boolean"
          },
          "color": {
            "$ref": "#/components/schemas/SectionColor"
          },
          "description": {
            "example": {
              "value": "Section with important statistics"
            },
            "description": "Short description of a section",
            "type": "string"
          },
          "name": {
            "example": {
              "value": "Main stats section"
            },
            "description": "Section custom name",
            "type": "string"
          },
          "repetitiveVar": {
            "$ref": "#/components/schemas/RepetitiveVar"
          }
        }
      },
      "Dashboard": {
        "oneOf": [
          {
            "externalDocs": {
              "description": "Learn more about Custom Dashboards in our documentation.",
              "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
            },
            "title": "Dashboard",
            "description": "Dashboard represents the structure and configuration of a Coralogix Custom Dashboard.",
            "type": "object",
            "properties": {
              "absoluteTimeFrame": {
                "$ref": "#/components/schemas/TimeFrame"
              },
              "actions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardAction"
                }
              },
              "annotations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Annotation"
                }
              },
              "description": {
                "example": "Sample description",
                "description": "A brief description or summary of the dashboard's purpose or content",
                "type": "string"
              },
              "filters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/filters.Filter"
                }
              },
              "folderId": {
                "$ref": "#/components/schemas/UUID"
              },
              "id": {
                "example": "GZLHSeqelCbD3I7HbIDtL",
                "description": "A unique identifier of the dashboard",
                "type": "string"
              },
              "layout": {
                "$ref": "#/components/schemas/Layout"
              },
              "name": {
                "example": "Example Name",
                "description": "The display name of the dashboard",
                "type": "string"
              },
              "off": {
                "$ref": "#/components/schemas/AutoRefreshOff"
              },
              "slugName": {
                "example": "system-health-monitoring",
                "description": "A unique slug name serving as an alias for accessing the dashboard",
                "type": "string"
              },
              "variables": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Variable"
                }
              },
              "variablesV2": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VariableV2"
                }
              }
            },
            "required": [
              "name",
              "layout"
            ],
            "additionalProperties": false
          },
          {
            "externalDocs": {
              "description": "Learn more about Custom Dashboards in our documentation.",
              "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
            },
            "title": "Dashboard",
            "description": "Dashboard represents the structure and configuration of a Coralogix Custom Dashboard.",
            "type": "object",
            "properties": {
              "absoluteTimeFrame": {
                "$ref": "#/components/schemas/TimeFrame"
              },
              "actions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardAction"
                }
              },
              "annotations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Annotation"
                }
              },
              "description": {
                "example": "Sample description",
                "description": "A brief description or summary of the dashboard's purpose or content",
                "type": "string"
              },
              "filters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/filters.Filter"
                }
              },
              "folderId": {
                "$ref": "#/components/schemas/UUID"
              },
              "id": {
                "example": "GZLHSeqelCbD3I7HbIDtL",
                "description": "A unique identifier of the dashboard",
                "type": "string"
              },
              "layout": {
                "$ref": "#/components/schemas/Layout"
              },
              "name": {
                "example": "Example Name",
                "description": "The display name of the dashboard",
                "type": "string"
              },
              "slugName": {
                "example": "system-health-monitoring",
                "description": "A unique slug name serving as an alias for accessing the dashboard",
                "type": "string"
              },
              "twoMinutes": {
                "$ref": "#/components/schemas/AutoRefreshTwoMinutes"
              },
              "variables": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Variable"
                }
              },
              "variablesV2": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VariableV2"
                }
              }
            },
            "required": [
              "name",
              "layout"
            ],
            "additionalProperties": false
          },
          {
            "externalDocs": {
              "description": "Learn more about Custom Dashboards in our documentation.",
              "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
            },
            "title": "Dashboard",
            "description": "Dashboard represents the structure and configuration of a Coralogix Custom Dashboard.",
            "type": "object",
            "properties": {
              "absoluteTimeFrame": {
                "$ref": "#/components/schemas/TimeFrame"
              },
              "actions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardAction"
                }
              },
              "annotations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Annotation"
                }
              },
              "description": {
                "example": "Sample description",
                "description": "A brief description or summary of the dashboard's purpose or content",
                "type": "string"
              },
              "filters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/filters.Filter"
                }
              },
              "fiveMinutes": {
                "$ref": "#/components/schemas/AutoRefreshFiveMinutes"
              },
              "folderId": {
                "$ref": "#/components/schemas/UUID"
              },
              "id": {
                "example": "GZLHSeqelCbD3I7HbIDtL",
                "description": "A unique identifier of the dashboard",
                "type": "string"
              },
              "layout": {
                "$ref": "#/components/schemas/Layout"
              },
              "name": {
                "example": "Example Name",
                "description": "The display name of the dashboard",
                "type": "string"
              },
              "slugName": {
                "example": "system-health-monitoring",
                "description": "A unique slug name serving as an alias for accessing the dashboard",
                "type": "string"
              },
              "variables": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Variable"
                }
              },
              "variablesV2": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VariableV2"
                }
              }
            },
            "required": [
              "name",
              "layout"
            ],
            "additionalProperties": false
          },
          {
            "externalDocs": {
              "description": "Learn more about Custom Dashboards in our documentation.",
              "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
            },
            "title": "Dashboard",
            "description": "Dashboard represents the structure and configuration of a Coralogix Custom Dashboard.",
            "type": "object",
            "properties": {
              "absoluteTimeFrame": {
                "$ref": "#/components/schemas/TimeFrame"
              },
              "actions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardAction"
                }
              },
              "annotations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Annotation"
                }
              },
              "description": {
                "example": "Sample description",
                "description": "A brief description or summary of the dashboard's purpose or content",
                "type": "string"
              },
              "filters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/filters.Filter"
                }
              },
              "folderPath": {
                "$ref": "#/components/schemas/FolderPath"
              },
              "id": {
                "example": "GZLHSeqelCbD3I7HbIDtL",
                "description": "A unique identifier of the dashboard",
                "type": "string"
              },
              "layout": {
                "$ref": "#/components/schemas/Layout"
              },
              "name": {
                "example": "Example Name",
                "description": "The display name of the dashboard",
                "type": "string"
              },
              "off": {
                "$ref": "#/components/schemas/AutoRefreshOff"
              },
              "slugName": {
                "example": "system-health-monitoring",
                "description": "A unique slug name serving as an alias for accessing the dashboard",
                "type": "string"
              },
              "variables": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Variable"
                }
              },
              "variablesV2": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VariableV2"
                }
              }
            },
            "required": [
              "name",
              "layout"
            ],
            "additionalProperties": false
          },
          {
            "externalDocs": {
              "description": "Learn more about Custom Dashboards in our documentation.",
              "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
            },
            "title": "Dashboard",
            "description": "Dashboard represents the structure and configuration of a Coralogix Custom Dashboard.",
            "type": "object",
            "properties": {
              "absoluteTimeFrame": {
                "$ref": "#/components/schemas/TimeFrame"
              },
              "actions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardAction"
                }
              },
              "annotations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Annotation"
                }
              },
              "description": {
                "example": "Sample description",
                "description": "A brief description or summary of the dashboard's purpose or content",
                "type": "string"
              },
              "filters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/filters.Filter"
                }
              },
              "folderPath": {
                "$ref": "#/components/schemas/FolderPath"
              },
              "id": {
                "example": "GZLHSeqelCbD3I7HbIDtL",
                "description": "A unique identifier of the dashboard",
                "type": "string"
              },
              "layout": {
                "$ref": "#/components/schemas/Layout"
              },
              "name": {
                "example": "Example Name",
                "description": "The display name of the dashboard",
                "type": "string"
              },
              "slugName": {
                "example": "system-health-monitoring",
                "description": "A unique slug name serving as an alias for accessing the dashboard",
                "type": "string"
              },
              "twoMinutes": {
                "$ref": "#/components/schemas/AutoRefreshTwoMinutes"
              },
              "variables": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Variable"
                }
              },
              "variablesV2": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VariableV2"
                }
              }
            },
            "required": [
              "name",
              "layout"
            ],
            "additionalProperties": false
          },
          {
            "externalDocs": {
              "description": "Learn more about Custom Dashboards in our documentation.",
              "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
            },
            "title": "Dashboard",
            "description": "Dashboard represents the structure and configuration of a Coralogix Custom Dashboard.",
            "type": "object",
            "properties": {
              "absoluteTimeFrame": {
                "$ref": "#/components/schemas/TimeFrame"
              },
              "actions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardAction"
                }
              },
              "annotations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Annotation"
                }
              },
              "description": {
                "example": "Sample description",
                "description": "A brief description or summary of the dashboard's purpose or content",
                "type": "string"
              },
              "filters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/filters.Filter"
                }
              },
              "fiveMinutes": {
                "$ref": "#/components/schemas/AutoRefreshFiveMinutes"
              },
              "folderPath": {
                "$ref": "#/components/schemas/FolderPath"
              },
              "id": {
                "example": "GZLHSeqelCbD3I7HbIDtL",
                "description": "A unique identifier of the dashboard",
                "type": "string"
              },
              "layout": {
                "$ref": "#/components/schemas/Layout"
              },
              "name": {
                "example": "Example Name",
                "description": "The display name of the dashboard",
                "type": "string"
              },
              "slugName": {
                "example": "system-health-monitoring",
                "description": "A unique slug name serving as an alias for accessing the dashboard",
                "type": "string"
              },
              "variables": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Variable"
                }
              },
              "variablesV2": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VariableV2"
                }
              }
            },
            "required": [
              "name",
              "layout"
            ],
            "additionalProperties": false
          },
          {
            "externalDocs": {
              "description": "Learn more about Custom Dashboards in our documentation.",
              "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
            },
            "title": "Dashboard",
            "description": "Dashboard represents the structure and configuration of a Coralogix Custom Dashboard.",
            "type": "object",
            "properties": {
              "actions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardAction"
                }
              },
              "annotations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Annotation"
                }
              },
              "description": {
                "example": "Sample description",
                "description": "A brief description or summary of the dashboard's purpose or content",
                "type": "string"
              },
              "filters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/filters.Filter"
                }
              },
              "folderId": {
                "$ref": "#/components/schemas/UUID"
              },
              "id": {
                "example": "GZLHSeqelCbD3I7HbIDtL",
                "description": "A unique identifier of the dashboard",
                "type": "string"
              },
              "layout": {
                "$ref": "#/components/schemas/Layout"
              },
              "name": {
                "example": "Example Name",
                "description": "The display name of the dashboard",
                "type": "string"
              },
              "off": {
                "$ref": "#/components/schemas/AutoRefreshOff"
              },
              "relativeTimeFrame": {
                "description": "Relative time frame specifying a duration from the current time",
                "type": "string"
              },
              "slugName": {
                "example": "system-health-monitoring",
                "description": "A unique slug name serving as an alias for accessing the dashboard",
                "type": "string"
              },
              "variables": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Variable"
                }
              },
              "variablesV2": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VariableV2"
                }
              }
            },
            "required": [
              "name",
              "layout"
            ],
            "additionalProperties": false
          },
          {
            "externalDocs": {
              "description": "Learn more about Custom Dashboards in our documentation.",
              "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
            },
            "title": "Dashboard",
            "description": "Dashboard represents the structure and configuration of a Coralogix Custom Dashboard.",
            "type": "object",
            "properties": {
              "actions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardAction"
                }
              },
              "annotations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Annotation"
                }
              },
              "description": {
                "example": "Sample description",
                "description": "A brief description or summary of the dashboard's purpose or content",
                "type": "string"
              },
              "filters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/filters.Filter"
                }
              },
              "folderId": {
                "$ref": "#/components/schemas/UUID"
              },
              "id": {
                "example": "GZLHSeqelCbD3I7HbIDtL",
                "description": "A unique identifier of the dashboard",
                "type": "string"
              },
              "layout": {
                "$ref": "#/components/schemas/Layout"
              },
              "name": {
                "example": "Example Name",
                "description": "The display name of the dashboard",
                "type": "string"
              },
              "relativeTimeFrame": {
                "description": "Relative time frame specifying a duration from the current time",
                "type": "string"
              },
              "slugName": {
                "example": "system-health-monitoring",
                "description": "A unique slug name serving as an alias for accessing the dashboard",
                "type": "string"
              },
              "twoMinutes": {
                "$ref": "#/components/schemas/AutoRefreshTwoMinutes"
              },
              "variables": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Variable"
                }
              },
              "variablesV2": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VariableV2"
                }
              }
            },
            "required": [
              "name",
              "layout"
            ],
            "additionalProperties": false
          },
          {
            "externalDocs": {
              "description": "Learn more about Custom Dashboards in our documentation.",
              "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
            },
            "title": "Dashboard",
            "description": "Dashboard represents the structure and configuration of a Coralogix Custom Dashboard.",
            "type": "object",
            "properties": {
              "actions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardAction"
                }
              },
              "annotations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Annotation"
                }
              },
              "description": {
                "example": "Sample description",
                "description": "A brief description or summary of the dashboard's purpose or content",
                "type": "string"
              },
              "filters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/filters.Filter"
                }
              },
              "fiveMinutes": {
                "$ref": "#/components/schemas/AutoRefreshFiveMinutes"
              },
              "folderId": {
                "$ref": "#/components/schemas/UUID"
              },
              "id": {
                "example": "GZLHSeqelCbD3I7HbIDtL",
                "description": "A unique identifier of the dashboard",
                "type": "string"
              },
              "layout": {
                "$ref": "#/components/schemas/Layout"
              },
              "name": {
                "example": "Example Name",
                "description": "The display name of the dashboard",
                "type": "string"
              },
              "relativeTimeFrame": {
                "description": "Relative time frame specifying a duration from the current time",
                "type": "string"
              },
              "slugName": {
                "example": "system-health-monitoring",
                "description": "A unique slug name serving as an alias for accessing the dashboard",
                "type": "string"
              },
              "variables": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Variable"
                }
              },
              "variablesV2": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VariableV2"
                }
              }
            },
            "required": [
              "name",
              "layout"
            ],
            "additionalProperties": false
          },
          {
            "externalDocs": {
              "description": "Learn more about Custom Dashboards in our documentation.",
              "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
            },
            "title": "Dashboard",
            "description": "Dashboard represents the structure and configuration of a Coralogix Custom Dashboard.",
            "type": "object",
            "properties": {
              "actions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardAction"
                }
              },
              "annotations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Annotation"
                }
              },
              "description": {
                "example": "Sample description",
                "description": "A brief description or summary of the dashboard's purpose or content",
                "type": "string"
              },
              "filters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/filters.Filter"
                }
              },
              "folderPath": {
                "$ref": "#/components/schemas/FolderPath"
              },
              "id": {
                "example": "GZLHSeqelCbD3I7HbIDtL",
                "description": "A unique identifier of the dashboard",
                "type": "string"
              },
              "layout": {
                "$ref": "#/components/schemas/Layout"
              },
              "name": {
                "example": "Example Name",
                "description": "The display name of the dashboard",
                "type": "string"
              },
              "off": {
                "$ref": "#/components/schemas/AutoRefreshOff"
              },
              "relativeTimeFrame": {
                "description": "Relative time frame specifying a duration from the current time",
                "type": "string"
              },
              "slugName": {
                "example": "system-health-monitoring",
                "description": "A unique slug name serving as an alias for accessing the dashboard",
                "type": "string"
              },
              "variables": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Variable"
                }
              },
              "variablesV2": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VariableV2"
                }
              }
            },
            "required": [
              "name",
              "layout"
            ],
            "additionalProperties": false
          },
          {
            "externalDocs": {
              "description": "Learn more about Custom Dashboards in our documentation.",
              "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
            },
            "title": "Dashboard",
            "description": "Dashboard represents the structure and configuration of a Coralogix Custom Dashboard.",
            "type": "object",
            "properties": {
              "actions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardAction"
                }
              },
              "annotations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Annotation"
                }
              },
              "description": {
                "example": "Sample description",
                "description": "A brief description or summary of the dashboard's purpose or content",
                "type": "string"
              },
              "filters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/filters.Filter"
                }
              },
              "folderPath": {
                "$ref": "#/components/schemas/FolderPath"
              },
              "id": {
                "example": "GZLHSeqelCbD3I7HbIDtL",
                "description": "A unique identifier of the dashboard",
                "type": "string"
              },
              "layout": {
                "$ref": "#/components/schemas/Layout"
              },
              "name": {
                "example": "Example Name",
                "description": "The display name of the dashboard",
                "type": "string"
              },
              "relativeTimeFrame": {
                "description": "Relative time frame specifying a duration from the current time",
                "type": "string"
              },
              "slugName": {
                "example": "system-health-monitoring",
                "description": "A unique slug name serving as an alias for accessing the dashboard",
                "type": "string"
              },
              "twoMinutes": {
                "$ref": "#/components/schemas/AutoRefreshTwoMinutes"
              },
              "variables": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Variable"
                }
              },
              "variablesV2": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VariableV2"
                }
              }
            },
            "required": [
              "name",
              "layout"
            ],
            "additionalProperties": false
          },
          {
            "externalDocs": {
              "description": "Learn more about Custom Dashboards in our documentation.",
              "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
            },
            "title": "Dashboard",
            "description": "Dashboard represents the structure and configuration of a Coralogix Custom Dashboard.",
            "type": "object",
            "properties": {
              "actions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardAction"
                }
              },
              "annotations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Annotation"
                }
              },
              "description": {
                "example": "Sample description",
                "description": "A brief description or summary of the dashboard's purpose or content",
                "type": "string"
              },
              "filters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/filters.Filter"
                }
              },
              "fiveMinutes": {
                "$ref": "#/components/schemas/AutoRefreshFiveMinutes"
              },
              "folderPath": {
                "$ref": "#/components/schemas/FolderPath"
              },
              "id": {
                "example": "GZLHSeqelCbD3I7HbIDtL",
                "description": "A unique identifier of the dashboard",
                "type": "string"
              },
              "layout": {
                "$ref": "#/components/schemas/Layout"
              },
              "name": {
                "example": "Example Name",
                "description": "The display name of the dashboard",
                "type": "string"
              },
              "relativeTimeFrame": {
                "description": "Relative time frame specifying a duration from the current time",
                "type": "string"
              },
              "slugName": {
                "example": "system-health-monitoring",
                "description": "A unique slug name serving as an alias for accessing the dashboard",
                "type": "string"
              },
              "variables": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Variable"
                }
              },
              "variablesV2": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VariableV2"
                }
              }
            },
            "required": [
              "name",
              "layout"
            ],
            "additionalProperties": false
          }
        ]
      },
      "DashboardAction": {
        "externalDocs": {
          "description": "Learn more about Custom Dashboards in our documentation.",
          "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
        },
        "title": "Dashboard Action",
        "description": "Public actions that are always available within specific dashboard's context.",
        "type": "object",
        "properties": {
          "dataSource": {
            "$ref": "#/components/schemas/ActionDataSourceType"
          },
          "definition": {
            "$ref": "#/components/schemas/ActionDefinition"
          },
          "id": {
            "description": "A unique identifier of the action",
            "type": "string"
          },
          "name": {
            "description": "The display name of the action",
            "type": "string"
          },
          "shouldOpenInNewWindow": {
            "description": "Defines if the action should open in a new window or current window in the browser",
            "type": "boolean"
          },
          "widgetId": {
            "description": "Reference to specific widget within a dashboard, can be null if the action is dashboard wide",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "DashboardCatalogItem": {
        "externalDocs": {
          "url": ""
        },
        "title": "Dashboard catalog item data structure",
        "type": "object",
        "properties": {
          "authorId": {
            "type": "string"
          },
          "createTime": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "folder": {
            "$ref": "#/components/schemas/DashboardFolder"
          },
          "id": {
            "example": "6U1Q8Hpa263Se8PkRKaiE",
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "isLocked": {
            "type": "boolean"
          },
          "isPinned": {
            "type": "boolean"
          },
          "lockerAuthorId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slugName": {
            "type": "string"
          },
          "updateTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DashboardFolder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parentId": {
            "type": "string"
          }
        }
      },
      "DataTable": {
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataTable.Column"
            }
          },
          "dataModeType": {
            "$ref": "#/components/schemas/widgets.common.DataModeType"
          },
          "orderBy": {
            "$ref": "#/components/schemas/OrderingField"
          },
          "query": {
            "$ref": "#/components/schemas/DataTable.Query"
          },
          "resultsPerPage": {
            "example": 10,
            "description": "How many results are displayed per table page",
            "type": "integer",
            "format": "int32"
          },
          "rowStyle": {
            "$ref": "#/components/schemas/RowStyle"
          }
        }
      },
      "DataTable.Column": {
        "type": "object",
        "properties": {
          "field": {
            "example": {
              "value": "coralogix.metadata.applicationName"
            },
            "description": "Name of the field to display in the column",
            "type": "string"
          },
          "width": {
            "description": "Custom width of the column, by default it's automatically adjusted",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DataTable.DataprimeQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "DataprimeQuery",
        "description": "A Dataprime variant of the query",
        "type": "object",
        "properties": {
          "dataprimeQuery": {
            "$ref": "#/components/schemas/common.DataprimeQuery"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter.Source"
            }
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "DataTable.LogsQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "LogsQuery",
        "description": "A logs variant of the query",
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter.LogsFilter"
            }
          },
          "grouping": {
            "$ref": "#/components/schemas/LogsQuery.Grouping"
          },
          "luceneQuery": {
            "$ref": "#/components/schemas/LuceneQuery"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "DataTable.MetricsQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "MetricsQuery",
        "description": "A metrics variant of the query",
        "type": "object",
        "properties": {
          "editorMode": {
            "$ref": "#/components/schemas/MetricsQueryEditorMode"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricsFilter"
            }
          },
          "promqlQuery": {
            "$ref": "#/components/schemas/PromQlQuery"
          },
          "promqlQueryType": {
            "$ref": "#/components/schemas/PromQLQueryType"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "DataTable.Query": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "logs": {
                "$ref": "#/components/schemas/DataTable.LogsQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "spans": {
                "$ref": "#/components/schemas/DataTable.SpansQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "metrics": {
                "$ref": "#/components/schemas/DataTable.MetricsQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "dataprime": {
                "$ref": "#/components/schemas/DataTable.DataprimeQuery"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "DataTable.SpansQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "SpansQuery",
        "description": "A spans variant of the query",
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpansFilter"
            }
          },
          "grouping": {
            "$ref": "#/components/schemas/SpansQuery.Grouping"
          },
          "luceneQuery": {
            "$ref": "#/components/schemas/LuceneQuery"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "Dataprime": {
        "externalDocs": {
          "url": ""
        },
        "title": "DataprimeQuery",
        "description": "A Dataprime variant of the query",
        "type": "object",
        "properties": {
          "dataModeType": {
            "$ref": "#/components/schemas/widgets.common.DataModeType"
          },
          "dataprimeQuery": {
            "$ref": "#/components/schemas/common.DataprimeQuery"
          }
        }
      },
      "DataprimeQuery.Type": {
        "type": "object",
        "properties": {
          "queryText": {
            "$ref": "#/components/schemas/QueryText"
          }
        },
        "additionalProperties": false
      },
      "DataprimeSource": {
        "type": "object",
        "properties": {
          "dataModeType": {
            "$ref": "#/components/schemas/v1.common.DataModeType"
          },
          "labelFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "messageTemplate": {
            "type": "string"
          },
          "orientation": {
            "$ref": "#/components/schemas/AnnotationOrientation"
          },
          "query": {
            "$ref": "#/components/schemas/common.DataprimeQuery"
          },
          "strategy": {
            "$ref": "#/components/schemas/DataprimeSource.Strategy"
          }
        }
      },
      "DataprimeSource.Strategy": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "instant": {
                "$ref": "#/components/schemas/DataprimeSource.Strategy.Instant"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "range": {
                "$ref": "#/components/schemas/DataprimeSource.Strategy.Range"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "duration": {
                "$ref": "#/components/schemas/DataprimeSource.Strategy.Duration"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "DataprimeSource.Strategy.Duration": {
        "type": "object",
        "properties": {
          "durationField": {
            "$ref": "#/components/schemas/ObservationField"
          },
          "startTimestampField": {
            "$ref": "#/components/schemas/ObservationField"
          }
        }
      },
      "DataprimeSource.Strategy.Instant": {
        "type": "object",
        "properties": {
          "timestampField": {
            "$ref": "#/components/schemas/ObservationField"
          }
        }
      },
      "DataprimeSource.Strategy.Range": {
        "type": "object",
        "properties": {
          "endTimestampField": {
            "$ref": "#/components/schemas/ObservationField"
          },
          "startTimestampField": {
            "$ref": "#/components/schemas/ObservationField"
          }
        }
      },
      "DatasetScope": {
        "type": "string",
        "enum": [
          "DATASET_SCOPE_UNSPECIFIED",
          "DATASET_SCOPE_USER_DATA",
          "DATASET_SCOPE_LABEL",
          "DATASET_SCOPE_METADATA"
        ]
      },
      "DeleteDashboardResponse": {
        "externalDocs": {
          "description": "Find out more Dashboards in our documentation.",
          "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
        },
        "title": "Delete dashboard response data structure",
        "description": "This is a response received when the dashboard is successfully deleted",
        "type": "object"
      },
      "DimensionAggregation": {
        "type": "object",
        "properties": {
          "aggregationType": {
            "$ref": "#/components/schemas/DimensionAggregationType"
          },
          "dimensionField": {
            "$ref": "#/components/schemas/DimensionField"
          }
        }
      },
      "DimensionAggregationType": {
        "type": "string",
        "enum": [
          "DIMENSION_AGGREGATION_TYPE_UNSPECIFIED",
          "DIMENSION_AGGREGATION_TYPE_UNIQUE_COUNT",
          "DIMENSION_AGGREGATION_TYPE_ERROR_COUNT"
        ]
      },
      "DimensionField": {
        "type": "string",
        "enum": [
          "DIMENSION_FIELD_UNSPECIFIED",
          "DIMENSION_FIELD_TRACE_ID"
        ]
      },
      "Dynamic.Query": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "logs": {
                "$ref": "#/components/schemas/Logs"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "spans": {
                "$ref": "#/components/schemas/Spans"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "metrics": {
                "$ref": "#/components/schemas/Metrics"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "dataprime": {
                "$ref": "#/components/schemas/Dataprime"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Equals.Selection": {
        "oneOf": [
          {
            "externalDocs": {
              "url": ""
            },
            "title": "Selection",
            "description": "This data structure defines the values for the equality comparison.",
            "type": "object",
            "properties": {
              "all": {
                "$ref": "#/components/schemas/Equals.Selection.AllSelection"
              }
            },
            "additionalProperties": false
          },
          {
            "externalDocs": {
              "url": ""
            },
            "title": "Selection",
            "description": "This data structure defines the values for the equality comparison.",
            "type": "object",
            "properties": {
              "list": {
                "$ref": "#/components/schemas/Equals.Selection.ListSelection"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Equals.Selection.AllSelection": {
        "externalDocs": {
          "url": ""
        },
        "title": "AllSelection",
        "description": "This data structure indicates that all values are selected.",
        "type": "object"
      },
      "Equals.Selection.ListSelection": {
        "externalDocs": {
          "url": ""
        },
        "title": "ListSelection",
        "description": "This data structure represents a selection from a list of specific values.",
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "description": "A list of selected values.",
              "type": "string"
            }
          }
        }
      },
      "FieldGroup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "Filter.Equals": {
        "externalDocs": {
          "url": ""
        },
        "title": "Equals",
        "description": "This data structure represents an equality comparison operation.",
        "type": "object",
        "properties": {
          "selection": {
            "$ref": "#/components/schemas/Equals.Selection"
          }
        }
      },
      "Filter.LogsFilter": {
        "externalDocs": {
          "url": ""
        },
        "title": "LogsFilter",
        "description": "This data structure represents the filter criteria for logs.",
        "type": "object",
        "properties": {
          "field": {
            "description": "The log field to which the filter is applied.",
            "type": "string"
          },
          "observationField": {
            "$ref": "#/components/schemas/ObservationField"
          },
          "operator": {
            "$ref": "#/components/schemas/Filter.Operator"
          }
        }
      },
      "Filter.NotEquals": {
        "externalDocs": {
          "url": ""
        },
        "title": "NotEquals",
        "description": "This data structure represents a non-equality comparison operation.",
        "type": "object",
        "properties": {
          "selection": {
            "$ref": "#/components/schemas/NotEquals.Selection"
          }
        }
      },
      "Filter.Operator": {
        "oneOf": [
          {
            "externalDocs": {
              "url": ""
            },
            "title": "Operator",
            "description": "This data structure defines the comparison operation for the filter.",
            "type": "object",
            "properties": {
              "equals": {
                "$ref": "#/components/schemas/Filter.Equals"
              }
            },
            "additionalProperties": false
          },
          {
            "externalDocs": {
              "url": ""
            },
            "title": "Operator",
            "description": "This data structure defines the comparison operation for the filter.",
            "type": "object",
            "properties": {
              "notEquals": {
                "$ref": "#/components/schemas/Filter.NotEquals"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Filter.Source": {
        "oneOf": [
          {
            "externalDocs": {
              "url": ""
            },
            "title": "Source",
            "description": "Defines the type of data the filter applies to.",
            "type": "object",
            "properties": {
              "logs": {
                "$ref": "#/components/schemas/Filter.LogsFilter"
              }
            },
            "additionalProperties": false
          },
          {
            "externalDocs": {
              "url": ""
            },
            "title": "Source",
            "description": "Defines the type of data the filter applies to.",
            "type": "object",
            "properties": {
              "spans": {
                "$ref": "#/components/schemas/SpansFilter"
              }
            },
            "additionalProperties": false
          },
          {
            "externalDocs": {
              "url": ""
            },
            "title": "Source",
            "description": "Defines the type of data the filter applies to.",
            "type": "object",
            "properties": {
              "metrics": {
                "$ref": "#/components/schemas/MetricsFilter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "FilterPathAndValues": {
        "oneOf": [
          {
            "externalDocs": {
              "url": ""
            },
            "title": "FilterPathAndValues",
            "description": "This data structure represents a filter path and values",
            "type": "object",
            "properties": {
              "multipleValues": {
                "$ref": "#/components/schemas/MultipleValues"
              },
              "path": {
                "example": "test",
                "type": "string"
              }
            },
            "required": [
              "path",
              "values"
            ],
            "additionalProperties": false
          },
          {
            "externalDocs": {
              "url": ""
            },
            "title": "FilterPathAndValues",
            "description": "This data structure represents a filter path and values",
            "type": "object",
            "properties": {
              "filters": {
                "$ref": "#/components/schemas/Filters"
              },
              "path": {
                "example": "test",
                "type": "string"
              }
            },
            "required": [
              "path",
              "values"
            ],
            "additionalProperties": false
          }
        ]
      },
      "Filters": {
        "externalDocs": {
          "url": ""
        },
        "title": "Filters",
        "description": "This data structure represents a filter",
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/v3.FilterOperator"
          },
          "pathAndValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterPathAndValues"
            }
          }
        },
        "required": [
          "pathAndValues"
        ]
      },
      "FolderPath": {
        "type": "object",
        "properties": {
          "segments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Gauge.Aggregation": {
        "type": "string",
        "enum": [
          "AGGREGATION_UNSPECIFIED",
          "AGGREGATION_LAST",
          "AGGREGATION_MIN",
          "AGGREGATION_MAX",
          "AGGREGATION_AVG",
          "AGGREGATION_SUM"
        ]
      },
      "Gauge.DataprimeQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "DataprimeQuery",
        "description": "A Dataprime variant of the query",
        "type": "object",
        "properties": {
          "dataprimeQuery": {
            "$ref": "#/components/schemas/common.DataprimeQuery"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter.Source"
            }
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "Gauge.LogsQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "LogsQuery",
        "description": "A logs variant of the query",
        "type": "object",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/Gauge.Aggregation"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter.LogsFilter"
            }
          },
          "groupBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "logsAggregation": {
            "$ref": "#/components/schemas/LogsAggregation"
          },
          "luceneQuery": {
            "$ref": "#/components/schemas/LuceneQuery"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "Gauge.MetricsQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "MetricsQuery",
        "description": "A metrics variant of the query",
        "type": "object",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/Gauge.Aggregation"
          },
          "editorMode": {
            "$ref": "#/components/schemas/MetricsQueryEditorMode"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricsFilter"
            }
          },
          "promqlQuery": {
            "$ref": "#/components/schemas/PromQlQuery"
          },
          "promqlQueryType": {
            "$ref": "#/components/schemas/PromQLQueryType"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "Gauge.Query": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "metrics": {
                "$ref": "#/components/schemas/Gauge.MetricsQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "logs": {
                "$ref": "#/components/schemas/Gauge.LogsQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "spans": {
                "$ref": "#/components/schemas/Gauge.SpansQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "dataprime": {
                "$ref": "#/components/schemas/Gauge.DataprimeQuery"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Gauge.SpansQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "SpansQuery",
        "description": "A spans variant of the query",
        "type": "object",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/Gauge.Aggregation"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpansFilter"
            }
          },
          "groupBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpanField"
            }
          },
          "groupBys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpanObservationField"
            }
          },
          "luceneQuery": {
            "$ref": "#/components/schemas/LuceneQuery"
          },
          "spansAggregation": {
            "$ref": "#/components/schemas/SpansAggregation"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "Gauge.Threshold": {
        "externalDocs": {
          "url": ""
        },
        "title": "Threshold",
        "description": "Definition of a single gauge threshold",
        "type": "object",
        "properties": {
          "color": {
            "description": "Color of the threshold",
            "type": "string"
          },
          "from": {
            "description": "Minimum bound value of the threshold",
            "type": "number",
            "format": "double"
          },
          "label": {
            "description": "Optional label of the threshold",
            "type": "string"
          }
        }
      },
      "Gauge.ThresholdBy": {
        "type": "string",
        "enum": [
          "THRESHOLD_BY_UNSPECIFIED",
          "THRESHOLD_BY_VALUE",
          "THRESHOLD_BY_BACKGROUND"
        ]
      },
      "Gauge.Unit": {
        "type": "string",
        "enum": [
          "UNIT_UNSPECIFIED",
          "UNIT_NUMBER",
          "UNIT_PERCENT",
          "UNIT_MICROSECONDS",
          "UNIT_MILLISECONDS",
          "UNIT_SECONDS",
          "UNIT_BYTES",
          "UNIT_KBYTES",
          "UNIT_MBYTES",
          "UNIT_GBYTES",
          "UNIT_BYTES_IEC",
          "UNIT_KIBYTES",
          "UNIT_MIBYTES",
          "UNIT_GIBYTES",
          "UNIT_EUR_CENTS",
          "UNIT_EUR",
          "UNIT_USD_CENTS",
          "UNIT_USD",
          "UNIT_CUSTOM",
          "UNIT_PERCENT_ZERO_ONE",
          "UNIT_PERCENT_ZERO_HUNDRED",
          "UNIT_NANOSECONDS"
        ]
      },
      "GetDashboardBySlugResponse": {
        "externalDocs": {
          "description": "Find out more about Dashboards in our documentation.",
          "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
        },
        "title": "Get dashboard by URL slug response data structure",
        "description": "This is a response containing the requested dashboard",
        "type": "object",
        "properties": {
          "authorId": {
            "type": "string"
          },
          "authorName": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdOriginType": {
            "$ref": "#/components/schemas/TokenOriginType"
          },
          "dashboard": {
            "$ref": "#/components/schemas/Dashboard"
          },
          "isLocked": {
            "type": "boolean"
          },
          "lockerAuthorId": {
            "type": "string"
          },
          "lockerName": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedOriginType": {
            "$ref": "#/components/schemas/TokenOriginType"
          },
          "updaterAuthorId": {
            "type": "string"
          },
          "updaterName": {
            "type": "string"
          }
        }
      },
      "GetDashboardCatalogResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "Get dashboard catalog response data structure.",
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardCatalogItem"
            }
          }
        }
      },
      "GetDashboardResponse": {
        "externalDocs": {
          "description": "Find out more about Dashboards in our documentation.",
          "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
        },
        "title": "Get dashboard response data structure",
        "description": "This is a response containing the requested dashboard",
        "type": "object",
        "properties": {
          "authorId": {
            "type": "string"
          },
          "authorName": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdOriginType": {
            "$ref": "#/components/schemas/TokenOriginType"
          },
          "dashboard": {
            "$ref": "#/components/schemas/Dashboard"
          },
          "isLocked": {
            "type": "boolean"
          },
          "lockerAuthorId": {
            "type": "string"
          },
          "lockerName": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedOriginType": {
            "$ref": "#/components/schemas/TokenOriginType"
          },
          "updaterAuthorId": {
            "type": "string"
          },
          "updaterName": {
            "type": "string"
          }
        }
      },
      "GoToDashboardTemplateAction": {
        "type": "object",
        "properties": {
          "dashboardId": {
            "description": "Reference to specific dashboard",
            "type": "string"
          }
        }
      },
      "Hexagon": {
        "type": "object",
        "properties": {
          "customUnit": {
            "example": {
              "value": "rpm"
            },
            "description": "Custom unit (requires to have unit field set as UNIT_CUSTOM to take effect)",
            "type": "string"
          },
          "dataModeType": {
            "$ref": "#/components/schemas/widgets.common.DataModeType"
          },
          "decimal": {
            "example": 2,
            "description": "Number indicating the decimal precision of the numeric values, within range 0-15",
            "type": "integer",
            "format": "int32"
          },
          "decimalPrecision": {
            "example": false,
            "description": "Whether to render numeric value without abbreviation",
            "type": "boolean"
          },
          "legend": {
            "$ref": "#/components/schemas/Legend"
          },
          "legendBy": {
            "$ref": "#/components/schemas/LegendBy"
          },
          "max": {
            "example": 150000,
            "description": "A maximum value used in percentage threshold calculation and for visual value representation",
            "type": "number",
            "format": "double"
          },
          "min": {
            "example": 0,
            "description": "A minimum value used in percentage threshold calculation and for visual value representation",
            "type": "number",
            "format": "double"
          },
          "query": {
            "$ref": "#/components/schemas/Hexagon.Query"
          },
          "thresholdType": {
            "$ref": "#/components/schemas/ThresholdType"
          },
          "thresholds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/common.Threshold"
            }
          },
          "unit": {
            "$ref": "#/components/schemas/common.Unit"
          }
        }
      },
      "Hexagon.DataprimeQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "DataprimeQuery",
        "description": "A Dataprime variant of the query",
        "type": "object",
        "properties": {
          "dataprimeQuery": {
            "$ref": "#/components/schemas/common.DataprimeQuery"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter.Source"
            }
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "Hexagon.LogsQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "LogsQuery",
        "description": "A logs variant of the query",
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter.LogsFilter"
            }
          },
          "groupBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "logsAggregation": {
            "$ref": "#/components/schemas/LogsAggregation"
          },
          "luceneQuery": {
            "$ref": "#/components/schemas/LuceneQuery"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "Hexagon.MetricsQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "MetricsQuery",
        "description": "A metrics variant of the query",
        "type": "object",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/common.Aggregation"
          },
          "editorMode": {
            "$ref": "#/components/schemas/MetricsQueryEditorMode"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricsFilter"
            }
          },
          "promqlQuery": {
            "$ref": "#/components/schemas/PromQlQuery"
          },
          "promqlQueryType": {
            "$ref": "#/components/schemas/PromQLQueryType"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "Hexagon.Query": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "metrics": {
                "$ref": "#/components/schemas/Hexagon.MetricsQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "logs": {
                "$ref": "#/components/schemas/Hexagon.LogsQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "spans": {
                "$ref": "#/components/schemas/Hexagon.SpansQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "dataprime": {
                "$ref": "#/components/schemas/Hexagon.DataprimeQuery"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Hexagon.SpansQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "SpansQuery",
        "description": "A spans variant of the query",
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpansFilter"
            }
          },
          "groupBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpanField"
            }
          },
          "groupBys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpanObservationField"
            }
          },
          "luceneQuery": {
            "$ref": "#/components/schemas/LuceneQuery"
          },
          "spansAggregation": {
            "$ref": "#/components/schemas/SpansAggregation"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "HexagonBins": {
        "type": "object",
        "properties": {
          "allowAbbreviation": {
            "example": false,
            "description": "Whether to render numeric value without abbreviation",
            "type": "boolean"
          },
          "categoryFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "customUnit": {
            "example": {
              "value": "rpm"
            },
            "description": "Custom unit (requires to have unit field set as UNIT_CUSTOM to take effect)",
            "type": "string"
          },
          "decimalPrecision": {
            "example": 2,
            "description": "Number indicating the decimal precision of the numeric values, within range 0-15",
            "type": "integer",
            "format": "int32"
          },
          "legend": {
            "$ref": "#/components/schemas/Legend"
          },
          "legendBy": {
            "$ref": "#/components/schemas/LegendBy"
          },
          "max": {
            "example": 150000,
            "description": "A maximum gauge value used in percentage threshold calculation and for visual value representation",
            "type": "number",
            "format": "double"
          },
          "min": {
            "example": 0,
            "description": "A minimum gauge value used in percentage threshold calculation and for visual value representation",
            "type": "number",
            "format": "double"
          },
          "thresholdType": {
            "$ref": "#/components/schemas/ThresholdType"
          },
          "thresholds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/common.Threshold"
            }
          },
          "unit": {
            "$ref": "#/components/schemas/common.Unit"
          },
          "valueField": {
            "$ref": "#/components/schemas/ObservationField"
          }
        }
      },
      "HorizontalBarChart": {
        "type": "object",
        "properties": {
          "colorScheme": {
            "example": {
              "value": "classic"
            },
            "description": "Applied color scheme, one of the predefined values",
            "type": "string"
          },
          "colorsBy": {
            "$ref": "#/components/schemas/ColorsBy"
          },
          "customUnit": {
            "example": {
              "value": "mph"
            },
            "description": "Custom unit (requires to have unit field set to custom to take effect)",
            "type": "string"
          },
          "dataModeType": {
            "$ref": "#/components/schemas/widgets.common.DataModeType"
          },
          "decimal": {
            "example": 4,
            "description": "Number indicating the decimal precision of the numeric values, within range 0-15",
            "type": "integer",
            "format": "int32"
          },
          "decimalPrecision": {
            "example": false,
            "description": "Whether to render numeric value without abbreviation",
            "type": "boolean"
          },
          "displayOnBar": {
            "description": "Specifies where to display the bar value",
            "type": "boolean"
          },
          "groupNameTemplate": {
            "example": {
              "value": "Result - {{ variable }}"
            },
            "description": "Custom template name for a bar group, can contain variables",
            "type": "string"
          },
          "hashColors": {
            "example": false,
            "description": "Whether to ignore color scheme and derive colors from algorithm",
            "type": "boolean"
          },
          "legend": {
            "$ref": "#/components/schemas/Legend"
          },
          "maxBarsPerChart": {
            "example": 20,
            "description": "Maximum number of bars on a chart",
            "type": "integer",
            "format": "int32"
          },
          "query": {
            "$ref": "#/components/schemas/HorizontalBarChart.Query"
          },
          "scaleType": {
            "$ref": "#/components/schemas/ScaleType"
          },
          "sortBy": {
            "$ref": "#/components/schemas/SortByType"
          },
          "stackDefinition": {
            "$ref": "#/components/schemas/HorizontalBarChart.StackDefinition"
          },
          "unit": {
            "$ref": "#/components/schemas/common.Unit"
          },
          "yAxisMax": {
            "example": 1000,
            "description": "Number indicating the upper band for y axis",
            "type": "number",
            "format": "float"
          },
          "yAxisMin": {
            "example": -1000,
            "description": "Number indicating the lower band for y axis",
            "type": "number",
            "format": "float"
          },
          "yAxisViewBy": {
            "$ref": "#/components/schemas/HorizontalBarChart.YAxisViewBy"
          }
        }
      },
      "HorizontalBarChart.DataprimeQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "DataprimeQuery",
        "description": "A Dataprime variant of the query",
        "type": "object",
        "properties": {
          "dataprimeQuery": {
            "$ref": "#/components/schemas/common.DataprimeQuery"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter.Source"
            }
          },
          "groupNames": {
            "type": "array",
            "items": {
              "description": "List of field names by which results are grouped",
              "type": "string"
            }
          },
          "stackedGroupName": {
            "description": "Field name by which results in groups are divided into subgroups",
            "type": "string"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "HorizontalBarChart.LogsQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "LogsQuery",
        "description": "A logs variant of the query",
        "type": "object",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/LogsAggregation"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter.LogsFilter"
            }
          },
          "groupNames": {
            "type": "array",
            "items": {
              "description": "List of field names to group the query results",
              "type": "string"
            }
          },
          "groupNamesFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "luceneQuery": {
            "$ref": "#/components/schemas/LuceneQuery"
          },
          "stackedGroupName": {
            "description": "Field name by which results are stacked in individual group",
            "type": "string"
          },
          "stackedGroupNameField": {
            "$ref": "#/components/schemas/ObservationField"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "HorizontalBarChart.MetricsQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "MetricsQuery",
        "description": "A metrics variant of the query",
        "type": "object",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/common.Aggregation"
          },
          "editorMode": {
            "$ref": "#/components/schemas/MetricsQueryEditorMode"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricsFilter"
            }
          },
          "groupNames": {
            "type": "array",
            "items": {
              "description": "List of field names by which metric results are grouped",
              "type": "string"
            }
          },
          "promqlQuery": {
            "$ref": "#/components/schemas/PromQlQuery"
          },
          "promqlQueryType": {
            "$ref": "#/components/schemas/PromQLQueryType"
          },
          "stackedGroupName": {
            "description": "Field name by which results in groups are divided into subgroups",
            "type": "string"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "HorizontalBarChart.Query": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "logs": {
                "$ref": "#/components/schemas/HorizontalBarChart.LogsQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "spans": {
                "$ref": "#/components/schemas/HorizontalBarChart.SpansQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "metrics": {
                "$ref": "#/components/schemas/HorizontalBarChart.MetricsQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "dataprime": {
                "$ref": "#/components/schemas/HorizontalBarChart.DataprimeQuery"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "HorizontalBarChart.SpansQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "SpansQuery",
        "description": "A spans variant of the query",
        "type": "object",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/SpansAggregation"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpansFilter"
            }
          },
          "groupNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpanField"
            }
          },
          "groupNamesFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpanObservationField"
            }
          },
          "luceneQuery": {
            "$ref": "#/components/schemas/LuceneQuery"
          },
          "stackedGroupName": {
            "$ref": "#/components/schemas/SpanField"
          },
          "stackedGroupNameField": {
            "$ref": "#/components/schemas/SpanObservationField"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "HorizontalBarChart.StackDefinition": {
        "type": "object",
        "properties": {
          "maxSlicesPerBar": {
            "description": "How many slices can fit in a single bar",
            "type": "integer",
            "format": "int32"
          },
          "stackNameTemplate": {
            "description": "Custom template name of an individual stack",
            "type": "string"
          }
        }
      },
      "HorizontalBarChart.YAxisViewBy": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "category": {
                "$ref": "#/components/schemas/YAxisViewByCategory"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "$ref": "#/components/schemas/YAxisViewByValue"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "HorizontalBars": {
        "type": "object",
        "properties": {
          "allowAbbreviation": {
            "example": false,
            "description": "Whether to render numeric value without abbreviation",
            "type": "boolean"
          },
          "categoryFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "colorScheme": {
            "example": {
              "value": "classic"
            },
            "description": "Applied color scheme, one of the predefined values",
            "type": "string"
          },
          "colorsBy": {
            "$ref": "#/components/schemas/ColorsBy"
          },
          "customUnit": {
            "example": {
              "value": "mph"
            },
            "description": "Custom unit (requires to have unit field set to custom to take effect)",
            "type": "string"
          },
          "decimalPrecision": {
            "example": 4,
            "description": "Number indicating the decimal precision of the numeric values, within range 0-15",
            "type": "integer",
            "format": "int32"
          },
          "displayOnBar": {
            "description": "Specifies where to display the bar value",
            "type": "boolean"
          },
          "groupNameTemplate": {
            "example": {
              "value": "Slice - {{ variable }}"
            },
            "description": "Custom template name for a group, can contain variables",
            "type": "string"
          },
          "hashColors": {
            "example": false,
            "description": "Whether to ignore color scheme and derive colors from algorithm",
            "type": "boolean"
          },
          "legend": {
            "$ref": "#/components/schemas/Legend"
          },
          "maxBarsPerChart": {
            "example": 20,
            "description": "Maximum number of bars on a chart",
            "type": "integer",
            "format": "int32"
          },
          "maxSlicesPerBar": {
            "description": "How many slices can fit in a single bar",
            "type": "integer",
            "format": "int32"
          },
          "scaleType": {
            "$ref": "#/components/schemas/ScaleType"
          },
          "sortBy": {
            "$ref": "#/components/schemas/SortByType"
          },
          "stackNameTemplate": {
            "description": "Custom template name of an individual stack",
            "type": "string"
          },
          "subCategoryFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "unit": {
            "$ref": "#/components/schemas/common.Unit"
          },
          "valueField": {
            "$ref": "#/components/schemas/ObservationField"
          },
          "yAxisMax": {
            "example": 1000,
            "description": "Number indicating the upper band for y axis",
            "type": "number",
            "format": "float"
          },
          "yAxisMin": {
            "example": -1000,
            "description": "Number indicating the lower band for y axis",
            "type": "number",
            "format": "float"
          },
          "yAxisViewBy": {
            "$ref": "#/components/schemas/HorizontalBars.YAxisViewBy"
          }
        }
      },
      "HorizontalBars.YAxisViewBy": {
        "type": "string",
        "enum": [
          "Y_AXIS_VIEW_BY_UNSPECIFIED",
          "Y_AXIS_VIEW_BY_CATEGORY",
          "Y_AXIS_VIEW_BY_VALUE"
        ]
      },
      "InternalSectionOptions": {
        "type": "object"
      },
      "Interpretation": {
        "type": "string",
        "enum": [
          "INTERPRETATION_UNSPECIFIED",
          "INTERPRETATION_RAW_DATA_TABLE",
          "INTERPRETATION_TREND_OVER_TIME_LINE",
          "INTERPRETATION_SINGLE_VALUE_KPI",
          "INTERPRETATION_MULTI_VALUE_KPI",
          "INTERPRETATION_CATEGORICAL_ANALYSIS_VERTICAL_BARS",
          "INTERPRETATION_SINGLE_VALUE_KPI_STAT",
          "INTERPRETATION_SINGLE_VALUE_KPI_GAUGE",
          "INTERPRETATION_MULTI_VALUE_KPI_STAT",
          "INTERPRETATION_MULTI_VALUE_KPI_GAUGE",
          "INTERPRETATION_MULTI_VALUE_KPI_HEXAGON_BINS",
          "INTERPRETATION_CATEGORICAL_ANALYSIS_PIE_CHART",
          "INTERPRETATION_CATEGORICAL_ANALYSIS_HORIZONTAL_BARS"
        ]
      },
      "IntervalValue": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/StringValueLabel"
          }
        }
      },
      "Layout": {
        "type": "object",
        "properties": {
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Section"
            }
          }
        }
      },
      "Legend": {
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegendColumn"
            }
          },
          "groupByQuery": {
            "description": "In case of multiple queries, whether legend items should be grouped by their respective queries",
            "type": "boolean"
          },
          "isVisible": {
            "description": "Is the legend visible in the widget",
            "type": "boolean"
          },
          "placement": {
            "$ref": "#/components/schemas/LegendPlacement"
          }
        }
      },
      "LegendBy": {
        "type": "string",
        "enum": [
          "LEGEND_BY_UNSPECIFIED",
          "LEGEND_BY_THRESHOLDS",
          "LEGEND_BY_GROUPS"
        ]
      },
      "LegendColumn": {
        "type": "string",
        "enum": [
          "LEGEND_COLUMN_UNSPECIFIED",
          "LEGEND_COLUMN_MIN",
          "LEGEND_COLUMN_MAX",
          "LEGEND_COLUMN_SUM",
          "LEGEND_COLUMN_AVG",
          "LEGEND_COLUMN_LAST",
          "LEGEND_COLUMN_NAME",
          "LEGEND_COLUMN_SIMPLE_VALUE"
        ]
      },
      "LegendPlacement": {
        "type": "string",
        "enum": [
          "LEGEND_PLACEMENT_UNSPECIFIED",
          "LEGEND_PLACEMENT_AUTO",
          "LEGEND_PLACEMENT_BOTTOM",
          "LEGEND_PLACEMENT_SIDE",
          "LEGEND_PLACEMENT_HIDDEN"
        ]
      },
      "LineChart": {
        "externalDocs": {
          "url": ""
        },
        "title": "LineChart",
        "description": "LineChart represents the configuration of a line chart widget.",
        "type": "object",
        "properties": {
          "connectNulls": {
            "example": false,
            "description": "Whether the line should remain connected instead of producing scattered points when null values are present in between",
            "type": "boolean"
          },
          "legend": {
            "$ref": "#/components/schemas/Legend"
          },
          "queryDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryDefinition"
            }
          },
          "stackedLine": {
            "$ref": "#/components/schemas/LineChart.StackedLine"
          },
          "tooltip": {
            "$ref": "#/components/schemas/Tooltip"
          }
        },
        "required": [
          "queryDefinitions"
        ]
      },
      "LineChart.DataprimeQuery": {
        "type": "object",
        "properties": {
          "dataprimeQuery": {
            "$ref": "#/components/schemas/common.DataprimeQuery"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter.Source"
            }
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "LineChart.LogsQuery": {
        "type": "object",
        "properties": {
          "aggregations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogsAggregation"
            }
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter.LogsFilter"
            }
          },
          "groupBy": {
            "type": "array",
            "items": {
              "description": "List of field names to group the query results",
              "type": "string"
            }
          },
          "groupBys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "luceneQuery": {
            "$ref": "#/components/schemas/LuceneQuery"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "LineChart.MetricsQuery": {
        "type": "object",
        "properties": {
          "editorMode": {
            "$ref": "#/components/schemas/MetricsQueryEditorMode"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricsFilter"
            }
          },
          "promqlQuery": {
            "$ref": "#/components/schemas/PromQlQuery"
          },
          "seriesLimitType": {
            "$ref": "#/components/schemas/MetricsSeriesLimitType"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "LineChart.Query": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "logs": {
                "$ref": "#/components/schemas/LineChart.LogsQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "metrics": {
                "$ref": "#/components/schemas/LineChart.MetricsQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "spans": {
                "$ref": "#/components/schemas/LineChart.SpansQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "dataprime": {
                "$ref": "#/components/schemas/LineChart.DataprimeQuery"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "LineChart.Resolution": {
        "type": "object",
        "properties": {
          "bucketsPresented": {
            "description": "How many buckets to present in the selected timeframe",
            "type": "integer",
            "format": "int32"
          },
          "interval": {
            "description": "Interval of value sampling, i.e. every 5 minutes, every 1 second and so on",
            "type": "string"
          }
        }
      },
      "LineChart.SpansQuery": {
        "type": "object",
        "properties": {
          "aggregations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpansAggregation"
            }
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpansFilter"
            }
          },
          "groupBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpanField"
            }
          },
          "groupBys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpanObservationField"
            }
          },
          "luceneQuery": {
            "$ref": "#/components/schemas/LuceneQuery"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "LineChart.StackedLine": {
        "type": "string",
        "enum": [
          "STACKED_LINE_UNSPECIFIED",
          "STACKED_LINE_ABSOLUTE",
          "STACKED_LINE_RELATIVE"
        ]
      },
      "ListValue": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SingleStringValue"
            }
          }
        }
      },
      "Logs": {
        "externalDocs": {
          "url": ""
        },
        "title": "LogsQuery",
        "description": "A logs variant of the query",
        "type": "object",
        "properties": {
          "aggregation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogsAggregation"
            }
          },
          "dataModeType": {
            "$ref": "#/components/schemas/widgets.common.DataModeType"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter.LogsFilter"
            }
          },
          "groupBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "luceneQuery": {
            "$ref": "#/components/schemas/LuceneQuery"
          }
        }
      },
      "LogsAggregation": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "count": {
                "$ref": "#/components/schemas/Count"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "countDistinct": {
                "$ref": "#/components/schemas/CountDistinct"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "sum": {
                "$ref": "#/components/schemas/Sum"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "average": {
                "$ref": "#/components/schemas/Average"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "min": {
                "$ref": "#/components/schemas/Min"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "max": {
                "$ref": "#/components/schemas/Max"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "percentile": {
                "$ref": "#/components/schemas/Percentile"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "LogsPathSource": {
        "type": "object",
        "properties": {
          "observationField": {
            "$ref": "#/components/schemas/ObservationField"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "LogsQuery.Aggregation": {
        "type": "object",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/LogsAggregation"
          },
          "id": {
            "example": {
              "value": "52d192ac-a28f-4c51-97f5-5ba004249ba1"
            },
            "description": "Aggregation unique identifier",
            "type": "string"
          },
          "isVisible": {
            "description": "Whether the aggregation is visible in the table",
            "type": "boolean"
          },
          "name": {
            "description": "Aggregation name",
            "type": "string"
          }
        }
      },
      "LogsQuery.Grouping": {
        "type": "object",
        "properties": {
          "aggregations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogsQuery.Aggregation"
            }
          },
          "groupBy": {
            "type": "array",
            "items": {
              "description": "List of field names to group the query results",
              "type": "string"
            }
          },
          "groupBys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          }
        }
      },
      "LogsSource": {
        "type": "object",
        "properties": {
          "dataModeType": {
            "$ref": "#/components/schemas/v1.common.DataModeType"
          },
          "labelFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "luceneQuery": {
            "$ref": "#/components/schemas/LuceneQuery"
          },
          "messageTemplate": {
            "type": "string"
          },
          "strategy": {
            "$ref": "#/components/schemas/LogsSource.Strategy"
          }
        }
      },
      "LogsSource.Strategy": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "instant": {
                "$ref": "#/components/schemas/LogsSource.Strategy.Instant"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "range": {
                "$ref": "#/components/schemas/LogsSource.Strategy.Range"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "duration": {
                "$ref": "#/components/schemas/LogsSource.Strategy.Duration"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "LogsSource.Strategy.Duration": {
        "type": "object",
        "properties": {
          "durationField": {
            "$ref": "#/components/schemas/ObservationField"
          },
          "startTimestampField": {
            "$ref": "#/components/schemas/ObservationField"
          }
        }
      },
      "LogsSource.Strategy.Instant": {
        "type": "object",
        "properties": {
          "timestampField": {
            "$ref": "#/components/schemas/ObservationField"
          }
        }
      },
      "LogsSource.Strategy.Range": {
        "type": "object",
        "properties": {
          "endTimestampField": {
            "$ref": "#/components/schemas/ObservationField"
          },
          "startTimestampField": {
            "$ref": "#/components/schemas/ObservationField"
          }
        }
      },
      "LuceneQuery": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        }
      },
      "LuceneQueryValue": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/StringValueLabel"
          }
        }
      },
      "ManualSource": {
        "type": "object",
        "properties": {
          "messageTemplate": {
            "type": "string"
          },
          "orientation": {
            "$ref": "#/components/schemas/AnnotationOrientation"
          },
          "strategy": {
            "$ref": "#/components/schemas/ManualSource.Strategy"
          }
        }
      },
      "ManualSource.Strategy": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "instant": {
                "$ref": "#/components/schemas/ManualSource.Strategy.Instant"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "range": {
                "$ref": "#/components/schemas/ManualSource.Strategy.Range"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ManualSource.Strategy.Instant": {
        "type": "object",
        "properties": {
          "customUnit": {
            "type": "string"
          },
          "unit": {
            "$ref": "#/components/schemas/common.Unit"
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ManualSource.Strategy.Range": {
        "type": "object",
        "properties": {
          "customUnit": {
            "type": "string"
          },
          "endValue": {
            "type": "number",
            "format": "double"
          },
          "startValue": {
            "type": "number",
            "format": "double"
          },
          "unit": {
            "$ref": "#/components/schemas/common.Unit"
          }
        }
      },
      "Markdown": {
        "type": "object",
        "properties": {
          "markdownText": {
            "example": {
              "value": "# This is a markdown example"
            },
            "description": "Markdown text",
            "type": "string"
          },
          "tooltipText": {
            "example": {
              "value": "This is a description in a tooltip"
            },
            "description": "Tooltip text to display on widget hover",
            "type": "string"
          }
        }
      },
      "Max": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "observationField": {
            "$ref": "#/components/schemas/ObservationField"
          }
        }
      },
      "MetadataField": {
        "type": "string",
        "enum": [
          "METADATA_FIELD_UNSPECIFIED",
          "METADATA_FIELD_APPLICATION_NAME",
          "METADATA_FIELD_SUBSYSTEM_NAME",
          "METADATA_FIELD_SERVICE_NAME",
          "METADATA_FIELD_OPERATION_NAME"
        ]
      },
      "MetricAggregation": {
        "type": "object",
        "properties": {
          "aggregationType": {
            "$ref": "#/components/schemas/MetricAggregationType"
          },
          "metricField": {
            "$ref": "#/components/schemas/MetricAggregation.MetricField"
          }
        }
      },
      "MetricAggregation.MetricField": {
        "type": "string",
        "enum": [
          "METRIC_FIELD_UNSPECIFIED",
          "METRIC_FIELD_DURATION"
        ]
      },
      "MetricAggregationType": {
        "type": "string",
        "enum": [
          "METRIC_AGGREGATION_TYPE_UNSPECIFIED",
          "METRIC_AGGREGATION_TYPE_MIN",
          "METRIC_AGGREGATION_TYPE_MAX",
          "METRIC_AGGREGATION_TYPE_AVERAGE",
          "METRIC_AGGREGATION_TYPE_SUM",
          "METRIC_AGGREGATION_TYPE_PERCENTILE_99",
          "METRIC_AGGREGATION_TYPE_PERCENTILE_95",
          "METRIC_AGGREGATION_TYPE_PERCENTILE_50"
        ]
      },
      "MetricLabelSource": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "metricName": {
            "type": "string"
          }
        }
      },
      "Metrics": {
        "externalDocs": {
          "url": ""
        },
        "title": "MetricsQuery",
        "description": "A metrics variant of the query",
        "type": "object",
        "properties": {
          "editorMode": {
            "$ref": "#/components/schemas/MetricsQueryEditorMode"
          },
          "promqlQuery": {
            "$ref": "#/components/schemas/PromQlQuery"
          },
          "promqlQueryType": {
            "$ref": "#/components/schemas/PromQLQueryType"
          },
          "seriesLimitType": {
            "$ref": "#/components/schemas/MetricsSeriesLimitType"
          }
        }
      },
      "MetricsFilter": {
        "externalDocs": {
          "url": ""
        },
        "title": "MetricsFilter",
        "description": "This data structure represents the filter criteria for metrics.",
        "type": "object",
        "properties": {
          "label": {
            "description": "The label associated with the metric.",
            "type": "string"
          },
          "metric": {
            "description": "The name of the metric to which the filter is applied.",
            "type": "string"
          },
          "operator": {
            "$ref": "#/components/schemas/Filter.Operator"
          }
        }
      },
      "MetricsQueryEditorMode": {
        "type": "string",
        "enum": [
          "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
          "METRICS_QUERY_EDITOR_MODE_TEXT",
          "METRICS_QUERY_EDITOR_MODE_BUILDER"
        ]
      },
      "MetricsSeriesLimitType": {
        "type": "string",
        "enum": [
          "METRICS_SERIES_LIMIT_TYPE_UNSPECIFIED",
          "METRICS_SERIES_LIMIT_TYPE_BY_SERIES_COUNT",
          "METRICS_SERIES_LIMIT_TYPE_BY_POINT_COUNT"
        ]
      },
      "MetricsSource": {
        "type": "object",
        "properties": {
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "messageTemplate": {
            "type": "string"
          },
          "orientation": {
            "$ref": "#/components/schemas/AnnotationOrientation"
          },
          "promqlQuery": {
            "$ref": "#/components/schemas/PromQlQuery"
          },
          "strategy": {
            "$ref": "#/components/schemas/MetricsSource.Strategy"
          }
        }
      },
      "MetricsSource.Strategy": {
        "type": "object",
        "properties": {
          "startTimeMetric": {
            "$ref": "#/components/schemas/StartTimeMetric"
          }
        },
        "additionalProperties": false
      },
      "Min": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "observationField": {
            "$ref": "#/components/schemas/ObservationField"
          }
        }
      },
      "MultiSelect": {
        "type": "object",
        "properties": {
          "selected": {
            "type": "array",
            "items": {
              "deprecated": true,
              "type": "string"
            }
          },
          "selection": {
            "$ref": "#/components/schemas/MultiSelect.Selection"
          },
          "selectionOptions": {
            "$ref": "#/components/schemas/VariableSelectionOptions"
          },
          "source": {
            "$ref": "#/components/schemas/MultiSelect.Source"
          },
          "valuesOrderDirection": {
            "$ref": "#/components/schemas/OrderDirection"
          }
        }
      },
      "MultiSelect.Query": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "logsQuery": {
                "$ref": "#/components/schemas/Query.LogsQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "metricsQuery": {
                "$ref": "#/components/schemas/Query.MetricsQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "spansQuery": {
                "$ref": "#/components/schemas/Query.SpansQuery"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MultiSelect.QuerySource": {
        "type": "object",
        "properties": {
          "query": {
            "$ref": "#/components/schemas/MultiSelect.Query"
          },
          "refreshStrategy": {
            "$ref": "#/components/schemas/MultiSelect.RefreshStrategy"
          },
          "valueDisplayOptions": {
            "$ref": "#/components/schemas/MultiSelect.ValueDisplayOptions"
          }
        }
      },
      "MultiSelect.RefreshStrategy": {
        "type": "string",
        "enum": [
          "REFRESH_STRATEGY_UNSPECIFIED",
          "REFRESH_STRATEGY_ON_DASHBOARD_LOAD",
          "REFRESH_STRATEGY_ON_TIME_FRAME_CHANGE"
        ]
      },
      "MultiSelect.Selection": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "all": {
                "$ref": "#/components/schemas/MultiSelect.Selection.AllSelection"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "list": {
                "$ref": "#/components/schemas/MultiSelect.Selection.ListSelection"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MultiSelect.Selection.AllSelection": {
        "type": "object"
      },
      "MultiSelect.Selection.ListSelection": {
        "type": "object",
        "properties": {
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MultiSelect.Source": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "logsPath": {
                "$ref": "#/components/schemas/LogsPathSource"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "metricLabel": {
                "$ref": "#/components/schemas/MetricLabelSource"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "constantList": {
                "$ref": "#/components/schemas/ConstantListSource"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "spanField": {
                "$ref": "#/components/schemas/SpanFieldSource"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "query": {
                "$ref": "#/components/schemas/MultiSelect.QuerySource"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MultiSelect.ValueDisplayOptions": {
        "type": "object",
        "properties": {
          "labelRegex": {
            "type": "string"
          },
          "valueRegex": {
            "type": "string"
          }
        }
      },
      "MultiStringValue": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "all": {
                "$ref": "#/components/schemas/AllValue"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "list": {
                "$ref": "#/components/schemas/ListValue"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MultipleValues": {
        "type": "object",
        "properties": {
          "matcher": {
            "$ref": "#/components/schemas/events.v3.FilterMatcher"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "NotEquals.Selection": {
        "externalDocs": {
          "url": ""
        },
        "title": "Selection",
        "description": "This data structure defines the values for the non-equality comparison.",
        "type": "object",
        "properties": {
          "list": {
            "$ref": "#/components/schemas/NotEquals.Selection.ListSelection"
          }
        },
        "additionalProperties": false
      },
      "NotEquals.Selection.ListSelection": {
        "externalDocs": {
          "url": ""
        },
        "title": "ListSelection",
        "description": "This data structure represents a selection from a list of specific values.",
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "description": "A list of values for the selection.",
              "type": "string"
            }
          }
        }
      },
      "NumericValueLabel": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "ObservationField": {
        "type": "object",
        "properties": {
          "keypath": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scope": {
            "$ref": "#/components/schemas/DatasetScope"
          }
        }
      },
      "OrderDirection": {
        "type": "string",
        "enum": [
          "ORDER_DIRECTION_UNSPECIFIED",
          "ORDER_DIRECTION_ASC",
          "ORDER_DIRECTION_DESC"
        ]
      },
      "OrderingField": {
        "type": "object",
        "properties": {
          "field": {
            "example": {
              "value": "coralogix.metadata.applicationName"
            },
            "description": "Field name to order by",
            "type": "string"
          },
          "orderDirection": {
            "$ref": "#/components/schemas/OrderDirection"
          }
        }
      },
      "Percentile": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "observationField": {
            "$ref": "#/components/schemas/ObservationField"
          },
          "percent": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "PieChart.DataprimeQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "DataprimeQuery",
        "description": "A Dataprime variant of the query",
        "type": "object",
        "properties": {
          "dataprimeQuery": {
            "$ref": "#/components/schemas/common.DataprimeQuery"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter.Source"
            }
          },
          "groupNames": {
            "type": "array",
            "items": {
              "description": "List of field names by which results are grouped",
              "type": "string"
            }
          },
          "stackedGroupName": {
            "description": "Field name by which results in groups are divided into subgroups",
            "type": "string"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "PieChart.LogsQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "LogsQuery",
        "description": "A logs variant of the query",
        "type": "object",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/LogsAggregation"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter.LogsFilter"
            }
          },
          "groupNames": {
            "type": "array",
            "items": {
              "description": "List of field names to group the query results",
              "type": "string"
            }
          },
          "groupNamesFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "luceneQuery": {
            "$ref": "#/components/schemas/LuceneQuery"
          },
          "stackedGroupName": {
            "description": "Field name by which results are stacked in individual group",
            "type": "string"
          },
          "stackedGroupNameField": {
            "$ref": "#/components/schemas/ObservationField"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "PieChart.MetricsQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "MetricsQuery",
        "description": "A metrics variant of the query",
        "type": "object",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/common.Aggregation"
          },
          "editorMode": {
            "$ref": "#/components/schemas/MetricsQueryEditorMode"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricsFilter"
            }
          },
          "groupNames": {
            "type": "array",
            "items": {
              "description": "List of field names by which metric results are grouped",
              "type": "string"
            }
          },
          "promqlQuery": {
            "$ref": "#/components/schemas/PromQlQuery"
          },
          "promqlQueryType": {
            "$ref": "#/components/schemas/PromQLQueryType"
          },
          "stackedGroupName": {
            "description": "Field name by which results in groups are divided into subgroups",
            "type": "string"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "PieChart.Query": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "logs": {
                "$ref": "#/components/schemas/PieChart.LogsQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "spans": {
                "$ref": "#/components/schemas/PieChart.SpansQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "metrics": {
                "$ref": "#/components/schemas/PieChart.MetricsQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "dataprime": {
                "$ref": "#/components/schemas/PieChart.DataprimeQuery"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PieChart.SpansQuery": {
        "externalDocs": {
          "url": ""
        },
        "title": "SpansQuery",
        "description": "A spans variant of the query",
        "type": "object",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/SpansAggregation"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpansFilter"
            }
          },
          "groupNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpanField"
            }
          },
          "groupNamesFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpanObservationField"
            }
          },
          "luceneQuery": {
            "$ref": "#/components/schemas/LuceneQuery"
          },
          "stackedGroupName": {
            "$ref": "#/components/schemas/SpanField"
          },
          "stackedGroupNameField": {
            "$ref": "#/components/schemas/SpanObservationField"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          }
        }
      },
      "PieChart.StackDefinition": {
        "type": "object",
        "properties": {
          "maxSlicesPerStack": {
            "description": "How many slices can fit in a single slice stack",
            "type": "integer",
            "format": "int32"
          },
          "stackNameTemplate": {
            "example": {
              "value": "Slice {{ group }} - subslice {{ subgroup }}"
            },
            "description": "Custom template name of an individual slice in the stack",
            "type": "string"
          }
        }
      },
      "PinDashboardResponse": {
        "externalDocs": {
          "description": "Find out more about Dashboards in our documentation.",
          "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
        },
        "title": "Pin dashboard response data structure",
        "description": "This is a response received on successful pinning of the dashboard",
        "type": "object"
      },
      "PromQLQueryType": {
        "type": "string",
        "enum": [
          "PROM_QL_QUERY_TYPE_UNSPECIFIED",
          "PROM_QL_QUERY_TYPE_RANGE",
          "PROM_QL_QUERY_TYPE_INSTANT"
        ]
      },
      "PromQlQuery": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        }
      },
      "Query.LogsQuery": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/Query.LogsQuery.Type"
          }
        }
      },
      "Query.LogsQuery.Type": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "fieldName": {
                "$ref": "#/components/schemas/Query.LogsQuery.Type.FieldName"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "fieldValue": {
                "$ref": "#/components/schemas/Query.LogsQuery.Type.FieldValue"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Query.LogsQuery.Type.FieldName": {
        "type": "object",
        "properties": {
          "logRegex": {
            "type": "string"
          }
        }
      },
      "Query.LogsQuery.Type.FieldValue": {
        "type": "object",
        "properties": {
          "observationField": {
            "$ref": "#/components/schemas/ObservationField"
          }
        }
      },
      "Query.MetricsQuery": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/Query.MetricsQuery.Type"
          }
        }
      },
      "Query.MetricsQuery.Equals": {
        "type": "object",
        "properties": {
          "selection": {
            "$ref": "#/components/schemas/Query.MetricsQuery.Selection"
          }
        }
      },
      "Query.MetricsQuery.MetricsLabelFilter": {
        "type": "object",
        "properties": {
          "label": {
            "$ref": "#/components/schemas/Query.MetricsQuery.StringOrVariable"
          },
          "metric": {
            "$ref": "#/components/schemas/Query.MetricsQuery.StringOrVariable"
          },
          "operator": {
            "$ref": "#/components/schemas/Query.MetricsQuery.Operator"
          }
        }
      },
      "Query.MetricsQuery.NotEquals": {
        "type": "object",
        "properties": {
          "selection": {
            "$ref": "#/components/schemas/Query.MetricsQuery.Selection"
          }
        }
      },
      "Query.MetricsQuery.Operator": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "equals": {
                "$ref": "#/components/schemas/Query.MetricsQuery.Equals"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "notEquals": {
                "$ref": "#/components/schemas/Query.MetricsQuery.NotEquals"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Query.MetricsQuery.Selection": {
        "type": "object",
        "properties": {
          "list": {
            "$ref": "#/components/schemas/Query.MetricsQuery.Selection.ListSelection"
          }
        },
        "additionalProperties": false
      },
      "Query.MetricsQuery.Selection.ListSelection": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Query.MetricsQuery.StringOrVariable"
            }
          }
        }
      },
      "Query.MetricsQuery.StringOrVariable": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "stringValue": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "variableName": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Query.MetricsQuery.Type": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "metricName": {
                "$ref": "#/components/schemas/Query.MetricsQuery.Type.MetricName"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "labelName": {
                "$ref": "#/components/schemas/Query.MetricsQuery.Type.LabelName"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "labelValue": {
                "$ref": "#/components/schemas/Query.MetricsQuery.Type.LabelValue"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Query.MetricsQuery.Type.LabelName": {
        "type": "object",
        "properties": {
          "metricRegex": {
            "type": "string"
          }
        }
      },
      "Query.MetricsQuery.Type.LabelValue": {
        "type": "object",
        "properties": {
          "labelFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Query.MetricsQuery.MetricsLabelFilter"
            }
          },
          "labelName": {
            "$ref": "#/components/schemas/Query.MetricsQuery.StringOrVariable"
          },
          "metricName": {
            "$ref": "#/components/schemas/Query.MetricsQuery.StringOrVariable"
          }
        }
      },
      "Query.MetricsQuery.Type.MetricName": {
        "type": "object",
        "properties": {
          "metricRegex": {
            "type": "string"
          }
        }
      },
      "Query.SpansQuery": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/Query.SpansQuery.Type"
          }
        }
      },
      "Query.SpansQuery.Type": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "fieldName": {
                "$ref": "#/components/schemas/Query.SpansQuery.Type.FieldName"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "fieldValue": {
                "$ref": "#/components/schemas/Query.SpansQuery.Type.FieldValue"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Query.SpansQuery.Type.FieldName": {
        "type": "object",
        "properties": {
          "spanRegex": {
            "type": "string"
          }
        }
      },
      "Query.SpansQuery.Type.FieldValue": {
        "type": "object",
        "properties": {
          "observationField": {
            "$ref": "#/components/schemas/ObservationField"
          },
          "value": {
            "$ref": "#/components/schemas/SpanField"
          }
        }
      },
      "QueryDefinition": {
        "externalDocs": {
          "url": ""
        },
        "title": "LineChart",
        "description": "LineChart represents the configuration of a line chart widget.",
        "type": "object",
        "properties": {
          "colorScheme": {
            "example": {
              "value": "classic"
            },
            "description": "Applied color scheme for this query, one of the predefined values",
            "type": "string"
          },
          "customUnit": {
            "example": {
              "value": "rpm"
            },
            "description": "Custom unit (requires to have unit field as 'custom' to take effect)",
            "type": "string"
          },
          "dataModeType": {
            "$ref": "#/components/schemas/widgets.common.DataModeType"
          },
          "decimal": {
            "example": 4,
            "description": "Number indicating the decimal precision of the numeric values, within range 0-15",
            "type": "integer",
            "format": "int32"
          },
          "decimalPrecision": {
            "example": false,
            "description": "Whether to render numeric value without abbreviation",
            "type": "boolean"
          },
          "hashColors": {
            "example": false,
            "description": "Whether to ignore color scheme and derive colors from algorithm",
            "type": "boolean"
          },
          "id": {
            "example": {
              "value": "73c65643-91d5-dba2-35cd-baa49dc65331"
            },
            "description": "Unique id of the query definition",
            "type": "string"
          },
          "isVisible": {
            "example": true,
            "description": "Is the query visible",
            "type": "boolean"
          },
          "name": {
            "example": {
              "value": "Query A"
            },
            "description": "Custom name of the query",
            "type": "string"
          },
          "query": {
            "$ref": "#/components/schemas/LineChart.Query"
          },
          "resolution": {
            "$ref": "#/components/schemas/LineChart.Resolution"
          },
          "scaleType": {
            "$ref": "#/components/schemas/ScaleType"
          },
          "seriesCountLimit": {
            "example": {
              "value": 50
            },
            "description": "Max count of the series per query",
            "type": "string",
            "format": "int64"
          },
          "seriesNameTemplate": {
            "example": {
              "value": "Trace of {{ application }}"
            },
            "description": "Custom template for the series name",
            "type": "string"
          },
          "unit": {
            "$ref": "#/components/schemas/common.Unit"
          },
          "yAxisMax": {
            "example": 1000,
            "description": "Number indicating the upper band for y axis",
            "type": "number",
            "format": "float"
          },
          "yAxisMin": {
            "example": -1000,
            "description": "Number indicating the lower band for y axis",
            "type": "number",
            "format": "float"
          }
        },
        "required": [
          "id",
          "query"
        ]
      },
      "QuerySource.DataprimeQuery": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DataprimeQuery.Type"
          }
        }
      },
      "QuerySource.LogsQuery": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/QuerySource.LogsQuery.Type"
          }
        }
      },
      "QuerySource.LogsQuery.Type": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "fieldName": {
                "$ref": "#/components/schemas/QuerySource.LogsQuery.Type.FieldName"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "fieldValue": {
                "$ref": "#/components/schemas/QuerySource.LogsQuery.Type.FieldValue"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "QuerySource.LogsQuery.Type.FieldName": {
        "type": "object",
        "properties": {
          "logRegex": {
            "type": "string"
          }
        }
      },
      "QuerySource.LogsQuery.Type.FieldValue": {
        "type": "object",
        "properties": {
          "observationField": {
            "$ref": "#/components/schemas/ObservationField"
          }
        }
      },
      "QuerySource.MetricsQuery": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/QuerySource.MetricsQuery.Type"
          }
        }
      },
      "QuerySource.MetricsQuery.Equals": {
        "type": "object",
        "properties": {
          "selection": {
            "$ref": "#/components/schemas/QuerySource.MetricsQuery.Selection"
          }
        }
      },
      "QuerySource.MetricsQuery.MetricsLabelFilter": {
        "type": "object",
        "properties": {
          "label": {
            "$ref": "#/components/schemas/QuerySource.MetricsQuery.StringOrVariable"
          },
          "metric": {
            "$ref": "#/components/schemas/QuerySource.MetricsQuery.StringOrVariable"
          },
          "operator": {
            "$ref": "#/components/schemas/QuerySource.MetricsQuery.Operator"
          }
        }
      },
      "QuerySource.MetricsQuery.NotEquals": {
        "type": "object",
        "properties": {
          "selection": {
            "$ref": "#/components/schemas/QuerySource.MetricsQuery.Selection"
          }
        }
      },
      "QuerySource.MetricsQuery.Operator": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "equals": {
                "$ref": "#/components/schemas/QuerySource.MetricsQuery.Equals"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "notEquals": {
                "$ref": "#/components/schemas/QuerySource.MetricsQuery.NotEquals"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "QuerySource.MetricsQuery.Selection": {
        "type": "object",
        "properties": {
          "list": {
            "$ref": "#/components/schemas/QuerySource.MetricsQuery.Selection.ListSelection"
          }
        },
        "additionalProperties": false
      },
      "QuerySource.MetricsQuery.Selection.ListSelection": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuerySource.MetricsQuery.StringOrVariable"
            }
          }
        }
      },
      "QuerySource.MetricsQuery.StringOrVariable": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "stringValue": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "variableName": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "QuerySource.MetricsQuery.Type": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "metricName": {
                "$ref": "#/components/schemas/QuerySource.MetricsQuery.Type.MetricName"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "labelName": {
                "$ref": "#/components/schemas/QuerySource.MetricsQuery.Type.LabelName"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "labelValue": {
                "$ref": "#/components/schemas/QuerySource.MetricsQuery.Type.LabelValue"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "QuerySource.MetricsQuery.Type.LabelName": {
        "type": "object",
        "properties": {
          "metricRegex": {
            "type": "string"
          }
        }
      },
      "QuerySource.MetricsQuery.Type.LabelValue": {
        "type": "object",
        "properties": {
          "labelFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuerySource.MetricsQuery.MetricsLabelFilter"
            }
          },
          "labelName": {
            "$ref": "#/components/schemas/QuerySource.MetricsQuery.StringOrVariable"
          },
          "metricName": {
            "$ref": "#/components/schemas/QuerySource.MetricsQuery.StringOrVariable"
          }
        }
      },
      "QuerySource.MetricsQuery.Type.MetricName": {
        "type": "object",
        "properties": {
          "metricRegex": {
            "type": "string"
          }
        }
      },
      "QuerySource.SpansQuery": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/QuerySource.SpansQuery.Type"
          }
        }
      },
      "QuerySource.SpansQuery.Type": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "fieldName": {
                "$ref": "#/components/schemas/QuerySource.SpansQuery.Type.FieldName"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "fieldValue": {
                "$ref": "#/components/schemas/QuerySource.SpansQuery.Type.FieldValue"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "QuerySource.SpansQuery.Type.FieldName": {
        "type": "object",
        "properties": {
          "spanRegex": {
            "type": "string"
          }
        }
      },
      "QuerySource.SpansQuery.Type.FieldValue": {
        "type": "object",
        "properties": {
          "observationField": {
            "$ref": "#/components/schemas/ObservationField"
          },
          "value": {
            "$ref": "#/components/schemas/SpanField"
          }
        }
      },
      "QueryText": {
        "type": "object",
        "properties": {
          "dataModeType": {
            "$ref": "#/components/schemas/v1.common.DataModeType"
          },
          "query": {
            "$ref": "#/components/schemas/common.DataprimeQuery"
          }
        }
      },
      "RegexValue": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/StringValueLabel"
          }
        }
      },
      "RepetitiveVar": {
        "type": "object",
        "properties": {
          "name": {
            "example": "pod_name",
            "description": "Variable name that can be applied on section making it repetitive section",
            "type": "string"
          }
        }
      },
      "ReplaceDashboardResponse": {
        "externalDocs": {
          "description": "Find out more Dashboards in our documentation.",
          "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
        },
        "title": "Replace dashboard response data structure",
        "description": "This is a response received when the dashboard is successfully updated",
        "type": "object"
      },
      "ReplaceDefaultDashboardResponse": {
        "externalDocs": {
          "description": "Find out more about Dashboards in our documentation.",
          "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
        },
        "title": "Replace default dashboard response data structure",
        "description": "This is a response received when default dashboard has been replaced",
        "type": "object"
      },
      "Row": {
        "type": "object",
        "properties": {
          "appearance": {
            "$ref": "#/components/schemas/Row.Appearance"
          },
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "widgets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Widget"
            }
          }
        }
      },
      "Row.Appearance": {
        "type": "object",
        "properties": {
          "height": {
            "example": {
              "value": 16
            },
            "description": "Height of a row, defined as a multiplier number of the base height, where 1 = 1 * base height, 2 = 2 * base height etc",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RowStyle": {
        "type": "string",
        "enum": [
          "ROW_STYLE_UNSPECIFIED",
          "ROW_STYLE_ONE_LINE",
          "ROW_STYLE_TWO_LINE",
          "ROW_STYLE_CONDENSED",
          "ROW_STYLE_JSON",
          "ROW_STYLE_LIST"
        ]
      },
      "ScaleType": {
        "type": "string",
        "enum": [
          "SCALE_TYPE_UNSPECIFIED",
          "SCALE_TYPE_LINEAR",
          "SCALE_TYPE_LOGARITHMIC"
        ]
      },
      "Section": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "options": {
            "$ref": "#/components/schemas/SectionOptions"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Row"
            }
          }
        }
      },
      "SectionColor": {
        "type": "object",
        "properties": {
          "predefined": {
            "$ref": "#/components/schemas/SectionPredefinedColor"
          }
        },
        "additionalProperties": false
      },
      "SectionOptions": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "internal": {
                "$ref": "#/components/schemas/InternalSectionOptions"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "custom": {
                "$ref": "#/components/schemas/CustomSectionOptions"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SectionPredefinedColor": {
        "type": "string",
        "enum": [
          "SECTION_PREDEFINED_COLOR_UNSPECIFIED",
          "SECTION_PREDEFINED_COLOR_CYAN",
          "SECTION_PREDEFINED_COLOR_GREEN",
          "SECTION_PREDEFINED_COLOR_BLUE",
          "SECTION_PREDEFINED_COLOR_PURPLE",
          "SECTION_PREDEFINED_COLOR_MAGENTA",
          "SECTION_PREDEFINED_COLOR_PINK",
          "SECTION_PREDEFINED_COLOR_ORANGE"
        ]
      },
      "SelectionType": {
        "type": "string",
        "enum": [
          "SELECTION_TYPE_UNSPECIFIED",
          "SELECTION_TYPE_MULTI_ALL",
          "SELECTION_TYPE_MULTI",
          "SELECTION_TYPE_SINGLE"
        ]
      },
      "SingleStringValue": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/StringValueLabel"
          }
        }
      },
      "SortByType": {
        "type": "string",
        "enum": [
          "SORT_BY_TYPE_UNSPECIFIED",
          "SORT_BY_TYPE_VALUE",
          "SORT_BY_TYPE_NAME"
        ]
      },
      "SpanField": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "metadataField": {
                "$ref": "#/components/schemas/MetadataField"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "tagField": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "processTagField": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SpanFieldSource": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/SpanField"
          }
        }
      },
      "SpanObservationField": {
        "type": "object",
        "properties": {
          "keypath": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "relationType": {
            "$ref": "#/components/schemas/SpanRelationType"
          },
          "scope": {
            "$ref": "#/components/schemas/DatasetScope"
          }
        }
      },
      "SpanRelationType": {
        "type": "string",
        "enum": [
          "SPAN_RELATION_TYPE_NONE_UNSPECIFIED",
          "SPAN_RELATION_TYPE_OTHER",
          "SPAN_RELATION_TYPE_PARENT",
          "SPAN_RELATION_TYPE_ROOT"
        ]
      },
      "Spans": {
        "externalDocs": {
          "url": ""
        },
        "title": "SpansQuery",
        "description": "A spans variant of the query",
        "type": "object",
        "properties": {
          "aggregation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogsAggregation"
            }
          },
          "dataModeType": {
            "$ref": "#/components/schemas/widgets.common.DataModeType"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpansFilter"
            }
          },
          "groupBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpanObservationField"
            }
          },
          "luceneQuery": {
            "$ref": "#/components/schemas/LuceneQuery"
          }
        }
      },
      "SpansAggregation": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "metricAggregation": {
                "$ref": "#/components/schemas/MetricAggregation"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "dimensionAggregation": {
                "$ref": "#/components/schemas/DimensionAggregation"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SpansFilter": {
        "externalDocs": {
          "url": ""
        },
        "title": "SpansFilter",
        "description": "This data structure represents the filter criteria for spans.",
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/SpanField"
          },
          "observationField": {
            "$ref": "#/components/schemas/SpanObservationField"
          },
          "operator": {
            "$ref": "#/components/schemas/Filter.Operator"
          }
        }
      },
      "SpansQuery.Aggregation": {
        "type": "object",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/SpansAggregation"
          },
          "id": {
            "example": {
              "value": "52d192ac-a28f-4c51-97f5-5ba004249ba1"
            },
            "description": "Aggregation unique identifier",
            "type": "string"
          },
          "isVisible": {
            "description": "Whether the aggregation is visible in the table",
            "type": "boolean"
          },
          "name": {
            "description": "Aggregation name",
            "type": "string"
          }
        }
      },
      "SpansQuery.Grouping": {
        "type": "object",
        "properties": {
          "aggregations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpansQuery.Aggregation"
            }
          },
          "groupBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpanField"
            }
          },
          "groupBys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpanObservationField"
            }
          }
        }
      },
      "SpansSource": {
        "type": "object",
        "properties": {
          "dataModeType": {
            "$ref": "#/components/schemas/v1.common.DataModeType"
          },
          "labelFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "luceneQuery": {
            "$ref": "#/components/schemas/LuceneQuery"
          },
          "messageTemplate": {
            "type": "string"
          },
          "strategy": {
            "$ref": "#/components/schemas/SpansSource.Strategy"
          }
        }
      },
      "SpansSource.Strategy": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "instant": {
                "$ref": "#/components/schemas/SpansSource.Strategy.Instant"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "range": {
                "$ref": "#/components/schemas/SpansSource.Strategy.Range"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "duration": {
                "$ref": "#/components/schemas/SpansSource.Strategy.Duration"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SpansSource.Strategy.Duration": {
        "type": "object",
        "properties": {
          "durationField": {
            "$ref": "#/components/schemas/ObservationField"
          },
          "startTimestampField": {
            "$ref": "#/components/schemas/ObservationField"
          }
        }
      },
      "SpansSource.Strategy.Instant": {
        "type": "object",
        "properties": {
          "timestampField": {
            "$ref": "#/components/schemas/ObservationField"
          }
        }
      },
      "SpansSource.Strategy.Range": {
        "type": "object",
        "properties": {
          "endTimestampField": {
            "$ref": "#/components/schemas/ObservationField"
          },
          "startTimestampField": {
            "$ref": "#/components/schemas/ObservationField"
          }
        }
      },
      "SpecificWidgets": {
        "type": "object",
        "properties": {
          "widgetIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "StartTimeMetric": {
        "type": "object"
      },
      "Stat": {
        "type": "object",
        "properties": {
          "allowAbbreviation": {
            "example": false,
            "description": "Whether to render numeric value without abbreviation",
            "type": "boolean"
          },
          "categoryFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "customUnit": {
            "example": {
              "value": "rpm"
            },
            "description": "Custom unit (requires to have unit field set as UNIT_CUSTOM to take effect)",
            "type": "string"
          },
          "decimalPrecision": {
            "example": 2,
            "description": "Number indicating the decimal precision of the numeric values, within range 0-15",
            "type": "integer",
            "format": "int32"
          },
          "displaySeriesName": {
            "description": "(multi-stat display only) Whether to show the series names above the value",
            "type": "boolean"
          },
          "legend": {
            "$ref": "#/components/schemas/Legend"
          },
          "legendBy": {
            "$ref": "#/components/schemas/LegendBy"
          },
          "max": {
            "example": 150000,
            "description": "A maximum gauge value used in percentage threshold calculation and for visual value representation",
            "type": "number",
            "format": "double"
          },
          "min": {
            "example": 0,
            "description": "A minimum gauge value used in percentage threshold calculation and for visual value representation",
            "type": "number",
            "format": "double"
          },
          "thresholdBy": {
            "$ref": "#/components/schemas/common.ThresholdBy"
          },
          "thresholdType": {
            "$ref": "#/components/schemas/ThresholdType"
          },
          "thresholds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/common.Threshold"
            }
          },
          "unit": {
            "$ref": "#/components/schemas/common.Unit"
          },
          "valueField": {
            "$ref": "#/components/schemas/ObservationField"
          }
        }
      },
      "StaticSource": {
        "type": "object",
        "properties": {
          "allOption": {
            "$ref": "#/components/schemas/AllOption"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValueLabel"
            }
          },
          "valuesOrderDirection": {
            "$ref": "#/components/schemas/OrderDirection"
          }
        }
      },
      "StringValueLabel": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "Sum": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "observationField": {
            "$ref": "#/components/schemas/ObservationField"
          }
        }
      },
      "Table": {
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Table.Column"
            }
          }
        }
      },
      "Table.Column": {
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/ObservationField"
          }
        }
      },
      "TextboxDefaultIntervalValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        }
      },
      "TextboxDefaultLuceneValue": {
        "type": "object",
        "properties": {
          "dataModeType": {
            "$ref": "#/components/schemas/v1.common.DataModeType"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "TextboxDefaultNumericValue": {
        "type": "object",
        "properties": {
          "isInteger": {
            "type": "boolean"
          },
          "max": {
            "type": "number",
            "format": "float"
          },
          "min": {
            "type": "number",
            "format": "float"
          },
          "value": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "TextboxDefaultRegexValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        }
      },
      "TextboxDefaultStringValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        }
      },
      "TextboxDefaultValue": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "singleString": {
                "deprecated": true,
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "singleNumeric": {
                "deprecated": true,
                "type": "number",
                "format": "float"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "defaultStringValue": {
                "$ref": "#/components/schemas/TextboxDefaultStringValue"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "defaultNumericValue": {
                "$ref": "#/components/schemas/TextboxDefaultNumericValue"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "defaultLuceneValue": {
                "$ref": "#/components/schemas/TextboxDefaultLuceneValue"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "defaultRegexValue": {
                "$ref": "#/components/schemas/TextboxDefaultRegexValue"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "defaultIntervalValue": {
                "$ref": "#/components/schemas/TextboxDefaultIntervalValue"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TextboxSource": {
        "type": "object",
        "properties": {
          "defaultValue": {
            "$ref": "#/components/schemas/TextboxDefaultValue"
          }
        },
        "additionalProperties": false
      },
      "ThresholdType": {
        "type": "string",
        "enum": [
          "THRESHOLD_TYPE_UNSPECIFIED",
          "THRESHOLD_TYPE_RELATIVE",
          "THRESHOLD_TYPE_ABSOLUTE"
        ]
      },
      "TimeFrame": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TimeFrameSelect": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "absoluteTimeFrame": {
                "$ref": "#/components/schemas/TimeFrame"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "relativeTimeFrame": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TimeSeriesBars": {
        "type": "object",
        "properties": {
          "allowAbbreviation": {
            "example": false,
            "description": "Whether to render numeric value without abbreviation",
            "type": "boolean"
          },
          "barValueDisplay": {
            "$ref": "#/components/schemas/Visualization.BarValueDisplay"
          },
          "categoryFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "colorScheme": {
            "example": {
              "value": "classic"
            },
            "description": "Applied color scheme for this query, one of the predefined values",
            "type": "string"
          },
          "customUnit": {
            "example": {
              "value": "rpm"
            },
            "description": "Custom unit (requires to have unit field as 'custom' to take effect)",
            "type": "string"
          },
          "decimalPrecision": {
            "example": 4,
            "description": "Number indicating the decimal precision of the numeric values, within range 0-15",
            "type": "integer",
            "format": "int32"
          },
          "hashColors": {
            "example": false,
            "description": "Whether to ignore color scheme and derive colors from algorithm",
            "type": "boolean"
          },
          "legend": {
            "$ref": "#/components/schemas/Legend"
          },
          "maxSlicesPerBar": {
            "example": {
              "value": 8
            },
            "description": "How many slices can fit in a single bar",
            "type": "integer",
            "format": "int32"
          },
          "scaleType": {
            "$ref": "#/components/schemas/ScaleType"
          },
          "seriesNameTemplate": {
            "example": {
              "value": "Trace of {{ application }}"
            },
            "description": "Custom template for the series name",
            "type": "string"
          },
          "sortBy": {
            "$ref": "#/components/schemas/SortByType"
          },
          "temporalField": {
            "$ref": "#/components/schemas/ObservationField"
          },
          "tooltip": {
            "$ref": "#/components/schemas/TimeSeriesTooltip"
          },
          "unit": {
            "$ref": "#/components/schemas/common.Unit"
          },
          "valueFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "yAxisMax": {
            "example": 1000,
            "description": "Number indicating the upper band for y axis",
            "type": "number",
            "format": "float"
          },
          "yAxisMin": {
            "example": -1000,
            "description": "Number indicating the lower band for y axis",
            "type": "number",
            "format": "float"
          }
        }
      },
      "TimeSeriesLines": {
        "type": "object",
        "properties": {
          "allowAbbreviation": {
            "example": false,
            "description": "Whether to render numeric value without abbreviation",
            "type": "boolean"
          },
          "categoryFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "colorScheme": {
            "example": {
              "value": "classic"
            },
            "description": "Applied color scheme for this query, one of the predefined values",
            "type": "string"
          },
          "connectNulls": {
            "example": false,
            "description": "Whether the line should remain connected instead of producing scattered points when null values are present in between",
            "type": "boolean"
          },
          "customUnit": {
            "example": {
              "value": "rpm"
            },
            "description": "Custom unit (requires to have unit field as 'custom' to take effect)",
            "type": "string"
          },
          "decimalPrecision": {
            "example": 4,
            "description": "Number indicating the decimal precision of the numeric values, within range 0-15",
            "type": "integer",
            "format": "int32"
          },
          "hashColors": {
            "example": false,
            "description": "Whether to ignore color scheme and derive colors from algorithm",
            "type": "boolean"
          },
          "legend": {
            "$ref": "#/components/schemas/Legend"
          },
          "scaleType": {
            "$ref": "#/components/schemas/ScaleType"
          },
          "seriesCountLimit": {
            "example": {
              "value": 50
            },
            "description": "Max count of the series per query",
            "type": "string",
            "format": "int64"
          },
          "seriesNameTemplate": {
            "example": {
              "value": "Trace of {{ application }}"
            },
            "description": "Custom template for the series name",
            "type": "string"
          },
          "stackedLine": {
            "$ref": "#/components/schemas/TimeSeriesLines.StackedLine"
          },
          "temporalField": {
            "$ref": "#/components/schemas/ObservationField"
          },
          "tooltip": {
            "$ref": "#/components/schemas/TimeSeriesTooltip"
          },
          "unit": {
            "$ref": "#/components/schemas/common.Unit"
          },
          "valueFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "yAxisMax": {
            "example": 1000,
            "description": "Number indicating the upper band for y axis",
            "type": "number",
            "format": "float"
          },
          "yAxisMin": {
            "example": -1000,
            "description": "Number indicating the lower band for y axis",
            "type": "number",
            "format": "float"
          }
        }
      },
      "TimeSeriesLines.StackedLine": {
        "type": "string",
        "enum": [
          "STACKED_LINE_UNSPECIFIED",
          "STACKED_LINE_ABSOLUTE",
          "STACKED_LINE_RELATIVE"
        ]
      },
      "TimeSeriesTooltip": {
        "type": "object",
        "properties": {
          "showAllSeries": {
            "example": true,
            "description": "Type of the tooltip display, can be showing single series value or all series values at once",
            "type": "boolean"
          },
          "showLabels": {
            "example": true,
            "type": "boolean"
          }
        }
      },
      "TokenOriginType": {
        "type": "string",
        "enum": [
          "TOKEN_ORIGIN_TYPE_UNSPECIFIED",
          "TOKEN_ORIGIN_TYPE_USER",
          "TOKEN_ORIGIN_TYPE_API"
        ]
      },
      "Tooltip": {
        "type": "object",
        "properties": {
          "showLabels": {
            "example": true,
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/TooltipType"
          }
        }
      },
      "TooltipType": {
        "type": "string",
        "enum": [
          "TOOLTIP_TYPE_UNSPECIFIED",
          "TOOLTIP_TYPE_ALL",
          "TOOLTIP_TYPE_SINGLE"
        ]
      },
      "UUID": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        }
      },
      "UnpinDashboardResponse": {
        "externalDocs": {
          "description": "Find out more about Dashboards in our documentation.",
          "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
        },
        "title": "Unpin dashboard response data structure",
        "description": "This is a response received when dashboard has been unpinned",
        "type": "object"
      },
      "ValueLabel": {
        "type": "object",
        "properties": {
          "isDefault": {
            "type": "boolean"
          },
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Variable": {
        "type": "object",
        "properties": {
          "definition": {
            "$ref": "#/components/schemas/Variable.Definition"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "displayType": {
            "$ref": "#/components/schemas/VariableDisplayType"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Variable.Definition": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "constant": {
                "$ref": "#/components/schemas/Constant"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "multiSelect": {
                "$ref": "#/components/schemas/MultiSelect"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "VariableDisplayType": {
        "type": "string",
        "enum": [
          "VARIABLE_DISPLAY_TYPE_UNSPECIFIED",
          "VARIABLE_DISPLAY_TYPE_LABEL_VALUE",
          "VARIABLE_DISPLAY_TYPE_VALUE",
          "VARIABLE_DISPLAY_TYPE_NOTHING"
        ]
      },
      "VariableDisplayTypeV2": {
        "type": "string",
        "enum": [
          "VARIABLE_DISPLAY_TYPE_V2_UNSPECIFIED",
          "VARIABLE_DISPLAY_TYPE_V2_LABEL_VALUE",
          "VARIABLE_DISPLAY_TYPE_V2_VALUE",
          "VARIABLE_DISPLAY_TYPE_V2_NOTHING"
        ]
      },
      "VariableSelectionOptions": {
        "type": "object",
        "properties": {
          "selectionType": {
            "$ref": "#/components/schemas/SelectionType"
          }
        }
      },
      "VariableSourceV2": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "static": {
                "$ref": "#/components/schemas/StaticSource"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "query": {
                "$ref": "#/components/schemas/VariableSourceV2.QuerySource"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "textbox": {
                "$ref": "#/components/schemas/TextboxSource"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "VariableSourceV2.QuerySource": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "allOption": {
                "$ref": "#/components/schemas/AllOption"
              },
              "logsQuery": {
                "$ref": "#/components/schemas/QuerySource.LogsQuery"
              },
              "refreshStrategy": {
                "$ref": "#/components/schemas/VariableSourceV2.RefreshStrategy"
              },
              "valueDisplayOptions": {
                "$ref": "#/components/schemas/VariableSourceV2.ValueDisplayOptions"
              },
              "valuesOrderDirection": {
                "$ref": "#/components/schemas/OrderDirection"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "allOption": {
                "$ref": "#/components/schemas/AllOption"
              },
              "metricsQuery": {
                "$ref": "#/components/schemas/QuerySource.MetricsQuery"
              },
              "refreshStrategy": {
                "$ref": "#/components/schemas/VariableSourceV2.RefreshStrategy"
              },
              "valueDisplayOptions": {
                "$ref": "#/components/schemas/VariableSourceV2.ValueDisplayOptions"
              },
              "valuesOrderDirection": {
                "$ref": "#/components/schemas/OrderDirection"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "allOption": {
                "$ref": "#/components/schemas/AllOption"
              },
              "refreshStrategy": {
                "$ref": "#/components/schemas/VariableSourceV2.RefreshStrategy"
              },
              "spansQuery": {
                "$ref": "#/components/schemas/QuerySource.SpansQuery"
              },
              "valueDisplayOptions": {
                "$ref": "#/components/schemas/VariableSourceV2.ValueDisplayOptions"
              },
              "valuesOrderDirection": {
                "$ref": "#/components/schemas/OrderDirection"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "allOption": {
                "$ref": "#/components/schemas/AllOption"
              },
              "dataprimeQuery": {
                "$ref": "#/components/schemas/QuerySource.DataprimeQuery"
              },
              "refreshStrategy": {
                "$ref": "#/components/schemas/VariableSourceV2.RefreshStrategy"
              },
              "valueDisplayOptions": {
                "$ref": "#/components/schemas/VariableSourceV2.ValueDisplayOptions"
              },
              "valuesOrderDirection": {
                "$ref": "#/components/schemas/OrderDirection"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "VariableSourceV2.RefreshStrategy": {
        "type": "string",
        "enum": [
          "REFRESH_STRATEGY_UNSPECIFIED",
          "REFRESH_STRATEGY_ON_DASHBOARD_LOAD",
          "REFRESH_STRATEGY_ON_TIME_FRAME_CHANGE"
        ]
      },
      "VariableSourceV2.ValueDisplayOptions": {
        "type": "object",
        "properties": {
          "labelRegex": {
            "type": "string"
          },
          "valueRegex": {
            "type": "string"
          }
        }
      },
      "VariableV2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "displayFullRow": {
            "type": "boolean"
          },
          "displayName": {
            "type": "string"
          },
          "displayType": {
            "$ref": "#/components/schemas/VariableDisplayTypeV2"
          },
          "name": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/VariableSourceV2"
          },
          "value": {
            "$ref": "#/components/schemas/VariableValueV2"
          }
        }
      },
      "VariableValueV2": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "multiString": {
                "$ref": "#/components/schemas/MultiStringValue"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "singleString": {
                "$ref": "#/components/schemas/SingleStringValue"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "singleNumeric": {
                "$ref": "#/components/schemas/VariableValueV2.SingleNumericValue"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "regex": {
                "$ref": "#/components/schemas/RegexValue"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "lucene": {
                "$ref": "#/components/schemas/LuceneQueryValue"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "interval": {
                "$ref": "#/components/schemas/IntervalValue"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "VariableValueV2.SingleNumericValue": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/NumericValueLabel"
          }
        }
      },
      "VerticalBars": {
        "type": "object",
        "properties": {
          "allowAbbreviation": {
            "example": false,
            "description": "Whether to render numeric value without abbreviation",
            "type": "boolean"
          },
          "barValueDisplay": {
            "$ref": "#/components/schemas/Visualization.BarValueDisplay"
          },
          "categoryFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "colorScheme": {
            "example": {
              "value": "classic"
            },
            "description": "Applied color scheme, one of the predefined values",
            "type": "string"
          },
          "colorsBy": {
            "$ref": "#/components/schemas/ColorsBy"
          },
          "customUnit": {
            "example": {
              "value": "mph"
            },
            "description": "Custom unit (requires to have unit field set to custom to take effect)",
            "type": "string"
          },
          "decimalPrecision": {
            "example": 4,
            "description": "Number indicating the decimal precision of the numeric values, within range 0-15",
            "type": "integer",
            "format": "int32"
          },
          "groupNameTemplate": {
            "example": {
              "value": "Slice - {{ variable }}"
            },
            "description": "Custom template name for a group, can contain variables",
            "type": "string"
          },
          "hashColors": {
            "example": false,
            "description": "Whether to ignore color scheme and derive colors from algorithm",
            "type": "boolean"
          },
          "legend": {
            "$ref": "#/components/schemas/Legend"
          },
          "maxBarsPerChart": {
            "example": 20,
            "description": "Maximum number of bars on a chart",
            "type": "integer",
            "format": "int32"
          },
          "maxSlicesPerBar": {
            "description": "How many slices can fit in a single bar",
            "type": "integer",
            "format": "int32"
          },
          "scaleType": {
            "$ref": "#/components/schemas/ScaleType"
          },
          "sortBy": {
            "$ref": "#/components/schemas/SortByType"
          },
          "stackNameTemplate": {
            "description": "Custom template name of an individual stack",
            "type": "string"
          },
          "subCategoryFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "unit": {
            "$ref": "#/components/schemas/common.Unit"
          },
          "valueField": {
            "$ref": "#/components/schemas/ObservationField"
          },
          "yAxisMax": {
            "example": 1000,
            "description": "Number indicating the upper band for y axis",
            "type": "number",
            "format": "float"
          },
          "yAxisMin": {
            "example": -1000,
            "description": "Number indicating the lower band for y axis",
            "type": "number",
            "format": "float"
          }
        }
      },
      "Visualization": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "table": {
                "$ref": "#/components/schemas/Table"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "timeSeriesLines": {
                "$ref": "#/components/schemas/TimeSeriesLines"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "timeSeriesBars": {
                "$ref": "#/components/schemas/TimeSeriesBars"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "stat": {
                "$ref": "#/components/schemas/Stat"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "gauge": {
                "$ref": "#/components/schemas/Visualization.Gauge"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "hexagonBins": {
                "$ref": "#/components/schemas/HexagonBins"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "pieChart": {
                "$ref": "#/components/schemas/Visualization.PieChart"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "horizontalBars": {
                "$ref": "#/components/schemas/HorizontalBars"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "verticalBars": {
                "$ref": "#/components/schemas/VerticalBars"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Visualization.BarValueDisplay": {
        "type": "string",
        "enum": [
          "BAR_VALUE_DISPLAY_UNSPECIFIED",
          "BAR_VALUE_DISPLAY_TOP",
          "BAR_VALUE_DISPLAY_INSIDE",
          "BAR_VALUE_DISPLAY_BOTH"
        ]
      },
      "Visualization.Gauge": {
        "type": "object",
        "properties": {
          "allowAbbreviation": {
            "example": false,
            "description": "Whether to render numeric value without abbreviation",
            "type": "boolean"
          },
          "categoryFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "customUnit": {
            "example": {
              "value": "rpm"
            },
            "description": "Custom unit (requires to have unit field set as UNIT_CUSTOM to take effect)",
            "type": "string"
          },
          "decimalPrecision": {
            "example": 2,
            "description": "Number indicating the decimal precision of the numeric values, within range 0-15",
            "type": "integer",
            "format": "int32"
          },
          "displaySeriesName": {
            "description": "(multigauge display only) Whether to show the series names above the value",
            "type": "boolean"
          },
          "legend": {
            "$ref": "#/components/schemas/Legend"
          },
          "legendBy": {
            "$ref": "#/components/schemas/LegendBy"
          },
          "max": {
            "example": 150000,
            "description": "A maximum gauge value used in percentage threshold calculation and for visual value representation",
            "type": "number",
            "format": "double"
          },
          "min": {
            "example": 0,
            "description": "A minimum gauge value used in percentage threshold calculation and for visual value representation",
            "type": "number",
            "format": "double"
          },
          "showInnerArc": {
            "example": false,
            "description": "Whether to show the inner arc of gauge which graphically represents the value",
            "type": "boolean"
          },
          "showOuterArc": {
            "example": true,
            "description": "Whether to show the outer arc of gauge which graphically represents the min/max range",
            "type": "boolean"
          },
          "thresholdType": {
            "$ref": "#/components/schemas/ThresholdType"
          },
          "thresholds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/common.Threshold"
            }
          },
          "unit": {
            "$ref": "#/components/schemas/common.Unit"
          },
          "valueField": {
            "$ref": "#/components/schemas/ObservationField"
          }
        }
      },
      "Visualization.PieChart": {
        "type": "object",
        "properties": {
          "allowAbbreviation": {
            "example": false,
            "description": "Whether to render numeric value without abbreviation",
            "type": "boolean"
          },
          "categoryFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "colorScheme": {
            "example": {
              "value": "classic"
            },
            "description": "Applied color scheme, one of the predefined values",
            "type": "string"
          },
          "customUnit": {
            "example": {
              "value": "mph"
            },
            "description": "Custom unit (requires the unit field to be set to custom to take effect)",
            "type": "string"
          },
          "decimalPrecision": {
            "example": 5,
            "description": "Number indicating the decimal precision of the numeric values, within range 0-15",
            "type": "integer",
            "format": "int32"
          },
          "groupNameTemplate": {
            "example": {
              "value": "Slice - {{ variable }}"
            },
            "description": "Custom template name for a group, can contain variables",
            "type": "string"
          },
          "hashColors": {
            "example": false,
            "description": "Whether to ignore color scheme and derive colors from algorithm",
            "type": "boolean"
          },
          "labelDefinition": {
            "$ref": "#/components/schemas/Visualization.PieChart.LabelDefinition"
          },
          "legend": {
            "$ref": "#/components/schemas/Legend"
          },
          "maxSlicesPerChart": {
            "example": 24,
            "description": "Maximum number of slices on a chart",
            "type": "integer",
            "format": "int32"
          },
          "maxSlicesPerStack": {
            "description": "How many slices can fit in a single slice stack",
            "type": "integer",
            "format": "int32"
          },
          "minSlicePercentage": {
            "example": 5,
            "description": "Minimum percentage threshold for slices to be displayed",
            "type": "integer",
            "format": "int32"
          },
          "showTotal": {
            "example": false,
            "description": "Whether to show the total amount as a title",
            "type": "boolean"
          },
          "stackNameTemplate": {
            "example": {
              "value": "Slice {{ group }} - subslice {{ subgroup }}"
            },
            "description": "Custom template name of an individual slice in the stack",
            "type": "string"
          },
          "subCategoryFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservationField"
            }
          },
          "unit": {
            "$ref": "#/components/schemas/common.Unit"
          },
          "valueField": {
            "$ref": "#/components/schemas/ObservationField"
          }
        }
      },
      "Visualization.PieChart.LabelDefinition": {
        "type": "object",
        "properties": {
          "isVisible": {
            "description": "Are labels visible",
            "type": "boolean"
          },
          "labelSource": {
            "$ref": "#/components/schemas/Visualization.PieChart.LabelSource"
          },
          "showName": {
            "description": "Whether to show the name of slice in the label",
            "type": "boolean"
          },
          "showPercentage": {
            "description": "Whether to show percentage value of slice in the label",
            "type": "boolean"
          },
          "showValue": {
            "description": "Whether to show value of slice in the label",
            "type": "boolean"
          }
        }
      },
      "Visualization.PieChart.LabelSource": {
        "type": "string",
        "enum": [
          "LABEL_SOURCE_UNSPECIFIED",
          "LABEL_SOURCE_INNER",
          "LABEL_SOURCE_STACK"
        ]
      },
      "Widget": {
        "externalDocs": {
          "description": "Find out more about creating dashboard widgets in our documentation.",
          "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/#add-new-widgets"
        },
        "title": "Widget",
        "description": "This data structure represents a dashboard widget.",
        "type": "object",
        "properties": {
          "appearance": {
            "$ref": "#/components/schemas/Widget.Appearance"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "definition": {
            "$ref": "#/components/schemas/Widget.Definition"
          },
          "description": {
            "example": {
              "value": "Average delay of application"
            },
            "description": "Short description of the widget",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "title": {
            "example": {
              "value": "Gauge"
            },
            "description": "Name of the widget",
            "type": "string"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Widget.Appearance": {
        "type": "object",
        "properties": {
          "width": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Widget.Definition": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "lineChart": {
                "$ref": "#/components/schemas/LineChart"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "dataTable": {
                "$ref": "#/components/schemas/DataTable"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "gauge": {
                "$ref": "#/components/schemas/widgets.Gauge"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "pieChart": {
                "$ref": "#/components/schemas/widgets.PieChart"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "barChart": {
                "$ref": "#/components/schemas/BarChart"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "horizontalBarChart": {
                "$ref": "#/components/schemas/HorizontalBarChart"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "markdown": {
                "$ref": "#/components/schemas/Markdown"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "hexagon": {
                "$ref": "#/components/schemas/Hexagon"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "dynamic": {
                "$ref": "#/components/schemas/widgets.Dynamic"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "WidgetScope": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "allWidgets": {
                "$ref": "#/components/schemas/AllWidgets"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "specificWidgets": {
                "$ref": "#/components/schemas/SpecificWidgets"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "XAxis": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "value": {
                "$ref": "#/components/schemas/XAxisByValue"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "time": {
                "$ref": "#/components/schemas/XAxisByTime"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "XAxisByTime": {
        "type": "object",
        "properties": {
          "bucketsPresented": {
            "description": "How many buckets to present in the selected timeframe",
            "type": "integer",
            "format": "int32"
          },
          "interval": {
            "description": "Interval of value sampling, i.e. every 5 minutes, every 1 second and so on",
            "type": "string"
          }
        }
      },
      "XAxisByValue": {
        "type": "object"
      },
      "YAxisViewByCategory": {
        "type": "object"
      },
      "YAxisViewByValue": {
        "type": "object"
      },
      "common.Aggregation": {
        "type": "string",
        "enum": [
          "AGGREGATION_UNSPECIFIED",
          "AGGREGATION_LAST",
          "AGGREGATION_MIN",
          "AGGREGATION_MAX",
          "AGGREGATION_AVG",
          "AGGREGATION_SUM"
        ]
      },
      "common.DataprimeQuery": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          }
        }
      },
      "common.Group": {
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/FieldGroup"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/common.Group"
            }
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "common.Threshold": {
        "externalDocs": {
          "url": ""
        },
        "title": "Threshold",
        "description": "Definition of a single gauge threshold",
        "type": "object",
        "properties": {
          "color": {
            "description": "Color of the threshold",
            "type": "string"
          },
          "from": {
            "description": "Minimum bound value of the threshold",
            "type": "number",
            "format": "double"
          },
          "label": {
            "description": "Optional label of the threshold",
            "type": "string"
          }
        }
      },
      "common.ThresholdBy": {
        "type": "string",
        "enum": [
          "THRESHOLD_BY_UNSPECIFIED",
          "THRESHOLD_BY_VALUE",
          "THRESHOLD_BY_BACKGROUND"
        ]
      },
      "common.Unit": {
        "type": "string",
        "enum": [
          "UNIT_UNSPECIFIED",
          "UNIT_MICROSECONDS",
          "UNIT_MILLISECONDS",
          "UNIT_SECONDS",
          "UNIT_BYTES",
          "UNIT_KBYTES",
          "UNIT_MBYTES",
          "UNIT_GBYTES",
          "UNIT_BYTES_IEC",
          "UNIT_KIBYTES",
          "UNIT_MIBYTES",
          "UNIT_GIBYTES",
          "UNIT_EUR_CENTS",
          "UNIT_EUR",
          "UNIT_USD_CENTS",
          "UNIT_USD",
          "UNIT_NANOSECONDS",
          "UNIT_CUSTOM",
          "UNIT_PERCENT_ZERO_ONE",
          "UNIT_PERCENT_ZERO_HUNDRED",
          "UNIT_PERCENT"
        ]
      },
      "events.v3.FilterMatcher": {
        "type": "string",
        "enum": [
          "FILTER_MATCHER_TEXT_OR_UNSPECIFIED",
          "FILTER_MATCHER_REGEXP"
        ]
      },
      "filters.Filter": {
        "externalDocs": {
          "description": "Discover how to filter and query data in Custom Dashboards by exploring our documentation.",
          "url": "https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/"
        },
        "title": "Filter",
        "description": "This data structure represents the configuration for filtering data on the dashboard.",
        "type": "object",
        "properties": {
          "collapsed": {
            "description": "Indicates if the filter's UI representation should be collapsed or expanded.",
            "type": "boolean"
          },
          "displayName": {
            "description": "A display name for the filter",
            "type": "string"
          },
          "enabled": {
            "description": "Indicates if the filter is currently enabled or not.",
            "type": "boolean"
          },
          "source": {
            "$ref": "#/components/schemas/Filter.Source"
          }
        }
      },
      "v1.common.DataModeType": {
        "type": "string",
        "enum": [
          "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
          "DATA_MODE_TYPE_ARCHIVE"
        ]
      },
      "v3.FilterOperator": {
        "type": "string",
        "enum": [
          "FILTER_OPERATOR_AND_OR_UNSPECIFIED",
          "FILTER_OPERATOR_OR"
        ]
      },
      "widgets.BarValueDisplay": {
        "type": "string",
        "enum": [
          "BAR_VALUE_DISPLAY_UNSPECIFIED",
          "BAR_VALUE_DISPLAY_TOP",
          "BAR_VALUE_DISPLAY_INSIDE",
          "BAR_VALUE_DISPLAY_BOTH"
        ]
      },
      "widgets.Dynamic": {
        "type": "object",
        "properties": {
          "interpretation": {
            "$ref": "#/components/schemas/Interpretation"
          },
          "query": {
            "$ref": "#/components/schemas/Dynamic.Query"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrameSelect"
          },
          "visualization": {
            "$ref": "#/components/schemas/Visualization"
          }
        }
      },
      "widgets.Gauge": {
        "type": "object",
        "properties": {
          "customUnit": {
            "example": {
              "value": "kvs"
            },
            "description": "Custom unit (requires to have unit field set as 'custom' to take effect)",
            "type": "string"
          },
          "dataModeType": {
            "$ref": "#/components/schemas/widgets.common.DataModeType"
          },
          "decimal": {
            "example": 3,
            "description": "Number indicating the decimal precision of the numeric values, within range 0-15",
            "type": "integer",
            "format": "int32"
          },
          "decimalPrecision": {
            "example": false,
            "description": "Whether to render numeric value without abbreviation",
            "type": "boolean"
          },
          "displaySeriesName": {
            "description": "(multigauge display only) Whether to show the series names above the value",
            "type": "boolean"
          },
          "legend": {
            "$ref": "#/components/schemas/Legend"
          },
          "legendBy": {
            "$ref": "#/components/schemas/LegendBy"
          },
          "max": {
            "example": 150000,
            "description": "A maximum gauge value used in percentage threshold calculation and for visual value representation",
            "type": "number",
            "format": "double"
          },
          "min": {
            "example": 0,
            "description": "A minimum gauge value used in percentage threshold calculation and for visual value representation",
            "type": "number",
            "format": "double"
          },
          "query": {
            "$ref": "#/components/schemas/Gauge.Query"
          },
          "showInnerArc": {
            "example": false,
            "description": "Whether to show the inner arc of gauge which graphically represents the value",
            "type": "boolean"
          },
          "showOuterArc": {
            "example": true,
            "description": "Whether to show the outer arc of gauge which graphically represents the min/max range",
            "type": "boolean"
          },
          "thresholdBy": {
            "$ref": "#/components/schemas/Gauge.ThresholdBy"
          },
          "thresholdType": {
            "$ref": "#/components/schemas/ThresholdType"
          },
          "thresholds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Gauge.Threshold"
            }
          },
          "unit": {
            "$ref": "#/components/schemas/Gauge.Unit"
          }
        }
      },
      "widgets.PieChart": {
        "type": "object",
        "properties": {
          "colorScheme": {
            "example": {
              "value": "classic"
            },
            "description": "Applied color scheme, one of the predefined values",
            "type": "string"
          },
          "customUnit": {
            "example": {
              "value": "mph"
            },
            "description": "Custom unit (requires the unit field to be set to custom to take effect)",
            "type": "string"
          },
          "dataModeType": {
            "$ref": "#/components/schemas/widgets.common.DataModeType"
          },
          "decimal": {
            "example": 5,
            "description": "Number indicating the decimal precision of the numeric values, within range 0-15",
            "type": "integer",
            "format": "int32"
          },
          "decimalPrecision": {
            "example": false,
            "description": "Whether to render numeric value without abbreviation",
            "type": "boolean"
          },
          "groupNameTemplate": {
            "example": {
              "value": "Slice - {{ variable }}"
            },
            "description": "Custom template name for a group, can contain variables",
            "type": "string"
          },
          "hashColors": {
            "example": false,
            "description": "Whether to ignore color scheme and derive colors from algorithm",
            "type": "boolean"
          },
          "labelDefinition": {
            "$ref": "#/components/schemas/widgets.PieChart.LabelDefinition"
          },
          "legend": {
            "$ref": "#/components/schemas/Legend"
          },
          "maxSlicesPerChart": {
            "example": 24,
            "description": "Maximum number of slices on a chart",
            "type": "integer",
            "format": "int32"
          },
          "minSlicePercentage": {
            "example": 5,
            "description": "Minimum percentage threshold for slices to be displayed",
            "type": "integer",
            "format": "int32"
          },
          "query": {
            "$ref": "#/components/schemas/PieChart.Query"
          },
          "showLegend": {
            "description": "Indicates whether to display the legend",
            "type": "boolean"
          },
          "showTotal": {
            "example": false,
            "description": "Whether to show the total amount as a title",
            "type": "boolean"
          },
          "stackDefinition": {
            "$ref": "#/components/schemas/PieChart.StackDefinition"
          },
          "unit": {
            "$ref": "#/components/schemas/common.Unit"
          }
        }
      },
      "widgets.PieChart.LabelDefinition": {
        "type": "object",
        "properties": {
          "isVisible": {
            "description": "Are labels visible",
            "type": "boolean"
          },
          "labelSource": {
            "$ref": "#/components/schemas/widgets.PieChart.LabelSource"
          },
          "showName": {
            "description": "Whether to show the name of slice in the label",
            "type": "boolean"
          },
          "showPercentage": {
            "description": "Whether to show percentage value of slice in the label",
            "type": "boolean"
          },
          "showValue": {
            "description": "Whether to show value of slice in the label",
            "type": "boolean"
          }
        }
      },
      "widgets.PieChart.LabelSource": {
        "type": "string",
        "enum": [
          "LABEL_SOURCE_UNSPECIFIED",
          "LABEL_SOURCE_INNER",
          "LABEL_SOURCE_STACK"
        ]
      },
      "widgets.common.DataModeType": {
        "type": "string",
        "enum": [
          "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
          "DATA_MODE_TYPE_ARCHIVE"
        ]
      }
    },
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "API key authentication"
      }
    }
  }
}