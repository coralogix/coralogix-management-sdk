{
  "openapi": "3.0.0",
  "info": {
    "title": "",
    "version": "1.0.0"
  },
  "paths": {
    "/v3/events": {
      "get": {
        "tags": [
          "Events Service"
        ],
        "summary": "List Events",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "EventsService_ListEvents",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "externalDocs": {
                "url": ""
              },
              "title": "EventsFilter",
              "description": "This data structure represents an events filter",
              "type": "object",
              "properties": {
                "cxEventKeys": {
                  "type": "array",
                  "items": {
                    "example": [
                      "test_key"
                    ],
                    "type": "string"
                  }
                },
                "cxEventLabelsFilters": {},
                "cxEventMetadataFilters": {},
                "cxEventTypes": {
                  "type": "array",
                  "items": {
                    "example": [
                      "test_type"
                    ],
                    "type": "string"
                  }
                },
                "timestamp": {}
              },
              "required": [
                "timestamp",
                "cxEventTypes",
                "cxEventKeys"
              ]
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "order_bys",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "direction": {
                    "$ref": "#/components/schemas/events.v3.OrderByDirection"
                  },
                  "fieldName": {
                    "$ref": "#/components/schemas/events.v3.OrderByFields"
                  }
                }
              }
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "pagination",
            "schema": {
              "type": "object",
              "properties": {
                "pageSize": {
                  "example": 10,
                  "type": "integer",
                  "format": "int64"
                },
                "pageToken": {
                  "example": "test",
                  "type": "string"
                }
              }
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListEventsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/v3/events?filter=SOME_OBJECT_VALUE&order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/v3/events\"\n\nquerystring = {\"filter\":\"SOME_OBJECT_VALUE\",\"order_bys\":\"SOME_ARRAY_VALUE\",\"pagination\":\"SOME_OBJECT_VALUE\"}\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.coralogix.com/mgmt/openapi/v3/events?filter=SOME_OBJECT_VALUE&order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE' \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/v3/events/events:batchGet": {
      "get": {
        "tags": [
          "Events Service"
        ],
        "summary": "Batch Get Event",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "EventsService_BatchGetEvent",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "order_bys",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "direction": {
                    "$ref": "#/components/schemas/events.v3.OrderByDirection"
                  },
                  "fieldName": {
                    "$ref": "#/components/schemas/events.v3.OrderByFields"
                  }
                }
              }
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "pagination",
            "schema": {
              "type": "object",
              "properties": {
                "pageSize": {
                  "example": 10,
                  "type": "integer",
                  "format": "int64"
                },
                "pageToken": {
                  "example": "test",
                  "type": "string"
                }
              }
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "object",
              "properties": {
                "timestamp": {}
              }
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchGetEventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/v3/events/events:batchGet?ids=SOME_ARRAY_VALUE&order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE&filter=SOME_OBJECT_VALUE';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/v3/events/events:batchGet\"\n\nquerystring = {\"ids\":\"SOME_ARRAY_VALUE\",\"order_bys\":\"SOME_ARRAY_VALUE\",\"pagination\":\"SOME_OBJECT_VALUE\",\"filter\":\"SOME_OBJECT_VALUE\"}\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.coralogix.com/mgmt/openapi/v3/events/events:batchGet?ids=SOME_ARRAY_VALUE&order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE&filter=SOME_OBJECT_VALUE' \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/v3/events/{id}": {
      "get": {
        "tags": [
          "Events Service"
        ],
        "summary": "Get Event",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "EventsService_GetEvent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "test",
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "order_bys",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "direction": {
                    "$ref": "#/components/schemas/events.v3.OrderByDirection"
                  },
                  "fieldName": {
                    "$ref": "#/components/schemas/events.v3.OrderByFields"
                  }
                }
              }
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "pagination",
            "schema": {
              "type": "object",
              "properties": {
                "pageSize": {
                  "example": 10,
                  "type": "integer",
                  "format": "int64"
                },
                "pageToken": {
                  "example": "test",
                  "type": "string"
                }
              }
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/v3/events/test?order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/v3/events/test\"\n\nquerystring = {\"order_bys\":\"SOME_ARRAY_VALUE\",\"pagination\":\"SOME_OBJECT_VALUE\"}\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.coralogix.com/mgmt/openapi/v3/events/test?order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE' \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/v3/events:count": {
      "get": {
        "tags": [
          "Events Service"
        ],
        "summary": "List Events Count",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "EventsService_ListEventsCount",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "externalDocs": {
                "url": ""
              },
              "title": "EventsFilter",
              "description": "This data structure represents an events filter",
              "type": "object",
              "properties": {
                "cxEventKeys": {
                  "type": "array",
                  "items": {
                    "example": [
                      "test_key"
                    ],
                    "type": "string"
                  }
                },
                "cxEventLabelsFilters": {},
                "cxEventMetadataFilters": {},
                "cxEventTypes": {
                  "type": "array",
                  "items": {
                    "example": [
                      "test_type"
                    ],
                    "type": "string"
                  }
                },
                "timestamp": {}
              },
              "required": [
                "timestamp",
                "cxEventTypes",
                "cxEventKeys"
              ]
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListEventsCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/v3/events:count?filter=SOME_OBJECT_VALUE';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/v3/events:count\"\n\nquerystring = {\"filter\":\"SOME_OBJECT_VALUE\"}\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.coralogix.com/mgmt/openapi/v3/events:count?filter=SOME_OBJECT_VALUE' \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    },
    "/v3/events:statistics": {
      "get": {
        "tags": [
          "Events Service"
        ],
        "summary": "Get Events Statistics",
        "description": "No description available",
        "externalDocs": {
          "url": ""
        },
        "operationId": "EventsService_GetEventsStatistics",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "externalDocs": {
                "url": ""
              },
              "title": "EventsFilter",
              "description": "This data structure represents an events filter",
              "type": "object",
              "properties": {
                "cxEventKeys": {
                  "type": "array",
                  "items": {
                    "example": [
                      "test_key"
                    ],
                    "type": "string"
                  }
                },
                "cxEventLabelsFilters": {},
                "cxEventMetadataFilters": {},
                "cxEventTypes": {
                  "type": "array",
                  "items": {
                    "example": [
                      "test_type"
                    ],
                    "type": "string"
                  }
                },
                "timestamp": {}
              },
              "required": [
                "timestamp",
                "cxEventTypes",
                "cxEventKeys"
              ]
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventsStatisticsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://api.coralogix.com/mgmt/openapi/v3/events:statistics?filter=SOME_OBJECT_VALUE';\n\nlet options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.coralogix.com/mgmt/openapi/v3/events:statistics\"\n\nquerystring = {\"filter\":\"SOME_OBJECT_VALUE\"}\n\nheaders = {\"Authorization\": \"Bearer <API_KEY>\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.coralogix.com/mgmt/openapi/v3/events:statistics?filter=SOME_OBJECT_VALUE' \\\n  --header 'Authorization: Bearer <API_KEY>'"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "BatchGetEventResponse": {
        "type": "object",
        "properties": {
          "events": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CxEventSingleOrMultiple"
            }
          },
          "notFoundIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/events.v3.PaginationResponse"
          }
        }
      },
      "ColorsByAggregation": {
        "type": "object",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/ColorsByAggregation"
          }
        },
        "additionalProperties": false
      },
      "ColorsByGroupBy": {
        "type": "object",
        "properties": {
          "groupBy": {
            "$ref": "#/components/schemas/ColorsByGroupBy"
          }
        },
        "additionalProperties": false
      },
      "ColorsByStack": {
        "type": "object",
        "properties": {
          "stack": {
            "$ref": "#/components/schemas/ColorsByStack"
          }
        },
        "additionalProperties": false
      },
      "CxEvent": {
        "externalDocs": {
          "description": "Find out more about events",
          "url": "https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/"
        },
        "title": "Event",
        "description": "This data structure represents an event",
        "type": "object",
        "properties": {
          "companyId": {
            "example": 1,
            "type": "integer",
            "format": "int32"
          },
          "cxEventDedupKey": {
            "example": "test_dedup_key",
            "type": "string"
          },
          "cxEventKey": {
            "example": "test",
            "type": "string"
          },
          "cxEventLabels": {
            "example": {
              "test": "test"
            },
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "cxEventMetadata": {
            "example": {
              "test": "test"
            },
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "cxEventPayload": {
            "example": {
              "test": "test"
            },
            "type": "object"
          },
          "cxEventPayloadType": {
            "example": "test_payload_type",
            "type": "string"
          },
          "cxEventTimestamp": {
            "example": 1714857600,
            "type": "string",
            "format": "date-time"
          },
          "cxEventType": {
            "example": "test_type",
            "type": "string"
          }
        },
        "required": [
          "cxEventKey",
          "cxEventType",
          "cxEventLabels",
          "companyId",
          "cxEventTimestamp",
          "cxEventPayloadType",
          "cxEventPayload"
        ]
      },
      "CxEventArray": {
        "externalDocs": {
          "description": "Find out more about events",
          "url": "https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/"
        },
        "title": "CxEventArray",
        "description": "This data structure represents an array of events",
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CxEvent"
            }
          }
        },
        "required": [
          "events"
        ]
      },
      "CxEventSingleOrMultiple": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CxEventSingleOrMultipleSingleEvent"
          },
          {
            "$ref": "#/components/schemas/CxEventSingleOrMultipleMultipleEvents"
          }
        ]
      },
      "CxEventSingleOrMultipleMultipleEvents": {
        "externalDocs": {
          "url": ""
        },
        "title": "CxEventSingleOrMultiple",
        "description": "This data structure represents a single or multiple events",
        "type": "object",
        "properties": {
          "multipleEvents": {
            "$ref": "#/components/schemas/CxEventArray"
          }
        },
        "required": [
          "event"
        ],
        "additionalProperties": false
      },
      "CxEventSingleOrMultipleSingleEvent": {
        "externalDocs": {
          "url": ""
        },
        "title": "CxEventSingleOrMultiple",
        "description": "This data structure represents a single or multiple events",
        "type": "object",
        "properties": {
          "singleEvent": {
            "$ref": "#/components/schemas/CxEvent"
          }
        },
        "required": [
          "event"
        ],
        "additionalProperties": false
      },
      "FieldGroup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "FieldStatistics": {
        "type": "object",
        "properties": {
          "fieldStatistics": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "int64"
            }
          }
        }
      },
      "FilterPathAndValues": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/FilterPathAndValuesMultipleValues"
          },
          {
            "$ref": "#/components/schemas/FilterPathAndValuesFilters"
          }
        ]
      },
      "FilterPathAndValuesFilters": {
        "externalDocs": {
          "url": ""
        },
        "title": "FilterPathAndValues",
        "description": "This data structure represents a filter path and values",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/Filters"
          },
          "path": {
            "example": "test",
            "type": "string"
          }
        },
        "required": [
          "path",
          "values"
        ],
        "additionalProperties": false
      },
      "FilterPathAndValuesMultipleValues": {
        "externalDocs": {
          "url": ""
        },
        "title": "FilterPathAndValues",
        "description": "This data structure represents a filter path and values",
        "type": "object",
        "properties": {
          "multipleValues": {
            "$ref": "#/components/schemas/MultipleValues"
          },
          "path": {
            "example": "test",
            "type": "string"
          }
        },
        "required": [
          "path",
          "values"
        ],
        "additionalProperties": false
      },
      "Filters": {
        "externalDocs": {
          "url": ""
        },
        "title": "Filters",
        "description": "This data structure represents a filter",
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/v3.FilterOperator"
          },
          "pathAndValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterPathAndValues"
            }
          }
        },
        "required": [
          "pathAndValues"
        ]
      },
      "GetEventResponse": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/CxEventSingleOrMultiple"
          },
          "pagination": {
            "$ref": "#/components/schemas/events.v3.PaginationResponse"
          }
        }
      },
      "GetEventsStatisticsResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "GetEventsStatisticsResponse",
        "description": "This data structure represents a response to get events statistics",
        "type": "object",
        "properties": {
          "cxEventLabelsFieldStatistics": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldStatistics"
            }
          },
          "cxEventMetadataFieldStatistics": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldStatistics"
            }
          }
        },
        "required": [
          "cxEventMetadataFieldStatisticscxEventLabelsFieldStatistics"
        ]
      },
      "ListEventsCountResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "ListEventsCountResponse",
        "description": "This data structure represents a response to list events count",
        "type": "object",
        "properties": {
          "count": {
            "example": 10,
            "type": "string",
            "format": "uint64"
          },
          "reachedLimit": {
            "example": false,
            "type": "boolean"
          }
        },
        "required": [
          "count",
          "reachedLimit"
        ]
      },
      "ListEventsResponse": {
        "externalDocs": {
          "url": ""
        },
        "title": "ListEventsResponse",
        "description": "This data structure represents a response to list events",
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CxEvent"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/events.v3.PaginationResponse"
          }
        },
        "required": [
          "events"
        ]
      },
      "MultipleValues": {
        "type": "object",
        "properties": {
          "matcher": {
            "$ref": "#/components/schemas/events.v3.FilterMatcher"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "common.Group": {
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/FieldGroup"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/common.Group"
            }
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "events.v3.FilterMatcher": {
        "type": "string",
        "enum": [
          "FILTER_MATCHER_TEXT_OR_UNSPECIFIED",
          "FILTER_MATCHER_REGEXP"
        ]
      },
      "events.v3.OrderByDirection": {
        "type": "string",
        "enum": [
          "ORDER_BY_DIRECTION_UNSPECIFIED",
          "ORDER_BY_DIRECTION_ASC",
          "ORDER_BY_DIRECTION_DESC"
        ]
      },
      "events.v3.OrderByFields": {
        "type": "string",
        "enum": [
          "ORDER_BY_FIELDS_UNSPECIFIED",
          "ORDER_BY_FIELDS_TIMESTAMP"
        ]
      },
      "events.v3.PaginationResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "example": "test",
            "type": "string"
          },
          "totalSize": {
            "example": 10,
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "v3.FilterOperator": {
        "type": "string",
        "enum": [
          "FILTER_OPERATOR_AND_OR_UNSPECIFIED",
          "FILTER_OPERATOR_OR"
        ]
      }
    },
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "API key authentication"
      }
    }
  }
}