openapi: 3.0.0
info:
  title: google/api/http.proto
  version: version not set
tags:
  - name: EventsService
  - name: ClustersService
  - name: InfraFiltersService
  - name: FeatureRequirementsInternalService
  - name: FeatureRequirementsService
  - name: ServiceSloService
  - name: ApmServiceService
  - name: ConnectorsService
  - name: PresetsService
  - name: NotificationService
  - name: InternalTestingService
  - name: TestingService
  - name: EntitiesService
  - name: ApiKeysService
  - name: SamlConfigurationService
  - name: TeamService
  - name: AlertDefsInternalService
  - name: AlertDefsService
  - name: AlertEventService
  - name: LogsDataSourceService
  - name: DashboardsService
  - name: MetricsDataSourceService
  - name: ArchiveLogsDataSourceService
  - name: DashboardCatalogService
  - name: ArchiveSpansDataSourceService
  - name: DataprimeDataSourceService
  - name: DashboardFoldersService
  - name: SpansDataSourceService
  - name: TeamSettingsService
  - name: ActionsService
  - name: Events2MetricInternalService
  - name: Events2MetricService
  - name: Folders for views
    description: Create and manage view folders.
  - name: Views
    description: Create and manage views.
  - name: ScopesService
  - name: MetricsTcoService
  - name: MetricsConfiguratorPublicService
  - name: MetricsConfiguratorService
  - name: DataUsageService
  - name: RetentionsService
  - name: TargetService
  - name: InternalTargetService
  - name: SchemaRuleService
  - name: DatasetLocationsService
  - name: InternalDatasetLocationsService
  - name: InternalDatasetManagementService
  - name: KafkaOutTargetService
  - name: RuleGroups
  - name: RuleGroupSets
  - name: Tasks
  - name: TeamPermissionsMgmtService
  - name: ExtensionService
  - name: InternalOnboardingService
  - name: ExtensionDeploymentService
  - name: ExtensionTestingService
  - name: QuotaService
  - name: ExtensionContentManagementService
  - name: ExternalTokenService
  - name: PermissionCheckService
  - name: IntegrationService
  - name: WebhookIntegrationService
  - name: ContextualDataIntegrationService
  - name: IntegrationExtensionsDeploymentService
  - name: PushBasedContextualDataIntegrationService
  - name: OutgoingWebhooksService
  - name: EnrichmentService
  - name: EnrichmentInternalService
  - name: AwsEnrichmentService
  - name: Custom Enrichment service
  - name: InternalPoliciesService
  - name: PoliciesService
  - name: MeasurementsService
  - name: CompanyDataSourcesInternalService
  - name: LabelMappingsInternalService
  - name: MeasurementsInternalService
  - name: CompanyDataSourcesService
  - name: LabelMappingsService
  - name: CompanyProvidersService
paths:
  /api/v2/events2metrics:
    get:
      operationId: Events2MetricService_ListE2M
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2ListE2MResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Events2MetricService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      operationId: Events2MetricService_CreateE2M
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2CreateE2MResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2E2MCreateParams'
        required: true
      tags:
        - Events2MetricService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"Service catalog latency","description":"avg and max the latency of catalog service","permutationsLimit":30000,"metricLabels":[{"targetLabel":"alias_label_name","sourceField":"log_obj.string_value"}],"metricFields":[{"targetBaseMetricName":"alias_field_name","sourceField":"log_obj.numeric_field","aggregations":[{"enabled":true,"aggType":"AGG_TYPE_UNSPECIFIED","targetMetricName":"alias_field_name_agg_func","samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"histogram":{"buckets":2}}]}],"type":"E2M_TYPE_UNSPECIFIED","spansQuery":{"lucene":"applicationName:myApp","applicationnameFilters":"myApp","subsystemnameFilters":"mySubsystem","actionFilters":"myAction","serviceFilters":"myService"},"logsQuery":{"lucene":"log_obj.numeric_field: [50 TO 100]","alias":"new_query","applicationnameFilters":"app_name","subsystemnameFilters":"sub_name","severityFilters":["SEVERITY_UNSPECIFIED"]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics"


            payload = {
                "name": "Service catalog latency",
                "description": "avg and max the latency of catalog service",
                "permutationsLimit": 30000,
                "metricLabels": [
                    {
                        "targetLabel": "alias_label_name",
                        "sourceField": "log_obj.string_value"
                    }
                ],
                "metricFields": [
                    {
                        "targetBaseMetricName": "alias_field_name",
                        "sourceField": "log_obj.numeric_field",
                        "aggregations": [
                            {
                                "enabled": True,
                                "aggType": "AGG_TYPE_UNSPECIFIED",
                                "targetMetricName": "alias_field_name_agg_func",
                                "samples": {"sampleType": "SAMPLE_TYPE_UNSPECIFIED"},
                                "histogram": {"buckets": 2}
                            }
                        ]
                    }
                ],
                "type": "E2M_TYPE_UNSPECIFIED",
                "spansQuery": {
                    "lucene": "applicationName:myApp",
                    "applicationnameFilters": "myApp",
                    "subsystemnameFilters": "mySubsystem",
                    "actionFilters": "myAction",
                    "serviceFilters": "myService"
                },
                "logsQuery": {
                    "lucene": "log_obj.numeric_field: [50 TO 100]",
                    "alias": "new_query",
                    "applicationnameFilters": "app_name",
                    "subsystemnameFilters": "sub_name",
                    "severityFilters": ["SEVERITY_UNSPECIFIED"]
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"Service catalog latency","description":"avg and max the latency of catalog service","permutationsLimit":30000,"metricLabels":[{"targetLabel":"alias_label_name","sourceField":"log_obj.string_value"}],"metricFields":[{"targetBaseMetricName":"alias_field_name","sourceField":"log_obj.numeric_field","aggregations":[{"enabled":true,"aggType":"AGG_TYPE_UNSPECIFIED","targetMetricName":"alias_field_name_agg_func","samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"histogram":{"buckets":2}}]}],"type":"E2M_TYPE_UNSPECIFIED","spansQuery":{"lucene":"applicationName:myApp","applicationnameFilters":"myApp","subsystemnameFilters":"mySubsystem","actionFilters":"myAction","serviceFilters":"myService"},"logsQuery":{"lucene":"log_obj.numeric_field: [50 TO 100]","alias":"new_query","applicationnameFilters":"app_name","subsystemnameFilters":"sub_name","severityFilters":["SEVERITY_UNSPECIFIED"]}}'
      x-hideTryItPanel: false
      x-showConsole: true
    put:
      operationId: Events2MetricService_ReplaceE2M
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2ReplaceE2MResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2E2M'
        required: true
      tags:
        - Events2MetricService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"d6a3658e-78d2-47d0-9b81-b2c551f01b09","name":"Service_catalog_latency","description":"avg and max the latency of catalog service","createTime":"2022-06-30T12:30:00Z\'","updateTime":"2022-06-30T12:30:00Z\'","permutations":{"limit":30000,"hasExceededLimit":true},"metricLabels":[{"targetLabel":"alias_label_name","sourceField":"log_obj.string_value"}],"metricFields":[{"targetBaseMetricName":"alias_field_name","sourceField":"log_obj.numeric_field","aggregations":[{"enabled":true,"aggType":"AGG_TYPE_UNSPECIFIED","targetMetricName":"alias_field_name_agg_func","samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"histogram":{"buckets":2}}]}],"type":"E2M_TYPE_UNSPECIFIED","spansQuery":{"lucene":"applicationName:myApp","applicationnameFilters":"myApp","subsystemnameFilters":"mySubsystem","actionFilters":"myAction","serviceFilters":"myService"},"logsQuery":{"lucene":"log_obj.numeric_field: [50 TO 100]","alias":"new_query","applicationnameFilters":"app_name","subsystemnameFilters":"sub_name","severityFilters":["SEVERITY_UNSPECIFIED"]},"isInternal":true}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics"


            payload = {
                "id": "d6a3658e-78d2-47d0-9b81-b2c551f01b09",
                "name": "Service_catalog_latency",
                "description": "avg and max the latency of catalog service",
                "createTime": "2022-06-30T12:30:00Z'",
                "updateTime": "2022-06-30T12:30:00Z'",
                "permutations": {
                    "limit": 30000,
                    "hasExceededLimit": True
                },
                "metricLabels": [
                    {
                        "targetLabel": "alias_label_name",
                        "sourceField": "log_obj.string_value"
                    }
                ],
                "metricFields": [
                    {
                        "targetBaseMetricName": "alias_field_name",
                        "sourceField": "log_obj.numeric_field",
                        "aggregations": [
                            {
                                "enabled": True,
                                "aggType": "AGG_TYPE_UNSPECIFIED",
                                "targetMetricName": "alias_field_name_agg_func",
                                "samples": {"sampleType": "SAMPLE_TYPE_UNSPECIFIED"},
                                "histogram": {"buckets": 2}
                            }
                        ]
                    }
                ],
                "type": "E2M_TYPE_UNSPECIFIED",
                "spansQuery": {
                    "lucene": "applicationName:myApp",
                    "applicationnameFilters": "myApp",
                    "subsystemnameFilters": "mySubsystem",
                    "actionFilters": "myAction",
                    "serviceFilters": "myService"
                },
                "logsQuery": {
                    "lucene": "log_obj.numeric_field: [50 TO 100]",
                    "alias": "new_query",
                    "applicationnameFilters": "app_name",
                    "subsystemnameFilters": "sub_name",
                    "severityFilters": ["SEVERITY_UNSPECIFIED"]
                },
                "isInternal": True
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"d6a3658e-78d2-47d0-9b81-b2c551f01b09","name":"Service_catalog_latency","description":"avg and max the latency of catalog service","createTime":"2022-06-30T12:30:00Z'\''","updateTime":"2022-06-30T12:30:00Z'\''","permutations":{"limit":30000,"hasExceededLimit":true},"metricLabels":[{"targetLabel":"alias_label_name","sourceField":"log_obj.string_value"}],"metricFields":[{"targetBaseMetricName":"alias_field_name","sourceField":"log_obj.numeric_field","aggregations":[{"enabled":true,"aggType":"AGG_TYPE_UNSPECIFIED","targetMetricName":"alias_field_name_agg_func","samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"histogram":{"buckets":2}}]}],"type":"E2M_TYPE_UNSPECIFIED","spansQuery":{"lucene":"applicationName:myApp","applicationnameFilters":"myApp","subsystemnameFilters":"mySubsystem","actionFilters":"myAction","serviceFilters":"myService"},"logsQuery":{"lucene":"log_obj.numeric_field: [50 TO 100]","alias":"new_query","applicationnameFilters":"app_name","subsystemnameFilters":"sub_name","severityFilters":["SEVERITY_UNSPECIFIED"]},"isInternal":true}'
      x-hideTryItPanel: false
      x-showConsole: true
  /api/v2/events2metrics/atomic_batch_execute:
    post:
      operationId: Events2MetricService_AtomicBatchExecuteE2M
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2AtomicBatchExecuteE2MResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2AtomicBatchExecuteE2MRequest'
        required: true
      tags:
        - Events2MetricService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/atomic_batch_execute';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requests":[{"create":{"e2m":{"name":"Service catalog latency","description":"avg and max the latency of catalog service","permutationsLimit":30000,"metricLabels":[{"targetLabel":"alias_label_name","sourceField":"log_obj.string_value"}],"metricFields":[{"targetBaseMetricName":"alias_field_name","sourceField":"log_obj.numeric_field","aggregations":[{"enabled":true,"aggType":"AGG_TYPE_UNSPECIFIED","targetMetricName":"alias_field_name_agg_func","samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"histogram":{"buckets":2}}]}],"type":"E2M_TYPE_UNSPECIFIED","spansQuery":{"lucene":"applicationName:myApp","applicationnameFilters":"myApp","subsystemnameFilters":"mySubsystem","actionFilters":"myAction","serviceFilters":"myService"},"logsQuery":{"lucene":"log_obj.numeric_field: [50 TO 100]","alias":"new_query","applicationnameFilters":"app_name","subsystemnameFilters":"sub_name","severityFilters":["SEVERITY_UNSPECIFIED"]}}},"replace":{"e2m":{"id":"d6a3658e-78d2-47d0-9b81-b2c551f01b09","name":"Service_catalog_latency","description":"avg and max the latency of catalog service","createTime":"2022-06-30T12:30:00Z\'","updateTime":"2022-06-30T12:30:00Z\'","permutations":{"limit":30000,"hasExceededLimit":true},"metricLabels":[{"targetLabel":"alias_label_name","sourceField":"log_obj.string_value"}],"metricFields":[{"targetBaseMetricName":"alias_field_name","sourceField":"log_obj.numeric_field","aggregations":[{"enabled":true,"aggType":"AGG_TYPE_UNSPECIFIED","targetMetricName":"alias_field_name_agg_func","samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"histogram":{"buckets":2}}]}],"type":"E2M_TYPE_UNSPECIFIED","spansQuery":{"lucene":"applicationName:myApp","applicationnameFilters":"myApp","subsystemnameFilters":"mySubsystem","actionFilters":"myAction","serviceFilters":"myService"},"logsQuery":{"lucene":"log_obj.numeric_field: [50 TO 100]","alias":"new_query","applicationnameFilters":"app_name","subsystemnameFilters":"sub_name","severityFilters":["SEVERITY_UNSPECIFIED"]},"isInternal":true}},"delete":{"id":"d6a3658e-78d2-47d0-9b81-b2c551f01b09"}}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/atomic_batch_execute"


            payload = {"requests": [
                    {
                        "create": {"e2m": {
                                "name": "Service catalog latency",
                                "description": "avg and max the latency of catalog service",
                                "permutationsLimit": 30000,
                                "metricLabels": [
                                    {
                                        "targetLabel": "alias_label_name",
                                        "sourceField": "log_obj.string_value"
                                    }
                                ],
                                "metricFields": [
                                    {
                                        "targetBaseMetricName": "alias_field_name",
                                        "sourceField": "log_obj.numeric_field",
                                        "aggregations": [
                                            {
                                                "enabled": True,
                                                "aggType": "AGG_TYPE_UNSPECIFIED",
                                                "targetMetricName": "alias_field_name_agg_func",
                                                "samples": {"sampleType": "SAMPLE_TYPE_UNSPECIFIED"},
                                                "histogram": {"buckets": 2}
                                            }
                                        ]
                                    }
                                ],
                                "type": "E2M_TYPE_UNSPECIFIED",
                                "spansQuery": {
                                    "lucene": "applicationName:myApp",
                                    "applicationnameFilters": "myApp",
                                    "subsystemnameFilters": "mySubsystem",
                                    "actionFilters": "myAction",
                                    "serviceFilters": "myService"
                                },
                                "logsQuery": {
                                    "lucene": "log_obj.numeric_field: [50 TO 100]",
                                    "alias": "new_query",
                                    "applicationnameFilters": "app_name",
                                    "subsystemnameFilters": "sub_name",
                                    "severityFilters": ["SEVERITY_UNSPECIFIED"]
                                }
                            }},
                        "replace": {"e2m": {
                                "id": "d6a3658e-78d2-47d0-9b81-b2c551f01b09",
                                "name": "Service_catalog_latency",
                                "description": "avg and max the latency of catalog service",
                                "createTime": "2022-06-30T12:30:00Z'",
                                "updateTime": "2022-06-30T12:30:00Z'",
                                "permutations": {
                                    "limit": 30000,
                                    "hasExceededLimit": True
                                },
                                "metricLabels": [
                                    {
                                        "targetLabel": "alias_label_name",
                                        "sourceField": "log_obj.string_value"
                                    }
                                ],
                                "metricFields": [
                                    {
                                        "targetBaseMetricName": "alias_field_name",
                                        "sourceField": "log_obj.numeric_field",
                                        "aggregations": [
                                            {
                                                "enabled": True,
                                                "aggType": "AGG_TYPE_UNSPECIFIED",
                                                "targetMetricName": "alias_field_name_agg_func",
                                                "samples": {"sampleType": "SAMPLE_TYPE_UNSPECIFIED"},
                                                "histogram": {"buckets": 2}
                                            }
                                        ]
                                    }
                                ],
                                "type": "E2M_TYPE_UNSPECIFIED",
                                "spansQuery": {
                                    "lucene": "applicationName:myApp",
                                    "applicationnameFilters": "myApp",
                                    "subsystemnameFilters": "mySubsystem",
                                    "actionFilters": "myAction",
                                    "serviceFilters": "myService"
                                },
                                "logsQuery": {
                                    "lucene": "log_obj.numeric_field: [50 TO 100]",
                                    "alias": "new_query",
                                    "applicationnameFilters": "app_name",
                                    "subsystemnameFilters": "sub_name",
                                    "severityFilters": ["SEVERITY_UNSPECIFIED"]
                                },
                                "isInternal": True
                            }},
                        "delete": {"id": "d6a3658e-78d2-47d0-9b81-b2c551f01b09"}
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/atomic_batch_execute \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requests":[{"create":{"e2m":{"name":"Service catalog latency","description":"avg and max the latency of catalog service","permutationsLimit":30000,"metricLabels":[{"targetLabel":"alias_label_name","sourceField":"log_obj.string_value"}],"metricFields":[{"targetBaseMetricName":"alias_field_name","sourceField":"log_obj.numeric_field","aggregations":[{"enabled":true,"aggType":"AGG_TYPE_UNSPECIFIED","targetMetricName":"alias_field_name_agg_func","samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"histogram":{"buckets":2}}]}],"type":"E2M_TYPE_UNSPECIFIED","spansQuery":{"lucene":"applicationName:myApp","applicationnameFilters":"myApp","subsystemnameFilters":"mySubsystem","actionFilters":"myAction","serviceFilters":"myService"},"logsQuery":{"lucene":"log_obj.numeric_field: [50 TO 100]","alias":"new_query","applicationnameFilters":"app_name","subsystemnameFilters":"sub_name","severityFilters":["SEVERITY_UNSPECIFIED"]}}},"replace":{"e2m":{"id":"d6a3658e-78d2-47d0-9b81-b2c551f01b09","name":"Service_catalog_latency","description":"avg and max the latency of catalog service","createTime":"2022-06-30T12:30:00Z'\''","updateTime":"2022-06-30T12:30:00Z'\''","permutations":{"limit":30000,"hasExceededLimit":true},"metricLabels":[{"targetLabel":"alias_label_name","sourceField":"log_obj.string_value"}],"metricFields":[{"targetBaseMetricName":"alias_field_name","sourceField":"log_obj.numeric_field","aggregations":[{"enabled":true,"aggType":"AGG_TYPE_UNSPECIFIED","targetMetricName":"alias_field_name_agg_func","samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"histogram":{"buckets":2}}]}],"type":"E2M_TYPE_UNSPECIFIED","spansQuery":{"lucene":"applicationName:myApp","applicationnameFilters":"myApp","subsystemnameFilters":"mySubsystem","actionFilters":"myAction","serviceFilters":"myService"},"logsQuery":{"lucene":"log_obj.numeric_field: [50 TO 100]","alias":"new_query","applicationnameFilters":"app_name","subsystemnameFilters":"sub_name","severityFilters":["SEVERITY_UNSPECIFIED"]},"isInternal":true}},"delete":{"id":"d6a3658e-78d2-47d0-9b81-b2c551f01b09"}}]}'
      x-hideTryItPanel: false
      x-showConsole: true
  /api/v2/events2metrics/labels_cardinality:
    get:
      operationId: Events2MetricService_ListLabelsCardinality
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2ListLabelsCardinalityResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: spansQuery.lucene
          description: lucene query
          in: query
          required: false
          schema:
            type: string
        - name: spansQuery.applicationnameFilters
          description: application name filters
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: spansQuery.subsystemnameFilters
          description: subsystem name filters
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: spansQuery.actionFilters
          description: action filters
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: spansQuery.serviceFilters
          description: service filters
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: logsQuery.lucene
          description: lucene query
          in: query
          required: false
          schema:
            type: string
        - name: logsQuery.alias
          description: alias
          in: query
          required: false
          schema:
            type: string
        - name: logsQuery.applicationnameFilters
          description: application name filters
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: logsQuery.subsystemnameFilters
          description: subsystem names filters
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: logsQuery.severityFilters
          description: severity type filters
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - SEVERITY_UNSPECIFIED
                - SEVERITY_DEBUG
                - SEVERITY_VERBOSE
                - SEVERITY_INFO
                - SEVERITY_WARNING
                - SEVERITY_ERROR
                - SEVERITY_CRITICAL
      tags:
        - Events2MetricService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/labels_cardinality?spansQuery.lucene=SOME_STRING_VALUE&spansQuery.applicationnameFilters=SOME_ARRAY_VALUE&spansQuery.subsystemnameFilters=SOME_ARRAY_VALUE&spansQuery.actionFilters=SOME_ARRAY_VALUE&spansQuery.serviceFilters=SOME_ARRAY_VALUE&logsQuery.lucene=SOME_STRING_VALUE&logsQuery.alias=SOME_STRING_VALUE&logsQuery.applicationnameFilters=SOME_ARRAY_VALUE&logsQuery.subsystemnameFilters=SOME_ARRAY_VALUE&logsQuery.severityFilters=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/labels_cardinality"


            querystring =
            {"spansQuery.lucene":"SOME_STRING_VALUE","spansQuery.applicationnameFilters":"SOME_ARRAY_VALUE","spansQuery.subsystemnameFilters":"SOME_ARRAY_VALUE","spansQuery.actionFilters":"SOME_ARRAY_VALUE","spansQuery.serviceFilters":"SOME_ARRAY_VALUE","logsQuery.lucene":"SOME_STRING_VALUE","logsQuery.alias":"SOME_STRING_VALUE","logsQuery.applicationnameFilters":"SOME_ARRAY_VALUE","logsQuery.subsystemnameFilters":"SOME_ARRAY_VALUE","logsQuery.severityFilters":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/labels_cardinality?spansQuery.lucene=SOME_STRING_VALUE&spansQuery.applicationnameFilters=SOME_ARRAY_VALUE&spansQuery.subsystemnameFilters=SOME_ARRAY_VALUE&spansQuery.actionFilters=SOME_ARRAY_VALUE&spansQuery.serviceFilters=SOME_ARRAY_VALUE&logsQuery.lucene=SOME_STRING_VALUE&logsQuery.alias=SOME_STRING_VALUE&logsQuery.applicationnameFilters=SOME_ARRAY_VALUE&logsQuery.subsystemnameFilters=SOME_ARRAY_VALUE&logsQuery.severityFilters=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /api/v2/events2metrics/limits:
    get:
      operationId: Events2MetricService_GetLimits
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetLimitsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Events2MetricService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/limits';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/limits"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/limits \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /api/v2/events2metrics/{id}:
    get:
      operationId: Events2MetricService_GetE2M
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetE2MResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - Events2MetricService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    delete:
      operationId: Events2MetricService_DeleteE2M
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2DeleteE2MResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          description: id of e2m to be deleted
          in: path
          required: true
          schema:
            type: string
      tags:
        - Events2MetricService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards:
    post:
      operationId: DashboardsService_CreateDashboard
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesCreateDashboardResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicesCreateDashboardRequest'
        required: true
      tags:
        - DashboardsService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/dashboards';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestId":"string","dashboard":{"id":"string","name":"string","description":"string","layout":{"sections":[{"id":{"value":"string"},"rows":[{"id":{"value":"string"},"appearance":{"height":0},"widgets":[{"id":{"value":"string"},"title":"string","description":"string","definition":{"lineChart":{"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"tooltip":{"showLabels":true,"type":"TOOLTIP_TYPE_UNSPECIFIED"},"queryDefinitions":[{"id":"string","query":{"logs":{"groupBy":[],"aggregations":[],"filters":[],"groupBys":[]},"metrics":{"filters":[]},"spans":{"groupBy":[],"aggregations":[],"filters":[]},"dataprime":{"filters":[]}},"seriesNameTemplate":"string","seriesCountLimit":"string","unit":"UNIT_UNSPECIFIED","scaleType":"SCALE_TYPE_UNSPECIFIED","name":"string","isVisible":true,"colorScheme":"string","resolution":{"interval":"string","bucketsPresented":0},"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0}],"stackedLine":"STACKED_LINE_UNSPECIFIED"},"dataTable":{"query":{"logs":{"luceneQuery":{"value":"string"},"filters":[{}],"grouping":{"groupBy":[null],"aggregations":[null],"groupBys":[null]},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"filters":[{}],"grouping":{"groupBy":[null],"aggregations":[null]},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"resultsPerPage":0,"rowStyle":"ROW_STYLE_UNSPECIFIED","columns":[{"field":"string","width":0}],"orderBy":{"field":"string","orderDirection":"ORDER_DIRECTION_UNSPECIFIED"},"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED"},"gauge":{"query":{"metrics":{"promqlQuery":{"value":"string"},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"logs":{"luceneQuery":{"value":"string"},"logsAggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"groupBy":[{"keypath":[]}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"spansAggregation":{"metricAggregation":{},"dimensionAggregation":{}},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"groupBy":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"min":0.1,"max":0.1,"showInnerArc":true,"showOuterArc":true,"unit":"UNIT_UNSPECIFIED","thresholds":[{"from":0.1,"color":"string","label":"string"}],"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","thresholdBy":"THRESHOLD_BY_UNSPECIFIED","customUnit":"string","decimal":0,"thresholdType":"THRESHOLD_TYPE_UNSPECIFIED","legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"legendBy":"LEGEND_BY_UNSPECIFIED"},"pieChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxSlicesPerChart":0,"minSlicePercentage":0,"stackDefinition":{"maxSlicesPerStack":0,"stackNameTemplate":"string"},"labelDefinition":{"labelSource":"LABEL_SOURCE_UNSPECIFIED","isVisible":true,"showName":true,"showValue":true,"showPercentage":true},"showLegend":true,"groupNameTemplate":"string","unit":"UNIT_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"}},"barChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxBarsPerChart":0,"groupNameTemplate":"string","stackDefinition":{"maxSlicesPerBar":0,"stackNameTemplate":"string"},"scaleType":"SCALE_TYPE_UNSPECIFIED","colorsBy":{"stack":{},"groupBy":{},"aggregation":{}},"xAxis":{"value":{},"time":{"interval":"string","bucketsPresented":0}},"unit":"UNIT_UNSPECIFIED","sortBy":"SORT_BY_TYPE_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","barValueDisplay":"BAR_VALUE_DISPLAY_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"}},"horizontalBarChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxBarsPerChart":0,"groupNameTemplate":"string","stackDefinition":{"maxSlicesPerBar":0,"stackNameTemplate":"string"},"scaleType":"SCALE_TYPE_UNSPECIFIED","colorsBy":{"stack":{},"groupBy":{},"aggregation":{}},"unit":"UNIT_UNSPECIFIED","displayOnBar":true,"yAxisViewBy":{"category":{},"value":{}},"sortBy":"SORT_BY_TYPE_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"}},"markdown":{"markdownText":"string","tooltipText":"string"},"hexagon":{"query":{"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"aggregation":"AGGREGATION_UNSPECIFIED","promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"logs":{"luceneQuery":{"value":"string"},"logsAggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupBy":[{"keypath":[]}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"spansAggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupBy":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"min":0.1,"max":0.1,"unit":"UNIT_UNSPECIFIED","thresholds":[{"from":0.1,"color":"string","label":"string"}],"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"thresholdType":"THRESHOLD_TYPE_UNSPECIFIED","legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"legendBy":"LEGEND_BY_UNSPECIFIED"}},"appearance":{"width":0},"createdAt":"2019-08-24T14:15:22Z","updatedAt":"2019-08-24T14:15:22Z"}]}],"options":{"internal":{},"custom":{"name":"string","description":"string","collapsed":true,"color":{"predefined":"SECTION_PREDEFINED_COLOR_UNSPECIFIED"}}}}]},"variables":[{"name":"string","definition":{"constant":{"value":"string"},"multiSelect":{"selected":["string"],"source":{"logsPath":{"value":"string","observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metricLabel":{"metricName":"string","label":"string"},"constantList":{"values":["string"]},"spanField":{"value":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"}},"query":{"query":{"logsQuery":{"type":{"fieldName":{"logRegex":"string"},"fieldValue":{"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}}},"metricsQuery":{"type":{"metricName":{"metricRegex":"string"},"labelName":{"metricRegex":"string"},"labelValue":{"metricName":{"stringValue":"string","variableName":"string"},"labelName":{"stringValue":"string","variableName":"string"},"labelFilters":[{"metric":{},"label":{},"operator":{}}]}}},"spansQuery":{"type":{"fieldName":{"spanRegex":"string"},"fieldValue":{"value":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"}}}}},"refreshStrategy":"REFRESH_STRATEGY_UNSPECIFIED","valueDisplayOptions":{"valueRegex":"string","labelRegex":"string"}}},"selection":{"all":{},"list":{"values":["string"],"labels":["string"]}},"valuesOrderDirection":"ORDER_DIRECTION_UNSPECIFIED","selectionOptions":{"selectionType":"SELECTION_TYPE_UNSPECIFIED"}}},"displayName":"string","description":"string","displayType":"VARIABLE_DISPLAY_TYPE_UNSPECIFIED"}],"filters":[{"source":{"logs":{"field":"string","operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}},"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"spans":{"field":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}}},"metrics":{"metric":"string","label":"string","operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}}}},"enabled":true,"collapsed":true}],"absoluteTimeFrame":{"from":"2019-08-24T14:15:22Z","to":"2019-08-24T14:15:22Z"},"relativeTimeFrame":"string","folderId":{"value":"string"},"folderPath":{"segments":["string"]},"annotations":[{"id":"string","name":"string","enabled":true,"source":{"metrics":{"promqlQuery":{"value":"string"},"strategy":{"startTimeMetric":{}},"messageTemplate":"string","labels":["string"]},"logs":{"luceneQuery":{"value":"string"},"strategy":{"instant":{"timestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"range":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"endTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"duration":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"durationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}},"messageTemplate":"string","labelFields":[{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}]},"spans":{"luceneQuery":{"value":"string"},"strategy":{"instant":{"timestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"range":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"endTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"duration":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"durationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}},"messageTemplate":"string","labelFields":[{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}]}}}],"off":{},"twoMinutes":{},"fiveMinutes":{}}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/dashboards"


            payload = {
                "requestId": "string",
                "dashboard": {
                    "id": "string",
                    "name": "string",
                    "description": "string",
                    "layout": {"sections": [
                            {
                                "id": {"value": "string"},
                                "rows": [
                                    {
                                        "id": {"value": "string"},
                                        "appearance": {"height": 0},
                                        "widgets": [
                                            {
                                                "id": {"value": "string"},
                                                "title": "string",
                                                "description": "string",
                                                "definition": {
                                                    "lineChart": {
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        },
                                                        "tooltip": {
                                                            "showLabels": True,
                                                            "type": "TOOLTIP_TYPE_UNSPECIFIED"
                                                        },
                                                        "queryDefinitions": [
                                                            {
                                                                "id": "string",
                                                                "query": {
                                                                    "logs": {
                                                                        "groupBy": [],
                                                                        "aggregations": [],
                                                                        "filters": [],
                                                                        "groupBys": []
                                                                    },
                                                                    "metrics": {"filters": []},
                                                                    "spans": {
                                                                        "groupBy": [],
                                                                        "aggregations": [],
                                                                        "filters": []
                                                                    },
                                                                    "dataprime": {"filters": []}
                                                                },
                                                                "seriesNameTemplate": "string",
                                                                "seriesCountLimit": "string",
                                                                "unit": "UNIT_UNSPECIFIED",
                                                                "scaleType": "SCALE_TYPE_UNSPECIFIED",
                                                                "name": "string",
                                                                "isVisible": True,
                                                                "colorScheme": "string",
                                                                "resolution": {
                                                                    "interval": "string",
                                                                    "bucketsPresented": 0
                                                                },
                                                                "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                                "customUnit": "string",
                                                                "decimal": 0
                                                            }
                                                        ],
                                                        "stackedLine": "STACKED_LINE_UNSPECIFIED"
                                                    },
                                                    "dataTable": {
                                                        "query": {
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "grouping": {
                                                                    "groupBy": [None],
                                                                    "aggregations": [None],
                                                                    "groupBys": [None]
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "grouping": {
                                                                    "groupBy": [None],
                                                                    "aggregations": [None]
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED"
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "resultsPerPage": 0,
                                                        "rowStyle": "ROW_STYLE_UNSPECIFIED",
                                                        "columns": [
                                                            {
                                                                "field": "string",
                                                                "width": 0
                                                            }
                                                        ],
                                                        "orderBy": {
                                                            "field": "string",
                                                            "orderDirection": "ORDER_DIRECTION_UNSPECIFIED"
                                                        },
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED"
                                                    },
                                                    "gauge": {
                                                        "query": {
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "aggregation": "AGGREGATION_UNSPECIFIED",
                                                                "filters": [{}],
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED"
                                                            },
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "logsAggregation": {
                                                                    "count": {},
                                                                    "countDistinct": {},
                                                                    "sum": {},
                                                                    "average": {},
                                                                    "min": {},
                                                                    "max": {},
                                                                    "percentile": {}
                                                                },
                                                                "aggregation": "AGGREGATION_UNSPECIFIED",
                                                                "filters": [{}],
                                                                "groupBy": [{"keypath": []}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "spansAggregation": {
                                                                    "metricAggregation": {},
                                                                    "dimensionAggregation": {}
                                                                },
                                                                "aggregation": "AGGREGATION_UNSPECIFIED",
                                                                "filters": [{}],
                                                                "groupBy": [{}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "min": 0.1,
                                                        "max": 0.1,
                                                        "showInnerArc": True,
                                                        "showOuterArc": True,
                                                        "unit": "UNIT_UNSPECIFIED",
                                                        "thresholds": [
                                                            {
                                                                "from": 0.1,
                                                                "color": "string",
                                                                "label": "string"
                                                            }
                                                        ],
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                        "thresholdBy": "THRESHOLD_BY_UNSPECIFIED",
                                                        "customUnit": "string",
                                                        "decimal": 0,
                                                        "thresholdType": "THRESHOLD_TYPE_UNSPECIFIED",
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        },
                                                        "legendBy": "LEGEND_BY_UNSPECIFIED"
                                                    },
                                                    "pieChart": {
                                                        "query": {
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "count": {},
                                                                    "countDistinct": {},
                                                                    "sum": {},
                                                                    "average": {},
                                                                    "min": {},
                                                                    "max": {},
                                                                    "percentile": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "groupNamesFields": [{"keypath": []}],
                                                                "stackedGroupNameField": {
                                                                    "keypath": [None],
                                                                    "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "metricAggregation": {},
                                                                    "dimensionAggregation": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": [{}],
                                                                "stackedGroupName": {
                                                                    "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                                                    "tagField": "string",
                                                                    "processTagField": "string"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED",
                                                                "aggregation": "AGGREGATION_UNSPECIFIED"
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "maxSlicesPerChart": 0,
                                                        "minSlicePercentage": 0,
                                                        "stackDefinition": {
                                                            "maxSlicesPerStack": 0,
                                                            "stackNameTemplate": "string"
                                                        },
                                                        "labelDefinition": {
                                                            "labelSource": "LABEL_SOURCE_UNSPECIFIED",
                                                            "isVisible": True,
                                                            "showName": True,
                                                            "showValue": True,
                                                            "showPercentage": True
                                                        },
                                                        "showLegend": True,
                                                        "groupNameTemplate": "string",
                                                        "unit": "UNIT_UNSPECIFIED",
                                                        "colorScheme": "string",
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                        "customUnit": "string",
                                                        "decimal": 0,
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        }
                                                    },
                                                    "barChart": {
                                                        "query": {
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "count": {},
                                                                    "countDistinct": {},
                                                                    "sum": {},
                                                                    "average": {},
                                                                    "min": {},
                                                                    "max": {},
                                                                    "percentile": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "groupNamesFields": [{"keypath": []}],
                                                                "stackedGroupNameField": {
                                                                    "keypath": [None],
                                                                    "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "metricAggregation": {},
                                                                    "dimensionAggregation": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": [{}],
                                                                "stackedGroupName": {
                                                                    "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                                                    "tagField": "string",
                                                                    "processTagField": "string"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED",
                                                                "aggregation": "AGGREGATION_UNSPECIFIED"
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "maxBarsPerChart": 0,
                                                        "groupNameTemplate": "string",
                                                        "stackDefinition": {
                                                            "maxSlicesPerBar": 0,
                                                            "stackNameTemplate": "string"
                                                        },
                                                        "scaleType": "SCALE_TYPE_UNSPECIFIED",
                                                        "colorsBy": {
                                                            "stack": {},
                                                            "groupBy": {},
                                                            "aggregation": {}
                                                        },
                                                        "xAxis": {
                                                            "value": {},
                                                            "time": {
                                                                "interval": "string",
                                                                "bucketsPresented": 0
                                                            }
                                                        },
                                                        "unit": "UNIT_UNSPECIFIED",
                                                        "sortBy": "SORT_BY_TYPE_UNSPECIFIED",
                                                        "colorScheme": "string",
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                        "barValueDisplay": "BAR_VALUE_DISPLAY_UNSPECIFIED",
                                                        "customUnit": "string",
                                                        "decimal": 0,
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        }
                                                    },
                                                    "horizontalBarChart": {
                                                        "query": {
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "count": {},
                                                                    "countDistinct": {},
                                                                    "sum": {},
                                                                    "average": {},
                                                                    "min": {},
                                                                    "max": {},
                                                                    "percentile": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "groupNamesFields": [{"keypath": []}],
                                                                "stackedGroupNameField": {
                                                                    "keypath": [None],
                                                                    "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "metricAggregation": {},
                                                                    "dimensionAggregation": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": [{}],
                                                                "stackedGroupName": {
                                                                    "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                                                    "tagField": "string",
                                                                    "processTagField": "string"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED",
                                                                "aggregation": "AGGREGATION_UNSPECIFIED"
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "maxBarsPerChart": 0,
                                                        "groupNameTemplate": "string",
                                                        "stackDefinition": {
                                                            "maxSlicesPerBar": 0,
                                                            "stackNameTemplate": "string"
                                                        },
                                                        "scaleType": "SCALE_TYPE_UNSPECIFIED",
                                                        "colorsBy": {
                                                            "stack": {},
                                                            "groupBy": {},
                                                            "aggregation": {}
                                                        },
                                                        "unit": "UNIT_UNSPECIFIED",
                                                        "displayOnBar": True,
                                                        "yAxisViewBy": {
                                                            "category": {},
                                                            "value": {}
                                                        },
                                                        "sortBy": "SORT_BY_TYPE_UNSPECIFIED",
                                                        "colorScheme": "string",
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                        "customUnit": "string",
                                                        "decimal": 0,
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        }
                                                    },
                                                    "markdown": {
                                                        "markdownText": "string",
                                                        "tooltipText": "string"
                                                    },
                                                    "hexagon": {
                                                        "query": {
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "aggregation": "AGGREGATION_UNSPECIFIED",
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED"
                                                            },
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "logsAggregation": {
                                                                    "count": {},
                                                                    "countDistinct": {},
                                                                    "sum": {},
                                                                    "average": {},
                                                                    "min": {},
                                                                    "max": {},
                                                                    "percentile": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupBy": [{"keypath": []}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "spansAggregation": {
                                                                    "metricAggregation": {},
                                                                    "dimensionAggregation": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupBy": [{}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "min": 0.1,
                                                        "max": 0.1,
                                                        "unit": "UNIT_UNSPECIFIED",
                                                        "thresholds": [
                                                            {
                                                                "from": 0.1,
                                                                "color": "string",
                                                                "label": "string"
                                                            }
                                                        ],
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                        "customUnit": "string",
                                                        "decimal": 0,
                                                        "thresholdType": "THRESHOLD_TYPE_UNSPECIFIED",
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        },
                                                        "legendBy": "LEGEND_BY_UNSPECIFIED"
                                                    }
                                                },
                                                "appearance": {"width": 0},
                                                "createdAt": "2019-08-24T14:15:22Z",
                                                "updatedAt": "2019-08-24T14:15:22Z"
                                            }
                                        ]
                                    }
                                ],
                                "options": {
                                    "internal": {},
                                    "custom": {
                                        "name": "string",
                                        "description": "string",
                                        "collapsed": True,
                                        "color": {"predefined": "SECTION_PREDEFINED_COLOR_UNSPECIFIED"}
                                    }
                                }
                            }
                        ]},
                    "variables": [
                        {
                            "name": "string",
                            "definition": {
                                "constant": {"value": "string"},
                                "multiSelect": {
                                    "selected": ["string"],
                                    "source": {
                                        "logsPath": {
                                            "value": "string",
                                            "observationField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }
                                        },
                                        "metricLabel": {
                                            "metricName": "string",
                                            "label": "string"
                                        },
                                        "constantList": {"values": ["string"]},
                                        "spanField": {"value": {
                                                "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                                "tagField": "string",
                                                "processTagField": "string"
                                            }},
                                        "query": {
                                            "query": {
                                                "logsQuery": {"type": {
                                                        "fieldName": {"logRegex": "string"},
                                                        "fieldValue": {"observationField": {
                                                                "keypath": ["string"],
                                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                            }}
                                                    }},
                                                "metricsQuery": {"type": {
                                                        "metricName": {"metricRegex": "string"},
                                                        "labelName": {"metricRegex": "string"},
                                                        "labelValue": {
                                                            "metricName": {
                                                                "stringValue": "string",
                                                                "variableName": "string"
                                                            },
                                                            "labelName": {
                                                                "stringValue": "string",
                                                                "variableName": "string"
                                                            },
                                                            "labelFilters": [
                                                                {
                                                                    "metric": {},
                                                                    "label": {},
                                                                    "operator": {}
                                                                }
                                                            ]
                                                        }
                                                    }},
                                                "spansQuery": {"type": {
                                                        "fieldName": {"spanRegex": "string"},
                                                        "fieldValue": {"value": {
                                                                "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                                                "tagField": "string",
                                                                "processTagField": "string"
                                                            }}
                                                    }}
                                            },
                                            "refreshStrategy": "REFRESH_STRATEGY_UNSPECIFIED",
                                            "valueDisplayOptions": {
                                                "valueRegex": "string",
                                                "labelRegex": "string"
                                            }
                                        }
                                    },
                                    "selection": {
                                        "all": {},
                                        "list": {
                                            "values": ["string"],
                                            "labels": ["string"]
                                        }
                                    },
                                    "valuesOrderDirection": "ORDER_DIRECTION_UNSPECIFIED",
                                    "selectionOptions": {"selectionType": "SELECTION_TYPE_UNSPECIFIED"}
                                }
                            },
                            "displayName": "string",
                            "description": "string",
                            "displayType": "VARIABLE_DISPLAY_TYPE_UNSPECIFIED"
                        }
                    ],
                    "filters": [
                        {
                            "source": {
                                "logs": {
                                    "field": "string",
                                    "operator": {
                                        "equals": {"selection": {
                                                "all": {},
                                                "list": {"values": ["string"]}
                                            }},
                                        "notEquals": {"selection": {"list": {"values": ["string"]}}}
                                    },
                                    "observationField": {
                                        "keypath": ["string"],
                                        "scope": "DATASET_SCOPE_UNSPECIFIED"
                                    }
                                },
                                "spans": {
                                    "field": {
                                        "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                        "tagField": "string",
                                        "processTagField": "string"
                                    },
                                    "operator": {
                                        "equals": {"selection": {
                                                "all": {},
                                                "list": {"values": ["string"]}
                                            }},
                                        "notEquals": {"selection": {"list": {"values": ["string"]}}}
                                    }
                                },
                                "metrics": {
                                    "metric": "string",
                                    "label": "string",
                                    "operator": {
                                        "equals": {"selection": {
                                                "all": {},
                                                "list": {"values": ["string"]}
                                            }},
                                        "notEquals": {"selection": {"list": {"values": ["string"]}}}
                                    }
                                }
                            },
                            "enabled": True,
                            "collapsed": True
                        }
                    ],
                    "absoluteTimeFrame": {
                        "from": "2019-08-24T14:15:22Z",
                        "to": "2019-08-24T14:15:22Z"
                    },
                    "relativeTimeFrame": "string",
                    "folderId": {"value": "string"},
                    "folderPath": {"segments": ["string"]},
                    "annotations": [
                        {
                            "id": "string",
                            "name": "string",
                            "enabled": True,
                            "source": {
                                "metrics": {
                                    "promqlQuery": {"value": "string"},
                                    "strategy": {"startTimeMetric": {}},
                                    "messageTemplate": "string",
                                    "labels": ["string"]
                                },
                                "logs": {
                                    "luceneQuery": {"value": "string"},
                                    "strategy": {
                                        "instant": {"timestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }},
                                        "range": {
                                            "startTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            },
                                            "endTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }
                                        },
                                        "duration": {
                                            "startTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            },
                                            "durationField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }
                                        }
                                    },
                                    "messageTemplate": "string",
                                    "labelFields": [
                                        {
                                            "keypath": ["string"],
                                            "scope": "DATASET_SCOPE_UNSPECIFIED"
                                        }
                                    ]
                                },
                                "spans": {
                                    "luceneQuery": {"value": "string"},
                                    "strategy": {
                                        "instant": {"timestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }},
                                        "range": {
                                            "startTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            },
                                            "endTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }
                                        },
                                        "duration": {
                                            "startTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            },
                                            "durationField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }
                                        }
                                    },
                                    "messageTemplate": "string",
                                    "labelFields": [
                                        {
                                            "keypath": ["string"],
                                            "scope": "DATASET_SCOPE_UNSPECIFIED"
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "off": {},
                    "twoMinutes": {},
                    "fiveMinutes": {}
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/dashboards \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestId":"string","dashboard":{"id":"string","name":"string","description":"string","layout":{"sections":[{"id":{"value":"string"},"rows":[{"id":{"value":"string"},"appearance":{"height":0},"widgets":[{"id":{"value":"string"},"title":"string","description":"string","definition":{"lineChart":{"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"tooltip":{"showLabels":true,"type":"TOOLTIP_TYPE_UNSPECIFIED"},"queryDefinitions":[{"id":"string","query":{"logs":{"groupBy":[],"aggregations":[],"filters":[],"groupBys":[]},"metrics":{"filters":[]},"spans":{"groupBy":[],"aggregations":[],"filters":[]},"dataprime":{"filters":[]}},"seriesNameTemplate":"string","seriesCountLimit":"string","unit":"UNIT_UNSPECIFIED","scaleType":"SCALE_TYPE_UNSPECIFIED","name":"string","isVisible":true,"colorScheme":"string","resolution":{"interval":"string","bucketsPresented":0},"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0}],"stackedLine":"STACKED_LINE_UNSPECIFIED"},"dataTable":{"query":{"logs":{"luceneQuery":{"value":"string"},"filters":[{}],"grouping":{"groupBy":[null],"aggregations":[null],"groupBys":[null]},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"filters":[{}],"grouping":{"groupBy":[null],"aggregations":[null]},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"resultsPerPage":0,"rowStyle":"ROW_STYLE_UNSPECIFIED","columns":[{"field":"string","width":0}],"orderBy":{"field":"string","orderDirection":"ORDER_DIRECTION_UNSPECIFIED"},"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED"},"gauge":{"query":{"metrics":{"promqlQuery":{"value":"string"},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"logs":{"luceneQuery":{"value":"string"},"logsAggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"groupBy":[{"keypath":[]}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"spansAggregation":{"metricAggregation":{},"dimensionAggregation":{}},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"groupBy":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"min":0.1,"max":0.1,"showInnerArc":true,"showOuterArc":true,"unit":"UNIT_UNSPECIFIED","thresholds":[{"from":0.1,"color":"string","label":"string"}],"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","thresholdBy":"THRESHOLD_BY_UNSPECIFIED","customUnit":"string","decimal":0,"thresholdType":"THRESHOLD_TYPE_UNSPECIFIED","legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"legendBy":"LEGEND_BY_UNSPECIFIED"},"pieChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxSlicesPerChart":0,"minSlicePercentage":0,"stackDefinition":{"maxSlicesPerStack":0,"stackNameTemplate":"string"},"labelDefinition":{"labelSource":"LABEL_SOURCE_UNSPECIFIED","isVisible":true,"showName":true,"showValue":true,"showPercentage":true},"showLegend":true,"groupNameTemplate":"string","unit":"UNIT_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"}},"barChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxBarsPerChart":0,"groupNameTemplate":"string","stackDefinition":{"maxSlicesPerBar":0,"stackNameTemplate":"string"},"scaleType":"SCALE_TYPE_UNSPECIFIED","colorsBy":{"stack":{},"groupBy":{},"aggregation":{}},"xAxis":{"value":{},"time":{"interval":"string","bucketsPresented":0}},"unit":"UNIT_UNSPECIFIED","sortBy":"SORT_BY_TYPE_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","barValueDisplay":"BAR_VALUE_DISPLAY_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"}},"horizontalBarChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxBarsPerChart":0,"groupNameTemplate":"string","stackDefinition":{"maxSlicesPerBar":0,"stackNameTemplate":"string"},"scaleType":"SCALE_TYPE_UNSPECIFIED","colorsBy":{"stack":{},"groupBy":{},"aggregation":{}},"unit":"UNIT_UNSPECIFIED","displayOnBar":true,"yAxisViewBy":{"category":{},"value":{}},"sortBy":"SORT_BY_TYPE_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"}},"markdown":{"markdownText":"string","tooltipText":"string"},"hexagon":{"query":{"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"aggregation":"AGGREGATION_UNSPECIFIED","promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"logs":{"luceneQuery":{"value":"string"},"logsAggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupBy":[{"keypath":[]}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"spansAggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupBy":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"min":0.1,"max":0.1,"unit":"UNIT_UNSPECIFIED","thresholds":[{"from":0.1,"color":"string","label":"string"}],"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"thresholdType":"THRESHOLD_TYPE_UNSPECIFIED","legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"legendBy":"LEGEND_BY_UNSPECIFIED"}},"appearance":{"width":0},"createdAt":"2019-08-24T14:15:22Z","updatedAt":"2019-08-24T14:15:22Z"}]}],"options":{"internal":{},"custom":{"name":"string","description":"string","collapsed":true,"color":{"predefined":"SECTION_PREDEFINED_COLOR_UNSPECIFIED"}}}}]},"variables":[{"name":"string","definition":{"constant":{"value":"string"},"multiSelect":{"selected":["string"],"source":{"logsPath":{"value":"string","observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metricLabel":{"metricName":"string","label":"string"},"constantList":{"values":["string"]},"spanField":{"value":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"}},"query":{"query":{"logsQuery":{"type":{"fieldName":{"logRegex":"string"},"fieldValue":{"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}}},"metricsQuery":{"type":{"metricName":{"metricRegex":"string"},"labelName":{"metricRegex":"string"},"labelValue":{"metricName":{"stringValue":"string","variableName":"string"},"labelName":{"stringValue":"string","variableName":"string"},"labelFilters":[{"metric":{},"label":{},"operator":{}}]}}},"spansQuery":{"type":{"fieldName":{"spanRegex":"string"},"fieldValue":{"value":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"}}}}},"refreshStrategy":"REFRESH_STRATEGY_UNSPECIFIED","valueDisplayOptions":{"valueRegex":"string","labelRegex":"string"}}},"selection":{"all":{},"list":{"values":["string"],"labels":["string"]}},"valuesOrderDirection":"ORDER_DIRECTION_UNSPECIFIED","selectionOptions":{"selectionType":"SELECTION_TYPE_UNSPECIFIED"}}},"displayName":"string","description":"string","displayType":"VARIABLE_DISPLAY_TYPE_UNSPECIFIED"}],"filters":[{"source":{"logs":{"field":"string","operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}},"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"spans":{"field":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}}},"metrics":{"metric":"string","label":"string","operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}}}},"enabled":true,"collapsed":true}],"absoluteTimeFrame":{"from":"2019-08-24T14:15:22Z","to":"2019-08-24T14:15:22Z"},"relativeTimeFrame":"string","folderId":{"value":"string"},"folderPath":{"segments":["string"]},"annotations":[{"id":"string","name":"string","enabled":true,"source":{"metrics":{"promqlQuery":{"value":"string"},"strategy":{"startTimeMetric":{}},"messageTemplate":"string","labels":["string"]},"logs":{"luceneQuery":{"value":"string"},"strategy":{"instant":{"timestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"range":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"endTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"duration":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"durationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}},"messageTemplate":"string","labelFields":[{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}]},"spans":{"luceneQuery":{"value":"string"},"strategy":{"instant":{"timestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"range":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"endTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"duration":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"durationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}},"messageTemplate":"string","labelFields":[{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}]}}}],"off":{},"twoMinutes":{},"fiveMinutes":{}}}'
      x-hideTryItPanel: false
      x-showConsole: true
    put:
      operationId: DashboardsService_ReplaceDashboard
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesReplaceDashboardResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicesReplaceDashboardRequest'
        required: true
      tags:
        - DashboardsService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/dashboards';

            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestId":"string","dashboard":{"id":"string","name":"string","description":"string","layout":{"sections":[{"id":{"value":"string"},"rows":[{"id":{"value":"string"},"appearance":{"height":0},"widgets":[{"id":{"value":"string"},"title":"string","description":"string","definition":{"lineChart":{"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"tooltip":{"showLabels":true,"type":"TOOLTIP_TYPE_UNSPECIFIED"},"queryDefinitions":[{"id":"string","query":{"logs":{"groupBy":[],"aggregations":[],"filters":[],"groupBys":[]},"metrics":{"filters":[]},"spans":{"groupBy":[],"aggregations":[],"filters":[]},"dataprime":{"filters":[]}},"seriesNameTemplate":"string","seriesCountLimit":"string","unit":"UNIT_UNSPECIFIED","scaleType":"SCALE_TYPE_UNSPECIFIED","name":"string","isVisible":true,"colorScheme":"string","resolution":{"interval":"string","bucketsPresented":0},"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0}],"stackedLine":"STACKED_LINE_UNSPECIFIED"},"dataTable":{"query":{"logs":{"luceneQuery":{"value":"string"},"filters":[{}],"grouping":{"groupBy":[null],"aggregations":[null],"groupBys":[null]},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"filters":[{}],"grouping":{"groupBy":[null],"aggregations":[null]},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"resultsPerPage":0,"rowStyle":"ROW_STYLE_UNSPECIFIED","columns":[{"field":"string","width":0}],"orderBy":{"field":"string","orderDirection":"ORDER_DIRECTION_UNSPECIFIED"},"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED"},"gauge":{"query":{"metrics":{"promqlQuery":{"value":"string"},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"logs":{"luceneQuery":{"value":"string"},"logsAggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"groupBy":[{"keypath":[]}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"spansAggregation":{"metricAggregation":{},"dimensionAggregation":{}},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"groupBy":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"min":0.1,"max":0.1,"showInnerArc":true,"showOuterArc":true,"unit":"UNIT_UNSPECIFIED","thresholds":[{"from":0.1,"color":"string","label":"string"}],"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","thresholdBy":"THRESHOLD_BY_UNSPECIFIED","customUnit":"string","decimal":0,"thresholdType":"THRESHOLD_TYPE_UNSPECIFIED","legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"legendBy":"LEGEND_BY_UNSPECIFIED"},"pieChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxSlicesPerChart":0,"minSlicePercentage":0,"stackDefinition":{"maxSlicesPerStack":0,"stackNameTemplate":"string"},"labelDefinition":{"labelSource":"LABEL_SOURCE_UNSPECIFIED","isVisible":true,"showName":true,"showValue":true,"showPercentage":true},"showLegend":true,"groupNameTemplate":"string","unit":"UNIT_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"}},"barChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxBarsPerChart":0,"groupNameTemplate":"string","stackDefinition":{"maxSlicesPerBar":0,"stackNameTemplate":"string"},"scaleType":"SCALE_TYPE_UNSPECIFIED","colorsBy":{"stack":{},"groupBy":{},"aggregation":{}},"xAxis":{"value":{},"time":{"interval":"string","bucketsPresented":0}},"unit":"UNIT_UNSPECIFIED","sortBy":"SORT_BY_TYPE_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","barValueDisplay":"BAR_VALUE_DISPLAY_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"}},"horizontalBarChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxBarsPerChart":0,"groupNameTemplate":"string","stackDefinition":{"maxSlicesPerBar":0,"stackNameTemplate":"string"},"scaleType":"SCALE_TYPE_UNSPECIFIED","colorsBy":{"stack":{},"groupBy":{},"aggregation":{}},"unit":"UNIT_UNSPECIFIED","displayOnBar":true,"yAxisViewBy":{"category":{},"value":{}},"sortBy":"SORT_BY_TYPE_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"}},"markdown":{"markdownText":"string","tooltipText":"string"},"hexagon":{"query":{"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"aggregation":"AGGREGATION_UNSPECIFIED","promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"logs":{"luceneQuery":{"value":"string"},"logsAggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupBy":[{"keypath":[]}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"spansAggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupBy":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"min":0.1,"max":0.1,"unit":"UNIT_UNSPECIFIED","thresholds":[{"from":0.1,"color":"string","label":"string"}],"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"thresholdType":"THRESHOLD_TYPE_UNSPECIFIED","legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"legendBy":"LEGEND_BY_UNSPECIFIED"}},"appearance":{"width":0},"createdAt":"2019-08-24T14:15:22Z","updatedAt":"2019-08-24T14:15:22Z"}]}],"options":{"internal":{},"custom":{"name":"string","description":"string","collapsed":true,"color":{"predefined":"SECTION_PREDEFINED_COLOR_UNSPECIFIED"}}}}]},"variables":[{"name":"string","definition":{"constant":{"value":"string"},"multiSelect":{"selected":["string"],"source":{"logsPath":{"value":"string","observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metricLabel":{"metricName":"string","label":"string"},"constantList":{"values":["string"]},"spanField":{"value":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"}},"query":{"query":{"logsQuery":{"type":{"fieldName":{"logRegex":"string"},"fieldValue":{"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}}},"metricsQuery":{"type":{"metricName":{"metricRegex":"string"},"labelName":{"metricRegex":"string"},"labelValue":{"metricName":{"stringValue":"string","variableName":"string"},"labelName":{"stringValue":"string","variableName":"string"},"labelFilters":[{"metric":{},"label":{},"operator":{}}]}}},"spansQuery":{"type":{"fieldName":{"spanRegex":"string"},"fieldValue":{"value":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"}}}}},"refreshStrategy":"REFRESH_STRATEGY_UNSPECIFIED","valueDisplayOptions":{"valueRegex":"string","labelRegex":"string"}}},"selection":{"all":{},"list":{"values":["string"],"labels":["string"]}},"valuesOrderDirection":"ORDER_DIRECTION_UNSPECIFIED","selectionOptions":{"selectionType":"SELECTION_TYPE_UNSPECIFIED"}}},"displayName":"string","description":"string","displayType":"VARIABLE_DISPLAY_TYPE_UNSPECIFIED"}],"filters":[{"source":{"logs":{"field":"string","operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}},"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"spans":{"field":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}}},"metrics":{"metric":"string","label":"string","operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}}}},"enabled":true,"collapsed":true}],"absoluteTimeFrame":{"from":"2019-08-24T14:15:22Z","to":"2019-08-24T14:15:22Z"},"relativeTimeFrame":"string","folderId":{"value":"string"},"folderPath":{"segments":["string"]},"annotations":[{"id":"string","name":"string","enabled":true,"source":{"metrics":{"promqlQuery":{"value":"string"},"strategy":{"startTimeMetric":{}},"messageTemplate":"string","labels":["string"]},"logs":{"luceneQuery":{"value":"string"},"strategy":{"instant":{"timestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"range":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"endTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"duration":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"durationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}},"messageTemplate":"string","labelFields":[{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}]},"spans":{"luceneQuery":{"value":"string"},"strategy":{"instant":{"timestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"range":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"endTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"duration":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"durationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}},"messageTemplate":"string","labelFields":[{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}]}}}],"off":{},"twoMinutes":{},"fiveMinutes":{}}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/dashboards"


            payload = {
                "requestId": "string",
                "dashboard": {
                    "id": "string",
                    "name": "string",
                    "description": "string",
                    "layout": {"sections": [
                            {
                                "id": {"value": "string"},
                                "rows": [
                                    {
                                        "id": {"value": "string"},
                                        "appearance": {"height": 0},
                                        "widgets": [
                                            {
                                                "id": {"value": "string"},
                                                "title": "string",
                                                "description": "string",
                                                "definition": {
                                                    "lineChart": {
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        },
                                                        "tooltip": {
                                                            "showLabels": True,
                                                            "type": "TOOLTIP_TYPE_UNSPECIFIED"
                                                        },
                                                        "queryDefinitions": [
                                                            {
                                                                "id": "string",
                                                                "query": {
                                                                    "logs": {
                                                                        "groupBy": [],
                                                                        "aggregations": [],
                                                                        "filters": [],
                                                                        "groupBys": []
                                                                    },
                                                                    "metrics": {"filters": []},
                                                                    "spans": {
                                                                        "groupBy": [],
                                                                        "aggregations": [],
                                                                        "filters": []
                                                                    },
                                                                    "dataprime": {"filters": []}
                                                                },
                                                                "seriesNameTemplate": "string",
                                                                "seriesCountLimit": "string",
                                                                "unit": "UNIT_UNSPECIFIED",
                                                                "scaleType": "SCALE_TYPE_UNSPECIFIED",
                                                                "name": "string",
                                                                "isVisible": True,
                                                                "colorScheme": "string",
                                                                "resolution": {
                                                                    "interval": "string",
                                                                    "bucketsPresented": 0
                                                                },
                                                                "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                                "customUnit": "string",
                                                                "decimal": 0
                                                            }
                                                        ],
                                                        "stackedLine": "STACKED_LINE_UNSPECIFIED"
                                                    },
                                                    "dataTable": {
                                                        "query": {
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "grouping": {
                                                                    "groupBy": [None],
                                                                    "aggregations": [None],
                                                                    "groupBys": [None]
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "grouping": {
                                                                    "groupBy": [None],
                                                                    "aggregations": [None]
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED"
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "resultsPerPage": 0,
                                                        "rowStyle": "ROW_STYLE_UNSPECIFIED",
                                                        "columns": [
                                                            {
                                                                "field": "string",
                                                                "width": 0
                                                            }
                                                        ],
                                                        "orderBy": {
                                                            "field": "string",
                                                            "orderDirection": "ORDER_DIRECTION_UNSPECIFIED"
                                                        },
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED"
                                                    },
                                                    "gauge": {
                                                        "query": {
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "aggregation": "AGGREGATION_UNSPECIFIED",
                                                                "filters": [{}],
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED"
                                                            },
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "logsAggregation": {
                                                                    "count": {},
                                                                    "countDistinct": {},
                                                                    "sum": {},
                                                                    "average": {},
                                                                    "min": {},
                                                                    "max": {},
                                                                    "percentile": {}
                                                                },
                                                                "aggregation": "AGGREGATION_UNSPECIFIED",
                                                                "filters": [{}],
                                                                "groupBy": [{"keypath": []}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "spansAggregation": {
                                                                    "metricAggregation": {},
                                                                    "dimensionAggregation": {}
                                                                },
                                                                "aggregation": "AGGREGATION_UNSPECIFIED",
                                                                "filters": [{}],
                                                                "groupBy": [{}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "min": 0.1,
                                                        "max": 0.1,
                                                        "showInnerArc": True,
                                                        "showOuterArc": True,
                                                        "unit": "UNIT_UNSPECIFIED",
                                                        "thresholds": [
                                                            {
                                                                "from": 0.1,
                                                                "color": "string",
                                                                "label": "string"
                                                            }
                                                        ],
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                        "thresholdBy": "THRESHOLD_BY_UNSPECIFIED",
                                                        "customUnit": "string",
                                                        "decimal": 0,
                                                        "thresholdType": "THRESHOLD_TYPE_UNSPECIFIED",
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        },
                                                        "legendBy": "LEGEND_BY_UNSPECIFIED"
                                                    },
                                                    "pieChart": {
                                                        "query": {
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "count": {},
                                                                    "countDistinct": {},
                                                                    "sum": {},
                                                                    "average": {},
                                                                    "min": {},
                                                                    "max": {},
                                                                    "percentile": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "groupNamesFields": [{"keypath": []}],
                                                                "stackedGroupNameField": {
                                                                    "keypath": [None],
                                                                    "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "metricAggregation": {},
                                                                    "dimensionAggregation": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": [{}],
                                                                "stackedGroupName": {
                                                                    "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                                                    "tagField": "string",
                                                                    "processTagField": "string"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED",
                                                                "aggregation": "AGGREGATION_UNSPECIFIED"
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "maxSlicesPerChart": 0,
                                                        "minSlicePercentage": 0,
                                                        "stackDefinition": {
                                                            "maxSlicesPerStack": 0,
                                                            "stackNameTemplate": "string"
                                                        },
                                                        "labelDefinition": {
                                                            "labelSource": "LABEL_SOURCE_UNSPECIFIED",
                                                            "isVisible": True,
                                                            "showName": True,
                                                            "showValue": True,
                                                            "showPercentage": True
                                                        },
                                                        "showLegend": True,
                                                        "groupNameTemplate": "string",
                                                        "unit": "UNIT_UNSPECIFIED",
                                                        "colorScheme": "string",
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                        "customUnit": "string",
                                                        "decimal": 0,
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        }
                                                    },
                                                    "barChart": {
                                                        "query": {
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "count": {},
                                                                    "countDistinct": {},
                                                                    "sum": {},
                                                                    "average": {},
                                                                    "min": {},
                                                                    "max": {},
                                                                    "percentile": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "groupNamesFields": [{"keypath": []}],
                                                                "stackedGroupNameField": {
                                                                    "keypath": [None],
                                                                    "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "metricAggregation": {},
                                                                    "dimensionAggregation": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": [{}],
                                                                "stackedGroupName": {
                                                                    "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                                                    "tagField": "string",
                                                                    "processTagField": "string"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED",
                                                                "aggregation": "AGGREGATION_UNSPECIFIED"
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "maxBarsPerChart": 0,
                                                        "groupNameTemplate": "string",
                                                        "stackDefinition": {
                                                            "maxSlicesPerBar": 0,
                                                            "stackNameTemplate": "string"
                                                        },
                                                        "scaleType": "SCALE_TYPE_UNSPECIFIED",
                                                        "colorsBy": {
                                                            "stack": {},
                                                            "groupBy": {},
                                                            "aggregation": {}
                                                        },
                                                        "xAxis": {
                                                            "value": {},
                                                            "time": {
                                                                "interval": "string",
                                                                "bucketsPresented": 0
                                                            }
                                                        },
                                                        "unit": "UNIT_UNSPECIFIED",
                                                        "sortBy": "SORT_BY_TYPE_UNSPECIFIED",
                                                        "colorScheme": "string",
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                        "barValueDisplay": "BAR_VALUE_DISPLAY_UNSPECIFIED",
                                                        "customUnit": "string",
                                                        "decimal": 0,
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        }
                                                    },
                                                    "horizontalBarChart": {
                                                        "query": {
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "count": {},
                                                                    "countDistinct": {},
                                                                    "sum": {},
                                                                    "average": {},
                                                                    "min": {},
                                                                    "max": {},
                                                                    "percentile": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "groupNamesFields": [{"keypath": []}],
                                                                "stackedGroupNameField": {
                                                                    "keypath": [None],
                                                                    "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "metricAggregation": {},
                                                                    "dimensionAggregation": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": [{}],
                                                                "stackedGroupName": {
                                                                    "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                                                    "tagField": "string",
                                                                    "processTagField": "string"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED",
                                                                "aggregation": "AGGREGATION_UNSPECIFIED"
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "maxBarsPerChart": 0,
                                                        "groupNameTemplate": "string",
                                                        "stackDefinition": {
                                                            "maxSlicesPerBar": 0,
                                                            "stackNameTemplate": "string"
                                                        },
                                                        "scaleType": "SCALE_TYPE_UNSPECIFIED",
                                                        "colorsBy": {
                                                            "stack": {},
                                                            "groupBy": {},
                                                            "aggregation": {}
                                                        },
                                                        "unit": "UNIT_UNSPECIFIED",
                                                        "displayOnBar": True,
                                                        "yAxisViewBy": {
                                                            "category": {},
                                                            "value": {}
                                                        },
                                                        "sortBy": "SORT_BY_TYPE_UNSPECIFIED",
                                                        "colorScheme": "string",
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                        "customUnit": "string",
                                                        "decimal": 0,
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        }
                                                    },
                                                    "markdown": {
                                                        "markdownText": "string",
                                                        "tooltipText": "string"
                                                    },
                                                    "hexagon": {
                                                        "query": {
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "aggregation": "AGGREGATION_UNSPECIFIED",
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED"
                                                            },
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "logsAggregation": {
                                                                    "count": {},
                                                                    "countDistinct": {},
                                                                    "sum": {},
                                                                    "average": {},
                                                                    "min": {},
                                                                    "max": {},
                                                                    "percentile": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupBy": [{"keypath": []}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "spansAggregation": {
                                                                    "metricAggregation": {},
                                                                    "dimensionAggregation": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupBy": [{}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "min": 0.1,
                                                        "max": 0.1,
                                                        "unit": "UNIT_UNSPECIFIED",
                                                        "thresholds": [
                                                            {
                                                                "from": 0.1,
                                                                "color": "string",
                                                                "label": "string"
                                                            }
                                                        ],
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                        "customUnit": "string",
                                                        "decimal": 0,
                                                        "thresholdType": "THRESHOLD_TYPE_UNSPECIFIED",
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        },
                                                        "legendBy": "LEGEND_BY_UNSPECIFIED"
                                                    }
                                                },
                                                "appearance": {"width": 0},
                                                "createdAt": "2019-08-24T14:15:22Z",
                                                "updatedAt": "2019-08-24T14:15:22Z"
                                            }
                                        ]
                                    }
                                ],
                                "options": {
                                    "internal": {},
                                    "custom": {
                                        "name": "string",
                                        "description": "string",
                                        "collapsed": True,
                                        "color": {"predefined": "SECTION_PREDEFINED_COLOR_UNSPECIFIED"}
                                    }
                                }
                            }
                        ]},
                    "variables": [
                        {
                            "name": "string",
                            "definition": {
                                "constant": {"value": "string"},
                                "multiSelect": {
                                    "selected": ["string"],
                                    "source": {
                                        "logsPath": {
                                            "value": "string",
                                            "observationField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }
                                        },
                                        "metricLabel": {
                                            "metricName": "string",
                                            "label": "string"
                                        },
                                        "constantList": {"values": ["string"]},
                                        "spanField": {"value": {
                                                "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                                "tagField": "string",
                                                "processTagField": "string"
                                            }},
                                        "query": {
                                            "query": {
                                                "logsQuery": {"type": {
                                                        "fieldName": {"logRegex": "string"},
                                                        "fieldValue": {"observationField": {
                                                                "keypath": ["string"],
                                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                            }}
                                                    }},
                                                "metricsQuery": {"type": {
                                                        "metricName": {"metricRegex": "string"},
                                                        "labelName": {"metricRegex": "string"},
                                                        "labelValue": {
                                                            "metricName": {
                                                                "stringValue": "string",
                                                                "variableName": "string"
                                                            },
                                                            "labelName": {
                                                                "stringValue": "string",
                                                                "variableName": "string"
                                                            },
                                                            "labelFilters": [
                                                                {
                                                                    "metric": {},
                                                                    "label": {},
                                                                    "operator": {}
                                                                }
                                                            ]
                                                        }
                                                    }},
                                                "spansQuery": {"type": {
                                                        "fieldName": {"spanRegex": "string"},
                                                        "fieldValue": {"value": {
                                                                "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                                                "tagField": "string",
                                                                "processTagField": "string"
                                                            }}
                                                    }}
                                            },
                                            "refreshStrategy": "REFRESH_STRATEGY_UNSPECIFIED",
                                            "valueDisplayOptions": {
                                                "valueRegex": "string",
                                                "labelRegex": "string"
                                            }
                                        }
                                    },
                                    "selection": {
                                        "all": {},
                                        "list": {
                                            "values": ["string"],
                                            "labels": ["string"]
                                        }
                                    },
                                    "valuesOrderDirection": "ORDER_DIRECTION_UNSPECIFIED",
                                    "selectionOptions": {"selectionType": "SELECTION_TYPE_UNSPECIFIED"}
                                }
                            },
                            "displayName": "string",
                            "description": "string",
                            "displayType": "VARIABLE_DISPLAY_TYPE_UNSPECIFIED"
                        }
                    ],
                    "filters": [
                        {
                            "source": {
                                "logs": {
                                    "field": "string",
                                    "operator": {
                                        "equals": {"selection": {
                                                "all": {},
                                                "list": {"values": ["string"]}
                                            }},
                                        "notEquals": {"selection": {"list": {"values": ["string"]}}}
                                    },
                                    "observationField": {
                                        "keypath": ["string"],
                                        "scope": "DATASET_SCOPE_UNSPECIFIED"
                                    }
                                },
                                "spans": {
                                    "field": {
                                        "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                        "tagField": "string",
                                        "processTagField": "string"
                                    },
                                    "operator": {
                                        "equals": {"selection": {
                                                "all": {},
                                                "list": {"values": ["string"]}
                                            }},
                                        "notEquals": {"selection": {"list": {"values": ["string"]}}}
                                    }
                                },
                                "metrics": {
                                    "metric": "string",
                                    "label": "string",
                                    "operator": {
                                        "equals": {"selection": {
                                                "all": {},
                                                "list": {"values": ["string"]}
                                            }},
                                        "notEquals": {"selection": {"list": {"values": ["string"]}}}
                                    }
                                }
                            },
                            "enabled": True,
                            "collapsed": True
                        }
                    ],
                    "absoluteTimeFrame": {
                        "from": "2019-08-24T14:15:22Z",
                        "to": "2019-08-24T14:15:22Z"
                    },
                    "relativeTimeFrame": "string",
                    "folderId": {"value": "string"},
                    "folderPath": {"segments": ["string"]},
                    "annotations": [
                        {
                            "id": "string",
                            "name": "string",
                            "enabled": True,
                            "source": {
                                "metrics": {
                                    "promqlQuery": {"value": "string"},
                                    "strategy": {"startTimeMetric": {}},
                                    "messageTemplate": "string",
                                    "labels": ["string"]
                                },
                                "logs": {
                                    "luceneQuery": {"value": "string"},
                                    "strategy": {
                                        "instant": {"timestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }},
                                        "range": {
                                            "startTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            },
                                            "endTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }
                                        },
                                        "duration": {
                                            "startTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            },
                                            "durationField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }
                                        }
                                    },
                                    "messageTemplate": "string",
                                    "labelFields": [
                                        {
                                            "keypath": ["string"],
                                            "scope": "DATASET_SCOPE_UNSPECIFIED"
                                        }
                                    ]
                                },
                                "spans": {
                                    "luceneQuery": {"value": "string"},
                                    "strategy": {
                                        "instant": {"timestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }},
                                        "range": {
                                            "startTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            },
                                            "endTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }
                                        },
                                        "duration": {
                                            "startTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            },
                                            "durationField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }
                                        }
                                    },
                                    "messageTemplate": "string",
                                    "labelFields": [
                                        {
                                            "keypath": ["string"],
                                            "scope": "DATASET_SCOPE_UNSPECIFIED"
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "off": {},
                    "twoMinutes": {},
                    "fiveMinutes": {}
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/dashboards \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestId":"string","dashboard":{"id":"string","name":"string","description":"string","layout":{"sections":[{"id":{"value":"string"},"rows":[{"id":{"value":"string"},"appearance":{"height":0},"widgets":[{"id":{"value":"string"},"title":"string","description":"string","definition":{"lineChart":{"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"tooltip":{"showLabels":true,"type":"TOOLTIP_TYPE_UNSPECIFIED"},"queryDefinitions":[{"id":"string","query":{"logs":{"groupBy":[],"aggregations":[],"filters":[],"groupBys":[]},"metrics":{"filters":[]},"spans":{"groupBy":[],"aggregations":[],"filters":[]},"dataprime":{"filters":[]}},"seriesNameTemplate":"string","seriesCountLimit":"string","unit":"UNIT_UNSPECIFIED","scaleType":"SCALE_TYPE_UNSPECIFIED","name":"string","isVisible":true,"colorScheme":"string","resolution":{"interval":"string","bucketsPresented":0},"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0}],"stackedLine":"STACKED_LINE_UNSPECIFIED"},"dataTable":{"query":{"logs":{"luceneQuery":{"value":"string"},"filters":[{}],"grouping":{"groupBy":[null],"aggregations":[null],"groupBys":[null]},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"filters":[{}],"grouping":{"groupBy":[null],"aggregations":[null]},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"resultsPerPage":0,"rowStyle":"ROW_STYLE_UNSPECIFIED","columns":[{"field":"string","width":0}],"orderBy":{"field":"string","orderDirection":"ORDER_DIRECTION_UNSPECIFIED"},"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED"},"gauge":{"query":{"metrics":{"promqlQuery":{"value":"string"},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"logs":{"luceneQuery":{"value":"string"},"logsAggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"groupBy":[{"keypath":[]}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"spansAggregation":{"metricAggregation":{},"dimensionAggregation":{}},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"groupBy":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"min":0.1,"max":0.1,"showInnerArc":true,"showOuterArc":true,"unit":"UNIT_UNSPECIFIED","thresholds":[{"from":0.1,"color":"string","label":"string"}],"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","thresholdBy":"THRESHOLD_BY_UNSPECIFIED","customUnit":"string","decimal":0,"thresholdType":"THRESHOLD_TYPE_UNSPECIFIED","legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"legendBy":"LEGEND_BY_UNSPECIFIED"},"pieChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxSlicesPerChart":0,"minSlicePercentage":0,"stackDefinition":{"maxSlicesPerStack":0,"stackNameTemplate":"string"},"labelDefinition":{"labelSource":"LABEL_SOURCE_UNSPECIFIED","isVisible":true,"showName":true,"showValue":true,"showPercentage":true},"showLegend":true,"groupNameTemplate":"string","unit":"UNIT_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"}},"barChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxBarsPerChart":0,"groupNameTemplate":"string","stackDefinition":{"maxSlicesPerBar":0,"stackNameTemplate":"string"},"scaleType":"SCALE_TYPE_UNSPECIFIED","colorsBy":{"stack":{},"groupBy":{},"aggregation":{}},"xAxis":{"value":{},"time":{"interval":"string","bucketsPresented":0}},"unit":"UNIT_UNSPECIFIED","sortBy":"SORT_BY_TYPE_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","barValueDisplay":"BAR_VALUE_DISPLAY_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"}},"horizontalBarChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxBarsPerChart":0,"groupNameTemplate":"string","stackDefinition":{"maxSlicesPerBar":0,"stackNameTemplate":"string"},"scaleType":"SCALE_TYPE_UNSPECIFIED","colorsBy":{"stack":{},"groupBy":{},"aggregation":{}},"unit":"UNIT_UNSPECIFIED","displayOnBar":true,"yAxisViewBy":{"category":{},"value":{}},"sortBy":"SORT_BY_TYPE_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"}},"markdown":{"markdownText":"string","tooltipText":"string"},"hexagon":{"query":{"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"aggregation":"AGGREGATION_UNSPECIFIED","promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"logs":{"luceneQuery":{"value":"string"},"logsAggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupBy":[{"keypath":[]}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"spansAggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupBy":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"min":0.1,"max":0.1,"unit":"UNIT_UNSPECIFIED","thresholds":[{"from":0.1,"color":"string","label":"string"}],"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"thresholdType":"THRESHOLD_TYPE_UNSPECIFIED","legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"legendBy":"LEGEND_BY_UNSPECIFIED"}},"appearance":{"width":0},"createdAt":"2019-08-24T14:15:22Z","updatedAt":"2019-08-24T14:15:22Z"}]}],"options":{"internal":{},"custom":{"name":"string","description":"string","collapsed":true,"color":{"predefined":"SECTION_PREDEFINED_COLOR_UNSPECIFIED"}}}}]},"variables":[{"name":"string","definition":{"constant":{"value":"string"},"multiSelect":{"selected":["string"],"source":{"logsPath":{"value":"string","observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metricLabel":{"metricName":"string","label":"string"},"constantList":{"values":["string"]},"spanField":{"value":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"}},"query":{"query":{"logsQuery":{"type":{"fieldName":{"logRegex":"string"},"fieldValue":{"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}}},"metricsQuery":{"type":{"metricName":{"metricRegex":"string"},"labelName":{"metricRegex":"string"},"labelValue":{"metricName":{"stringValue":"string","variableName":"string"},"labelName":{"stringValue":"string","variableName":"string"},"labelFilters":[{"metric":{},"label":{},"operator":{}}]}}},"spansQuery":{"type":{"fieldName":{"spanRegex":"string"},"fieldValue":{"value":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"}}}}},"refreshStrategy":"REFRESH_STRATEGY_UNSPECIFIED","valueDisplayOptions":{"valueRegex":"string","labelRegex":"string"}}},"selection":{"all":{},"list":{"values":["string"],"labels":["string"]}},"valuesOrderDirection":"ORDER_DIRECTION_UNSPECIFIED","selectionOptions":{"selectionType":"SELECTION_TYPE_UNSPECIFIED"}}},"displayName":"string","description":"string","displayType":"VARIABLE_DISPLAY_TYPE_UNSPECIFIED"}],"filters":[{"source":{"logs":{"field":"string","operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}},"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"spans":{"field":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}}},"metrics":{"metric":"string","label":"string","operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}}}},"enabled":true,"collapsed":true}],"absoluteTimeFrame":{"from":"2019-08-24T14:15:22Z","to":"2019-08-24T14:15:22Z"},"relativeTimeFrame":"string","folderId":{"value":"string"},"folderPath":{"segments":["string"]},"annotations":[{"id":"string","name":"string","enabled":true,"source":{"metrics":{"promqlQuery":{"value":"string"},"strategy":{"startTimeMetric":{}},"messageTemplate":"string","labels":["string"]},"logs":{"luceneQuery":{"value":"string"},"strategy":{"instant":{"timestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"range":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"endTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"duration":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"durationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}},"messageTemplate":"string","labelFields":[{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}]},"spans":{"luceneQuery":{"value":"string"},"strategy":{"instant":{"timestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"range":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"endTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"duration":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"durationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}},"messageTemplate":"string","labelFields":[{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}]}}}],"off":{},"twoMinutes":{},"fiveMinutes":{}}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/archive-logs/event-groups:
    get:
      operationId: ArchiveLogsDataSourceService_SearchArchiveLogsEventGroups
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/servicesSearchArchiveLogsEventGroupsResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: widgetId
          in: query
          required: false
          schema:
            type: string
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: requestParamsHash
          in: query
          required: false
          schema:
            type: string
        - name: query.data
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: queryRaw.text
          in: query
          required: false
          schema:
            type: string
        - name: groupByKeys
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregationKeys
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: pagination.offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: pagination.limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - ArchiveLogsDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/archive-logs/event-groups?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE&groupByKeys=SOME_ARRAY_VALUE&aggregationKeys=SOME_ARRAY_VALUE&pagination.offset=SOME_INTEGER_VALUE&pagination.limit=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/archive-logs/event-groups"


            querystring =
            {"widgetId":"SOME_STRING_VALUE","timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","requestParamsHash":"SOME_STRING_VALUE","query.data":"SOME_STRING_VALUE","queryRaw.text":"SOME_STRING_VALUE","groupByKeys":"SOME_ARRAY_VALUE","aggregationKeys":"SOME_ARRAY_VALUE","pagination.offset":"SOME_INTEGER_VALUE","pagination.limit":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/archive-logs/event-groups?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE&groupByKeys=SOME_ARRAY_VALUE&aggregationKeys=SOME_ARRAY_VALUE&pagination.offset=SOME_INTEGER_VALUE&pagination.limit=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/archive-logs/events:
    get:
      operationId: ArchiveLogsDataSourceService_SearchArchiveLogsEvents
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesSearchArchiveLogsEventsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: widgetId
          in: query
          required: false
          schema:
            type: string
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: pagination.offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: pagination.limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: requestParamsHash
          in: query
          required: false
          schema:
            type: string
        - name: query.data
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: queryRaw.text
          in: query
          required: false
          schema:
            type: string
      tags:
        - ArchiveLogsDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/archive-logs/events?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&pagination.offset=SOME_INTEGER_VALUE&pagination.limit=SOME_INTEGER_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/archive-logs/events"


            querystring =
            {"widgetId":"SOME_STRING_VALUE","timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","pagination.offset":"SOME_INTEGER_VALUE","pagination.limit":"SOME_INTEGER_VALUE","requestParamsHash":"SOME_STRING_VALUE","query.data":"SOME_STRING_VALUE","queryRaw.text":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/archive-logs/events?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&pagination.offset=SOME_INTEGER_VALUE&pagination.limit=SOME_INTEGER_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/archive-logs/events/count:
    get:
      operationId: ArchiveLogsDataSourceService_SearchArchiveLogsEventsCount
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/servicesSearchArchiveLogsEventsCountResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: widgetId
          in: query
          required: false
          schema:
            type: string
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: requestParamsHash
          in: query
          required: false
          schema:
            type: string
        - name: query.data
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: queryRaw.text
          in: query
          required: false
          schema:
            type: string
      tags:
        - ArchiveLogsDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/archive-logs/events/count?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/archive-logs/events/count"


            querystring =
            {"widgetId":"SOME_STRING_VALUE","timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","requestParamsHash":"SOME_STRING_VALUE","query.data":"SOME_STRING_VALUE","queryRaw.text":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/archive-logs/events/count?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/archive-logs/grouped-series:
    get:
      operationId: ArchiveLogsDataSourceService_SearchArchiveGroupedLogsSeries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/servicesSearchArchiveGroupedLogsSeriesResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: widgetId
          in: query
          required: false
          schema:
            type: string
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: requestParamsHash
          in: query
          required: false
          schema:
            type: string
        - name: query.data
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: queryRaw.text
          in: query
          required: false
          schema:
            type: string
        - name: groupByKeys
          description: Have to be ordered for correctly structured results.
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregationKey
          in: query
          required: false
          schema:
            type: string
      tags:
        - ArchiveLogsDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/archive-logs/grouped-series?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE&groupByKeys=SOME_ARRAY_VALUE&aggregationKey=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/archive-logs/grouped-series"


            querystring =
            {"widgetId":"SOME_STRING_VALUE","timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","requestParamsHash":"SOME_STRING_VALUE","query.data":"SOME_STRING_VALUE","queryRaw.text":"SOME_STRING_VALUE","groupByKeys":"SOME_ARRAY_VALUE","aggregationKey":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/archive-logs/grouped-series?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE&groupByKeys=SOME_ARRAY_VALUE&aggregationKey=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/archive-logs/grouped-time-series:
    get:
      operationId: ArchiveLogsDataSourceService_SearchArchiveGroupedLogsTimeSeries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/servicesSearchArchiveGroupedLogsTimeSeriesResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: widgetId
          in: query
          required: false
          schema:
            type: string
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: requestParamsHash
          in: query
          required: false
          schema:
            type: string
        - name: query.data
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: queryRaw.text
          in: query
          required: false
          schema:
            type: string
        - name: groupByKeys
          description: Expects up to 1 element for now, without `timestamp`.
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregationKey
          in: query
          required: false
          schema:
            type: string
      tags:
        - ArchiveLogsDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/archive-logs/grouped-time-series?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE&groupByKeys=SOME_ARRAY_VALUE&aggregationKey=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/archive-logs/grouped-time-series"


            querystring =
            {"widgetId":"SOME_STRING_VALUE","timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","requestParamsHash":"SOME_STRING_VALUE","query.data":"SOME_STRING_VALUE","queryRaw.text":"SOME_STRING_VALUE","groupByKeys":"SOME_ARRAY_VALUE","aggregationKey":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/archive-logs/grouped-time-series?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE&groupByKeys=SOME_ARRAY_VALUE&aggregationKey=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/archive-logs/grouped-values:
    get:
      operationId: ArchiveLogsDataSourceService_SearchArchiveLogsGroupedValues
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/servicesSearchArchiveLogsGroupedValuesResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: widgetId
          in: query
          required: false
          schema:
            type: string
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: requestParamsHash
          in: query
          required: false
          schema:
            type: string
        - name: query.data
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: queryRaw.text
          in: query
          required: false
          schema:
            type: string
        - name: groupByKeys
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregationKey
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - ArchiveLogsDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/archive-logs/grouped-values?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE&groupByKeys=SOME_ARRAY_VALUE&aggregationKey=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/archive-logs/grouped-values"


            querystring =
            {"widgetId":"SOME_STRING_VALUE","timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","requestParamsHash":"SOME_STRING_VALUE","query.data":"SOME_STRING_VALUE","queryRaw.text":"SOME_STRING_VALUE","groupByKeys":"SOME_ARRAY_VALUE","aggregationKey":"SOME_STRING_VALUE","limit":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/archive-logs/grouped-values?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE&groupByKeys=SOME_ARRAY_VALUE&aggregationKey=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/archive-logs/time-series:
    get:
      operationId: ArchiveLogsDataSourceService_SearchArchiveLogsTimeSeries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/servicesSearchArchiveLogsTimeSeriesResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: widgetId
          in: query
          required: false
          schema:
            type: string
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: requestParamsHash
          in: query
          required: false
          schema:
            type: string
        - name: query.data
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: queryRaw.text
          in: query
          required: false
          schema:
            type: string
        - name: aggregationKeys
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - ArchiveLogsDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/archive-logs/time-series?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE&aggregationKeys=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/archive-logs/time-series"


            querystring =
            {"widgetId":"SOME_STRING_VALUE","timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","limit":"SOME_INTEGER_VALUE","requestParamsHash":"SOME_STRING_VALUE","query.data":"SOME_STRING_VALUE","queryRaw.text":"SOME_STRING_VALUE","aggregationKeys":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/archive-logs/time-series?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE&aggregationKeys=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/archive-spans/event-groups:
    get:
      operationId: ArchiveSpansDataSourceService_SearchArchiveSpansEventGroups
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/servicesSearchArchiveSpansEventGroupsResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: widgetId
          in: query
          required: false
          schema:
            type: string
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: requestParamsHash
          in: query
          required: false
          schema:
            type: string
        - name: query.data
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: queryRaw.text
          in: query
          required: false
          schema:
            type: string
        - name: groupByKeys
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregationKeys
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: pagination.offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: pagination.limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - ArchiveSpansDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/archive-spans/event-groups?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE&groupByKeys=SOME_ARRAY_VALUE&aggregationKeys=SOME_ARRAY_VALUE&pagination.offset=SOME_INTEGER_VALUE&pagination.limit=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/archive-spans/event-groups"


            querystring =
            {"widgetId":"SOME_STRING_VALUE","timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","requestParamsHash":"SOME_STRING_VALUE","query.data":"SOME_STRING_VALUE","queryRaw.text":"SOME_STRING_VALUE","groupByKeys":"SOME_ARRAY_VALUE","aggregationKeys":"SOME_ARRAY_VALUE","pagination.offset":"SOME_INTEGER_VALUE","pagination.limit":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/archive-spans/event-groups?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE&groupByKeys=SOME_ARRAY_VALUE&aggregationKeys=SOME_ARRAY_VALUE&pagination.offset=SOME_INTEGER_VALUE&pagination.limit=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/archive-spans/events:
    get:
      operationId: ArchiveSpansDataSourceService_SearchArchiveSpansEvents
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesSearchArchiveSpansEventsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: widgetId
          in: query
          required: false
          schema:
            type: string
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: pagination.offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: pagination.limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: requestParamsHash
          in: query
          required: false
          schema:
            type: string
        - name: query.data
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: queryRaw.text
          in: query
          required: false
          schema:
            type: string
      tags:
        - ArchiveSpansDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/archive-spans/events?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&pagination.offset=SOME_INTEGER_VALUE&pagination.limit=SOME_INTEGER_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/archive-spans/events"


            querystring =
            {"widgetId":"SOME_STRING_VALUE","timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","pagination.offset":"SOME_INTEGER_VALUE","pagination.limit":"SOME_INTEGER_VALUE","requestParamsHash":"SOME_STRING_VALUE","query.data":"SOME_STRING_VALUE","queryRaw.text":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/archive-spans/events?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&pagination.offset=SOME_INTEGER_VALUE&pagination.limit=SOME_INTEGER_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/archive-spans/events/count:
    get:
      operationId: ArchiveSpansDataSourceService_SearchArchiveSpansEventsCount
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/servicesSearchArchiveSpansEventsCountResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: widgetId
          in: query
          required: false
          schema:
            type: string
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: requestParamsHash
          in: query
          required: false
          schema:
            type: string
        - name: query.data
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: queryRaw.text
          in: query
          required: false
          schema:
            type: string
      tags:
        - ArchiveSpansDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/archive-spans/events/count?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/archive-spans/events/count"


            querystring =
            {"widgetId":"SOME_STRING_VALUE","timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","requestParamsHash":"SOME_STRING_VALUE","query.data":"SOME_STRING_VALUE","queryRaw.text":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/archive-spans/events/count?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/archive-spans/grouped-series:
    get:
      operationId: ArchiveSpansDataSourceService_SearchArchiveGroupedSpansSeries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/servicesSearchArchiveGroupedSpansSeriesResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: widgetId
          in: query
          required: false
          schema:
            type: string
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: requestParamsHash
          in: query
          required: false
          schema:
            type: string
        - name: query.data
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: queryRaw.text
          in: query
          required: false
          schema:
            type: string
        - name: groupByKeys
          description: Have to be ordered for correctly structured results.
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregationKey
          in: query
          required: false
          schema:
            type: string
      tags:
        - ArchiveSpansDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/archive-spans/grouped-series?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE&groupByKeys=SOME_ARRAY_VALUE&aggregationKey=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/archive-spans/grouped-series"


            querystring =
            {"widgetId":"SOME_STRING_VALUE","timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","requestParamsHash":"SOME_STRING_VALUE","query.data":"SOME_STRING_VALUE","queryRaw.text":"SOME_STRING_VALUE","groupByKeys":"SOME_ARRAY_VALUE","aggregationKey":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/archive-spans/grouped-series?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE&groupByKeys=SOME_ARRAY_VALUE&aggregationKey=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/archive-spans/grouped-time-series:
    get:
      operationId: ArchiveSpansDataSourceService_SearchArchiveGroupedSpansTimeSeries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/servicesSearchArchiveGroupedSpansTimeSeriesResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: widgetId
          in: query
          required: false
          schema:
            type: string
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: requestParamsHash
          in: query
          required: false
          schema:
            type: string
        - name: query.data
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: queryRaw.text
          in: query
          required: false
          schema:
            type: string
        - name: groupByKeys
          description: Expects up to 1 element for now, without `timestamp`.
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregationKey
          in: query
          required: false
          schema:
            type: string
      tags:
        - ArchiveSpansDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/archive-spans/grouped-time-series?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE&groupByKeys=SOME_ARRAY_VALUE&aggregationKey=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/archive-spans/grouped-time-series"


            querystring =
            {"widgetId":"SOME_STRING_VALUE","timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","requestParamsHash":"SOME_STRING_VALUE","query.data":"SOME_STRING_VALUE","queryRaw.text":"SOME_STRING_VALUE","groupByKeys":"SOME_ARRAY_VALUE","aggregationKey":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/archive-spans/grouped-time-series?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE&groupByKeys=SOME_ARRAY_VALUE&aggregationKey=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/archive-spans/grouped-values:
    get:
      operationId: ArchiveSpansDataSourceService_SearchArchiveSpansGroupedValues
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/servicesSearchArchiveSpansGroupedValuesResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: widgetId
          in: query
          required: false
          schema:
            type: string
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: requestParamsHash
          in: query
          required: false
          schema:
            type: string
        - name: query.data
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: queryRaw.text
          in: query
          required: false
          schema:
            type: string
        - name: groupByKeys
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregationKeys
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - ArchiveSpansDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/archive-spans/grouped-values?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE&groupByKeys=SOME_ARRAY_VALUE&aggregationKeys=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/archive-spans/grouped-values"


            querystring =
            {"widgetId":"SOME_STRING_VALUE","timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","requestParamsHash":"SOME_STRING_VALUE","query.data":"SOME_STRING_VALUE","queryRaw.text":"SOME_STRING_VALUE","groupByKeys":"SOME_ARRAY_VALUE","aggregationKeys":"SOME_STRING_VALUE","limit":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/archive-spans/grouped-values?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE&groupByKeys=SOME_ARRAY_VALUE&aggregationKeys=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/archive-spans/time-series:
    get:
      operationId: ArchiveSpansDataSourceService_SearchArchiveSpansTimeSeries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/servicesSearchArchiveSpansTimeSeriesResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: widgetId
          in: query
          required: false
          schema:
            type: string
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: requestParamsHash
          in: query
          required: false
          schema:
            type: string
        - name: query.data
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: queryRaw.text
          in: query
          required: false
          schema:
            type: string
        - name: aggregationKeys
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - ArchiveSpansDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/archive-spans/time-series?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE&aggregationKeys=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/archive-spans/time-series"


            querystring =
            {"widgetId":"SOME_STRING_VALUE","timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","limit":"SOME_INTEGER_VALUE","requestParamsHash":"SOME_STRING_VALUE","query.data":"SOME_STRING_VALUE","queryRaw.text":"SOME_STRING_VALUE","aggregationKeys":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/archive-spans/time-series?widgetId=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&requestParamsHash=SOME_STRING_VALUE&query.data=SOME_STRING_VALUE&queryRaw.text=SOME_STRING_VALUE&aggregationKeys=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/catalog:
    get:
      operationId: DashboardCatalogService_GetDashboardCatalog
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesGetDashboardCatalogResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - DashboardCatalogService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/catalog';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/dashboards/catalog"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/dashboards/catalog \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/dataprime:
    get:
      operationId: DataprimeDataSourceService_SearchDataprime
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesSearchDataprimeResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: dataprimeQuery.data
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: dataprimeQueryRaw.text
          in: query
          required: false
          schema:
            type: string
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - DataprimeDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/dataprime?dataprimeQuery.data=SOME_STRING_VALUE&dataprimeQueryRaw.text=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/dashboards/dataprime"


            querystring =
            {"dataprimeQuery.data":"SOME_STRING_VALUE","dataprimeQueryRaw.text":"SOME_STRING_VALUE","timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","limit":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/dataprime?dataprimeQuery.data=SOME_STRING_VALUE&dataprimeQueryRaw.text=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/dataprime/archive:
    get:
      operationId: DataprimeDataSourceService_SearchDataprimeArchive
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesSearchDataprimeArchiveResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: dataprimeQuery.data
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: dataprimeQueryRaw.text
          in: query
          required: false
          schema:
            type: string
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: widgetId
          in: query
          required: false
          schema:
            type: string
      tags:
        - DataprimeDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/dataprime/archive?dataprimeQuery.data=SOME_STRING_VALUE&dataprimeQueryRaw.text=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&widgetId=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/dataprime/archive"


            querystring =
            {"dataprimeQuery.data":"SOME_STRING_VALUE","dataprimeQueryRaw.text":"SOME_STRING_VALUE","timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","limit":"SOME_INTEGER_VALUE","widgetId":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/dataprime/archive?dataprimeQuery.data=SOME_STRING_VALUE&dataprimeQueryRaw.text=SOME_STRING_VALUE&timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&widgetId=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/folders:
    get:
      operationId: DashboardFoldersService_ListDashboardFolders
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesListDashboardFoldersResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - DashboardFoldersService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/folders';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/dashboards/folders"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/dashboards/folders \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      operationId: DashboardFoldersService_CreateDashboardFolder
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesCreateDashboardFolderResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicesCreateDashboardFolderRequest'
        required: true
      tags:
        - DashboardFoldersService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/folders';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestId":"string","folder":{"id":"string","name":"string","parentId":"string"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/dashboards/folders"


            payload = {
                "requestId": "string",
                "folder": {
                    "id": "string",
                    "name": "string",
                    "parentId": "string"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/dashboards/folders \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestId":"string","folder":{"id":"string","name":"string","parentId":"string"}}'
      x-hideTryItPanel: false
      x-showConsole: true
    put:
      operationId: DashboardFoldersService_ReplaceDashboardFolder
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesReplaceDashboardFolderResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicesReplaceDashboardFolderRequest'
        required: true
      tags:
        - DashboardFoldersService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/folders';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestId":"string","folder":{"id":"string","name":"string","parentId":"string"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/dashboards/folders"


            payload = {
                "requestId": "string",
                "folder": {
                    "id": "string",
                    "name": "string",
                    "parentId": "string"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/dashboards/folders \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestId":"string","folder":{"id":"string","name":"string","parentId":"string"}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/folders/{folderId}:
    get:
      operationId: DashboardFoldersService_GetDashboardFolder
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesGetDashboardFolderResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            type: string
        - name: requestId
          in: query
          required: false
          schema:
            type: string
      tags:
        - DashboardFoldersService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/folders/%7BfolderId%7D?requestId=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/folders/%7BfolderId%7D"


            querystring = {"requestId":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/folders/%7BfolderId%7D?requestId=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    delete:
      operationId: DashboardFoldersService_DeleteDashboardFolder
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesDeleteDashboardFolderResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            type: string
        - name: requestId
          in: query
          required: false
          schema:
            type: string
      tags:
        - DashboardFoldersService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/folders/%7BfolderId%7D?requestId=SOME_STRING_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/folders/%7BfolderId%7D"


            querystring = {"requestId":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/folders/%7BfolderId%7D?requestId=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/logs/annotation-events:
    get:
      operationId: LogsDataSourceService_SearchLogsAnnotationEvents
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/servicesSearchLogsAnnotationEventsResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: dataprimeQuery.serialized.data
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: dataprimeQuery.raw.text
          in: query
          required: false
          schema:
            type: string
        - name: strategy.instant.timestampField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: strategy.instant.timestampField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: strategy.range.startTimestampField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: strategy.range.startTimestampField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: strategy.range.endTimestampField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: strategy.range.endTimestampField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: strategy.duration.startTimestampField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: strategy.duration.startTimestampField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: strategy.duration.durationField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: strategy.duration.durationField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - LogsDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/logs/annotation-events?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&dataprimeQuery.serialized.data=SOME_STRING_VALUE&dataprimeQuery.raw.text=SOME_STRING_VALUE&strategy.instant.timestampField.keypath=SOME_ARRAY_VALUE&strategy.instant.timestampField.scope=SOME_STRING_VALUE&strategy.range.startTimestampField.keypath=SOME_ARRAY_VALUE&strategy.range.startTimestampField.scope=SOME_STRING_VALUE&strategy.range.endTimestampField.keypath=SOME_ARRAY_VALUE&strategy.range.endTimestampField.scope=SOME_STRING_VALUE&strategy.duration.startTimestampField.keypath=SOME_ARRAY_VALUE&strategy.duration.startTimestampField.scope=SOME_STRING_VALUE&strategy.duration.durationField.keypath=SOME_ARRAY_VALUE&strategy.duration.durationField.scope=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/logs/annotation-events"


            querystring =
            {"timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","dataprimeQuery.serialized.data":"SOME_STRING_VALUE","dataprimeQuery.raw.text":"SOME_STRING_VALUE","strategy.instant.timestampField.keypath":"SOME_ARRAY_VALUE","strategy.instant.timestampField.scope":"SOME_STRING_VALUE","strategy.range.startTimestampField.keypath":"SOME_ARRAY_VALUE","strategy.range.startTimestampField.scope":"SOME_STRING_VALUE","strategy.range.endTimestampField.keypath":"SOME_ARRAY_VALUE","strategy.range.endTimestampField.scope":"SOME_STRING_VALUE","strategy.duration.startTimestampField.keypath":"SOME_ARRAY_VALUE","strategy.duration.startTimestampField.scope":"SOME_STRING_VALUE","strategy.duration.durationField.keypath":"SOME_ARRAY_VALUE","strategy.duration.durationField.scope":"SOME_STRING_VALUE","limit":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/logs/annotation-events?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&dataprimeQuery.serialized.data=SOME_STRING_VALUE&dataprimeQuery.raw.text=SOME_STRING_VALUE&strategy.instant.timestampField.keypath=SOME_ARRAY_VALUE&strategy.instant.timestampField.scope=SOME_STRING_VALUE&strategy.range.startTimestampField.keypath=SOME_ARRAY_VALUE&strategy.range.startTimestampField.scope=SOME_STRING_VALUE&strategy.range.endTimestampField.keypath=SOME_ARRAY_VALUE&strategy.range.endTimestampField.scope=SOME_STRING_VALUE&strategy.duration.startTimestampField.keypath=SOME_ARRAY_VALUE&strategy.duration.startTimestampField.scope=SOME_STRING_VALUE&strategy.duration.durationField.keypath=SOME_ARRAY_VALUE&strategy.duration.durationField.scope=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/logs/event-groups:
    get:
      operationId: LogsDataSourceService_SearchLogsEventGroups
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesSearchLogsEventGroupsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: luceneQuery
          in: query
          required: false
          schema:
            type: string
        - name: groupBy
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: pagination.offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: pagination.limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - LogsDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/logs/event-groups?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE&groupBy=SOME_ARRAY_VALUE&pagination.offset=SOME_INTEGER_VALUE&pagination.limit=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/logs/event-groups"


            querystring =
            {"timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","luceneQuery":"SOME_STRING_VALUE","groupBy":"SOME_ARRAY_VALUE","pagination.offset":"SOME_INTEGER_VALUE","pagination.limit":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/logs/event-groups?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE&groupBy=SOME_ARRAY_VALUE&pagination.offset=SOME_INTEGER_VALUE&pagination.limit=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/logs/events:
    get:
      operationId: LogsDataSourceService_SearchLogsEvents
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesSearchLogsEventsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: luceneQuery
          in: query
          required: false
          schema:
            type: string
        - name: pagination.offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: pagination.limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - LogsDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/logs/events?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE&pagination.offset=SOME_INTEGER_VALUE&pagination.limit=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/logs/events"


            querystring =
            {"timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","luceneQuery":"SOME_STRING_VALUE","pagination.offset":"SOME_INTEGER_VALUE","pagination.limit":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/logs/events?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE&pagination.offset=SOME_INTEGER_VALUE&pagination.limit=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/logs/grouped-series:
    get:
      operationId: LogsDataSourceService_SearchGroupedLogsSeries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesSearchGroupedLogsSeriesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: groupByFields
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregation.countDistinct.field
          in: query
          required: false
          schema:
            type: string
        - name: aggregation.countDistinct.observationField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregation.countDistinct.observationField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: aggregation.sum.field
          in: query
          required: false
          schema:
            type: string
        - name: aggregation.sum.observationField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregation.sum.observationField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: aggregation.average.field
          in: query
          required: false
          schema:
            type: string
        - name: aggregation.average.observationField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregation.average.observationField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: aggregation.min.field
          in: query
          required: false
          schema:
            type: string
        - name: aggregation.min.observationField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregation.min.observationField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: aggregation.max.field
          in: query
          required: false
          schema:
            type: string
        - name: aggregation.max.observationField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregation.max.observationField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: aggregation.percentile.field
          in: query
          required: false
          schema:
            type: string
        - name: aggregation.percentile.percent
          description: Value in range (0, 100]
          in: query
          required: false
          schema:
            type: number
            format: double
        - name: aggregation.percentile.observationField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregation.percentile.observationField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: luceneQuery
          in: query
          required: false
          schema:
            type: string
      tags:
        - LogsDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/logs/grouped-series?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&groupByFields=SOME_ARRAY_VALUE&aggregation.countDistinct.field=SOME_STRING_VALUE&aggregation.countDistinct.observationField.keypath=SOME_ARRAY_VALUE&aggregation.countDistinct.observationField.scope=SOME_STRING_VALUE&aggregation.sum.field=SOME_STRING_VALUE&aggregation.sum.observationField.keypath=SOME_ARRAY_VALUE&aggregation.sum.observationField.scope=SOME_STRING_VALUE&aggregation.average.field=SOME_STRING_VALUE&aggregation.average.observationField.keypath=SOME_ARRAY_VALUE&aggregation.average.observationField.scope=SOME_STRING_VALUE&aggregation.min.field=SOME_STRING_VALUE&aggregation.min.observationField.keypath=SOME_ARRAY_VALUE&aggregation.min.observationField.scope=SOME_STRING_VALUE&aggregation.max.field=SOME_STRING_VALUE&aggregation.max.observationField.keypath=SOME_ARRAY_VALUE&aggregation.max.observationField.scope=SOME_STRING_VALUE&aggregation.percentile.field=SOME_STRING_VALUE&aggregation.percentile.percent=SOME_NUMBER_VALUE&aggregation.percentile.observationField.keypath=SOME_ARRAY_VALUE&aggregation.percentile.observationField.scope=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/logs/grouped-series"


            querystring =
            {"timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","groupByFields":"SOME_ARRAY_VALUE","aggregation.countDistinct.field":"SOME_STRING_VALUE","aggregation.countDistinct.observationField.keypath":"SOME_ARRAY_VALUE","aggregation.countDistinct.observationField.scope":"SOME_STRING_VALUE","aggregation.sum.field":"SOME_STRING_VALUE","aggregation.sum.observationField.keypath":"SOME_ARRAY_VALUE","aggregation.sum.observationField.scope":"SOME_STRING_VALUE","aggregation.average.field":"SOME_STRING_VALUE","aggregation.average.observationField.keypath":"SOME_ARRAY_VALUE","aggregation.average.observationField.scope":"SOME_STRING_VALUE","aggregation.min.field":"SOME_STRING_VALUE","aggregation.min.observationField.keypath":"SOME_ARRAY_VALUE","aggregation.min.observationField.scope":"SOME_STRING_VALUE","aggregation.max.field":"SOME_STRING_VALUE","aggregation.max.observationField.keypath":"SOME_ARRAY_VALUE","aggregation.max.observationField.scope":"SOME_STRING_VALUE","aggregation.percentile.field":"SOME_STRING_VALUE","aggregation.percentile.percent":"SOME_NUMBER_VALUE","aggregation.percentile.observationField.keypath":"SOME_ARRAY_VALUE","aggregation.percentile.observationField.scope":"SOME_STRING_VALUE","luceneQuery":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/logs/grouped-series?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&groupByFields=SOME_ARRAY_VALUE&aggregation.countDistinct.field=SOME_STRING_VALUE&aggregation.countDistinct.observationField.keypath=SOME_ARRAY_VALUE&aggregation.countDistinct.observationField.scope=SOME_STRING_VALUE&aggregation.sum.field=SOME_STRING_VALUE&aggregation.sum.observationField.keypath=SOME_ARRAY_VALUE&aggregation.sum.observationField.scope=SOME_STRING_VALUE&aggregation.average.field=SOME_STRING_VALUE&aggregation.average.observationField.keypath=SOME_ARRAY_VALUE&aggregation.average.observationField.scope=SOME_STRING_VALUE&aggregation.min.field=SOME_STRING_VALUE&aggregation.min.observationField.keypath=SOME_ARRAY_VALUE&aggregation.min.observationField.scope=SOME_STRING_VALUE&aggregation.max.field=SOME_STRING_VALUE&aggregation.max.observationField.keypath=SOME_ARRAY_VALUE&aggregation.max.observationField.scope=SOME_STRING_VALUE&aggregation.percentile.field=SOME_STRING_VALUE&aggregation.percentile.percent=SOME_NUMBER_VALUE&aggregation.percentile.observationField.keypath=SOME_ARRAY_VALUE&aggregation.percentile.observationField.scope=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/logs/grouped-time-series:
    get:
      operationId: LogsDataSourceService_SearchLogsGroupedTimeSeries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/servicesSearchLogsGroupedTimeSeriesResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: interval
          in: query
          required: false
          schema:
            type: string
        - name: aggregation.countDistinct.field
          in: query
          required: false
          schema:
            type: string
        - name: aggregation.countDistinct.observationField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregation.countDistinct.observationField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: aggregation.sum.field
          in: query
          required: false
          schema:
            type: string
        - name: aggregation.sum.observationField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregation.sum.observationField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: aggregation.average.field
          in: query
          required: false
          schema:
            type: string
        - name: aggregation.average.observationField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregation.average.observationField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: aggregation.min.field
          in: query
          required: false
          schema:
            type: string
        - name: aggregation.min.observationField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregation.min.observationField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: aggregation.max.field
          in: query
          required: false
          schema:
            type: string
        - name: aggregation.max.observationField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregation.max.observationField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: aggregation.percentile.field
          in: query
          required: false
          schema:
            type: string
        - name: aggregation.percentile.percent
          description: Value in range (0, 100]
          in: query
          required: false
          schema:
            type: number
            format: double
        - name: aggregation.percentile.observationField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregation.percentile.observationField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: luceneQuery
          in: query
          required: false
          schema:
            type: string
      tags:
        - LogsDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/logs/grouped-time-series?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&interval=SOME_STRING_VALUE&aggregation.countDistinct.field=SOME_STRING_VALUE&aggregation.countDistinct.observationField.keypath=SOME_ARRAY_VALUE&aggregation.countDistinct.observationField.scope=SOME_STRING_VALUE&aggregation.sum.field=SOME_STRING_VALUE&aggregation.sum.observationField.keypath=SOME_ARRAY_VALUE&aggregation.sum.observationField.scope=SOME_STRING_VALUE&aggregation.average.field=SOME_STRING_VALUE&aggregation.average.observationField.keypath=SOME_ARRAY_VALUE&aggregation.average.observationField.scope=SOME_STRING_VALUE&aggregation.min.field=SOME_STRING_VALUE&aggregation.min.observationField.keypath=SOME_ARRAY_VALUE&aggregation.min.observationField.scope=SOME_STRING_VALUE&aggregation.max.field=SOME_STRING_VALUE&aggregation.max.observationField.keypath=SOME_ARRAY_VALUE&aggregation.max.observationField.scope=SOME_STRING_VALUE&aggregation.percentile.field=SOME_STRING_VALUE&aggregation.percentile.percent=SOME_NUMBER_VALUE&aggregation.percentile.observationField.keypath=SOME_ARRAY_VALUE&aggregation.percentile.observationField.scope=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/logs/grouped-time-series"


            querystring =
            {"timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","interval":"SOME_STRING_VALUE","aggregation.countDistinct.field":"SOME_STRING_VALUE","aggregation.countDistinct.observationField.keypath":"SOME_ARRAY_VALUE","aggregation.countDistinct.observationField.scope":"SOME_STRING_VALUE","aggregation.sum.field":"SOME_STRING_VALUE","aggregation.sum.observationField.keypath":"SOME_ARRAY_VALUE","aggregation.sum.observationField.scope":"SOME_STRING_VALUE","aggregation.average.field":"SOME_STRING_VALUE","aggregation.average.observationField.keypath":"SOME_ARRAY_VALUE","aggregation.average.observationField.scope":"SOME_STRING_VALUE","aggregation.min.field":"SOME_STRING_VALUE","aggregation.min.observationField.keypath":"SOME_ARRAY_VALUE","aggregation.min.observationField.scope":"SOME_STRING_VALUE","aggregation.max.field":"SOME_STRING_VALUE","aggregation.max.observationField.keypath":"SOME_ARRAY_VALUE","aggregation.max.observationField.scope":"SOME_STRING_VALUE","aggregation.percentile.field":"SOME_STRING_VALUE","aggregation.percentile.percent":"SOME_NUMBER_VALUE","aggregation.percentile.observationField.keypath":"SOME_ARRAY_VALUE","aggregation.percentile.observationField.scope":"SOME_STRING_VALUE","luceneQuery":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/logs/grouped-time-series?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&interval=SOME_STRING_VALUE&aggregation.countDistinct.field=SOME_STRING_VALUE&aggregation.countDistinct.observationField.keypath=SOME_ARRAY_VALUE&aggregation.countDistinct.observationField.scope=SOME_STRING_VALUE&aggregation.sum.field=SOME_STRING_VALUE&aggregation.sum.observationField.keypath=SOME_ARRAY_VALUE&aggregation.sum.observationField.scope=SOME_STRING_VALUE&aggregation.average.field=SOME_STRING_VALUE&aggregation.average.observationField.keypath=SOME_ARRAY_VALUE&aggregation.average.observationField.scope=SOME_STRING_VALUE&aggregation.min.field=SOME_STRING_VALUE&aggregation.min.observationField.keypath=SOME_ARRAY_VALUE&aggregation.min.observationField.scope=SOME_STRING_VALUE&aggregation.max.field=SOME_STRING_VALUE&aggregation.max.observationField.keypath=SOME_ARRAY_VALUE&aggregation.max.observationField.scope=SOME_STRING_VALUE&aggregation.percentile.field=SOME_STRING_VALUE&aggregation.percentile.percent=SOME_NUMBER_VALUE&aggregation.percentile.observationField.keypath=SOME_ARRAY_VALUE&aggregation.percentile.observationField.scope=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/logs/grouped-values:
    get:
      operationId: LogsDataSourceService_SearchLogsGroupedValues
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesSearchLogsGroupedValuesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: luceneQuery
          in: query
          required: false
          schema:
            type: string
        - name: groupBy
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregation.countDistinct.field
          in: query
          required: false
          schema:
            type: string
        - name: aggregation.countDistinct.observationField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregation.countDistinct.observationField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: aggregation.sum.field
          in: query
          required: false
          schema:
            type: string
        - name: aggregation.sum.observationField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregation.sum.observationField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: aggregation.average.field
          in: query
          required: false
          schema:
            type: string
        - name: aggregation.average.observationField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregation.average.observationField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: aggregation.min.field
          in: query
          required: false
          schema:
            type: string
        - name: aggregation.min.observationField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregation.min.observationField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: aggregation.max.field
          in: query
          required: false
          schema:
            type: string
        - name: aggregation.max.observationField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregation.max.observationField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: aggregation.percentile.field
          in: query
          required: false
          schema:
            type: string
        - name: aggregation.percentile.percent
          description: Value in range (0, 100]
          in: query
          required: false
          schema:
            type: number
            format: double
        - name: aggregation.percentile.observationField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: aggregation.percentile.observationField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - LogsDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/logs/grouped-values?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE&groupBy=SOME_ARRAY_VALUE&aggregation.countDistinct.field=SOME_STRING_VALUE&aggregation.countDistinct.observationField.keypath=SOME_ARRAY_VALUE&aggregation.countDistinct.observationField.scope=SOME_STRING_VALUE&aggregation.sum.field=SOME_STRING_VALUE&aggregation.sum.observationField.keypath=SOME_ARRAY_VALUE&aggregation.sum.observationField.scope=SOME_STRING_VALUE&aggregation.average.field=SOME_STRING_VALUE&aggregation.average.observationField.keypath=SOME_ARRAY_VALUE&aggregation.average.observationField.scope=SOME_STRING_VALUE&aggregation.min.field=SOME_STRING_VALUE&aggregation.min.observationField.keypath=SOME_ARRAY_VALUE&aggregation.min.observationField.scope=SOME_STRING_VALUE&aggregation.max.field=SOME_STRING_VALUE&aggregation.max.observationField.keypath=SOME_ARRAY_VALUE&aggregation.max.observationField.scope=SOME_STRING_VALUE&aggregation.percentile.field=SOME_STRING_VALUE&aggregation.percentile.percent=SOME_NUMBER_VALUE&aggregation.percentile.observationField.keypath=SOME_ARRAY_VALUE&aggregation.percentile.observationField.scope=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/logs/grouped-values"


            querystring =
            {"timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","luceneQuery":"SOME_STRING_VALUE","groupBy":"SOME_ARRAY_VALUE","aggregation.countDistinct.field":"SOME_STRING_VALUE","aggregation.countDistinct.observationField.keypath":"SOME_ARRAY_VALUE","aggregation.countDistinct.observationField.scope":"SOME_STRING_VALUE","aggregation.sum.field":"SOME_STRING_VALUE","aggregation.sum.observationField.keypath":"SOME_ARRAY_VALUE","aggregation.sum.observationField.scope":"SOME_STRING_VALUE","aggregation.average.field":"SOME_STRING_VALUE","aggregation.average.observationField.keypath":"SOME_ARRAY_VALUE","aggregation.average.observationField.scope":"SOME_STRING_VALUE","aggregation.min.field":"SOME_STRING_VALUE","aggregation.min.observationField.keypath":"SOME_ARRAY_VALUE","aggregation.min.observationField.scope":"SOME_STRING_VALUE","aggregation.max.field":"SOME_STRING_VALUE","aggregation.max.observationField.keypath":"SOME_ARRAY_VALUE","aggregation.max.observationField.scope":"SOME_STRING_VALUE","aggregation.percentile.field":"SOME_STRING_VALUE","aggregation.percentile.percent":"SOME_NUMBER_VALUE","aggregation.percentile.observationField.keypath":"SOME_ARRAY_VALUE","aggregation.percentile.observationField.scope":"SOME_STRING_VALUE","limit":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/logs/grouped-values?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE&groupBy=SOME_ARRAY_VALUE&aggregation.countDistinct.field=SOME_STRING_VALUE&aggregation.countDistinct.observationField.keypath=SOME_ARRAY_VALUE&aggregation.countDistinct.observationField.scope=SOME_STRING_VALUE&aggregation.sum.field=SOME_STRING_VALUE&aggregation.sum.observationField.keypath=SOME_ARRAY_VALUE&aggregation.sum.observationField.scope=SOME_STRING_VALUE&aggregation.average.field=SOME_STRING_VALUE&aggregation.average.observationField.keypath=SOME_ARRAY_VALUE&aggregation.average.observationField.scope=SOME_STRING_VALUE&aggregation.min.field=SOME_STRING_VALUE&aggregation.min.observationField.keypath=SOME_ARRAY_VALUE&aggregation.min.observationField.scope=SOME_STRING_VALUE&aggregation.max.field=SOME_STRING_VALUE&aggregation.max.observationField.keypath=SOME_ARRAY_VALUE&aggregation.max.observationField.scope=SOME_STRING_VALUE&aggregation.percentile.field=SOME_STRING_VALUE&aggregation.percentile.percent=SOME_NUMBER_VALUE&aggregation.percentile.observationField.keypath=SOME_ARRAY_VALUE&aggregation.percentile.observationField.scope=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/logs/time-series:
    get:
      operationId: LogsDataSourceService_SearchLogsTimeSeries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesSearchLogsTimeSeriesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: interval
          in: query
          required: false
          schema:
            type: string
        - name: groupBy
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: luceneQuery
          in: query
          required: false
          schema:
            type: string
      tags:
        - LogsDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/logs/time-series?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&interval=SOME_STRING_VALUE&groupBy=SOME_ARRAY_VALUE&limit=SOME_INTEGER_VALUE&luceneQuery=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/logs/time-series"


            querystring =
            {"timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","interval":"SOME_STRING_VALUE","groupBy":"SOME_ARRAY_VALUE","limit":"SOME_INTEGER_VALUE","luceneQuery":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/logs/time-series?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&interval=SOME_STRING_VALUE&groupBy=SOME_ARRAY_VALUE&limit=SOME_INTEGER_VALUE&luceneQuery=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/metrics/annotation-events:
    get:
      operationId: MetricsDataSourceService_SearchMetricsAnnotationEvents
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/servicesSearchMetricsAnnotationEventsResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: interval
          in: query
          required: false
          schema:
            type: string
        - name: promqlQuery
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - MetricsDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/metrics/annotation-events?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&interval=SOME_STRING_VALUE&promqlQuery=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/metrics/annotation-events"


            querystring =
            {"timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","interval":"SOME_STRING_VALUE","promqlQuery":"SOME_STRING_VALUE","limit":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/metrics/annotation-events?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&interval=SOME_STRING_VALUE&promqlQuery=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/metrics/events:
    get:
      operationId: MetricsDataSourceService_SearchMetricsEvents
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesSearchMetricsEventsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeSeriesInterval
          in: query
          required: false
          schema:
            type: string
        - name: promqlQuery
          in: query
          required: false
          schema:
            type: string
        - name: pagination.offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: pagination.limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: orderBy.direction
          in: query
          required: false
          schema:
            type: string
            enum:
              - ORDER_DIRECTION_UNSPECIFIED
              - ORDER_DIRECTION_ASC
              - ORDER_DIRECTION_DESC
            default: ORDER_DIRECTION_UNSPECIFIED
        - name: orderBy.label
          in: query
          required: false
          schema:
            type: string
        - name: orderBy.aggType
          in: query
          required: false
          schema:
            type: string
            enum:
              - AGGREGATION_TYPE_UNSPECIFIED
              - AGGREGATION_TYPE_LAST
              - AGGREGATION_TYPE_MIN
              - AGGREGATION_TYPE_MAX
              - AGGREGATION_TYPE_AVG
              - AGGREGATION_TYPE_SUM
            default: AGGREGATION_TYPE_UNSPECIFIED
        - name: promqlQueryType
          in: query
          required: false
          schema:
            type: string
            enum:
              - PROM_QL_QUERY_TYPE_UNSPECIFIED
              - PROM_QL_QUERY_TYPE_RANGE
              - PROM_QL_QUERY_TYPE_INSTANT
            default: PROM_QL_QUERY_TYPE_UNSPECIFIED
      tags:
        - MetricsDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/metrics/events?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&timeSeriesInterval=SOME_STRING_VALUE&promqlQuery=SOME_STRING_VALUE&pagination.offset=SOME_INTEGER_VALUE&pagination.limit=SOME_INTEGER_VALUE&orderBy.direction=SOME_STRING_VALUE&orderBy.label=SOME_STRING_VALUE&orderBy.aggType=SOME_STRING_VALUE&promqlQueryType=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/metrics/events"


            querystring =
            {"timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","timeSeriesInterval":"SOME_STRING_VALUE","promqlQuery":"SOME_STRING_VALUE","pagination.offset":"SOME_INTEGER_VALUE","pagination.limit":"SOME_INTEGER_VALUE","orderBy.direction":"SOME_STRING_VALUE","orderBy.label":"SOME_STRING_VALUE","orderBy.aggType":"SOME_STRING_VALUE","promqlQueryType":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/metrics/events?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&timeSeriesInterval=SOME_STRING_VALUE&promqlQuery=SOME_STRING_VALUE&pagination.offset=SOME_INTEGER_VALUE&pagination.limit=SOME_INTEGER_VALUE&orderBy.direction=SOME_STRING_VALUE&orderBy.label=SOME_STRING_VALUE&orderBy.aggType=SOME_STRING_VALUE&promqlQueryType=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/metrics/grouped-series:
    get:
      operationId: MetricsDataSourceService_SearchMetricsGroupedSeries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/servicesSearchMetricsGroupedSeriesResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: promqlQuery
          in: query
          required: false
          schema:
            type: string
        - name: groupBy
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - MetricsDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/metrics/grouped-series?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&promqlQuery=SOME_STRING_VALUE&groupBy=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/metrics/grouped-series"


            querystring =
            {"timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","promqlQuery":"SOME_STRING_VALUE","groupBy":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/metrics/grouped-series?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&promqlQuery=SOME_STRING_VALUE&groupBy=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/metrics/grouped-time-series:
    get:
      operationId: MetricsDataSourceService_SearchMetricsGroupedTimeSeries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/servicesSearchMetricsGroupedTimeSeriesResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: interval
          in: query
          required: false
          schema:
            type: string
        - name: promqlQuery
          in: query
          required: false
          schema:
            type: string
      tags:
        - MetricsDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/metrics/grouped-time-series?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&interval=SOME_STRING_VALUE&promqlQuery=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/metrics/grouped-time-series"


            querystring =
            {"timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","interval":"SOME_STRING_VALUE","promqlQuery":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/metrics/grouped-time-series?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&interval=SOME_STRING_VALUE&promqlQuery=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/metrics/grouped-values:
    get:
      operationId: MetricsDataSourceService_SearchMetricsGroupedValues
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/servicesSearchMetricsGroupedValuesResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: promqlQuery
          in: query
          required: false
          schema:
            type: string
        - name: groupBy
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - MetricsDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/metrics/grouped-values?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&promqlQuery=SOME_STRING_VALUE&groupBy=SOME_ARRAY_VALUE&limit=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/metrics/grouped-values"


            querystring =
            {"timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","promqlQuery":"SOME_STRING_VALUE","groupBy":"SOME_ARRAY_VALUE","limit":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/metrics/grouped-values?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&promqlQuery=SOME_STRING_VALUE&groupBy=SOME_ARRAY_VALUE&limit=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/metrics/time-series:
    get:
      operationId: MetricsDataSourceService_SearchMetricsTimeSeries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesSearchMetricsTimeSeriesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: interval
          in: query
          required: false
          schema:
            type: string
        - name: promqlQuery
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - MetricsDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/metrics/time-series?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&interval=SOME_STRING_VALUE&promqlQuery=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/metrics/time-series"


            querystring =
            {"timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","interval":"SOME_STRING_VALUE","promqlQuery":"SOME_STRING_VALUE","limit":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/metrics/time-series?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&interval=SOME_STRING_VALUE&promqlQuery=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/metrics/time-values:
    get:
      operationId: MetricsDataSourceService_SearchMetricsTimeValues
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesSearchMetricsTimeValuesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: promqlQuery
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - MetricsDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/metrics/time-values?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&promqlQuery=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/metrics/time-values"


            querystring =
            {"timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","promqlQuery":"SOME_STRING_VALUE","limit":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/metrics/time-values?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&promqlQuery=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/spans/annotation-events:
    get:
      operationId: SpansDataSourceService_SearchSpansAnnotationEvents
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/servicesSearchSpansAnnotationEventsResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: luceneQuery
          in: query
          required: false
          schema:
            type: string
        - name: strategy.instant.timestampField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: strategy.instant.timestampField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: strategy.range.startTimestampField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: strategy.range.startTimestampField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: strategy.range.endTimestampField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: strategy.range.endTimestampField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: strategy.duration.startTimestampField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: strategy.duration.startTimestampField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: strategy.duration.durationField.keypath
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: strategy.duration.durationField.scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - DATASET_SCOPE_UNSPECIFIED
              - DATASET_SCOPE_USER_DATA
              - DATASET_SCOPE_LABEL
              - DATASET_SCOPE_METADATA
            default: DATASET_SCOPE_UNSPECIFIED
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - SpansDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/spans/annotation-events?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE&strategy.instant.timestampField.keypath=SOME_ARRAY_VALUE&strategy.instant.timestampField.scope=SOME_STRING_VALUE&strategy.range.startTimestampField.keypath=SOME_ARRAY_VALUE&strategy.range.startTimestampField.scope=SOME_STRING_VALUE&strategy.range.endTimestampField.keypath=SOME_ARRAY_VALUE&strategy.range.endTimestampField.scope=SOME_STRING_VALUE&strategy.duration.startTimestampField.keypath=SOME_ARRAY_VALUE&strategy.duration.startTimestampField.scope=SOME_STRING_VALUE&strategy.duration.durationField.keypath=SOME_ARRAY_VALUE&strategy.duration.durationField.scope=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/spans/annotation-events"


            querystring =
            {"timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","luceneQuery":"SOME_STRING_VALUE","strategy.instant.timestampField.keypath":"SOME_ARRAY_VALUE","strategy.instant.timestampField.scope":"SOME_STRING_VALUE","strategy.range.startTimestampField.keypath":"SOME_ARRAY_VALUE","strategy.range.startTimestampField.scope":"SOME_STRING_VALUE","strategy.range.endTimestampField.keypath":"SOME_ARRAY_VALUE","strategy.range.endTimestampField.scope":"SOME_STRING_VALUE","strategy.duration.startTimestampField.keypath":"SOME_ARRAY_VALUE","strategy.duration.startTimestampField.scope":"SOME_STRING_VALUE","strategy.duration.durationField.keypath":"SOME_ARRAY_VALUE","strategy.duration.durationField.scope":"SOME_STRING_VALUE","limit":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/spans/annotation-events?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE&strategy.instant.timestampField.keypath=SOME_ARRAY_VALUE&strategy.instant.timestampField.scope=SOME_STRING_VALUE&strategy.range.startTimestampField.keypath=SOME_ARRAY_VALUE&strategy.range.startTimestampField.scope=SOME_STRING_VALUE&strategy.range.endTimestampField.keypath=SOME_ARRAY_VALUE&strategy.range.endTimestampField.scope=SOME_STRING_VALUE&strategy.duration.startTimestampField.keypath=SOME_ARRAY_VALUE&strategy.duration.startTimestampField.scope=SOME_STRING_VALUE&strategy.duration.durationField.keypath=SOME_ARRAY_VALUE&strategy.duration.durationField.scope=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/spans/event-groups:
    get:
      operationId: SpansDataSourceService_SearchSpansEventGroups
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesSearchSpansEventGroupsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: luceneQuery
          in: query
          required: false
          schema:
            type: string
        - name: pagination.offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: pagination.limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - SpansDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/spans/event-groups?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE&pagination.offset=SOME_INTEGER_VALUE&pagination.limit=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/spans/event-groups"


            querystring =
            {"timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","luceneQuery":"SOME_STRING_VALUE","pagination.offset":"SOME_INTEGER_VALUE","pagination.limit":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/spans/event-groups?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE&pagination.offset=SOME_INTEGER_VALUE&pagination.limit=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/spans/events:
    get:
      operationId: SpansDataSourceService_SearchSpansEvents
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesSearchSpansEventsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: luceneQuery
          in: query
          required: false
          schema:
            type: string
        - name: pagination.offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: pagination.limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - SpansDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/spans/events?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE&pagination.offset=SOME_INTEGER_VALUE&pagination.limit=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/spans/events"


            querystring =
            {"timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","luceneQuery":"SOME_STRING_VALUE","pagination.offset":"SOME_INTEGER_VALUE","pagination.limit":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/spans/events?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE&pagination.offset=SOME_INTEGER_VALUE&pagination.limit=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/spans/grouped-series:
    get:
      operationId: SpansDataSourceService_SearchGroupedSpansSeries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesSearchGroupedSpansSeriesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: aggregation.metricAggregation.metricField
          in: query
          required: false
          schema:
            type: string
            enum:
              - METRIC_FIELD_UNSPECIFIED
              - METRIC_FIELD_DURATION
            default: METRIC_FIELD_UNSPECIFIED
        - name: aggregation.metricAggregation.aggregationType
          in: query
          required: false
          schema:
            type: string
            enum:
              - METRIC_AGGREGATION_TYPE_UNSPECIFIED
              - METRIC_AGGREGATION_TYPE_MIN
              - METRIC_AGGREGATION_TYPE_MAX
              - METRIC_AGGREGATION_TYPE_AVERAGE
              - METRIC_AGGREGATION_TYPE_SUM
              - METRIC_AGGREGATION_TYPE_PERCENTILE_99
              - METRIC_AGGREGATION_TYPE_PERCENTILE_95
              - METRIC_AGGREGATION_TYPE_PERCENTILE_50
            default: METRIC_AGGREGATION_TYPE_UNSPECIFIED
        - name: aggregation.dimensionAggregation.dimensionField
          in: query
          required: false
          schema:
            type: string
            enum:
              - DIMENSION_FIELD_UNSPECIFIED
              - DIMENSION_FIELD_TRACE_ID
            default: DIMENSION_FIELD_UNSPECIFIED
        - name: aggregation.dimensionAggregation.aggregationType
          in: query
          required: false
          schema:
            type: string
            enum:
              - DIMENSION_AGGREGATION_TYPE_UNSPECIFIED
              - DIMENSION_AGGREGATION_TYPE_UNIQUE_COUNT
              - DIMENSION_AGGREGATION_TYPE_ERROR_COUNT
            default: DIMENSION_AGGREGATION_TYPE_UNSPECIFIED
        - name: luceneQuery
          in: query
          required: false
          schema:
            type: string
      tags:
        - SpansDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/spans/grouped-series?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&aggregation.metricAggregation.metricField=SOME_STRING_VALUE&aggregation.metricAggregation.aggregationType=SOME_STRING_VALUE&aggregation.dimensionAggregation.dimensionField=SOME_STRING_VALUE&aggregation.dimensionAggregation.aggregationType=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/spans/grouped-series"


            querystring =
            {"timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","aggregation.metricAggregation.metricField":"SOME_STRING_VALUE","aggregation.metricAggregation.aggregationType":"SOME_STRING_VALUE","aggregation.dimensionAggregation.dimensionField":"SOME_STRING_VALUE","aggregation.dimensionAggregation.aggregationType":"SOME_STRING_VALUE","luceneQuery":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/spans/grouped-series?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&aggregation.metricAggregation.metricField=SOME_STRING_VALUE&aggregation.metricAggregation.aggregationType=SOME_STRING_VALUE&aggregation.dimensionAggregation.dimensionField=SOME_STRING_VALUE&aggregation.dimensionAggregation.aggregationType=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/spans/grouped-time-series:
    get:
      operationId: SpansDataSourceService_SearchSpansGroupedTimeSeries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/servicesSearchSpansGroupedTimeSeriesResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: interval
          in: query
          required: false
          schema:
            type: string
        - name: aggregation.metricAggregation.metricField
          in: query
          required: false
          schema:
            type: string
            enum:
              - METRIC_FIELD_UNSPECIFIED
              - METRIC_FIELD_DURATION
            default: METRIC_FIELD_UNSPECIFIED
        - name: aggregation.metricAggregation.aggregationType
          in: query
          required: false
          schema:
            type: string
            enum:
              - METRIC_AGGREGATION_TYPE_UNSPECIFIED
              - METRIC_AGGREGATION_TYPE_MIN
              - METRIC_AGGREGATION_TYPE_MAX
              - METRIC_AGGREGATION_TYPE_AVERAGE
              - METRIC_AGGREGATION_TYPE_SUM
              - METRIC_AGGREGATION_TYPE_PERCENTILE_99
              - METRIC_AGGREGATION_TYPE_PERCENTILE_95
              - METRIC_AGGREGATION_TYPE_PERCENTILE_50
            default: METRIC_AGGREGATION_TYPE_UNSPECIFIED
        - name: aggregation.dimensionAggregation.dimensionField
          in: query
          required: false
          schema:
            type: string
            enum:
              - DIMENSION_FIELD_UNSPECIFIED
              - DIMENSION_FIELD_TRACE_ID
            default: DIMENSION_FIELD_UNSPECIFIED
        - name: aggregation.dimensionAggregation.aggregationType
          in: query
          required: false
          schema:
            type: string
            enum:
              - DIMENSION_AGGREGATION_TYPE_UNSPECIFIED
              - DIMENSION_AGGREGATION_TYPE_UNIQUE_COUNT
              - DIMENSION_AGGREGATION_TYPE_ERROR_COUNT
            default: DIMENSION_AGGREGATION_TYPE_UNSPECIFIED
        - name: luceneQuery
          in: query
          required: false
          schema:
            type: string
      tags:
        - SpansDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/spans/grouped-time-series?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&interval=SOME_STRING_VALUE&aggregation.metricAggregation.metricField=SOME_STRING_VALUE&aggregation.metricAggregation.aggregationType=SOME_STRING_VALUE&aggregation.dimensionAggregation.dimensionField=SOME_STRING_VALUE&aggregation.dimensionAggregation.aggregationType=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/spans/grouped-time-series"


            querystring =
            {"timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","interval":"SOME_STRING_VALUE","aggregation.metricAggregation.metricField":"SOME_STRING_VALUE","aggregation.metricAggregation.aggregationType":"SOME_STRING_VALUE","aggregation.dimensionAggregation.dimensionField":"SOME_STRING_VALUE","aggregation.dimensionAggregation.aggregationType":"SOME_STRING_VALUE","luceneQuery":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/spans/grouped-time-series?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&interval=SOME_STRING_VALUE&aggregation.metricAggregation.metricField=SOME_STRING_VALUE&aggregation.metricAggregation.aggregationType=SOME_STRING_VALUE&aggregation.dimensionAggregation.dimensionField=SOME_STRING_VALUE&aggregation.dimensionAggregation.aggregationType=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/spans/grouped-values:
    get:
      operationId: SpansDataSourceService_SearchSpansGroupedValues
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesSearchSpansGroupedValuesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: luceneQuery
          in: query
          required: false
          schema:
            type: string
        - name: aggregation.metricAggregation.metricField
          in: query
          required: false
          schema:
            type: string
            enum:
              - METRIC_FIELD_UNSPECIFIED
              - METRIC_FIELD_DURATION
            default: METRIC_FIELD_UNSPECIFIED
        - name: aggregation.metricAggregation.aggregationType
          in: query
          required: false
          schema:
            type: string
            enum:
              - METRIC_AGGREGATION_TYPE_UNSPECIFIED
              - METRIC_AGGREGATION_TYPE_MIN
              - METRIC_AGGREGATION_TYPE_MAX
              - METRIC_AGGREGATION_TYPE_AVERAGE
              - METRIC_AGGREGATION_TYPE_SUM
              - METRIC_AGGREGATION_TYPE_PERCENTILE_99
              - METRIC_AGGREGATION_TYPE_PERCENTILE_95
              - METRIC_AGGREGATION_TYPE_PERCENTILE_50
            default: METRIC_AGGREGATION_TYPE_UNSPECIFIED
        - name: aggregation.dimensionAggregation.dimensionField
          in: query
          required: false
          schema:
            type: string
            enum:
              - DIMENSION_FIELD_UNSPECIFIED
              - DIMENSION_FIELD_TRACE_ID
            default: DIMENSION_FIELD_UNSPECIFIED
        - name: aggregation.dimensionAggregation.aggregationType
          in: query
          required: false
          schema:
            type: string
            enum:
              - DIMENSION_AGGREGATION_TYPE_UNSPECIFIED
              - DIMENSION_AGGREGATION_TYPE_UNIQUE_COUNT
              - DIMENSION_AGGREGATION_TYPE_ERROR_COUNT
            default: DIMENSION_AGGREGATION_TYPE_UNSPECIFIED
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - SpansDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/spans/grouped-values?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE&aggregation.metricAggregation.metricField=SOME_STRING_VALUE&aggregation.metricAggregation.aggregationType=SOME_STRING_VALUE&aggregation.dimensionAggregation.dimensionField=SOME_STRING_VALUE&aggregation.dimensionAggregation.aggregationType=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/spans/grouped-values"


            querystring =
            {"timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","luceneQuery":"SOME_STRING_VALUE","aggregation.metricAggregation.metricField":"SOME_STRING_VALUE","aggregation.metricAggregation.aggregationType":"SOME_STRING_VALUE","aggregation.dimensionAggregation.dimensionField":"SOME_STRING_VALUE","aggregation.dimensionAggregation.aggregationType":"SOME_STRING_VALUE","limit":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/spans/grouped-values?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE&aggregation.metricAggregation.metricField=SOME_STRING_VALUE&aggregation.metricAggregation.aggregationType=SOME_STRING_VALUE&aggregation.dimensionAggregation.dimensionField=SOME_STRING_VALUE&aggregation.dimensionAggregation.aggregationType=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/spans/time-series:
    get:
      operationId: SpansDataSourceService_SearchSpansTimeSeries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesSearchSpansTimeSeriesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: timeFrame.from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: timeFrame.to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: interval
          in: query
          required: false
          schema:
            type: string
        - name: luceneQuery
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - SpansDataSourceService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/spans/time-series?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&interval=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/spans/time-series"


            querystring =
            {"timeFrame.from":"SOME_STRING_VALUE","timeFrame.to":"SOME_STRING_VALUE","interval":"SOME_STRING_VALUE","luceneQuery":"SOME_STRING_VALUE","limit":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/spans/time-series?timeFrame.from=SOME_STRING_VALUE&timeFrame.to=SOME_STRING_VALUE&interval=SOME_STRING_VALUE&luceneQuery=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/team_settings:
    get:
      operationId: TeamSettingsService_GetTeamSettings
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesGetTeamSettingsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: requestId
          in: query
          required: false
          schema:
            type: string
      tags:
        - TeamSettingsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/team_settings?requestId=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/team_settings"


            querystring = {"requestId":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/team_settings?requestId=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/{dashboardId}:
    get:
      operationId: DashboardsService_GetDashboard
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesGetDashboardResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
      tags:
        - DashboardsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/%7BdashboardId%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/%7BdashboardId%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/dashboards/%7BdashboardId%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    delete:
      operationId: DashboardsService_DeleteDashboard
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesDeleteDashboardResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: requestId
          in: query
          required: false
          schema:
            type: string
      tags:
        - DashboardsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/%7BdashboardId%7D?requestId=SOME_STRING_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/%7BdashboardId%7D"


            querystring = {"requestId":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/%7BdashboardId%7D?requestId=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/{dashboardId}/default:
    put:
      operationId: DashboardsService_ReplaceDefaultDashboard
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesReplaceDefaultDashboardResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/DashboardsServiceReplaceDefaultDashboardBody
        required: true
      tags:
        - DashboardsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/%7BdashboardId%7D/default';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/%7BdashboardId%7D/default"


            payload = {"requestId": "string"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/dashboards/%7BdashboardId%7D/default \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestId":"string"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/{dashboardId}/folder:
    post:
      operationId: DashboardsService_AssignDashboardFolder
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesAssignDashboardFolderResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardsServiceAssignDashboardFolderBody'
        required: true
      tags:
        - DashboardsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/%7BdashboardId%7D/folder';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestId":"string","folderId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/%7BdashboardId%7D/folder"


            payload = {
                "requestId": "string",
                "folderId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/dashboards/%7BdashboardId%7D/folder \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestId":"string","folderId":"string"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/{dashboardId}:pin:
    patch:
      operationId: DashboardsService_PinDashboard
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesPinDashboardResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardsServicePinDashboardBody'
        required: true
      tags:
        - DashboardsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/%7BdashboardId%7D:pin';


            let options = {
              method: 'PATCH',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/%7BdashboardId%7D:pin"


            payload = {"requestId": "string"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PATCH", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PATCH \
              --url https://api.coralogix.com/mgmt/openapi/dashboards/%7BdashboardId%7D:pin \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestId":"string"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /dashboards/{dashboardId}:unpin:
    patch:
      operationId: DashboardsService_UnpinDashboard
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesUnpinDashboardResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardsServiceUnpinDashboardBody'
        required: true
      tags:
        - DashboardsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/%7BdashboardId%7D:unpin';


            let options = {
              method: 'PATCH',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/%7BdashboardId%7D:unpin"


            payload = {"requestId": "string"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PATCH", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PATCH \
              --url https://api.coralogix.com/mgmt/openapi/dashboards/%7BdashboardId%7D:unpin \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestId":"string"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /extensions-content-management/v1/import:
    post:
      operationId: ExtensionContentManagementService_ImportAndReleaseExtensions
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ImportAndReleaseExtensionsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody: &ref_0
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1ExtensionData'
        description: Response to list all extensions (streaming inputs)
        required: true
      tags:
        - ExtensionContentManagementService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/extensions-content-management/v1/import';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","name":"I love chocolate","description":"Chocolate is full of love","excerpt":"Chocolate is full of love","image":"string","darkModeImage":"string","labels":["cocoa","sugar"],"version":"v1.0.13","items":[{"name":"Low cocoa content","description":"Less than 60% cocoa","targetDomain":"ACTION","data":{},"binaries":[{"type":"PREVIEW_IMAGE","data":"string","fileName":"string"}],"isMandatory":true,"internalId":0,"uniqueId":"string","permissionResource":"UNKNOWN"}],"integrationDetails":[{"name":"string","link":"string"}],"isHidden":false,"binaries":[{"type":"KIBANA_INDEX_PATTERN","data":"string"}],"integrations":["string"],"keywords":["string"],"changelog":[{"version":"string","descriptionMd":"string"}],"deprecation":{"reason":"string","replacementExtensions":["string"]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/extensions-content-management/v1/import"


            payload = {
                "id": "076f4188-05e0-4ed3-afeb-653ad182ccb7",
                "name": "I love chocolate",
                "description": "Chocolate is full of love",
                "excerpt": "Chocolate is full of love",
                "image": "string",
                "darkModeImage": "string",
                "labels": ["cocoa", "sugar"],
                "version": "v1.0.13",
                "items": [
                    {
                        "name": "Low cocoa content",
                        "description": "Less than 60% cocoa",
                        "targetDomain": "ACTION",
                        "data": {},
                        "binaries": [
                            {
                                "type": "PREVIEW_IMAGE",
                                "data": "string",
                                "fileName": "string"
                            }
                        ],
                        "isMandatory": True,
                        "internalId": 0,
                        "uniqueId": "string",
                        "permissionResource": "UNKNOWN"
                    }
                ],
                "integrationDetails": [
                    {
                        "name": "string",
                        "link": "string"
                    }
                ],
                "isHidden": False,
                "binaries": [
                    {
                        "type": "KIBANA_INDEX_PATTERN",
                        "data": "string"
                    }
                ],
                "integrations": ["string"],
                "keywords": ["string"],
                "changelog": [
                    {
                        "version": "string",
                        "descriptionMd": "string"
                    }
                ],
                "deprecation": {
                    "reason": "string",
                    "replacementExtensions": ["string"]
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/extensions-content-management/v1/import \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","name":"I love chocolate","description":"Chocolate is full of love","excerpt":"Chocolate is full of love","image":"string","darkModeImage":"string","labels":["cocoa","sugar"],"version":"v1.0.13","items":[{"name":"Low cocoa content","description":"Less than 60% cocoa","targetDomain":"ACTION","data":{},"binaries":[{"type":"PREVIEW_IMAGE","data":"string","fileName":"string"}],"isMandatory":true,"internalId":0,"uniqueId":"string","permissionResource":"UNKNOWN"}],"integrationDetails":[{"name":"string","link":"string"}],"isHidden":false,"binaries":[{"type":"KIBANA_INDEX_PATTERN","data":"string"}],"integrations":["string"],"keywords":["string"],"changelog":[{"version":"string","descriptionMd":"string"}],"deprecation":{"reason":"string","replacementExtensions":["string"]}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /extensions-deployment/v1/deploy:
    post:
      operationId: ExtensionDeploymentService_DeployExtension
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeployExtensionResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1DeployExtensionRequest'
        required: true
      tags:
        - ExtensionDeploymentService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/extensions-deployment/v1/deploy';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"string","version":"string","itemIds":["string"],"applications":["string"],"subsystems":["string"],"extensionDeployment":{"id":"string","version":"string","itemIds":["string"],"applications":["string"],"subsystems":["string"]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/extensions-deployment/v1/deploy"


            payload = {
                "id": "string",
                "version": "string",
                "itemIds": ["string"],
                "applications": ["string"],
                "subsystems": ["string"],
                "extensionDeployment": {
                    "id": "string",
                    "version": "string",
                    "itemIds": ["string"],
                    "applications": ["string"],
                    "subsystems": ["string"]
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/extensions-deployment/v1/deploy \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"string","version":"string","itemIds":["string"],"applications":["string"],"subsystems":["string"],"extensionDeployment":{"id":"string","version":"string","itemIds":["string"],"applications":["string"],"subsystems":["string"]}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /extensions-deployment/v1/deployed:
    get:
      operationId: ExtensionDeploymentService_GetDeployedExtensions
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetDeployedExtensionsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - ExtensionDeploymentService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/extensions-deployment/v1/deployed';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/extensions-deployment/v1/deployed"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/extensions-deployment/v1/deployed \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /extensions-deployment/v1/undeploy:
    post:
      operationId: ExtensionDeploymentService_UndeployExtension
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UndeployExtensionResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UndeployExtensionRequest'
        required: true
      tags:
        - ExtensionDeploymentService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/extensions-deployment/v1/undeploy';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"string","keptExtensionItems":["string"]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/extensions-deployment/v1/undeploy"


            payload = {
                "id": "string",
                "keptExtensionItems": ["string"]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/extensions-deployment/v1/undeploy \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"string","keptExtensionItems":["string"]}'
      x-hideTryItPanel: false
      x-showConsole: true
  /extensions-deployment/v1/update:
    post:
      operationId: ExtensionDeploymentService_UpdateExtension
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdateExtensionResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UpdateExtensionRequest'
        required: true
      tags:
        - ExtensionDeploymentService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/extensions-deployment/v1/update';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"string","version":"string","itemIds":["string"],"applications":["string"],"subsystems":["string"],"extensionDeployment":{"id":"string","version":"string","itemIds":["string"],"applications":["string"],"subsystems":["string"]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/extensions-deployment/v1/update"


            payload = {
                "id": "string",
                "version": "string",
                "itemIds": ["string"],
                "applications": ["string"],
                "subsystems": ["string"],
                "extensionDeployment": {
                    "id": "string",
                    "version": "string",
                    "itemIds": ["string"],
                    "applications": ["string"],
                    "subsystems": ["string"]
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/extensions-deployment/v1/update \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"string","version":"string","itemIds":["string"],"applications":["string"],"subsystems":["string"],"extensionDeployment":{"id":"string","version":"string","itemIds":["string"],"applications":["string"],"subsystems":["string"]}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /extensions-testing/v1/cleanup:
    post:
      operationId: ExtensionTestingService_CleanupTestingRevision
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CleanupTestingRevisionResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CleanupTestingRevisionRequest'
        required: true
      tags:
        - ExtensionTestingService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/extensions-testing/v1/cleanup';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/extensions-testing/v1/cleanup"


            payload = {"id": "string"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/extensions-testing/v1/cleanup \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"string"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /extensions-testing/v1/initialize:
    post:
      operationId: ExtensionTestingService_InitializeTestingRevision
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1InitializeTestingRevisionResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1InitializeTestingRevisionRequest'
        required: true
      tags:
        - ExtensionTestingService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/extensions-testing/v1/initialize';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"extensionData":{"id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","name":"I love chocolate","description":"Chocolate is full of love","excerpt":"Chocolate is full of love","image":"string","darkModeImage":"string","labels":["cocoa","sugar"],"version":"v1.0.13","items":[{"name":"Low cocoa content","description":"Less than 60% cocoa","targetDomain":"ACTION","data":{},"binaries":[{"type":"PREVIEW_IMAGE","data":"string","fileName":"string"}],"isMandatory":true,"internalId":0,"uniqueId":"string","permissionResource":"UNKNOWN"}],"integrationDetails":[{"name":"string","link":"string"}],"isHidden":false,"binaries":[{"type":"KIBANA_INDEX_PATTERN","data":"string"}],"integrations":["string"],"keywords":["string"],"changelog":[{"version":"string","descriptionMd":"string"}],"deprecation":{"reason":"string","replacementExtensions":["string"]}}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/extensions-testing/v1/initialize"


            payload = {"extensionData": {
                    "id": "076f4188-05e0-4ed3-afeb-653ad182ccb7",
                    "name": "I love chocolate",
                    "description": "Chocolate is full of love",
                    "excerpt": "Chocolate is full of love",
                    "image": "string",
                    "darkModeImage": "string",
                    "labels": ["cocoa", "sugar"],
                    "version": "v1.0.13",
                    "items": [
                        {
                            "name": "Low cocoa content",
                            "description": "Less than 60% cocoa",
                            "targetDomain": "ACTION",
                            "data": {},
                            "binaries": [
                                {
                                    "type": "PREVIEW_IMAGE",
                                    "data": "string",
                                    "fileName": "string"
                                }
                            ],
                            "isMandatory": True,
                            "internalId": 0,
                            "uniqueId": "string",
                            "permissionResource": "UNKNOWN"
                        }
                    ],
                    "integrationDetails": [
                        {
                            "name": "string",
                            "link": "string"
                        }
                    ],
                    "isHidden": False,
                    "binaries": [
                        {
                            "type": "KIBANA_INDEX_PATTERN",
                            "data": "string"
                        }
                    ],
                    "integrations": ["string"],
                    "keywords": ["string"],
                    "changelog": [
                        {
                            "version": "string",
                            "descriptionMd": "string"
                        }
                    ],
                    "deprecation": {
                        "reason": "string",
                        "replacementExtensions": ["string"]
                    }
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/extensions-testing/v1/initialize \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"extensionData":{"id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","name":"I love chocolate","description":"Chocolate is full of love","excerpt":"Chocolate is full of love","image":"string","darkModeImage":"string","labels":["cocoa","sugar"],"version":"v1.0.13","items":[{"name":"Low cocoa content","description":"Less than 60% cocoa","targetDomain":"ACTION","data":{},"binaries":[{"type":"PREVIEW_IMAGE","data":"string","fileName":"string"}],"isMandatory":true,"internalId":0,"uniqueId":"string","permissionResource":"UNKNOWN"}],"integrationDetails":[{"name":"string","link":"string"}],"isHidden":false,"binaries":[{"type":"KIBANA_INDEX_PATTERN","data":"string"}],"integrations":["string"],"keywords":["string"],"changelog":[{"version":"string","descriptionMd":"string"}],"deprecation":{"reason":"string","replacementExtensions":["string"]}}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /extensions-testing/v1/test:
    post:
      operationId: ExtensionTestingService_TestExtensionRevision
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestExtensionRevisionResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestExtensionRevisionRequest'
        required: true
      tags:
        - ExtensionTestingService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/extensions-testing/v1/test';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"extensionData":{"id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","name":"I love chocolate","description":"Chocolate is full of love","excerpt":"Chocolate is full of love","image":"string","darkModeImage":"string","labels":["cocoa","sugar"],"version":"v1.0.13","items":[{"name":"Low cocoa content","description":"Less than 60% cocoa","targetDomain":"ACTION","data":{},"binaries":[{"type":"PREVIEW_IMAGE","data":"string","fileName":"string"}],"isMandatory":true,"internalId":0,"uniqueId":"string","permissionResource":"UNKNOWN"}],"integrationDetails":[{"name":"string","link":"string"}],"isHidden":false,"binaries":[{"type":"KIBANA_INDEX_PATTERN","data":"string"}],"integrations":["string"],"keywords":["string"],"changelog":[{"version":"string","descriptionMd":"string"}],"deprecation":{"reason":"string","replacementExtensions":["string"]}},"cleanupAfterTest":true}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/extensions-testing/v1/test"


            payload = {
                "extensionData": {
                    "id": "076f4188-05e0-4ed3-afeb-653ad182ccb7",
                    "name": "I love chocolate",
                    "description": "Chocolate is full of love",
                    "excerpt": "Chocolate is full of love",
                    "image": "string",
                    "darkModeImage": "string",
                    "labels": ["cocoa", "sugar"],
                    "version": "v1.0.13",
                    "items": [
                        {
                            "name": "Low cocoa content",
                            "description": "Less than 60% cocoa",
                            "targetDomain": "ACTION",
                            "data": {},
                            "binaries": [
                                {
                                    "type": "PREVIEW_IMAGE",
                                    "data": "string",
                                    "fileName": "string"
                                }
                            ],
                            "isMandatory": True,
                            "internalId": 0,
                            "uniqueId": "string",
                            "permissionResource": "UNKNOWN"
                        }
                    ],
                    "integrationDetails": [
                        {
                            "name": "string",
                            "link": "string"
                        }
                    ],
                    "isHidden": False,
                    "binaries": [
                        {
                            "type": "KIBANA_INDEX_PATTERN",
                            "data": "string"
                        }
                    ],
                    "integrations": ["string"],
                    "keywords": ["string"],
                    "changelog": [
                        {
                            "version": "string",
                            "descriptionMd": "string"
                        }
                    ],
                    "deprecation": {
                        "reason": "string",
                        "replacementExtensions": ["string"]
                    }
                },
                "cleanupAfterTest": True
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/extensions-testing/v1/test \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"extensionData":{"id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","name":"I love chocolate","description":"Chocolate is full of love","excerpt":"Chocolate is full of love","image":"string","darkModeImage":"string","labels":["cocoa","sugar"],"version":"v1.0.13","items":[{"name":"Low cocoa content","description":"Less than 60% cocoa","targetDomain":"ACTION","data":{},"binaries":[{"type":"PREVIEW_IMAGE","data":"string","fileName":"string"}],"isMandatory":true,"internalId":0,"uniqueId":"string","permissionResource":"UNKNOWN"}],"integrationDetails":[{"name":"string","link":"string"}],"isHidden":false,"binaries":[{"type":"KIBANA_INDEX_PATTERN","data":"string"}],"integrations":["string"],"keywords":["string"],"changelog":[{"version":"string","descriptionMd":"string"}],"deprecation":{"reason":"string","replacementExtensions":["string"]}},"cleanupAfterTest":true}'
      x-hideTryItPanel: false
      x-showConsole: true
  /extensions-testing/v1/validate-items:
    post:
      operationId: ExtensionContentManagementService_ValidateExtensionItems
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ValidateExtensionItemsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody: *ref_0
      tags:
        - ExtensionContentManagementService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/extensions-testing/v1/validate-items';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","name":"I love chocolate","description":"Chocolate is full of love","excerpt":"Chocolate is full of love","image":"string","darkModeImage":"string","labels":["cocoa","sugar"],"version":"v1.0.13","items":[{"name":"Low cocoa content","description":"Less than 60% cocoa","targetDomain":"ACTION","data":{},"binaries":[{"type":"PREVIEW_IMAGE","data":"string","fileName":"string"}],"isMandatory":true,"internalId":0,"uniqueId":"string","permissionResource":"UNKNOWN"}],"integrationDetails":[{"name":"string","link":"string"}],"isHidden":false,"binaries":[{"type":"KIBANA_INDEX_PATTERN","data":"string"}],"integrations":["string"],"keywords":["string"],"changelog":[{"version":"string","descriptionMd":"string"}],"deprecation":{"reason":"string","replacementExtensions":["string"]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/extensions-testing/v1/validate-items"


            payload = {
                "id": "076f4188-05e0-4ed3-afeb-653ad182ccb7",
                "name": "I love chocolate",
                "description": "Chocolate is full of love",
                "excerpt": "Chocolate is full of love",
                "image": "string",
                "darkModeImage": "string",
                "labels": ["cocoa", "sugar"],
                "version": "v1.0.13",
                "items": [
                    {
                        "name": "Low cocoa content",
                        "description": "Less than 60% cocoa",
                        "targetDomain": "ACTION",
                        "data": {},
                        "binaries": [
                            {
                                "type": "PREVIEW_IMAGE",
                                "data": "string",
                                "fileName": "string"
                            }
                        ],
                        "isMandatory": True,
                        "internalId": 0,
                        "uniqueId": "string",
                        "permissionResource": "UNKNOWN"
                    }
                ],
                "integrationDetails": [
                    {
                        "name": "string",
                        "link": "string"
                    }
                ],
                "isHidden": False,
                "binaries": [
                    {
                        "type": "KIBANA_INDEX_PATTERN",
                        "data": "string"
                    }
                ],
                "integrations": ["string"],
                "keywords": ["string"],
                "changelog": [
                    {
                        "version": "string",
                        "descriptionMd": "string"
                    }
                ],
                "deprecation": {
                    "reason": "string",
                    "replacementExtensions": ["string"]
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/extensions-testing/v1/validate-items \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","name":"I love chocolate","description":"Chocolate is full of love","excerpt":"Chocolate is full of love","image":"string","darkModeImage":"string","labels":["cocoa","sugar"],"version":"v1.0.13","items":[{"name":"Low cocoa content","description":"Less than 60% cocoa","targetDomain":"ACTION","data":{},"binaries":[{"type":"PREVIEW_IMAGE","data":"string","fileName":"string"}],"isMandatory":true,"internalId":0,"uniqueId":"string","permissionResource":"UNKNOWN"}],"integrationDetails":[{"name":"string","link":"string"}],"isHidden":false,"binaries":[{"type":"KIBANA_INDEX_PATTERN","data":"string"}],"integrations":["string"],"keywords":["string"],"changelog":[{"version":"string","descriptionMd":"string"}],"deprecation":{"reason":"string","replacementExtensions":["string"]}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /extensions/v1/all:
    post:
      operationId: ExtensionService_GetAllExtensions
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetAllExtensionsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1GetAllExtensionsRequest'
        description: Request to list all extensions
        required: true
      tags:
        - ExtensionService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/extensions/v1/all';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"includeHiddenExtensions":true,"filter":{"integrations":["string"]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/extensions/v1/all"


            payload = {
                "includeHiddenExtensions": True,
                "filter": {"integrations": ["string"]}
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/extensions/v1/all \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"includeHiddenExtensions":true,"filter":{"integrations":["string"]}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /extensions/v1/{id}:
    get:
      operationId: ExtensionService_GetExtension
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/extensionsv1Extension'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: includeDashboardBinaries
          description: >-
            On the frontend, we don't need the dashboard binaries.

            But we need them for deployment in the extensions-service - so it's
            kind of temporary argument,

            so as soon all the deployment logic is moved to the extensions-api,
            it can be removed.
          in: query
          required: false
          schema:
            type: boolean
        - name: includeTestingRevision
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - ExtensionService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/extensions/v1/%7Bid%7D?includeDashboardBinaries=SOME_BOOLEAN_VALUE&includeTestingRevision=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/extensions/v1/%7Bid%7D"


            querystring =
            {"includeDashboardBinaries":"SOME_BOOLEAN_VALUE","includeTestingRevision":"SOME_BOOLEAN_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/extensions/v1/%7Bid%7D?includeDashboardBinaries=SOME_BOOLEAN_VALUE&includeTestingRevision=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /integrations/v1/check-permission:
    post:
      operationId: PermissionCheckService_CheckApiKeyPermission
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CheckApiKeyPermissionResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CheckApiKeyPermissionRequest'
        required: true
      tags:
        - PermissionCheckService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/v1/check-permission';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"permission":{"resource":{"id":0},"action":{"id":0}},"apiKey":{"key":"string"},"permissionId":{"id":0}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/v1/check-permission"


            payload = {
                "permission": {
                    "resource": {"id": 0},
                    "action": {"id": 0}
                },
                "apiKey": {"key": "string"},
                "permissionId": {"id": 0}
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/integrations/v1/check-permission \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"permission":{"resource":{"id":0},"action":{"id":0}},"apiKey":{"key":"string"},"permissionId":{"id":0}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /internal-onboarding/v1/deploy-extension:
    post:
      operationId: InternalOnboardingService_InternalDeployExtension
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1InternalDeployExtensionResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1InternalDeployExtensionRequest'
        required: true
      tags:
        - InternalOnboardingService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/internal-onboarding/v1/deploy-extension';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"companyId":"string","id":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/internal-onboarding/v1/deploy-extension"


            payload = {
                "companyId": "string",
                "id": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/internal-onboarding/v1/deploy-extension \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"companyId":"string","id":"string"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /metrics-tco:
    get:
      operationId: MetricsTcoService_Get
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metrics_tcoGetResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - MetricsTcoService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/metrics-tco';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/metrics-tco"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/metrics-tco \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /metrics-tco/add:
    post:
      operationId: MetricsTcoService_Add
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metrics_tcoAddRequest'
        description: This data structure is used to add a metrics tco rule.
        required: true
      tags:
        - MetricsTcoService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/metrics-tco/add';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"label":"rule1","regex":".*"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/metrics-tco/add"


            payload = {
                "label": "rule1",
                "regex": ".*"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/metrics-tco/add \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"label":"rule1","regex":".*"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /metrics-tco/delete:
    post:
      operationId: MetricsTcoService_Delete
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metrics_tcoDeleteRequest'
        required: true
      tags:
        - MetricsTcoService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/metrics-tco/delete';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"ruleId":1}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/metrics-tco/delete"


            payload = {"ruleId": 1}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/metrics-tco/delete \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"ruleId":1}'
      x-hideTryItPanel: false
      x-showConsole: true
  /push-based/v1/count:
    post:
      operationId: >-
        PushBasedContextualDataIntegrationService_CountPushBasedContextualDataIntegrations
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/v1CountPushBasedContextualDataIntegrationsResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/v1CountPushBasedContextualDataIntegrationsRequest
        description: >-
          Request to return the number of Push Based Contextual Data Integration
          by a given platform
        required: true
      tags:
        - PushBasedContextualDataIntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/push-based/v1/count';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"platform":"UNDEFINED"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/push-based/v1/count"


            payload = {"platform": "UNDEFINED"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/push-based/v1/count \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"platform":"UNDEFINED"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /push-based/v1/create:
    post:
      operationId: >-
        PushBasedContextualDataIntegrationService_CreatePushBasedContextualDataIntegration
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreatePushBasedIntegrationResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CreatePushBasedIntegrationRequest'
        description: Creates a new push based integration for different type of sources
        required: true
      tags:
        - PushBasedContextualDataIntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/push-based/v1/create';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"bitbucket":{"internalTokenId":"076f4188-05e0-4ed3-afeb-653ad182ccb7"},"amazonSns":{"internalTokenId":"076f4188-05e0-4ed3-afeb-653ad182ccb7"},"pagerDuty":{"internalTokenId":"076f4188-05e0-4ed3-afeb-653ad182ccb7"},"github":{"internalTokenId":"076f4188-05e0-4ed3-afeb-653ad182ccb7"},"gitlab":{"internalTokenId":"076f4188-05e0-4ed3-afeb-653ad182ccb7"},"opsgenie":{"internalTokenId":"076f4188-05e0-4ed3-afeb-653ad182ccb7"},"prometheus":{"internalTokenId":"076f4188-05e0-4ed3-afeb-653ad182ccb7"},"intercom":{"token":"076f4188-05e0-4ed3-afeb-653ad182ccb7"},"slack":{"internalTokenId":"076f4188-05e0-4ed3-afeb-653ad182ccb7"},"name":"I love chocolate","application":"authorization","subsystem":"token_validator"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/push-based/v1/create"


            payload = {
                "bitbucket": {"internalTokenId": "076f4188-05e0-4ed3-afeb-653ad182ccb7"},
                "amazonSns": {"internalTokenId": "076f4188-05e0-4ed3-afeb-653ad182ccb7"},
                "pagerDuty": {"internalTokenId": "076f4188-05e0-4ed3-afeb-653ad182ccb7"},
                "github": {"internalTokenId": "076f4188-05e0-4ed3-afeb-653ad182ccb7"},
                "gitlab": {"internalTokenId": "076f4188-05e0-4ed3-afeb-653ad182ccb7"},
                "opsgenie": {"internalTokenId": "076f4188-05e0-4ed3-afeb-653ad182ccb7"},
                "prometheus": {"internalTokenId": "076f4188-05e0-4ed3-afeb-653ad182ccb7"},
                "intercom": {"token": "076f4188-05e0-4ed3-afeb-653ad182ccb7"},
                "slack": {"internalTokenId": "076f4188-05e0-4ed3-afeb-653ad182ccb7"},
                "name": "I love chocolate",
                "application": "authorization",
                "subsystem": "token_validator"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/push-based/v1/create \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"bitbucket":{"internalTokenId":"076f4188-05e0-4ed3-afeb-653ad182ccb7"},"amazonSns":{"internalTokenId":"076f4188-05e0-4ed3-afeb-653ad182ccb7"},"pagerDuty":{"internalTokenId":"076f4188-05e0-4ed3-afeb-653ad182ccb7"},"github":{"internalTokenId":"076f4188-05e0-4ed3-afeb-653ad182ccb7"},"gitlab":{"internalTokenId":"076f4188-05e0-4ed3-afeb-653ad182ccb7"},"opsgenie":{"internalTokenId":"076f4188-05e0-4ed3-afeb-653ad182ccb7"},"prometheus":{"internalTokenId":"076f4188-05e0-4ed3-afeb-653ad182ccb7"},"intercom":{"token":"076f4188-05e0-4ed3-afeb-653ad182ccb7"},"slack":{"internalTokenId":"076f4188-05e0-4ed3-afeb-653ad182ccb7"},"name":"I love chocolate","application":"authorization","subsystem":"token_validator"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /push-based/v1/delete:
    post:
      operationId: >-
        PushBasedContextualDataIntegrationService_DeletePushBasedContextualDataIntegration
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/v1DeletePushBasedContextualDataIntegrationResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/v1DeletePushBasedContextualDataIntegrationRequest
        description: Request to delete a push based contextual data integration
        required: true
      tags:
        - PushBasedContextualDataIntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/push-based/v1/delete';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"076f4188-05e0-4ed3-afeb-653ad182ccb7"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/push-based/v1/delete"


            payload = {"id": "076f4188-05e0-4ed3-afeb-653ad182ccb7"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/push-based/v1/delete \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"076f4188-05e0-4ed3-afeb-653ad182ccb7"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /push-based/v1/list:
    post:
      operationId: >-
        PushBasedContextualDataIntegrationService_ListPushBasedContextualDataIntegrations
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/v1ListPushBasedContextualDataIntegrationsResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/v1ListPushBasedContextualDataIntegrationsRequest
        description: Requests all the registered integrations for a given platform
        required: true
      tags:
        - PushBasedContextualDataIntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/push-based/v1/list';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"platform":"UNDEFINED"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/push-based/v1/list"


            payload = {"platform": "UNDEFINED"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/push-based/v1/list \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"platform":"UNDEFINED"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /push-based/v1/update:
    post:
      operationId: >-
        PushBasedContextualDataIntegrationService_UpdatePushBasedContextualDataIntegration
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/v1UpdatePushBasedContextualDataIntegrationsResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/v1UpdatePushBasedContextualDataIntegrationsRequest
        description: Request to updated a Push Based ContextualData Integration by id
        required: true
      tags:
        - PushBasedContextualDataIntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/push-based/v1/update';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","name":"I love chocolate","application":"authorization","subsystem":"token_validator"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/push-based/v1/update"


            payload = {
                "id": "076f4188-05e0-4ed3-afeb-653ad182ccb7",
                "name": "I love chocolate",
                "application": "authorization",
                "subsystem": "token_validator"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/push-based/v1/update \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","name":"I love chocolate","application":"authorization","subsystem":"token_validator"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /quota/v1/quotas:
    get:
      operationId: QuotaService_GetQuotas
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetQuotasResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - QuotaService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/quota/v1/quotas';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/quota/v1/quotas"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/quota/v1/quotas \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/enrichment:
    get:
      operationId: EnrichmentService_GetEnrichments
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetEnrichmentsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - EnrichmentService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v1/enrichment';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/enrichment"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/enrichment \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    delete:
      operationId: EnrichmentService_RemoveEnrichments
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1RemoveEnrichmentsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: enrichmentIds
          in: query
          required: true
          explode: true
          schema:
            type: array
            items:
              type: integer
              format: int64
      tags:
        - EnrichmentService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/enrichment?enrichmentIds=SOME_ARRAY_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/enrichment"


            querystring = {"enrichmentIds":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/enrichment?enrichmentIds=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      operationId: EnrichmentService_AddEnrichments
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1AddEnrichmentsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1AddEnrichmentsRequest'
        description: A request to add a collection of enrichments.
        required: true
      tags:
        - EnrichmentService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/enrichment';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestEnrichments":[{"fieldName":"sourceIPs","enrichmentType":{"geoIp":{"withAsn":true},"suspiciousIp":{},"aws":{"resourceType":"ec2"},"customEnrichment":{"id":1}},"enrichedFieldName":"string"}]}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/enrichment"


            payload = {"requestEnrichments": [
                    {
                        "fieldName": "sourceIPs",
                        "enrichmentType": {
                            "geoIp": {"withAsn": True},
                            "suspiciousIp": {},
                            "aws": {"resourceType": "ec2"},
                            "customEnrichment": {"id": 1}
                        },
                        "enrichedFieldName": "string"
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/enrichment \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestEnrichments":[{"fieldName":"sourceIPs","enrichmentType":{"geoIp":{"withAsn":true},"suspiciousIp":{},"aws":{"resourceType":"ec2"},"customEnrichment":{"id":1}},"enrichedFieldName":"string"}]}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/enrichment/aws/supported-resource-types:
    get:
      operationId: AwsEnrichmentService_GetSupportedAwsResourceTypes
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetSupportedAwsResourceTypesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - AwsEnrichmentService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/enrichment/aws/supported-resource-types';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/enrichment/aws/supported-resource-types"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/enrichment/aws/supported-resource-types \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/enrichment/company-settings:
    get:
      operationId: EnrichmentService_GetCompanyEnrichmentSettings
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetCompanyEnrichmentSettingsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - EnrichmentService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/enrichment/company-settings';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/enrichment/company-settings"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/enrichment/company-settings \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/enrichment/custom:
    get:
      operationId: CustomEnrichmentService_GetCustomEnrichments
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetCustomEnrichmentsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - CustomEnrichmentService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/enrichment/custom';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/enrichment/custom"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/enrichment/custom \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      operationId: CustomEnrichmentService_CreateCustomEnrichment
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateCustomEnrichmentResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CreateCustomEnrichmentRequest'
        description: >-
          This request data structure is used to create a Custom Enrichment
          instance.
        required: true
      tags:
        - CustomEnrichmentService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/enrichment/custom';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"custom_enrichment_name","file":{"name":"file_name","extension":"csv","textual":"row1,row2 value1,value2","binary":"0xFABB32"},"description":"custom_enrichment_description"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/enrichment/custom"


            payload = {
                "name": "custom_enrichment_name",
                "file": {
                    "name": "file_name",
                    "extension": "csv",
                    "textual": "row1,row2 value1,value2",
                    "binary": "0xFABB32"
                },
                "description": "custom_enrichment_description"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/enrichment/custom \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"custom_enrichment_name","file":{"name":"file_name","extension":"csv","textual":"row1,row2 value1,value2","binary":"0xFABB32"},"description":"custom_enrichment_description"}'
      x-hideTryItPanel: false
      x-showConsole: true
    put:
      operationId: CustomEnrichmentService_UpdateCustomEnrichment
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdateCustomEnrichmentResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UpdateCustomEnrichmentRequest'
        description: >-
          This request data structure is used to update a Custom Enrichment
          instance.
        required: true
      tags:
        - CustomEnrichmentService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/enrichment/custom';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"customEnrichmentId":1,"name":"custom_enrichment_name","description":"custom_enrichment_description","file":{"name":"file_name","extension":"csv","textual":"row1,row2 value1,value2","binary":"0xFABB32"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/enrichment/custom"


            payload = {
                "customEnrichmentId": 1,
                "name": "custom_enrichment_name",
                "description": "custom_enrichment_description",
                "file": {
                    "name": "file_name",
                    "extension": "csv",
                    "textual": "row1,row2 value1,value2",
                    "binary": "0xFABB32"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/enrichment/custom \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"customEnrichmentId":1,"name":"custom_enrichment_name","description":"custom_enrichment_description","file":{"name":"file_name","extension":"csv","textual":"row1,row2 value1,value2","binary":"0xFABB32"}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/enrichment/custom/{customEnrichmentId}:
    delete:
      operationId: CustomEnrichmentService_DeleteCustomEnrichment
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeleteCustomEnrichmentResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: customEnrichmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - CustomEnrichmentService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/enrichment/custom/%7BcustomEnrichmentId%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/enrichment/custom/%7BcustomEnrichmentId%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/enrichment/custom/%7BcustomEnrichmentId%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/enrichment/custom/{id}:
    get:
      summary: Get a custom enrichment instance by ID
      operationId: Get Custom Enrichment
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetCustomEnrichmentResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - Custom Enrichment service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/enrichment/custom/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/enrichment/custom/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/enrichment/custom/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/enrichment/custom:search:
    get:
      operationId: CustomEnrichmentService_SearchCustomEnrichmentData
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1SearchCustomEnrichmentDataResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - CustomEnrichmentService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/enrichment/custom:search';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/enrichment/custom:search"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/enrichment/custom:search \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/enrichment/internal:
    get:
      operationId: EnrichmentInternalService_GetInternalEnrichments
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetInternalEnrichmentsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - EnrichmentInternalService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/enrichment/internal';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/enrichment/internal"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/enrichment/internal \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    delete:
      operationId: EnrichmentInternalService_RemoveInternalEnrichments
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1RemoveInternalEnrichmentsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: enrichmentIds
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: integer
              format: int64
      tags:
        - EnrichmentInternalService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/enrichment/internal?enrichmentIds=SOME_ARRAY_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/enrichment/internal"


            querystring = {"enrichmentIds":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/enrichment/internal?enrichmentIds=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      operationId: EnrichmentInternalService_AddInternalEnrichments
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1AddInternalEnrichmentsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1AddInternalEnrichmentsRequest'
        required: true
      tags:
        - EnrichmentInternalService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/enrichment/internal';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestEnrichments":[{"fieldName":"sourceIPs","enrichmentType":{"geoIp":{"withAsn":true},"suspiciousIp":{},"aws":{"resourceType":"ec2"},"customEnrichment":{"id":1}},"enrichedFieldName":"string"}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/enrichment/internal"


            payload = {"requestEnrichments": [
                    {
                        "fieldName": "sourceIPs",
                        "enrichmentType": {
                            "geoIp": {"withAsn": True},
                            "suspiciousIp": {},
                            "aws": {"resourceType": "ec2"},
                            "customEnrichment": {"id": 1}
                        },
                        "enrichedFieldName": "string"
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/enrichment/internal \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestEnrichments":[{"fieldName":"sourceIPs","enrichmentType":{"geoIp":{"withAsn":true},"suspiciousIp":{},"aws":{"resourceType":"ec2"},"customEnrichment":{"id":1}},"enrichedFieldName":"string"}]}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/enrichment/limit:
    get:
      operationId: EnrichmentService_GetEnrichmentLimit
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetEnrichmentLimitResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - EnrichmentService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/enrichment/limit';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/enrichment/limit"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/enrichment/limit \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/enrichment:overwrite:
    post:
      operationId: EnrichmentService_AtomicOverwriteEnrichments
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1AtomicOverwriteEnrichmentsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1AtomicOverwriteEnrichmentsRequest'
        description: >-
          A request to delete all enrichments of a given type and replace them
          with new ones.
        required: true
      tags:
        - EnrichmentService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/enrichment:overwrite';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"enrichmentType":{"geoIp":{"withAsn":true},"suspiciousIp":{},"aws":{"resourceType":"ec2"},"customEnrichment":{"id":1}},"enrichmentFields":[{"fieldName":"string","enrichedFieldName":"string"}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/enrichment:overwrite"


            payload = {
                "enrichmentType": {
                    "geoIp": {"withAsn": True},
                    "suspiciousIp": {},
                    "aws": {"resourceType": "ec2"},
                    "customEnrichment": {"id": 1}
                },
                "enrichmentFields": [
                    {
                        "fieldName": "string",
                        "enrichedFieldName": "string"
                    }
                ]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/enrichment:overwrite \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"enrichmentType":{"geoIp":{"withAsn":true},"suspiciousIp":{},"aws":{"resourceType":"ec2"},"customEnrichment":{"id":1}},"enrichmentFields":[{"fieldName":"string","enrichedFieldName":"string"}]}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/external-tokens:
    post:
      operationId: ExternalTokenService_GenerateNewToken
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GenerateNewTokenResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: platform
          in: query
          required: false
          schema:
            type: string
            enum:
              - UNDEFINED
              - PLATFORM_BITBUCKET
              - PLATFORM_GITHUB
              - PLATFORM_GITLAB
              - PLATFORM_AWS_SNS
              - PLATFORM_OPSGENIE
              - PLATFORM_PAGERDUTY
              - PLATFORM_PROMETHEUS
              - PLATFORM_SLACK
              - PLATFORM_INTERCOM
            default: UNDEFINED
      tags:
        - ExternalTokenService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/external-tokens?platform=SOME_STRING_VALUE';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/external-tokens"


            querystring = {"platform":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/external-tokens?platform=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/external-tokens/{id}:
    put:
      operationId: ExternalTokenService_UpdateToken
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdateTokenResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - ExternalTokenService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/external-tokens/%7Bid%7D';


            let options = {method: 'PUT', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/external-tokens/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("PUT", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/external-tokens/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/integrations:
    get:
      operationId: IntegrationService_GetIntegrations
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetIntegrationsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: includeTestingRevision
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - IntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations?includeTestingRevision=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/integrations"


            querystring = {"includeTestingRevision":"SOME_BOOLEAN_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/integrations?includeTestingRevision=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/integrations/definition/{id}:
    get:
      operationId: IntegrationService_GetIntegrationDefinition
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetIntegrationDefinitionResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: includeTestingRevision
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - IntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/definition/%7Bid%7D?includeTestingRevision=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/definition/%7Bid%7D"


            querystring = {"includeTestingRevision":"SOME_BOOLEAN_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/integrations/definition/%7Bid%7D?includeTestingRevision=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/integrations/deployed/{integrationId}:
    get:
      operationId: IntegrationService_GetDeployedIntegration
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetDeployedIntegrationResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
      tags:
        - IntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/deployed/%7BintegrationId%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/deployed/%7BintegrationId%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/integrations/deployed/%7BintegrationId%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/integrations/instance/{integrationId}:
    delete:
      operationId: IntegrationService_DeleteIntegration
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeleteIntegrationResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
      tags:
        - IntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/instance/%7BintegrationId%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/instance/%7BintegrationId%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/integrations/instance/%7BintegrationId%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/integrations/managed/list:
    get:
      operationId: IntegrationService_ListManagedIntegrationKeys
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListManagedIntegrationKeysResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - IntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/managed/list';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/managed/list"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/integrations/managed/list \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/integrations/managed/status/{integrationId}:
    get:
      operationId: IntegrationService_GetManagedIntegrationStatus
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetManagedIntegrationStatusResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
      tags:
        - IntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/managed/status/%7BintegrationId%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/managed/status/%7BintegrationId%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/integrations/managed/status/%7BintegrationId%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/integrations/metadata:
    post:
      operationId: IntegrationService_SaveIntegration
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1SaveIntegrationResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1SaveIntegrationRequest'
        description: This data structure represents a request to save an integration.
        required: true
      tags:
        - IntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/metadata';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"metadata":{"integrationKey":"string","version":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string","booleanValue":true,"stringList":{"values":["string"]},"apiKey":{"id":"string","value":"string"},"numericValue":0.1,"sensitiveData":{}}]}}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/metadata"


            payload = {"metadata": {
                    "integrationKey": "string",
                    "version": "string",
                    "integrationParameters": {"parameters": [
                            {
                                "key": "string",
                                "stringValue": "string",
                                "booleanValue": True,
                                "stringList": {"values": ["string"]},
                                "apiKey": {
                                    "id": "string",
                                    "value": "string"
                                },
                                "numericValue": 0.1,
                                "sensitiveData": {}
                            }
                        ]}
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/integrations/metadata \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"metadata":{"integrationKey":"string","version":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string","booleanValue":true,"stringList":{"values":["string"]},"apiKey":{"id":"string","value":"string"},"numericValue":0.1,"sensitiveData":{}}]}}}'
      x-hideTryItPanel: false
      x-showConsole: true
    put:
      operationId: IntegrationService_UpdateIntegration
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdateIntegrationResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UpdateIntegrationRequest'
        description: This data structure represents a list of outgoing webhook types.
        required: true
      tags:
        - IntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/metadata';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"string","metadata":{"integrationKey":"string","version":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string","booleanValue":true,"stringList":{"values":["string"]},"apiKey":{"id":"string","value":"string"},"numericValue":0.1,"sensitiveData":{}}]}}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/metadata"


            payload = {
                "id": "string",
                "metadata": {
                    "integrationKey": "string",
                    "version": "string",
                    "integrationParameters": {"parameters": [
                            {
                                "key": "string",
                                "stringValue": "string",
                                "booleanValue": True,
                                "stringList": {"values": ["string"]},
                                "apiKey": {
                                    "id": "string",
                                    "value": "string"
                                },
                                "numericValue": 0.1,
                                "sensitiveData": {}
                            }
                        ]}
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/integrations/metadata \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"string","metadata":{"integrationKey":"string","version":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string","booleanValue":true,"stringList":{"values":["string"]},"apiKey":{"id":"string","value":"string"},"numericValue":0.1,"sensitiveData":{}}]}}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/integrations/metadata/test:
    post:
      operationId: IntegrationService_TestIntegration
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestIntegrationResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestIntegrationRequest'
        description: This data structure represents a request to test an integration.
        required: true
      tags:
        - IntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/metadata/test';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"integrationData":{"integrationKey":"string","version":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string","booleanValue":true,"stringList":{"values":["string"]},"apiKey":{"id":"string","value":"string"},"numericValue":0.1,"sensitiveData":{}}]}},"integrationId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/metadata/test"


            payload = {
                "integrationData": {
                    "integrationKey": "string",
                    "version": "string",
                    "integrationParameters": {"parameters": [
                            {
                                "key": "string",
                                "stringValue": "string",
                                "booleanValue": True,
                                "stringList": {"values": ["string"]},
                                "apiKey": {
                                    "id": "string",
                                    "value": "string"
                                },
                                "numericValue": 0.1,
                                "sensitiveData": {}
                            }
                        ]}
                },
                "integrationId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/integrations/metadata/test \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"integrationData":{"integrationKey":"string","version":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string","booleanValue":true,"stringList":{"values":["string"]},"apiKey":{"id":"string","value":"string"},"numericValue":0.1,"sensitiveData":{}}]}},"integrationId":"string"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/integrations/rum/app-versions:
    get:
      operationId: IntegrationService_GetRumApplicationVersionData
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetRumApplicationVersionDataResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: applicationName
          in: query
          required: false
          schema:
            type: string
      tags:
        - IntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/rum/app-versions?applicationName=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/rum/app-versions"


            querystring = {"applicationName":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/integrations/rum/app-versions?applicationName=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/integrations/rum/sync:
    post:
      operationId: IntegrationService_SyncRumData
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1SyncRumDataResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1SyncRumDataRequest'
        description: This data structure is a request to trigger a sync of RUM data.
        required: true
      tags:
        - IntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/rum/sync';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"force":true}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/rum/sync"


            payload = {"force": True}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/integrations/rum/sync \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"force":true}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/integrations/template:
    get:
      operationId: IntegrationService_GetTemplate
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetTemplateResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: integrationId
          in: query
          required: false
          schema:
            type: string
        - name: commonArmParams.logsUrl
          in: query
          required: false
          schema:
            type: string
        - name: commonArmParams.apiKey
          in: query
          required: false
          schema:
            type: string
        - name: commonArmParams.cgxDomain
          in: query
          required: false
          schema:
            type: string
      tags:
        - IntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/template?integrationId=SOME_STRING_VALUE&commonArmParams.logsUrl=SOME_STRING_VALUE&commonArmParams.apiKey=SOME_STRING_VALUE&commonArmParams.cgxDomain=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/template"


            querystring =
            {"integrationId":"SOME_STRING_VALUE","commonArmParams.logsUrl":"SOME_STRING_VALUE","commonArmParams.apiKey":"SOME_STRING_VALUE","commonArmParams.cgxDomain":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/integrations/template?integrationId=SOME_STRING_VALUE&commonArmParams.logsUrl=SOME_STRING_VALUE&commonArmParams.apiKey=SOME_STRING_VALUE&commonArmParams.cgxDomain=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/integrations/{id}:
    get:
      operationId: IntegrationService_GetIntegrationDetails
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetIntegrationDetailsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: includeTestingRevision
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - IntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/%7Bid%7D?includeTestingRevision=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/%7Bid%7D"


            querystring = {"includeTestingRevision":"SOME_BOOLEAN_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/integrations/%7Bid%7D?includeTestingRevision=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/metrics-archive:
    get:
      operationId: MetricsConfiguratorPublicService_GetTenantConfig
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/metrics_configuratorGetTenantConfigResponseV2
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - MetricsConfiguratorPublicService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/metrics-archive';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/metrics-archive"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/metrics-archive \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      operationId: MetricsConfiguratorPublicService_ConfigureTenant
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metrics_configuratorConfigureTenantRequest'
        description: This data structure is used to configure a tenant.
        required: true
      tags:
        - MetricsConfiguratorPublicService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/metrics-archive';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"retentionPolicy":{"rawResolution":1,"fiveMinutesResolution":2,"oneHourResolution":3},"ibm":{"endpoint":"s3.us-south.cloud-object-storage.appdomain.cloud","crn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::","serviceCrn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"},"s3":{"bucket":"string","region":"string"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/metrics-archive"


            payload = {
                "retentionPolicy": {
                    "rawResolution": 1,
                    "fiveMinutesResolution": 2,
                    "oneHourResolution": 3
                },
                "ibm": {
                    "endpoint": "s3.us-south.cloud-object-storage.appdomain.cloud",
                    "crn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::",
                    "serviceCrn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"
                },
                "s3": {
                    "bucket": "string",
                    "region": "string"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/metrics-archive \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"retentionPolicy":{"rawResolution":1,"fiveMinutesResolution":2,"oneHourResolution":3},"ibm":{"endpoint":"s3.us-south.cloud-object-storage.appdomain.cloud","crn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::","serviceCrn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"},"s3":{"bucket":"string","region":"string"}}'
      x-hideTryItPanel: false
      x-showConsole: true
    put:
      operationId: MetricsConfiguratorPublicService_Update
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metrics_configuratorUpdateRequest'
        description: This data structure is used to update the configuration of a tenant.
        required: true
      tags:
        - MetricsConfiguratorPublicService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/metrics-archive';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"retentionDays":0,"ibm":{"endpoint":"s3.us-south.cloud-object-storage.appdomain.cloud","crn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::","serviceCrn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"},"s3":{"bucket":"string","region":"string"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/metrics-archive"


            payload = {
                "retentionDays": 0,
                "ibm": {
                    "endpoint": "s3.us-south.cloud-object-storage.appdomain.cloud",
                    "crn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::",
                    "serviceCrn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"
                },
                "s3": {
                    "bucket": "string",
                    "region": "string"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/metrics-archive \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"retentionDays":0,"ibm":{"endpoint":"s3.us-south.cloud-object-storage.appdomain.cloud","crn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::","serviceCrn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"},"s3":{"bucket":"string","region":"string"}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/metrics-archive:disable:
    post:
      operationId: MetricsConfiguratorPublicService_DisableArchive
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - MetricsConfiguratorPublicService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/metrics-archive:disable';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/metrics-archive:disable"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/metrics-archive:disable \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/metrics-archive:enable:
    post:
      operationId: MetricsConfiguratorPublicService_EnableArchive
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - MetricsConfiguratorPublicService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/metrics-archive:enable';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/metrics-archive:enable"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/metrics-archive:enable \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/metrics-archive:validate:
    post:
      operationId: MetricsConfiguratorPublicService_ValidateBucket
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metrics_configuratorValidateBucketRequest'
        description: This data structure is used to validate a bucket.
        required: true
      tags:
        - MetricsConfiguratorPublicService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/metrics-archive:validate';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"ibm":{"endpoint":"s3.us-south.cloud-object-storage.appdomain.cloud","crn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::","serviceCrn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"},"s3":{"bucket":"string","region":"string"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/metrics-archive:validate"


            payload = {
                "ibm": {
                    "endpoint": "s3.us-south.cloud-object-storage.appdomain.cloud",
                    "crn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::",
                    "serviceCrn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"
                },
                "s3": {
                    "bucket": "string",
                    "region": "string"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/metrics-archive:validate \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"ibm":{"endpoint":"s3.us-south.cloud-object-storage.appdomain.cloud","crn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::","serviceCrn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"},"s3":{"bucket":"string","region":"string"}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/notification-center/connector:
    put:
      operationId: ConnectorsService_ReplaceConnector
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ReplaceConnectorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody: &ref_1
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1Connector'
        required: true
      tags:
        - ConnectorsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connector';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","userFacingId":"user-connector-id","type":"CONNECTOR_TYPE_UNSPECIFIED","teamId":"12345","name":"My Slack Connector","description":"Connector for team notifications","createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","connectorConfigs":[{"outputSchemaId":"schema-id","fields":[{"fieldName":"string","template":"string"}]}],"configOverrides":[{"entityType":"alerts","connectorConfigs":[{"outputSchemaId":"schema-id","fields":[{"fieldName":"string","template":"string"}]}]}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/connector"


            payload = {
                "id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "userFacingId": "user-connector-id",
                "type": "CONNECTOR_TYPE_UNSPECIFIED",
                "teamId": "12345",
                "name": "My Slack Connector",
                "description": "Connector for team notifications",
                "createTime": "2019-08-24T14:15:22Z",
                "updateTime": "2019-08-24T14:15:22Z",
                "connectorConfigs": [
                    {
                        "outputSchemaId": "schema-id",
                        "fields": [
                            {
                                "fieldName": "string",
                                "template": "string"
                            }
                        ]
                    }
                ],
                "configOverrides": [
                    {
                        "entityType": "alerts",
                        "connectorConfigs": [
                            {
                                "outputSchemaId": "schema-id",
                                "fields": [
                                    {
                                        "fieldName": "string",
                                        "template": "string"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/connector \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","userFacingId":"user-connector-id","type":"CONNECTOR_TYPE_UNSPECIFIED","teamId":"12345","name":"My Slack Connector","description":"Connector for team notifications","createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","connectorConfigs":[{"outputSchemaId":"schema-id","fields":[{"fieldName":"string","template":"string"}]}],"configOverrides":[{"entityType":"alerts","connectorConfigs":[{"outputSchemaId":"schema-id","fields":[{"fieldName":"string","template":"string"}]}]}]}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/notification-center/connectors:
    get:
      operationId: ConnectorsService_ListConnectors
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListConnectorsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: connectorType
          in: query
          required: false
          schema:
            type: string
            enum:
              - CONNECTOR_TYPE_UNSPECIFIED
              - SLACK
              - GENERIC_HTTPS
              - PAGERDUTY
              - AWS
            default: CONNECTOR_TYPE_UNSPECIFIED
      tags:
        - ConnectorsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors?connectorType=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors"


            querystring = {"connectorType":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors?connectorType=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      operationId: ConnectorsService_CreateConnector
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateConnectorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody: *ref_1
      tags:
        - ConnectorsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","userFacingId":"user-connector-id","type":"CONNECTOR_TYPE_UNSPECIFIED","teamId":"12345","name":"My Slack Connector","description":"Connector for team notifications","createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","connectorConfigs":[{"outputSchemaId":"schema-id","fields":[{"fieldName":"string","template":"string"}]}],"configOverrides":[{"entityType":"alerts","connectorConfigs":[{"outputSchemaId":"schema-id","fields":[{"fieldName":"string","template":"string"}]}]}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors"


            payload = {
                "id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "userFacingId": "user-connector-id",
                "type": "CONNECTOR_TYPE_UNSPECIFIED",
                "teamId": "12345",
                "name": "My Slack Connector",
                "description": "Connector for team notifications",
                "createTime": "2019-08-24T14:15:22Z",
                "updateTime": "2019-08-24T14:15:22Z",
                "connectorConfigs": [
                    {
                        "outputSchemaId": "schema-id",
                        "fields": [
                            {
                                "fieldName": "string",
                                "template": "string"
                            }
                        ]
                    }
                ],
                "configOverrides": [
                    {
                        "entityType": "alerts",
                        "connectorConfigs": [
                            {
                                "outputSchemaId": "schema-id",
                                "fields": [
                                    {
                                        "fieldName": "string",
                                        "template": "string"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","userFacingId":"user-connector-id","type":"CONNECTOR_TYPE_UNSPECIFIED","teamId":"12345","name":"My Slack Connector","description":"Connector for team notifications","createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","connectorConfigs":[{"outputSchemaId":"schema-id","fields":[{"fieldName":"string","template":"string"}]}],"configOverrides":[{"entityType":"alerts","connectorConfigs":[{"outputSchemaId":"schema-id","fields":[{"fieldName":"string","template":"string"}]}]}]}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/notification-center/connectors/{id}:
    get:
      operationId: ConnectorsService_GetConnector
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetConnectorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - ConnectorsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    delete:
      operationId: ConnectorsService_DeleteConnector
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeleteConnectorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - ConnectorsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/notification-center/connectors:batchGet:
    get:
      operationId: ConnectorsService_BatchGetConnectors
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1BatchGetConnectorsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: ids
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - ConnectorsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:batchGet?ids=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:batchGet"


            querystring = {"ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:batchGet?ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/notification-center/connectors:getTypeSummaries:
    get:
      operationId: ConnectorsService_GetConnectorTypeSummaries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetConnectorTypeSummariesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - ConnectorsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:getTypeSummaries';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:getTypeSummaries"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:getTypeSummaries \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/notification-center/connectors:listSummaries:
    get:
      operationId: ConnectorsService_ListConnectorSummaries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListConnectorSummariesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: connectorType
          in: query
          required: false
          schema:
            type: string
            enum:
              - CONNECTOR_TYPE_UNSPECIFIED
              - SLACK
              - GENERIC_HTTPS
              - PAGERDUTY
              - AWS
            default: CONNECTOR_TYPE_UNSPECIFIED
      tags:
        - ConnectorsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:listSummaries?connectorType=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:listSummaries"


            querystring = {"connectorType":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:listSummaries?connectorType=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/notification-center/entities:listEntityTypes:
    get:
      operationId: EntitiesService_ListEntityTypes
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListEntityTypesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - EntitiesService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/entities:listEntityTypes';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/entities:listEntityTypes"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/entities:listEntityTypes \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/notification-center/notifications/testing:testConnectorConfiguration:
    post:
      operationId: TestingService_TestConnectorConfig
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestConnectorConfigResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestConnectorConfigRequest'
        description: Request to test a connector configuration
        required: true
      tags:
        - TestingService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testConnectorConfiguration';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"type":"CONNECTOR_TYPE_UNSPECIFIED","outputSchemaId":"default","fields":[{"fieldName":"string","template":"string"}],"entityType":"alerts"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testConnectorConfiguration"


            payload = {
                "type": "CONNECTOR_TYPE_UNSPECIFIED",
                "outputSchemaId": "default",
                "fields": [
                    {
                        "fieldName": "string",
                        "template": "string"
                    }
                ],
                "entityType": "alerts"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testConnectorConfiguration \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"type":"CONNECTOR_TYPE_UNSPECIFIED","outputSchemaId":"default","fields":[{"fieldName":"string","template":"string"}],"entityType":"alerts"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/notification-center/notifications/testing:testDestination:
    post:
      operationId: TestingService_TestDestination
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestDestinationResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestDestinationRequest'
        required: true
      tags:
        - TestingService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testDestination';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"entityType":"alerts","entitySubType":"logsImmediateResolved","connectorId":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","presetId":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","outputSchemaId":"default","connectorConfigFields":[{"fieldName":"string","template":"string"}],"messageConfigFields":[{"fieldName":"string","template":"string"}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testDestination"


            payload = {
                "entityType": "alerts",
                "entitySubType": "logsImmediateResolved",
                "connectorId": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "presetId": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "outputSchemaId": "default",
                "connectorConfigFields": [
                    {
                        "fieldName": "string",
                        "template": "string"
                    }
                ],
                "messageConfigFields": [
                    {
                        "fieldName": "string",
                        "template": "string"
                    }
                ]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testDestination \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"entityType":"alerts","entitySubType":"logsImmediateResolved","connectorId":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","presetId":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","outputSchemaId":"default","connectorConfigFields":[{"fieldName":"string","template":"string"}],"messageConfigFields":[{"fieldName":"string","template":"string"}]}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/notification-center/notifications/testing:testExistingConnector:
    post:
      operationId: TestingService_TestExistingConnector
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestExistingConnectorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestExistingConnectorRequest'
        required: true
      tags:
        - TestingService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testExistingConnector';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"connectorId":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","outputSchemaId":"default"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testExistingConnector"


            payload = {
                "connectorId": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "outputSchemaId": "default"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testExistingConnector \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"connectorId":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","outputSchemaId":"default"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/notification-center/notifications/testing:testExistingPreset:
    post:
      operationId: TestingService_TestExistingPreset
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestExistingPresetResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestExistingPresetRequest'
        required: true
      tags:
        - TestingService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testExistingPreset';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"entityType":"alerts","entitySubType":"logsImmediateResolved","presetId":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","connectorId":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testExistingPreset"


            payload = {
                "entityType": "alerts",
                "entitySubType": "logsImmediateResolved",
                "presetId": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "connectorId": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testExistingPreset \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"entityType":"alerts","entitySubType":"logsImmediateResolved","presetId":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","connectorId":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/notification-center/notifications/testing:testPresetConfiguration:
    post:
      operationId: TestingService_TestPresetConfig
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestPresetConfigResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestPresetConfigRequest'
        required: true
      tags:
        - TestingService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testPresetConfiguration';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"entityType":"alerts","entitySubType":"metric","connectorId":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","presetId":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","configOverrides":[{"conditionType":{"matchEntityType":{"entityType":"string"},"matchEntityTypeAndSubType":{"entityType":"string","entitySubType":"string"}},"outputSchemaId":"string","messageConfig":{"fields":[{"fieldName":"string","template":"string"}]}}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testPresetConfiguration"


            payload = {
                "entityType": "alerts",
                "entitySubType": "metric",
                "connectorId": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "presetId": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "configOverrides": [
                    {
                        "conditionType": {
                            "matchEntityType": {"entityType": "string"},
                            "matchEntityTypeAndSubType": {
                                "entityType": "string",
                                "entitySubType": "string"
                            }
                        },
                        "outputSchemaId": "string",
                        "messageConfig": {"fields": [
                                {
                                    "fieldName": "string",
                                    "template": "string"
                                }
                            ]}
                    }
                ]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testPresetConfiguration \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"entityType":"alerts","entitySubType":"metric","connectorId":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","presetId":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","configOverrides":[{"conditionType":{"matchEntityType":{"entityType":"string"},"matchEntityTypeAndSubType":{"entityType":"string","entitySubType":"string"}},"outputSchemaId":"string","messageConfig":{"fields":[{"fieldName":"string","template":"string"}]}}]}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/notification-center/notifications/testing:testTemplateRender:
    post:
      operationId: TestingService_TestTemplateRender
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestTemplateRenderResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestTemplateRenderRequest'
        required: true
      tags:
        - TestingService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testTemplateRender';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"entityType":"alerts","entitySubType":"logsImmediateResolved","template":"{{ alertDef.name }}"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testTemplateRender"


            payload = {
                "entityType": "alerts",
                "entitySubType": "logsImmediateResolved",
                "template": "{{ alertDef.name }}"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testTemplateRender \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"entityType":"alerts","entitySubType":"logsImmediateResolved","template":"{{ alertDef.name }}"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/notification-center/presets/custom:
    post:
      operationId: PresetsService_CreateCustomPreset
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateCustomPresetResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody: &ref_2
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1Preset'
        required: true
      tags:
        - PresetsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","userFacingId":"user-preset-id","entityType":"alerts","connectorType":"CONNECTOR_TYPE_UNSPECIFIED","configOverrides":[{"conditionType":{"matchEntityType":{"entityType":"string"},"matchEntityTypeAndSubType":{"entityType":"string","entitySubType":"string"}},"outputSchemaId":"string","messageConfig":{"fields":[{"fieldName":"string","template":"string"}]}}],"parent":{},"name":"My Preset","description":"Custom preset for alerts","createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","presetType":"PRESET_TYPE_UNSPECIFIED"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom"


            payload = {
                "id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "userFacingId": "user-preset-id",
                "entityType": "alerts",
                "connectorType": "CONNECTOR_TYPE_UNSPECIFIED",
                "configOverrides": [
                    {
                        "conditionType": {
                            "matchEntityType": {"entityType": "string"},
                            "matchEntityTypeAndSubType": {
                                "entityType": "string",
                                "entitySubType": "string"
                            }
                        },
                        "outputSchemaId": "string",
                        "messageConfig": {"fields": [
                                {
                                    "fieldName": "string",
                                    "template": "string"
                                }
                            ]}
                    }
                ],
                "parent": {},
                "name": "My Preset",
                "description": "Custom preset for alerts",
                "createTime": "2019-08-24T14:15:22Z",
                "updateTime": "2019-08-24T14:15:22Z",
                "presetType": "PRESET_TYPE_UNSPECIFIED"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","userFacingId":"user-preset-id","entityType":"alerts","connectorType":"CONNECTOR_TYPE_UNSPECIFIED","configOverrides":[{"conditionType":{"matchEntityType":{"entityType":"string"},"matchEntityTypeAndSubType":{"entityType":"string","entitySubType":"string"}},"outputSchemaId":"string","messageConfig":{"fields":[{"fieldName":"string","template":"string"}]}}],"parent":{},"name":"My Preset","description":"Custom preset for alerts","createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","presetType":"PRESET_TYPE_UNSPECIFIED"}'
      x-hideTryItPanel: false
      x-showConsole: true
    put:
      operationId: PresetsService_ReplaceCustomPreset
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ReplaceCustomPresetResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody: *ref_2
      tags:
        - PresetsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","userFacingId":"user-preset-id","entityType":"alerts","connectorType":"CONNECTOR_TYPE_UNSPECIFIED","configOverrides":[{"conditionType":{"matchEntityType":{"entityType":"string"},"matchEntityTypeAndSubType":{"entityType":"string","entitySubType":"string"}},"outputSchemaId":"string","messageConfig":{"fields":[{"fieldName":"string","template":"string"}]}}],"parent":{},"name":"My Preset","description":"Custom preset for alerts","createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","presetType":"PRESET_TYPE_UNSPECIFIED"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom"


            payload = {
                "id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "userFacingId": "user-preset-id",
                "entityType": "alerts",
                "connectorType": "CONNECTOR_TYPE_UNSPECIFIED",
                "configOverrides": [
                    {
                        "conditionType": {
                            "matchEntityType": {"entityType": "string"},
                            "matchEntityTypeAndSubType": {
                                "entityType": "string",
                                "entitySubType": "string"
                            }
                        },
                        "outputSchemaId": "string",
                        "messageConfig": {"fields": [
                                {
                                    "fieldName": "string",
                                    "template": "string"
                                }
                            ]}
                    }
                ],
                "parent": {},
                "name": "My Preset",
                "description": "Custom preset for alerts",
                "createTime": "2019-08-24T14:15:22Z",
                "updateTime": "2019-08-24T14:15:22Z",
                "presetType": "PRESET_TYPE_UNSPECIFIED"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","userFacingId":"user-preset-id","entityType":"alerts","connectorType":"CONNECTOR_TYPE_UNSPECIFIED","configOverrides":[{"conditionType":{"matchEntityType":{"entityType":"string"},"matchEntityTypeAndSubType":{"entityType":"string","entitySubType":"string"}},"outputSchemaId":"string","messageConfig":{"fields":[{"fieldName":"string","template":"string"}]}}],"parent":{},"name":"My Preset","description":"Custom preset for alerts","createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","presetType":"PRESET_TYPE_UNSPECIFIED"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/notification-center/presets/custom/{id}:
    delete:
      operationId: PresetsService_DeleteCustomPreset
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeleteCustomPresetResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: userFacingId
          in: query
          required: false
          schema:
            type: string
        - name: identifier.id
          in: query
          required: false
          schema:
            type: string
        - name: identifier.userFacingId
          in: query
          required: false
          schema:
            type: string
      tags:
        - PresetsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom/%7Bid%7D?userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userFacingId=SOME_STRING_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom/%7Bid%7D"


            querystring =
            {"userFacingId":"SOME_STRING_VALUE","identifier.id":"SOME_STRING_VALUE","identifier.userFacingId":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom/%7Bid%7D?userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userFacingId=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/notification-center/presets/custom/{id}:defaultSet:
    post:
      operationId: PresetsService_SetCustomPresetAsDefault
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1SetCustomPresetAsDefaultResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: identifier.id
          in: query
          required: false
          schema:
            type: string
        - name: identifier.userFacingId
          in: query
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      tags:
        - PresetsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom/%7Bid%7D:defaultSet?identifier.id=SOME_STRING_VALUE&identifier.userFacingId=SOME_STRING_VALUE';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '"string"'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom/%7Bid%7D:defaultSet"


            querystring =
            {"identifier.id":"SOME_STRING_VALUE","identifier.userFacingId":"SOME_STRING_VALUE"}


            payload = "string"

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers, params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom/%7Bid%7D:defaultSet?identifier.id=SOME_STRING_VALUE&identifier.userFacingId=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '"string"'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/notification-center/presets/{id}:
    get:
      operationId: PresetsService_GetPreset
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetPresetResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: userFacingId
          in: query
          required: false
          schema:
            type: string
        - name: identifier.id
          in: query
          required: false
          schema:
            type: string
        - name: identifier.userFacingId
          in: query
          required: false
          schema:
            type: string
      tags:
        - PresetsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/%7Bid%7D?userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userFacingId=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/%7Bid%7D"


            querystring =
            {"userFacingId":"SOME_STRING_VALUE","identifier.id":"SOME_STRING_VALUE","identifier.userFacingId":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/%7Bid%7D?userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userFacingId=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/notification-center/presets:batchGet:
    get:
      operationId: PresetsService_BatchGetPresets
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1BatchGetPresetsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: ids
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - PresetsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:batchGet?ids=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:batchGet"


            querystring = {"ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:batchGet?ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/notification-center/presets:defaultSummaryGet:
    get:
      operationId: PresetsService_GetDefaultPresetSummary
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetDefaultPresetSummaryResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: connectorType
          in: query
          required: false
          schema:
            type: string
            enum:
              - CONNECTOR_TYPE_UNSPECIFIED
              - SLACK
              - GENERIC_HTTPS
              - PAGERDUTY
              - AWS
            default: CONNECTOR_TYPE_UNSPECIFIED
        - name: entityType
          in: query
          required: false
          schema:
            type: string
      tags:
        - PresetsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:defaultSummaryGet?connectorType=SOME_STRING_VALUE&entityType=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:defaultSummaryGet"


            querystring =
            {"connectorType":"SOME_STRING_VALUE","entityType":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:defaultSummaryGet?connectorType=SOME_STRING_VALUE&entityType=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/notification-center/presets:summariesList:
    get:
      operationId: PresetsService_ListPresetSummaries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListPresetSummariesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: connectorType
          in: query
          required: false
          schema:
            type: string
            enum:
              - CONNECTOR_TYPE_UNSPECIFIED
              - SLACK
              - GENERIC_HTTPS
              - PAGERDUTY
              - AWS
            default: CONNECTOR_TYPE_UNSPECIFIED
        - name: entityType
          in: query
          required: false
          schema:
            type: string
      tags:
        - PresetsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:summariesList?connectorType=SOME_STRING_VALUE&entityType=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:summariesList"


            querystring =
            {"connectorType":"SOME_STRING_VALUE","entityType":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:summariesList?connectorType=SOME_STRING_VALUE&entityType=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/notification-center/presets:systemDefaultSummaryGet:
    get:
      operationId: PresetsService_GetSystemDefaultPresetSummary
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetSystemDefaultPresetSummaryResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: connectorType
          in: query
          required: false
          schema:
            type: string
            enum:
              - CONNECTOR_TYPE_UNSPECIFIED
              - SLACK
              - GENERIC_HTTPS
              - PAGERDUTY
              - AWS
            default: CONNECTOR_TYPE_UNSPECIFIED
        - name: entityType
          in: query
          required: false
          schema:
            type: string
      tags:
        - PresetsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:systemDefaultSummaryGet?connectorType=SOME_STRING_VALUE&entityType=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:systemDefaultSummaryGet"


            querystring =
            {"connectorType":"SOME_STRING_VALUE","entityType":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:systemDefaultSummaryGet?connectorType=SOME_STRING_VALUE&entityType=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/outgoing_webhooks:
    get:
      operationId: OutgoingWebhooksService_ListOutgoingWebhooks
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListOutgoingWebhooksResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum:
              - UNKNOWN
              - GENERIC
              - SLACK
              - PAGERDUTY
              - SEND_LOG
              - EMAIL_GROUP
              - MICROSOFT_TEAMS
              - JIRA
              - OPSGENIE
              - DEMISTO
              - AWS_EVENT_BRIDGE
              - IBM_EVENT_NOTIFICATIONS
              - MS_TEAMS_WORKFLOW
            default: UNKNOWN
      tags:
        - OutgoingWebhooksService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks?type=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks"


            querystring = {"type":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks?type=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      operationId: OutgoingWebhooksService_CreateOutgoingWebhook
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateOutgoingWebhookResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CreateOutgoingWebhookRequest'
        description: >-
          This data structure represents a request to create an outgoing
          webhook.
        required: true
      tags:
        - OutgoingWebhooksService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"data":{"type":"UNKNOWN","name":"my_webhook","url":"slack.webhook.com","genericWebhook":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","method":"UNKNOWN","headers":{"Content-Type":"application/json"},"payload":{"key":"value"}},"slack":{"digests":[{"type":"UNKNOWN","isActive":true}],"attachments":[{"type":"EMPTY","isActive":true}]},"pagerDuty":{"serviceKey":"pager_duty_service_key"},"sendLog":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"emailGroup":{"emailAddresses":["example@coralogix.com"]},"microsoftTeams":{},"jira":{"apiToken":"jira_api_token","email":"jira_email","projectKey":"jira_project_key"},"opsgenie":{},"demisto":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"awsEventBridge":{"eventBusArn":"arn:aws:events:us-east-1:123456789012:event-bus/default","detail":{"key":"value"},"detailType":"detail_type","source":"source","roleName":"role_name"},"ibmEventNotifications":{"eventNotificationsInstanceId":"string","regionId":"string","sourceId":"string","sourceName":"string","endpointType":"ENDPOINT_TYPE_DEFAULT_OR_PUBLIC"},"msTeamsWorkflow":{}}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks"


            payload = {"data": {
                    "type": "UNKNOWN",
                    "name": "my_webhook",
                    "url": "slack.webhook.com",
                    "genericWebhook": {
                        "uuid": "d838cd7b-087b-40c6-bc33-80997020f5d0",
                        "method": "UNKNOWN",
                        "headers": {"Content-Type": "application/json"},
                        "payload": {"key": "value"}
                    },
                    "slack": {
                        "digests": [
                            {
                                "type": "UNKNOWN",
                                "isActive": True
                            }
                        ],
                        "attachments": [
                            {
                                "type": "EMPTY",
                                "isActive": True
                            }
                        ]
                    },
                    "pagerDuty": {"serviceKey": "pager_duty_service_key"},
                    "sendLog": {
                        "uuid": "d838cd7b-087b-40c6-bc33-80997020f5d0",
                        "payload": {"key": "value"}
                    },
                    "emailGroup": {"emailAddresses": ["example@coralogix.com"]},
                    "microsoftTeams": {},
                    "jira": {
                        "apiToken": "jira_api_token",
                        "email": "jira_email",
                        "projectKey": "jira_project_key"
                    },
                    "opsgenie": {},
                    "demisto": {
                        "uuid": "d838cd7b-087b-40c6-bc33-80997020f5d0",
                        "payload": {"key": "value"}
                    },
                    "awsEventBridge": {
                        "eventBusArn": "arn:aws:events:us-east-1:123456789012:event-bus/default",
                        "detail": {"key": "value"},
                        "detailType": "detail_type",
                        "source": "source",
                        "roleName": "role_name"
                    },
                    "ibmEventNotifications": {
                        "eventNotificationsInstanceId": "string",
                        "regionId": "string",
                        "sourceId": "string",
                        "sourceName": "string",
                        "endpointType": "ENDPOINT_TYPE_DEFAULT_OR_PUBLIC"
                    },
                    "msTeamsWorkflow": {}
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"data":{"type":"UNKNOWN","name":"my_webhook","url":"slack.webhook.com","genericWebhook":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","method":"UNKNOWN","headers":{"Content-Type":"application/json"},"payload":{"key":"value"}},"slack":{"digests":[{"type":"UNKNOWN","isActive":true}],"attachments":[{"type":"EMPTY","isActive":true}]},"pagerDuty":{"serviceKey":"pager_duty_service_key"},"sendLog":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"emailGroup":{"emailAddresses":["example@coralogix.com"]},"microsoftTeams":{},"jira":{"apiToken":"jira_api_token","email":"jira_email","projectKey":"jira_project_key"},"opsgenie":{},"demisto":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"awsEventBridge":{"eventBusArn":"arn:aws:events:us-east-1:123456789012:event-bus/default","detail":{"key":"value"},"detailType":"detail_type","source":"source","roleName":"role_name"},"ibmEventNotifications":{"eventNotificationsInstanceId":"string","regionId":"string","sourceId":"string","sourceName":"string","endpointType":"ENDPOINT_TYPE_DEFAULT_OR_PUBLIC"},"msTeamsWorkflow":{}}}'
      x-hideTryItPanel: false
      x-showConsole: true
    put:
      operationId: OutgoingWebhooksService_UpdateOutgoingWebhook
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdateOutgoingWebhookResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UpdateOutgoingWebhookRequest'
        description: >-
          This data structure represents a request to update an outgoing
          webhook.
        required: true
      tags:
        - OutgoingWebhooksService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"example_id","data":{"type":"UNKNOWN","name":"my_webhook","url":"slack.webhook.com","genericWebhook":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","method":"UNKNOWN","headers":{"Content-Type":"application/json"},"payload":{"key":"value"}},"slack":{"digests":[{"type":"UNKNOWN","isActive":true}],"attachments":[{"type":"EMPTY","isActive":true}]},"pagerDuty":{"serviceKey":"pager_duty_service_key"},"sendLog":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"emailGroup":{"emailAddresses":["example@coralogix.com"]},"microsoftTeams":{},"jira":{"apiToken":"jira_api_token","email":"jira_email","projectKey":"jira_project_key"},"opsgenie":{},"demisto":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"awsEventBridge":{"eventBusArn":"arn:aws:events:us-east-1:123456789012:event-bus/default","detail":{"key":"value"},"detailType":"detail_type","source":"source","roleName":"role_name"},"ibmEventNotifications":{"eventNotificationsInstanceId":"string","regionId":"string","sourceId":"string","sourceName":"string","endpointType":"ENDPOINT_TYPE_DEFAULT_OR_PUBLIC"},"msTeamsWorkflow":{}}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks"


            payload = {
                "id": "example_id",
                "data": {
                    "type": "UNKNOWN",
                    "name": "my_webhook",
                    "url": "slack.webhook.com",
                    "genericWebhook": {
                        "uuid": "d838cd7b-087b-40c6-bc33-80997020f5d0",
                        "method": "UNKNOWN",
                        "headers": {"Content-Type": "application/json"},
                        "payload": {"key": "value"}
                    },
                    "slack": {
                        "digests": [
                            {
                                "type": "UNKNOWN",
                                "isActive": True
                            }
                        ],
                        "attachments": [
                            {
                                "type": "EMPTY",
                                "isActive": True
                            }
                        ]
                    },
                    "pagerDuty": {"serviceKey": "pager_duty_service_key"},
                    "sendLog": {
                        "uuid": "d838cd7b-087b-40c6-bc33-80997020f5d0",
                        "payload": {"key": "value"}
                    },
                    "emailGroup": {"emailAddresses": ["example@coralogix.com"]},
                    "microsoftTeams": {},
                    "jira": {
                        "apiToken": "jira_api_token",
                        "email": "jira_email",
                        "projectKey": "jira_project_key"
                    },
                    "opsgenie": {},
                    "demisto": {
                        "uuid": "d838cd7b-087b-40c6-bc33-80997020f5d0",
                        "payload": {"key": "value"}
                    },
                    "awsEventBridge": {
                        "eventBusArn": "arn:aws:events:us-east-1:123456789012:event-bus/default",
                        "detail": {"key": "value"},
                        "detailType": "detail_type",
                        "source": "source",
                        "roleName": "role_name"
                    },
                    "ibmEventNotifications": {
                        "eventNotificationsInstanceId": "string",
                        "regionId": "string",
                        "sourceId": "string",
                        "sourceName": "string",
                        "endpointType": "ENDPOINT_TYPE_DEFAULT_OR_PUBLIC"
                    },
                    "msTeamsWorkflow": {}
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"example_id","data":{"type":"UNKNOWN","name":"my_webhook","url":"slack.webhook.com","genericWebhook":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","method":"UNKNOWN","headers":{"Content-Type":"application/json"},"payload":{"key":"value"}},"slack":{"digests":[{"type":"UNKNOWN","isActive":true}],"attachments":[{"type":"EMPTY","isActive":true}]},"pagerDuty":{"serviceKey":"pager_duty_service_key"},"sendLog":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"emailGroup":{"emailAddresses":["example@coralogix.com"]},"microsoftTeams":{},"jira":{"apiToken":"jira_api_token","email":"jira_email","projectKey":"jira_project_key"},"opsgenie":{},"demisto":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"awsEventBridge":{"eventBusArn":"arn:aws:events:us-east-1:123456789012:event-bus/default","detail":{"key":"value"},"detailType":"detail_type","source":"source","roleName":"role_name"},"ibmEventNotifications":{"eventNotificationsInstanceId":"string","regionId":"string","sourceId":"string","sourceName":"string","endpointType":"ENDPOINT_TYPE_DEFAULT_OR_PUBLIC"},"msTeamsWorkflow":{}}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/outgoing_webhooks/all:
    get:
      operationId: OutgoingWebhooksService_ListAllOutgoingWebhooks
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListAllOutgoingWebhooksResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - OutgoingWebhooksService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/all';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/all"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/all \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/outgoing_webhooks/ibm_event_notifications/instances:
    get:
      operationId: OutgoingWebhooksService_ListIbmEventNotificationsInstances
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/v1ListIbmEventNotificationsInstancesResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - OutgoingWebhooksService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/ibm_event_notifications/instances';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/ibm_event_notifications/instances"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/ibm_event_notifications/instances \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/outgoing_webhooks/summaries:
    get:
      operationId: OutgoingWebhooksService_ListOutboundWebhooksSummary
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListOutboundWebhooksSummaryResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - OutgoingWebhooksService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/summaries';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/summaries"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/summaries \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/outgoing_webhooks/test:
    post:
      operationId: OutgoingWebhooksService_TestOutgoingWebhook
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestOutgoingWebhookResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestOutgoingWebhookRequest'
        required: true
      tags:
        - OutgoingWebhooksService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/test';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"data":{"type":"UNKNOWN","name":"my_webhook","url":"slack.webhook.com","genericWebhook":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","method":"UNKNOWN","headers":{"Content-Type":"application/json"},"payload":{"key":"value"}},"slack":{"digests":[{"type":"UNKNOWN","isActive":true}],"attachments":[{"type":"EMPTY","isActive":true}]},"pagerDuty":{"serviceKey":"pager_duty_service_key"},"sendLog":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"emailGroup":{"emailAddresses":["example@coralogix.com"]},"microsoftTeams":{},"jira":{"apiToken":"jira_api_token","email":"jira_email","projectKey":"jira_project_key"},"opsgenie":{},"demisto":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"awsEventBridge":{"eventBusArn":"arn:aws:events:us-east-1:123456789012:event-bus/default","detail":{"key":"value"},"detailType":"detail_type","source":"source","roleName":"role_name"},"ibmEventNotifications":{"eventNotificationsInstanceId":"string","regionId":"string","sourceId":"string","sourceName":"string","endpointType":"ENDPOINT_TYPE_DEFAULT_OR_PUBLIC"},"msTeamsWorkflow":{}}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/test"


            payload = {"data": {
                    "type": "UNKNOWN",
                    "name": "my_webhook",
                    "url": "slack.webhook.com",
                    "genericWebhook": {
                        "uuid": "d838cd7b-087b-40c6-bc33-80997020f5d0",
                        "method": "UNKNOWN",
                        "headers": {"Content-Type": "application/json"},
                        "payload": {"key": "value"}
                    },
                    "slack": {
                        "digests": [
                            {
                                "type": "UNKNOWN",
                                "isActive": True
                            }
                        ],
                        "attachments": [
                            {
                                "type": "EMPTY",
                                "isActive": True
                            }
                        ]
                    },
                    "pagerDuty": {"serviceKey": "pager_duty_service_key"},
                    "sendLog": {
                        "uuid": "d838cd7b-087b-40c6-bc33-80997020f5d0",
                        "payload": {"key": "value"}
                    },
                    "emailGroup": {"emailAddresses": ["example@coralogix.com"]},
                    "microsoftTeams": {},
                    "jira": {
                        "apiToken": "jira_api_token",
                        "email": "jira_email",
                        "projectKey": "jira_project_key"
                    },
                    "opsgenie": {},
                    "demisto": {
                        "uuid": "d838cd7b-087b-40c6-bc33-80997020f5d0",
                        "payload": {"key": "value"}
                    },
                    "awsEventBridge": {
                        "eventBusArn": "arn:aws:events:us-east-1:123456789012:event-bus/default",
                        "detail": {"key": "value"},
                        "detailType": "detail_type",
                        "source": "source",
                        "roleName": "role_name"
                    },
                    "ibmEventNotifications": {
                        "eventNotificationsInstanceId": "string",
                        "regionId": "string",
                        "sourceId": "string",
                        "sourceName": "string",
                        "endpointType": "ENDPOINT_TYPE_DEFAULT_OR_PUBLIC"
                    },
                    "msTeamsWorkflow": {}
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/test \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"data":{"type":"UNKNOWN","name":"my_webhook","url":"slack.webhook.com","genericWebhook":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","method":"UNKNOWN","headers":{"Content-Type":"application/json"},"payload":{"key":"value"}},"slack":{"digests":[{"type":"UNKNOWN","isActive":true}],"attachments":[{"type":"EMPTY","isActive":true}]},"pagerDuty":{"serviceKey":"pager_duty_service_key"},"sendLog":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"emailGroup":{"emailAddresses":["example@coralogix.com"]},"microsoftTeams":{},"jira":{"apiToken":"jira_api_token","email":"jira_email","projectKey":"jira_project_key"},"opsgenie":{},"demisto":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"awsEventBridge":{"eventBusArn":"arn:aws:events:us-east-1:123456789012:event-bus/default","detail":{"key":"value"},"detailType":"detail_type","source":"source","roleName":"role_name"},"ibmEventNotifications":{"eventNotificationsInstanceId":"string","regionId":"string","sourceId":"string","sourceName":"string","endpointType":"ENDPOINT_TYPE_DEFAULT_OR_PUBLIC"},"msTeamsWorkflow":{}}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/outgoing_webhooks/test_existing:
    post:
      operationId: OutgoingWebhooksService_TestExistingOutgoingWebhook
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestOutgoingWebhookResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestExistingOutgoingWebhookRequest'
        description: >-
          This data structure represents a request to test an existing outgoing
          webhook.
        required: true
      tags:
        - OutgoingWebhooksService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/test_existing';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"example_id"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/test_existing"


            payload = {"id": "example_id"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/test_existing \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"example_id"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/outgoing_webhooks/types:
    get:
      operationId: OutgoingWebhooksService_ListOutgoingWebhookTypes
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListOutgoingWebhookTypesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - OutgoingWebhooksService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/types';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/types"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/types \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/outgoing_webhooks/types/{type}:
    get:
      operationId: OutgoingWebhooksService_GetOutgoingWebhookTypeDetails
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetOutgoingWebhookTypeDetailsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum:
              - UNKNOWN
              - GENERIC
              - SLACK
              - PAGERDUTY
              - SEND_LOG
              - EMAIL_GROUP
              - MICROSOFT_TEAMS
              - JIRA
              - OPSGENIE
              - DEMISTO
              - AWS_EVENT_BRIDGE
              - IBM_EVENT_NOTIFICATIONS
              - MS_TEAMS_WORKFLOW
      tags:
        - OutgoingWebhooksService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/types/%7Btype%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/types/%7Btype%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/types/%7Btype%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/outgoing_webhooks/{id}:
    get:
      operationId: OutgoingWebhooksService_GetOutgoingWebhook
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetOutgoingWebhookResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - OutgoingWebhooksService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    delete:
      operationId: OutgoingWebhooksService_DeleteOutgoingWebhook
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeleteOutgoingWebhookResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - OutgoingWebhooksService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing_webhooks/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/policies:
    get:
      operationId: PoliciesService_GetCompanyPolicies
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetCompanyPoliciesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: enabledOnly
          in: query
          required: true
          schema:
            type: boolean
        - name: sourceType
          in: query
          required: true
          schema:
            type: string
            enum:
              - SOURCE_TYPE_UNSPECIFIED
              - SOURCE_TYPE_LOGS
              - SOURCE_TYPE_SPANS
            default: SOURCE_TYPE_UNSPECIFIED
      tags:
        - PoliciesService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/policies?enabledOnly=SOME_BOOLEAN_VALUE&sourceType=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/policies"


            querystring =
            {"enabledOnly":"SOME_BOOLEAN_VALUE","sourceType":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/policies?enabledOnly=SOME_BOOLEAN_VALUE&sourceType=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      operationId: PoliciesService_CreatePolicy
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreatePolicyResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CreatePolicyRequest'
        description: This data structue is used to create a new policy.
        required: true
      tags:
        - PoliciesService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/policies';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"My Policy","description":"My Policy Description","priority":"PRIORITY_TYPE_UNSPECIFIED","applicationRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"subsystemRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"archiveRetention":{"id":"string"},"logRules":{"severities":["SEVERITY_UNSPECIFIED"]},"spanRules":{"serviceRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"actionRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"tagRules":[{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","tagName":"tag_name","tagValue":"tag_value"}]}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/policies"


            payload = {
                "name": "My Policy",
                "description": "My Policy Description",
                "priority": "PRIORITY_TYPE_UNSPECIFIED",
                "applicationRule": {
                    "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                    "name": "string"
                },
                "subsystemRule": {
                    "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                    "name": "string"
                },
                "archiveRetention": {"id": "string"},
                "logRules": {"severities": ["SEVERITY_UNSPECIFIED"]},
                "spanRules": {
                    "serviceRule": {
                        "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                        "name": "string"
                    },
                    "actionRule": {
                        "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                        "name": "string"
                    },
                    "tagRules": [
                        {
                            "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                            "tagName": "tag_name",
                            "tagValue": "tag_value"
                        }
                    ]
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/policies \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"My Policy","description":"My Policy Description","priority":"PRIORITY_TYPE_UNSPECIFIED","applicationRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"subsystemRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"archiveRetention":{"id":"string"},"logRules":{"severities":["SEVERITY_UNSPECIFIED"]},"spanRules":{"serviceRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"actionRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"tagRules":[{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","tagName":"tag_name","tagValue":"tag_value"}]}}'
      x-hideTryItPanel: false
      x-showConsole: true
    put:
      operationId: PoliciesService_UpdatePolicy
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdatePolicyResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UpdatePolicyRequest'
        description: This data structue is used to update an existing policy.
        required: true
      tags:
        - PoliciesService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/policies';

            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"policy_id","name":"My Policy","description":"My Policy Description","priority":"PRIORITY_TYPE_UNSPECIFIED","applicationRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"subsystemRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"archiveRetention":{"id":"string"},"logRules":{"severities":["SEVERITY_UNSPECIFIED"]},"spanRules":{"serviceRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"actionRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"tagRules":[{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","tagName":"tag_name","tagValue":"tag_value"}]},"enabled":true}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/policies"


            payload = {
                "id": "policy_id",
                "name": "My Policy",
                "description": "My Policy Description",
                "priority": "PRIORITY_TYPE_UNSPECIFIED",
                "applicationRule": {
                    "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                    "name": "string"
                },
                "subsystemRule": {
                    "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                    "name": "string"
                },
                "archiveRetention": {"id": "string"},
                "logRules": {"severities": ["SEVERITY_UNSPECIFIED"]},
                "spanRules": {
                    "serviceRule": {
                        "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                        "name": "string"
                    },
                    "actionRule": {
                        "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                        "name": "string"
                    },
                    "tagRules": [
                        {
                            "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                            "tagName": "tag_name",
                            "tagValue": "tag_value"
                        }
                    ]
                },
                "enabled": True
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/policies \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"policy_id","name":"My Policy","description":"My Policy Description","priority":"PRIORITY_TYPE_UNSPECIFIED","applicationRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"subsystemRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"archiveRetention":{"id":"string"},"logRules":{"severities":["SEVERITY_UNSPECIFIED"]},"spanRules":{"serviceRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"actionRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"tagRules":[{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","tagName":"tag_name","tagValue":"tag_value"}]},"enabled":true}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/policies/{id}:
    get:
      operationId: PoliciesService_GetPolicy
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetPolicyResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - PoliciesService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/policies/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/policies/%7Bid%7D"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/policies/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    delete:
      operationId: PoliciesService_DeletePolicy
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeletePolicyResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - PoliciesService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/policies/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/policies/%7Bid%7D"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("DELETE", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/policies/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/policies:atomicOverwriteLogPolicies:
    post:
      operationId: PoliciesService_AtomicOverwriteLogPolicies
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1AtomicOverwriteLogPoliciesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1AtomicOverwriteLogPoliciesRequest'
        description: >-
          In an atomic operation delete all existing log policies and create the
          provided list by order.
        required: true
      tags:
        - PoliciesService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/policies:atomicOverwriteLogPolicies';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"policies":[{"policy":{"name":"My Policy","description":"My Policy Description","priority":"PRIORITY_TYPE_UNSPECIFIED","applicationRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"subsystemRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"archiveRetention":{"id":"string"}},"logRules":{"severities":["SEVERITY_UNSPECIFIED"]}}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/policies:atomicOverwriteLogPolicies"


            payload = {"policies": [
                    {
                        "policy": {
                            "name": "My Policy",
                            "description": "My Policy Description",
                            "priority": "PRIORITY_TYPE_UNSPECIFIED",
                            "applicationRule": {
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                                "name": "string"
                            },
                            "subsystemRule": {
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                                "name": "string"
                            },
                            "archiveRetention": {"id": "string"}
                        },
                        "logRules": {"severities": ["SEVERITY_UNSPECIFIED"]}
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/policies:atomicOverwriteLogPolicies \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"policies":[{"policy":{"name":"My Policy","description":"My Policy Description","priority":"PRIORITY_TYPE_UNSPECIFIED","applicationRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"subsystemRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"archiveRetention":{"id":"string"}},"logRules":{"severities":["SEVERITY_UNSPECIFIED"]}}]}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/policies:atomicOverwriteSpanPolicies:
    post:
      operationId: PoliciesService_AtomicOverwriteSpanPolicies
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1AtomicOverwriteSpanPoliciesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1AtomicOverwriteSpanPoliciesRequest'
        description: >-
          In an atomic operation delete all existing span policies and create
          the provided list by order.
        required: true
      tags:
        - PoliciesService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/policies:atomicOverwriteSpanPolicies';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"policies":[{"policy":{"name":"My Policy","description":"My Policy Description","priority":"PRIORITY_TYPE_UNSPECIFIED","applicationRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"subsystemRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"archiveRetention":{"id":"string"}},"spanRules":{"serviceRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"actionRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"tagRules":[{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","tagName":"tag_name","tagValue":"tag_value"}]}}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/policies:atomicOverwriteSpanPolicies"


            payload = {"policies": [
                    {
                        "policy": {
                            "name": "My Policy",
                            "description": "My Policy Description",
                            "priority": "PRIORITY_TYPE_UNSPECIFIED",
                            "applicationRule": {
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                                "name": "string"
                            },
                            "subsystemRule": {
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                                "name": "string"
                            },
                            "archiveRetention": {"id": "string"}
                        },
                        "spanRules": {
                            "serviceRule": {
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                                "name": "string"
                            },
                            "actionRule": {
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                                "name": "string"
                            },
                            "tagRules": [
                                {
                                    "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                                    "tagName": "tag_name",
                                    "tagValue": "tag_value"
                                }
                            ]
                        }
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/policies:atomicOverwriteSpanPolicies \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"policies":[{"policy":{"name":"My Policy","description":"My Policy Description","priority":"PRIORITY_TYPE_UNSPECIFIED","applicationRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"subsystemRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"archiveRetention":{"id":"string"}},"spanRules":{"serviceRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"actionRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"tagRules":[{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","tagName":"tag_name","tagValue":"tag_value"}]}}]}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/policies:bulkCreate:
    post:
      operationId: PoliciesService_AtomicBatchCreatePolicy
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1AtomicBatchCreatePolicyResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1AtomicBatchCreatePolicyRequest'
        description: This data structure is used to create multiple policies atomically.
        required: true
      tags:
        - PoliciesService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/policies:bulkCreate';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"policyRequests":[{"name":"My Policy","description":"My Policy Description","priority":"PRIORITY_TYPE_UNSPECIFIED","applicationRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"subsystemRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"archiveRetention":{"id":"string"},"logRules":{"severities":["SEVERITY_UNSPECIFIED"]},"spanRules":{"serviceRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"actionRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"tagRules":[{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","tagName":"tag_name","tagValue":"tag_value"}]}}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/policies:bulkCreate"


            payload = {"policyRequests": [
                    {
                        "name": "My Policy",
                        "description": "My Policy Description",
                        "priority": "PRIORITY_TYPE_UNSPECIFIED",
                        "applicationRule": {
                            "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                            "name": "string"
                        },
                        "subsystemRule": {
                            "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                            "name": "string"
                        },
                        "archiveRetention": {"id": "string"},
                        "logRules": {"severities": ["SEVERITY_UNSPECIFIED"]},
                        "spanRules": {
                            "serviceRule": {
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                                "name": "string"
                            },
                            "actionRule": {
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                                "name": "string"
                            },
                            "tagRules": [
                                {
                                    "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                                    "tagName": "tag_name",
                                    "tagValue": "tag_value"
                                }
                            ]
                        }
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/policies:bulkCreate \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"policyRequests":[{"name":"My Policy","description":"My Policy Description","priority":"PRIORITY_TYPE_UNSPECIFIED","applicationRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"subsystemRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"archiveRetention":{"id":"string"},"logRules":{"severities":["SEVERITY_UNSPECIFIED"]},"spanRules":{"serviceRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"actionRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"tagRules":[{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","tagName":"tag_name","tagValue":"tag_value"}]}}]}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/policies:bulkTestLog:
    post:
      operationId: PoliciesService_BulkTestLogPolicies
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1BulkTestLogPoliciesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1BulkTestLogPoliciesRequest'
        description: Request to test multiple log policies.
        required: true
      tags:
        - PoliciesService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/policies:bulkTestLog';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"metaFieldsValuesList":[{"applicationNameValues":"application_name","severityValues":"severity","subsystemNameValues":"subsystem_name"}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/policies:bulkTestLog"


            payload = {"metaFieldsValuesList": [
                    {
                        "applicationNameValues": "application_name",
                        "severityValues": "severity",
                        "subsystemNameValues": "subsystem_name"
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/policies:bulkTestLog \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"metaFieldsValuesList":[{"applicationNameValues":"application_name","severityValues":"severity","subsystemNameValues":"subsystem_name"}]}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/policies:reorder:
    post:
      operationId: PoliciesService_ReorderPolicies
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ReorderPoliciesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1ReorderPoliciesRequest'
        description: This data structue is used to reorder policies.
        required: true
      tags:
        - PoliciesService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/policies:reorder';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"orders":[{"order":1,"id":"id"}],"sourceType":"SOURCE_TYPE_UNSPECIFIED"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/policies:reorder"


            payload = {
                "orders": [
                    {
                        "order": 1,
                        "id": "id"
                    }
                ],
                "sourceType": "SOURCE_TYPE_UNSPECIFIED"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/policies:reorder \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"orders":[{"order":1,"id":"id"}],"sourceType":"SOURCE_TYPE_UNSPECIFIED"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/policies:toggle:
    post:
      operationId: PoliciesService_TogglePolicy
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TogglePolicyResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TogglePolicyRequest'
        description: This data structue is used to toggle a policy by its ID.
        required: true
      tags:
        - PoliciesService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/policies:toggle';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"id","enabled":true}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/policies:toggle"


            payload = {
                "id": "id",
                "enabled": True
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/policies:toggle \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"id","enabled":true}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/retentions:
    get:
      operationId: RetentionsService_GetRetentions
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetRetentionsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - RetentionsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v1/retentions';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/retentions"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/retentions \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      operationId: RetentionsService_UpdateRetentions
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdateRetentionsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UpdateRetentionsRequest'
        description: This data structure is used to update retentions
        required: true
      tags:
        - RetentionsService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/retentions';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"retentionUpdateElements":[{"id":"string","name":"string"}]}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/retentions"


            payload = {"retentionUpdateElements": [
                    {
                        "id": "string",
                        "name": "string"
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/retentions \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"retentionUpdateElements":[{"id":"string","name":"string"}]}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/retentions/enabled:
    get:
      operationId: RetentionsService_GetRetentionsEnabled
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetRetentionsEnabledResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - RetentionsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/retentions/enabled';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/retentions/enabled"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/retentions/enabled \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/retentions:activate:
    post:
      operationId: RetentionsService_ActivateRetentions
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ActivateRetentionsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1ActivateRetentionsRequest'
        required: true
      tags:
        - RetentionsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/retentions:activate';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/retentions:activate"


            payload = {}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/retentions:activate \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/rule-group-sets:
    get:
      operationId: RuleGroupSets_List
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1RuleGroupSetListing'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - RuleGroupSets
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      operationId: RuleGroupSets_Create
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateRuleGroupSetResult'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CreateRuleGroupSet'
        description: A set of rule groups to create.
        required: true
      tags:
        - RuleGroupSets
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"groups":[{"name":"string","interval":0,"limit":"string","rules":[{"record":"string","expr":"string","labels":{"property1":"string","property2":"string"}}],"version":0,"id":"string"}],"name":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets"


            payload = {
                "groups": [
                    {
                        "name": "string",
                        "interval": 0,
                        "limit": "string",
                        "rules": [
                            {
                                "record": "string",
                                "expr": "string",
                                "labels": {
                                    "property1": "string",
                                    "property2": "string"
                                }
                            }
                        ],
                        "version": 0,
                        "id": "string"
                    }
                ],
                "name": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"groups":[{"name":"string","interval":0,"limit":"string","rules":[{"record":"string","expr":"string","labels":{"property1":"string","property2":"string"}}],"version":0,"id":"string"}],"name":"string"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/rule-group-sets/{id}:
    get:
      operationId: RuleGroupSets_Fetch
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1OutRuleGroupSet'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - RuleGroupSets
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    delete:
      operationId: RuleGroupSets_Delete
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - RuleGroupSets
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    put:
      operationId: RuleGroupSets_Update
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1RuleGroupSetsUpdateBody'
        required: true
      tags:
        - RuleGroupSets
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"groups":[{"name":"string","interval":0,"limit":"string","rules":[{"record":"string","expr":"string","labels":{"property1":"string","property2":"string"}}],"version":0,"id":"string"}],"name":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D"


            payload = {
                "groups": [
                    {
                        "name": "string",
                        "interval": 0,
                        "limit": "string",
                        "rules": [
                            {
                                "record": "string",
                                "expr": "string",
                                "labels": {
                                    "property1": "string",
                                    "property2": "string"
                                }
                            }
                        ],
                        "version": 0,
                        "id": "string"
                    }
                ],
                "name": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"groups":[{"name":"string","interval":0,"limit":"string","rules":[{"record":"string","expr":"string","labels":{"property1":"string","property2":"string"}}],"version":0,"id":"string"}],"name":"string"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/scopes:
    get:
      operationId: ScopesService_GetTeamScopesByIds
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetScopesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: ids
          in: query
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - ScopesService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/scopes?ids=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/scopes"


            querystring = {"ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/scopes?ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      operationId: ScopesService_CreateScope
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateScopeResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CreateScopeRequest'
        description: This data structure represents a request to create a scope
        required: true
      tags:
        - ScopesService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/scopes';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"displayName":"scope_name","description":"scope_description","filters":[{"entityType":"ENTITY_TYPE_UNSPECIFIED","expression":"expression"}],"defaultExpression":"expression"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/scopes"


            payload = {
                "displayName": "scope_name",
                "description": "scope_description",
                "filters": [
                    {
                        "entityType": "ENTITY_TYPE_UNSPECIFIED",
                        "expression": "expression"
                    }
                ],
                "defaultExpression": "expression"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/scopes \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"displayName":"scope_name","description":"scope_description","filters":[{"entityType":"ENTITY_TYPE_UNSPECIFIED","expression":"expression"}],"defaultExpression":"expression"}'
      x-hideTryItPanel: false
      x-showConsole: true
    put:
      operationId: ScopesService_UpdateScope
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdateScopeResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UpdateScopeRequest'
        description: This data structure represents a request to update a scope
        required: true
      tags:
        - ScopesService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/scopes';

            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"scope_id","displayName":"scope_name","description":"scope_description","filters":[{"entityType":"ENTITY_TYPE_UNSPECIFIED","expression":"expression"}],"defaultExpression":"expression"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/scopes"


            payload = {
                "id": "scope_id",
                "displayName": "scope_name",
                "description": "scope_description",
                "filters": [
                    {
                        "entityType": "ENTITY_TYPE_UNSPECIFIED",
                        "expression": "expression"
                    }
                ],
                "defaultExpression": "expression"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/scopes \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"scope_id","displayName":"scope_name","description":"scope_description","filters":[{"entityType":"ENTITY_TYPE_UNSPECIFIED","expression":"expression"}],"defaultExpression":"expression"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/scopes/list:
    get:
      operationId: ScopesService_GetTeamScopes
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetScopesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - ScopesService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v1/scopes/list';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/scopes/list"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/scopes/list \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/scopes/{id}:
    delete:
      operationId: ScopesService_DeleteScope
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeleteScopeResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - ScopesService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/scopes/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/scopes/%7Bid%7D"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("DELETE", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/scopes/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/service_slos:
    get:
      operationId: ServiceSloService_BatchGetServiceSlos
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1BatchGetServiceSlosResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: ids
          in: query
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - ServiceSloService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/service_slos?ids=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/service_slos"


            querystring = {"ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/service_slos?ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      operationId: ServiceSloService_CreateServiceSlo
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateServiceSloResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CreateServiceSloRequest'
        description: This data structure represents a request to create a Service SLO.
        required: true
      tags:
        - ServiceSloService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/service_slos';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"slo":{"id":"slo_id","name":"slo_name","serviceName":"service_name","status":"SLO_STATUS_UNSPECIFIED","description":"slo_description","targetPercentage":99,"createdAt":"2021-01-01T00:00:00.000Z","remainingErrorBudgetPercentage":1,"latencySli":{"thresholdMicroseconds":"1000000","thresholdSymbol":"THRESHOLD_SYMBOL_UNSPECIFIED"},"errorSli":{},"filters":[{"field":"field_name","compareType":"COMPARE_TYPE_UNSPECIFIED","fieldValues":["value1","value2"]}],"period":"SLO_PERIOD_UNSPECIFIED"}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/service_slos"


            payload = {"slo": {
                    "id": "slo_id",
                    "name": "slo_name",
                    "serviceName": "service_name",
                    "status": "SLO_STATUS_UNSPECIFIED",
                    "description": "slo_description",
                    "targetPercentage": 99,
                    "createdAt": "2021-01-01T00:00:00.000Z",
                    "remainingErrorBudgetPercentage": 1,
                    "latencySli": {
                        "thresholdMicroseconds": "1000000",
                        "thresholdSymbol": "THRESHOLD_SYMBOL_UNSPECIFIED"
                    },
                    "errorSli": {},
                    "filters": [
                        {
                            "field": "field_name",
                            "compareType": "COMPARE_TYPE_UNSPECIFIED",
                            "fieldValues": ["value1", "value2"]
                        }
                    ],
                    "period": "SLO_PERIOD_UNSPECIFIED"
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/service_slos \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"slo":{"id":"slo_id","name":"slo_name","serviceName":"service_name","status":"SLO_STATUS_UNSPECIFIED","description":"slo_description","targetPercentage":99,"createdAt":"2021-01-01T00:00:00.000Z","remainingErrorBudgetPercentage":1,"latencySli":{"thresholdMicroseconds":"1000000","thresholdSymbol":"THRESHOLD_SYMBOL_UNSPECIFIED"},"errorSli":{},"filters":[{"field":"field_name","compareType":"COMPARE_TYPE_UNSPECIFIED","fieldValues":["value1","value2"]}],"period":"SLO_PERIOD_UNSPECIFIED"}}'
      x-hideTryItPanel: false
      x-showConsole: true
    put:
      operationId: ServiceSloService_ReplaceServiceSlo
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ReplaceServiceSloResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1ReplaceServiceSloRequest'
        description: This data structure represents a request to update a Service SLO.
        required: true
      tags:
        - ServiceSloService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/service_slos';

            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"slo":{"id":"slo_id","name":"slo_name","serviceName":"service_name","status":"SLO_STATUS_UNSPECIFIED","description":"slo_description","targetPercentage":99,"createdAt":"2021-01-01T00:00:00.000Z","remainingErrorBudgetPercentage":1,"latencySli":{"thresholdMicroseconds":"1000000","thresholdSymbol":"THRESHOLD_SYMBOL_UNSPECIFIED"},"errorSli":{},"filters":[{"field":"field_name","compareType":"COMPARE_TYPE_UNSPECIFIED","fieldValues":["value1","value2"]}],"period":"SLO_PERIOD_UNSPECIFIED"}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/service_slos"


            payload = {"slo": {
                    "id": "slo_id",
                    "name": "slo_name",
                    "serviceName": "service_name",
                    "status": "SLO_STATUS_UNSPECIFIED",
                    "description": "slo_description",
                    "targetPercentage": 99,
                    "createdAt": "2021-01-01T00:00:00.000Z",
                    "remainingErrorBudgetPercentage": 1,
                    "latencySli": {
                        "thresholdMicroseconds": "1000000",
                        "thresholdSymbol": "THRESHOLD_SYMBOL_UNSPECIFIED"
                    },
                    "errorSli": {},
                    "filters": [
                        {
                            "field": "field_name",
                            "compareType": "COMPARE_TYPE_UNSPECIFIED",
                            "fieldValues": ["value1", "value2"]
                        }
                    ],
                    "period": "SLO_PERIOD_UNSPECIFIED"
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/service_slos \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"slo":{"id":"slo_id","name":"slo_name","serviceName":"service_name","status":"SLO_STATUS_UNSPECIFIED","description":"slo_description","targetPercentage":99,"createdAt":"2021-01-01T00:00:00.000Z","remainingErrorBudgetPercentage":1,"latencySli":{"thresholdMicroseconds":"1000000","thresholdSymbol":"THRESHOLD_SYMBOL_UNSPECIFIED"},"errorSli":{},"filters":[{"field":"field_name","compareType":"COMPARE_TYPE_UNSPECIFIED","fieldValues":["value1","value2"]}],"period":"SLO_PERIOD_UNSPECIFIED"}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/service_slos/all:
    get:
      operationId: ServiceSloService_ListServiceSlos
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListServiceSlosResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: orderBy.fieldName
          in: query
          required: true
          schema:
            type: string
        - name: orderBy.direction
          in: query
          required: true
          schema:
            type: string
            enum:
              - ORDER_BY_DIRECTION_UNSPECIFIED
              - ORDER_BY_DIRECTION_ASC
              - ORDER_BY_DIRECTION_DESC
            default: ORDER_BY_DIRECTION_UNSPECIFIED
        - name: serviceNames
          in: query
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - ServiceSloService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/service_slos/all?orderBy.fieldName=SOME_STRING_VALUE&orderBy.direction=SOME_STRING_VALUE&serviceNames=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/service_slos/all"


            querystring =
            {"orderBy.fieldName":"SOME_STRING_VALUE","orderBy.direction":"SOME_STRING_VALUE","serviceNames":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/service_slos/all?orderBy.fieldName=SOME_STRING_VALUE&orderBy.direction=SOME_STRING_VALUE&serviceNames=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/service_slos/{id}:
    get:
      operationId: ServiceSloService_GetServiceSlo
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetServiceSloResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - ServiceSloService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/service_slos/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/service_slos/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/service_slos/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    delete:
      operationId: ServiceSloService_DeleteServiceSlo
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeleteServiceSloResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - ServiceSloService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/service_slos/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/service_slos/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/service_slos/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/sso/saml/active:
    post:
      operationId: SamlConfigurationService_SetActive
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ssov2SetActiveResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ssov2SetActiveRequest'
        description: >-
          This data structure is used to activate or deactivate a SAML identity
          provider
        required: true
      tags:
        - SamlConfigurationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/sso/saml/active';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"teamId":0,"isActive":true}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/sso/saml/active"


            payload = {
                "teamId": 0,
                "isActive": True
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/sso/saml/active \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"teamId":0,"isActive":true}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/sso/saml/configuration:
    get:
      operationId: SamlConfigurationService_GetConfiguration
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetConfigurationResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: teamId
          in: query
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - SamlConfigurationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/sso/saml/configuration?teamId=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/sso/saml/configuration"


            querystring = {"teamId":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/sso/saml/configuration?teamId=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/sso/saml/idp_parameters:
    post:
      operationId: SamlConfigurationService_SetIDPParameters
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2SetIDPParametersResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2SetIDPParametersRequest'
        description: >-
          This data structure is used to set the parameters of a SAML identity
          provider
        required: true
      tags:
        - SamlConfigurationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/sso/saml/idp_parameters';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"teamId":0,"params":{"active":true,"metadataUrl":"https://<...>.okta.com/app/<...>/sso/saml/metadata","metadataContent":"<?xml version= ...","teamEntityId":1234567,"groupNames":["group1"]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/sso/saml/idp_parameters"


            payload = {
                "teamId": 0,
                "params": {
                    "active": True,
                    "metadataUrl": "https://<...>.okta.com/app/<...>/sso/saml/metadata",
                    "metadataContent": "<?xml version= ...",
                    "teamEntityId": 1234567,
                    "groupNames": ["group1"]
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/sso/saml/idp_parameters \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"teamId":0,"params":{"active":true,"metadataUrl":"https://<...>.okta.com/app/<...>/sso/saml/metadata","metadataContent":"<?xml version= ...","teamEntityId":1234567,"groupNames":["group1"]}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/sso/saml/sp_parameters:
    get:
      operationId: SamlConfigurationService_GetSPParameters
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetSPParametersResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: teamId
          in: query
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - SamlConfigurationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/sso/saml/sp_parameters?teamId=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/sso/saml/sp_parameters"


            querystring = {"teamId":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/sso/saml/sp_parameters?teamId=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/teams:
    get:
      operationId: TeamService_ListTeams
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2ListTeamsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - TeamService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v1/teams';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/teams"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      operationId: TeamService_CreateTeamInOrg
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2CreateTeamInOrgResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2CreateTeamInOrgRequest'
        description: This data structure represents a request to create a team.
        required: true
      tags:
        - TeamService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/teams';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"teamName":"My Team","teamAdminsEmail":["example@coralogix.com"],"dailyQuota":0.01}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/teams"


            payload = {
                "teamName": "My Team",
                "teamAdminsEmail": ["example@coralogix.com"],
                "dailyQuota": 0.01
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"teamName":"My Team","teamAdminsEmail":["example@coralogix.com"],"dailyQuota":0.01}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/teams/groups:
    get:
      summary: / Fetch team group by name for authenticated team id
      operationId: TeamPermissionsMgmtService_GetTeamGroupByName
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetTeamGroupByNameResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
      tags:
        - TeamPermissionsMgmtService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups?name=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/teams/groups"


            querystring = {"name":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups?name=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      summary: >-
        / Creates a new team group and optionally associates roles, users and a
        scope to it
      operationId: TeamPermissionsMgmtService_CreateTeamGroup
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateTeamGroupResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CreateTeamGroupRequest'
        description: >-
          Request to create a new team group with specified name, description,
          roles, users, and optional scope filters. Can be associated with a
          specific team or the authenticated team.
        required: true
      tags:
        - TeamPermissionsMgmtService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"string","teamId":{"id":0},"description":"string","externalId":"string","roleIds":[{"id":0}],"userIds":[{"id":"string"}],"scopeFilters":{"subsystems":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}],"applications":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}]},"nextGenScopeId":"string"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/teams/groups"


            payload = {
                "name": "string",
                "teamId": {"id": 0},
                "description": "string",
                "externalId": "string",
                "roleIds": [{"id": 0}],
                "userIds": [{"id": "string"}],
                "scopeFilters": {
                    "subsystems": [
                        {
                            "term": "string",
                            "filterType": "FILTER_TYPE_UNSPECIFIED"
                        }
                    ],
                    "applications": [
                        {
                            "term": "string",
                            "filterType": "FILTER_TYPE_UNSPECIFIED"
                        }
                    ]
                },
                "nextGenScopeId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"string","teamId":{"id":0},"description":"string","externalId":"string","roleIds":[{"id":0}],"userIds":[{"id":"string"}],"scopeFilters":{"subsystems":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}],"applications":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}]},"nextGenScopeId":"string"}'
      x-hideTryItPanel: false
      x-showConsole: true
    put:
      summary: / Updates an existing team group details
      operationId: TeamPermissionsMgmtService_UpdateTeamGroup
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdateTeamGroupResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UpdateTeamGroupRequest'
        description: >-
          Request to modify an existing team group's details, including its
          name, description, roles, users, and scope settings.
        required: true
      tags:
        - TeamPermissionsMgmtService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups';

            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"groupId":{"id":0},"name":"string","description":"string","externalId":"string","roleUpdates":{"roleIds":[{"id":0}]},"userUpdates":{"userIds":[{"id":"string"}]},"scopeFilters":{"subsystems":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}],"applications":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}]},"nextGenScopeId":"string"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/teams/groups"


            payload = {
                "groupId": {"id": 0},
                "name": "string",
                "description": "string",
                "externalId": "string",
                "roleUpdates": {"roleIds": [{"id": 0}]},
                "userUpdates": {"userIds": [{"id": "string"}]},
                "scopeFilters": {
                    "subsystems": [
                        {
                            "term": "string",
                            "filterType": "FILTER_TYPE_UNSPECIFIED"
                        }
                    ],
                    "applications": [
                        {
                            "term": "string",
                            "filterType": "FILTER_TYPE_UNSPECIFIED"
                        }
                    ]
                },
                "nextGenScopeId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"groupId":{"id":0},"name":"string","description":"string","externalId":"string","roleUpdates":{"roleIds":[{"id":0}]},"userUpdates":{"userIds":[{"id":"string"}]},"scopeFilters":{"subsystems":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}],"applications":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}]},"nextGenScopeId":"string"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/teams/groups/list:
    get:
      summary: / Fetches all team groups linked with team
      operationId: TeamPermissionsMgmtService_GetTeamGroups
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetTeamGroupsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: teamId.id
          in: query
          required: false
          schema:
            type: integer
            format: int64
      tags:
        - TeamPermissionsMgmtService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/list?teamId.id=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/list"


            querystring = {"teamId.id":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/list?teamId.id=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/teams/groups/users:
    delete:
      summary: / Bulk Remove user accounts to organisation group
      operationId: TeamPermissionsMgmtService_RemoveUsersFromTeamGroups
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1RemoveUsersFromTeamGroupsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: teamId.id
          in: query
          required: false
          schema:
            type: integer
            format: int64
      tags:
        - TeamPermissionsMgmtService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/users?teamId.id=SOME_INTEGER_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/users"


            querystring = {"teamId.id":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/users?teamId.id=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      summary: / Bulk Add users to team groups
      operationId: TeamPermissionsMgmtService_AddUsersToTeamGroups
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1AddUsersToTeamGroupsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1AddUsersToTeamGroupsRequest'
        description: >-
          Bulk request to assign users to multiple team groups simultaneously,
          efficiently managing group memberships at scale.
        required: true
      tags:
        - TeamPermissionsMgmtService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/users';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"teamId":{"id":0},"addUsersToGroup":[{"groupId":{"id":0},"userIds":[{"id":"string"}]}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/users"


            payload = {
                "teamId": {"id": 0},
                "addUsersToGroup": [
                    {
                        "groupId": {"id": 0},
                        "userIds": [{"id": "string"}]
                    }
                ]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups/users \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"teamId":{"id":0},"addUsersToGroup":[{"groupId":{"id":0},"userIds":[{"id":"string"}]}]}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/teams/groups/{groupId.id}:
    get:
      summary: / Fetch team group for given team id
      operationId: TeamPermissionsMgmtService_GetTeamGroup
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetTeamGroupResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: groupId.id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - TeamPermissionsMgmtService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    delete:
      summary: / Deletes an existing team group
      operationId: TeamPermissionsMgmtService_DeleteTeamGroup
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeleteTeamGroupResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: groupId.id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - TeamPermissionsMgmtService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/teams/groups/{groupId.id}/scope:
    get:
      summary: / Fetches team group scope
      operationId: TeamPermissionsMgmtService_GetTeamGroupScope
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetTeamGroupScopeResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: groupId.id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - TeamPermissionsMgmtService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/scope';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/scope"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/scope \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      summary: / Sets team group scope. Replaces it if it already exists.
      operationId: TeamPermissionsMgmtService_SetTeamGroupScope
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1SetTeamGroupScopeResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: groupId.id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/TeamPermissionsMgmtServiceSetTeamGroupScopeBody
        required: true
      tags:
        - TeamPermissionsMgmtService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/scope';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"groupId":{},"scopeFilters":{"subsystems":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}],"applications":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/scope"


            payload = {
                "groupId": {},
                "scopeFilters": {
                    "subsystems": [
                        {
                            "term": "string",
                            "filterType": "FILTER_TYPE_UNSPECIFIED"
                        }
                    ],
                    "applications": [
                        {
                            "term": "string",
                            "filterType": "FILTER_TYPE_UNSPECIFIED"
                        }
                    ]
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/scope \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"groupId":{},"scopeFilters":{"subsystems":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}],"applications":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}]}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/teams/groups/{groupId.id}/users:
    get:
      summary: / Fetches all users assigned to group
      operationId: TeamPermissionsMgmtService_GetGroupUsers
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetGroupUsersResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: groupId.id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: pageSize
          description: / Pagination size. Defaults to 100 if empty
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: pageToken
          description: |-
            / Optional pagination continuation token
            / Contains an encoded cursor
          in: query
          required: false
          schema:
            type: string
      tags:
        - TeamPermissionsMgmtService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/users?pageSize=SOME_INTEGER_VALUE&pageToken=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/users"


            querystring =
            {"pageSize":"SOME_INTEGER_VALUE","pageToken":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/users?pageSize=SOME_INTEGER_VALUE&pageToken=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    delete:
      summary: / Remove user accounts to organisation group
      operationId: TeamPermissionsMgmtService_RemoveUsersFromTeamGroup
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1RemoveUsersFromTeamGroupResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: groupId.id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - TeamPermissionsMgmtService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/users';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/users"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/users \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      summary: / Add users to team groups
      operationId: TeamPermissionsMgmtService_AddUsersToTeamGroup
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1AddUsersToTeamGroupResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: groupId.id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/v1TeamPermissionsMgmtServiceAddUsersToTeamGroupBody
        required: true
      tags:
        - TeamPermissionsMgmtService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/users';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"groupId":{},"userIds":[{"id":"string"}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/users"


            payload = {
                "groupId": {},
                "userIds": [{"id": "string"}]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/users \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"groupId":{},"userIds":[{"id":"string"}]}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/teams/quota:
    post:
      operationId: TeamService_SetDailyQuota
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2SetDailyQuotaResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2SetDailyQuotaRequest'
        description: This data structure represents a request to set a team's daily quota.
        required: true
      tags:
        - TeamService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/teams/quota';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"teamId":{"id":1},"targetDailyQuota":0.01}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/teams/quota"


            payload = {
                "teamId": {"id": 1},
                "targetDailyQuota": 0.01
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/quota \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"teamId":{"id":1},"targetDailyQuota":0.01}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/teams/quota/{teamId.id}:
    get:
      operationId: TeamService_GetTeamQuota
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetTeamQuotaResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: teamId.id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - TeamService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/quota/%7BteamId.id%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/teams/quota/%7BteamId.id%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/quota/%7BteamId.id%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/teams/{teamId.id}:
    get:
      operationId: TeamService_GetTeam
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetTeamResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: teamId.id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - TeamService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/%7BteamId.id%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/teams/%7BteamId.id%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/%7BteamId.id%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    delete:
      operationId: TeamService_DeleteTeam
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2DeleteTeamResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: teamId.id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - TeamService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/%7BteamId.id%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/teams/%7BteamId.id%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/%7BteamId.id%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    patch:
      operationId: TeamService_UpdateTeam
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2UpdateTeamResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: teamId.id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamServiceUpdateTeamBody'
        required: true
      tags:
        - TeamService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/%7BteamId.id%7D';


            let options = {
              method: 'PATCH',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"teamId":{},"teamName":"My Team","dailyQuota":0.01}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/teams/%7BteamId.id%7D"


            payload = {
                "teamId": {},
                "teamName": "My Team",
                "dailyQuota": 0.01
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PATCH", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PATCH \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/%7BteamId.id%7D \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"teamId":{},"teamName":"My Team","dailyQuota":0.01}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/teams:moveQuota:
    post:
      operationId: TeamService_MoveQuota
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2MoveQuotaResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2MoveQuotaRequest'
        description: This data structure represents a request to move quota between teams.
        required: true
      tags:
        - TeamService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams:moveQuota';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"sourceTeam":{"id":1},"destinationTeam":{"id":1},"unitsToMove":0.01}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/teams:moveQuota"


            payload = {
                "sourceTeam": {"id": 1},
                "destinationTeam": {"id": 1},
                "unitsToMove": 0.01
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams:moveQuota \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"sourceTeam":{"id":1},"destinationTeam":{"id":1},"unitsToMove":0.01}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/view_folders:
    get:
      description: List view's folders
      operationId: ViewsFoldersService_ListViewFolders
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesListViewFoldersResponse'
              examples:
                response:
                  value:
                    view_folders:
                      - id: 0cd4ed54-9b59-4eef-b329-151a167e2304
                        name: My Folder
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Folders for views
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v1/view_folders';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/view_folders"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/view_folders \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      description: Create view folder
      operationId: ViewsFoldersService_CreateViewFolder
      responses:
        '200':
          description: View folder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ViewFolder'
              examples:
                response:
                  value:
                    id: 0cd4ed54-9b59-4eef-b329-151a167e2304
                    name: My Folder
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicesCreateViewFolderRequest'
        description: Create view folder.
        required: true
      tags:
        - Folders for views
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/view_folders';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"My Folder"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/view_folders"


            payload = {"name": "My Folder"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/view_folders \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"My Folder"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/view_folders/{folder.id}:
    put:
      description: Replaces an existing view folder
      operationId: ViewsFoldersService_ReplaceViewFolder
      responses:
        '200':
          description: View folder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ViewFolder'
              examples:
                response:
                  value:
                    id: 0cd4ed54-9b59-4eef-b329-151a167e2304
                    name: My Folder
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: folder.id
          description: Unique identifier for folders
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: My Folder
                  description: Folder name
                  minLength: 1
              title: View folder
              required:
                - name
        description: View folder
        required: true
      tags:
        - Folders for views
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/view_folders/%7Bfolder.id%7D';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"My Folder"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/view_folders/%7Bfolder.id%7D"


            payload = {"name": "My Folder"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/view_folders/%7Bfolder.id%7D \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"My Folder"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/view_folders/{id}:
    get:
      description: Create view folder
      operationId: ViewsFoldersService_GetViewFolder
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ViewFolder'
              examples:
                response:
                  value:
                    id: 0cd4ed54-9b59-4eef-b329-151a167e2304
                    name: My Folder
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          description: Unique identifier for folders
          in: path
          required: true
          schema:
            type: string
            format: uuid
      tags:
        - Folders for views
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/view_folders/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/view_folders/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/view_folders/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    delete:
      description: Deletes a view folder by ID
      operationId: ViewsFoldersService_DeleteViewFolder
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesDeleteViewFolderResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          description: Unique identifier for folders
          in: path
          required: true
          schema:
            type: string
            format: uuid
      tags:
        - Folders for views
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/view_folders/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/view_folders/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/view_folders/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/views:
    get:
      description: Lists all company public views
      operationId: ViewsService_ListViews
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesListViewsResponse'
              examples:
                response:
                  value:
                    views:
                      - id: 52
                        name: Logs view
                        search_query:
                          query: logs
                        time_selection:
                          custom_selection:
                            from_time: '2024-01-25T11:31:43.152Z'
                            to_time: '2024-01-25T11:37:13.238Z'
                        filters:
                          filters:
                            - name: applicationName
                              selected_values:
                                demo: true
                            - name: subsystemName
                              selected_values:
                                demo: true
                            - name: operationName
                              selected_values:
                                demo: true
                            - name: serviceName
                              selected_values:
                                demo: true
                            - name: severity
                              selected_values:
                                demo: true
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Views
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v1/views';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/views"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/views \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      description: Creates a new view
      operationId: ViewsService_CreateView
      responses:
        '200':
          description: View
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesView'
              examples:
                response:
                  value:
                    name: Logs view
                    search_query:
                      query: logs
                    time_selection:
                      custom_selection:
                        from_time: '2024-01-25T11:31:43.152Z'
                        to_time: '2024-01-25T11:37:13.238Z'
                    filters:
                      filters:
                        - name: applicationName
                          selected_values:
                            demo: true
                        - name: subsystemName
                          selected_values:
                            demo: true
                        - name: operationName
                          selected_values:
                            demo: true
                        - name: serviceName
                          selected_values:
                            demo: true
                        - name: severity
                          selected_values:
                            demo: true
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicesCreateViewRequest'
        description: View folder.
        required: true
      tags:
        - Views
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/views';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"Logs view","searchQuery":{"query":"s"},"timeSelection":{"quickSelection":{"caption":"Last Hour","seconds":3600},"customSelection":{"fromTime":"2024-01-25T11:31:43.152Z","toTime":"2024-01-25T11:35:43.152Z"}},"filters":{"filters":[{"name":"applicationName","selectedValues":{"demo":true,"cs-rest-test1":true}}]},"folderId":"3dc02998-0b50-4ea8-b68a-4779d716fa1f"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/views"


            payload = {
                "name": "Logs view",
                "searchQuery": {"query": "s"},
                "timeSelection": {
                    "quickSelection": {
                        "caption": "Last Hour",
                        "seconds": 3600
                    },
                    "customSelection": {
                        "fromTime": "2024-01-25T11:31:43.152Z",
                        "toTime": "2024-01-25T11:35:43.152Z"
                    }
                },
                "filters": {"filters": [
                        {
                            "name": "applicationName",
                            "selectedValues": {
                                "demo": True,
                                "cs-rest-test1": True
                            }
                        }
                    ]},
                "folderId": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/views \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"Logs view","searchQuery":{"query":"s"},"timeSelection":{"quickSelection":{"caption":"Last Hour","seconds":3600},"customSelection":{"fromTime":"2024-01-25T11:31:43.152Z","toTime":"2024-01-25T11:35:43.152Z"}},"filters":{"filters":[{"name":"applicationName","selectedValues":{"demo":true,"cs-rest-test1":true}}]},"folderId":"3dc02998-0b50-4ea8-b68a-4779d716fa1f"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/views/{id}:
    get:
      description: Gets a view by ID
      operationId: ViewsService_GetView
      responses:
        '200':
          description: View
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesView'
              examples:
                response:
                  value:
                    id: 52
                    name: Logs view
                    search_query:
                      query: logs
                    time_selection:
                      custom_selection:
                        from_time: '2024-01-25T11:31:43.152Z'
                        to_time: '2024-01-25T11:37:13.238Z'
                    filters:
                      filters:
                        - name: applicationName
                          selected_values:
                            demo: true
                        - name: subsystemName
                          selected_values:
                            demo: true
                        - name: operationName
                          selected_values:
                            demo: true
                        - name: serviceName
                          selected_values:
                            demo: true
                        - name: severity
                          selected_values:
                            demo: true
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          description: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      tags:
        - Views
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/views/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/views/%7Bid%7D"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/views/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    delete:
      description: Deletes a view by ID
      operationId: ViewsService_DeleteView
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesDeleteViewResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          description: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      tags:
        - Views
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/views/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/views/%7Bid%7D"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("DELETE", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/views/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v1/views/{view.id}:
    put:
      description: Replaces an existing view
      operationId: ViewsService_ReplaceView
      responses:
        '200':
          description: View
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesView'
              examples:
                response:
                  value:
                    name: Logs view
                    search_query:
                      query: logs new
                    time_selection:
                      custom_selection:
                        from_time: '2024-01-25T11:31:43.152Z'
                        to_time: '2024-01-25T11:37:13.238Z'
                    filters:
                      filters:
                        - name: applicationName
                          selected_values:
                            demo: true
                        - name: subsystemName
                          selected_values:
                            demo: true
                        - name: operationName
                          selected_values:
                            demo: true
                        - name: serviceName
                          selected_values:
                            demo: true
                        - name: severity
                          selected_values:
                            demo: true
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: view.id
          description: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Logs view
                  description: View name
                  title: View name
                  minLength: 1
                searchQuery:
                  $ref: '#/components/schemas/v1SearchQuery'
                timeSelection:
                  $ref: '#/components/schemas/v1TimeSelection'
                filters:
                  $ref: '#/components/schemas/v1SelectedFilters'
                isCompactMode:
                  type: boolean
                folderId:
                  type: string
                  format: uuid
                  example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
                  description: Unique identifier for folders
                  title: View folder id
                  maxLength: 36
                  minLength: 36
                  pattern: >-
                    ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
              title: View
              required:
                - name
                - timeSelection
        description: View
        required: true
      tags:
        - Views
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/views/%7Bview.id%7D';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"Logs view","searchQuery":{"query":"s"},"timeSelection":{"quickSelection":{"caption":"Last Hour","seconds":3600},"customSelection":{"fromTime":"2024-01-25T11:31:43.152Z","toTime":"2024-01-25T11:35:43.152Z"}},"filters":{"filters":[{"name":"applicationName","selectedValues":{"demo":true,"cs-rest-test1":true}}]},"isCompactMode":true,"folderId":"3dc02998-0b50-4ea8-b68a-4779d716fa1f"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/views/%7Bview.id%7D"


            payload = {
                "name": "Logs view",
                "searchQuery": {"query": "s"},
                "timeSelection": {
                    "quickSelection": {
                        "caption": "Last Hour",
                        "seconds": 3600
                    },
                    "customSelection": {
                        "fromTime": "2024-01-25T11:31:43.152Z",
                        "toTime": "2024-01-25T11:35:43.152Z"
                    }
                },
                "filters": {"filters": [
                        {
                            "name": "applicationName",
                            "selectedValues": {
                                "demo": True,
                                "cs-rest-test1": True
                            }
                        }
                    ]},
                "isCompactMode": True,
                "folderId": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/views/%7Bview.id%7D \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"Logs view","searchQuery":{"query":"s"},"timeSelection":{"quickSelection":{"caption":"Last Hour","seconds":3600},"customSelection":{"fromTime":"2024-01-25T11:31:43.152Z","toTime":"2024-01-25T11:35:43.152Z"}},"filters":{"filters":[{"name":"applicationName","selectedValues":{"demo":true,"cs-rest-test1":true}}]},"isCompactMode":true,"folderId":"3dc02998-0b50-4ea8-b68a-4779d716fa1f"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v2/actions:
    get:
      operationId: ActionsService_ListActions
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2ListActionsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - ActionsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v2/actions';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v2/actions"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v2/actions \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      operationId: ActionsService_CreateAction
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2CreateActionResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2CreateActionRequest'
        required: true
      tags:
        - ActionsService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v2/actions';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"string","url":"string","isPrivate":true,"sourceType":"SOURCE_TYPE_UNSPECIFIED","applicationNames":["string"],"subsystemNames":["string"]}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v2/actions"


            payload = {
                "name": "string",
                "url": "string",
                "isPrivate": True,
                "sourceType": "SOURCE_TYPE_UNSPECIFIED",
                "applicationNames": ["string"],
                "subsystemNames": ["string"]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v2/actions \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"string","url":"string","isPrivate":true,"sourceType":"SOURCE_TYPE_UNSPECIFIED","applicationNames":["string"],"subsystemNames":["string"]}'
      x-hideTryItPanel: false
      x-showConsole: true
    put:
      operationId: ActionsService_ReplaceAction
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2ReplaceActionResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2ReplaceActionRequest'
        required: true
      tags:
        - ActionsService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v2/actions';

            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"action":{"id":"string","name":"string","url":"string","isHidden":true,"isPrivate":true,"sourceType":"SOURCE_TYPE_UNSPECIFIED","applicationNames":["string"],"subsystemNames":["string"],"createdBy":"string"}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v2/actions"


            payload = {"action": {
                    "id": "string",
                    "name": "string",
                    "url": "string",
                    "isHidden": True,
                    "isPrivate": True,
                    "sourceType": "SOURCE_TYPE_UNSPECIFIED",
                    "applicationNames": ["string"],
                    "subsystemNames": ["string"],
                    "createdBy": "string"
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v2/actions \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"action":{"id":"string","name":"string","url":"string","isHidden":true,"isPrivate":true,"sourceType":"SOURCE_TYPE_UNSPECIFIED","applicationNames":["string"],"subsystemNames":["string"],"createdBy":"string"}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v2/actions/actions:atomicBatchExecute:
    post:
      operationId: ActionsService_AtomicBatchExecuteActions
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2AtomicBatchExecuteActionsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2AtomicBatchExecuteActionsRequest'
        required: true
      tags:
        - ActionsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/actions/actions:atomicBatchExecute';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requests":[{"create":{"name":"string","url":"string","isPrivate":true,"sourceType":"SOURCE_TYPE_UNSPECIFIED","applicationNames":["string"],"subsystemNames":["string"]},"replace":{"action":{"id":"string","name":"string","url":"string","isHidden":true,"isPrivate":true,"sourceType":"SOURCE_TYPE_UNSPECIFIED","applicationNames":["string"],"subsystemNames":["string"],"createdBy":"string"}},"delete":{"id":"string"}}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v2/actions/actions:atomicBatchExecute"


            payload = {"requests": [
                    {
                        "create": {
                            "name": "string",
                            "url": "string",
                            "isPrivate": True,
                            "sourceType": "SOURCE_TYPE_UNSPECIFIED",
                            "applicationNames": ["string"],
                            "subsystemNames": ["string"]
                        },
                        "replace": {"action": {
                                "id": "string",
                                "name": "string",
                                "url": "string",
                                "isHidden": True,
                                "isPrivate": True,
                                "sourceType": "SOURCE_TYPE_UNSPECIFIED",
                                "applicationNames": ["string"],
                                "subsystemNames": ["string"],
                                "createdBy": "string"
                            }},
                        "delete": {"id": "string"}
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v2/actions/actions:atomicBatchExecute \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requests":[{"create":{"name":"string","url":"string","isPrivate":true,"sourceType":"SOURCE_TYPE_UNSPECIFIED","applicationNames":["string"],"subsystemNames":["string"]},"replace":{"action":{"id":"string","name":"string","url":"string","isHidden":true,"isPrivate":true,"sourceType":"SOURCE_TYPE_UNSPECIFIED","applicationNames":["string"],"subsystemNames":["string"],"createdBy":"string"}},"delete":{"id":"string"}}]}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v2/actions/actions:order:
    post:
      operationId: ActionsService_OrderActions
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2OrderActionsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2OrderActionsRequest'
        required: true
      tags:
        - ActionsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/actions/actions:order';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"privateActionsOrder":{"property1":0,"property2":0},"sharedActionsOrder":{"property1":0,"property2":0}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v2/actions/actions:order"


            payload = {
                "privateActionsOrder": {
                    "property1": 0,
                    "property2": 0
                },
                "sharedActionsOrder": {
                    "property1": 0,
                    "property2": 0
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v2/actions/actions:order \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"privateActionsOrder":{"property1":0,"property2":0},"sharedActionsOrder":{"property1":0,"property2":0}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v2/actions/{id}:
    get:
      operationId: ActionsService_GetAction
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetActionResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - ActionsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    delete:
      operationId: ActionsService_DeleteAction
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2DeleteActionResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - ActionsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("DELETE", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v2/datausage:
    get:
      operationId: DataUsageService_GetDataUsage
      responses:
        '200':
          description: A successful response.(streaming responses)
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/v2GetDataUsageResponse'
                  error:
                    $ref: '#/components/schemas/rpcStatus'
                title: Stream result of v2GetDataUsageResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: dateRange.fromDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: dateRange.toDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: resolution
          description: >-
            Aggregation resolution. Minimum supported value is 1h


            Do note that to avoid overloading the service we enforce resolution
            limits

            that depend on the server configuration. This is configured by the
            server.

            This means that, for instance, requests with 1 hour resolution for
            an interval of 30 days will be rejected but accepted for 1 day
            interval.


            Resolution must be between 1 hour and date_range interval
          in: query
          required: false
          schema:
            type: string
        - name: aggregate
          description: >-
            List of aggregate parameters.

            i.e. if AggregateBy is [AGGREGATE_BY_PILLAR, AGGREGATE_BY_PRIORITY],
            then the response will stream data aggregated by pillar and
            priority.
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - AGGREGATE_BY_UNSPECIFIED
                - AGGREGATE_BY_APPLICATION
                - AGGREGATE_BY_SUBSYSTEM
                - AGGREGATE_BY_PILLAR
                - AGGREGATE_BY_PRIORITY
      tags:
        - DataUsageService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/datausage?dateRange.fromDate=SOME_STRING_VALUE&dateRange.toDate=SOME_STRING_VALUE&resolution=SOME_STRING_VALUE&aggregate=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v2/datausage"


            querystring =
            {"dateRange.fromDate":"SOME_STRING_VALUE","dateRange.toDate":"SOME_STRING_VALUE","resolution":"SOME_STRING_VALUE","aggregate":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v2/datausage?dateRange.fromDate=SOME_STRING_VALUE&dateRange.toDate=SOME_STRING_VALUE&resolution=SOME_STRING_VALUE&aggregate=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v2/datausage/exportstatus:
    get:
      operationId: DataUsageService_GetDataUsageMetricsExportStatus
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetDataUsageMetricsExportStatusResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - DataUsageService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/datausage/exportstatus';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v2/datausage/exportstatus"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v2/datausage/exportstatus \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      operationId: DataUsageService_UpdateDataUsageMetricsExportStatus
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/v2UpdateDataUsageMetricsExportStatusResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2UpdateDataUsageMetricsExportStatusRequest'
        description: >-
          This data structure is used to update data usage metrics export
          status.
        required: true
      tags:
        - DataUsageService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/datausage/exportstatus';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"enabled":true}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v2/datausage/exportstatus"


            payload = {"enabled": True}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v2/datausage/exportstatus \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"enabled":true}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v2/datausage/logscount:
    get:
      operationId: DataUsageService_GetLogsCount
      responses:
        '200':
          description: A successful response.(streaming responses)
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/v2GetLogsCountResponse'
                  error:
                    $ref: '#/components/schemas/rpcStatus'
                title: Stream result of v2GetLogsCountResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: dateRange.fromDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: dateRange.toDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: resolution
          description: |-
            Aggregation resolution with second precision.

            Resolution must be between 1 second and date_range interval
          in: query
          required: false
          schema:
            type: string
        - name: filters.application
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: filters.subsystem
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - DataUsageService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/datausage/logscount?dateRange.fromDate=SOME_STRING_VALUE&dateRange.toDate=SOME_STRING_VALUE&resolution=SOME_STRING_VALUE&filters.application=SOME_ARRAY_VALUE&filters.subsystem=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v2/datausage/logscount"


            querystring =
            {"dateRange.fromDate":"SOME_STRING_VALUE","dateRange.toDate":"SOME_STRING_VALUE","resolution":"SOME_STRING_VALUE","filters.application":"SOME_ARRAY_VALUE","filters.subsystem":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v2/datausage/logscount?dateRange.fromDate=SOME_STRING_VALUE&dateRange.toDate=SOME_STRING_VALUE&resolution=SOME_STRING_VALUE&filters.application=SOME_ARRAY_VALUE&filters.subsystem=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v2/datausage/spanscount:
    get:
      operationId: DataUsageService_GetSpansCount
      responses:
        '200':
          description: A successful response.(streaming responses)
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/v2GetSpansCountResponse'
                  error:
                    $ref: '#/components/schemas/rpcStatus'
                title: Stream result of v2GetSpansCountResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: dateRange.fromDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: dateRange.toDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: resolution
          description: |-
            Aggregation resolution with second precision.

            Resolution must be between 1 second and date_range interval
          in: query
          required: false
          schema:
            type: string
        - name: filters.application
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: filters.subsystem
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - DataUsageService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/datausage/spanscount?dateRange.fromDate=SOME_STRING_VALUE&dateRange.toDate=SOME_STRING_VALUE&resolution=SOME_STRING_VALUE&filters.application=SOME_ARRAY_VALUE&filters.subsystem=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v2/datausage/spanscount"


            querystring =
            {"dateRange.fromDate":"SOME_STRING_VALUE","dateRange.toDate":"SOME_STRING_VALUE","resolution":"SOME_STRING_VALUE","filters.application":"SOME_ARRAY_VALUE","filters.subsystem":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v2/datausage/spanscount?dateRange.fromDate=SOME_STRING_VALUE&dateRange.toDate=SOME_STRING_VALUE&resolution=SOME_STRING_VALUE&filters.application=SOME_ARRAY_VALUE&filters.subsystem=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v2/target:
    get:
      operationId: TargetService_GetTarget
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/archivev2GetTargetResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - TargetService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v2/target';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v2/target"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v2/target \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      operationId: TargetService_SetTarget
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/archivev2SetTargetResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/archivev2SetTargetRequest'
        description: This data structure is used to set a storage target for logs.
        required: true
      tags:
        - TargetService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v2/target';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"isActive":true,"s3":{"bucket":"bucket","region":"us-west-2"},"ibmCos":{"bucketCrn":"bucket_crn","endpoint":"http://some.endpoint.com:8081","serviceCrn":"service_crn","bucketType":"IBM_BUCKET_TYPE_UNSPECIFIED"}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v2/target"


            payload = {
                "isActive": True,
                "s3": {
                    "bucket": "bucket",
                    "region": "us-west-2"
                },
                "ibmCos": {
                    "bucketCrn": "bucket_crn",
                    "endpoint": "http://some.endpoint.com:8081",
                    "serviceCrn": "service_crn",
                    "bucketType": "IBM_BUCKET_TYPE_UNSPECIFIED"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v2/target \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"isActive":true,"s3":{"bucket":"bucket","region":"us-west-2"},"ibmCos":{"bucketCrn":"bucket_crn","endpoint":"http://some.endpoint.com:8081","serviceCrn":"service_crn","bucketType":"IBM_BUCKET_TYPE_UNSPECIFIED"}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v2/target:validate:
    post:
      operationId: TargetService_ValidateTarget
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2ValidateTargetResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2ValidateTargetRequest'
        description: This data structure is used to validate a storage target for logs.
        required: true
      tags:
        - TargetService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/target:validate';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"isActive":true,"s3":{"bucket":"bucket","region":"us-west-2"},"ibmCos":{"bucketCrn":"bucket_crn","endpoint":"http://some.endpoint.com:8081","serviceCrn":"service_crn","bucketType":"IBM_BUCKET_TYPE_UNSPECIFIED"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v2/target:validate"


            payload = {
                "isActive": True,
                "s3": {
                    "bucket": "bucket",
                    "region": "us-west-2"
                },
                "ibmCos": {
                    "bucketCrn": "bucket_crn",
                    "endpoint": "http://some.endpoint.com:8081",
                    "serviceCrn": "service_crn",
                    "bucketType": "IBM_BUCKET_TYPE_UNSPECIFIED"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v2/target:validate \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"isActive":true,"s3":{"bucket":"bucket","region":"us-west-2"},"ibmCos":{"bucketCrn":"bucket_crn","endpoint":"http://some.endpoint.com:8081","serviceCrn":"service_crn","bucketType":"IBM_BUCKET_TYPE_UNSPECIFIED"}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v3/alert-defs:
    get:
      operationId: AlertDefsService_ListAlertDefs
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3ListAlertDefsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - AlertDefsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v3/alert-defs';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v3/alert-defs"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v3/alert-defs \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    post:
      operationId: AlertDefsService_CreateAlertDef
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3CreateAlertDefResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v3AlertDefProperties'
        required: true
      tags:
        - AlertDefsService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v3/alert-defs';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"My Alert","description":"Alert description","enabled":true,"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED","activeOn":{"dayOfWeek":["DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED"],"startTime":{"hours":14,"minutes":30},"endTime":{"hours":14,"minutes":30}},"type":"ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED","logsImmediate":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"notificationPayloadFilter":"text"},"tracingImmediate":{"tracingFilter":{"simpleFilter":{"tracingLabelFilters":{"applicationName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"serviceName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"operationName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"spanFields":[{"key":"string","filterType":{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}}]},"latencyThresholdMs":"string"}},"notificationPayloadFilter":["string"]},"logsThreshold":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"rules":[{"condition":{"threshold":100,"timeWindow":{"logsTimeWindowSpecificValue":"LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"notificationPayloadFilter":"text","evaluationDelayMs":60000},"logsRatioThreshold":{"numerator":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"numeratorAlias":"numerator_alias","denominator":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"denominatorAlias":"string","rules":[{"condition":{"threshold":10,"timeWindow":{"logsRatioTimeWindowSpecificValue":"LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_RATIO_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"notificationPayloadFilter":"text","groupByFor":"LOGS_RATIO_GROUP_BY_FOR_BOTH_OR_UNSPECIFIED","undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"ignoreInfinity":true,"evaluationDelayMs":60000},"logsTimeRelativeThreshold":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"threshold":10,"comparedTo":"LOGS_TIME_RELATIVE_COMPARED_TO_PREVIOUS_HOUR_OR_UNSPECIFIED","conditionType":"LOGS_TIME_RELATIVE_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"ignoreInfinity":true,"notificationPayloadFilter":"text","undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"evaluationDelayMs":60000},"metricThreshold":{"metricFilter":{"promql":"string"},"rules":[{"condition":{"threshold":0.1,"forOverPct":0,"ofTheLast":{"metricTimeWindowSpecificValue":"METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED"},"conditionType":"METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"missingValues":{"replaceWithZero":true,"minNonNullValuesPct":0},"evaluationDelayMs":0},"tracingThreshold":{"tracingFilter":{"simpleFilter":{"tracingLabelFilters":{"applicationName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"serviceName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"operationName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"spanFields":[{"key":"string","filterType":{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}}]},"latencyThresholdMs":"string"}},"rules":[{"condition":{"spanAmount":0.1,"timeWindow":{"tracingTimeWindowValue":"TRACING_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"TRACING_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"}}],"notificationPayloadFilter":["string"]},"flow":{"stages":[{"flowStagesGroups":{"groups":[{"alertDefs":[{"id":1,"not":true}],"nextOp":"NEXT_OP_AND_OR_UNSPECIFIED","alertsOp":"ALERTS_OP_AND_OR_UNSPECIFIED"}]},"timeframeMs":60000,"timeframeType":"TIMEFRAME_TYPE_UNSPECIFIED"}],"enforceSuppression":true},"logsAnomaly":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"minimumThreshold":10,"timeWindow":{"logsTimeWindowSpecificValue":"LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"}}],"notificationPayloadFilter":"text","evaluationDelayMs":60000,"anomalyAlertSettings":{"percentageOfDeviation":10}},"metricAnomaly":{"metricFilter":{"promql":"string"},"rules":[{"condition":{"threshold":10,"forOverPct":10,"ofTheLast":{"metricTimeWindowSpecificValue":"METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED"},"minNonNullValuesPct":10,"conditionType":"METRIC_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"}}],"evaluationDelayMs":60000,"anomalyAlertSettings":{"percentageOfDeviation":10}},"logsNewValue":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"keypathToTrack":"metadata.field","timeWindow":{"logsNewValueTimeWindowSpecificValue":"LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_12_OR_UNSPECIFIED"}}}],"notificationPayloadFilter":"text"},"logsUniqueCount":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"maxUniqueCount":"string","timeWindow":{"logsUniqueValueTimeWindowSpecificValue":"LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTE_1_OR_UNSPECIFIED"}}}],"notificationPayloadFilter":"text","maxUniqueCountPerGroupByKey":100,"uniqueCountKeypath":"unique_count"},"groupByKeys":["string"],"incidentsSettings":{"minutes":10,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"notificationGroup":{"groupByKeys":["string"],"webhooks":[{"minutes":10,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","integration":{"integrationId":123,"recipients":{"emails":["string"]}}}],"destinations":[{"connectorId":"string","presetId":"string","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","triggeredRoutingOverrides":{"configOverrides":{"outputSchemaId":"string","messageConfigFields":[{"fieldName":"string","template":"string"}],"connectorConfigFields":[{"fieldName":"string","template":"string"}]}},"resolvedRouteOverrides":{"configOverrides":{"outputSchemaId":"string","messageConfigFields":[{"fieldName":"string","template":"string"}],"connectorConfigFields":[{"fieldName":"string","template":"string"}]}}}]},"notificationGroupExcess":[{"groupByKeys":["string"],"webhooks":[{"minutes":10,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","integration":{"integrationId":123,"recipients":{"emails":["string"]}}}],"destinations":[{"connectorId":"string","presetId":"string","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","triggeredRoutingOverrides":{"configOverrides":{"outputSchemaId":"string","messageConfigFields":[{"fieldName":"string","template":"string"}],"connectorConfigFields":[{"fieldName":"string","template":"string"}]}},"resolvedRouteOverrides":{"configOverrides":{"outputSchemaId":"string","messageConfigFields":[{"fieldName":"string","template":"string"}],"connectorConfigFields":[{"fieldName":"string","template":"string"}]}}}]}],"entityLabels":{"property1":"string","property2":"string"},"phantomMode":true,"deleted":true}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v3/alert-defs"


            payload = {
                "name": "My Alert",
                "description": "Alert description",
                "enabled": True,
                "priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED",
                "activeOn": {
                    "dayOfWeek": ["DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED"],
                    "startTime": {
                        "hours": 14,
                        "minutes": 30
                    },
                    "endTime": {
                        "hours": 14,
                        "minutes": 30
                    }
                },
                "type": "ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED",
                "logsImmediate": {
                    "logsFilter": {"simpleFilter": {
                            "luceneQuery": "string",
                            "labelFilters": {
                                "applicationName": [
                                    {
                                        "value": "string",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "subsystemName": [
                                    {
                                        "value": "string",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                            }
                        }},
                    "notificationPayloadFilter": "text"
                },
                "tracingImmediate": {
                    "tracingFilter": {"simpleFilter": {
                            "tracingLabelFilters": {
                                "applicationName": [
                                    {
                                        "values": ["string"],
                                        "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "subsystemName": [
                                    {
                                        "values": ["string"],
                                        "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "serviceName": [
                                    {
                                        "values": ["string"],
                                        "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "operationName": [
                                    {
                                        "values": ["string"],
                                        "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "spanFields": [
                                    {
                                        "key": "string",
                                        "filterType": {
                                            "values": ["string"],
                                            "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    }
                                ]
                            },
                            "latencyThresholdMs": "string"
                        }},
                    "notificationPayloadFilter": ["string"]
                },
                "logsThreshold": {
                    "logsFilter": {"simpleFilter": {
                            "luceneQuery": "string",
                            "labelFilters": {
                                "applicationName": [
                                    {
                                        "value": "string",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "subsystemName": [
                                    {
                                        "value": "string",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                            }
                        }},
                    "undetectedValuesManagement": {
                        "triggerUndetectedValues": True,
                        "autoRetireTimeframe": "AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"
                    },
                    "rules": [
                        {
                            "condition": {
                                "threshold": 100,
                                "timeWindow": {"logsTimeWindowSpecificValue": "LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},
                                "conditionType": "LOGS_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
                            },
                            "override": {"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}
                        }
                    ],
                    "notificationPayloadFilter": "text",
                    "evaluationDelayMs": 60000
                },
                "logsRatioThreshold": {
                    "numerator": {"simpleFilter": {
                            "luceneQuery": "string",
                            "labelFilters": {
                                "applicationName": [
                                    {
                                        "value": "string",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "subsystemName": [
                                    {
                                        "value": "string",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                            }
                        }},
                    "numeratorAlias": "numerator_alias",
                    "denominator": {"simpleFilter": {
                            "luceneQuery": "string",
                            "labelFilters": {
                                "applicationName": [
                                    {
                                        "value": "string",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "subsystemName": [
                                    {
                                        "value": "string",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                            }
                        }},
                    "denominatorAlias": "string",
                    "rules": [
                        {
                            "condition": {
                                "threshold": 10,
                                "timeWindow": {"logsRatioTimeWindowSpecificValue": "LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},
                                "conditionType": "LOGS_RATIO_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
                            },
                            "override": {"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}
                        }
                    ],
                    "notificationPayloadFilter": "text",
                    "groupByFor": "LOGS_RATIO_GROUP_BY_FOR_BOTH_OR_UNSPECIFIED",
                    "undetectedValuesManagement": {
                        "triggerUndetectedValues": True,
                        "autoRetireTimeframe": "AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"
                    },
                    "ignoreInfinity": True,
                    "evaluationDelayMs": 60000
                },
                "logsTimeRelativeThreshold": {
                    "logsFilter": {"simpleFilter": {
                            "luceneQuery": "string",
                            "labelFilters": {
                                "applicationName": [
                                    {
                                        "value": "string",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "subsystemName": [
                                    {
                                        "value": "string",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                            }
                        }},
                    "rules": [
                        {
                            "condition": {
                                "threshold": 10,
                                "comparedTo": "LOGS_TIME_RELATIVE_COMPARED_TO_PREVIOUS_HOUR_OR_UNSPECIFIED",
                                "conditionType": "LOGS_TIME_RELATIVE_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
                            },
                            "override": {"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}
                        }
                    ],
                    "ignoreInfinity": True,
                    "notificationPayloadFilter": "text",
                    "undetectedValuesManagement": {
                        "triggerUndetectedValues": True,
                        "autoRetireTimeframe": "AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"
                    },
                    "evaluationDelayMs": 60000
                },
                "metricThreshold": {
                    "metricFilter": {"promql": "string"},
                    "rules": [
                        {
                            "condition": {
                                "threshold": 0.1,
                                "forOverPct": 0,
                                "ofTheLast": {"metricTimeWindowSpecificValue": "METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED"},
                                "conditionType": "METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
                            },
                            "override": {"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}
                        }
                    ],
                    "undetectedValuesManagement": {
                        "triggerUndetectedValues": True,
                        "autoRetireTimeframe": "AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"
                    },
                    "missingValues": {
                        "replaceWithZero": True,
                        "minNonNullValuesPct": 0
                    },
                    "evaluationDelayMs": 0
                },
                "tracingThreshold": {
                    "tracingFilter": {"simpleFilter": {
                            "tracingLabelFilters": {
                                "applicationName": [
                                    {
                                        "values": ["string"],
                                        "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "subsystemName": [
                                    {
                                        "values": ["string"],
                                        "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "serviceName": [
                                    {
                                        "values": ["string"],
                                        "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "operationName": [
                                    {
                                        "values": ["string"],
                                        "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "spanFields": [
                                    {
                                        "key": "string",
                                        "filterType": {
                                            "values": ["string"],
                                            "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    }
                                ]
                            },
                            "latencyThresholdMs": "string"
                        }},
                    "rules": [{"condition": {
                                "spanAmount": 0.1,
                                "timeWindow": {"tracingTimeWindowValue": "TRACING_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},
                                "conditionType": "TRACING_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
                            }}],
                    "notificationPayloadFilter": ["string"]
                },
                "flow": {
                    "stages": [
                        {
                            "flowStagesGroups": {"groups": [
                                    {
                                        "alertDefs": [
                                            {
                                                "id": 1,
                                                "not": True
                                            }
                                        ],
                                        "nextOp": "NEXT_OP_AND_OR_UNSPECIFIED",
                                        "alertsOp": "ALERTS_OP_AND_OR_UNSPECIFIED"
                                    }
                                ]},
                            "timeframeMs": 60000,
                            "timeframeType": "TIMEFRAME_TYPE_UNSPECIFIED"
                        }
                    ],
                    "enforceSuppression": True
                },
                "logsAnomaly": {
                    "logsFilter": {"simpleFilter": {
                            "luceneQuery": "string",
                            "labelFilters": {
                                "applicationName": [
                                    {
                                        "value": "string",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "subsystemName": [
                                    {
                                        "value": "string",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                            }
                        }},
                    "rules": [{"condition": {
                                "minimumThreshold": 10,
                                "timeWindow": {"logsTimeWindowSpecificValue": "LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},
                                "conditionType": "LOGS_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"
                            }}],
                    "notificationPayloadFilter": "text",
                    "evaluationDelayMs": 60000,
                    "anomalyAlertSettings": {"percentageOfDeviation": 10}
                },
                "metricAnomaly": {
                    "metricFilter": {"promql": "string"},
                    "rules": [{"condition": {
                                "threshold": 10,
                                "forOverPct": 10,
                                "ofTheLast": {"metricTimeWindowSpecificValue": "METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED"},
                                "minNonNullValuesPct": 10,
                                "conditionType": "METRIC_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"
                            }}],
                    "evaluationDelayMs": 60000,
                    "anomalyAlertSettings": {"percentageOfDeviation": 10}
                },
                "logsNewValue": {
                    "logsFilter": {"simpleFilter": {
                            "luceneQuery": "string",
                            "labelFilters": {
                                "applicationName": [
                                    {
                                        "value": "string",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "subsystemName": [
                                    {
                                        "value": "string",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                            }
                        }},
                    "rules": [{"condition": {
                                "keypathToTrack": "metadata.field",
                                "timeWindow": {"logsNewValueTimeWindowSpecificValue": "LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_12_OR_UNSPECIFIED"}
                            }}],
                    "notificationPayloadFilter": "text"
                },
                "logsUniqueCount": {
                    "logsFilter": {"simpleFilter": {
                            "luceneQuery": "string",
                            "labelFilters": {
                                "applicationName": [
                                    {
                                        "value": "string",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "subsystemName": [
                                    {
                                        "value": "string",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                            }
                        }},
                    "rules": [{"condition": {
                                "maxUniqueCount": "string",
                                "timeWindow": {"logsUniqueValueTimeWindowSpecificValue": "LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTE_1_OR_UNSPECIFIED"}
                            }}],
                    "notificationPayloadFilter": "text",
                    "maxUniqueCountPerGroupByKey": 100,
                    "uniqueCountKeypath": "unique_count"
                },
                "groupByKeys": ["string"],
                "incidentsSettings": {
                    "minutes": 10,
                    "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                },
                "notificationGroup": {
                    "groupByKeys": ["string"],
                    "webhooks": [
                        {
                            "minutes": 10,
                            "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                            "integration": {
                                "integrationId": 123,
                                "recipients": {"emails": ["string"]}
                            }
                        }
                    ],
                    "destinations": [
                        {
                            "connectorId": "string",
                            "presetId": "string",
                            "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                            "triggeredRoutingOverrides": {"configOverrides": {
                                    "outputSchemaId": "string",
                                    "messageConfigFields": [
                                        {
                                            "fieldName": "string",
                                            "template": "string"
                                        }
                                    ],
                                    "connectorConfigFields": [
                                        {
                                            "fieldName": "string",
                                            "template": "string"
                                        }
                                    ]
                                }},
                            "resolvedRouteOverrides": {"configOverrides": {
                                    "outputSchemaId": "string",
                                    "messageConfigFields": [
                                        {
                                            "fieldName": "string",
                                            "template": "string"
                                        }
                                    ],
                                    "connectorConfigFields": [
                                        {
                                            "fieldName": "string",
                                            "template": "string"
                                        }
                                    ]
                                }}
                        }
                    ]
                },
                "notificationGroupExcess": [
                    {
                        "groupByKeys": ["string"],
                        "webhooks": [
                            {
                                "minutes": 10,
                                "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                                "integration": {
                                    "integrationId": 123,
                                    "recipients": {"emails": ["string"]}
                                }
                            }
                        ],
                        "destinations": [
                            {
                                "connectorId": "string",
                                "presetId": "string",
                                "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                                "triggeredRoutingOverrides": {"configOverrides": {
                                        "outputSchemaId": "string",
                                        "messageConfigFields": [
                                            {
                                                "fieldName": "string",
                                                "template": "string"
                                            }
                                        ],
                                        "connectorConfigFields": [
                                            {
                                                "fieldName": "string",
                                                "template": "string"
                                            }
                                        ]
                                    }},
                                "resolvedRouteOverrides": {"configOverrides": {
                                        "outputSchemaId": "string",
                                        "messageConfigFields": [
                                            {
                                                "fieldName": "string",
                                                "template": "string"
                                            }
                                        ],
                                        "connectorConfigFields": [
                                            {
                                                "fieldName": "string",
                                                "template": "string"
                                            }
                                        ]
                                    }}
                            }
                        ]
                    }
                ],
                "entityLabels": {
                    "property1": "string",
                    "property2": "string"
                },
                "phantomMode": True,
                "deleted": True
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v3/alert-defs \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"My Alert","description":"Alert description","enabled":true,"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED","activeOn":{"dayOfWeek":["DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED"],"startTime":{"hours":14,"minutes":30},"endTime":{"hours":14,"minutes":30}},"type":"ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED","logsImmediate":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"notificationPayloadFilter":"text"},"tracingImmediate":{"tracingFilter":{"simpleFilter":{"tracingLabelFilters":{"applicationName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"serviceName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"operationName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"spanFields":[{"key":"string","filterType":{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}}]},"latencyThresholdMs":"string"}},"notificationPayloadFilter":["string"]},"logsThreshold":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"rules":[{"condition":{"threshold":100,"timeWindow":{"logsTimeWindowSpecificValue":"LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"notificationPayloadFilter":"text","evaluationDelayMs":60000},"logsRatioThreshold":{"numerator":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"numeratorAlias":"numerator_alias","denominator":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"denominatorAlias":"string","rules":[{"condition":{"threshold":10,"timeWindow":{"logsRatioTimeWindowSpecificValue":"LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_RATIO_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"notificationPayloadFilter":"text","groupByFor":"LOGS_RATIO_GROUP_BY_FOR_BOTH_OR_UNSPECIFIED","undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"ignoreInfinity":true,"evaluationDelayMs":60000},"logsTimeRelativeThreshold":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"threshold":10,"comparedTo":"LOGS_TIME_RELATIVE_COMPARED_TO_PREVIOUS_HOUR_OR_UNSPECIFIED","conditionType":"LOGS_TIME_RELATIVE_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"ignoreInfinity":true,"notificationPayloadFilter":"text","undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"evaluationDelayMs":60000},"metricThreshold":{"metricFilter":{"promql":"string"},"rules":[{"condition":{"threshold":0.1,"forOverPct":0,"ofTheLast":{"metricTimeWindowSpecificValue":"METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED"},"conditionType":"METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"missingValues":{"replaceWithZero":true,"minNonNullValuesPct":0},"evaluationDelayMs":0},"tracingThreshold":{"tracingFilter":{"simpleFilter":{"tracingLabelFilters":{"applicationName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"serviceName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"operationName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"spanFields":[{"key":"string","filterType":{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}}]},"latencyThresholdMs":"string"}},"rules":[{"condition":{"spanAmount":0.1,"timeWindow":{"tracingTimeWindowValue":"TRACING_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"TRACING_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"}}],"notificationPayloadFilter":["string"]},"flow":{"stages":[{"flowStagesGroups":{"groups":[{"alertDefs":[{"id":1,"not":true}],"nextOp":"NEXT_OP_AND_OR_UNSPECIFIED","alertsOp":"ALERTS_OP_AND_OR_UNSPECIFIED"}]},"timeframeMs":60000,"timeframeType":"TIMEFRAME_TYPE_UNSPECIFIED"}],"enforceSuppression":true},"logsAnomaly":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"minimumThreshold":10,"timeWindow":{"logsTimeWindowSpecificValue":"LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"}}],"notificationPayloadFilter":"text","evaluationDelayMs":60000,"anomalyAlertSettings":{"percentageOfDeviation":10}},"metricAnomaly":{"metricFilter":{"promql":"string"},"rules":[{"condition":{"threshold":10,"forOverPct":10,"ofTheLast":{"metricTimeWindowSpecificValue":"METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED"},"minNonNullValuesPct":10,"conditionType":"METRIC_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"}}],"evaluationDelayMs":60000,"anomalyAlertSettings":{"percentageOfDeviation":10}},"logsNewValue":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"keypathToTrack":"metadata.field","timeWindow":{"logsNewValueTimeWindowSpecificValue":"LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_12_OR_UNSPECIFIED"}}}],"notificationPayloadFilter":"text"},"logsUniqueCount":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"maxUniqueCount":"string","timeWindow":{"logsUniqueValueTimeWindowSpecificValue":"LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTE_1_OR_UNSPECIFIED"}}}],"notificationPayloadFilter":"text","maxUniqueCountPerGroupByKey":100,"uniqueCountKeypath":"unique_count"},"groupByKeys":["string"],"incidentsSettings":{"minutes":10,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"notificationGroup":{"groupByKeys":["string"],"webhooks":[{"minutes":10,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","integration":{"integrationId":123,"recipients":{"emails":["string"]}}}],"destinations":[{"connectorId":"string","presetId":"string","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","triggeredRoutingOverrides":{"configOverrides":{"outputSchemaId":"string","messageConfigFields":[{"fieldName":"string","template":"string"}],"connectorConfigFields":[{"fieldName":"string","template":"string"}]}},"resolvedRouteOverrides":{"configOverrides":{"outputSchemaId":"string","messageConfigFields":[{"fieldName":"string","template":"string"}],"connectorConfigFields":[{"fieldName":"string","template":"string"}]}}}]},"notificationGroupExcess":[{"groupByKeys":["string"],"webhooks":[{"minutes":10,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","integration":{"integrationId":123,"recipients":{"emails":["string"]}}}],"destinations":[{"connectorId":"string","presetId":"string","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","triggeredRoutingOverrides":{"configOverrides":{"outputSchemaId":"string","messageConfigFields":[{"fieldName":"string","template":"string"}],"connectorConfigFields":[{"fieldName":"string","template":"string"}]}},"resolvedRouteOverrides":{"configOverrides":{"outputSchemaId":"string","messageConfigFields":[{"fieldName":"string","template":"string"}],"connectorConfigFields":[{"fieldName":"string","template":"string"}]}}}]}],"entityLabels":{"property1":"string","property2":"string"},"phantomMode":true,"deleted":true}'
      x-hideTryItPanel: false
      x-showConsole: true
    put:
      operationId: AlertDefsService_ReplaceAlertDef
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3ReplaceAlertDefResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v3ReplaceAlertDefRequest'
        description: Request to replace an existing alert definition
        required: true
      tags:
        - AlertDefsService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v3/alert-defs';

            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"alertDefProperties":{"name":"My Alert","description":"Alert description","enabled":true,"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED","activeOn":{"dayOfWeek":["DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED"],"startTime":{"hours":14,"minutes":30},"endTime":{"hours":14,"minutes":30}},"type":"ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED","logsImmediate":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"notificationPayloadFilter":"text"},"tracingImmediate":{"tracingFilter":{"simpleFilter":{"tracingLabelFilters":{"applicationName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"serviceName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"operationName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"spanFields":[{"key":"string","filterType":{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}}]},"latencyThresholdMs":"string"}},"notificationPayloadFilter":["string"]},"logsThreshold":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"rules":[{"condition":{"threshold":100,"timeWindow":{"logsTimeWindowSpecificValue":"LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"notificationPayloadFilter":"text","evaluationDelayMs":60000},"logsRatioThreshold":{"numerator":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"numeratorAlias":"numerator_alias","denominator":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"denominatorAlias":"string","rules":[{"condition":{"threshold":10,"timeWindow":{"logsRatioTimeWindowSpecificValue":"LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_RATIO_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"notificationPayloadFilter":"text","groupByFor":"LOGS_RATIO_GROUP_BY_FOR_BOTH_OR_UNSPECIFIED","undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"ignoreInfinity":true,"evaluationDelayMs":60000},"logsTimeRelativeThreshold":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"threshold":10,"comparedTo":"LOGS_TIME_RELATIVE_COMPARED_TO_PREVIOUS_HOUR_OR_UNSPECIFIED","conditionType":"LOGS_TIME_RELATIVE_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"ignoreInfinity":true,"notificationPayloadFilter":"text","undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"evaluationDelayMs":60000},"metricThreshold":{"metricFilter":{"promql":"string"},"rules":[{"condition":{"threshold":0.1,"forOverPct":0,"ofTheLast":{"metricTimeWindowSpecificValue":"METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED"},"conditionType":"METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"missingValues":{"replaceWithZero":true,"minNonNullValuesPct":0},"evaluationDelayMs":0},"tracingThreshold":{"tracingFilter":{"simpleFilter":{"tracingLabelFilters":{"applicationName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"serviceName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"operationName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"spanFields":[{"key":"string","filterType":{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}}]},"latencyThresholdMs":"string"}},"rules":[{"condition":{"spanAmount":0.1,"timeWindow":{"tracingTimeWindowValue":"TRACING_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"TRACING_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"}}],"notificationPayloadFilter":["string"]},"flow":{"stages":[{"flowStagesGroups":{"groups":[{"alertDefs":[{"id":1,"not":true}],"nextOp":"NEXT_OP_AND_OR_UNSPECIFIED","alertsOp":"ALERTS_OP_AND_OR_UNSPECIFIED"}]},"timeframeMs":60000,"timeframeType":"TIMEFRAME_TYPE_UNSPECIFIED"}],"enforceSuppression":true},"logsAnomaly":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"minimumThreshold":10,"timeWindow":{"logsTimeWindowSpecificValue":"LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"}}],"notificationPayloadFilter":"text","evaluationDelayMs":60000,"anomalyAlertSettings":{"percentageOfDeviation":10}},"metricAnomaly":{"metricFilter":{"promql":"string"},"rules":[{"condition":{"threshold":10,"forOverPct":10,"ofTheLast":{"metricTimeWindowSpecificValue":"METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED"},"minNonNullValuesPct":10,"conditionType":"METRIC_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"}}],"evaluationDelayMs":60000,"anomalyAlertSettings":{"percentageOfDeviation":10}},"logsNewValue":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"keypathToTrack":"metadata.field","timeWindow":{"logsNewValueTimeWindowSpecificValue":"LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_12_OR_UNSPECIFIED"}}}],"notificationPayloadFilter":"text"},"logsUniqueCount":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"maxUniqueCount":"string","timeWindow":{"logsUniqueValueTimeWindowSpecificValue":"LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTE_1_OR_UNSPECIFIED"}}}],"notificationPayloadFilter":"text","maxUniqueCountPerGroupByKey":100,"uniqueCountKeypath":"unique_count"},"groupByKeys":["string"],"incidentsSettings":{"minutes":10,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"notificationGroup":{"groupByKeys":["string"],"webhooks":[{"minutes":10,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","integration":{"integrationId":123,"recipients":{"emails":["string"]}}}],"destinations":[{"connectorId":"string","presetId":"string","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","triggeredRoutingOverrides":{"configOverrides":{"outputSchemaId":"string","messageConfigFields":[{"fieldName":"string","template":"string"}],"connectorConfigFields":[{"fieldName":"string","template":"string"}]}},"resolvedRouteOverrides":{"configOverrides":{"outputSchemaId":"string","messageConfigFields":[{"fieldName":"string","template":"string"}],"connectorConfigFields":[{"fieldName":"string","template":"string"}]}}}]},"notificationGroupExcess":[{"groupByKeys":["string"],"webhooks":[{"minutes":10,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","integration":{"integrationId":123,"recipients":{"emails":["string"]}}}],"destinations":[{"connectorId":"string","presetId":"string","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","triggeredRoutingOverrides":{"configOverrides":{"outputSchemaId":"string","messageConfigFields":[{"fieldName":"string","template":"string"}],"connectorConfigFields":[{"fieldName":"string","template":"string"}]}},"resolvedRouteOverrides":{"configOverrides":{"outputSchemaId":"string","messageConfigFields":[{"fieldName":"string","template":"string"}],"connectorConfigFields":[{"fieldName":"string","template":"string"}]}}}]}],"entityLabels":{"property1":"string","property2":"string"},"phantomMode":true,"deleted":true},"id":"alert-123"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v3/alert-defs"


            payload = {
                "alertDefProperties": {
                    "name": "My Alert",
                    "description": "Alert description",
                    "enabled": True,
                    "priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED",
                    "activeOn": {
                        "dayOfWeek": ["DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED"],
                        "startTime": {
                            "hours": 14,
                            "minutes": 30
                        },
                        "endTime": {
                            "hours": 14,
                            "minutes": 30
                        }
                    },
                    "type": "ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED",
                    "logsImmediate": {
                        "logsFilter": {"simpleFilter": {
                                "luceneQuery": "string",
                                "labelFilters": {
                                    "applicationName": [
                                        {
                                            "value": "string",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "subsystemName": [
                                        {
                                            "value": "string",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                                }
                            }},
                        "notificationPayloadFilter": "text"
                    },
                    "tracingImmediate": {
                        "tracingFilter": {"simpleFilter": {
                                "tracingLabelFilters": {
                                    "applicationName": [
                                        {
                                            "values": ["string"],
                                            "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "subsystemName": [
                                        {
                                            "values": ["string"],
                                            "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "serviceName": [
                                        {
                                            "values": ["string"],
                                            "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "operationName": [
                                        {
                                            "values": ["string"],
                                            "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "spanFields": [
                                        {
                                            "key": "string",
                                            "filterType": {
                                                "values": ["string"],
                                                "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                            }
                                        }
                                    ]
                                },
                                "latencyThresholdMs": "string"
                            }},
                        "notificationPayloadFilter": ["string"]
                    },
                    "logsThreshold": {
                        "logsFilter": {"simpleFilter": {
                                "luceneQuery": "string",
                                "labelFilters": {
                                    "applicationName": [
                                        {
                                            "value": "string",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "subsystemName": [
                                        {
                                            "value": "string",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                                }
                            }},
                        "undetectedValuesManagement": {
                            "triggerUndetectedValues": True,
                            "autoRetireTimeframe": "AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"
                        },
                        "rules": [
                            {
                                "condition": {
                                    "threshold": 100,
                                    "timeWindow": {"logsTimeWindowSpecificValue": "LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},
                                    "conditionType": "LOGS_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
                                },
                                "override": {"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}
                            }
                        ],
                        "notificationPayloadFilter": "text",
                        "evaluationDelayMs": 60000
                    },
                    "logsRatioThreshold": {
                        "numerator": {"simpleFilter": {
                                "luceneQuery": "string",
                                "labelFilters": {
                                    "applicationName": [
                                        {
                                            "value": "string",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "subsystemName": [
                                        {
                                            "value": "string",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                                }
                            }},
                        "numeratorAlias": "numerator_alias",
                        "denominator": {"simpleFilter": {
                                "luceneQuery": "string",
                                "labelFilters": {
                                    "applicationName": [
                                        {
                                            "value": "string",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "subsystemName": [
                                        {
                                            "value": "string",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                                }
                            }},
                        "denominatorAlias": "string",
                        "rules": [
                            {
                                "condition": {
                                    "threshold": 10,
                                    "timeWindow": {"logsRatioTimeWindowSpecificValue": "LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},
                                    "conditionType": "LOGS_RATIO_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
                                },
                                "override": {"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}
                            }
                        ],
                        "notificationPayloadFilter": "text",
                        "groupByFor": "LOGS_RATIO_GROUP_BY_FOR_BOTH_OR_UNSPECIFIED",
                        "undetectedValuesManagement": {
                            "triggerUndetectedValues": True,
                            "autoRetireTimeframe": "AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"
                        },
                        "ignoreInfinity": True,
                        "evaluationDelayMs": 60000
                    },
                    "logsTimeRelativeThreshold": {
                        "logsFilter": {"simpleFilter": {
                                "luceneQuery": "string",
                                "labelFilters": {
                                    "applicationName": [
                                        {
                                            "value": "string",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "subsystemName": [
                                        {
                                            "value": "string",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                                }
                            }},
                        "rules": [
                            {
                                "condition": {
                                    "threshold": 10,
                                    "comparedTo": "LOGS_TIME_RELATIVE_COMPARED_TO_PREVIOUS_HOUR_OR_UNSPECIFIED",
                                    "conditionType": "LOGS_TIME_RELATIVE_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
                                },
                                "override": {"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}
                            }
                        ],
                        "ignoreInfinity": True,
                        "notificationPayloadFilter": "text",
                        "undetectedValuesManagement": {
                            "triggerUndetectedValues": True,
                            "autoRetireTimeframe": "AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"
                        },
                        "evaluationDelayMs": 60000
                    },
                    "metricThreshold": {
                        "metricFilter": {"promql": "string"},
                        "rules": [
                            {
                                "condition": {
                                    "threshold": 0.1,
                                    "forOverPct": 0,
                                    "ofTheLast": {"metricTimeWindowSpecificValue": "METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED"},
                                    "conditionType": "METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
                                },
                                "override": {"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}
                            }
                        ],
                        "undetectedValuesManagement": {
                            "triggerUndetectedValues": True,
                            "autoRetireTimeframe": "AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"
                        },
                        "missingValues": {
                            "replaceWithZero": True,
                            "minNonNullValuesPct": 0
                        },
                        "evaluationDelayMs": 0
                    },
                    "tracingThreshold": {
                        "tracingFilter": {"simpleFilter": {
                                "tracingLabelFilters": {
                                    "applicationName": [
                                        {
                                            "values": ["string"],
                                            "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "subsystemName": [
                                        {
                                            "values": ["string"],
                                            "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "serviceName": [
                                        {
                                            "values": ["string"],
                                            "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "operationName": [
                                        {
                                            "values": ["string"],
                                            "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "spanFields": [
                                        {
                                            "key": "string",
                                            "filterType": {
                                                "values": ["string"],
                                                "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                            }
                                        }
                                    ]
                                },
                                "latencyThresholdMs": "string"
                            }},
                        "rules": [{"condition": {
                                    "spanAmount": 0.1,
                                    "timeWindow": {"tracingTimeWindowValue": "TRACING_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},
                                    "conditionType": "TRACING_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
                                }}],
                        "notificationPayloadFilter": ["string"]
                    },
                    "flow": {
                        "stages": [
                            {
                                "flowStagesGroups": {"groups": [
                                        {
                                            "alertDefs": [
                                                {
                                                    "id": 1,
                                                    "not": True
                                                }
                                            ],
                                            "nextOp": "NEXT_OP_AND_OR_UNSPECIFIED",
                                            "alertsOp": "ALERTS_OP_AND_OR_UNSPECIFIED"
                                        }
                                    ]},
                                "timeframeMs": 60000,
                                "timeframeType": "TIMEFRAME_TYPE_UNSPECIFIED"
                            }
                        ],
                        "enforceSuppression": True
                    },
                    "logsAnomaly": {
                        "logsFilter": {"simpleFilter": {
                                "luceneQuery": "string",
                                "labelFilters": {
                                    "applicationName": [
                                        {
                                            "value": "string",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "subsystemName": [
                                        {
                                            "value": "string",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                                }
                            }},
                        "rules": [{"condition": {
                                    "minimumThreshold": 10,
                                    "timeWindow": {"logsTimeWindowSpecificValue": "LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},
                                    "conditionType": "LOGS_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"
                                }}],
                        "notificationPayloadFilter": "text",
                        "evaluationDelayMs": 60000,
                        "anomalyAlertSettings": {"percentageOfDeviation": 10}
                    },
                    "metricAnomaly": {
                        "metricFilter": {"promql": "string"},
                        "rules": [{"condition": {
                                    "threshold": 10,
                                    "forOverPct": 10,
                                    "ofTheLast": {"metricTimeWindowSpecificValue": "METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED"},
                                    "minNonNullValuesPct": 10,
                                    "conditionType": "METRIC_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"
                                }}],
                        "evaluationDelayMs": 60000,
                        "anomalyAlertSettings": {"percentageOfDeviation": 10}
                    },
                    "logsNewValue": {
                        "logsFilter": {"simpleFilter": {
                                "luceneQuery": "string",
                                "labelFilters": {
                                    "applicationName": [
                                        {
                                            "value": "string",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "subsystemName": [
                                        {
                                            "value": "string",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                                }
                            }},
                        "rules": [{"condition": {
                                    "keypathToTrack": "metadata.field",
                                    "timeWindow": {"logsNewValueTimeWindowSpecificValue": "LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_12_OR_UNSPECIFIED"}
                                }}],
                        "notificationPayloadFilter": "text"
                    },
                    "logsUniqueCount": {
                        "logsFilter": {"simpleFilter": {
                                "luceneQuery": "string",
                                "labelFilters": {
                                    "applicationName": [
                                        {
                                            "value": "string",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "subsystemName": [
                                        {
                                            "value": "string",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                                }
                            }},
                        "rules": [{"condition": {
                                    "maxUniqueCount": "string",
                                    "timeWindow": {"logsUniqueValueTimeWindowSpecificValue": "LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTE_1_OR_UNSPECIFIED"}
                                }}],
                        "notificationPayloadFilter": "text",
                        "maxUniqueCountPerGroupByKey": 100,
                        "uniqueCountKeypath": "unique_count"
                    },
                    "groupByKeys": ["string"],
                    "incidentsSettings": {
                        "minutes": 10,
                        "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                    },
                    "notificationGroup": {
                        "groupByKeys": ["string"],
                        "webhooks": [
                            {
                                "minutes": 10,
                                "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                                "integration": {
                                    "integrationId": 123,
                                    "recipients": {"emails": ["string"]}
                                }
                            }
                        ],
                        "destinations": [
                            {
                                "connectorId": "string",
                                "presetId": "string",
                                "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                                "triggeredRoutingOverrides": {"configOverrides": {
                                        "outputSchemaId": "string",
                                        "messageConfigFields": [
                                            {
                                                "fieldName": "string",
                                                "template": "string"
                                            }
                                        ],
                                        "connectorConfigFields": [
                                            {
                                                "fieldName": "string",
                                                "template": "string"
                                            }
                                        ]
                                    }},
                                "resolvedRouteOverrides": {"configOverrides": {
                                        "outputSchemaId": "string",
                                        "messageConfigFields": [
                                            {
                                                "fieldName": "string",
                                                "template": "string"
                                            }
                                        ],
                                        "connectorConfigFields": [
                                            {
                                                "fieldName": "string",
                                                "template": "string"
                                            }
                                        ]
                                    }}
                            }
                        ]
                    },
                    "notificationGroupExcess": [
                        {
                            "groupByKeys": ["string"],
                            "webhooks": [
                                {
                                    "minutes": 10,
                                    "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                                    "integration": {
                                        "integrationId": 123,
                                        "recipients": {"emails": ["string"]}
                                    }
                                }
                            ],
                            "destinations": [
                                {
                                    "connectorId": "string",
                                    "presetId": "string",
                                    "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                                    "triggeredRoutingOverrides": {"configOverrides": {
                                            "outputSchemaId": "string",
                                            "messageConfigFields": [
                                                {
                                                    "fieldName": "string",
                                                    "template": "string"
                                                }
                                            ],
                                            "connectorConfigFields": [
                                                {
                                                    "fieldName": "string",
                                                    "template": "string"
                                                }
                                            ]
                                        }},
                                    "resolvedRouteOverrides": {"configOverrides": {
                                            "outputSchemaId": "string",
                                            "messageConfigFields": [
                                                {
                                                    "fieldName": "string",
                                                    "template": "string"
                                                }
                                            ],
                                            "connectorConfigFields": [
                                                {
                                                    "fieldName": "string",
                                                    "template": "string"
                                                }
                                            ]
                                        }}
                                }
                            ]
                        }
                    ],
                    "entityLabels": {
                        "property1": "string",
                        "property2": "string"
                    },
                    "phantomMode": True,
                    "deleted": True
                },
                "id": "alert-123"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v3/alert-defs \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"alertDefProperties":{"name":"My Alert","description":"Alert description","enabled":true,"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED","activeOn":{"dayOfWeek":["DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED"],"startTime":{"hours":14,"minutes":30},"endTime":{"hours":14,"minutes":30}},"type":"ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED","logsImmediate":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"notificationPayloadFilter":"text"},"tracingImmediate":{"tracingFilter":{"simpleFilter":{"tracingLabelFilters":{"applicationName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"serviceName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"operationName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"spanFields":[{"key":"string","filterType":{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}}]},"latencyThresholdMs":"string"}},"notificationPayloadFilter":["string"]},"logsThreshold":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"rules":[{"condition":{"threshold":100,"timeWindow":{"logsTimeWindowSpecificValue":"LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"notificationPayloadFilter":"text","evaluationDelayMs":60000},"logsRatioThreshold":{"numerator":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"numeratorAlias":"numerator_alias","denominator":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"denominatorAlias":"string","rules":[{"condition":{"threshold":10,"timeWindow":{"logsRatioTimeWindowSpecificValue":"LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_RATIO_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"notificationPayloadFilter":"text","groupByFor":"LOGS_RATIO_GROUP_BY_FOR_BOTH_OR_UNSPECIFIED","undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"ignoreInfinity":true,"evaluationDelayMs":60000},"logsTimeRelativeThreshold":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"threshold":10,"comparedTo":"LOGS_TIME_RELATIVE_COMPARED_TO_PREVIOUS_HOUR_OR_UNSPECIFIED","conditionType":"LOGS_TIME_RELATIVE_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"ignoreInfinity":true,"notificationPayloadFilter":"text","undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"evaluationDelayMs":60000},"metricThreshold":{"metricFilter":{"promql":"string"},"rules":[{"condition":{"threshold":0.1,"forOverPct":0,"ofTheLast":{"metricTimeWindowSpecificValue":"METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED"},"conditionType":"METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"missingValues":{"replaceWithZero":true,"minNonNullValuesPct":0},"evaluationDelayMs":0},"tracingThreshold":{"tracingFilter":{"simpleFilter":{"tracingLabelFilters":{"applicationName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"serviceName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"operationName":[{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"spanFields":[{"key":"string","filterType":{"values":["string"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}}]},"latencyThresholdMs":"string"}},"rules":[{"condition":{"spanAmount":0.1,"timeWindow":{"tracingTimeWindowValue":"TRACING_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"TRACING_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"}}],"notificationPayloadFilter":["string"]},"flow":{"stages":[{"flowStagesGroups":{"groups":[{"alertDefs":[{"id":1,"not":true}],"nextOp":"NEXT_OP_AND_OR_UNSPECIFIED","alertsOp":"ALERTS_OP_AND_OR_UNSPECIFIED"}]},"timeframeMs":60000,"timeframeType":"TIMEFRAME_TYPE_UNSPECIFIED"}],"enforceSuppression":true},"logsAnomaly":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"minimumThreshold":10,"timeWindow":{"logsTimeWindowSpecificValue":"LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"}}],"notificationPayloadFilter":"text","evaluationDelayMs":60000,"anomalyAlertSettings":{"percentageOfDeviation":10}},"metricAnomaly":{"metricFilter":{"promql":"string"},"rules":[{"condition":{"threshold":10,"forOverPct":10,"ofTheLast":{"metricTimeWindowSpecificValue":"METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED"},"minNonNullValuesPct":10,"conditionType":"METRIC_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"}}],"evaluationDelayMs":60000,"anomalyAlertSettings":{"percentageOfDeviation":10}},"logsNewValue":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"keypathToTrack":"metadata.field","timeWindow":{"logsNewValueTimeWindowSpecificValue":"LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_12_OR_UNSPECIFIED"}}}],"notificationPayloadFilter":"text"},"logsUniqueCount":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"string","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"maxUniqueCount":"string","timeWindow":{"logsUniqueValueTimeWindowSpecificValue":"LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTE_1_OR_UNSPECIFIED"}}}],"notificationPayloadFilter":"text","maxUniqueCountPerGroupByKey":100,"uniqueCountKeypath":"unique_count"},"groupByKeys":["string"],"incidentsSettings":{"minutes":10,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"notificationGroup":{"groupByKeys":["string"],"webhooks":[{"minutes":10,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","integration":{"integrationId":123,"recipients":{"emails":["string"]}}}],"destinations":[{"connectorId":"string","presetId":"string","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","triggeredRoutingOverrides":{"configOverrides":{"outputSchemaId":"string","messageConfigFields":[{"fieldName":"string","template":"string"}],"connectorConfigFields":[{"fieldName":"string","template":"string"}]}},"resolvedRouteOverrides":{"configOverrides":{"outputSchemaId":"string","messageConfigFields":[{"fieldName":"string","template":"string"}],"connectorConfigFields":[{"fieldName":"string","template":"string"}]}}}]},"notificationGroupExcess":[{"groupByKeys":["string"],"webhooks":[{"minutes":10,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","integration":{"integrationId":123,"recipients":{"emails":["string"]}}}],"destinations":[{"connectorId":"string","presetId":"string","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","triggeredRoutingOverrides":{"configOverrides":{"outputSchemaId":"string","messageConfigFields":[{"fieldName":"string","template":"string"}],"connectorConfigFields":[{"fieldName":"string","template":"string"}]}},"resolvedRouteOverrides":{"configOverrides":{"outputSchemaId":"string","messageConfigFields":[{"fieldName":"string","template":"string"}],"connectorConfigFields":[{"fieldName":"string","template":"string"}]}}}]}],"entityLabels":{"property1":"string","property2":"string"},"phantomMode":true,"deleted":true},"id":"alert-123"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v3/alert-defs-internal/alertVersionId/{alertVersionId}:
    get:
      operationId: AlertDefsInternalService_GetAlertDefByVersionIdInternal
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3GetAlertDefByVersionIdInternalResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: alertVersionId
          description: The Alert's version ID
          in: path
          required: true
          schema:
            type: string
      tags:
        - AlertDefsInternalService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/alert-defs-internal/alertVersionId/%7BalertVersionId%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v3/alert-defs-internal/alertVersionId/%7BalertVersionId%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v3/alert-defs-internal/alertVersionId/%7BalertVersionId%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v3/alert-defs/alertVersionId/{alertVersionId}:
    get:
      operationId: AlertDefsService_GetAlertDefByVersionId
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3GetAlertDefByVersionIdResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: alertVersionId
          in: path
          required: true
          schema:
            type: string
      tags:
        - AlertDefsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/alert-defs/alertVersionId/%7BalertVersionId%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v3/alert-defs/alertVersionId/%7BalertVersionId%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v3/alert-defs/alertVersionId/%7BalertVersionId%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v3/alert-defs/{id}:
    get:
      summary: Get Alert Def by non changing ID AKA UniqueIdentifier
      operationId: AlertDefsService_GetAlertDef
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3GetAlertDefResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - AlertDefsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/alert-defs/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v3/alert-defs/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v3/alert-defs/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    delete:
      operationId: AlertDefsService_DeleteAlertDef
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3DeleteAlertDefResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - AlertDefsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/alert-defs/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v3/alert-defs/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v3/alert-defs/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v3/alert-defs/{id}:setActive:
    post:
      operationId: AlertDefsService_SetActive
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertsv3SetActiveResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: active
          in: query
          required: true
          schema:
            type: boolean
      tags:
        - AlertDefsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/alert-defs/%7Bid%7D:setActive?active=SOME_BOOLEAN_VALUE';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v3/alert-defs/%7Bid%7D:setActive"


            querystring = {"active":"SOME_BOOLEAN_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://api.coralogix.com/mgmt/openapi/v3/alert-defs/%7Bid%7D:setActive?active=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v3/alert_event/{id}:
    get:
      operationId: AlertEventService_GetAlertEvent
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3GetAlertEventResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: pagination.pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: pagination.pageToken
          in: query
          required: false
          schema:
            type: string
      tags:
        - AlertEventService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/alert_event/%7Bid%7D?pagination.pageSize=SOME_INTEGER_VALUE&pagination.pageToken=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v3/alert_event/%7Bid%7D"


            querystring =
            {"pagination.pageSize":"SOME_INTEGER_VALUE","pagination.pageToken":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v3/alert_event/%7Bid%7D?pagination.pageSize=SOME_INTEGER_VALUE&pagination.pageToken=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v3/alert_event_stats:
    get:
      operationId: AlertEventService_GetAlertEventsStats
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3GetAlertEventStatsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: ids
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - AlertEventService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/alert_event_stats?ids=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v3/alert_event_stats"


            querystring = {"ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v3/alert_event_stats?ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v3/alerts/download:
    get:
      operationId: AlertDefsService_DownloadAlerts
      responses:
        '200':
          description: A successful response.(streaming responses)
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/v3DownloadAlertsResponse'
                  error:
                    $ref: '#/components/schemas/rpcStatus'
                title: Stream result of v3DownloadAlertsResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - AlertDefsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/alerts/download';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v3/alerts/download"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v3/alerts/download \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v3/api_keys:
    post:
      operationId: ApiKeysService_CreateApiKey
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3CreateApiKeyResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v3CreateApiKeyRequest'
        description: This data structure is used to create an API key.
        required: true
      tags:
        - ApiKeysService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v3/api_keys';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"my_api_key","owner":{"userId":"string","teamId":0,"organisationId":"string"},"keyPermissions":{"presets":["my_preset"],"permissions":["read_logs"]},"hashed":true}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v3/api_keys"


            payload = {
                "name": "my_api_key",
                "owner": {
                    "userId": "string",
                    "teamId": 0,
                    "organisationId": "string"
                },
                "keyPermissions": {
                    "presets": ["my_preset"],
                    "permissions": ["read_logs"]
                },
                "hashed": True
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v3/api_keys \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"my_api_key","owner":{"userId":"string","teamId":0,"organisationId":"string"},"keyPermissions":{"presets":["my_preset"],"permissions":["read_logs"]},"hashed":true}'
      x-hideTryItPanel: false
      x-showConsole: true
  /v3/api_keys/send_data:
    get:
      operationId: ApiKeysService_GetSendDataApiKeys
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3GetSendDataApiKeysResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - ApiKeysService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/api_keys/send_data';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v3/api_keys/send_data"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v3/api_keys/send_data \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
  /v3/api_keys/{keyId}:
    get:
      operationId: ApiKeysService_GetApiKey
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3GetApiKeyResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: string
      tags:
        - ApiKeysService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/api_keys/%7BkeyId%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v3/api_keys/%7BkeyId%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v3/api_keys/%7BkeyId%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    delete:
      operationId: ApiKeysService_DeleteApiKey
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3DeleteApiKeyResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: string
      tags:
        - ApiKeysService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/api_keys/%7BkeyId%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v3/api_keys/%7BkeyId%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v3/api_keys/%7BkeyId%7D \
              --header 'Authorization: Bearer <API_KEY>'
      x-hideTryItPanel: false
      x-showConsole: true
    put:
      operationId: ApiKeysService_UpdateApiKey
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3UpdateApiKeyResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeysServiceUpdateApiKeyBody'
        required: true
      tags:
        - ApiKeysService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/api_keys/%7BkeyId%7D';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"newName":"my_new_name","isActive":true,"presets":{"presets":["string"]},"permissions":{"permissions":["string"]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v3/api_keys/%7BkeyId%7D"


            payload = {
                "newName": "my_new_name",
                "isActive": True,
                "presets": {"presets": ["string"]},
                "permissions": {"permissions": ["string"]}
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v3/api_keys/%7BkeyId%7D \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"newName":"my_new_name","isActive":true,"presets":{"presets":["string"]},"permissions":{"permissions":["string"]}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /webhook-integration/v1/count:
    post:
      operationId: WebhookIntegrationService_CountWebhookIntegrations
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CountWebhookIntegrationsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CountWebhookIntegrationsRequest'
        description: Request to count the webhooks
        required: true
      tags:
        - WebhookIntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/webhook-integration/v1/count';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/webhook-integration/v1/count"


            payload = {}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/webhook-integration/v1/count \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{}'
      x-hideTryItPanel: false
      x-showConsole: true
  /webhook-integration/v1/create:
    post:
      operationId: WebhookIntegrationService_CreateWebhookIntegration
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateWebhookIntegrationResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CreateWebhookIntegrationRequest'
        description: Request to create a new webhook
        required: true
      tags:
        - WebhookIntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/webhook-integration/v1/create';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"Chocolate is love","apiKeyValue":"apn_b486d10b58184b25ae02c30dcba87775","application":"authorization","subsystem":"token_validator","isPrivate":true,"json":{"generate":{},"jsonPath":{"jsonPath":"$.field.date","automatic":{},"custom":{"format":"dd/MM/yyyy hh:mm:ss"}}},"text":{"generate":{},"regex":{"regex":"^[0-9]{4}","automatic":{},"custom":{"format":"dd/MM/yyyy hh:mm:ss"}}}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/webhook-integration/v1/create"


            payload = {
                "name": "Chocolate is love",
                "apiKeyValue": "apn_b486d10b58184b25ae02c30dcba87775",
                "application": "authorization",
                "subsystem": "token_validator",
                "isPrivate": True,
                "json": {
                    "generate": {},
                    "jsonPath": {
                        "jsonPath": "$.field.date",
                        "automatic": {},
                        "custom": {"format": "dd/MM/yyyy hh:mm:ss"}
                    }
                },
                "text": {
                    "generate": {},
                    "regex": {
                        "regex": "^[0-9]{4}",
                        "automatic": {},
                        "custom": {"format": "dd/MM/yyyy hh:mm:ss"}
                    }
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/webhook-integration/v1/create \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"Chocolate is love","apiKeyValue":"apn_b486d10b58184b25ae02c30dcba87775","application":"authorization","subsystem":"token_validator","isPrivate":true,"json":{"generate":{},"jsonPath":{"jsonPath":"$.field.date","automatic":{},"custom":{"format":"dd/MM/yyyy hh:mm:ss"}}},"text":{"generate":{},"regex":{"regex":"^[0-9]{4}","automatic":{},"custom":{"format":"dd/MM/yyyy hh:mm:ss"}}}}'
      x-hideTryItPanel: false
      x-showConsole: true
  /webhook-integration/v1/delete:
    post:
      operationId: WebhookIntegrationService_DeleteWebhookIntegration
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeleteWebhookIntegrationResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1DeleteWebhookIntegrationRequest'
        description: Request to delete a webhook
        required: true
      tags:
        - WebhookIntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/webhook-integration/v1/delete';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"b486d10b58184b25ae02c30dcba87775"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/webhook-integration/v1/delete"


            payload = {"id": "b486d10b58184b25ae02c30dcba87775"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/webhook-integration/v1/delete \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"b486d10b58184b25ae02c30dcba87775"}'
      x-hideTryItPanel: false
      x-showConsole: true
  /webhook-integration/v1/list:
    post:
      operationId: WebhookIntegrationService_ListWebhookIntegrations
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListWebhookIntegrationsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1ListWebhookIntegrationsRequest'
        description: Request to list integrations
        required: true
      tags:
        - WebhookIntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/webhook-integration/v1/list';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/webhook-integration/v1/list"


            payload = {}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/webhook-integration/v1/list \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{}'
      x-hideTryItPanel: false
      x-showConsole: true
  /webhook-integration/v1/toggle_activation:
    post:
      operationId: WebhookIntegrationService_ToggleWebhookIntegrationActivation
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/v1ToggleWebhookIntegrationActivationResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1ToggleWebhookIntegrationActivationRequest'
        description: To enable/disable webhook integrations
        required: true
      tags:
        - WebhookIntegrationService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/webhook-integration/v1/toggle_activation';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"b486d10b58184b25ae02c30dcba87775","isActive":true}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/webhook-integration/v1/toggle_activation"


            payload = {
                "id": "b486d10b58184b25ae02c30dcba87775",
                "isActive": True
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/webhook-integration/v1/toggle_activation \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"b486d10b58184b25ae02c30dcba87775","isActive":true}'
      x-hideTryItPanel: false
      x-showConsole: true
components:
  requestBodies:
    v1Connector: *ref_1
    v1ExtensionData: *ref_0
    v1Preset: *ref_2
  schemas:
    AggregationAggType:
      type: string
      enum:
        - AGG_TYPE_UNSPECIFIED
        - AGG_TYPE_MIN
        - AGG_TYPE_MAX
        - AGG_TYPE_COUNT
        - AGG_TYPE_AVG
        - AGG_TYPE_SUM
        - AGG_TYPE_HISTOGRAM
        - AGG_TYPE_SAMPLES
      default: AGG_TYPE_UNSPECIFIED
      title: Enum - Aggregation type
    AnnotationLogsSource:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/dashboardsv1commonLuceneQuery'
        strategy:
          $ref: '#/components/schemas/AnnotationLogsSourceStrategy'
        messageTemplate:
          type: string
        labelFields:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
    AnnotationLogsSourceStrategy:
      type: object
      properties:
        instant:
          $ref: '#/components/schemas/AnnotationLogsSourceStrategyInstant'
        range:
          $ref: '#/components/schemas/AnnotationLogsSourceStrategyRange'
        duration:
          $ref: '#/components/schemas/AnnotationLogsSourceStrategyDuration'
    AnnotationLogsSourceStrategyDuration:
      type: object
      properties:
        startTimestampField:
          $ref: '#/components/schemas/commonObservationField'
        durationField:
          $ref: '#/components/schemas/commonObservationField'
    AnnotationLogsSourceStrategyInstant:
      type: object
      properties:
        timestampField:
          $ref: '#/components/schemas/commonObservationField'
    AnnotationLogsSourceStrategyRange:
      type: object
      properties:
        startTimestampField:
          $ref: '#/components/schemas/commonObservationField'
        endTimestampField:
          $ref: '#/components/schemas/commonObservationField'
    AnnotationMetricsSource:
      type: object
      properties:
        promqlQuery:
          $ref: '#/components/schemas/dashboardsv1commonPromQlQuery'
        strategy:
          $ref: '#/components/schemas/AnnotationMetricsSourceStrategy'
        messageTemplate:
          type: string
        labels:
          type: array
          items:
            type: string
    AnnotationMetricsSourceStrategy:
      type: object
      properties:
        startTimeMetric:
          $ref: '#/components/schemas/MetricsSourceStartTimeMetric'
      title: Strategy for turning metrics data into annotations
    AnnotationSpansSource:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/dashboardsv1commonLuceneQuery'
        strategy:
          $ref: '#/components/schemas/AnnotationSpansSourceStrategy'
        messageTemplate:
          type: string
        labelFields:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
    AnnotationSpansSourceStrategy:
      type: object
      properties:
        instant:
          $ref: '#/components/schemas/AnnotationSpansSourceStrategyInstant'
        range:
          $ref: '#/components/schemas/AnnotationSpansSourceStrategyRange'
        duration:
          $ref: '#/components/schemas/AnnotationSpansSourceStrategyDuration'
    AnnotationSpansSourceStrategyDuration:
      type: object
      properties:
        startTimestampField:
          $ref: '#/components/schemas/commonObservationField'
        durationField:
          $ref: '#/components/schemas/commonObservationField'
    AnnotationSpansSourceStrategyInstant:
      type: object
      properties:
        timestampField:
          $ref: '#/components/schemas/commonObservationField'
    AnnotationSpansSourceStrategyRange:
      type: object
      properties:
        startTimestampField:
          $ref: '#/components/schemas/commonObservationField'
        endTimestampField:
          $ref: '#/components/schemas/commonObservationField'
    ApiKeysServiceUpdateApiKeyBody:
      type: object
      properties:
        newName:
          type: string
          example: my_new_name
        isActive:
          type: boolean
          example: true
        presets:
          $ref: '#/components/schemas/UpdateApiKeyRequestPresets'
        permissions:
          $ref: '#/components/schemas/UpdateApiKeyRequestPermissions'
      description: This data structure is used to update an API key.
      title: Update Api Key Request
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
    BarChartXAxis:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/XAxisXAxisByValue'
        time:
          $ref: '#/components/schemas/XAxisXAxisByTime'
    CheckApiKeyPermissionResponseKeyAuthorizationResult:
      type: object
      properties:
        apiKeyId:
          $ref: '#/components/schemas/v1ApiKeyId'
    CheckApiKeyPermissionResponseUnauthorized:
      type: object
    ColorsByColorsByAggregation:
      type: object
    ColorsByColorsByGroupBy:
      type: object
    ColorsByColorsByStack:
      type: object
    CommandInformationLanguage:
      type: string
      enum:
        - UNKNOWN
        - BASH
        - JAVASCRIPT
      default: UNKNOWN
    CommandInformationLink:
      type: object
      properties:
        key:
          type: string
        text:
          type: string
        url:
          type: string
      description: This data structure represents a list of outgoing webhook types.
      title: Link
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    CountPushBasedContextualDataIntegrationsResponseIntegrationCount:
      type: object
      properties:
        platform:
          $ref: '#/components/schemas/v1PushBasedPlatform'
        count:
          type: integer
          format: int64
          example: 1
      description: The number of Push Based Contextual Data Integration by a given platform
      title: Count Push Based ContextualData Integration
      required:
        - platform
        - count
    CreateNotificationResponseCreatedNotification:
      type: object
      properties:
        token:
          type: string
        routingTarget:
          $ref: '#/components/schemas/routingRoutingTarget'
        messageConfig:
          type: array
          items:
            $ref: '#/components/schemas/notification_centerRenderedMessageConfigField'
        connectorConfig:
          type: array
          items:
            $ref: >-
              #/components/schemas/notification_centerRenderedConnectorConfigField
    CreatePushBasedIntegrationRequestAmazonSns:
      type: object
      properties:
        internalTokenId:
          type: string
          example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
      description: Creates a new push based integration for diffAmazonSns data consumption
      title: Create Push Based Integration Request - AmazonSns
      required:
        - internalTokenId
    CreatePushBasedIntegrationRequestBitbucket:
      type: object
      properties:
        internalTokenId:
          type: string
          example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
      description: Creates a new push based integration for diffBitbucket data consumption
      title: Create Push Based Integration Request - Bitbucket
      required:
        - internalTokenId
    CreatePushBasedIntegrationRequestGithub:
      type: object
      properties:
        internalTokenId:
          type: string
          example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
      description: Creates a new push based integration for dGithub data consumption
      title: Create Push Based Integration Request - Github
      required:
        - internalTokenId
    CreatePushBasedIntegrationRequestGitlab:
      type: object
      properties:
        internalTokenId:
          type: string
          example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
      description: Creates a new push based integration for dGitlab data consumption
      title: Create Push Based Integration Request - Gitlab
      required:
        - internalTokenId
    CreatePushBasedIntegrationRequestIntercom:
      type: object
      properties:
        token:
          type: string
          example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
      description: Creates a new push based integration for difIntercom data consumption
      title: Create Push Based Integration Request - Intercom
      required:
        - token
    CreatePushBasedIntegrationRequestOpsgenie:
      type: object
      properties:
        internalTokenId:
          type: string
          example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
      description: Creates a new push based integration for difOpsgenie data consumption
      title: Create Push Based Integration Request - Opsgenie
      required:
        - internalTokenId
    CreatePushBasedIntegrationRequestPagerDuty:
      type: object
      properties:
        internalTokenId:
          type: string
          example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
      description: Creates a new push based integration for diffPagerDuty data consumption
      title: Create Push Based Integration Request - PagerDuty
      required:
        - internalTokenId
    CreatePushBasedIntegrationRequestPrometheus:
      type: object
      properties:
        internalTokenId:
          type: string
          example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
      description: >-
        Creates a new push based integration for diffePrometheus data
        consumption
      title: Create Push Based Integration Request - Prometheus
      required:
        - internalTokenId
    CreatePushBasedIntegrationRequestSlack:
      type: object
      properties:
        internalTokenId:
          type: string
          example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
      description: Creates a new push based integration for Slack data consumption
      title: Create Push Based Integration Request - Slack
      required:
        - internalTokenId
    DashboardAutoRefreshFiveMinutes:
      type: object
    DashboardAutoRefreshOff:
      type: object
    DashboardAutoRefreshTwoMinutes:
      type: object
    DashboardsServiceAssignDashboardFolderBody:
      type: object
      properties:
        requestId:
          type: string
        folderId:
          type: string
          title: could be null to assign the dashboard to root
    DashboardsServicePinDashboardBody:
      type: object
      properties:
        requestId:
          type: string
    DashboardsServiceReplaceDefaultDashboardBody:
      type: object
      properties:
        requestId:
          type: string
    DashboardsServiceUnpinDashboardBody:
      type: object
      properties:
        requestId:
          type: string
    DataTableLogsQueryAggregation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        isVisible:
          type: boolean
        aggregation:
          $ref: '#/components/schemas/commonLogsAggregation'
    DataTableLogsQueryGrouping:
      type: object
      properties:
        groupBy:
          type: array
          items:
            type: string
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/DataTableLogsQueryAggregation'
        groupBys:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
    DataTableSpansQueryAggregation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        isVisible:
          type: boolean
        aggregation:
          $ref: '#/components/schemas/commonSpansAggregation'
    DataTableSpansQueryGrouping:
      type: object
      properties:
        groupBy:
          type: array
          items:
            $ref: '#/components/schemas/commonSpanField'
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/DataTableSpansQueryAggregation'
    DataprimeResultKeyValue:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    DefaultIntegrationDetailsRegisteredInstance:
      type: object
      properties:
        id:
          type: string
        definitionVersion:
          type: string
        lastUpdated:
          type: string
          format: date-time
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/v1Parameter'
        integrationStatus:
          $ref: '#/components/schemas/v1IntegrationStatus'
        empty:
          $ref: '#/components/schemas/v1NoDeployment'
        cloudformation:
          $ref: '#/components/schemas/v1CloudFormationStack'
        arm:
          $ref: '#/components/schemas/v1ARMStack'
        isTesting:
          type: boolean
      description: This data structure represents a registered instance.
      title: RegisteredInstance
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    DimensionAggregationDimensionAggregationType:
      type: string
      enum:
        - DIMENSION_AGGREGATION_TYPE_UNSPECIFIED
        - DIMENSION_AGGREGATION_TYPE_UNIQUE_COUNT
        - DIMENSION_AGGREGATION_TYPE_ERROR_COUNT
      default: DIMENSION_AGGREGATION_TYPE_UNSPECIFIED
    DimensionAggregationDimensionField:
      type: string
      enum:
        - DIMENSION_FIELD_UNSPECIFIED
        - DIMENSION_FIELD_TRACE_ID
      default: DIMENSION_FIELD_UNSPECIFIED
    E2MAggSamplesSampleType:
      type: string
      enum:
        - SAMPLE_TYPE_UNSPECIFIED
        - SAMPLE_TYPE_MIN
        - SAMPLE_TYPE_MAX
      default: SAMPLE_TYPE_UNSPECIFIED
      title: Enum of aggregate type
    ExtensionItemPermissionResource:
      type: string
      enum:
        - UNKNOWN
        - ACTION
        - ALERT
        - CUSTOM_ENRICHMENT
        - GEO_ENRICHMENT
        - SECURITY_ENRICHMENT
        - RESOURCE_CLOUD_METADATA_ENRICHMENT
        - GRAFANA_DASHBOARD
        - KIBANA_DASHBOARD
        - PARSING_RULE
        - SAVED_VIEW
        - CX_CUSTOM_DASHBOARD
        - METRICS_RULE_GROUP
        - SPAN_EVENTS_TO_METRICS
        - LOGS_EVENTS_TO_METRICS
      default: UNKNOWN
    FailureKind:
      type: string
      enum:
        - Transient
        - Final
      default: Transient
    FilterEqualsSelection:
      type: object
      properties:
        all:
          $ref: '#/components/schemas/FilterEqualsSelectionAllSelection'
        list:
          $ref: '#/components/schemas/FilterEqualsSelectionListSelection'
      description: Selection defines the values for the equality comparison.
    FilterEqualsSelectionAllSelection:
      type: object
      description: AllSelection indicates that all values are selected.
    FilterEqualsSelectionListSelection:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
          description: List of values for the selection.
      description: ListSelection represents a selection from a list of specific values.
    FilterMetricsFilter:
      type: object
      properties:
        metric:
          type: string
          description: Metric name to apply the filter on.
        label:
          type: string
          description: Label associated with the metric.
        operator:
          $ref: '#/components/schemas/astFilterOperator'
      description: MetricsFilter represents the filter criteria for metrics.
    FilterNotEqualsSelection:
      type: object
      properties:
        list:
          $ref: '#/components/schemas/FilterNotEqualsSelectionListSelection'
      description: Selection defines the values for the non-equality comparison.
    FilterNotEqualsSelectionListSelection:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
          description: List of values for the selection.
      description: ListSelection represents a selection from a list of specific values.
    FilterSpansFilter:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/commonSpanField'
        operator:
          $ref: '#/components/schemas/astFilterOperator'
      description: SpansFilter represents the filter criteria for spans.
    GenericWebhookConfigMethodType:
      type: string
      enum:
        - UNKNOWN
        - GET
        - POST
        - PUT
      default: UNKNOWN
    GetAllExtensionsResponseRevision:
      type: object
      properties:
        version:
          type: string
        description:
          type: string
        excerpt:
          type: string
        labels:
          type: array
          items:
            type: string
        integrationDetails:
          type: array
          items:
            $ref: '#/components/schemas/v1IntegrationDetail'
        summary:
          $ref: '#/components/schemas/GetAllExtensionsResponseRevisionSummary'
    GetAllExtensionsResponseRevisionSummary:
      type: object
      properties:
        itemCounts:
          $ref: '#/components/schemas/v1ItemCounts'
        isNew:
          type: boolean
    GetConfigurationResponseIDPDetails:
      type: object
      properties:
        name:
          type: string
        icon:
          type: string
    GetDeployedExtensionsResponseDeployedExtension:
      type: object
      properties:
        id:
          type: string
        version:
          type: string
        applications:
          type: array
          items:
            type: string
        subsystems:
          type: array
          items:
            type: string
        itemIds:
          type: array
          items:
            type: string
        summary:
          $ref: >-
            #/components/schemas/GetDeployedExtensionsResponseDeployedExtensionSummary
    GetDeployedExtensionsResponseDeployedExtensionSummary:
      type: object
      properties:
        deployedItemCounts:
          $ref: '#/components/schemas/v1ItemCounts'
      description: Information about the deployed item
      title: DeployedExtensionSummary
      required:
        - deployedItemCounts
    GetGroupUsersResponseNextPageToken:
      type: object
      properties:
        nextPageToken:
          type: string
      description: >-
        This data structure represents the information associated with an API
        key.
      title: NextPageToken
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    GetGroupUsersResponseNoMorePages:
      type: object
      description: >-
        This data structure represents the information associated with an API
        key.
      title: NoMorePages
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    GetLimitsResponseLimitUsage:
      type: object
      properties:
        limit:
          type: integer
          format: int32
          title: the limit number of e2m creation
        used:
          type: integer
          format: int32
          title: how many e2m's were created
    GetNotificationStatusResponseDiscarded:
      type: object
      properties:
        message:
          type: string
    GetNotificationStatusResponsePending:
      type: object
    GetQuotasResponseEvents2MetricsUsage:
      type: object
      properties:
        labelsLimit:
          type: integer
          format: int32
        permutations:
          $ref: '#/components/schemas/GetQuotasResponseUsage'
        metrics:
          $ref: '#/components/schemas/GetQuotasResponseUsage'
    GetQuotasResponseUsage:
      type: object
      properties:
        used:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
    GetTemplateRequestCommonARMParams:
      type: object
      properties:
        logsUrl:
          type: string
        apiKey:
          type: string
        cgxDomain:
          type: string
      description: >-
        This data structure represents the common parameters for ARM
        integrations.
      title: CommonARMParams
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    HorizontalBarChartYAxisViewBy:
      type: object
      properties:
        category:
          $ref: '#/components/schemas/YAxisViewByYAxisViewByCategory'
        value:
          $ref: '#/components/schemas/YAxisViewByYAxisViewByValue'
    IbmEventNotificationsConfigEndpointType:
      type: string
      enum:
        - ENDPOINT_TYPE_DEFAULT_OR_PUBLIC
        - ENDPOINT_TYPE_PRIVATE
      default: ENDPOINT_TYPE_DEFAULT_OR_PUBLIC
    IntegrationDetailsDefaultIntegrationDetails:
      type: object
      properties:
        registered:
          type: array
          items:
            $ref: '#/components/schemas/DefaultIntegrationDetailsRegisteredInstance'
      description: This data structure represents a set of default integration details.
      title: DefaultIntegrationDetails
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationRevisionAzureArmTemplate:
      type: object
      properties:
        templateUrl:
          type: string
      description: This data structure represents an azure arm template.
      title: AzureArmTemplate
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationRevisionCloudFormationTemplate:
      type: object
      properties:
        templateUrl:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        postInstallationSteps:
          type: object
          additionalProperties:
            type: string
      description: This data structure represents a cloud formation template.
      title: CloudFormationTemplate
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationRevisionCommandInformation:
      type: object
      properties:
        name:
          type: string
        command:
          type: string
        description:
          type: string
        tooltipText:
          type: string
        language:
          $ref: '#/components/schemas/CommandInformationLanguage'
        links:
          type: array
          items:
            $ref: '#/components/schemas/CommandInformationLink'
      description: This data structure represents a list of outgoing webhook types.
      title: CommandInformation
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationRevisionConfigurationBlock:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        description:
          type: string
      description: This data structure represents a list of outgoing webhook types.
      title: ConfigurationBlock
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationRevisionFieldCondition:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/IntegrationRevisionFieldConditionConditionType'
        values:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationRevisionFieldConditionFieldValue'
      description: This data structure represents a list of outgoing webhook types.
      title: FieldCondition
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationRevisionFieldConditionConditionType:
      type: string
      enum:
        - UNKNOWN
        - OR
        - AND
      default: UNKNOWN
    IntegrationRevisionFieldConditionFieldValue:
      type: object
      properties:
        fieldName:
          type: string
        valuePattern:
          type: string
      description: This data structure represents a list of outgoing webhook types.
      title: FieldValue
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationRevisionFieldInformation:
      type: object
      properties:
        single:
          $ref: '#/components/schemas/IntegrationRevisionSingleValue'
        multiText:
          $ref: '#/components/schemas/IntegrationRevisionListTextValue'
        multipleSelection:
          $ref: '#/components/schemas/IntegrationRevisionMultipleSelectionValue'
        singleBoolean:
          $ref: '#/components/schemas/IntegrationRevisionSingleBooleanValue'
        selection:
          $ref: '#/components/schemas/IntegrationRevisionSelectionValue'
        singleNumber:
          $ref: '#/components/schemas/IntegrationRevisionSingleNumericValue'
        type:
          $ref: '#/components/schemas/IntegrationRevisionInputType'
        name:
          type: string
        tooltip:
          type: string
        templateParamName:
          type: string
        placeholder:
          type: string
        required:
          type: boolean
        predefined:
          type: boolean
        visible:
          type: boolean
        readonly:
          type: boolean
        applicableIf:
          $ref: '#/components/schemas/IntegrationRevisionFieldCondition'
        groupId:
          type: string
        upgradeNotice:
          type: string
        allowedPattern:
          type: string
        documentationReference:
          type: string
      description: This data structure represents a list of outgoing webhook types.
      title: FieldInformation
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationRevisionHelmChart:
      type: object
      properties:
        template:
          type: string
        commands:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationRevisionCommandInformation'
        guide:
          $ref: '#/components/schemas/IntegrationRevisionIntegrationGuide'
      description: This data structure represents a Helm chart.
      title: HelmChart
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationRevisionInputType:
      type: string
      enum:
        - API_KEY
        - TEXT
        - LIST_TEXT
        - MULTIPLE_SELECTION
        - BOOLEAN
        - SELECT
        - JSON
        - NUMBER
        - SENSITIVE_DATA
        - JSON_OBJECT_ARRAY
      default: API_KEY
    IntegrationRevisionIntegrationGuide:
      type: object
      properties:
        introduction:
          type: string
        installationRequirements:
          type: string
      description: This data structure represents a list of outgoing webhook types.
      title: 'IntegrationGuide '
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationRevisionListTextValue:
      type: object
      properties:
        options:
          type: array
          items:
            type: string
        defaultValues:
          type: array
          items:
            type: string
      description: This data structure represents a list text value.
      title: ListTextValue
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationRevisionManagedService:
      type: object
      description: This data structure represents a managed service.
      title: ManagedService
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationRevisionMultipleSelectionValue:
      type: object
      properties:
        options:
          type: array
          items:
            type: string
      description: This data structure represents a list of outgoing webhook types.
      title: MultipleSelectionValue
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationRevisionRum:
      type: object
      properties:
        browserSdkCommands:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationRevisionCommandInformation'
        sourceMapCommands:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationRevisionCommandInformation'
      description: This data structure represents a RUM integration.
      title: Rum
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationRevisionSelectionValue:
      type: object
      properties:
        options:
          type: array
          items:
            type: string
        defaultValue:
          type: string
      description: This data structure represents a list of outgoing webhook types.
      title: SelectionValue
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationRevisionSingleBooleanValue:
      type: object
      properties:
        defaultValue:
          type: boolean
      description: This data structure represents a list of outgoing webhook types.
      title: SingleBooleanValue
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationRevisionSingleNumericValue:
      type: object
      properties:
        defaultValue:
          type: number
          format: double
      description: This data structure represents a list of outgoing webhook types.
      title: SingleNumericValue
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationRevisionSingleValue:
      type: object
      properties:
        defaultValue:
          type: string
      description: This data structure represents a list of outgoing webhook types.
      title: SingleValue
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationRevisionTerraform:
      type: object
      properties:
        configurationBlocks:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationRevisionConfigurationBlock'
      description: This data structure represents a Terraform integration.
      title: Terraform
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationTypeAzureArm:
      type: object
      description: This data structure represents an Azure ARM integration
      title: AzureArm
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationTypeCloudformation:
      type: object
      description: This data structure represents a cloudformation integration
      title: Cloudformation
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationTypeContextualData:
      type: object
      description: This data structure represents a contextual data integration
      title: ContextualData
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationTypeGenericWebhook:
      type: object
      description: This data structure represents a generic webhook integration
      title: GenericWebhook
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationTypeManaged:
      type: object
      properties:
        variant:
          $ref: '#/components/schemas/ManagedVariant'
      description: this data structure represents a managed integration
      title: Managed
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationTypePushBasedContextualData:
      type: object
      description: This data structure represents a push based contextual data integration
      title: PushBasedContextualData
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    IntegrationTypeUntracked:
      type: object
      description: This data structure represents an untracked integration
      title: Untracked
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    LegendLegendColumn:
      type: string
      enum:
        - LEGEND_COLUMN_UNSPECIFIED
        - LEGEND_COLUMN_MIN
        - LEGEND_COLUMN_MAX
        - LEGEND_COLUMN_SUM
        - LEGEND_COLUMN_AVG
        - LEGEND_COLUMN_LAST
        - LEGEND_COLUMN_NAME
      default: LEGEND_COLUMN_UNSPECIFIED
    LegendLegendPlacement:
      type: string
      enum:
        - LEGEND_PLACEMENT_UNSPECIFIED
        - LEGEND_PLACEMENT_AUTO
        - LEGEND_PLACEMENT_BOTTOM
        - LEGEND_PLACEMENT_SIDE
        - LEGEND_PLACEMENT_HIDDEN
      default: LEGEND_PLACEMENT_UNSPECIFIED
    LineChartQueryDefinition:
      type: object
      properties:
        id:
          type: string
        query:
          $ref: '#/components/schemas/widgetsLineChartQuery'
        seriesNameTemplate:
          type: string
        seriesCountLimit:
          type: string
          format: int64
        unit:
          $ref: '#/components/schemas/widgetscommonUnit'
        scaleType:
          $ref: '#/components/schemas/commonScaleType'
        name:
          type: string
        isVisible:
          type: boolean
        colorScheme:
          type: string
        resolution:
          $ref: '#/components/schemas/LineChartResolution'
        dataModeType:
          $ref: '#/components/schemas/commonDataModeType'
        customUnit:
          type: string
        decimal:
          type: integer
          format: int32
    LineChartResolution:
      type: object
      properties:
        interval:
          type: string
        bucketsPresented:
          type: integer
          format: int32
    LineChartStackedLine:
      type: string
      enum:
        - STACKED_LINE_UNSPECIFIED
        - STACKED_LINE_ABSOLUTE
        - STACKED_LINE_RELATIVE
      default: STACKED_LINE_UNSPECIFIED
    LineChartTooltip:
      type: object
      properties:
        showLabels:
          type: boolean
        type:
          $ref: '#/components/schemas/LineChartTooltipType'
    LineChartTooltipType:
      type: string
      enum:
        - TOOLTIP_TYPE_UNSPECIFIED
        - TOOLTIP_TYPE_ALL
        - TOOLTIP_TYPE_SINGLE
      default: TOOLTIP_TYPE_UNSPECIFIED
    ListIbmEventNotificationsInstancesResponseEventNotificationsInstance:
      type: object
      properties:
        instanceId:
          type: string
          example: 5a8b249b-3915-49e7-ad43-030f585d84c5
        regionId:
          type: string
          example: eu-gb
        name:
          type: string
          example: chocolate-is-love
        crn:
          type: string
          example: >-
            crn:v1:staging:public:logs:eu-gb:a/436fa6f7760f46eba99e22f099c33cb8:5a8b249b-3915-49e7-ad43-030f585d84c5::
          title: Cloud Resource Name
        isUsed:
          type: boolean
          example: true
      description: >-
        This data structure represents the available EventNofitication
        instances.
      title: Even Notification intances
      required:
        - instanceId
        - regionId
        - crn
        - isUsed
    ListOutgoingWebhookTypesResponseOutgoingWebhookType:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/v1WebhookType'
        label:
          type: string
          example: example_label
        count:
          type: integer
          format: int64
          example: 3
      description: This data structure represents an outgoing webhook type.
      title: Outgoing Webhook Type
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - type
        - label
        - count
    ListPushBasedContextualDataIntegrationsResponsePushBasedContextualDataIntegration:
      type: object
      properties:
        id:
          type: string
          example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
        name:
          type: string
          example: I love chocolate
        application:
          type: string
          example: authorization
        subsystem:
          type: string
          example: token_validator
        platform:
          $ref: '#/components/schemas/v1PushBasedPlatform'
        token:
          type: string
          example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
        createdAt:
          type: string
          format: date-time
          example: '2024-10-24T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-10-24T00:00:00.000Z'
      description: Registered integration information for a given platform
      title: Push Based ContextualData Integration
      required:
        - id
        - name
        - application
        - subsystem
        - platform
        - token
        - createdAt
        - updatedAt
    ListWebhookIntegrationsResponseWebhookIntegration:
      type: object
      properties:
        webhookId:
          type: string
          example: b486d10b58184b25ae02c30dcba87775
        companyId:
          type: string
          example: '123456789'
        name:
          type: string
          example: Chocolate is love
        application:
          type: string
          example: authorization
        subsystem:
          type: string
          example: token_validator
        isPrivate:
          type: boolean
          example: true
        url:
          type: string
          example: http://chocolate.is.love
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: '2024-10-20T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-10-20T00:00:00.000Z'
      description: Webhook integration data
      title: Webhook Integration Response Body
      required:
        - webhookId
        - companyId
        - name
        - application
        - subsystem
        - isPrivate
        - url
        - isActive
        - createdAt
        - updatedAt
    LogsAggregationAverage:
      type: object
      properties:
        field:
          type: string
        observationField:
          $ref: '#/components/schemas/commonObservationField'
    LogsAggregationCount:
      type: object
    LogsAggregationCountDistinct:
      type: object
      properties:
        field:
          type: string
        observationField:
          $ref: '#/components/schemas/commonObservationField'
    LogsAggregationMax:
      type: object
      properties:
        field:
          type: string
        observationField:
          $ref: '#/components/schemas/commonObservationField'
    LogsAggregationMin:
      type: object
      properties:
        field:
          type: string
        observationField:
          $ref: '#/components/schemas/commonObservationField'
    LogsAggregationPercentile:
      type: object
      properties:
        field:
          type: string
        percent:
          type: number
          format: double
          title: Value in range (0, 100]
        observationField:
          $ref: '#/components/schemas/commonObservationField'
    LogsAggregationSum:
      type: object
      properties:
        field:
          type: string
        observationField:
          $ref: '#/components/schemas/commonObservationField'
    ManagedVariant:
      type: string
      enum:
        - DEFAULT
        - GCP
        - OAUTH
        - CUSTOM
      default: DEFAULT
    MetricAggregationMetricAggregationType:
      type: string
      enum:
        - METRIC_AGGREGATION_TYPE_UNSPECIFIED
        - METRIC_AGGREGATION_TYPE_MIN
        - METRIC_AGGREGATION_TYPE_MAX
        - METRIC_AGGREGATION_TYPE_AVERAGE
        - METRIC_AGGREGATION_TYPE_SUM
        - METRIC_AGGREGATION_TYPE_PERCENTILE_99
        - METRIC_AGGREGATION_TYPE_PERCENTILE_95
        - METRIC_AGGREGATION_TYPE_PERCENTILE_50
      default: METRIC_AGGREGATION_TYPE_UNSPECIFIED
    MetricsQueryMetricsLabelFilter:
      type: object
      properties:
        metric:
          $ref: '#/components/schemas/MetricsQueryStringOrVariable'
        label:
          $ref: '#/components/schemas/MetricsQueryStringOrVariable'
        operator:
          $ref: '#/components/schemas/QueryMetricsQueryOperator'
    MetricsQueryStringOrVariable:
      type: object
      properties:
        stringValue:
          type: string
        variableName:
          type: string
    MetricsSourceStartTimeMetric:
      type: object
    MultiSelectConstantListSource:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
    MultiSelectLogsPathSource:
      type: object
      properties:
        value:
          type: string
        observationField:
          $ref: '#/components/schemas/commonObservationField'
    MultiSelectMetricLabelSource:
      type: object
      properties:
        metricName:
          type: string
        label:
          type: string
    MultiSelectQueryLogsQuery:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/QueryLogsQueryType'
    MultiSelectQueryMetricsQuery:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/QueryMetricsQueryType'
    MultiSelectQuerySource:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/astMultiSelectQuery'
        refreshStrategy:
          $ref: '#/components/schemas/MultiSelectRefreshStrategy'
        valueDisplayOptions:
          $ref: '#/components/schemas/MultiSelectValueDisplayOptions'
    MultiSelectQuerySpansQuery:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/QuerySpansQueryType'
    MultiSelectRefreshStrategy:
      type: string
      enum:
        - REFRESH_STRATEGY_UNSPECIFIED
        - REFRESH_STRATEGY_ON_DASHBOARD_LOAD
        - REFRESH_STRATEGY_ON_TIME_FRAME_CHANGE
      default: REFRESH_STRATEGY_UNSPECIFIED
    MultiSelectSpanFieldSource:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/commonSpanField'
    MultiSelectValueDisplayOptions:
      type: object
      properties:
        valueRegex:
          type: string
        labelRegex:
          type: string
    MultiSelectVariableSelectionOptions:
      type: object
      properties:
        selectionType:
          $ref: '#/components/schemas/VariableSelectionOptionsSelectionType'
    NotificationAttachmentRaw:
      type: object
      properties:
        bytes:
          type: string
          format: byte
    NotificationAttachmentUrl:
      type: object
      properties:
        url:
          type: string
        contentLength:
          type: integer
          format: int64
    NotificationOperationHttpOperation:
      type: object
      properties:
        url:
          type: string
        method:
          type: string
        headers:
          type: object
          additionalProperties:
            type: string
    NotificationTargetGlobalRouterConfig:
      type: object
      properties:
        routerId:
          type: string
    NotificationTargetPrivateRouterConfig:
      type: object
      properties:
        routerKey:
          type: string
    ParameterApiKeyData:
      type: object
      properties:
        id:
          type: string
        value:
          type: string
      description: This data structure represents a list of outgoing webhook types.
      title: ApiKeyData
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    ParameterSensitiveDataPlaceholder:
      type: object
      description: This data structure represents a list of outgoing webhook types.
      title: SensitiveDataPlaceholder
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    ParameterStringList:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
      description: This data structure represents a list of outgoing webhook types.
      title: StringList
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    PieChartLabelDefinition:
      type: object
      properties:
        labelSource:
          $ref: '#/components/schemas/PieChartLabelSource'
        isVisible:
          type: boolean
        showName:
          type: boolean
        showValue:
          type: boolean
        showPercentage:
          type: boolean
    PieChartLabelSource:
      type: string
      enum:
        - LABEL_SOURCE_UNSPECIFIED
        - LABEL_SOURCE_INNER
        - LABEL_SOURCE_STACK
      default: LABEL_SOURCE_UNSPECIFIED
    QueryLogsQueryType:
      type: object
      properties:
        fieldName:
          $ref: '#/components/schemas/QueryLogsQueryTypeFieldName'
        fieldValue:
          $ref: '#/components/schemas/QueryLogsQueryTypeFieldValue'
    QueryLogsQueryTypeFieldName:
      type: object
      properties:
        logRegex:
          type: string
    QueryLogsQueryTypeFieldValue:
      type: object
      properties:
        observationField:
          $ref: '#/components/schemas/commonObservationField'
    QueryMetricsQueryEquals:
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/QueryMetricsQuerySelection'
    QueryMetricsQueryNotEquals:
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/QueryMetricsQuerySelection'
    QueryMetricsQueryOperator:
      type: object
      properties:
        equals:
          $ref: '#/components/schemas/QueryMetricsQueryEquals'
        notEquals:
          $ref: '#/components/schemas/QueryMetricsQueryNotEquals'
    QueryMetricsQuerySelection:
      type: object
      properties:
        list:
          $ref: '#/components/schemas/QueryMetricsQuerySelectionListSelection'
    QueryMetricsQuerySelectionListSelection:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/MetricsQueryStringOrVariable'
    QueryMetricsQueryType:
      type: object
      properties:
        metricName:
          $ref: '#/components/schemas/TypeMetricName'
        labelName:
          $ref: '#/components/schemas/TypeLabelName'
        labelValue:
          $ref: '#/components/schemas/TypeLabelValue'
    QuerySpansQueryType:
      type: object
      properties:
        fieldName:
          $ref: '#/components/schemas/QuerySpansQueryTypeFieldName'
        fieldValue:
          $ref: '#/components/schemas/QuerySpansQueryTypeFieldValue'
    QuerySpansQueryTypeFieldName:
      type: object
      properties:
        spanRegex:
          type: string
    QuerySpansQueryTypeFieldValue:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/commonSpanField'
    RumVersionDataLogMetadata:
      type: object
      properties:
        firstOccurrence:
          type: string
          format: date-time
        lastOccurrence:
          type: string
          format: date-time
      description: This data structure represents a list of outgoing webhook types.
      title: LogMetadata
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    RumVersionDataSourceMapMetadata:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        isUploadedSuccessful:
          type: boolean
      description: This data structure represents a list of outgoing webhook types.
      title: SourceMapMetadata
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    SearchCustomEnrichmentDataRequestSearchClause:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: custom_enrichment_name
      description: This data structure represents a search clause.
      title: Search Clause
      externalDocs:
        description: Find out more about Custom Enrichment in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - search_by
    SlackConfigAttachment:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/SlackConfigAttachmentType'
        isActive:
          type: boolean
          example: true
    SlackConfigAttachmentType:
      type: string
      enum:
        - EMPTY
        - METRIC_SNAPSHOT
        - LOGS
      default: EMPTY
    SlackConfigDigest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/SlackConfigDigestType'
        isActive:
          type: boolean
          example: true
    SlackConfigDigestType:
      type: string
      enum:
        - UNKNOWN
        - ERROR_AND_CRITICAL_LOGS
        - FLOW_ANOMALIES
        - SPIKE_ANOMALIES
        - DATA_USAGE
      default: UNKNOWN
    SpanFieldMetadataField:
      type: string
      enum:
        - METADATA_FIELD_UNSPECIFIED
        - METADATA_FIELD_APPLICATION_NAME
        - METADATA_FIELD_SUBSYSTEM_NAME
        - METADATA_FIELD_SERVICE_NAME
        - METADATA_FIELD_OPERATION_NAME
      default: METADATA_FIELD_UNSPECIFIED
    SpansAggregationDimensionAggregation:
      type: object
      properties:
        dimensionField:
          $ref: '#/components/schemas/DimensionAggregationDimensionField'
        aggregationType:
          $ref: '#/components/schemas/DimensionAggregationDimensionAggregationType'
    SpansAggregationMetricAggregation:
      type: object
      properties:
        metricField:
          $ref: '#/components/schemas/SpansAggregationMetricAggregationMetricField'
        aggregationType:
          $ref: '#/components/schemas/MetricAggregationMetricAggregationType'
    SpansAggregationMetricAggregationMetricField:
      type: string
      enum:
        - METRIC_FIELD_UNSPECIFIED
        - METRIC_FIELD_DURATION
      default: METRIC_FIELD_UNSPECIFIED
    TeamPermissionsMgmtServiceSetTeamGroupScopeBody:
      type: object
      properties:
        groupId:
          type: object
          title: / Team group to set scope to
          externalDocs:
            description: Find out more about groups
            url: >-
              https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
        scopeFilters:
          $ref: '#/components/schemas/v1ScopeFilters'
      description: >-
        Request message for setting scope filters (subsystems and applications)
        for a team group to control access permissions
      title: SetTeamGroupScopeRequest
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    TeamServiceUpdateTeamBody:
      type: object
      properties:
        teamId:
          type: object
          description: This data structure represents the ID of a team in the system.
          title: Team Info
          externalDocs:
            description: Find out more about teams
            url: >-
              https://coralogix.com/docs/user-guides/account-management/user-management/teams/#support
        teamName:
          type: string
          example: My Team
        dailyQuota:
          type: number
          format: double
          example: 0.01
      description: This data structure represents a request to update a team.
      title: Update Team Request
      externalDocs:
        description: Find out more about teams
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/teams/#support
      required:
        - teamId
    TestTemplateRenderResultFailureReason:
      type: string
      enum:
        - FAILURE_REASON_UNSPECIFIED
        - INVALID_TEMPLATE
        - FIELD_NOT_FOUND
        - TEMPLATE_EXCEEDS_MAX_LENGTH
        - RENDERED_VALUE_EXCEEDS_MAX_LENGTH
      default: FAILURE_REASON_UNSPECIFIED
    TriggerAutomaticTrigger:
      type: object
    TriggerManualTrigger:
      type: object
      properties:
        userEmail:
          type: string
    TypeLabelName:
      type: object
      properties:
        metricRegex:
          type: string
    TypeLabelValue:
      type: object
      properties:
        metricName:
          $ref: '#/components/schemas/MetricsQueryStringOrVariable'
        labelName:
          $ref: '#/components/schemas/MetricsQueryStringOrVariable'
        labelFilters:
          type: array
          items:
            $ref: '#/components/schemas/MetricsQueryMetricsLabelFilter'
    TypeMetricName:
      type: object
      properties:
        metricRegex:
          type: string
    UndeployExtensionResponseFailedItem:
      type: object
      properties:
        itemId:
          type: string
        remoteId:
          type: string
        reason:
          type: string
    UpdateApiKeyRequestPermissions:
      type: object
      properties:
        permissions:
          type: array
          items:
            type: string
      description: This data structure represents a set of permissions on an API key.
      title: Permissions
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
      required:
        - permissions
    UpdateApiKeyRequestPresets:
      type: object
      properties:
        presets:
          type: array
          items:
            type: string
      description: >-
        This data structure represents a set of permissions presets on an API
        key.
      title: Presets
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
      required:
        - presets
    UpdateTeamGroupRequestRoleUpdates:
      type: object
      properties:
        roleIds:
          type: array
          items:
            $ref: '#/components/schemas/v1RoleId'
          title: / Roles to associate with a team group
      description: >-
        This data structure represents the information associated with an API
        key.
      title: RoleUpdates
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    UpdateTeamGroupRequestUserUpdates:
      type: object
      properties:
        userIds:
          type: array
          items:
            $ref: '#/components/schemas/permissionsv1UserId'
          title: / Users to associate with a team group
      description: >-
        This data structure represents the information associated with an API
        key.
      title: UserUpdates
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    ValidateExtensionItemsResponseInvalidExtension:
      type: object
      properties:
        extensionId:
          type: string
        errorMessage:
          type: string
          description: Includes extension item parsing errors.
    VariableSelectionOptionsSelectionType:
      type: string
      enum:
        - SELECTION_TYPE_UNSPECIFIED
        - SELECTION_TYPE_MULTI_ALL
        - SELECTION_TYPE_MULTI
        - SELECTION_TYPE_SINGLE
      default: SELECTION_TYPE_UNSPECIFIED
    XAxisXAxisByTime:
      type: object
      properties:
        interval:
          type: string
        bucketsPresented:
          type: integer
          format: int32
    XAxisXAxisByValue:
      type: object
    YAxisViewByYAxisViewByCategory:
      type: object
    YAxisViewByYAxisViewByValue:
      type: object
    actionsv2Action:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        url:
          type: string
        isHidden:
          type: boolean
        isPrivate:
          type: boolean
        sourceType:
          $ref: '#/components/schemas/actionsv2SourceType'
        applicationNames:
          type: array
          items:
            type: string
        subsystemNames:
          type: array
          items:
            type: string
        createdBy:
          type: string
    actionsv2SourceType:
      type: string
      enum:
        - SOURCE_TYPE_UNSPECIFIED
        - SOURCE_TYPE_LOG
        - SOURCE_TYPE_DATA_MAP
      default: SOURCE_TYPE_UNSPECIFIED
    alertsv3ConnectorConfigField:
      type: object
      properties:
        fieldName:
          type: string
        template:
          type: string
    alertsv3IntegrationType:
      type: object
      properties:
        integrationId:
          type: integer
          format: int64
          example: 123
        recipients:
          $ref: '#/components/schemas/v3Recipients'
    alertsv3LogsFilter:
      type: object
      properties:
        simpleFilter:
          $ref: '#/components/schemas/v3LogsSimpleFilter'
      description: Filter configuration for log-based alerts
      title: Logs Filter
      required:
        - filter_type
    alertsv3MessageConfigField:
      type: object
      properties:
        fieldName:
          type: string
        template:
          type: string
    alertsv3SetActiveResponse:
      type: object
      description: Response after enabling or disabling an alert definition
      title: Set Active Response
    alertsv3SourceOverrides:
      type: object
      properties:
        outputSchemaId:
          type: string
        messageConfigFields:
          type: array
          items:
            $ref: '#/components/schemas/alertsv3MessageConfigField'
        connectorConfigFields:
          type: array
          items:
            $ref: '#/components/schemas/alertsv3ConnectorConfigField'
    apmcommonv2OrderBy:
      type: object
      properties:
        fieldName:
          type: string
          example: field_name
        direction:
          $ref: '#/components/schemas/commonv2OrderByDirection'
      description: This data structure represents an order by clause in Coralogix APM.
      title: Order By
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - fieldName
        - direction
    archivekafka_out_targetsv1CompressionType:
      type: string
      enum:
        - COMPRESSION_TYPE_UNSPECIFIED
        - COMPRESSION_TYPE_GZIP
      default: COMPRESSION_TYPE_UNSPECIFIED
    archivekafka_out_targetsv1Target:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        isActive:
          type: boolean
        topic:
          type: string
        brokers:
          type: string
        dpxlExpression:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        apiKey:
          type: string
        compressionType:
          $ref: '#/components/schemas/archivekafka_out_targetsv1CompressionType'
    archivekafka_out_targetsv2Target:
      type: object
      properties:
        awsMsk:
          $ref: '#/components/schemas/kafka_out_targetsv2AwsMsk'
        ibmEventStreams:
          $ref: '#/components/schemas/kafka_out_targetsv2IbmEventStreams'
        kafkaOutSpec:
          $ref: '#/components/schemas/v2KafkaOutSpec'
    archivev1CompanyArchiveConfig:
      type: object
      properties:
        companyId:
          type: integer
          format: int64
        archiveConfigured:
          type: boolean
    archivev1GetTargetResponse:
      type: object
      properties:
        target:
          $ref: '#/components/schemas/coralogixarchivev1Target'
    archivev1SetTargetResponse:
      type: object
      properties:
        target:
          $ref: '#/components/schemas/coralogixarchivev1Target'
    archivev2GetTargetResponse:
      type: object
      properties:
        target:
          $ref: '#/components/schemas/coralogixarchivev2Target'
      description: This data structure is used to retrieve a storage target for logs.
      title: Get Target Response
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - target
    archivev2OrderDirection:
      type: string
      enum:
        - ORDER_DIRECTION_UNSPECIFIED
        - ORDER_DIRECTION_ASC
        - ORDER_DIRECTION_DESC
      default: ORDER_DIRECTION_UNSPECIFIED
    archivev2PartitioningScheme:
      type: string
      enum:
        - PARTITIONING_SCHEME_UNSPECIFIED
        - PARTITIONING_SCHEME_DT_HR
      default: PARTITIONING_SCHEME_UNSPECIFIED
    archivev2SetTargetRequest:
      type: object
      properties:
        isActive:
          type: boolean
          example: true
        s3:
          $ref: '#/components/schemas/v2S3TargetSpec'
        ibmCos:
          $ref: '#/components/schemas/v2IBMCosTargetSpec'
      description: This data structure is used to set a storage target for logs.
      title: Set Target Response
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - isActive
        - target_spec
    archivev2SetTargetResponse:
      type: object
      properties:
        target:
          $ref: '#/components/schemas/coralogixarchivev2Target'
      description: This data structure is obtained after setting a storage target for logs.
      title: Set Target Response
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - target
    astAnnotationSource:
      type: object
      properties:
        metrics:
          $ref: '#/components/schemas/AnnotationMetricsSource'
        logs:
          $ref: '#/components/schemas/AnnotationLogsSource'
        spans:
          $ref: '#/components/schemas/AnnotationSpansSource'
    astConstant:
      type: object
      properties:
        value:
          type: string
    astCustomSectionOptions:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        collapsed:
          type: boolean
        color:
          $ref: '#/components/schemas/astSectionColor'
    astDashboard:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the dashboard.
        name:
          type: string
          description: Display name of the dashboard.
        description:
          type: string
          description: Brief description or summary of the dashboard's purpose or content.
        layout:
          $ref: '#/components/schemas/astLayout'
        variables:
          type: array
          items:
            $ref: '#/components/schemas/astVariable'
          description: >-
            List of variables that can be used within the dashboard for dynamic
            content.
        filters:
          type: array
          items:
            $ref: '#/components/schemas/v1astFilter'
          description: List of filters that can be applied to the dashboard's data.
        absoluteTimeFrame:
          $ref: '#/components/schemas/commonTimeFrame'
        relativeTimeFrame:
          type: string
          description: Relative time frame specifying a duration from the current time.
        folderId:
          $ref: '#/components/schemas/v1UUID'
        folderPath:
          $ref: '#/components/schemas/astFolderPath'
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/v1astAnnotation'
        'off':
          $ref: '#/components/schemas/DashboardAutoRefreshOff'
        twoMinutes:
          $ref: '#/components/schemas/DashboardAutoRefreshTwoMinutes'
        fiveMinutes:
          $ref: '#/components/schemas/DashboardAutoRefreshFiveMinutes'
      description: >-
        Dashboard represents the structure and configuration of a Coralogix
        Custom Dashboard.
    astFilterEquals:
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/FilterEqualsSelection'
      description: Equals represents an equality comparison operation.
    astFilterLogsFilter:
      type: object
      properties:
        field:
          type: string
          description: Field in the logs to apply the filter on.
        operator:
          $ref: '#/components/schemas/astFilterOperator'
        observationField:
          $ref: '#/components/schemas/commonObservationField'
      description: LogsFilter represents the filter criteria for logs.
    astFilterNotEquals:
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/FilterNotEqualsSelection'
      description: NotEquals represents a non-equality comparison operation.
    astFilterOperator:
      type: object
      properties:
        equals:
          $ref: '#/components/schemas/astFilterEquals'
        notEquals:
          $ref: '#/components/schemas/astFilterNotEquals'
      description: Operator defines the comparison operation for the filter.
    astFilterSource:
      type: object
      properties:
        logs:
          $ref: '#/components/schemas/astFilterLogsFilter'
        spans:
          $ref: '#/components/schemas/FilterSpansFilter'
        metrics:
          $ref: '#/components/schemas/FilterMetricsFilter'
      description: Source defines the type of data the filter applies to.
    astFolderPath:
      type: object
      properties:
        segments:
          type: array
          items:
            type: string
    astInternalSectionOptions:
      type: object
    astLayout:
      type: object
      properties:
        sections:
          type: array
          items:
            $ref: '#/components/schemas/astSection'
    astMultiSelect:
      type: object
      properties:
        selected:
          type: array
          items:
            type: string
        source:
          $ref: '#/components/schemas/astMultiSelectSource'
        selection:
          $ref: '#/components/schemas/astMultiSelectSelection'
        valuesOrderDirection:
          $ref: '#/components/schemas/v1commonOrderDirection'
        selectionOptions:
          $ref: '#/components/schemas/MultiSelectVariableSelectionOptions'
    astMultiSelectQuery:
      type: object
      properties:
        logsQuery:
          $ref: '#/components/schemas/MultiSelectQueryLogsQuery'
        metricsQuery:
          $ref: '#/components/schemas/MultiSelectQueryMetricsQuery'
        spansQuery:
          $ref: '#/components/schemas/MultiSelectQuerySpansQuery'
    astMultiSelectSelection:
      type: object
      properties:
        all:
          $ref: '#/components/schemas/astMultiSelectSelectionAllSelection'
        list:
          $ref: '#/components/schemas/astMultiSelectSelectionListSelection'
    astMultiSelectSelectionAllSelection:
      type: object
    astMultiSelectSelectionListSelection:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
        labels:
          type: array
          items:
            type: string
    astMultiSelectSource:
      type: object
      properties:
        logsPath:
          $ref: '#/components/schemas/MultiSelectLogsPathSource'
        metricLabel:
          $ref: '#/components/schemas/MultiSelectMetricLabelSource'
        constantList:
          $ref: '#/components/schemas/MultiSelectConstantListSource'
        spanField:
          $ref: '#/components/schemas/MultiSelectSpanFieldSource'
        query:
          $ref: '#/components/schemas/MultiSelectQuerySource'
    astRow:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/v1UUID'
        appearance:
          $ref: '#/components/schemas/astRowAppearance'
        widgets:
          type: array
          items:
            $ref: '#/components/schemas/astWidget'
    astRowAppearance:
      type: object
      properties:
        height:
          type: integer
          format: int32
    astSection:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/v1UUID'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/astRow'
        options:
          $ref: '#/components/schemas/astSectionOptions'
    astSectionColor:
      type: object
      properties:
        predefined:
          $ref: '#/components/schemas/astSectionPredefinedColor'
    astSectionOptions:
      type: object
      properties:
        internal:
          $ref: '#/components/schemas/astInternalSectionOptions'
        custom:
          $ref: '#/components/schemas/astCustomSectionOptions'
    astSectionPredefinedColor:
      type: string
      enum:
        - SECTION_PREDEFINED_COLOR_UNSPECIFIED
        - SECTION_PREDEFINED_COLOR_CYAN
        - SECTION_PREDEFINED_COLOR_GREEN
        - SECTION_PREDEFINED_COLOR_BLUE
        - SECTION_PREDEFINED_COLOR_PURPLE
        - SECTION_PREDEFINED_COLOR_MAGENTA
        - SECTION_PREDEFINED_COLOR_PINK
        - SECTION_PREDEFINED_COLOR_ORANGE
      default: SECTION_PREDEFINED_COLOR_UNSPECIFIED
    astVariable:
      type: object
      properties:
        name:
          type: string
        definition:
          $ref: '#/components/schemas/astVariableDefinition'
        displayName:
          type: string
        description:
          type: string
        displayType:
          $ref: '#/components/schemas/astVariableDisplayType'
    astVariableDefinition:
      type: object
      properties:
        constant:
          $ref: '#/components/schemas/astConstant'
        multiSelect:
          $ref: '#/components/schemas/astMultiSelect'
    astVariableDisplayType:
      type: string
      enum:
        - VARIABLE_DISPLAY_TYPE_UNSPECIFIED
        - VARIABLE_DISPLAY_TYPE_LABEL_VALUE
        - VARIABLE_DISPLAY_TYPE_VALUE
        - VARIABLE_DISPLAY_TYPE_NOTHING
      default: VARIABLE_DISPLAY_TYPE_UNSPECIFIED
    astWidget:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/v1UUID'
        title:
          type: string
        description:
          type: string
        definition:
          $ref: '#/components/schemas/astWidgetDefinition'
        appearance:
          $ref: '#/components/schemas/astWidgetAppearance'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    astWidgetAppearance:
      type: object
      properties:
        width:
          type: integer
          format: int32
    astWidgetDefinition:
      type: object
      properties:
        lineChart:
          $ref: '#/components/schemas/astwidgetsLineChart'
        dataTable:
          $ref: '#/components/schemas/widgetsDataTable'
        gauge:
          $ref: '#/components/schemas/astwidgetsGauge'
        pieChart:
          $ref: '#/components/schemas/widgetsPieChart'
        barChart:
          $ref: '#/components/schemas/widgetsBarChart'
        horizontalBarChart:
          $ref: '#/components/schemas/widgetsHorizontalBarChart'
        markdown:
          $ref: '#/components/schemas/widgetsMarkdown'
        hexagon:
          $ref: '#/components/schemas/widgetsHexagon'
    astwidgetsGauge:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/widgetsGaugeQuery'
        min:
          type: number
          format: double
        max:
          type: number
          format: double
        showInnerArc:
          type: boolean
        showOuterArc:
          type: boolean
        unit:
          $ref: '#/components/schemas/widgetsGaugeUnit'
        thresholds:
          type: array
          items:
            $ref: '#/components/schemas/widgetsGaugeThreshold'
        dataModeType:
          $ref: '#/components/schemas/commonDataModeType'
        thresholdBy:
          $ref: '#/components/schemas/widgetsGaugeThresholdBy'
        customUnit:
          type: string
        decimal:
          type: integer
          format: int32
        thresholdType:
          $ref: '#/components/schemas/commonThresholdType'
        legend:
          $ref: '#/components/schemas/commonLegend'
        legendBy:
          $ref: '#/components/schemas/commonLegendBy'
    astwidgetsLineChart:
      type: object
      properties:
        legend:
          $ref: '#/components/schemas/commonLegend'
        tooltip:
          $ref: '#/components/schemas/LineChartTooltip'
        queryDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/LineChartQueryDefinition'
        stackedLine:
          $ref: '#/components/schemas/LineChartStackedLine'
    astwidgetscommonLuceneQuery:
      type: object
      properties:
        value:
          type: string
    astwidgetscommonPromQlQuery:
      type: object
      properties:
        value:
          type: string
    commonAnnotationEvent:
      type: object
      properties:
        instant:
          $ref: '#/components/schemas/commonAnnotationEventInstant'
        range:
          $ref: '#/components/schemas/commonAnnotationEventRange'
    commonAnnotationEventInstant:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        labels:
          type: object
          additionalProperties:
            type: string
        payload:
          type: object
    commonAnnotationEventRange:
      type: object
      properties:
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        labels:
          type: object
          additionalProperties:
            type: string
        payload:
          type: object
    commonColorsBy:
      type: object
      properties:
        stack:
          $ref: '#/components/schemas/ColorsByColorsByStack'
        groupBy:
          $ref: '#/components/schemas/ColorsByColorsByGroupBy'
        aggregation:
          $ref: '#/components/schemas/ColorsByColorsByAggregation'
    commonDashboardFolder:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        parentId:
          type: string
    commonDataModeType:
      type: string
      enum:
        - DATA_MODE_TYPE_HIGH_UNSPECIFIED
        - DATA_MODE_TYPE_ARCHIVE
      default: DATA_MODE_TYPE_HIGH_UNSPECIFIED
    commonDataPoint:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        value:
          type: number
          format: double
    commonDataprimeResult:
      type: object
      properties:
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/DataprimeResultKeyValue'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/DataprimeResultKeyValue'
        userData:
          type: string
    commonDatasetScope:
      type: string
      enum:
        - DATASET_SCOPE_UNSPECIFIED
        - DATASET_SCOPE_USER_DATA
        - DATASET_SCOPE_LABEL
        - DATASET_SCOPE_METADATA
      default: DATASET_SCOPE_UNSPECIFIED
    commonFieldGroup:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    commonFullDataprimeQuery:
      type: object
      properties:
        serialized:
          $ref: '#/components/schemas/commonSerializedDataprimeQuery'
        raw:
          $ref: '#/components/schemas/v1commonDataprimeQuery'
    commonGroupLimit:
      type: object
      properties:
        groupByFields:
          type: array
          items:
            type: string
        limit:
          type: integer
          format: int32
        minPercentage:
          type: integer
          format: int32
    commonGroupedSeries:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/v1commonGroup'
    commonLabelledValue:
      type: object
      properties:
        name:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        value:
          type: number
          format: double
    commonLegend:
      type: object
      properties:
        isVisible:
          type: boolean
        columns:
          type: array
          items:
            $ref: '#/components/schemas/LegendLegendColumn'
        groupByQuery:
          type: boolean
        placement:
          $ref: '#/components/schemas/LegendLegendPlacement'
    commonLegendBy:
      type: string
      enum:
        - LEGEND_BY_UNSPECIFIED
        - LEGEND_BY_THRESHOLDS
        - LEGEND_BY_GROUPS
      default: LEGEND_BY_UNSPECIFIED
    commonLogSeverityLevel:
      type: string
      enum:
        - LOG_SEVERITY_LEVEL_UNSPECIFIED
        - LOG_SEVERITY_LEVEL_DEBUG
        - LOG_SEVERITY_LEVEL_VERBOSE
        - LOG_SEVERITY_LEVEL_INFO
        - LOG_SEVERITY_LEVEL_WARNING
        - LOG_SEVERITY_LEVEL_ERROR
        - LOG_SEVERITY_LEVEL_CRITICAL
      default: LOG_SEVERITY_LEVEL_UNSPECIFIED
    commonLogsAggregation:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/LogsAggregationCount'
        countDistinct:
          $ref: '#/components/schemas/LogsAggregationCountDistinct'
        sum:
          $ref: '#/components/schemas/LogsAggregationSum'
        average:
          $ref: '#/components/schemas/LogsAggregationAverage'
        min:
          $ref: '#/components/schemas/LogsAggregationMin'
        max:
          $ref: '#/components/schemas/LogsAggregationMax'
        percentile:
          $ref: '#/components/schemas/LogsAggregationPercentile'
    commonMetricsQueryEditorMode:
      type: string
      enum:
        - METRICS_QUERY_EDITOR_MODE_UNSPECIFIED
        - METRICS_QUERY_EDITOR_MODE_TEXT
        - METRICS_QUERY_EDITOR_MODE_BUILDER
      default: METRICS_QUERY_EDITOR_MODE_UNSPECIFIED
    commonMultiGroup:
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/commonFieldGroup'
        values:
          type: array
          items:
            type: number
            format: double
    commonObservationField:
      type: object
      properties:
        keypath:
          type: array
          items:
            type: string
        scope:
          $ref: '#/components/schemas/commonDatasetScope'
    commonOrderingField:
      type: object
      properties:
        field:
          type: string
        orderDirection:
          $ref: '#/components/schemas/v1commonOrderDirection'
    commonPromQLQueryType:
      type: string
      enum:
        - PROM_QL_QUERY_TYPE_UNSPECIFIED
        - PROM_QL_QUERY_TYPE_RANGE
        - PROM_QL_QUERY_TYPE_INSTANT
      default: PROM_QL_QUERY_TYPE_UNSPECIFIED
    commonScaleType:
      type: string
      enum:
        - SCALE_TYPE_UNSPECIFIED
        - SCALE_TYPE_LINEAR
        - SCALE_TYPE_LOGARITHMIC
      default: SCALE_TYPE_UNSPECIFIED
    commonSerializedDataprimeQuery:
      type: object
      properties:
        data:
          type: string
          format: byte
    commonSortByType:
      type: string
      enum:
        - SORT_BY_TYPE_UNSPECIFIED
        - SORT_BY_TYPE_VALUE
        - SORT_BY_TYPE_NAME
      default: SORT_BY_TYPE_UNSPECIFIED
    commonSpanField:
      type: object
      properties:
        metadataField:
          $ref: '#/components/schemas/SpanFieldMetadataField'
        tagField:
          type: string
        processTagField:
          type: string
    commonSpansAggregation:
      type: object
      properties:
        metricAggregation:
          $ref: '#/components/schemas/SpansAggregationMetricAggregation'
        dimensionAggregation:
          $ref: '#/components/schemas/SpansAggregationDimensionAggregation'
    commonThresholdType:
      type: string
      enum:
        - THRESHOLD_TYPE_UNSPECIFIED
        - THRESHOLD_TYPE_RELATIVE
        - THRESHOLD_TYPE_ABSOLUTE
      default: THRESHOLD_TYPE_UNSPECIFIED
    commonTimeFrame:
      type: object
      properties:
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time
    commonTimeFrameSelect:
      type: object
      properties:
        absoluteTimeFrame:
          $ref: '#/components/schemas/commonTimeFrame'
        relativeTimeFrame:
          type: string
    commonTimeSeries:
      type: object
      properties:
        name:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/commonDataPoint'
        labels:
          type: object
          additionalProperties:
            type: string
    commonv2DataSource:
      type: object
      properties:
        provider:
          type: string
        exporter:
          type: string
    commonv2OrderByDirection:
      type: string
      enum:
        - ORDER_BY_DIRECTION_UNSPECIFIED
        - ORDER_BY_DIRECTION_ASC
        - ORDER_BY_DIRECTION_DESC
      default: ORDER_BY_DIRECTION_UNSPECIFIED
    coralogixapislogs2metricsv2Severity:
      type: string
      enum:
        - SEVERITY_UNSPECIFIED
        - SEVERITY_DEBUG
        - SEVERITY_VERBOSE
        - SEVERITY_INFO
        - SEVERITY_WARNING
        - SEVERITY_ERROR
        - SEVERITY_CRITICAL
      default: SEVERITY_UNSPECIFIED
      title: enum that represents severity types
    coralogixapisnotification_centerConditionType:
      type: object
      properties:
        matchEntityType:
          $ref: '#/components/schemas/notification_centerMatchEntityTypeCondition'
        matchEntityTypeAndSubType:
          $ref: >-
            #/components/schemas/notification_centerMatchEntityTypeAndSubTypeCondition
    coralogixapisnotification_centerConnectorConfigField:
      type: object
      properties:
        fieldName:
          type: string
        template:
          type: string
    coralogixapisnotification_centerMessageConfigField:
      type: object
      properties:
        fieldName:
          type: string
        template:
          type: string
    coralogixapisnotification_centerOrderBy:
      type: object
      properties:
        fieldName:
          type: string
        direction:
          $ref: >-
            #/components/schemas/coralogixapisnotification_centerOrderByDirection
    coralogixapisnotification_centerOrderByDirection:
      type: string
      enum:
        - ORDER_BY_DIRECTION_UNSPECIFIED
        - ASC
        - DESC
      default: ORDER_BY_DIRECTION_UNSPECIFIED
    coralogixapisscopesv1Filter:
      type: object
      properties:
        entityType:
          $ref: '#/components/schemas/v1EntityType'
        expression:
          type: string
          example: expression
      description: This data structure represents a filter
      title: Filter
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
    coralogixapisscopesv1Scope:
      type: object
      properties:
        id:
          type: string
          example: scope_id
        displayName:
          type: string
          example: scope_name
        description:
          type: string
          example: scope_description
        teamId:
          type: integer
          format: int32
          example: 1234
        filters:
          type: array
          items:
            $ref: '#/components/schemas/coralogixapisscopesv1Filter'
        defaultExpression:
          type: string
          example: expression
      description: This data structure represents a scope
      title: Scope
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
    coralogixapisviewsv1Filter:
      type: object
      properties:
        name:
          type: string
          example: applicationName
          description: Filter name
          title: Filter name
          minLength: 1
        selectedValues:
          type: object
          example:
            demo: true
            cs-rest-test1: true
          additionalProperties:
            type: boolean
          description: Filter selected values
          title: Filter selected values
      description: View folder.
      title: ViewFolder
      required:
        - name
        - selectedValues
    coralogixarchivev1Target:
      type: object
      properties:
        archivingFormatId:
          type: string
        isActive:
          type: boolean
        region:
          type: string
        bucket:
          type: string
        enableTags:
          type: boolean
    coralogixarchivev2OrderBy:
      type: string
      enum:
        - ORDER_BY_UNSPECIFIED
        - ORDER_BY_UPDATED_AT
        - ORDER_BY_CREATED_AT
        - ORDER_BY_COMPANY_ID
      default: ORDER_BY_UNSPECIFIED
    coralogixarchivev2Target:
      type: object
      properties:
        s3:
          $ref: '#/components/schemas/v2S3TargetSpec'
        ibmCos:
          $ref: '#/components/schemas/v2IBMCosTargetSpec'
        archiveSpec:
          $ref: '#/components/schemas/v2ArchiveSpec'
      description: This data structure represents a target to archive logs.
      title: Target
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - target_specarchive_spec
    coralogixdatausagev2Severity:
      type: string
      enum:
        - SEVERITY_UNSPECIFIED
        - SEVERITY_DEBUG
        - SEVERITY_VERBOSE
        - SEVERITY_INFO
        - SEVERITY_WARNING
        - SEVERITY_ERROR
        - SEVERITY_CRITICAL
      default: SEVERITY_UNSPECIFIED
    coralogixglobal_mappingv1GetMeasurementsTableResponse:
      type: object
      properties:
        pageSize:
          type: integer
          format: int32
        pageIndex:
          type: integer
          format: int32
        rows:
          type: array
          items:
            $ref: '#/components/schemas/v1TableRow'
        totalRowCount:
          type: integer
          format: int32
        existingColumns:
          type: array
          items:
            type: string
    coralogixglobal_mappingv1GetQueriesResponse:
      type: object
      properties:
        queries:
          type: array
          items:
            $ref: '#/components/schemas/v1MeasurementQuery'
    coralogixintegrationsv1Permission:
      type: object
      properties:
        resource:
          $ref: '#/components/schemas/v1ResourceId'
        action:
          $ref: '#/components/schemas/v1ActionId'
    coralogixmeasurementsv1GetMeasurementsTableResponse:
      type: object
      properties:
        pageSize:
          type: integer
          format: int32
        pageIndex:
          type: integer
          format: int32
        rows:
          type: array
          items:
            $ref: '#/components/schemas/v1TableRow'
        totalRowCount:
          type: integer
          format: int32
        existingColumns:
          type: array
          items:
            type: string
    coralogixmeasurementsv1GetQueriesResponse:
      type: object
      properties:
        queries:
          type: array
          items:
            $ref: '#/components/schemas/v1MeasurementQuery'
    coralogixpermissionsv1Scope:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/v1ScopeId'
        filters:
          $ref: '#/components/schemas/v1ScopeFilters'
      description: >-
        / A group scope has a list of filters for subsystems and applications.
        Used to filter traffic based on user defined rules.
    dashboardsv1commonLuceneQuery:
      type: object
      properties:
        value:
          type: string
    dashboardsv1commonPromQlQuery:
      type: object
      properties:
        value:
          type: string
    datasetv2Dataset:
      type: object
      properties:
        dataspace:
          $ref: '#/components/schemas/v2Dataspace'
        dataset:
          type: string
    datasetv2Rule:
      type: object
      properties:
        id:
          type: string
        schemaRule:
          $ref: '#/components/schemas/v2SchemaRule'
    datausagev2Priority:
      type: string
      enum:
        - PRIORITY_UNSPECIFIED
        - PRIORITY_LOW
        - PRIORITY_MEDIUM
        - PRIORITY_HIGH
        - PRIORITY_BLOCKED
      default: PRIORITY_UNSPECIFIED
    events2metricsv2Aggregation:
      type: object
      properties:
        enabled:
          type: boolean
          title: Is enabled
        aggType:
          $ref: '#/components/schemas/AggregationAggType'
        targetMetricName:
          type: string
          example: alias_field_name_agg_func
          title: Target metric field alias name
        samples:
          $ref: '#/components/schemas/v2E2MAggSamples'
        histogram:
          $ref: '#/components/schemas/v2E2MAggHistogram'
      description: This data structure represents an aggregation
      title: Aggregation
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    events2metricsv2MetricField:
      type: object
      properties:
        targetBaseMetricName:
          type: string
          example: alias_field_name
          title: Target metric field alias name
          pattern: ^[\w/-]+$
        sourceField:
          type: string
          example: log_obj.numeric_field
          title: Source field
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/events2metricsv2Aggregation'
          title: Represents Aggregation type list
      description: This data structure represents a metric field
      title: Metric Field
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - targetBaseMetricName
        - sourceField
        - aggregations
    extensionsv1Extension:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        image:
          type: string
        darkModeImage:
          type: string
        revisions:
          type: array
          items:
            $ref: '#/components/schemas/v1ExtensionRevision'
        isHidden:
          type: boolean
        integrations:
          type: array
          items:
            type: string
        keywords:
          type: array
          items:
            type: string
        permissionDeniedRevisions:
          type: array
          items:
            $ref: '#/components/schemas/v1ExtensionRevision'
        changelog:
          type: array
          items:
            $ref: '#/components/schemas/v1ChangelogEntry'
        deprecation:
          $ref: '#/components/schemas/v1Deprecation'
    formatcsvv1Version:
      type: string
      enum:
        - VERSION_UNSPECIFIED
        - VERSION_V1
      default: VERSION_UNSPECIFIED
    formatgenericv1Version:
      type: string
      enum:
        - VERSION_UNSPECIFIED
        - VERSION_V1
      default: VERSION_UNSPECIFIED
    formatwide_parquetv1Version:
      type: string
      enum:
        - VERSION_UNSPECIFIED
        - VERSION_V1
        - VERSION_V3
      default: VERSION_UNSPECIFIED
    global_mappingv1AggregationType:
      type: string
      enum:
        - AGGREGATION_TYPE_UNSPECIFIED
        - AGGREGATION_TYPE_AVG
        - AGGREGATION_TYPE_MIN
        - AGGREGATION_TYPE_MAX
        - AGGREGATION_TYPE_SUM
        - AGGREGATION_TYPE_COUNT
      default: AGGREGATION_TYPE_UNSPECIFIED
    global_mappingv1DataSource:
      type: object
      properties:
        provider:
          type: string
        exporter:
          type: string
        labelsMetric:
          type: string
    global_mappingv1Log:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties:
            type: string
        text:
          type: string
    global_mappingv1Span:
      type: object
      properties:
        tags:
          type: object
          additionalProperties:
            type: string
        processTags:
          type: object
          additionalProperties:
            type: string
    integrationsv1IntegrationType:
      type: object
      properties:
        managed:
          $ref: '#/components/schemas/IntegrationTypeManaged'
        untracked:
          $ref: '#/components/schemas/IntegrationTypeUntracked'
        cloudformation:
          $ref: '#/components/schemas/IntegrationTypeCloudformation'
        arm:
          $ref: '#/components/schemas/IntegrationTypeAzureArm'
        pushBasedContextualData:
          $ref: '#/components/schemas/IntegrationTypePushBasedContextualData'
        contextualData:
          $ref: '#/components/schemas/IntegrationTypeContextualData'
        genericWebhook:
          $ref: '#/components/schemas/IntegrationTypeGenericWebhook'
      description: This data structure represents an integration type
      title: IntegrationType
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    kafka_out_targetsv1DeleteKafkaOutTargetResponse:
      type: object
    kafka_out_targetsv1GetKafkaOutTargetsResponse:
      type: object
      properties:
        targets:
          type: array
          items:
            $ref: '#/components/schemas/archivekafka_out_targetsv1Target'
    kafka_out_targetsv1SendKafkaOutTestMessageResponse:
      type: object
    kafka_out_targetsv1UpsertKafkaOutTargetResponse:
      type: object
      properties:
        target:
          $ref: '#/components/schemas/archivekafka_out_targetsv1Target'
    kafka_out_targetsv2AwsMsk:
      type: object
      properties:
        publicEndpoints:
          type: string
        topic:
          type: string
    kafka_out_targetsv2CompressionType:
      type: string
      enum:
        - COMPRESSION_TYPE_UNSPECIFIED
        - COMPRESSION_TYPE_GZIP
      default: COMPRESSION_TYPE_UNSPECIFIED
    kafka_out_targetsv2DeleteKafkaOutTargetResponse:
      type: object
    kafka_out_targetsv2GetKafkaOutTargetsResponse:
      type: object
      properties:
        targets:
          type: array
          items:
            $ref: '#/components/schemas/archivekafka_out_targetsv2Target'
    kafka_out_targetsv2IbmEventStreams:
      type: object
      properties:
        brokers:
          type: string
        topic:
          type: string
    kafka_out_targetsv2SendKafkaOutTestMessageResponse:
      type: object
    kafka_out_targetsv2UpsertKafkaOutTargetResponse:
      type: object
      properties:
        target:
          $ref: '#/components/schemas/archivekafka_out_targetsv2Target'
    kafka_out_targetsv3AwsMsk:
      type: object
      properties:
        publicEndpoints:
          type: string
        topic:
          type: string
    kafka_out_targetsv3CompressionType:
      type: string
      enum:
        - COMPRESSION_TYPE_UNSPECIFIED
        - COMPRESSION_TYPE_GZIP
      default: COMPRESSION_TYPE_UNSPECIFIED
    kafka_out_targetsv3DeleteKafkaOutTargetResponse:
      type: object
    kafka_out_targetsv3GetKafkaOutTargetsResponse:
      type: object
      properties:
        targets:
          type: array
          items:
            $ref: '#/components/schemas/kafka_out_targetsv3Target'
    kafka_out_targetsv3IbmEventStreams:
      type: object
      properties:
        brokers:
          type: string
        topic:
          type: string
    kafka_out_targetsv3SendKafkaOutTestMessageResponse:
      type: object
    kafka_out_targetsv3Target:
      type: object
      properties:
        awsMsk:
          $ref: '#/components/schemas/kafka_out_targetsv3AwsMsk'
        ibmEventStreams:
          $ref: '#/components/schemas/kafka_out_targetsv3IbmEventStreams'
        id:
          type: integer
          format: int64
        name:
          type: string
        isActive:
          type: boolean
        dpxlExpression:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        compressionType:
          $ref: '#/components/schemas/kafka_out_targetsv3CompressionType'
    kafka_out_targetsv3UpsertKafkaOutTargetResponse:
      type: object
      properties:
        target:
          $ref: '#/components/schemas/kafka_out_targetsv3Target'
    logs2metricsv2LogsQuery:
      type: object
      properties:
        lucene:
          type: string
          example: 'log_obj.numeric_field: [50 TO 100]'
          title: lucene query
        alias:
          type: string
          example: new_query
          title: alias
        applicationnameFilters:
          type: array
          example: app_name
          items:
            type: string
          title: application name filters
        subsystemnameFilters:
          type: array
          example: sub_name
          items:
            type: string
          title: subsystem names filters
        severityFilters:
          type: array
          items:
            $ref: '#/components/schemas/coralogixapislogs2metricsv2Severity'
          title: severity type filters
      description: This data structure represents a query for logs.
      title: SpansQuery
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    metrics_configuratorConfigureTenantRequest:
      type: object
      properties:
        retentionPolicy:
          $ref: '#/components/schemas/metrics_configuratorRetentionPolicyRequest'
        ibm:
          $ref: '#/components/schemas/metrics_configuratorIbmConfigV2'
        s3:
          $ref: '#/components/schemas/metrics_configuratorS3Config'
      description: This data structure is used to configure a tenant.
      title: Configure Tenant Request
      externalDocs:
        description: Find out more about metrics cost optimization
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
      required:
        - retentionPolicy
        - storage_config
    metrics_configuratorGetTenantConfigResponse:
      type: object
      properties:
        tenantConfig:
          $ref: '#/components/schemas/metrics_configuratorTenantConfig'
    metrics_configuratorGetTenantConfigResponseV2:
      type: object
      properties:
        tenantConfig:
          $ref: '#/components/schemas/metrics_configuratorTenantConfigV2'
    metrics_configuratorHotStoreConfig:
      type: object
      properties:
        tenantId:
          type: integer
          format: int64
        clusterName:
          type: string
    metrics_configuratorIbmConfig:
      type: object
      properties:
        bucket:
          type: string
        region:
          type: string
        endpoint:
          type: string
        crn:
          type: string
    metrics_configuratorIbmConfigV2:
      type: object
      properties:
        endpoint:
          type: string
          example: s3.us-south.cloud-object-storage.appdomain.cloud
          title: Endpoint to use to access the bucket
        crn:
          type: string
          example: >-
            crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::
          title: Cloud Object Storage bucket CRN
        serviceCrn:
          type: string
          example: >-
            crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::
          title: >-
            A CRN of a service instance which will be storing data in the
            bucket.

            Team ID is comming in AuthContext
      description: This data structure is used to configure an IBM bucket.
      title: IBM Bucket Configuration
      externalDocs:
        description: Find out more about metrics cost optimization
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
      required:
        - endpoint
        - crn
        - serviceCrn
    metrics_configuratorListHotStoreConfigsResponse:
      type: object
      properties:
        configs:
          type: array
          items:
            $ref: '#/components/schemas/metrics_configuratorHotStoreConfig'
    metrics_configuratorListTenantConfigsResponse:
      type: object
      properties:
        tenantConfigs:
          type: array
          items:
            $ref: '#/components/schemas/metrics_configuratorTenantConfig'
    metrics_configuratorRetentionPolicy:
      type: object
      properties:
        resolution:
          type: integer
          format: int32
          example: 12
        retentionDays:
          type: integer
          format: int32
          example: 30
      description: This data structure represents the retention policy for a tenant.
      title: Retenion Policy
      externalDocs:
        description: Find out more about metrics cost optimization
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
      required:
        - resolution
        - retentionDays
    metrics_configuratorRetentionPolicyRequest:
      type: object
      properties:
        rawResolution:
          type: integer
          format: int64
          example: 1
        fiveMinutesResolution:
          type: integer
          format: int64
          example: 2
        oneHourResolution:
          type: integer
          format: int64
          example: 3
      description: This data structure is used to set the retention policy for a tenant.
      title: Retenion Policy Request
      externalDocs:
        description: Find out more about metrics cost optimization
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
      required:
        - rawResolution
        - fiveMinutesResolution
        - oneHourResolution
    metrics_configuratorS3Config:
      type: object
      properties:
        bucket:
          type: string
        region:
          type: string
      description: This data structure represents the S3 configuration for a tenant.
      title: S3 Configuration
      externalDocs:
        description: Find out more about metrics cost optimization
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
      required:
        - bucket
        - region
    metrics_configuratorTenantConfig:
      type: object
      properties:
        tenantId:
          type: integer
          format: int64
        bucketName:
          type: string
        region:
          type: string
        retentionPolicy:
          type: array
          items:
            $ref: '#/components/schemas/metrics_configuratorRetentionPolicy'
        ibm:
          $ref: '#/components/schemas/metrics_configuratorIbmConfig'
        s3:
          $ref: '#/components/schemas/metrics_configuratorS3Config'
        prefix:
          type: string
        indexVersion:
          type: integer
          format: int64
        disabled:
          type: boolean
    metrics_configuratorTenantConfigV2:
      type: object
      properties:
        tenantId:
          type: integer
          format: int64
        retentionPolicy:
          $ref: '#/components/schemas/metrics_configuratorRetentionPolicyRequest'
        ibm:
          $ref: '#/components/schemas/metrics_configuratorIbmConfigV2'
        s3:
          $ref: '#/components/schemas/metrics_configuratorS3Config'
        prefix:
          type: string
        disabled:
          type: boolean
    metrics_configuratorUpdateRequest:
      type: object
      properties:
        retentionDays:
          type: integer
          format: int64
        ibm:
          $ref: '#/components/schemas/metrics_configuratorIbmConfigV2'
        s3:
          $ref: '#/components/schemas/metrics_configuratorS3Config'
      description: This data structure is used to update the configuration of a tenant.
      title: Update Tenant Request
      externalDocs:
        description: Find out more about metrics cost optimization
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
      required:
        - retentionDays
        - storage_config
    metrics_configuratorValidateBucketRequest:
      type: object
      properties:
        ibm:
          $ref: '#/components/schemas/metrics_configuratorIbmConfigV2'
        s3:
          $ref: '#/components/schemas/metrics_configuratorS3Config'
      description: This data structure is used to validate a bucket.
      title: Bucket Validation Request
      externalDocs:
        description: Find out more about metrics cost optimization
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
      required:
        - storage_config
    metrics_tcoAddRequest:
      type: object
      properties:
        label:
          type: string
          example: rule1
        regex:
          type: string
          example: .*
      description: This data structure is used to add a metrics tco rule.
      title: Add Request
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - label
        - regex
    metrics_tcoDeleteRequest:
      type: object
      properties:
        ruleId:
          type: string
          format: uint64
          example: 1
    metrics_tcoGetResponse:
      type: object
      properties:
        rules:
          type: array
          example: 1
          items:
            $ref: '#/components/schemas/metricsmetrics_tcoRule'
    metricsmetrics_tcoRule:
      type: object
      properties:
        id:
          type: string
          format: uint64
          example: 1
        label:
          type: string
          example: rule1
        regex:
          type: string
          example: .*
      description: This data structure represents a metrics tco rule.
      title: Rule
      externalDocs:
        description: Find out more about metrics cost optimization
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
      required:
        - id
        - label
        - regex
    notification_centerConfigOverrides:
      type: object
      properties:
        conditionType:
          $ref: '#/components/schemas/coralogixapisnotification_centerConditionType'
        outputSchemaId:
          type: string
        messageConfig:
          $ref: '#/components/schemas/notification_centerMessageConfig'
    notification_centerConnectorType:
      type: string
      enum:
        - CONNECTOR_TYPE_UNSPECIFIED
        - SLACK
        - GENERIC_HTTPS
        - PAGERDUTY
        - AWS
      default: CONNECTOR_TYPE_UNSPECIFIED
    notification_centerMatchEntityTypeAndSubTypeCondition:
      type: object
      properties:
        entityType:
          type: string
        entitySubType:
          type: string
    notification_centerMatchEntityTypeCondition:
      type: object
      properties:
        entityType:
          type: string
    notification_centerMessageConfig:
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: >-
              #/components/schemas/coralogixapisnotification_centerMessageConfigField
    notification_centerRenderedConnectorConfigField:
      type: object
      properties:
        fieldName:
          type: string
        value:
          type: string
    notification_centerRenderedMessageConfigField:
      type: object
      properties:
        fieldName:
          type: string
        value:
          type: string
    notification_centerroutingSourceOverrides:
      type: object
      properties:
        outputSchemaId:
          type: string
        messageConfigFields:
          type: array
          items:
            $ref: >-
              #/components/schemas/coralogixapisnotification_centerMessageConfigField
        connectorConfigFields:
          type: array
          items:
            $ref: >-
              #/components/schemas/coralogixapisnotification_centerConnectorConfigField
    organisationsv2TeamId:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
      description: This data structure represents the ID of a team in the system.
      title: Team Info
      externalDocs:
        description: Find out more about teams
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/teams/#support
      required:
        - id
    permissionsv1TeamId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    permissionsv1User:
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/permissionsv1UserId'
        userAccountId:
          $ref: '#/components/schemas/permissionsv1UserAccountId'
        username:
          type: string
          title: / Unique username
        firstName:
          type: string
          title: / User first name
        lastName:
          type: string
          title: / User last name
        status:
          $ref: '#/components/schemas/v1UserStatus'
      title: >-
        / An user is an entity that is always part of a team and has an account
        associated with it
    permissionsv1UserAccountId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    permissionsv1UserId:
      type: object
      properties:
        id:
          type: string
    protobufAny:
      type: object
      properties:
        '@type':
          type: string
          description: >-
            A URL/resource name that uniquely identifies the type of the
            serialized

            protocol buffer message. This string must contain at least

            one "/" character. The last segment of the URL's path must represent

            the fully qualified name of the type (as in

            `path/google.protobuf.Duration`). The name should be in a canonical
            form

            (e.g., leading "." is not accepted).


            In practice, teams usually precompile into the binary all types that
            they

            expect it to use in the context of Any. However, for URLs which use
            the

            scheme `http`, `https`, or no scheme, one can optionally set up a
            type

            server that maps type URLs to message definitions as follows:


            * If no scheme is provided, `https` is assumed.

            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official

            protobuf release, and it is not used for type URLs beginning with

            type.googleapis.com. As of May 2023, there are no widely used type
            server

            implementations and no plans to implement one.


            Schemes other than `http`, `https` (or the empty scheme) might be

            used with implementation specific semantics.
      additionalProperties: {}
      description: >-
        `Any` contains an arbitrary serialized protocol buffer message along
        with a

        URL that describes the type of the serialized message.


        Protobuf library provides support to pack/unpack Any values in the form

        of utility functions or additional generated methods of the Any type.


        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }
            // or ...
            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
              foo = any.unpack(Foo.getDefaultInstance());
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use

        'type.googleapis.com/full.type.name' as the type URL and the unpack

        methods only use the fully qualified type name after the last '/'

        in the type URL, for example "foo.bar.com/x/y.z" will yield type

        name "y.z".


        JSON

        ====

        The JSON representation of an `Any` value uses the regular

        representation of the deserialized, embedded message, with an

        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON

        representation, that representation will be embedded adding a field

        `value` which holds the custom JSON in addition to the `@type`

        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
    protobufNullValue:
      type: string
      enum:
        - NULL_VALUE
      default: NULL_VALUE
      description: >-
        `NullValue` is a singleton enumeration to represent the null value for
        the

        `Value` type union.


        The JSON representation for `NullValue` is JSON `null`.

         - NULL_VALUE: Null value.
    queriesk8sv1Filter:
      type: object
      properties:
        kind:
          $ref: '#/components/schemas/v1K8sFilter'
        values:
          type: object
          additionalProperties:
            type: boolean
          title: >-
            String represents the object's name, value represents if it is
            selected or not
    quotav1Priority:
      type: string
      enum:
        - PRIORITY_TYPE_UNSPECIFIED
        - PRIORITY_TYPE_BLOCK
        - PRIORITY_TYPE_LOW
        - PRIORITY_TYPE_MEDIUM
        - PRIORITY_TYPE_HIGH
      default: PRIORITY_TYPE_UNSPECIFIED
    quotav1Rule:
      type: object
      properties:
        ruleTypeId:
          $ref: '#/components/schemas/v1RuleTypeId'
        name:
          type: string
    quotav1Severity:
      type: string
      enum:
        - SEVERITY_UNSPECIFIED
        - SEVERITY_DEBUG
        - SEVERITY_VERBOSE
        - SEVERITY_INFO
        - SEVERITY_WARNING
        - SEVERITY_ERROR
        - SEVERITY_CRITICAL
      default: SEVERITY_UNSPECIFIED
    quotav1SourceType:
      type: string
      enum:
        - SOURCE_TYPE_UNSPECIFIED
        - SOURCE_TYPE_LOGS
        - SOURCE_TYPE_SPANS
      default: SOURCE_TYPE_UNSPECIFIED
    routingRoutingTarget:
      type: object
      properties:
        connectorId:
          type: string
        presetId:
          type: string
        configOverrides:
          $ref: '#/components/schemas/notification_centerroutingSourceOverrides'
        customDetails:
          type: object
          additionalProperties:
            type: string
    rpcStatus:
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: |-
            The status code, which should be an enum value of
            [google.rpc.Code][google.rpc.Code].
        message:
          type: string
          description: >-
            A developer-facing error message, which should be in English. Any

            user-facing error message should be localized and sent in the

            [google.rpc.Status.details][google.rpc.Status.details] field, or
            localized

            by the client.
        details:
          type: array
          items:
            $ref: '#/components/schemas/protobufAny'
          description: >-
            A list of messages that carry the error details.  There is a common
            set of

            message types for APIs to use.
      description: >-
        The `Status` type defines a logical error model that is suitable for

        different programming environments, including REST APIs and RPC APIs. It
        is

        used by [gRPC](https://github.com/grpc). Each `Status` message contains

        three pieces of data: error code, error message, and error details.


        You can find out more about this error model and how to work with it in
        the

        [API Design Guide](https://cloud.google.com/apis/design/errors).
    rule_managertasksRule:
      type: object
      properties:
        record:
          type: string
        expr:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
    servicesArchiveLogsEvent:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties:
            type: string
        labels:
          type: object
          additionalProperties:
            type: string
        userData:
          type: object
    servicesArchiveSpansEvent:
      type: object
      properties:
        spanId:
          type: string
        traceId:
          type: string
        parentSpanId:
          type: string
        metadata:
          $ref: '#/components/schemas/servicesArchiveSpansEventMetadata'
        startTime:
          type: string
          format: date-time
        duration:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/servicesArchiveSpansEventTag'
        processTags:
          type: array
          items:
            $ref: '#/components/schemas/servicesArchiveSpansEventTag'
        logs:
          type: array
          items:
            $ref: '#/components/schemas/servicesArchiveSpansEventLog'
    servicesArchiveSpansEventLog:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        fields:
          type: object
          additionalProperties:
            type: string
    servicesArchiveSpansEventMetadata:
      type: object
      properties:
        applicationName:
          type: string
        subsystemName:
          type: string
        serviceName:
          type: string
        operationName:
          type: string
    servicesArchiveSpansEventTag:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    servicesAssignDashboardFolderResponse:
      type: object
    servicesCreateDashboardFolderRequest:
      type: object
      properties:
        requestId:
          type: string
        folder:
          $ref: '#/components/schemas/commonDashboardFolder'
    servicesCreateDashboardFolderResponse:
      type: object
    servicesCreateDashboardRequest:
      type: object
      properties:
        requestId:
          type: string
        dashboard:
          $ref: '#/components/schemas/astDashboard'
    servicesCreateDashboardResponse:
      type: object
      properties:
        dashboardId:
          type: string
    servicesCreateViewFolderRequest:
      type: object
      properties:
        name:
          type: string
          example: My Folder
          description: Folder name
          title: View folder name
          minLength: 1
      description: Create view folder.
      title: CreateViewFolderRequest
    servicesCreateViewFolderResponse:
      type: object
      properties:
        folder:
          $ref: '#/components/schemas/v1ViewFolder'
      description: Request for creating view folder.
      title: CreateViewFolderRequest
    servicesCreateViewRequest:
      type: object
      properties:
        name:
          type: string
          example: Logs view
          description: View name
          minLength: 1
        searchQuery:
          $ref: '#/components/schemas/v1SearchQuery'
        timeSelection:
          $ref: '#/components/schemas/v1TimeSelection'
        filters:
          $ref: '#/components/schemas/v1SelectedFilters'
        folderId:
          type: string
          format: uuid
          example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
          description: Unique identifier for folders
          maxLength: 36
          minLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
      description: View folder.
      title: ViewFolder
      required:
        - name
        - timeSelection
    servicesCreateViewResponse:
      type: object
      properties:
        view:
          $ref: '#/components/schemas/servicesView'
    servicesDashboardCatalogItem:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        isDefault:
          type: boolean
        isPinned:
          type: boolean
        createTime:
          type: string
          format: date-time
        updateTime:
          type: string
          format: date-time
        folder:
          $ref: '#/components/schemas/commonDashboardFolder'
        authorId:
          type: string
    servicesDeleteDashboardFolderResponse:
      type: object
    servicesDeleteDashboardResponse:
      type: object
    servicesDeleteViewFolderResponse:
      type: object
    servicesDeleteViewResponse:
      type: object
    servicesGetDashboardCatalogResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/servicesDashboardCatalogItem'
    servicesGetDashboardFolderResponse:
      type: object
      properties:
        folder:
          $ref: '#/components/schemas/commonDashboardFolder'
    servicesGetDashboardResponse:
      type: object
      properties:
        dashboard:
          $ref: '#/components/schemas/astDashboard'
        updatedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updaterAuthorId:
          type: string
        updaterName:
          type: string
        authorId:
          type: string
        authorName:
          type: string
        updatedOriginType:
          $ref: '#/components/schemas/servicesTokenOriginType'
        createdOriginType:
          $ref: '#/components/schemas/servicesTokenOriginType'
    servicesGetTeamSettingsResponse:
      type: object
      properties:
        maxGroupByLogs:
          type: integer
          format: int32
        maxGroupByMetrics:
          type: integer
          format: int32
        maxGroupBySpans:
          type: integer
          format: int32
        maxGroupByArchive:
          type: integer
          format: int32
    servicesGetViewFolderResponse:
      type: object
      properties:
        folder:
          $ref: '#/components/schemas/v1ViewFolder'
    servicesGetViewResponse:
      type: object
      properties:
        view:
          $ref: '#/components/schemas/servicesView'
    servicesListDashboardFoldersResponse:
      type: object
      properties:
        folder:
          type: array
          items:
            $ref: '#/components/schemas/commonDashboardFolder'
    servicesListViewFoldersResponse:
      type: object
      properties:
        folders:
          type: array
          items:
            $ref: '#/components/schemas/v1ViewFolder'
          title: List of view folders
    servicesListViewsResponse:
      type: object
      properties:
        views:
          type: array
          items:
            $ref: '#/components/schemas/servicesView'
          title: List of views
    servicesLogsEvent:
      type: object
      properties:
        logId:
          type: string
        timestamp:
          type: string
          format: date-time
        text:
          type: string
        json:
          type: object
        logsMetadata:
          $ref: '#/components/schemas/servicesLogsMetadata'
    servicesLogsMetadata:
      type: object
      properties:
        applicationName:
          type: string
        subsystemName:
          type: string
        severity:
          $ref: '#/components/schemas/commonLogSeverityLevel'
    servicesMetricsEvent:
      type: object
      properties:
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/servicesMetricsEventAggregation'
        timeSeries:
          $ref: '#/components/schemas/commonTimeSeries'
    servicesMetricsEventAggregation:
      type: object
      properties:
        aggregationType:
          $ref: '#/components/schemas/servicesMetricsEventAggregationType'
        value:
          type: number
          format: double
    servicesMetricsEventAggregationType:
      type: string
      enum:
        - AGGREGATION_TYPE_UNSPECIFIED
        - AGGREGATION_TYPE_LAST
        - AGGREGATION_TYPE_MIN
        - AGGREGATION_TYPE_MAX
        - AGGREGATION_TYPE_AVG
        - AGGREGATION_TYPE_SUM
      default: AGGREGATION_TYPE_UNSPECIFIED
    servicesPinDashboardResponse:
      type: object
    servicesReplaceDashboardFolderRequest:
      type: object
      properties:
        requestId:
          type: string
        folder:
          $ref: '#/components/schemas/commonDashboardFolder'
    servicesReplaceDashboardFolderResponse:
      type: object
    servicesReplaceDashboardRequest:
      type: object
      properties:
        requestId:
          type: string
        dashboard:
          $ref: '#/components/schemas/astDashboard'
    servicesReplaceDashboardResponse:
      type: object
    servicesReplaceDefaultDashboardResponse:
      type: object
    servicesReplaceViewFolderResponse:
      type: object
      properties:
        folder:
          $ref: '#/components/schemas/v1ViewFolder'
    servicesReplaceViewResponse:
      type: object
      properties:
        view:
          $ref: '#/components/schemas/servicesView'
    servicesSearchArchiveGroupedLogsSeriesResponse:
      type: object
      properties:
        series:
          type: array
          items:
            $ref: '#/components/schemas/commonGroupedSeries'
        meta:
          type: object
          additionalProperties:
            type: string
    servicesSearchArchiveGroupedLogsTimeSeriesResponse:
      type: object
      properties:
        series:
          $ref: '#/components/schemas/commonGroupedSeries'
        meta:
          type: object
          additionalProperties:
            type: string
    servicesSearchArchiveGroupedSpansSeriesResponse:
      type: object
      properties:
        series:
          type: array
          items:
            $ref: '#/components/schemas/commonGroupedSeries'
        meta:
          type: object
          additionalProperties:
            type: string
    servicesSearchArchiveGroupedSpansTimeSeriesResponse:
      type: object
      properties:
        series:
          $ref: '#/components/schemas/commonGroupedSeries'
        meta:
          type: object
          additionalProperties:
            type: string
    servicesSearchArchiveLogsEventGroupsResponse:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/commonMultiGroup'
        meta:
          type: object
          additionalProperties:
            type: string
    servicesSearchArchiveLogsEventsCountResponse:
      type: object
      properties:
        count:
          type: string
          format: int64
    servicesSearchArchiveLogsEventsResponse:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/servicesArchiveLogsEvent'
        totalFetched:
          type: integer
          format: int32
          description: How many events were fetched before pagination applied.
        meta:
          type: object
          additionalProperties:
            type: string
    servicesSearchArchiveLogsGroupedValuesResponse:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/v1commonGroup'
        isLimitExceeded:
          type: boolean
        total:
          type: string
          format: int64
        meta:
          type: object
          additionalProperties:
            type: string
    servicesSearchArchiveLogsTimeSeriesResponse:
      type: object
      properties:
        timeSeries:
          type: array
          items:
            $ref: '#/components/schemas/commonTimeSeries'
        total:
          type: string
          format: int64
        meta:
          type: object
          additionalProperties:
            type: string
    servicesSearchArchiveSpansEventGroupsResponse:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/commonMultiGroup'
        meta:
          type: object
          additionalProperties:
            type: string
    servicesSearchArchiveSpansEventsCountResponse:
      type: object
      properties:
        count:
          type: string
          format: int64
    servicesSearchArchiveSpansEventsResponse:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/servicesArchiveSpansEvent'
        totalFetched:
          type: integer
          format: int32
          description: How many events were fetched before pagination applied.
        meta:
          type: object
          additionalProperties:
            type: string
    servicesSearchArchiveSpansGroupedValuesResponse:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/v1commonGroup'
        isLimitExceeded:
          type: boolean
        total:
          type: string
          format: int64
        meta:
          type: object
          additionalProperties:
            type: string
    servicesSearchArchiveSpansTimeSeriesResponse:
      type: object
      properties:
        timeSeries:
          type: array
          items:
            $ref: '#/components/schemas/commonTimeSeries'
        total:
          type: string
          format: int64
        meta:
          type: object
          additionalProperties:
            type: string
    servicesSearchDataprimeArchiveResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/commonDataprimeResult'
        meta:
          type: object
          additionalProperties:
            type: string
    servicesSearchDataprimeResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/commonDataprimeResult'
        meta:
          type: object
          additionalProperties:
            type: string
    servicesSearchGroupedLogsSeriesRequestLimit:
      type: object
      properties:
        groupByFields:
          type: array
          items:
            type: string
        limit:
          type: integer
          format: int32
        minPercentage:
          type: integer
          format: int32
    servicesSearchGroupedLogsSeriesResponse:
      type: object
      properties:
        series:
          type: array
          items:
            $ref: '#/components/schemas/commonGroupedSeries'
    servicesSearchGroupedSpansSeriesRequestLimit:
      type: object
      properties:
        groupByFields:
          type: array
          items:
            $ref: '#/components/schemas/commonSpanField'
        limit:
          type: integer
          format: int32
        minPercentage:
          type: integer
          format: int32
    servicesSearchGroupedSpansSeriesResponse:
      type: object
      properties:
        series:
          type: array
          items:
            $ref: '#/components/schemas/commonGroupedSeries'
    servicesSearchLogsAnnotationEventsResponse:
      type: object
      properties:
        annotationEvents:
          type: array
          items:
            $ref: '#/components/schemas/commonAnnotationEvent'
    servicesSearchLogsEventGroupsRequestOrderBy:
      type: object
      properties:
        grouping:
          type: string
        aggregation:
          $ref: '#/components/schemas/commonLogsAggregation'
        orderDirection:
          $ref: '#/components/schemas/v1commonOrderDirection'
    servicesSearchLogsEventGroupsResponse:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/commonMultiGroup'
    servicesSearchLogsEventsRequestPagination:
      type: object
      properties:
        offset:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
    servicesSearchLogsEventsResponse:
      type: object
      properties:
        total:
          type: string
          format: int64
        events:
          type: array
          items:
            $ref: '#/components/schemas/servicesLogsEvent'
    servicesSearchLogsGroupedTimeSeriesRequestGroupBy:
      type: object
      properties:
        fields:
          type: array
          items:
            type: string
        limit:
          type: integer
          format: int32
        minPercentage:
          type: integer
          format: int32
    servicesSearchLogsGroupedTimeSeriesResponse:
      type: object
      properties:
        series:
          type: array
          items:
            $ref: '#/components/schemas/commonGroupedSeries'
    servicesSearchLogsGroupedValuesResponse:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/v1commonGroup'
        isLimitExceeded:
          type: boolean
        total:
          type: string
          format: int64
    servicesSearchLogsTimeSeriesResponse:
      type: object
      properties:
        timeSeries:
          type: array
          items:
            $ref: '#/components/schemas/commonTimeSeries'
        total:
          type: string
          format: int64
    servicesSearchMetricsAnnotationEventsResponse:
      type: object
      properties:
        annotationEvents:
          type: array
          items:
            $ref: '#/components/schemas/commonAnnotationEvent'
    servicesSearchMetricsEventsRequestOrderBy:
      type: object
      properties:
        direction:
          $ref: '#/components/schemas/v1commonOrderDirection'
        label:
          type: string
        aggType:
          $ref: '#/components/schemas/servicesMetricsEventAggregationType'
    servicesSearchMetricsEventsRequestPagination:
      type: object
      properties:
        offset:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
    servicesSearchMetricsEventsResponse:
      type: object
      properties:
        labels:
          type: array
          items:
            type: string
        metricsEvents:
          type: array
          items:
            $ref: '#/components/schemas/servicesMetricsEvent'
        total:
          type: string
          format: int64
    servicesSearchMetricsGroupedSeriesRequestLimit:
      type: object
      properties:
        groupBy:
          type: array
          items:
            type: string
        limit:
          type: integer
          format: int32
        minPercentage:
          type: integer
          format: int32
    servicesSearchMetricsGroupedSeriesResponse:
      type: object
      properties:
        series:
          type: array
          items:
            $ref: '#/components/schemas/commonGroupedSeries'
    servicesSearchMetricsGroupedTimeSeriesRequestGroupBy:
      type: object
      properties:
        labels:
          type: array
          items:
            type: string
        limit:
          type: integer
          format: int32
        minPercentage:
          type: integer
          format: int32
    servicesSearchMetricsGroupedTimeSeriesResponse:
      type: object
      properties:
        series:
          type: array
          items:
            $ref: '#/components/schemas/commonGroupedSeries'
    servicesSearchMetricsGroupedValuesResponse:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/v1commonGroup'
        isLimitExceeded:
          type: boolean
        total:
          type: string
          format: int64
    servicesSearchMetricsTimeSeriesResponse:
      type: object
      properties:
        timeSeries:
          type: array
          items:
            $ref: '#/components/schemas/commonTimeSeries'
        total:
          type: string
          format: int64
    servicesSearchMetricsTimeValuesResponse:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/commonLabelledValue'
        isLimitExceeded:
          type: boolean
        total:
          type: string
          format: int64
    servicesSearchSpansAnnotationEventsResponse:
      type: object
      properties:
        annotationEvents:
          type: array
          items:
            $ref: '#/components/schemas/commonAnnotationEvent'
    servicesSearchSpansEventGroupsResponse:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/commonMultiGroup'
    servicesSearchSpansEventsRequestPagination:
      type: object
      properties:
        offset:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
    servicesSearchSpansEventsResponse:
      type: object
      properties:
        total:
          type: string
          format: int64
        spansEvents:
          type: array
          items:
            $ref: '#/components/schemas/servicesSpansEvent'
    servicesSearchSpansGroupedTimeSeriesRequestGroupBy:
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/commonSpanField'
        limit:
          type: integer
          format: int32
        minPercentage:
          type: integer
          format: int32
    servicesSearchSpansGroupedTimeSeriesResponse:
      type: object
      properties:
        series:
          type: array
          items:
            $ref: '#/components/schemas/commonGroupedSeries'
    servicesSearchSpansGroupedValuesResponse:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/v1commonGroup'
        isLimitExceeded:
          type: boolean
        total:
          type: string
          format: int64
    servicesSearchSpansTimeSeriesResponse:
      type: object
      properties:
        timeSeries:
          type: array
          items:
            $ref: '#/components/schemas/commonTimeSeries'
        total:
          type: string
          format: int64
    servicesSpansEvent:
      type: object
      properties:
        spanId:
          type: string
        traceId:
          type: string
        parentSpanId:
          type: string
        metadata:
          $ref: '#/components/schemas/servicesSpansEventMetadata'
        startTime:
          type: string
          format: date-time
        duration:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/servicesSpansEventTag'
        processTags:
          type: array
          items:
            $ref: '#/components/schemas/servicesSpansEventTag'
        logs:
          type: array
          items:
            $ref: '#/components/schemas/servicesSpansEventLog'
    servicesSpansEventLog:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        fields:
          type: object
          additionalProperties:
            type: string
    servicesSpansEventMetadata:
      type: object
      properties:
        applicationName:
          type: string
        subsystemName:
          type: string
        serviceName:
          type: string
        operationName:
          type: string
    servicesSpansEventTag:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    servicesTokenOriginType:
      type: string
      enum:
        - TOKEN_ORIGIN_TYPE_UNSPECIFIED
        - TOKEN_ORIGIN_TYPE_USER
        - TOKEN_ORIGIN_TYPE_API
      default: TOKEN_ORIGIN_TYPE_UNSPECIFIED
    servicesUnpinDashboardResponse:
      type: object
    servicesView:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 52
          description: id
          title: View id
        name:
          type: string
          example: Logs view
          description: View name
          title: View name
          minLength: 1
        searchQuery:
          $ref: '#/components/schemas/v1SearchQuery'
        timeSelection:
          $ref: '#/components/schemas/v1TimeSelection'
        filters:
          $ref: '#/components/schemas/v1SelectedFilters'
        isCompactMode:
          type: boolean
        folderId:
          type: string
          format: uuid
          example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
          description: Unique identifier for folders
          title: View folder id
          maxLength: 36
          minLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
      description: Response for views.
      title: View
      required:
        - name
        - id
        - timeSelection
    spans2metricsv2SpansQuery:
      type: object
      properties:
        lucene:
          type: string
          example: applicationName:myApp
          title: lucene query
        applicationnameFilters:
          type: array
          example: myApp
          items:
            type: string
          title: application name filters
        subsystemnameFilters:
          type: array
          example: mySubsystem
          items:
            type: string
          title: subsystem name filters
        actionFilters:
          type: array
          example: myAction
          items:
            type: string
          title: action filters
        serviceFilters:
          type: array
          example: myService
          items:
            type: string
          title: service filters
      description: This data structure represents a query for spans.
      title: SpansQuery
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    ssov2SetActiveRequest:
      type: object
      properties:
        teamId:
          type: integer
          format: int64
        isActive:
          type: boolean
      description: >-
        This data structure is used to activate or deactivate a SAML identity
        provider
      title: Set Active Request
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - teamId
        - isActive
    ssov2SetActiveResponse:
      type: object
    tasksGetTaskResponse:
      type: object
      properties:
        eval:
          $ref: '#/components/schemas/tasksRuleGroupEval'
    tasksRuleGroup:
      type: object
      properties:
        id:
          type: string
        tenantId:
          type: integer
          format: int64
        rules:
          type: array
          items:
            $ref: '#/components/schemas/rule_managertasksRule'
        limit:
          type: string
          format: uint64
    tasksRuleGroupEval:
      type: object
      properties:
        id:
          type: string
        ruleGroup:
          $ref: '#/components/schemas/tasksRuleGroup'
        evalAt:
          type: string
          format: uint64
    tasksTaskCompletedRequestFailure:
      type: object
      properties:
        message:
          type: string
        kind:
          $ref: '#/components/schemas/FailureKind'
    tasksTaskCompletedRequestSuccess:
      type: object
      properties:
        ruleEvalDurationsMs:
          type: object
          additionalProperties:
            type: string
            format: uint64
    tasksTaskCompletedResponse:
      type: object
    v1ARMStack:
      type: object
      properties:
        subscriptionId:
          type: string
        resourceGroupName:
          type: string
      description: This data structure represents an Azure Resource Manager stack.
      title: ARMStack
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1ActionId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    v1ActivateRetentionsRequest:
      type: object
    v1ActivateRetentionsResponse:
      type: object
      properties:
        activateRetentions:
          type: boolean
          example: true
      description: >-
        This data structure is obtained after setting the active status of
        retentions
      title: Activate Retentions Response
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - retentions
    v1AddEnrichmentsRequest:
      type: object
      properties:
        requestEnrichments:
          type: array
          items:
            $ref: '#/components/schemas/v1EnrichmentRequestModel'
      description: A request to add a collection of enrichments.
      title: Enrichment creation request
      externalDocs:
        description: Find out more about data enrichment in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/getting-started/
      required:
        - requestEnrichments
    v1AddEnrichmentsResponse:
      type: object
      properties:
        enrichments:
          type: array
          items:
            $ref: '#/components/schemas/v1Enrichment'
      description: Response data structure for enrichment creation.
      title: Encrichment creation response
      externalDocs:
        description: Find out more about data enrichment in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/getting-started/
      required:
        - enrichments
    v1AddInternalEnrichmentsRequest:
      type: object
      properties:
        requestEnrichments:
          type: array
          items:
            $ref: '#/components/schemas/v1EnrichmentRequestModel'
    v1AddInternalEnrichmentsResponse:
      type: object
      properties:
        enrichments:
          type: array
          items:
            $ref: '#/components/schemas/v1Enrichment'
    v1AddUsersToTeamGroupResponse:
      type: object
      properties:
        teamId:
          $ref: '#/components/schemas/permissionsv1TeamId'
      description: >-
        Response confirming the successful addition of users to the specified
        team group.
      title: AddUsersToTeamGroupResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1AddUsersToTeamGroupsRequest:
      type: object
      properties:
        teamId:
          $ref: '#/components/schemas/permissionsv1TeamId'
        addUsersToGroup:
          type: array
          items:
            $ref: >-
              #/components/schemas/v1AddUsersToTeamGroupsRequestAddUsersToTeamGroup
      description: >-
        Bulk request to assign users to multiple team groups simultaneously,
        efficiently managing group memberships at scale.
      title: AddUsersToTeamGroupsRequest
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1AddUsersToTeamGroupsRequestAddUsersToTeamGroup:
      type: object
      properties:
        groupId:
          $ref: '#/components/schemas/v1TeamGroupId'
        userIds:
          type: array
          items:
            $ref: '#/components/schemas/permissionsv1UserId'
          title: / Users to add to group
      description: >-
        This data structure represents the information associated with an API
        key.
      title: AddUsersToTeamGroup
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1AddUsersToTeamGroupsResponse:
      type: object
      description: >-
        Response confirming the successful bulk addition of users to multiple
        team groups.
      title: AddUsersToTeamGroupsResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1ApiKeyId:
      type: object
      properties:
        id:
          type: string
    v1ApiKeyValue:
      type: object
      properties:
        key:
          type: string
    v1ApmService:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        workloads:
          type: array
          items:
            type: string
        sloStatusCount:
          $ref: '#/components/schemas/v1SloStatusCount'
        technology:
          type: string
    v1ArchiveRetention:
      type: object
      properties:
        id:
          type: string
    v1AtomicBatchCreatePolicyRequest:
      type: object
      properties:
        policyRequests:
          type: array
          items:
            $ref: '#/components/schemas/v1CreatePolicyRequest'
      description: This data structure is used to create multiple policies atomically.
      title: Atomic Batch Create Policy Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - policyRequests
    v1AtomicBatchCreatePolicyResponse:
      type: object
      properties:
        createResponses:
          type: array
          items:
            $ref: '#/components/schemas/v1CreatePolicyResponse'
      description: >-
        This data structure is obtained when creating multiple policies
        atomically.
      title: Atomic Batch Create Policy Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - createResponses
    v1AtomicOverwriteEnrichmentsRequest:
      type: object
      properties:
        enrichmentType:
          $ref: '#/components/schemas/v1EnrichmentType'
        enrichmentFields:
          type: array
          items:
            $ref: '#/components/schemas/v1EnrichmentFieldDefinition'
      description: >-
        A request to delete all enrichments of a given type and replace them
        with new ones.
      title: Atomic overwrite of enrichments request
      externalDocs:
        description: Find out more about data enrichment in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/getting-started/
      required:
        - enrichmentType
        - enrichmentFields
    v1AtomicOverwriteEnrichmentsResponse:
      type: object
      properties:
        enrichments:
          type: array
          items:
            $ref: '#/components/schemas/v1Enrichment'
    v1AtomicOverwriteLogPoliciesRequest:
      type: object
      properties:
        policies:
          type: array
          items:
            $ref: '#/components/schemas/v1CreateLogPolicyRequest'
      description: >-
        In an atomic operation delete all existing log policies and create the
        provided list by order.
      title: Atomic Overwrite Log Policies Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - policies
    v1AtomicOverwriteLogPoliciesResponse:
      type: object
      properties:
        createResponses:
          type: array
          items:
            $ref: '#/components/schemas/v1CreatePolicyResponse'
      description: This data structue is obtained when overwriting log policies atomically.
      title: Atomic Overwrite Log Policies Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - createResponses
    v1AtomicOverwriteSpanPoliciesRequest:
      type: object
      properties:
        policies:
          type: array
          items:
            $ref: '#/components/schemas/v1CreateSpanPolicyRequest'
      description: >-
        In an atomic operation delete all existing span policies and create the
        provided list by order.
      title: Atomic Overwrite Span Policies Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - policies
    v1AtomicOverwriteSpanPoliciesResponse:
      type: object
      properties:
        createResponses:
          type: array
          items:
            $ref: '#/components/schemas/v1CreatePolicyResponse'
      description: >-
        This data structue is obtained when overwriting span policies
        atomically.
      title: Atomic Overwrite Span Policies Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - createResponses
    v1AwsEventBridgeConfig:
      type: object
      properties:
        eventBusArn:
          type: string
          example: arn:aws:events:us-east-1:123456789012:event-bus/default
        detail:
          type: string
          example:
            key: value
        detailType:
          type: string
          example: detail_type
        source:
          type: string
          example: source
        roleName:
          type: string
          example: role_name
      description: >-
        This data structure represents the configuration of an AWS EventBridge
        outgoing webhook
      title: AWS EventBridge Configuration
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - eventBusArn
        - detail
        - detailType
        - source
        - roleName
    v1AwsType:
      type: object
      properties:
        resourceType:
          type: string
          example: ec2
      description: >-
        This data structure represents the AWS enrichment type, which adds AWS
        resource tags to your logs.
      title: AWS enrichment type
      externalDocs:
        description: Find out more about AWS resource enrichment in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/aws-resource-enrichment/
    v1BatchGetApmServicesResponse:
      type: object
      properties:
        services:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v1ApmService'
        notFoundIds:
          type: array
          items:
            type: string
    v1BatchGetConnectorsResponse:
      type: object
      properties:
        connectors:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v1Connector'
        notFoundIds:
          type: array
          example:
            - connector-id-3
          items:
            type: string
      description: Response containing the requested connectors and any IDs not found
      title: Batch Get Connectors Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1BatchGetPresetsResponse:
      type: object
      properties:
        presets:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v1Preset'
        notFoundIds:
          type: array
          items:
            type: string
    v1BatchGetServiceSlosResponse:
      type: object
      properties:
        slos:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v1ServiceSlo'
        notFoundIds:
          type: array
          example:
            - slo_id1
            - slo_id2
          items:
            type: string
      description: This data structure represents a response to batch get Service SLOs.
      title: Batch Get Service SLOs Response
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - slos
    v1BulkTestLogPoliciesRequest:
      type: object
      properties:
        metaFieldsValuesList:
          type: array
          items:
            $ref: '#/components/schemas/v1LogMetaFieldsValues'
      description: Request to test multiple log policies.
      title: Bulk Test Log Policies Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - metaFieldsValuesList
    v1BulkTestLogPoliciesResponse:
      type: object
      properties:
        testPoliciesBulkResult:
          type: array
          items:
            $ref: '#/components/schemas/v1TestPoliciesResult'
      description: Response to test multiple log policies.
      title: Bulk Test Log Policies Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - testPoliciesBulkResult
    v1ChangelogEntry:
      type: object
      properties:
        version:
          type: string
        descriptionMd:
          type: string
    v1CheckApiKeyPermissionRequest:
      type: object
      properties:
        permission:
          $ref: '#/components/schemas/coralogixintegrationsv1Permission'
        apiKey:
          $ref: '#/components/schemas/v1ApiKeyValue'
        permissionId:
          $ref: '#/components/schemas/v1PermissionId'
    v1CheckApiKeyPermissionResponse:
      type: object
      properties:
        unauthorized:
          $ref: '#/components/schemas/CheckApiKeyPermissionResponseUnauthorized'
        authorizationResult:
          $ref: >-
            #/components/schemas/CheckApiKeyPermissionResponseKeyAuthorizationResult
    v1CleanupTestingRevisionRequest:
      type: object
      properties:
        id:
          type: string
    v1CleanupTestingRevisionResponse:
      type: object
    v1CloudFormationStack:
      type: object
      properties:
        arn:
          type: string
        region:
          type: string
      description: This data structure represents a Cloud Formation stack.
      title: CloudFormationStack
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1Cluster:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        region:
          type: string
        regions:
          type: array
          items:
            type: string
    v1ClusterFilters:
      type: object
      properties:
        selectedClusterName:
          type: string
        timeRange:
          $ref: '#/components/schemas/v2TimeRange'
    v1ClusterOptions:
      type: object
      properties:
        topk:
          type: integer
          format: int32
    v1ClusterWidgetWrapper:
      type: object
      properties:
        donut:
          $ref: '#/components/schemas/v1Donut'
        gauge:
          $ref: '#/components/schemas/widgetsv1Gauge'
        lineChart:
          $ref: '#/components/schemas/widgetsv1LineChart'
        mapChart:
          $ref: '#/components/schemas/v1MapChart'
        topk:
          $ref: '#/components/schemas/v1Topk'
        topkMultiValue:
          $ref: '#/components/schemas/v1TopkMultiValue'
    v1CompanyEnrichmentSettings:
      type: object
      properties:
        enrichmentAmountLimit:
          type: integer
          format: int64
        enrichmentsInUse:
          type: integer
          format: int64
        sizeLimitBytes:
          type: string
          format: uint64
        rowLimit:
          type: integer
          format: int64
        queryOnlySizeLimitBytes:
          type: string
          format: uint64
        queryOnlyRowLimit:
          type: integer
          format: int64
    v1CompareType:
      type: string
      enum:
        - COMPARE_TYPE_UNSPECIFIED
        - COMPARE_TYPE_IS
        - COMPARE_TYPE_START_WITH
        - COMPARE_TYPE_ENDS_WITH
        - COMPARE_TYPE_INCLUDES
      default: COMPARE_TYPE_UNSPECIFIED
    v1ConnectionStatus:
      type: string
      enum:
        - PENDING
        - ACTIVE
        - FAILING
        - STATUS_UNKNOWN
      default: PENDING
    v1Connector:
      type: object
      properties:
        id:
          type: string
          example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
        userFacingId:
          type: string
          example: user-connector-id
          title: for declarative API
        type:
          $ref: '#/components/schemas/notification_centerConnectorType'
        teamId:
          type: integer
          format: int64
          example: '12345'
        name:
          type: string
          example: My Slack Connector
        description:
          type: string
          example: Connector for team notifications
        createTime:
          type: string
          format: date-time
        updateTime:
          type: string
          format: date-time
        connectorConfigs:
          type: array
          items:
            $ref: '#/components/schemas/v1ConnectorConfig'
        configOverrides:
          type: array
          items:
            $ref: '#/components/schemas/v1EntityTypeConfigOverrides'
      description: A connector configuration for sending notifications
      title: Connector
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1ConnectorConfig:
      type: object
      properties:
        outputSchemaId:
          type: string
          example: schema-id
        fields:
          type: array
          items:
            $ref: >-
              #/components/schemas/coralogixapisnotification_centerConnectorConfigField
      description: Configuration for a specific output schema of a connector
      title: Connector Config
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1ConnectorSummary:
      type: object
      properties:
        id:
          type: string
        userFacingId:
          type: string
          title: for declarative API
        type:
          $ref: '#/components/schemas/notification_centerConnectorType'
        teamId:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        createTime:
          type: string
          format: date-time
        updateTime:
          type: string
          format: date-time
    v1ConnectorTypeSummary:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/notification_centerConnectorType'
        count:
          type: integer
          format: int64
          example: '5'
      description: Summary information about a connector type
      title: Connector Type Summary
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1Coordinate:
      type: object
      properties:
        lat:
          type: string
        long:
          type: string
    v1CountPushBasedContextualDataIntegrationsRequest:
      type: object
      properties:
        platform:
          $ref: '#/components/schemas/v1PushBasedPlatform'
      description: >-
        Request to return the number of Push Based Contextual Data Integration
        by a given platform
      title: Count Push Based ContextualData Integration Request
    v1CountPushBasedContextualDataIntegrationsResponse:
      type: object
      properties:
        counts:
          type: array
          items:
            $ref: >-
              #/components/schemas/CountPushBasedContextualDataIntegrationsResponseIntegrationCount
      description: >-
        Response of the number of Push Based Contextual Data Integration by a
        given platform
      title: Count Push Based ContextualData Integration Response
      required:
        - counts
    v1CountWebhookIntegrationsRequest:
      type: object
      description: Request to count the webhooks
      title: Count Webhook Integration Request
    v1CountWebhookIntegrationsResponse:
      type: object
      properties:
        count:
          type: integer
          format: int64
          example: 15
      description: Count of webhook integrations
      title: Count Webhook Integration Response
      required:
        - count
    v1CreateConnectorResponse:
      type: object
      properties:
        connector:
          $ref: '#/components/schemas/v1Connector'
      description: Response containing the created connector
      title: Create Connector Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1CreateCustomEnrichmentRequest:
      type: object
      properties:
        name:
          type: string
          example: custom_enrichment_name
        file:
          $ref: '#/components/schemas/v1File'
        description:
          type: string
          example: custom_enrichment_description
      description: >-
        This request data structure is used to create a Custom Enrichment
        instance.
      title: Create Custom Enrichment request
      externalDocs:
        description: Find out more about Custom Enrichment in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - name
        - file
    v1CreateCustomEnrichmentResponse:
      type: object
      properties:
        message:
          type: string
          example: Custom enrichment was successfully created
        customEnrichment:
          $ref: '#/components/schemas/v1CustomEnrichment'
      description: >-
        This response data structure is obtained when a Custom Enrichment
        instance is created.
      title: Create Custom Enrichment response
      externalDocs:
        description: Find out more about Custom Enrichment in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    v1CreateCustomPresetResponse:
      type: object
      properties:
        preset:
          $ref: '#/components/schemas/v1Preset'
      description: Response containing the created custom preset
      title: Create Custom Preset Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1CreateDirectNotificationResponse:
      type: object
      properties:
        token:
          type: string
    v1CreateGenericPolicyRequest:
      type: object
      properties:
        name:
          type: string
          example: My Policy
        description:
          type: string
          example: My Policy Description
        priority:
          $ref: '#/components/schemas/quotav1Priority'
        applicationRule:
          $ref: '#/components/schemas/quotav1Rule'
        subsystemRule:
          $ref: '#/components/schemas/quotav1Rule'
        archiveRetention:
          $ref: '#/components/schemas/v1ArchiveRetention'
      description: This data structue is used to create a new policy.
      title: Create Generic Policy Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - name
        - description
        - priority
    v1CreateLogPolicyRequest:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/v1CreateGenericPolicyRequest'
        logRules:
          $ref: '#/components/schemas/v1LogRules'
      description: This data structue is used to create a new log policy.
      title: Create Log Policy Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - policy
        - logRules
    v1CreateNotificationResponse:
      type: object
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/CreateNotificationResponseCreatedNotification'
    v1CreateOutgoingWebhookRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/v1OutgoingWebhookInputData'
      description: This data structure represents a request to create an outgoing webhook.
      title: Create Outgoing Webhook Request
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - data
    v1CreateOutgoingWebhookResponse:
      type: object
      properties:
        id:
          type: string
          example: example_id
      description: This data structure represents a response to create an outgoing webhook.
      title: Create Outgoing Webhook Response
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - id
    v1CreatePolicyRequest:
      type: object
      properties:
        name:
          type: string
          example: My Policy
        description:
          type: string
          example: My Policy Description
        priority:
          $ref: '#/components/schemas/quotav1Priority'
        applicationRule:
          $ref: '#/components/schemas/quotav1Rule'
        subsystemRule:
          $ref: '#/components/schemas/quotav1Rule'
        archiveRetention:
          $ref: '#/components/schemas/v1ArchiveRetention'
        logRules:
          $ref: '#/components/schemas/v1LogRules'
        spanRules:
          $ref: '#/components/schemas/v1SpanRules'
      description: This data structue is used to create a new policy.
      title: Create Policy Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - name
        - priority
    v1CreatePolicyResponse:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/v1Policy'
      description: This data structue is obtained when creating a policy.
      title: Create Policy Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - policy
    v1CreatePushBasedIntegrationRequest:
      type: object
      properties:
        bitbucket:
          $ref: '#/components/schemas/CreatePushBasedIntegrationRequestBitbucket'
        amazonSns:
          $ref: '#/components/schemas/CreatePushBasedIntegrationRequestAmazonSns'
        pagerDuty:
          $ref: '#/components/schemas/CreatePushBasedIntegrationRequestPagerDuty'
        github:
          $ref: '#/components/schemas/CreatePushBasedIntegrationRequestGithub'
        gitlab:
          $ref: '#/components/schemas/CreatePushBasedIntegrationRequestGitlab'
        opsgenie:
          $ref: '#/components/schemas/CreatePushBasedIntegrationRequestOpsgenie'
        prometheus:
          $ref: '#/components/schemas/CreatePushBasedIntegrationRequestPrometheus'
        intercom:
          $ref: '#/components/schemas/CreatePushBasedIntegrationRequestIntercom'
        slack:
          $ref: '#/components/schemas/CreatePushBasedIntegrationRequestSlack'
        name:
          type: string
          example: I love chocolate
        application:
          type: string
          example: authorization
        subsystem:
          type: string
          example: token_validator
      description: Creates a new push based integration for different type of sources
      title: Create Push Based Integration Request
      required:
        - name
        - application
        - subsystem
        - platform_data
    v1CreatePushBasedIntegrationResponse:
      type: object
      properties:
        id:
          type: string
          example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
      description: Returns the id of the created integration
      title: Create Push Based Integration Response
      required:
        - id
    v1CreateRuleGroupSet:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/v1InRuleGroup'
        name:
          type: string
      description: A set of rule groups to create.
      title: Create Rule Group Set
      externalDocs:
        description: Find out more about recording rules
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/metric-rules/recording-rules/
    v1CreateRuleGroupSetResult:
      type: object
      properties:
        id:
          type: string
      description: Result of creating a rule group set.
      title: Create Rule Group Set Result
      externalDocs:
        description: Find out more about recording rules
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/metric-rules/recording-rules/
    v1CreateScopeRequest:
      type: object
      properties:
        displayName:
          type: string
          example: scope_name
        description:
          type: string
          example: scope_description
        filters:
          type: array
          items:
            $ref: '#/components/schemas/coralogixapisscopesv1Filter'
        defaultExpression:
          type: string
          example: expression
      description: This data structure represents a request to create a scope
      title: Create Scope Request
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
      required:
        - displayName
        - filters
    v1CreateScopeResponse:
      type: object
      properties:
        scope:
          $ref: '#/components/schemas/coralogixapisscopesv1Scope'
      description: This data structure represents a response to create a scope
      title: Create Scope Response
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
      required:
        - scope
    v1CreateServiceSloRequest:
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/v1ServiceSlo'
      description: This data structure represents a request to create a Service SLO.
      title: Create Service SLO Request
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - slo
    v1CreateServiceSloResponse:
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/v1ServiceSlo'
      description: This data structure represents a response to create a Service SLO.
      title: Create Service SLO Response
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - slo
    v1CreateSpanPolicyRequest:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/v1CreateGenericPolicyRequest'
        spanRules:
          $ref: '#/components/schemas/v1SpanRules'
      description: This data structue is used to create a new span policy.
      title: Create Span Policy Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - policy
        - spanRules
    v1CreateTeamGroupRequest:
      type: object
      properties:
        name:
          type: string
          title: / Team group name
        teamId:
          $ref: '#/components/schemas/permissionsv1TeamId'
        description:
          type: string
          title: / Team group description
        externalId:
          type: string
          description: / Team group external_id. Applies if team is externally defined.
        roleIds:
          type: array
          items:
            $ref: '#/components/schemas/v1RoleId'
          title: / Roles to associate with team group
        userIds:
          type: array
          items:
            $ref: '#/components/schemas/permissionsv1UserId'
          title: / Users to associate with team group
        scopeFilters:
          $ref: '#/components/schemas/v1ScopeFilters'
        nextGenScopeId:
          type: string
      description: >-
        Request to create a new team group with specified name, description,
        roles, users, and optional scope filters. Can be associated with a
        specific team or the authenticated team.
      title: CreateTeamGroupRequest
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1CreateTeamGroupResponse:
      type: object
      properties:
        groupId:
          $ref: '#/components/schemas/v1TeamGroupId'
      description: >-
        Response containing the unique identifier of the newly created team
        group.
      title: CreateTeamGroupResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1CreateWebhookIntegrationRequest:
      type: object
      properties:
        name:
          type: string
          example: Chocolate is love
        apiKeyValue:
          type: string
          example: apn_b486d10b58184b25ae02c30dcba87775
        application:
          type: string
          example: authorization
        subsystem:
          type: string
          example: token_validator
        isPrivate:
          type: boolean
          example: true
        json:
          $ref: '#/components/schemas/v1JsonContentType'
        text:
          $ref: '#/components/schemas/v1TextContentType'
      description: Request to create a new webhook
      title: Create Webhook Request
      required:
        - name
        - apiKeyValue
        - application
        - subsystem
        - isPrivate
        - content_type
    v1CreateWebhookIntegrationResponse:
      type: object
      properties:
        id:
          type: string
          example: b486d10b58184b25ae02c30dcba87775
        webhookUrl:
          type: string
          example: http://chocolate.is.love
      description: Response of the created webhook integration
      title: Create Webhook Integration Response
      required:
        - id
        - webhookUrl
    v1Csv:
      type: object
      properties:
        version:
          $ref: '#/components/schemas/formatcsvv1Version'
    v1CustomEnrichment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        version:
          type: integer
          format: int64
        isQueryOnly:
          type: boolean
      title: Custom Enrichment data structure
    v1CustomEnrichmentData:
      type: object
      properties:
        definition:
          $ref: '#/components/schemas/v1CustomEnrichment'
        textual:
          type: string
        binary:
          type: string
          format: byte
      description: >-
        A string-to-string or string-to-JSON CSV file that defines your custom
        data source.
      title: Custom Enrichment table
      externalDocs:
        description: Find out more about Custom Enrichment in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/#prepare-a-csv-file
    v1CustomEnrichmentType:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
      description: >-
        This data structure represents the Custom Enrichment type, which adds
        additional context to your logs from your own enrichment tables.
      title: Custom Enrichment type
      externalDocs:
        description: Find out more about Custom Enrichment in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    v1CustomTimeSelection:
      type: object
      properties:
        fromTime:
          type: string
          format: date-time
          example: '2024-01-25T11:31:43.152Z'
          title: Custom time selection start timestamp
          minLength: 1
        toTime:
          type: string
          format: date-time
          example: '2024-01-25T11:35:43.152Z'
          title: Custom time selection end timestamp
          minLength: 1
      title: Custom time selection
      required:
        - fromTime
        - toTime
    v1DataSourceType:
      type: string
      enum:
        - DATA_SOURCE_TYPE_UNSPECIFIED
        - DATA_SOURCE_TYPE_LOGS
        - DATA_SOURCE_TYPE_SPAN
        - DATA_SOURCE_TYPE_METRICS
        - DATA_SOURCE_TYPE_EVENTS
      default: DATA_SOURCE_TYPE_UNSPECIFIED
    v1DataSourceTypeValues:
      type: object
      properties:
        dataSourceType:
          $ref: '#/components/schemas/v1DataSourceType'
        destinationExtractionKeys:
          type: array
          items:
            type: string
    v1DeleteApmServiceResponse:
      type: object
    v1DeleteConnectorResponse:
      type: object
      description: Response from deleting a connector
      title: Delete Connector Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1DeleteContextualDataIntegrationResponse:
      type: object
    v1DeleteCustomEnrichmentResponse:
      type: object
      properties:
        message:
          type: string
          example: Custom enrichment deleted successfully
        customEnrichmentId:
          type: integer
          format: int64
          example: 1
    v1DeleteCustomPresetResponse:
      type: object
    v1DeleteIntegrationResponse:
      type: object
    v1DeleteOutgoingWebhookResponse:
      type: object
    v1DeletePolicyResponse:
      type: object
      properties:
        id:
          type: string
          example: id
      description: This data structue is obtained when deleting a policy by its ID.
      title: Delete Policy Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - id
    v1DeletePushBasedContextualDataIntegrationRequest:
      type: object
      properties:
        id:
          type: string
          example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
      description: Request to delete a push based contextual data integration
      title: Delete Push Based ContextualData Integration Request
      required:
        - id
    v1DeletePushBasedContextualDataIntegrationResponse:
      type: object
      description: >-
        Empty response in case the Push Based ContextualData was successfully
        deleted
      title: Delete Push Based ContextualData Integration Response
    v1DeleteScopeResponse:
      type: object
    v1DeleteServiceSloResponse:
      type: object
    v1DeleteTeamGroupResponse:
      type: object
      description: >-
        Response confirming the successful deletion of a team group and its
        associated configurations.
      title: DeleteTeamGroupResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1DeleteWebhookIntegrationRequest:
      type: object
      properties:
        id:
          type: string
          example: b486d10b58184b25ae02c30dcba87775
      description: Request to delete a webhook
      title: Delete Webhook Integration Request
      required:
        - id
    v1DeleteWebhookIntegrationResponse:
      type: object
      description: Empty response in case of successful deletion
      title: Delete Webhook Integration Response
    v1DemistoConfig:
      type: object
      properties:
        uuid:
          type: string
          example: d838cd7b-087b-40c6-bc33-80997020f5d0
        payload:
          type: string
          example:
            key: value
      description: >-
        This data structure represents the configuration of a Demisto outgoing
        webhook
      title: Demisto Configuration
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - uuid
        - payload
    v1DeployExtensionRequest:
      type: object
      properties:
        id:
          type: string
        version:
          type: string
        itemIds:
          type: array
          items:
            type: string
        applications:
          type: array
          items:
            type: string
        subsystems:
          type: array
          items:
            type: string
        extensionDeployment:
          $ref: '#/components/schemas/v1ExtensionDeployment'
    v1DeployExtensionResponse:
      type: object
      properties:
        extensionDeployment:
          $ref: '#/components/schemas/v1ExtensionDeployment'
    v1DeployIntegrationExtensionsResponse:
      type: object
      description: Empty response indicating successful deployment of the extension
      title: Deploy Integration Extensions Response
    v1DeployedIntegrationInformation:
      type: object
      properties:
        id:
          type: string
        definitionKey:
          type: string
        definitionVersion:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/v1Parameter'
        integrationStatus:
          $ref: '#/components/schemas/v1IntegrationStatus'
      description: This data structure represents a list of outgoing webhook types.
      title: DeployedIntegrationInformation
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1Deprecation:
      type: object
      properties:
        reason:
          type: string
        replacementExtensions:
          type: array
          items:
            type: string
    v1Donut:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/v1WidgetGroup'
        displayName:
          type: string
        results:
          type: array
          items:
            $ref: '#/components/schemas/v1FloatResult'
        total:
          $ref: '#/components/schemas/v1FloatResult'
      title: |-
        This message is for a Donut chart widget
        It has the following properties:
        display_name - The User Facing Name
        query - The promql/metricsql query ran
        results - A map of floating point resutls
        total - The total of the result group
    v1EmailGroupConfig:
      type: object
      properties:
        emailAddresses:
          type: array
          example:
            - example@coralogix.com
          items:
            type: string
      description: >-
        This data structure represents the configuration of an EmailGroup
        outgoing webhook
      title: Email Group Configuration
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - emailAddresses
    v1Enrichment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        fieldName:
          type: string
          example: 1
        enrichmentType:
          $ref: '#/components/schemas/v1EnrichmentType'
        enrichedFieldName:
          type: string
          example: 1
      description: This data structure represents a field enrichment.
      title: Enrichment
      externalDocs:
        description: Find out more about data enrichment in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - id
        - fieldName
        - enrichmentType
    v1EnrichmentFieldDefinition:
      type: object
      properties:
        fieldName:
          type: string
          title: the field name of the key targeted for enrichment
        enrichedFieldName:
          type: string
          title: the field of the enriched key after enrichment
    v1EnrichmentRequestModel:
      type: object
      properties:
        fieldName:
          type: string
          example: sourceIPs
        enrichmentType:
          $ref: '#/components/schemas/v1EnrichmentType'
        enrichedFieldName:
          type: string
      description: The enrichment request model.
      title: Enrichment request prototype
      externalDocs:
        description: Find out more about data enrichment in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/getting-started/
      required:
        - enrichmentType
    v1EnrichmentType:
      type: object
      properties:
        geoIp:
          $ref: '#/components/schemas/v1GeoIpType'
        suspiciousIp:
          $ref: '#/components/schemas/v1SuspiciousIpType'
        aws:
          $ref: '#/components/schemas/v1AwsType'
        customEnrichment:
          $ref: '#/components/schemas/v1CustomEnrichmentType'
      description: This data structure represents the supported types of field enrichments.
      title: Enrichment type
    v1EntityType:
      type: string
      enum:
        - ENTITY_TYPE_UNSPECIFIED
        - ENTITY_TYPE_LOGS
        - ENTITY_TYPE_SPANS
      default: ENTITY_TYPE_UNSPECIFIED
    v1EntityTypeConfigOverrides:
      type: object
      properties:
        entityType:
          type: string
          example: alerts
        connectorConfigs:
          type: array
          items:
            $ref: '#/components/schemas/v1ConnectorConfig'
    v1ErrorSli:
      type: object
    v1Event:
      type: object
      properties:
        objectKind:
          type: string
        objectName:
          type: string
        namespace:
          type: string
        clusterName:
          type: string
        message:
          type: string
        severity:
          type: string
        reason:
          type: string
        creationTime:
          type: string
    v1ExtensionBinary:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/v1ExtensionBinaryBinaryType'
        data:
          type: string
    v1ExtensionBinaryBinaryType:
      type: string
      enum:
        - KIBANA_INDEX_PATTERN
      default: KIBANA_INDEX_PATTERN
    v1ExtensionData:
      type: object
      properties:
        id:
          type: string
          example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
        name:
          type: string
          example: I love chocolate
        description:
          type: string
          example: Chocolate is full of love
        excerpt:
          type: string
          example: Chocolate is full of love
        image:
          type: string
        darkModeImage:
          type: string
        labels:
          type: array
          example:
            - cocoa
            - sugar
          items:
            type: string
        version:
          type: string
          example: v1.0.13
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1ExtensionItemData'
        integrationDetails:
          type: array
          items:
            $ref: '#/components/schemas/v1IntegrationDetail'
        isHidden:
          type: boolean
          example: false
        binaries:
          type: array
          items:
            $ref: '#/components/schemas/v1ExtensionBinary'
        integrations:
          type: array
          items:
            type: string
        keywords:
          type: array
          items:
            type: string
        changelog:
          type: array
          items:
            $ref: '#/components/schemas/v1ChangelogEntry'
        deprecation:
          $ref: '#/components/schemas/v1Deprecation'
      description: Response to list all extensions
      title: ExtensionData
    v1ExtensionDeployment:
      type: object
      properties:
        id:
          type: string
        version:
          type: string
        itemIds:
          type: array
          items:
            type: string
        applications:
          type: array
          items:
            type: string
        subsystems:
          type: array
          items:
            type: string
    v1ExtensionItem:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        targetDomain:
          $ref: '#/components/schemas/v1TargetDomain'
        data:
          type: object
        binaries:
          type: array
          items:
            $ref: '#/components/schemas/v1ExtensionItemBinary'
        isMandatory:
          type: boolean
        permissionResource:
          $ref: '#/components/schemas/ExtensionItemPermissionResource'
        extendedInternalId:
          type: string
        uniqueId:
          type: string
    v1ExtensionItemBinary:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/v1ExtensionItemBinaryBinaryType'
        data:
          type: string
        fileName:
          type: string
    v1ExtensionItemBinaryBinaryType:
      type: string
      enum:
        - PREVIEW_IMAGE
        - KIBANA_DASHBOARD_DEFINITION
        - GRAFANA_DASHBOARD_DEFINITION
        - ENRICHMENT_CSV
        - CX_CUSTOM_DASHBOARD_DEFINITION
      default: PREVIEW_IMAGE
    v1ExtensionItemData:
      type: object
      properties:
        name:
          type: string
          example: Low cocoa content
        description:
          type: string
          example: Less than 60% cocoa
        targetDomain:
          $ref: '#/components/schemas/v1TargetDomain'
        data:
          type: object
        binaries:
          type: array
          items:
            $ref: '#/components/schemas/v1ExtensionItemBinary'
        isMandatory:
          type: boolean
          example: true
        internalId:
          type: integer
          format: int32
        uniqueId:
          type: string
        permissionResource:
          $ref: '#/components/schemas/ExtensionItemPermissionResource'
    v1ExtensionRevision:
      type: object
      properties:
        version:
          type: string
        description:
          type: string
        excerpt:
          type: string
        labels:
          type: array
          items:
            type: string
        integrationDetails:
          type: array
          items:
            $ref: '#/components/schemas/v1IntegrationDetail'
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1ExtensionItem'
        binaries:
          type: array
          items:
            $ref: '#/components/schemas/v1ExtensionBinary'
        permissionDeniedItems:
          type: array
          items:
            $ref: '#/components/schemas/v1ExtensionItem'
        isTesting:
          type: boolean
    v1ExternalUrl:
      type: object
      properties:
        url:
          type: string
      description: This data structure represents an external URL.
      title: ExternalUrl
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1ExtractResponse:
      type: object
      properties:
        extractedLabels:
          type: array
          items:
            $ref: '#/components/schemas/v1ExtractedLabel'
    v1ExtractedLabel:
      type: object
      properties:
        label:
          type: string
        values:
          type: array
          items:
            type: string
        destinationExtractionKey:
          type: string
        description:
          type: string
        displayName:
          type: string
        destinationExtractionKeys:
          type: array
          items:
            type: string
        destinationTypeExtractionKeys:
          type: array
          items:
            $ref: '#/components/schemas/v1DataSourceTypeValues'
        dataSource:
          $ref: '#/components/schemas/global_mappingv1DataSource'
        isCustomLabel:
          type: boolean
    v1FetchRuleGroupResult:
      type: object
      properties:
        ruleGroup:
          $ref: '#/components/schemas/v1OutRuleGroup'
      description: Result of a rule group fetch operation.
      title: Fetch Rule Group Result
      externalDocs:
        description: Find out more about recording rules
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/metric-rules/recording-rules/
    v1File:
      type: object
      properties:
        name:
          type: string
          example: file_name
        extension:
          type: string
          example: csv
        textual:
          type: string
          example: row1,row2 value1,value2
        binary:
          type: string
          format: byte
          example: '0xFABB32'
      description: This data structure represents a file.
      title: File
      externalDocs:
        description: Find out more about Custom Enrichment in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    v1FilterType:
      type: string
      enum:
        - FILTER_TYPE_UNSPECIFIED
        - FILTER_TYPE_STARTS_WITH
        - FILTER_TYPE_ENDS_WITH
        - FILTER_TYPE_CONTAINS
        - FILTER_TYPE_EXACT
      default: FILTER_TYPE_UNSPECIFIED
      description: |-
        - FILTER_TYPE_STARTS_WITH: / Matches if string starts with filter
         - FILTER_TYPE_ENDS_WITH: / Matches if string ends with filter
         - FILTER_TYPE_CONTAINS: / Matches if string contains filter
         - FILTER_TYPE_EXACT: / Matches if string exactly matches filter
      title: / A filter type describes how to match a filter against an input string
    v1FloatResult:
      type: object
      properties:
        value:
          type: number
          format: float
        name:
          type: string
          title: This is the key name
        displayName:
          type: string
        unit:
          type: string
          title: The unit of measurement
        query:
          type: string
        metric:
          type: object
          additionalProperties:
            type: string
      title: A wrapper for a floating point result
    v1GenerateNewTokenResponse:
      type: object
      properties:
        token:
          type: string
        id:
          type: string
    v1GenericEventAvro:
      type: object
      properties:
        version:
          $ref: '#/components/schemas/formatgenericv1Version'
    v1GenericIntegrationParameters:
      type: object
      properties:
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/v1Parameter'
      description: This data structure represents a list of outgoing webhook types.
      title: GenericIntegrationParameters
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1GenericWebhookConfig:
      type: object
      properties:
        uuid:
          type: string
          example: d838cd7b-087b-40c6-bc33-80997020f5d0
        method:
          $ref: '#/components/schemas/GenericWebhookConfigMethodType'
        headers:
          type: object
          example:
            Content-Type: application/json
          additionalProperties:
            type: string
        payload:
          type: string
          example:
            key: value
      description: >-
        This data structure represents the configuration of a generic outgoing
        webhook
      title: Generic Webhook Configuration
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - uuid
        - method
        - headers
        - payload
    v1GeoIpType:
      type: object
      properties:
        withAsn:
          type: boolean
      description: >-
        This data structure represents the Geo enrichment type, which adds
        location and ASH information to your logs.
      title: Geo location and ASN enrichment type
      externalDocs:
        description: Find out more about Geo enrichment in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/geo-enrichment/
    v1GetAllExtensionsRequest:
      type: object
      properties:
        includeHiddenExtensions:
          type: boolean
        filter:
          $ref: '#/components/schemas/v1GetAllExtensionsRequestFilter'
      description: Request to list all extensions
      title: GetAllExtensionsRequest
    v1GetAllExtensionsRequestFilter:
      type: object
      properties:
        integrations:
          type: array
          items:
            type: string
      description: Filter by integration ids
      title: GetAllExtensionsRequest - Filter
      required:
        - integrations
    v1GetAllExtensionsResponse:
      type: object
      properties:
        extensions:
          type: array
          items:
            $ref: '#/components/schemas/v1GetAllExtensionsResponseExtension'
      description: Response to list all extensions
      title: GetAllExtensionsResponse
      required:
        - extensions
    v1GetAllExtensionsResponseExtension:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        image:
          type: string
        darkModeImage:
          type: string
        revisions:
          type: array
          items:
            $ref: '#/components/schemas/GetAllExtensionsResponseRevision'
        isHidden:
          type: boolean
        integrations:
          type: array
          items:
            type: string
        keywords:
          type: array
          items:
            type: string
        deprecation:
          $ref: '#/components/schemas/v1Deprecation'
    v1GetApmServiceResponse:
      type: object
      properties:
        service:
          $ref: '#/components/schemas/v1ApmService'
    v1GetCompanyDataSourcesInternalResponse:
      type: object
      properties:
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/global_mappingv1DataSource'
    v1GetCompanyDataSourcesResponse:
      type: object
      properties:
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/global_mappingv1DataSource'
    v1GetCompanyEnrichmentSettingsResponse:
      type: object
      properties:
        enrichmentSettings:
          $ref: '#/components/schemas/v1CompanyEnrichmentSettings'
    v1GetCompanyPoliciesResponse:
      type: object
      properties:
        policies:
          type: array
          items:
            $ref: '#/components/schemas/v1Policy'
      description: >-
        This data structue is obtained when retrieving all policies of a
        company.
      title: Get Company Policies Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - policies
    v1GetCompanyProvidersResponse:
      type: object
      properties:
        companyProviders:
          type: array
          items:
            type: string
    v1GetConnectorResponse:
      type: object
      properties:
        connector:
          $ref: '#/components/schemas/v1Connector'
      description: Response containing the requested connector
      title: Get Connector Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1GetConnectorTypeSummariesResponse:
      type: object
      properties:
        connectorTypeSummaries:
          type: array
          items:
            $ref: '#/components/schemas/v1ConnectorTypeSummary'
      description: Response containing summaries of connector types
      title: Get Connector Type Summaries Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1GetContextualDataIntegrationDefinitionResponse:
      type: object
      properties:
        integrationDefinition:
          $ref: '#/components/schemas/v1IntegrationDefinition'
    v1GetContextualDataIntegrationDetailsResponse:
      type: object
      properties:
        integrationDetail:
          $ref: '#/components/schemas/v1IntegrationDetails'
    v1GetContextualDataIntegrationsResponse:
      type: object
      properties:
        integrations:
          type: array
          items:
            $ref: >-
              #/components/schemas/v1GetContextualDataIntegrationsResponseIntegrationWithCounts
    v1GetContextualDataIntegrationsResponseIntegrationWithCounts:
      type: object
      properties:
        integration:
          $ref: '#/components/schemas/v1Integration'
        amountIntegrations:
          type: integer
          format: int64
        errors:
          type: array
          items:
            type: string
        upgradeAvailable:
          type: boolean
        isNew:
          type: boolean
    v1GetCustomEnrichmentResponse:
      type: object
      properties:
        customEnrichment:
          $ref: '#/components/schemas/v1CustomEnrichment'
      description: >-
        This response data structure is obtained when a Custom Enrichment
        instance is retrieved.
      title: Get Custom Enrichment response
      externalDocs:
        description: Find out more about Custom Enrichment in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    v1GetCustomEnrichmentsResponse:
      type: object
      properties:
        customEnrichments:
          type: array
          items:
            $ref: '#/components/schemas/v1CustomEnrichment'
      description: >-
        This response data structure is obtained when all Custom Enrichment
        instances are retrieved.
      title: Get Custom Enrichments response
      externalDocs:
        description: Find out more about Custom Enrichment in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    v1GetCustomLabelMappingsResponse:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/v1LabelMapping'
    v1GetDefaultPresetSummaryResponse:
      type: object
      properties:
        presetSummary:
          $ref: '#/components/schemas/v1PresetSummary'
    v1GetDeployedExtensionsResponse:
      type: object
      properties:
        deployedExtensions:
          type: array
          items:
            $ref: >-
              #/components/schemas/GetDeployedExtensionsResponseDeployedExtension
      description: List of deployed extensions
      title: GetDeployedExtensionsResponse
      required:
        - deployedExtensions
    v1GetDeployedIntegrationResponse:
      type: object
      properties:
        integration:
          $ref: '#/components/schemas/v1DeployedIntegrationInformation'
      description: >-
        This data structure is the response obtained when retrieving a deployed
        integration.
      title: GetDeployedIntegrationResponse
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1GetEnrichmentLimitResponse:
      type: object
      properties:
        limit:
          type: integer
          format: int64
          example: 10
        used:
          type: integer
          format: int64
          example: 5
      description: This response data structure represents the enrichments limit.
      title: Enrichment limit
      externalDocs:
        description: Find out more about data enrichment in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/getting-started/
    v1GetEnrichmentsResponse:
      type: object
      properties:
        enrichments:
          type: array
          items:
            $ref: '#/components/schemas/v1Enrichment'
      description: This response data structure represents a collection of enrichments.
      title: Enrichment collection
      externalDocs:
        description: Find out more about data enrichment in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/getting-started/
    v1GetExtensionResponse:
      type: object
      properties:
        extension:
          $ref: '#/components/schemas/extensionsv1Extension'
    v1GetGroupUsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/permissionsv1User'
        noMorePages:
          $ref: '#/components/schemas/GetGroupUsersResponseNoMorePages'
        token:
          $ref: '#/components/schemas/GetGroupUsersResponseNextPageToken'
      description: >-
        Response containing the list of all users currently assigned to the
        requested team group.
      title: GetGroupUsersResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1GetHierarchyResponse:
      type: object
      properties:
        exporters:
          type: array
          items:
            type: string
    v1GetIntegrationDefinitionResponse:
      type: object
      properties:
        integrationDefinition:
          $ref: '#/components/schemas/v1IntegrationDefinition'
      description: This data structure represents a list of outgoing webhook types.
      title: GetIntegrationDefinitionResponse
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
      required:
        - integrationDefinition
    v1GetIntegrationDetailsResponse:
      type: object
      properties:
        integrationDetail:
          $ref: '#/components/schemas/v1IntegrationDetails'
      description: >-
        This data structure is a response obtained when retrieving the details
        of an integration.
      title: GetIntegrationDetailsResponse
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
      required:
        - integrationDetail
    v1GetIntegrationsResponse:
      type: object
      properties:
        integrations:
          type: array
          items:
            $ref: >-
              #/components/schemas/v1GetIntegrationsResponseIntegrationWithCounts
      description: This data structure represents a list of outgoing webhook types.
      title: GetIntegrationsResponse
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1GetIntegrationsResponseIntegrationWithCounts:
      type: object
      properties:
        integration:
          $ref: '#/components/schemas/v1Integration'
        amountIntegrations:
          type: integer
          format: int64
        errors:
          type: array
          items:
            type: string
        upgradeAvailable:
          type: boolean
        isNew:
          type: boolean
      description: This data structure represents an integration with counts.
      title: IntegrationWithCounts
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
      required:
        - integrations
    v1GetInternalEnrichmentsResponse:
      type: object
      properties:
        enrichments:
          type: array
          items:
            $ref: '#/components/schemas/v1Enrichment'
    v1GetLabelKeysResponse:
      type: object
      properties:
        labelKeys:
          type: array
          items:
            type: string
        dataSource:
          $ref: '#/components/schemas/global_mappingv1DataSource'
    v1GetLabelMappingsInternalResponse:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/v1LabelMapping'
    v1GetLabelMappingsResponse:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/v1LabelMapping'
    v1GetLabelValuesInternalResponse:
      type: object
      properties:
        labelValues:
          type: array
          items:
            $ref: '#/components/schemas/v1LabelValues'
        dataSource:
          $ref: '#/components/schemas/global_mappingv1DataSource'
    v1GetLabelValuesResponse:
      type: object
      properties:
        labelValues:
          type: array
          items:
            $ref: '#/components/schemas/v1LabelValues'
        dataSource:
          $ref: '#/components/schemas/global_mappingv1DataSource'
    v1GetLabelsResponse:
      type: object
      properties:
        labels:
          type: array
          items:
            type: string
    v1GetManagedIntegrationStatusResponse:
      type: object
      properties:
        integrationId:
          type: string
        status:
          $ref: '#/components/schemas/v1IntegrationStatus'
      description: >-
        This data structure represents a response obtained when retrieving the
        status of a managed integration.
      title: GetManagedIntegrationStatusResponse
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
      required:
        - integrationId
        - status
    v1GetMeasurementsInternalResponse:
      type: object
      properties:
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/v1Measurement'
    v1GetMeasurementsResponse:
      type: object
      properties:
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/v1Measurement'
    v1GetNotificationStatusResponse:
      type: object
      properties:
        statusUpdateTimestamp:
          type: string
          format: date-time
        success:
          $ref: '#/components/schemas/v1GetNotificationStatusResponseSuccess'
        error:
          $ref: '#/components/schemas/v1GetNotificationStatusResponseError'
        pending:
          $ref: '#/components/schemas/GetNotificationStatusResponsePending'
        discarded:
          $ref: '#/components/schemas/GetNotificationStatusResponseDiscarded'
    v1GetNotificationStatusResponseError:
      type: object
      properties:
        message:
          type: string
    v1GetNotificationStatusResponseSuccess:
      type: object
    v1GetOutgoingWebhookResponse:
      type: object
      properties:
        webhook:
          $ref: '#/components/schemas/v1OutgoingWebhook'
      description: This data structure represents an outgoing webhook.
      title: Get Outgoing Webhook Response
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - webhook
    v1GetOutgoingWebhookTypeDetailsResponse:
      type: object
      properties:
        details:
          $ref: '#/components/schemas/v1OutgoingWebhookDetails'
      description: This data structure represents an outgoing webhook type.
      title: Get Outgoing Webhook Type Details Response
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - details
    v1GetPolicyResponse:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/v1Policy'
      description: This data structue is obtained when retrieving a policy by its ID.
      title: Get Policy Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - id
    v1GetPresetResponse:
      type: object
      properties:
        preset:
          $ref: '#/components/schemas/v1Preset'
    v1GetQuotasResponse:
      type: object
      properties:
        companyId:
          type: string
        alert:
          $ref: '#/components/schemas/GetQuotasResponseUsage'
        enrichment:
          $ref: '#/components/schemas/GetQuotasResponseUsage'
        parsingRule:
          $ref: '#/components/schemas/GetQuotasResponseUsage'
        parsingRuleGroup:
          $ref: '#/components/schemas/GetQuotasResponseUsage'
        parsingTheme:
          $ref: '#/components/schemas/GetQuotasResponseUsage'
        dynamicAlert:
          $ref: '#/components/schemas/GetQuotasResponseUsage'
        events2Metrics:
          $ref: '#/components/schemas/GetQuotasResponseEvents2MetricsUsage'
    v1GetRetentionsEnabledResponse:
      type: object
      properties:
        enableTags:
          type: boolean
      description: >-
        This data structure is obtained when retrieving the active status of
        retentions
      title: Get Retentions Enabled Response
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - retentions
    v1GetRetentionsResponse:
      type: object
      properties:
        retentions:
          type: array
          items:
            $ref: '#/components/schemas/v1Retention'
    v1GetRumApplicationVersionDataResponse:
      type: object
      properties:
        versionData:
          $ref: '#/components/schemas/v1RumVersionData'
      description: >-
        This data structure represents a response obtained when retrieving RUM
        application version data.
      title: GetRumApplicationVersionDataResponse
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1GetScopesResponse:
      type: object
      properties:
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/coralogixapisscopesv1Scope'
      description: This data structure represents a response to get scopes
      title: Get Scopes Response
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
      required:
        - scopes
    v1GetServiceSloResponse:
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/v1ServiceSlo'
      description: This data structure represents a response to get a Service SLO.
      title: Get Service SLO Response
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - slo
    v1GetSupportedAwsResourceTypesResponse:
      type: object
      properties:
        resourceTypes:
          type: array
          items:
            $ref: '#/components/schemas/v1SupportedAwsResourceType'
    v1GetSystemDefaultPresetSummaryResponse:
      type: object
      properties:
        presetSummary:
          $ref: '#/components/schemas/v1PresetSummary'
    v1GetTeamGroupByNameResponse:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/v1TeamGroup'
      description: >-
        Response containing the complete details of a team group that matches
        the requested name, including its members, roles, and scope settings.
      title: GetTeamGroupByNameResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1GetTeamGroupResponse:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/v1TeamGroup'
      description: >-
        Response containing the complete details of a requested team group,
        including its members, assigned roles, and scope configuration.
      title: GetTeamGroupResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1GetTeamGroupScopeResponse:
      type: object
      properties:
        scope:
          $ref: '#/components/schemas/coralogixpermissionsv1Scope'
      description: >-
        Response message containing the optional scope configuration (filters
        for subsystems and applications) for a team group
      title: GetTeamGroupScopeResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1GetTeamGroupsResponse:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/v1TeamGroup'
          title: / Groups associated with team
      description: >-
        Response containing a list of all team groups and their complete
        details, including members, roles, and scope configurations.
      title: GetTeamGroupsResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1GetTemplateRequestEmpty:
      type: object
    v1GetTemplateResponse:
      type: object
      properties:
        templateUrl:
          type: string
      description: >-
        This data structure represents a response obtained when retrieving a
        template.
      title: GetTemplateResponse
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1GroupOrigin:
      type: string
      enum:
        - GROUP_ORIGIN_UNSPECIFIED
        - GROUP_ORIGIN_BUILT_IN
        - GROUP_ORIGIN_USER_DEFINED
      default: GROUP_ORIGIN_UNSPECIFIED
      description: |-
        / Group origin defines in which circumstances the group was created.

         - GROUP_ORIGIN_BUILT_IN: / A built in group is defined by the system and users are not able to alter them.
         - GROUP_ORIGIN_USER_DEFINED: / User defined or custom role.
    v1IbmEventNotificationsConfig:
      type: object
      properties:
        eventNotificationsInstanceId:
          type: string
        regionId:
          type: string
        sourceId:
          type: string
        sourceName:
          type: string
        endpointType:
          $ref: '#/components/schemas/IbmEventNotificationsConfigEndpointType'
    v1ImportAndReleaseExtensionsResponse:
      type: object
    v1InRule:
      type: object
      properties:
        record:
          type: string
          description: >-
            The name of the time series to output to. Must be a valid metric
            name.
        expr:
          type: string
          description: >-
            *

            The PromQL expression to evaluate. Every evaluation cycle this is

            evaluated at the current time, and the result recorded as a new set
            of

            time series with the metric name as given by 'record'.
        labels:
          type: object
          additionalProperties:
            type: string
          description: Labels to add or overwrite before storing the result.
      description: A rule within a group that defines a recording rule expression.
      title: In Rule
      externalDocs:
        description: Find out more about recording rules
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/metric-rules/recording-rules/
    v1InRuleGroup:
      type: object
      properties:
        name:
          type: string
          description: Name of the group.
        interval:
          type: integer
          format: int64
          description: |-
            How often rules in the group are evaluated.

            optional, default = 60 secs
        limit:
          type: string
          format: uint64
          description: |-
            Limits the number of series a rule can produce.

            optional, 0 is no limit, default = 0
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v1InRule'
          description: Rules of the group.
        version:
          type: integer
          format: int64
        id:
          type: string
      description: A group of recording rules.
      title: In Rule Group
      externalDocs:
        description: Find out more about recording rules
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/metric-rules/recording-rules/
    v1InitializeTestingRevisionRequest:
      type: object
      properties:
        extensionData:
          $ref: '#/components/schemas/v1ExtensionData'
    v1InitializeTestingRevisionResponse:
      type: object
    v1Integration:
      type: object
      properties:
        id:
          type: string
          title: short_name in the integrations.integration_definitions
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        darkIcon:
          type: string
        tags:
          type: array
          items:
            type: string
        versions:
          type: array
          items:
            type: string
        integrationType:
          $ref: '#/components/schemas/integrationsv1IntegrationType'
        featureFlag:
          type: string
      description: This data structure represents an integration
      title: Integration
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1IntegrationDefinition:
      type: object
      properties:
        key:
          type: string
          title: short_name in the integrations.integration_definitions
        integrationType:
          $ref: '#/components/schemas/integrationsv1IntegrationType'
        revisions:
          type: array
          items:
            $ref: '#/components/schemas/v1IntegrationRevision'
        featureFlag:
          type: string
      description: This data structure represents an integration definition.
      title: IntegrationDefinition
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1IntegrationDetail:
      type: object
      properties:
        name:
          type: string
        link:
          type: string
    v1IntegrationDetails:
      type: object
      properties:
        integration:
          $ref: '#/components/schemas/v1Integration'
        extensions:
          type: array
          items:
            $ref: '#/components/schemas/extensionsv1Extension'
        docs:
          type: array
          items:
            $ref: '#/components/schemas/v1IntegrationDoc'
        default:
          $ref: '#/components/schemas/IntegrationDetailsDefaultIntegrationDetails'
        local:
          $ref: '#/components/schemas/v1LocalChangelog'
        external:
          $ref: '#/components/schemas/v1ExternalUrl'
      description: This data structure represents a set of integration details.
      title: IntegrationDetails
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1IntegrationDoc:
      type: object
      properties:
        name:
          type: string
        link:
          type: string
      description: This data structure represents an integration documentation.
      title: IntegrationDoc
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1IntegrationMetadata:
      type: object
      properties:
        integrationKey:
          type: string
        version:
          type: string
        integrationParameters:
          $ref: '#/components/schemas/v1GenericIntegrationParameters'
      description: This data structure represents the metadata of an integration.
      title: IntegrationMetadata
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1IntegrationRevision:
      type: object
      properties:
        id:
          type: string
          title: version from the integrations.integration_definitions_revision
        fields:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationRevisionFieldInformation'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/v1IntegrationRevisionGroup'
        cloudFormation:
          $ref: '#/components/schemas/IntegrationRevisionCloudFormationTemplate'
        managedService:
          $ref: '#/components/schemas/IntegrationRevisionManagedService'
        helmChart:
          $ref: '#/components/schemas/IntegrationRevisionHelmChart'
        azureArmTemplate:
          $ref: '#/components/schemas/IntegrationRevisionAzureArmTemplate'
        rum:
          $ref: '#/components/schemas/IntegrationRevisionRum'
        terraform:
          $ref: '#/components/schemas/IntegrationRevisionTerraform'
        upgradeInstructionsMd:
          type: string
        revisionDeploymentSupported:
          type: boolean
        featureFlag:
          type: string
      description: This data structure represents an integration revision.
      title: IntegrationRevision
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1IntegrationRevisionGroup:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      description: This data structure represents a list of outgoing webhook types.
      title: Group
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1IntegrationStatus:
      type: object
      properties:
        connectionStatus:
          $ref: '#/components/schemas/v1ConnectionStatus'
        details:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            type: string
      description: This data structure represents an integration status.
      title: IntegrationStatus
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1InternalDeployExtensionRequest:
      type: object
      properties:
        companyId:
          type: string
        id:
          type: string
    v1InternalDeployExtensionResponse:
      type: object
    v1InternalMetricSchema:
      type: object
      properties:
        service:
          type: string
        operation:
          type: string
        error:
          type: string
        method:
          type: string
        spanKind:
          type: string
        peerService:
          type: string
        transaction:
          type: string
        transactionRoot:
          type: string
        httpStatusCode:
          type: string
        grpcStatusCode:
          type: string
        dbOperation:
          type: string
        serviceVersion:
          type: string
    v1InternalTargetServiceIsArchiveConfiguredResponse:
      type: object
      properties:
        companyArchiveConfigs:
          type: array
          items:
            $ref: '#/components/schemas/archivev1CompanyArchiveConfig'
    v1IsArchiveConfiguredResponse:
      type: object
      properties:
        isConfigured:
          type: boolean
        companyArchiveConfigs:
          type: array
          items:
            $ref: '#/components/schemas/archivev1CompanyArchiveConfig'
    v1ItemCounts:
      type: object
      properties:
        actions:
          type: integer
          format: int64
        alerts:
          type: integer
          format: int64
        customDashboards:
          type: integer
          format: int64
        enrichments:
          type: integer
          format: int64
        eventsToMetrics:
          type: integer
          format: int64
        grafanaDashboards:
          type: integer
          format: int64
        kibanaDashboards:
          type: integer
          format: int64
        metricsRuleGroup:
          type: integer
          format: int64
        parsingRules:
          type: integer
          format: int64
        savedViews:
          type: integer
          format: int64
    v1JiraConfig:
      type: object
      properties:
        apiToken:
          type: string
          example: jira_api_token
        email:
          type: string
          example: jira_email
        projectKey:
          type: string
          example: jira_project_key
      description: >-
        This data structure represents the configuration of a Jira outgoing
        webhook
      title: Jira Configuration
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - apiToken
        - email
        - projectKey
    v1JsonContentType:
      type: object
      properties:
        generate:
          $ref: '#/components/schemas/v1TimestampSourceGenerate'
        jsonPath:
          $ref: '#/components/schemas/v1TimestampSourceJsonPath'
      description: Indicates where to find the timestamp in the json request
      title: Json Content Type
      required:
        - timestamp_source
    v1K8sFilter:
      type: string
      enum:
        - K8S_FILTER_UNSPECIFIED
        - K8S_FILTER_NAMESPACE
        - K8S_FILTER_NODE
        - K8S_FILTER_APP
        - K8S_FILTER_POD
        - K8S_FILTER_CLUSTER
      default: K8S_FILTER_UNSPECIFIED
    v1K8sObject:
      type: string
      enum:
        - K8S_OBJECT_UNSPECIFIED
        - K8S_OBJECT_POD
        - K8S_OBJECT_NODE
        - K8S_OBJECT_APP
      default: K8S_OBJECT_UNSPECIFIED
    v1LabelMapping:
      type: object
      properties:
        label:
          type: string
        dataSourceType:
          $ref: '#/components/schemas/v1DataSourceType'
        extractionTemplate:
          type: string
        id:
          type: string
        description:
          type: string
        displayName:
          type: string
        extractionTemplates:
          type: array
          items:
            type: string
        isCustomLabel:
          type: boolean
        dataSource:
          $ref: '#/components/schemas/global_mappingv1DataSource'
    v1LabelValues:
      type: object
      properties:
        labelName:
          type: string
        values:
          type: array
          items:
            type: string
    v1LatencySli:
      type: object
      properties:
        thresholdMicroseconds:
          type: string
          example: '1000000'
        thresholdSymbol:
          $ref: '#/components/schemas/v1ThresholdSymbol'
      description: >-
        This data structure represents a Latency Service Level Indicator (SLO)
        in Coralogix APM.
      title: Latency SLO
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - thresholdMicroseconds
        - thresholdSymbol
    v1ListAllOutgoingWebhooksResponse:
      type: object
      properties:
        deployed:
          type: array
          items:
            $ref: '#/components/schemas/v1OutgoingWebhookExtendedSummary'
      description: This data structure represents a list of all outgoing webhooks.
      title: List All Outgoing Webhooks Response
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - deployed
    v1ListApmServicesResponse:
      type: object
      properties:
        services:
          type: array
          items:
            $ref: '#/components/schemas/v1ApmService'
    v1ListClusterMetricsResponse:
      type: object
      properties:
        widgets:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v1ClusterWidgetWrapper'
    v1ListClusterStatsResponse:
      type: object
      properties:
        stats:
          type: object
          additionalProperties:
            type: integer
            format: int32
        selectedCluster:
          $ref: '#/components/schemas/v1Cluster'
    v1ListClusterTopKResponse:
      type: object
      properties:
        tables:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v1ClusterWidgetWrapper'
    v1ListClustersResponse:
      type: object
      properties:
        clusters:
          type: array
          items:
            type: string
    v1ListConnectorSummariesResponse:
      type: object
      properties:
        connectorSummaries:
          type: array
          items:
            $ref: '#/components/schemas/v1ConnectorSummary'
      description: Response containing summaries of connectors
      title: List Connector Summaries Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1ListConnectorsResponse:
      type: object
      properties:
        connectors:
          type: array
          items:
            $ref: '#/components/schemas/v1Connector'
      description: Response containing a list of connectors
      title: List Connectors Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1ListEntityTypesResponse:
      type: object
      properties:
        entityTypes:
          type: array
          items:
            type: string
    v1ListEventsResponse:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/v1Event'
    v1ListFiltersResponse:
      type: object
      properties:
        tab:
          $ref: '#/components/schemas/v1K8sObject'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/queriesk8sv1Filter'
        dataSource:
          $ref: '#/components/schemas/global_mappingv1DataSource'
    v1ListIbmEventNotificationsInstancesResponse:
      type: object
      properties:
        instances:
          type: array
          items:
            $ref: >-
              #/components/schemas/ListIbmEventNotificationsInstancesResponseEventNotificationsInstance
    v1ListManagedIntegrationKeysResponse:
      type: object
      properties:
        integrationKeys:
          type: array
          items:
            type: string
      description: >-
        This data structure is the response obtained when retrieving a list of
        managed integration keys.
      title: ListManagedIntegrationKeysResponse
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
      required:
        - integrationKeys
    v1ListNamesResponse:
      type: object
      properties:
        object:
          $ref: '#/components/schemas/v1K8sObject'
        names:
          type: array
          items:
            type: string
        tab:
          $ref: '#/components/schemas/v1K8sObject'
    v1ListOutboundWebhooksSummaryResponse:
      type: object
      properties:
        outboundWebhookSummaries:
          type: array
          items:
            $ref: '#/components/schemas/v1OutboundWebhookSummary'
      description: This data structure represents a list of outgoing webhook summaries.
      title: List Outgoing Webhooks Summary Response
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - outboundWebhookSummaries
    v1ListOutgoingWebhookTypesResponse:
      type: object
      properties:
        webhooks:
          type: array
          items:
            $ref: >-
              #/components/schemas/ListOutgoingWebhookTypesResponseOutgoingWebhookType
      description: This data structure represents a list of outgoing webhook types.
      title: List Outgoing Webhook Types Response
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - webhooks
    v1ListOutgoingWebhooksResponse:
      type: object
      properties:
        deployed:
          type: array
          items:
            $ref: '#/components/schemas/v1OutgoingWebhookSummary'
      description: This data structure represents an outgoing webhook type.
      title: List Outgoing Webhooks Response
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - deployed
    v1ListPresetSummariesResponse:
      type: object
      properties:
        presetSummaries:
          type: array
          items:
            $ref: '#/components/schemas/v1PresetSummary'
    v1ListPushBasedContextualDataIntegrationsRequest:
      type: object
      properties:
        platform:
          $ref: '#/components/schemas/v1PushBasedPlatform'
      description: Requests all the registered integrations for a given platform
      title: List PushBased ContextualData Integrations Request
      required:
        - platform
    v1ListPushBasedContextualDataIntegrationsResponse:
      type: object
      properties:
        integrations:
          type: array
          items:
            $ref: >-
              #/components/schemas/ListPushBasedContextualDataIntegrationsResponsePushBasedContextualDataIntegration
      description: Returns all the registered integrations for a given platform
      title: List Push Based Integration Response
      required:
        - integrations
    v1ListServiceSlosResponse:
      type: object
      properties:
        slos:
          type: array
          items:
            $ref: '#/components/schemas/v1ServiceSlo'
      description: This data structure represents a response to list Service SLOs.
      title: List Service SLOs Response
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - slos
    v1ListWebhookIntegrationsRequest:
      type: object
      description: Request to list integrations
      title: List Webhook Integration Request
    v1ListWebhookIntegrationsResponse:
      type: object
      properties:
        webhooks:
          type: array
          items:
            $ref: >-
              #/components/schemas/ListWebhookIntegrationsResponseWebhookIntegration
      description: Webhook integration data
      title: List Webhook Integration Response
      required:
        - webhooks
    v1LocalChangelog:
      type: object
      properties:
        changes:
          type: array
          items:
            $ref: '#/components/schemas/v1RevisionRef'
      description: This data structure represents a local changelog.
      title: LocalChangelog
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1LogMetaFieldsValues:
      type: object
      properties:
        applicationNameValues:
          type: string
          example: application_name
        severityValues:
          type: string
          example: severity
        subsystemNameValues:
          type: string
          example: subsystem_name
      description: Values for log meta fields.
      title: Log Meta Fields Values
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - applicationNameValues
        - severityValues
        - subsystemNameValues
    v1LogRules:
      type: object
      properties:
        severities:
          type: array
          items:
            $ref: '#/components/schemas/quotav1Severity'
      description: Log rules for a policy.
      title: Log Rules
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - severities
    v1MSTeamsWorkflowConfig:
      type: object
    v1MapChart:
      type: object
      properties:
        displayName:
          type: string
        name:
          type: string
        query:
          type: string
        results:
          type: array
          items:
            $ref: '#/components/schemas/v1FloatResult'
        mapPoints:
          type: array
          items:
            $ref: '#/components/schemas/v1MapPointValue'
    v1MapPointValue:
      type: object
      properties:
        value:
          type: number
          format: float
        coordinate:
          $ref: '#/components/schemas/v1Coordinate'
        name:
          type: string
          title: This is the key name
        displayName:
          type: string
        unit:
          type: string
          title: The unit of measurement
      title: A wrapper for a map point result
    v1Measurement:
      type: object
      properties:
        measurementName:
          type: string
        dataSourceType:
          $ref: '#/components/schemas/v1DataSourceType'
        query:
          type: string
        labels:
          type: array
          items:
            type: string
        id:
          type: string
        description:
          type: string
        displayName:
          type: string
        logicalGroup:
          type: string
        orderingQuery:
          type: string
        appendableMetrics:
          type: array
          items:
            type: string
        dataSource:
          $ref: '#/components/schemas/global_mappingv1DataSource'
        groupLeft:
          type: string
        joinOn:
          type: string
        subjectLabel:
          type: string
    v1MeasurementMetadata:
      type: object
      properties:
        measurementName:
          type: string
        aggregationType:
          $ref: '#/components/schemas/global_mappingv1AggregationType'
        queryType:
          $ref: '#/components/schemas/v1QueryType'
        step:
          type: integer
          format: int32
        aggregationWindowSeconds:
          type: integer
          format: int32
        topkAggregation:
          $ref: '#/components/schemas/v1TopkAggregation'
    v1MeasurementQuery:
      type: object
      properties:
        query:
          type: string
        name:
          type: string
        description:
          type: string
        displayName:
          type: string
        logicalGroup:
          type: string
        queryResults:
          type: array
          items:
            $ref: '#/components/schemas/v1QueryResult'
        orderingQuery:
          type: string
        aggregationType:
          $ref: '#/components/schemas/global_mappingv1AggregationType'
        queryType:
          $ref: '#/components/schemas/v1QueryType'
        labelValues:
          $ref: '#/components/schemas/v1LabelValues'
        step:
          type: integer
          format: int32
        aggregationWindowSeconds:
          type: integer
          format: int32
    v1MicrosoftTeamsConfig:
      type: object
    v1NoDeployment:
      type: object
      description: >-
        This data structure represents an integration that does not require
        deployment.
      title: NoDeployment
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1NotificationAttachment:
      type: object
      properties:
        key:
          type: string
        displayName:
          type: string
        contentType:
          type: string
        raw:
          $ref: '#/components/schemas/NotificationAttachmentRaw'
        url:
          $ref: '#/components/schemas/NotificationAttachmentUrl'
    v1NotificationOperation:
      type: object
      properties:
        key:
          type: string
        displayName:
          type: string
        http:
          $ref: '#/components/schemas/NotificationOperationHttpOperation'
    v1NotificationTarget:
      type: object
      properties:
        private:
          $ref: '#/components/schemas/NotificationTargetPrivateRouterConfig'
        global:
          $ref: '#/components/schemas/NotificationTargetGlobalRouterConfig'
    v1OpsgenieConfig:
      type: object
    v1OutRule:
      type: object
      properties:
        record:
          type: string
        expr:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        lastEvalDurationMs:
          type: string
          format: uint64
    v1OutRuleGroup:
      type: object
      properties:
        name:
          type: string
        interval:
          type: integer
          format: int64
        limit:
          type: string
          format: uint64
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v1OutRule'
        lastEvalAt:
          type: string
          format: uint64
        version:
          type: integer
          format: int64
        id:
          type: string
    v1OutRuleGroupSet:
      type: object
      properties:
        id:
          type: string
        groups:
          type: array
          items:
            $ref: '#/components/schemas/v1OutRuleGroup'
        name:
          type: string
      description: An output set of rule groups.
      title: Out Rule Group Set
      externalDocs:
        description: Find out more about recording rules
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/metric-rules/recording-rules/
    v1OutboundWebhookSummary:
      type: object
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/v1WebhookType'
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        externalId:
          type: integer
          format: int64
    v1OutgoingWebhook:
      type: object
      properties:
        id:
          type: string
          example: webhook_id
        type:
          $ref: '#/components/schemas/v1WebhookType'
        name:
          type: string
          example: my_webhook
        url:
          type: string
          example: slack.webhook.com
        createdAt:
          type: string
          format: date-time
          example: '2024-10-20T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-10-20T00:00:00.000Z'
        externalId:
          type: integer
          format: int64
          example: external_id_example
        genericWebhook:
          $ref: '#/components/schemas/v1GenericWebhookConfig'
        slack:
          $ref: '#/components/schemas/v1SlackConfig'
        pagerDuty:
          $ref: '#/components/schemas/v1PagerDutyConfig'
        sendLog:
          $ref: '#/components/schemas/v1SendLogConfig'
        emailGroup:
          $ref: '#/components/schemas/v1EmailGroupConfig'
        microsoftTeams:
          $ref: '#/components/schemas/v1MicrosoftTeamsConfig'
        jira:
          $ref: '#/components/schemas/v1JiraConfig'
        opsgenie:
          $ref: '#/components/schemas/v1OpsgenieConfig'
        demisto:
          $ref: '#/components/schemas/v1DemistoConfig'
        awsEventBridge:
          $ref: '#/components/schemas/v1AwsEventBridgeConfig'
        ibmEventNotifications:
          $ref: '#/components/schemas/v1IbmEventNotificationsConfig'
        msTeamsWorkflow:
          $ref: '#/components/schemas/v1MSTeamsWorkflowConfig'
      description: This data structure represents an outgoing webhook
      title: Outgoing Webhook
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - id
        - type
        - name
        - url
        - createdAt
        - updatedAt
        - config
    v1OutgoingWebhookDetails:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/v1WebhookType'
        label:
          type: string
          example: example_label
      description: This data structure represents the details of an outgoing webhook type.
      title: Outgoing Webhook Details
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - type
        - label
    v1OutgoingWebhookExtendedSummary:
      type: object
      properties:
        id:
          type: string
          example: webhook_id
        type:
          $ref: '#/components/schemas/v1WebhookType'
        name:
          type: string
          example: my_webhook
        url:
          type: string
          example: slack.webhook.com
        createdAt:
          type: string
          format: date-time
          example: '2024-10-20T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-10-20T00:00:00.000Z'
        externalId:
          type: integer
          format: int64
          example: external_id_example
      description: This data structure fully summarizes an outgoing webhook.
      title: Outgoing Webhook Extended Summary
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - id
        - type
        - name
        - url
        - createdAt
        - updatedAt
    v1OutgoingWebhookInputData:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/v1WebhookType'
        name:
          type: string
          example: my_webhook
        url:
          type: string
          example: slack.webhook.com
        genericWebhook:
          $ref: '#/components/schemas/v1GenericWebhookConfig'
        slack:
          $ref: '#/components/schemas/v1SlackConfig'
        pagerDuty:
          $ref: '#/components/schemas/v1PagerDutyConfig'
        sendLog:
          $ref: '#/components/schemas/v1SendLogConfig'
        emailGroup:
          $ref: '#/components/schemas/v1EmailGroupConfig'
        microsoftTeams:
          $ref: '#/components/schemas/v1MicrosoftTeamsConfig'
        jira:
          $ref: '#/components/schemas/v1JiraConfig'
        opsgenie:
          $ref: '#/components/schemas/v1OpsgenieConfig'
        demisto:
          $ref: '#/components/schemas/v1DemistoConfig'
        awsEventBridge:
          $ref: '#/components/schemas/v1AwsEventBridgeConfig'
        ibmEventNotifications:
          $ref: '#/components/schemas/v1IbmEventNotificationsConfig'
        msTeamsWorkflow:
          $ref: '#/components/schemas/v1MSTeamsWorkflowConfig'
      description: This data structure represents the input data of an outgoing webhook
      title: Outgoing Webhook Input Data
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - type
        - name
        - url
        - config
    v1OutgoingWebhookSummary:
      type: object
      properties:
        id:
          type: string
          example: webhook_id
        name:
          type: string
          example: my_webhook
        url:
          type: string
          example: slack.webhook.com
        createdAt:
          type: string
          format: date-time
          example: '2024-10-20T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-10-20T00:00:00.000Z'
        externalId:
          type: integer
          format: int64
          example: external_id_example
      description: This data structure represents an outgoing webhook type.
      title: Outgoing Webhook Summary
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - type
    v1PagerDutyConfig:
      type: object
      properties:
        serviceKey:
          type: string
          example: pager_duty_service_key
      description: >-
        This data structure represents the configuration of a PagerDuty outgoing
        webhook
      title: PagerDuty Configuration
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - serviceKey
    v1PaginationData:
      type: object
      properties:
        pageSize:
          type: integer
          format: int32
        pageIndex:
          type: integer
          format: int32
        orderBy:
          $ref: '#/components/schemas/v1SortOrder'
        orderByMeasurement:
          type: string
    v1Parameter:
      type: object
      properties:
        key:
          type: string
        stringValue:
          type: string
        booleanValue:
          type: boolean
        stringList:
          $ref: '#/components/schemas/ParameterStringList'
        apiKey:
          $ref: '#/components/schemas/ParameterApiKeyData'
        numericValue:
          type: number
          format: double
        sensitiveData:
          $ref: '#/components/schemas/ParameterSensitiveDataPlaceholder'
      description: This data structure represents a list of outgoing webhook types.
      title: Parameter
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1PermissionId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    v1Policy:
      type: object
      properties:
        id:
          type: string
          example: policy_id
        companyId:
          type: integer
          format: int32
          example: 1234
        name:
          type: string
          example: My Policy
        description:
          type: string
          example: My Policy Description
        priority:
          $ref: '#/components/schemas/quotav1Priority'
        deleted:
          type: boolean
          example: false
        enabled:
          type: boolean
          example: true
        order:
          type: integer
          format: int32
          example: 1
        applicationRule:
          $ref: '#/components/schemas/quotav1Rule'
        subsystemRule:
          $ref: '#/components/schemas/quotav1Rule'
        logRules:
          $ref: '#/components/schemas/v1LogRules'
        spanRules:
          $ref: '#/components/schemas/v1SpanRules'
        createdAt:
          type: string
          example: '2021-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          example: '2021-01-01T00:00:00.000Z'
        archiveRetention:
          $ref: '#/components/schemas/v1ArchiveRetention'
      description: >-
        A policy is a set of rules that define the behavior of the Coralogix
        system for a specific company.
      title: Policy
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - id
        - companyId
        - name
        - priority
        - deleted
        - enabled
        - order
    v1PolicyOrder:
      type: object
      properties:
        order:
          type: integer
          format: int32
          example: 1
        id:
          type: string
          example: id
      description: Order of a policy.
      title: Policy Order
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - order
        - id
    v1Preset:
      type: object
      properties:
        id:
          type: string
          example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
        userFacingId:
          type: string
          example: user-preset-id
        entityType:
          type: string
          example: alerts
        connectorType:
          $ref: '#/components/schemas/notification_centerConnectorType'
        configOverrides:
          type: array
          items:
            $ref: '#/components/schemas/notification_centerConfigOverrides'
        parent:
          $ref: '#/components/schemas/v1Preset'
        name:
          type: string
          example: My Preset
        description:
          type: string
          example: Custom preset for alerts
        createTime:
          type: string
          format: date-time
        updateTime:
          type: string
          format: date-time
        presetType:
          $ref: '#/components/schemas/v1PresetType'
      description: Configuration preset for notification settings
      title: Preset
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1PresetIdentifier:
      type: object
      properties:
        id:
          type: string
        userFacingId:
          type: string
    v1PresetSummary:
      type: object
      properties:
        id:
          type: string
          example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
        userFacingId:
          type: string
          example: user-preset-id
        entityType:
          type: string
          example: alerts
        connectorType:
          $ref: '#/components/schemas/notification_centerConnectorType'
        parentId:
          type: string
          example: parent-preset-id
        name:
          type: string
          example: My Preset
        description:
          type: string
          example: Custom preset for alerts
        createTime:
          type: string
          format: date-time
        updateTime:
          type: string
          format: date-time
        presetType:
          $ref: '#/components/schemas/v1PresetType'
      description: Summary information about a preset configuration
      title: Preset Summary
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1PresetType:
      type: string
      enum:
        - PRESET_TYPE_UNSPECIFIED
        - SYSTEM
        - CUSTOM
      default: PRESET_TYPE_UNSPECIFIED
    v1PushBasedPlatform:
      type: string
      enum:
        - UNDEFINED
        - PLATFORM_BITBUCKET
        - PLATFORM_GITHUB
        - PLATFORM_GITLAB
        - PLATFORM_AWS_SNS
        - PLATFORM_OPSGENIE
        - PLATFORM_PAGERDUTY
        - PLATFORM_PROMETHEUS
        - PLATFORM_SLACK
        - PLATFORM_INTERCOM
      default: UNDEFINED
    v1QueryResult:
      type: object
      properties:
        metric:
          type: object
          additionalProperties:
            type: string
        values:
          type: array
          items:
            type: array
            items:
              type: object
    v1QueryType:
      type: string
      enum:
        - QUERY_TYPE_UNSPECIFIED
        - QUERY_TYPE_RANGE
        - QUERY_TYPE_INSTANT
      default: QUERY_TYPE_UNSPECIFIED
    v1QuickTimeSelection:
      type: object
      properties:
        caption:
          type: string
          example: Last Hour
          description: Folder name
          minLength: 1
        seconds:
          type: integer
          format: int64
          example: 3600
          description: Folder name
      title: Quick time selection
      required:
        - caption
        - seconds
    v1RemoveCustomLabelMappingsResponse:
      type: object
      properties:
        numberOfDeletedMappings:
          type: integer
          format: int32
    v1RemoveEnrichmentsResponse:
      type: object
      properties:
        remainingEnrichments:
          type: array
          items:
            $ref: '#/components/schemas/v1Enrichment'
      description: Response data structure for enrichment deletion.
      title: Encrichment deletion response
      externalDocs:
        description: Find out more about data enrichment in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/getting-started/
      required:
        - remainingEnrichments
    v1RemoveGlobalMeasurementsInternalResponse:
      type: object
      properties:
        numberOfDeletedMeasurements:
          type: integer
          format: int32
    v1RemoveInternalEnrichmentsResponse:
      type: object
      properties:
        remainingEnrichments:
          type: array
          items:
            $ref: '#/components/schemas/v1Enrichment'
    v1RemoveLabelMappingsResponse:
      type: object
      properties:
        numberOfDeletedMappings:
          type: integer
          format: int32
    v1RemoveUsersFromTeamGroupResponse:
      type: object
      description: >-
        Response confirming the successful removal of users from the specified
        team group.
      title: RemoveUsersFromTeamGroupResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1RemoveUsersFromTeamGroupsRequestRemoveUsersFromTeamGroup:
      type: object
      properties:
        groupId:
          $ref: '#/components/schemas/v1TeamGroupId'
        userIds:
          type: array
          items:
            $ref: '#/components/schemas/permissionsv1UserId'
          title: / Users to remove to group
      description: >-
        This data structure represents the information associated with an API
        key.
      title: RemoveUsersFromTeamGroup
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1RemoveUsersFromTeamGroupsResponse:
      type: object
      description: >-
        Response confirming the successful bulk removal of users from multiple
        team groups.
      title: RemoveUsersFromTeamGroupsResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1ReorderPoliciesRequest:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/v1PolicyOrder'
        sourceType:
          $ref: '#/components/schemas/quotav1SourceType'
      description: This data structue is used to reorder policies.
      title: Reorder Policies Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - orders
        - sourceType
    v1ReorderPoliciesResponse:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/v1PolicyOrder'
      description: This data structure is obtained when reordering policies.
      title: Reorder Policies Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - orders
    v1ReplaceConnectorResponse:
      type: object
      properties:
        connector:
          $ref: '#/components/schemas/v1Connector'
      description: Response containing the replaced connector
      title: Replace Connector Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1ReplaceCustomPresetResponse:
      type: object
      properties:
        preset:
          $ref: '#/components/schemas/v1Preset'
    v1ReplaceServiceSloRequest:
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/v1ServiceSlo'
      description: This data structure represents a request to update a Service SLO.
      title: Replace Service SLO Request
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - slo
    v1ReplaceServiceSloResponse:
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/v1ServiceSlo'
      description: This data structure represents a response to update a Service SLO.
      title: Replace Service SLO Response
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - slo
    v1ResourceId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    v1Retention:
      type: object
      properties:
        id:
          type: string
        order:
          type: integer
          format: int32
        name:
          type: string
        editable:
          type: boolean
      description: This data structure represents a retention
      title: Retention
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    v1RetentionUpdateElement:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    v1RevisionRef:
      type: object
      properties:
        version:
          type: string
          title: integration revision version
        descriptionMd:
          type: string
      description: This data structure represents a revision reference.
      title: RevisionRef
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1Role:
      type: object
      properties:
        roleId:
          $ref: '#/components/schemas/v1RoleId'
        name:
          type: string
          title: / Unique role name
        description:
          type: string
      description: >-
        / A group role. Each role has a collection of permissions associated
        with it. A group can have many roles.
    v1RoleId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    v1RowWrapper:
      type: object
      properties:
        results:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v1FloatResult'
        name:
          type: string
    v1RuleGroupListing:
      type: object
      properties:
        ruleGroups:
          type: array
          items:
            $ref: '#/components/schemas/v1OutRuleGroup'
      description: A listing of rule groups.
      title: Rule Group Listing
      externalDocs:
        description: Find out more about recording rules
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/metric-rules/recording-rules/
    v1RuleGroupSetListing:
      type: object
      properties:
        sets:
          type: array
          items:
            $ref: '#/components/schemas/v1OutRuleGroupSet'
      description: A listing of rule group sets.
      title: Rule Group Set Listing
      externalDocs:
        description: Find out more about recording rules
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/metric-rules/recording-rules/
    v1RuleGroupSetsUpdateBody:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/v1InRuleGroup'
        name:
          type: string
      description: A set of rule groups to update.
      title: Update Rule Group Set
      externalDocs:
        description: Find out more about recording rules
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/metric-rules/recording-rules/
    v1RuleTypeId:
      type: string
      enum:
        - RULE_TYPE_ID_UNSPECIFIED
        - RULE_TYPE_ID_IS
        - RULE_TYPE_ID_IS_NOT
        - RULE_TYPE_ID_START_WITH
        - RULE_TYPE_ID_INCLUDES
      default: RULE_TYPE_ID_UNSPECIFIED
    v1RumVersionData:
      type: object
      properties:
        versions:
          type: array
          items:
            $ref: '#/components/schemas/v1RumVersionDataVersion'
        syncedAt:
          type: string
          format: date-time
      description: This data structure represents a list of outgoing webhook types.
      title: RumVersionData
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1RumVersionDataVersion:
      type: object
      properties:
        version:
          type: string
        logMetadata:
          $ref: '#/components/schemas/RumVersionDataLogMetadata'
        sourceMapMetadata:
          $ref: '#/components/schemas/RumVersionDataSourceMapMetadata'
      description: This data structure represents a list of outgoing webhook types.
      title: Version
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1SaveContextualDataIntegrationResponse:
      type: object
      properties:
        integrationId:
          type: string
    v1SaveIntegrationRequest:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/v1IntegrationMetadata'
      description: This data structure represents a request to save an integration.
      title: SaveIntegrationRequest
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
      required:
        - metadata
    v1SaveIntegrationResponse:
      type: object
      properties:
        integrationId:
          type: string
      description: >-
        This data structure represents a response obtained when saving an
        integration.
      title: SaveIntegrationResponse
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
      required:
        - integrationId
    v1ScopeFilter:
      type: object
      properties:
        term:
          type: string
          description: / The filter term to use as a matching reference.
        filterType:
          $ref: '#/components/schemas/v1FilterType'
      title: >-
        / A scope filter, given a filter term and a filter type is used to
        configure filter capabilities
    v1ScopeFilters:
      type: object
      properties:
        subsystems:
          type: array
          items:
            $ref: '#/components/schemas/v1ScopeFilter'
          title: / List of subsystem scope filters
        applications:
          type: array
          items:
            $ref: '#/components/schemas/v1ScopeFilter'
          title: / List of applications scope filters
      title: >-
        / Scope filters are currently possible to be defined for subsystems and
        applications
    v1ScopeId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    v1SearchCustomEnrichmentDataResponse:
      type: object
      properties:
        customEnrichmentsData:
          type: array
          items:
            $ref: '#/components/schemas/v1CustomEnrichmentData'
    v1SearchQuery:
      type: object
      properties:
        query:
          type: string
          description: Only digits are allowed.
          title: View search query
          maxLength: 1
          minLength: 1
      title: SearchQuery
      required:
        - query
    v1SelectedFilter:
      type: object
      properties:
        kind:
          $ref: '#/components/schemas/v1K8sFilter'
        values:
          type: array
          items:
            type: string
    v1SelectedFilters:
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/coralogixapisviewsv1Filter'
          title: Selected filters
          minItems: 1
      title: Selected filters
    v1SendLogConfig:
      type: object
      properties:
        uuid:
          type: string
          example: d838cd7b-087b-40c6-bc33-80997020f5d0
        payload:
          type: string
          example:
            key: value
      description: >-
        This data structure represents the configuration of a SendLog outgoing
        webhook
      title: Send Log Configuration
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - service_key
    v1SendTestNotificationResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/v1TestResult'
    v1ServiceSlo:
      type: object
      properties:
        id:
          type: string
          example: slo_id
        name:
          type: string
          example: slo_name
        serviceName:
          type: string
          example: service_name
        status:
          $ref: '#/components/schemas/v1SloStatus'
        description:
          type: string
          example: slo_description
        targetPercentage:
          type: integer
          format: int64
          example: 99
        createdAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00.000Z'
        remainingErrorBudgetPercentage:
          type: integer
          format: int64
          example: 1
        latencySli:
          $ref: '#/components/schemas/v1LatencySli'
        errorSli:
          $ref: '#/components/schemas/v1ErrorSli'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/v1SliFilter'
        period:
          $ref: '#/components/schemas/v1SloPeriod'
      description: >-
        This data structure represents a Service Level Objective (SLO) in
        Coralogix APM.
      title: Service SLO
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - id
        - name
        - serviceName
        - status
        - description
        - targetPercentage
        - createdAt
        - remainingErrorBudgetPercentage
        - sli_type
        - filters
        - period
    v1SetCustomPresetAsDefaultResponse:
      type: object
    v1SetTeamGroupScopeResponse:
      type: object
      properties:
        scopeId:
          $ref: '#/components/schemas/v1ScopeId'
      description: >-
        Response message containing the ID of the newly created or updated scope
        for a team group
      title: SetTeamGroupScopeResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1SlackConfig:
      type: object
      properties:
        digests:
          type: array
          items:
            $ref: '#/components/schemas/SlackConfigDigest'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/SlackConfigAttachment'
      description: >-
        This data structure represents the configuration of a Slack outgoing
        webhook
      title: Slack Configuration
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - digests
        - attachments
    v1SliFilter:
      type: object
      properties:
        field:
          type: string
          example: field_name
        compareType:
          $ref: '#/components/schemas/v1CompareType'
        fieldValues:
          type: array
          example:
            - value1
            - value2
          items:
            type: string
      description: >-
        This data structure represents a filter for a Service Level Indicator
        (SLI) in Coralogix APM.
      title: SLI Filter
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - field
        - compareType
        - fieldValues
    v1SloPeriod:
      type: string
      enum:
        - SLO_PERIOD_UNSPECIFIED
        - SLO_PERIOD_7_DAYS
        - SLO_PERIOD_14_DAYS
        - SLO_PERIOD_30_DAYS
      default: SLO_PERIOD_UNSPECIFIED
    v1SloStatus:
      type: string
      enum:
        - SLO_STATUS_UNSPECIFIED
        - SLO_STATUS_OK
        - SLO_STATUS_BREACHED
      default: SLO_STATUS_UNSPECIFIED
    v1SloStatusCount:
      type: object
      properties:
        ok:
          type: string
          format: int64
        breach:
          type: string
          format: int64
        notAvailable:
          type: string
          format: int64
    v1SortOrder:
      type: string
      enum:
        - SORT_ORDER_DESCENDING_OR_UNSPECIFIED
        - SORT_ORDER_ASCENDING
      default: SORT_ORDER_DESCENDING_OR_UNSPECIFIED
    v1SpanRules:
      type: object
      properties:
        serviceRule:
          $ref: '#/components/schemas/quotav1Rule'
        actionRule:
          $ref: '#/components/schemas/quotav1Rule'
        tagRules:
          type: array
          items:
            $ref: '#/components/schemas/v1TagRule'
    v1SupportedAwsResourceType:
      type: object
      properties:
        type:
          type: string
        displayName:
          type: string
    v1SuspiciousIpType:
      type: object
    v1SyncRumDataRequest:
      type: object
      properties:
        force:
          type: boolean
          description: >-
            The period amount when the sync is not triggered is determined by
            configuration.
      description: This data structure is a request to trigger a sync of RUM data.
      title: SyncRumDataRequest
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1SyncRumDataResponse:
      type: object
      properties:
        syncExecuted:
          type: boolean
        syncedAt:
          type: string
          format: date-time
      description: >-
        This data structure represents a response obtained when syncing RUM
        data.
      title: SyncRumDataResponse
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1TableRow:
      type: object
      properties:
        queries:
          type: array
          items:
            $ref: '#/components/schemas/v1MeasurementQuery'
    v1TagRule:
      type: object
      properties:
        ruleTypeId:
          $ref: '#/components/schemas/v1RuleTypeId'
        tagName:
          type: string
          example: tag_name
        tagValue:
          type: string
          example: tag_value
      description: Tag rule for a policy.
      title: Tag Rule
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - ruleTypeId
        - tagName
        - tagValue
    v1TargetDomain:
      type: string
      enum:
        - ACTION
        - ALERT
        - ENRICHMENT
        - GRAFANA_DASHBOARD
        - KIBANA_DASHBOARD
        - PARSING_RULE
        - SAVED_VIEW
        - CX_CUSTOM_DASHBOARD
        - METRICS_RULE_GROUP
        - EVENTS_TO_METRICS
        - ALERT_V3
      default: ACTION
    v1TeamGroup:
      type: object
      properties:
        groupId:
          $ref: '#/components/schemas/v1TeamGroupId'
        name:
          type: string
          title: / Unique name
        description:
          type: string
          title: / Group description
        externalId:
          type: string
          description: / Group external identifier. Applies if team is externally defined.
        groupOrigin:
          $ref: '#/components/schemas/v1GroupOrigin'
        teamId:
          $ref: '#/components/schemas/permissionsv1TeamId'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/v1Role'
          title: / Associated team roles
        scope:
          $ref: '#/components/schemas/coralogixpermissionsv1Scope'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        nextGenScopeId:
          type: string
    v1TeamGroupId:
      type: object
      properties:
        id:
          type: integer
          format: int64
      description: >-
        This data structure represents the information associated with a team
        group.
      title: TeamGroupId
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1TeamPermissionsMgmtServiceAddUsersToTeamGroupBody:
      type: object
      properties:
        groupId:
          type: object
          title: / Team group id to add users to
          externalDocs:
            description: Find out more about groups
            url: >-
              https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
        userIds:
          type: array
          items:
            $ref: '#/components/schemas/permissionsv1UserId'
          title: / Users to add to group
      description: >-
        Request to assign additional users to an existing team group, granting
        them the group's roles and scope permissions.
      title: AddUsersToTeamGroupRequest
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1TestConnectorConfigRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/notification_centerConnectorType'
        outputSchemaId:
          type: string
          example: default
        fields:
          type: array
          items:
            $ref: >-
              #/components/schemas/coralogixapisnotification_centerConnectorConfigField
        entityType:
          type: string
          example: alerts
      description: Request to test a connector configuration
      title: Test Connector Config Request
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1TestConnectorConfigResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/v1TestResult'
    v1TestContextualDataIntegrationResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/v1TestIntegrationResult'
    v1TestDestinationRequest:
      type: object
      properties:
        entityType:
          type: string
          example: alerts
        entitySubType:
          type: string
          example: logsImmediateResolved
        connectorId:
          type: string
          example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
        presetId:
          type: string
          example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
        outputSchemaId:
          type: string
          example: default
        connectorConfigFields:
          type: array
          items:
            $ref: >-
              #/components/schemas/coralogixapisnotification_centerConnectorConfigField
        messageConfigFields:
          type: array
          items:
            $ref: >-
              #/components/schemas/coralogixapisnotification_centerMessageConfigField
    v1TestDestinationResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/v1TestResult'
    v1TestExistingConnectorRequest:
      type: object
      properties:
        connectorId:
          type: string
          example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
        outputSchemaId:
          type: string
          example: default
    v1TestExistingConnectorResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/v1TestResult'
    v1TestExistingOutgoingWebhookRequest:
      type: object
      properties:
        id:
          type: string
          example: example_id
      description: >-
        This data structure represents a request to test an existing outgoing
        webhook.
      title: Test Existing Outgoing Webhook Request
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - id
    v1TestExistingPresetRequest:
      type: object
      properties:
        entityType:
          type: string
          example: alerts
        entitySubType:
          type: string
          example: logsImmediateResolved
        presetId:
          type: string
          example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
        connectorId:
          type: string
          example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
    v1TestExistingPresetResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/v1TestResult'
    v1TestExtensionRevisionRequest:
      type: object
      properties:
        extensionData:
          $ref: '#/components/schemas/v1ExtensionData'
        cleanupAfterTest:
          type: boolean
    v1TestExtensionRevisionResponse:
      type: object
    v1TestIntegrationRequest:
      type: object
      properties:
        integrationData:
          $ref: '#/components/schemas/v1IntegrationMetadata'
        integrationId:
          type: string
      description: This data structure represents a request to test an integration.
      title: TestIntegrationRequest
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
      required:
        - integrationData
    v1TestIntegrationResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/v1TestIntegrationResult'
      description: This data structure is a response obtained when testing an integration.
      title: TestIntegrationResponse
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
      required:
        - result
    v1TestIntegrationResult:
      type: object
      properties:
        success:
          $ref: '#/components/schemas/v1TestIntegrationResultSuccess'
        failure:
          $ref: '#/components/schemas/v1TestIntegrationResultFailure'
      description: This data structure represents a list of outgoing webhook types.
      title: TestIntegrationResult
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1TestIntegrationResultFailure:
      type: object
      properties:
        errorMessage:
          type: string
      description: This data structure represents a list of outgoing webhook types.
      title: Failure
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1TestIntegrationResultSuccess:
      type: object
      description: This data structure represents a list of outgoing webhook types.
      title: Success
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
    v1TestNotification:
      type: object
      properties:
        id:
          type: string
        teamId:
          type: integer
          format: int64
        connectorId:
          type: string
        outputSchemaId:
          type: string
        deprecatedEntityData:
          type: object
        connectorConfig:
          type: array
          items:
            $ref: >-
              #/components/schemas/coralogixapisnotification_centerConnectorConfigField
        messageConfig:
          type: array
          items:
            $ref: >-
              #/components/schemas/coralogixapisnotification_centerMessageConfigField
        availableOperations:
          type: array
          items:
            $ref: '#/components/schemas/v1NotificationOperation'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/v1NotificationAttachment'
        entityData:
          type: string
    v1TestOutgoingWebhookRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/v1OutgoingWebhookInputData'
    v1TestOutgoingWebhookResponse:
      type: object
      properties:
        success:
          $ref: '#/components/schemas/v1TestOutgoingWebhookResponseSuccess'
        failure:
          $ref: '#/components/schemas/v1TestOutgoingWebhookResponseFailure'
      description: This data structure represents a response to test an outgoing webhook.
      title: Test Outgoing Webhook Response
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - result
    v1TestOutgoingWebhookResponseFailure:
      type: object
      properties:
        errorMessage:
          type: string
          example: example_error_message
        displayMessage:
          type: string
          example: example_display_message
        statusCode:
          type: integer
          format: int64
          example: 400
      description: >-
        This data structure represents a failure response to test an outgoing
        webhook.
      title: Test Outgoing Webhook Failure
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - errorMessage
        - displayMessage
        - statusCode
    v1TestOutgoingWebhookResponseSuccess:
      type: object
    v1TestPoliciesResult:
      type: object
      properties:
        metaFieldsValues:
          $ref: '#/components/schemas/v1LogMetaFieldsValues'
        matched:
          type: boolean
          example: true
        policy:
          $ref: '#/components/schemas/v1Policy'
      description: Result of testing policies.
      title: Test Policies Result
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - metaFieldsValues
        - matched
        - policy
    v1TestPresetConfigRequest:
      type: object
      properties:
        entityType:
          type: string
          example: alerts
        entitySubType:
          type: string
          example: metric
        connectorId:
          type: string
          example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
        presetId:
          type: string
          example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
        configOverrides:
          type: array
          items:
            $ref: '#/components/schemas/notification_centerConfigOverrides'
    v1TestPresetConfigResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/v1TestResult'
    v1TestResult:
      type: object
      properties:
        success:
          $ref: '#/components/schemas/v1TestResultSuccess'
        failure:
          $ref: '#/components/schemas/v1TestResultFailure'
    v1TestResultFailure:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: integer
          format: int64
    v1TestResultSuccess:
      type: object
    v1TestTemplateRenderRequest:
      type: object
      properties:
        entityType:
          type: string
          example: alerts
        entitySubType:
          type: string
          example: logsImmediateResolved
        template:
          type: string
          example: '{{ alertDef.name }}'
    v1TestTemplateRenderResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/v1TestTemplateRenderResult'
    v1TestTemplateRenderResult:
      type: object
      properties:
        success:
          $ref: '#/components/schemas/v1TestTemplateRenderResultSuccess'
        failure:
          $ref: '#/components/schemas/v1TestTemplateRenderResultFailure'
    v1TestTemplateRenderResultFailure:
      type: object
      properties:
        message:
          type: string
          example: Template rendering failed
        reason:
          $ref: '#/components/schemas/TestTemplateRenderResultFailureReason'
    v1TestTemplateRenderResultSuccess:
      type: object
      properties:
        renderedValue:
          type: string
          example: Rendered template result
    v1TextContentType:
      type: object
      properties:
        generate:
          $ref: '#/components/schemas/v1TimestampSourceGenerate'
        regex:
          $ref: '#/components/schemas/v1TimestampSourceRegex'
      description: Indicates how to find the timestamp in the text request
      title: Json Content Type
      required:
        - timestamp_source
    v1ThresholdSymbol:
      type: string
      enum:
        - THRESHOLD_SYMBOL_UNSPECIFIED
        - THRESHOLD_SYMBOL_GREATER
        - THRESHOLD_SYMBOL_GREATER_OR_EQUAL
        - THRESHOLD_SYMBOL_LESS
        - THRESHOLD_SYMBOL_LESS_OR_EQUAL
        - THRESHOLD_SYMBOL_EQUAL
        - THRESHOLD_SYMBOL_NOT_EQUAL
      default: THRESHOLD_SYMBOL_UNSPECIFIED
    v1TimeSelection:
      type: object
      properties:
        quickSelection:
          $ref: '#/components/schemas/v1QuickTimeSelection'
        customSelection:
          $ref: '#/components/schemas/v1CustomTimeSelection'
      title: Time selection
    v1TimestampFormatAutomatic:
      type: object
      description: Indicates that the timestamp will be automatically formatted
      title: Timestamp Format Automatic
    v1TimestampFormatCustom:
      type: object
      properties:
        format:
          type: string
          example: dd/MM/yyyy hh:mm:ss
      description: Indicates that the timestamp has a custom format/pattern
      title: Timestamp Format Custom
      required:
        - format
    v1TimestampSourceGenerate:
      type: object
      description: Indicates that the timestamp will be autogenerated
      title: Timestamp Source Generate
    v1TimestampSourceJsonPath:
      type: object
      properties:
        jsonPath:
          type: string
          example: $.field.date
        automatic:
          $ref: '#/components/schemas/v1TimestampFormatAutomatic'
        custom:
          $ref: '#/components/schemas/v1TimestampFormatCustom'
      description: Indicates that the timestamp source is a json path
      title: Timestamp Source Json Path
      required:
        - format
        - jsonPath
    v1TimestampSourceRegex:
      type: object
      properties:
        regex:
          type: string
          example: ^[0-9]{4}
        automatic:
          $ref: '#/components/schemas/v1TimestampFormatAutomatic'
        custom:
          $ref: '#/components/schemas/v1TimestampFormatCustom'
      description: >-
        Indicates that which regex should be used to extract the timestamp from
        the request text
      title: Timestamp Source Regex
      required:
        - format
        - regex
    v1TogglePolicyRequest:
      type: object
      properties:
        id:
          type: string
          example: id
        enabled:
          type: boolean
          example: true
      description: This data structue is used to toggle a policy by its ID.
      title: Toggle Policy Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - id
        - enabled
    v1TogglePolicyResponse:
      type: object
      properties:
        id:
          type: string
          example: id
        enabled:
          type: boolean
          example: true
      description: This data structue is obtained when toggling a policy by its ID.
      title: Toggle Policy Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - id
        - enabled
    v1ToggleWebhookIntegrationActivationRequest:
      type: object
      properties:
        id:
          type: string
          example: b486d10b58184b25ae02c30dcba87775
        isActive:
          type: boolean
          example: true
      description: To enable/disable webhook integrations
      title: Webhook Integration Activation Response
      required:
        - id
        - isActive
    v1ToggleWebhookIntegrationActivationResponse:
      type: object
      description: Empty message if the request is successful
      title: Webhook Integration Activation Response
    v1Topk:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/v1WidgetGroup'
        displayName:
          type: string
        results:
          type: array
          items:
            $ref: '#/components/schemas/v1FloatResult'
        query:
          type: string
        toolTip:
          type: string
        unit:
          $ref: '#/components/schemas/widgetsv1Unit'
    v1TopkAggregation:
      type: object
      properties:
        aggregation:
          $ref: '#/components/schemas/v1TopkAggregationType'
        topk:
          type: integer
          format: int64
    v1TopkAggregationType:
      type: string
      enum:
        - TOPK_AGGREGATION_TYPE_UNSPECIFIED
        - TOPK_AGGREGATION_TYPE_LAST
        - TOPK_AGGREGATION_TYPE_MAX
        - TOPK_AGGREGATION_TYPE_MIN
        - TOPK_AGGREGATION_TYPE_AVG
      default: TOPK_AGGREGATION_TYPE_UNSPECIFIED
    v1TopkMultiValue:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/v1WidgetGroup'
        name:
          type: string
        displayName:
          type: string
        rows:
          type: array
          items:
            $ref: '#/components/schemas/v1RowWrapper'
        query:
          type: object
          additionalProperties:
            type: string
        toolTip:
          type: string
    v1Trigger:
      type: object
      properties:
        clientId:
          type: string
          title: >-
            client id is a user-defined string identifying the use case (e.g.,
            "alert-notification-sender")
        cxServiceName:
          type: string
        manualTrigger:
          $ref: '#/components/schemas/TriggerManualTrigger'
        automaticTrigger:
          $ref: '#/components/schemas/TriggerAutomaticTrigger'
    v1UUID:
      type: object
      properties:
        value:
          type: string
    v1UndeployExtensionRequest:
      type: object
      properties:
        id:
          type: string
        keptExtensionItems:
          type: array
          items:
            type: string
    v1UndeployExtensionResponse:
      type: object
      properties:
        failedItems:
          type: array
          items:
            $ref: '#/components/schemas/UndeployExtensionResponseFailedItem'
        extensionDeployment:
          $ref: '#/components/schemas/v1ExtensionDeployment'
    v1UpdateContextualDataIntegrationResponse:
      type: object
    v1UpdateCustomEnrichmentRequest:
      type: object
      properties:
        customEnrichmentId:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: custom_enrichment_name
        description:
          type: string
          example: custom_enrichment_description
        file:
          $ref: '#/components/schemas/v1File'
      description: >-
        This request data structure is used to update a Custom Enrichment
        instance.
      title: Update Custom Enrichment request
      externalDocs:
        description: Find out more about Custom Enrichment in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - customEnrichmentId
    v1UpdateCustomEnrichmentResponse:
      type: object
      properties:
        message:
          type: string
          example: Custom enrichment updated successfully
        customEnrichment:
          $ref: '#/components/schemas/v1CustomEnrichment'
      description: >-
        This response data structure is obtained when a Custom Enrichment
        instance is updated.
      title: Update Custom Enrichment response
      externalDocs:
        description: Find out more about Custom Enrichment in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    v1UpdateExtensionRequest:
      type: object
      properties:
        id:
          type: string
        version:
          type: string
        itemIds:
          type: array
          items:
            type: string
        applications:
          type: array
          items:
            type: string
        subsystems:
          type: array
          items:
            type: string
        extensionDeployment:
          $ref: '#/components/schemas/v1ExtensionDeployment'
    v1UpdateExtensionResponse:
      type: object
      properties:
        extensionDeployment:
          $ref: '#/components/schemas/v1ExtensionDeployment'
    v1UpdateIntegrationRequest:
      type: object
      properties:
        id:
          type: string
          title: This is the integration id generated at creation time
        metadata:
          $ref: '#/components/schemas/v1IntegrationMetadata'
      description: This data structure represents a list of outgoing webhook types.
      title: UpdateIntegrationRequest
      externalDocs:
        description: Find out more about integrations
        url: https://coralogix.com/integrations/
      required:
        - id
        - metadata
    v1UpdateIntegrationResponse:
      type: object
    v1UpdateOutgoingWebhookRequest:
      type: object
      properties:
        id:
          type: string
          example: example_id
        data:
          $ref: '#/components/schemas/v1OutgoingWebhookInputData'
      description: This data structure represents a request to update an outgoing webhook.
      title: Update Outgoing Webhook Request
      externalDocs:
        description: Find out more about outbound webhooks.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
      required:
        - id
        - data
    v1UpdateOutgoingWebhookResponse:
      type: object
    v1UpdatePolicyRequest:
      type: object
      properties:
        id:
          type: string
          example: policy_id
        name:
          type: string
          example: My Policy
        description:
          type: string
          example: My Policy Description
        priority:
          $ref: '#/components/schemas/quotav1Priority'
        applicationRule:
          $ref: '#/components/schemas/quotav1Rule'
        subsystemRule:
          $ref: '#/components/schemas/quotav1Rule'
        archiveRetention:
          $ref: '#/components/schemas/v1ArchiveRetention'
        logRules:
          $ref: '#/components/schemas/v1LogRules'
        spanRules:
          $ref: '#/components/schemas/v1SpanRules'
        enabled:
          type: boolean
          example: true
      description: This data structue is used to update an existing policy.
      title: Update Policy Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - id
    v1UpdatePolicyResponse:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/v1Policy'
      description: This data structue is obtained when updating a policy.
      title: Update Policy Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - policy
    v1UpdatePushBasedContextualDataIntegrationsRequest:
      type: object
      properties:
        id:
          type: string
          example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
        name:
          type: string
          example: I love chocolate
        application:
          type: string
          example: authorization
        subsystem:
          type: string
          example: token_validator
      description: Request to updated a Push Based ContextualData Integration by id
      title: Update Push Based ContextualData Integration Request
      required:
        - id
        - name
    v1UpdatePushBasedContextualDataIntegrationsResponse:
      type: object
      description: >-
        Empty if the Push Based ContextualData Integration was successfully
        updated
      title: Update Push Based ContextualData Integration Response
    v1UpdateRetentionsRequest:
      type: object
      properties:
        retentionUpdateElements:
          type: array
          items:
            $ref: '#/components/schemas/v1RetentionUpdateElement'
      description: This data structure is used to update retentions
      title: Update Retentions Request
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - retentionUpdateElements
    v1UpdateRetentionsResponse:
      type: object
      properties:
        retentions:
          type: array
          items:
            $ref: '#/components/schemas/v1Retention'
      description: This data structure is obtained after updating retentions
      title: Update Retentions Response
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - retentions
    v1UpdateScopeRequest:
      type: object
      properties:
        id:
          type: string
          example: scope_id
        displayName:
          type: string
          example: scope_name
        description:
          type: string
          example: scope_description
        filters:
          type: array
          items:
            $ref: '#/components/schemas/coralogixapisscopesv1Filter'
        defaultExpression:
          type: string
          example: expression
      description: This data structure represents a request to update a scope
      title: Update Scope Request
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
      required:
        - id
        - displayName
        - filters
        - defaultExpression
    v1UpdateScopeResponse:
      type: object
      properties:
        scope:
          $ref: '#/components/schemas/coralogixapisscopesv1Scope'
      description: This data structure represents a response to update a scope
      title: Update Scope Response
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
      required:
        - scope
    v1UpdateTeamGroupRequest:
      type: object
      properties:
        groupId:
          $ref: '#/components/schemas/v1TeamGroupId'
        name:
          type: string
          title: / Updated team group name
        description:
          type: string
          title: / Updated team group description
        externalId:
          type: string
          title: / Updated team group external_id
        roleUpdates:
          $ref: '#/components/schemas/UpdateTeamGroupRequestRoleUpdates'
        userUpdates:
          $ref: '#/components/schemas/UpdateTeamGroupRequestUserUpdates'
        scopeFilters:
          $ref: '#/components/schemas/v1ScopeFilters'
        nextGenScopeId:
          type: string
          title: / If set, updates new team group next gen scope
      description: >-
        Request to modify an existing team group's details, including its name,
        description, roles, users, and scope settings.
      title: UpdateTeamGroupRequest
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1UpdateTeamGroupResponse:
      type: object
      description: >-
        Response confirming the successful update of a team group's
        configuration.
      title: UpdateTeamGroupResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1UpdateTokenResponse:
      type: object
      properties:
        token:
          type: string
    v1UpsertCompanyProvidersInternalResponse:
      type: object
      properties:
        providers:
          type: array
          items:
            type: string
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/global_mappingv1DataSource'
    v1UpsertCompanyProvidersResponse:
      type: object
      properties:
        providers:
          type: array
          items:
            type: string
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/global_mappingv1DataSource'
    v1UpsertCustomLabelMappingsResponse:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/v1LabelMapping'
    v1UpsertGlobalMeasurementsInternalResponse:
      type: object
      properties:
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/v1Measurement'
    v1UpsertLabelMappingsInternalResponse:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/v1LabelMapping'
    v1UpsertLabelMappingsResponse:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/v1LabelMapping'
    v1UserStatus:
      type: string
      enum:
        - USER_STATUS_UNSPECIFIED
        - USER_STATUS_ACTIVE
        - USER_STATUS_INACTIVE
      default: USER_STATUS_UNSPECIFIED
      description: |-
        - USER_STATUS_ACTIVE: / User is active
         - USER_STATUS_INACTIVE: / User is inactive
      title: / User status
    v1ValidateExtensionItemsResponse:
      type: object
      properties:
        invalidExtensions:
          type: array
          items:
            $ref: >-
              #/components/schemas/ValidateExtensionItemsResponseInvalidExtension
    v1ViewFolder:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
          description: Unique identifier for folders
          maxLength: 36
          minLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
        name:
          type: string
          example: My Folder
          description: Folder name
          minLength: 1
      description: View folder.
      title: ViewFolder
      required:
        - name
    v1WebhookType:
      type: string
      enum:
        - UNKNOWN
        - GENERIC
        - SLACK
        - PAGERDUTY
        - SEND_LOG
        - EMAIL_GROUP
        - MICROSOFT_TEAMS
        - JIRA
        - OPSGENIE
        - DEMISTO
        - AWS_EVENT_BRIDGE
        - IBM_EVENT_NOTIFICATIONS
        - MS_TEAMS_WORKFLOW
      default: UNKNOWN
    v1WideParquet:
      type: object
      properties:
        version:
          $ref: '#/components/schemas/formatwide_parquetv1Version'
    v1WidgetGroup:
      type: object
      properties:
        name:
          type: string
        displayName:
          type: string
    v1astAnnotation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        enabled:
          type: boolean
        source:
          $ref: '#/components/schemas/astAnnotationSource'
    v1astFilter:
      type: object
      properties:
        source:
          $ref: '#/components/schemas/astFilterSource'
        enabled:
          type: boolean
          description: Indicates if the filter is currently enabled or not.
        collapsed:
          type: boolean
          description: >-
            Indicates if the filter's UI representation should be collapsed or
            expanded.
      description: Filter represents the configuration for filtering data on the dashboard.
    v1commonDataprimeQuery:
      type: object
      properties:
        text:
          type: string
    v1commonGroup:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/commonFieldGroup'
        value:
          type: number
          format: double
        groups:
          type: array
          items:
            $ref: '#/components/schemas/v1commonGroup'
    v1commonOrderDirection:
      type: string
      enum:
        - ORDER_DIRECTION_UNSPECIFIED
        - ORDER_DIRECTION_ASC
        - ORDER_DIRECTION_DESC
      default: ORDER_DIRECTION_UNSPECIFIED
    v1commonPagination:
      type: object
      properties:
        offset:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
    v2ActionExecutionRequest:
      type: object
      properties:
        create:
          $ref: '#/components/schemas/v2CreateActionRequest'
        replace:
          $ref: '#/components/schemas/v2ReplaceActionRequest'
        delete:
          $ref: '#/components/schemas/v2DeleteActionRequest'
    v2ActionExecutionResponse:
      type: object
      properties:
        create:
          $ref: '#/components/schemas/v2CreateActionResponse'
        replace:
          $ref: '#/components/schemas/v2ReplaceActionResponse'
        delete:
          $ref: '#/components/schemas/v2DeleteActionResponse'
    v2AggregateBy:
      type: string
      enum:
        - AGGREGATE_BY_UNSPECIFIED
        - AGGREGATE_BY_APPLICATION
        - AGGREGATE_BY_SUBSYSTEM
        - AGGREGATE_BY_PILLAR
        - AGGREGATE_BY_PRIORITY
      default: AGGREGATE_BY_UNSPECIFIED
    v2ArchiveSpec:
      type: object
      properties:
        archivingFormatId:
          type: string
          example: json_id
        isActive:
          type: boolean
          example: true
        enableTags:
          type: boolean
          example: true
      description: This data structure contains metadata about the archive.
      title: Archive Spec
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - bucket
    v2ArchivingFormatId:
      type: string
      enum:
        - ARCHIVING_FORMAT_ID_UNSPECIFIED
        - ARCHIVING_FORMAT_ID_WIDE_PARQUET_V1
      default: ARCHIVING_FORMAT_ID_UNSPECIFIED
    v2AtomicBatchExecuteActionsRequest:
      type: object
      properties:
        requests:
          type: array
          items:
            $ref: '#/components/schemas/v2ActionExecutionRequest'
    v2AtomicBatchExecuteActionsResponse:
      type: object
      properties:
        matchingResponses:
          type: array
          items:
            $ref: '#/components/schemas/v2ActionExecutionResponse'
    v2AtomicBatchExecuteE2MRequest:
      type: object
      properties:
        requests:
          type: array
          items:
            $ref: '#/components/schemas/v2E2MExecutionRequest'
      title: an atomic list of e2m action that are executed in the same request
    v2AtomicBatchExecuteE2MResponse:
      type: object
      properties:
        matchingResponses:
          type: array
          items:
            $ref: '#/components/schemas/v2E2MExecutionResponse'
      title: represents a response to atomic list of e2m actions
    v2CompanyDataset:
      type: object
      properties:
        companyId:
          type: integer
          format: int64
        dataset:
          $ref: '#/components/schemas/datasetv2Dataset'
    v2CompanyDatasetRules:
      type: object
      properties:
        companyId:
          type: integer
          format: int64
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v2DatasetRule'
    v2CreateActionRequest:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        isPrivate:
          type: boolean
        sourceType:
          $ref: '#/components/schemas/actionsv2SourceType'
        applicationNames:
          type: array
          items:
            type: string
        subsystemNames:
          type: array
          items:
            type: string
    v2CreateActionResponse:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/actionsv2Action'
    v2CreateE2MRequest:
      type: object
      properties:
        e2m:
          $ref: '#/components/schemas/v2E2MCreateParams'
      description: This is used to create a new event to metric definition
      title: Create E2M Request
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - e2m
    v2CreateE2MResponse:
      type: object
      properties:
        e2m:
          $ref: '#/components/schemas/v2E2M'
      title: represents e2m create response
    v2CreateE2MResponseInternal:
      type: object
      properties:
        e2m:
          $ref: '#/components/schemas/v2E2M'
    v2CreateTeamInOrgRequest:
      type: object
      properties:
        teamName:
          type: string
          example: My Team
        teamAdminsEmail:
          type: array
          example:
            - example@coralogix.com
          items:
            type: string
        dailyQuota:
          type: number
          format: double
          example: 0.01
          title: Default daily quota is 0.01 units/day
      description: This data structure represents a request to create a team.
      title: Create Team Request
      externalDocs:
        description: Find out more about teams
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/teams/#support
      required:
        - teamName
    v2CreateTeamInOrgResponse:
      type: object
      properties:
        teamId:
          $ref: '#/components/schemas/organisationsv2TeamId'
      description: This data structure represents a response to create a team.
      title: Create Team Response
      externalDocs:
        description: Find out more about teams
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/teams/#support
      required:
        - teamId
    v2DataPillar:
      type: string
      enum:
        - DATA_PILLAR_UNSPECIFIED
        - DATA_PILLAR_LOG
        - DATA_PILLAR_SPAN
      default: DATA_PILLAR_UNSPECIFIED
    v2DataSourceRequirements:
      type: object
      properties:
        dataSource:
          $ref: '#/components/schemas/commonv2DataSource'
        requirements:
          $ref: '#/components/schemas/v2Requirements'
        passedRequirements:
          type: boolean
        pageRequirements:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v2PageRequirement'
    v2DataType:
      type: string
      enum:
        - DATA_TYPE_UNSPECIFIED
        - DATA_TYPE_NUM
        - DATA_TYPE_STRING
        - DATA_TYPE_BOOL
        - DATA_TYPE_UNTRACKED_ARRAY
        - DATA_TYPE_OBJECT
        - DATA_TYPE_NUM_ARRAY
        - DATA_TYPE_STRING_ARRAY
        - DATA_TYPE_BOOL_ARRAY
        - DATA_TYPE_ARRAY_ARRAY
        - DATA_TYPE_OBJECT_ARRAY
        - DATA_TYPE_NULL
        - DATA_TYPE_NULL_ARRAY
        - DATA_TYPE_EMPTY_ARRAY
      default: DATA_TYPE_UNSPECIFIED
    v2DataUsageEntry:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        sizeGb:
          type: number
          format: float
        units:
          type: number
          format: float
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/v2Dimension'
      description: This data structure represents a data usage entry.
      title: Data Usage Entry
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2DatasetLocation:
      type: object
      properties:
        companyId:
          type: integer
          format: int64
        dataset:
          $ref: '#/components/schemas/datasetv2Dataset'
        physicalLocation:
          $ref: '#/components/schemas/v2FinalLocation'
        firstEventTime:
          type: string
          format: date-time
        lastEventTime:
          type: string
          format: date-time
        defaultKeyFields:
          type: array
          items:
            $ref: '#/components/schemas/v2FieldPath'
    v2DatasetLocationDetails:
      type: object
      properties:
        s3:
          $ref: '#/components/schemas/v2S3TargetSpec'
        ibmCos:
          $ref: '#/components/schemas/v2IBMCosTargetSpec'
        format:
          $ref: '#/components/schemas/v2Format'
        finalLocationBasePrefix:
          type: string
          title: >-
            the base path in the bucket (not including: dt/hr). for example:
            cx/parquet/v1/team_id=555585
        isActive:
          type: boolean
    v2DatasetLocationRequest:
      type: object
      properties:
        companyIds:
          type: array
          items:
            type: integer
            format: int64
        dataspaceRegex:
          type: string
        datasetRegex:
          type: string
        timeframe:
          $ref: '#/components/schemas/v2Timeframe'
    v2DatasetLocations:
      type: object
      properties:
        locations:
          type: array
          items:
            $ref: '#/components/schemas/v2DatasetLocation'
    v2DatasetRule:
      type: object
      properties:
        dataspace:
          $ref: '#/components/schemas/v2Dataspace'
        predicate:
          $ref: '#/components/schemas/v2Predicate'
        locations:
          type: array
          items:
            $ref: '#/components/schemas/v2IngestionLocationSpec'
        schemaTemplateIds:
          type: array
          items:
            type: string
    v2DatasetSchemaFields:
      type: object
      properties:
        companyId:
          type: integer
          format: int64
        dataset:
          $ref: '#/components/schemas/datasetv2Dataset'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/v2MergedNamedSchemaTemplateField'
    v2DatasetsInfo:
      type: object
      properties:
        companyId:
          type: integer
          format: int64
        datasets:
          type: array
          items:
            $ref: '#/components/schemas/datasetv2Dataset'
    v2Dataspace:
      type: object
      properties:
        dataspace:
          type: string
    v2DateRange:
      type: object
      properties:
        fromDate:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00.000Z'
        toDate:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00.000Z'
      description: This data structure represents a date range.
      title: Date Range
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2DeleteActionRequest:
      type: object
      properties:
        id:
          type: string
    v2DeleteActionResponse:
      type: object
    v2DeleteE2MRequest:
      type: object
      properties:
        id:
          type: string
          example: d6a3658e-78d2-47d0-9b81-b2c551f01b09
          title: id of e2m to be deleted
      description: >-
        This data structure is used to delete an existing event to metric
        definition
      title: Delete E2M Request
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - id
    v2DeleteE2MResponse:
      type: object
      properties:
        id:
          type: string
          title: id of deleted e2m
      description: >-
        This data structure is obtained when deleting an existing event to
        metric definition
      title: Delete E2M Request
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - id
    v2DeleteE2MResponseInternal:
      type: object
      properties:
        id:
          type: string
    v2DeleteTeamResponse:
      type: object
    v2Dimension:
      type: object
      properties:
        pillar:
          $ref: '#/components/schemas/v2Pillar'
        genericDimension:
          $ref: '#/components/schemas/v2GenericDimension'
        tier:
          $ref: '#/components/schemas/v2TcoTier'
        severity:
          $ref: '#/components/schemas/coralogixdatausagev2Severity'
        priority:
          $ref: '#/components/schemas/datausagev2Priority'
    v2E2M:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d6a3658e-78d2-47d0-9b81-b2c551f01b09
          title: E2M unique ID, required on update requests
          maxLength: 36
          minLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
        name:
          type: string
          example: Service_catalog_latency
          title: Name of the E2M
        description:
          type: string
          example: avg and max the latency of catalog service
          title: Description of the E2M
        createTime:
          type: string
          example: 2022-06-30T12:30:00Z'
          title: E2M create time
        updateTime:
          type: string
          example: 2022-06-30T12:30:00Z'
          title: E2M update time
        permutations:
          $ref: '#/components/schemas/v2E2MPermutations'
        metricLabels:
          type: array
          items:
            $ref: '#/components/schemas/v2MetricLabel'
          title: E2M metric labels
        metricFields:
          type: array
          items:
            $ref: '#/components/schemas/events2metricsv2MetricField'
          title: E2M metric fields
          maxItems: 10
        type:
          $ref: '#/components/schemas/v2E2MType'
        spansQuery:
          $ref: '#/components/schemas/spans2metricsv2SpansQuery'
        logsQuery:
          $ref: '#/components/schemas/logs2metricsv2LogsQuery'
        isInternal:
          type: boolean
          title: A flag that represents if the e2m is for internal usage
      description: This data structure represents an Event to Metrics (E2M) object.
      title: E2M
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - name
        - type
    v2E2MAggHistogram:
      type: object
      properties:
        buckets:
          type: array
          example: 2
          items:
            type: number
            format: float
          title: Buckets of the E2M
      description: This data structure represents the e2m aggregate histogram
      title: E2M Aggregate Histogram
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    v2E2MAggSamples:
      type: object
      properties:
        sampleType:
          $ref: '#/components/schemas/E2MAggSamplesSampleType'
      description: This data structure represents the e2m aggregate samples
      title: E2M Aggregate Samples
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    v2E2MCreateParams:
      type: object
      properties:
        name:
          type: string
          example: Service catalog latency
          title: Name of E2M to create
        description:
          type: string
          example: avg and max the latency of catalog service
          title: Description of E2M to create
        permutationsLimit:
          type: integer
          format: int32
          example: 30000
          title: The permutation limit of the E2M
        metricLabels:
          type: array
          items:
            $ref: '#/components/schemas/v2MetricLabel'
          title: E2M metric labels
        metricFields:
          type: array
          items:
            $ref: '#/components/schemas/events2metricsv2MetricField'
          title: E2M metric fields
        type:
          $ref: '#/components/schemas/v2E2MType'
        spansQuery:
          $ref: '#/components/schemas/spans2metricsv2SpansQuery'
        logsQuery:
          $ref: '#/components/schemas/logs2metricsv2LogsQuery'
      description: This data structure is used to create a new event to metric definition
      title: E2M Create Params
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - name
    v2E2MExecutionRequest:
      type: object
      properties:
        create:
          $ref: '#/components/schemas/v2CreateE2MRequest'
        replace:
          $ref: '#/components/schemas/v2ReplaceE2MRequest'
        delete:
          $ref: '#/components/schemas/v2DeleteE2MRequest'
      title: represents one of e2m actions create/replace/delete
    v2E2MExecutionResponse:
      type: object
      properties:
        created:
          $ref: '#/components/schemas/v2CreateE2MResponse'
        replaced:
          $ref: '#/components/schemas/v2ReplaceE2MResponse'
        deleted:
          $ref: '#/components/schemas/v2DeleteE2MResponse'
      title: represents a response of e2m execution
    v2E2MPermutations:
      type: object
      properties:
        limit:
          type: integer
          format: int32
          example: 30000
          title: E2M permutation limit
        hasExceededLimit:
          type: boolean
          title: Flag to indicate if limit was exceeded
      description: >-
        This data structure represents the limit of events2metrics permutations
        and if the limit was exceeded
      title: E2M Permutations
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - limit
        - hasExceededLimit
    v2E2MType:
      type: string
      enum:
        - E2M_TYPE_UNSPECIFIED
        - E2M_TYPE_LOGS2METRICS
        - E2M_TYPE_SPANS2METRICS
      default: E2M_TYPE_UNSPECIFIED
      title: Enum defining e2m type
    v2Feature:
      type: string
      enum:
        - FEATURE_UNSPECIFIED
        - FEATURE_K8S_DASHBOARD
      default: FEATURE_UNSPECIFIED
    v2FieldPath:
      type: object
      properties:
        path:
          type: array
          items:
            type: string
    v2FinalLocation:
      type: object
      properties:
        spec:
          $ref: '#/components/schemas/v2LocationSpec'
        finalLocationBasePrefix:
          type: string
          title: >-
            In case of data saved to S3 - base prefix of the dataset inside the
            bucket, without the dynamic dt/hr part
        id:
          type: string
          title: >-
            Represents a relation between datasets and its physical location.
            created by datasets-tracker service
      description: Specifies where specific dataset data can be found at the location.
    v2Format:
      type: object
      properties:
        logsAvro:
          $ref: '#/components/schemas/v2LogsAvro'
        spansAvro:
          $ref: '#/components/schemas/v2SpansAvro'
        genericEventAvro:
          $ref: '#/components/schemas/v1GenericEventAvro'
        wideParquet:
          $ref: '#/components/schemas/v1WideParquet'
        csv:
          $ref: '#/components/schemas/v1Csv'
    v2GenericDimension:
      type: object
      properties:
        key:
          type: string
          example: key
        value:
          type: string
          example: value
      description: This data structure represents a generic dimension.
      title: Generic Dimension
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2GetActionResponse:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/actionsv2Action'
    v2GetAllDatasetRulesResponse:
      type: object
      properties:
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v2CompanyDatasetRules'
        lastUpdateTime:
          type: string
          format: date-time
    v2GetConfigurationResponse:
      type: object
      properties:
        teamId:
          type: integer
          format: int64
        spParameters:
          $ref: '#/components/schemas/v2SPParameters'
        idpParameters:
          $ref: '#/components/schemas/v2IDPParameters'
        idpDetails:
          $ref: '#/components/schemas/GetConfigurationResponseIDPDetails'
      description: >-
        This data structure is obtained as a response to a request to retrieve
        the configuration of a SAML service provider and identity provider
      title: Get Configuration Response
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - teamId
        - spParameters
        - idpParameters
    v2GetDataUsageMetricsExportStatusResponse:
      type: object
      properties:
        enabled:
          type: boolean
          example: true
      description: This data structure is used to return data usage metrics export status.
      title: Get Data Usage Metrics Export Status Response
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2GetDataUsageResponse:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/v2DataUsageEntry'
      description: This data structure is used to return data usage.
      title: Get Data Usage Response
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2GetDatasetListResponse:
      type: object
      properties:
        datasetsInfo:
          type: array
          items:
            $ref: '#/components/schemas/v2DatasetsInfo'
    v2GetDatasetLocationsResponse:
      type: object
      properties:
        datasetLocations:
          type: array
          items:
            $ref: '#/components/schemas/v2DatasetLocations'
    v2GetDatasetSchemaFieldsResponse:
      type: object
      properties:
        schemaFields:
          type: array
          items:
            $ref: '#/components/schemas/v2DatasetSchemaFields'
    v2GetE2MResponse:
      type: object
      properties:
        e2m:
          $ref: '#/components/schemas/v2E2M'
      description: >-
        This data structure is obtained when retrieving an existing event to
        metric definition
      title: Get E2M Response
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - e2m
    v2GetLimitsResponse:
      type: object
      properties:
        companyId:
          type: string
          title: company id
        labelsLimit:
          type: integer
          format: int32
          title: labels limit
        permutationsLimit:
          $ref: '#/components/schemas/GetLimitsResponseLimitUsage'
        metricsLimit:
          $ref: '#/components/schemas/GetLimitsResponseLimitUsage'
      title: get e2m limits response
    v2GetLogsCountResponse:
      type: object
      properties:
        logsCount:
          type: array
          items:
            $ref: '#/components/schemas/v2LogsCount'
      description: This data structure is used to return logs count.
      title: Get Logs Count Response
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2GetSPParametersResponse:
      type: object
      properties:
        params:
          $ref: '#/components/schemas/v2SPParameters'
      description: >-
        This data structure is obtained as a response to a request to retrieve
        the parameters of a SAML service provider
      title: Get SP Parameters Response
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - params
    v2GetSchemaRuleResponse:
      type: object
      properties:
        rule:
          $ref: '#/components/schemas/datasetv2Rule'
    v2GetSpansCountResponse:
      type: object
      properties:
        spansCount:
          type: array
          items:
            $ref: '#/components/schemas/v2SpansCount'
      description: This data structure is used to return spans count.
      title: Get Spans Count Response
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2GetTeamDetailedDataUsageResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00.000Z'
        sizeGb:
          type: number
          format: float
          example: 2.5
        units:
          type: number
          format: float
          example: 5
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/v2Dimension'
      description: This data structure is used to return detailed data usage for a team.
      title: Get Team Detailed Data Usage Response
    v2GetTeamQuotaResponse:
      type: object
      properties:
        teamId:
          $ref: '#/components/schemas/organisationsv2TeamId'
        quota:
          type: number
          format: float
          example: 0.01
        retention:
          type: integer
          format: int32
          example: 30
      description: This data structure represents a response to get a team's quota.
      title: Get Team Quota Response
      externalDocs:
        description: Find out more about teams
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/teams/#support
      required:
        - teamId
        - quota
        - retention
    v2GetTeamResponse:
      type: object
      properties:
        teamId:
          $ref: '#/components/schemas/organisationsv2TeamId'
        teamName:
          type: string
          example: My Team
        dailyQuota:
          type: number
          format: double
          example: 0.01
        retention:
          type: integer
          format: int32
          example: 30
      description: This data structure represents a response to get a team.
      title: Get Team Response
      externalDocs:
        description: Find out more about teams
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/teams/#support
      required:
        - teamId
        - teamName
        - dailyQuota
        - retention
    v2IBMCosTargetSpec:
      type: object
      properties:
        bucketCrn:
          type: string
          example: bucket_crn
        endpoint:
          type: string
          example: http://some.endpoint.com:8081
        serviceCrn:
          type: string
          example: service_crn
        bucketType:
          $ref: '#/components/schemas/v2IbmBucketType'
      description: This data structure represents an IBM COS target.
      title: IBM COS Target Spec
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - bucketCrn
        - endpoint
    v2IDPParameters:
      type: object
      properties:
        active:
          type: boolean
          example: true
        metadataUrl:
          type: string
          example: https://<...>.okta.com/app/<...>/sso/saml/metadata
        metadataContent:
          type: string
          example: <?xml version= ...
        teamEntityId:
          type: integer
          format: int64
          example: 1234567
        groupNames:
          type: array
          example:
            - group1
          items:
            type: string
      description: >-
        This data structure represents a set of SAML identity provider
        parameters
      title: IDP Parameters
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - active
        - metadata
        - teamEntityId
        - groupNames
    v2IbmBucketType:
      type: string
      enum:
        - IBM_BUCKET_TYPE_UNSPECIFIED
        - IBM_BUCKET_TYPE_EXTERNAL
        - IBM_BUCKET_TYPE_INTERNAL
      default: IBM_BUCKET_TYPE_UNSPECIFIED
    v2IngestionLocationSpec:
      type: object
      properties:
        location:
          $ref: '#/components/schemas/v2LocationSpec'
        internal:
          $ref: '#/components/schemas/v2IngestionLocationSpecProps'
      title: LocationSpec + internal fields needed for ingestion (dataset-ingress)
    v2IngestionLocationSpecProps:
      type: object
      properties:
        maxCompactionLevel:
          type: integer
          format: int32
        collectLabels:
          type: boolean
        splitByEventLabels:
          type: array
          items:
            type: string
        partitioningScheme:
          $ref: '#/components/schemas/archivev2PartitioningScheme'
      description: |-
        Internal fields that shouldn't be known outside ingestion pipeline.
        Mostly properties that can be set only for predefined datasets.
    v2InputFile:
      type: object
      properties:
        s3:
          $ref: '#/components/schemas/v2S3TargetSpec'
        ibmCos:
          $ref: '#/components/schemas/v2IBMCosTargetSpec'
        path:
          type: string
        format:
          $ref: '#/components/schemas/v2Format'
    v2InternalAdditionalTargetProperties:
      type: object
      properties:
        bucketV2:
          type: string
    v2InternalDatasetLocationsServiceGetDatasetListResponse:
      type: object
      properties:
        datasetsInfo:
          type: array
          items:
            $ref: '#/components/schemas/v2DatasetsInfo'
    v2InternalDatasetLocationsServiceGetDatasetLocationsResponse:
      type: object
      properties:
        datasetLocations:
          type: array
          items:
            $ref: '#/components/schemas/v2DatasetLocations'
    v2InternalDatasetLocationsServiceGetLocationsByStableIdsResponse:
      type: object
      properties:
        locations:
          type: array
          items:
            $ref: '#/components/schemas/v2FinalLocation'
          title: Contains stable id within it
    v2InternalDatasetLocationsServiceUpdateDatasetLocationResponse:
      type: object
      properties:
        datasetLocation:
          $ref: '#/components/schemas/v2DatasetLocation'
    v2InternalDatasetManagementServiceGetSchemaRuleResponse:
      type: object
      properties:
        rule:
          $ref: '#/components/schemas/datasetv2Rule'
    v2InternalDatasetManagementServiceSetSchemaRuleResponse:
      type: object
      properties:
        rule:
          $ref: '#/components/schemas/datasetv2Rule'
    v2InternalGetTargetsRequestFilter:
      type: object
      properties:
        companyIds:
          type: array
          items:
            type: integer
            format: int64
        formatId:
          type: array
          items:
            $ref: '#/components/schemas/v2ArchivingFormatId'
        isActive:
          type: boolean
    v2InternalTargetServiceGetTargetsResponse:
      type: object
      properties:
        targets:
          type: array
          items:
            $ref: '#/components/schemas/v2TargetResponse'
    v2InternalWriteToDatasetResponse:
      type: object
    v2KafkaOutSpec:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        isActive:
          type: boolean
        dpxlExpression:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        compressionType:
          $ref: '#/components/schemas/kafka_out_targetsv2CompressionType'
    v2LabelExistence:
      type: object
      properties:
        label:
          type: string
        exists:
          type: boolean
    v2LabelsPermutationsCardinalityDay:
      type: object
      properties:
        day:
          type: string
        permutations:
          type: integer
          format: int32
      title: represents labels permutation cardinality
    v2ListActionsResponse:
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/actionsv2Action'
    v2ListE2MResponse:
      type: object
      properties:
        e2m:
          type: array
          items:
            $ref: '#/components/schemas/v2E2M'
          title: List of event to metrics definitions
      description: >-
        This is the response obtained when listing all event to metric
        definitions
      title: List E2M Response
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - e2m
    v2ListE2MResponseInternal:
      type: object
      properties:
        e2m:
          type: array
          items:
            $ref: '#/components/schemas/v2E2M'
    v2ListFeatureRequirementsDataSourcesResponse:
      type: object
      properties:
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/commonv2DataSource'
    v2ListFeatureRequirementsInternalDataSourcesResponse:
      type: object
      properties:
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/commonv2DataSource'
    v2ListLabelsCardinalityResponse:
      type: object
      properties:
        permutations:
          type: array
          items:
            $ref: '#/components/schemas/v2LabelsPermutationsCardinalityDay'
      title: response  represented by list of labels permutation cardinality
    v2ListTeamsResponse:
      type: object
      properties:
        defaultTeam:
          $ref: '#/components/schemas/v2ListTeamsResponseTeamInfo'
        teams:
          type: array
          items:
            $ref: '#/components/schemas/v2ListTeamsResponseTeamInfo'
    v2ListTeamsResponseTeamInfo:
      type: object
      properties:
        teamId:
          $ref: '#/components/schemas/organisationsv2TeamId'
        teamName:
          type: string
          example: My Team
        dailyQuota:
          type: number
          format: double
          example: 0.01
        retention:
          type: integer
          format: int32
          example: 30
      description: This data structure represents a team in the system.
      title: Team Info
      externalDocs:
        description: Find out more about teams
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/teams/#support
      required:
        - teamId
        - teamName
        - dailyQuota
        - retention
    v2LocationSpec:
      type: object
      properties:
        name:
          type: string
        isActive:
          type: boolean
        objectStoreLocation:
          $ref: '#/components/schemas/v2ObjectStoreLocation'
        format:
          $ref: '#/components/schemas/v2Format'
      description: >-
        Publicly known location spec. Customers could use this model in future
        "set location" API.
    v2LogsAvro:
      type: object
    v2LogsCount:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        logsCount:
          type: string
          format: uint64
          example: 100
        severity:
          $ref: '#/components/schemas/coralogixdatausagev2Severity'
        priority:
          $ref: '#/components/schemas/datausagev2Priority'
      description: This data structure represents a logs count.
      title: Logs Count
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2MergedNamedSchemaTemplateField:
      type: object
      properties:
        pathArray:
          type: array
          items:
            type: string
        dataTypes:
          type: array
          items:
            $ref: '#/components/schemas/v2NamedSchemaDataType'
    v2MetricExistence:
      type: object
      properties:
        metric:
          type: string
        exists:
          type: boolean
    v2MetricLabel:
      type: object
      properties:
        targetLabel:
          type: string
          example: alias_label_name
          title: Metric label target alias name
          pattern: ^[\w/-]+$
        sourceField:
          type: string
          example: log_obj.string_value
          title: Metric label source field
      description: This data structure represents a metric label
      title: Metric Label
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - targetLabel
        - sourceField
    v2MetricLabelsExistence:
      type: object
      properties:
        metric:
          type: string
        labels:
          type: array
          items:
            $ref: '#/components/schemas/v2LabelExistence'
    v2MoveQuotaRequest:
      type: object
      properties:
        sourceTeam:
          $ref: '#/components/schemas/organisationsv2TeamId'
        destinationTeam:
          $ref: '#/components/schemas/organisationsv2TeamId'
        unitsToMove:
          type: number
          format: double
          example: 0.01
      description: This data structure represents a request to move quota between teams.
      title: Move Quota Request
      externalDocs:
        description: Find out more about teams
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/teams/#support
      required:
        - sourceTeam
        - destinationTeam
        - unitsToMove
    v2MoveQuotaResponse:
      type: object
      properties:
        sourceTeamQuota:
          type: number
          format: double
          example: 0.01
        destinationTeamQuota:
          type: number
          format: double
          example: 0.01
      description: This data structure represents a response to move quota between teams.
      title: Move Quota Response
      externalDocs:
        description: Find out more about teams
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/teams/#support
      required:
        - sourceTeamQuota
        - destinationTeamQuota
    v2NamedSchemaDataType:
      type: object
      properties:
        dataType:
          $ref: '#/components/schemas/v2DataType'
        logicalDataType:
          type: string
    v2ObjectStoreLocation:
      type: object
      properties:
        s3:
          $ref: '#/components/schemas/v2S3TargetSpec'
        ibmCos:
          $ref: '#/components/schemas/v2IBMCosTargetSpec'
        prefix:
          type: string
        enableTags:
          type: boolean
        tags:
          type: array
          items:
            $ref: '#/components/schemas/v2ObjectTag'
        partitioningScheme:
          $ref: '#/components/schemas/archivev2PartitioningScheme'
    v2ObjectTag:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    v2OrderActionsRequest:
      type: object
      properties:
        privateActionsOrder:
          type: object
          additionalProperties:
            type: integer
            format: int64
        sharedActionsOrder:
          type: object
          additionalProperties:
            type: integer
            format: int64
    v2OrderActionsResponse:
      type: object
    v2PageRequirement:
      type: object
      properties:
        requirements:
          $ref: '#/components/schemas/v2Requirements'
        passedRequirements:
          type: boolean
    v2Pillar:
      type: string
      enum:
        - PILLAR_UNSPECIFIED
        - PILLAR_METRICS
        - PILLAR_LOGS
        - PILLAR_SPANS
        - PILLAR_BINARY
      default: PILLAR_UNSPECIFIED
    v2Predicate:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/v2PredicateType'
        text:
          type: string
    v2PredicateType:
      type: string
      enum:
        - PREDICATE_TYPE_UNSPECIFIED
        - PREDICATE_TYPE_REGEX
        - PREDICATE_TYPE_DPXL
        - PREDICATE_TYPE_EXACT
      default: PREDICATE_TYPE_UNSPECIFIED
    v2ReplaceActionRequest:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/actionsv2Action'
    v2ReplaceActionResponse:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/actionsv2Action'
    v2ReplaceE2MRequest:
      type: object
      properties:
        e2m:
          $ref: '#/components/schemas/v2E2M'
      description: >-
        This data structure is used to replace an existing event to metric
        definition
      title: Replace E2M Request
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - e2m
    v2ReplaceE2MResponse:
      type: object
      properties:
        e2m:
          $ref: '#/components/schemas/v2E2M'
      description: >-
        This data structure is obtained when replacing an existing event to
        metric definition
      title: Replace E2M Response
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - e2m
    v2ReplaceE2MResponseInternal:
      type: object
      properties:
        e2m:
          $ref: '#/components/schemas/v2E2M'
    v2Requirements:
      type: object
      properties:
        metricExistence:
          type: array
          items:
            $ref: '#/components/schemas/v2MetricExistence'
        metricLabelExistence:
          type: array
          items:
            $ref: '#/components/schemas/v2MetricLabelsExistence'
    v2S3TargetSpec:
      type: object
      properties:
        bucket:
          type: string
          example: bucket
        region:
          type: string
          example: us-west-2
      description: This data structure represents an S3 target.
      title: S3 Target Spec
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - bucket
    v2SPParameters:
      type: object
      properties:
        metadataUrl:
          type: string
          example: https://<...>.okta.com/app/<...>/sso/saml/metadata
        signingCertPem:
          type: string
          example: certificate
        nameIdFormat:
          type: string
          example: name_id
        assertionConsumerServiceUrl:
          type: string
          example: assertion
        binding:
          type: string
          example: binding
      description: This data structure represents the parameters of a SAML service provider
      title: Service Provider Parameters
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - metadataUrl
        - signingCertPem
        - nameIdFormat
        - assertionConsumerServiceUrl
        - binding
    v2SchemaRule:
      type: object
      properties:
        schemaTemplateIds:
          type: array
          items:
            type: string
        dataPillar:
          $ref: '#/components/schemas/v2DataPillar'
    v2ScopesFilter:
      type: object
      properties:
        application:
          type: array
          example: application1
          items:
            type: string
        subsystem:
          type: array
          example: subsystem1
          items:
            type: string
      description: This data structure represents a filter for scopes.
      title: Scopes Filter
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2SetDailyQuotaRequest:
      type: object
      properties:
        teamId:
          $ref: '#/components/schemas/organisationsv2TeamId'
        targetDailyQuota:
          type: number
          format: float
          example: 0.01
      description: This data structure represents a request to set a team's daily quota.
      title: Set Daily Quota Request
      externalDocs:
        description: Find out more about teams
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/teams/#support
      required:
        - teamId
        - targetDailyQuota
    v2SetDailyQuotaResponse:
      type: object
    v2SetExternalTargetResponse:
      type: object
      properties:
        target:
          $ref: '#/components/schemas/coralogixarchivev2Target'
      description: >-
        This data structure is obtained after setting an external storage target
        for logs.
      title: Set Target Response
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - target
    v2SetIDPParametersRequest:
      type: object
      properties:
        teamId:
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/v2IDPParameters'
      description: >-
        This data structure is used to set the parameters of a SAML identity
        provider
      title: Set IDP Parameters Request
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - teamId
        - params
    v2SetIDPParametersResponse:
      type: object
    v2SetSchemaRuleResponse:
      type: object
      properties:
        rule:
          $ref: '#/components/schemas/datasetv2Rule'
    v2SpansAvro:
      type: object
    v2SpansCount:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00.000Z'
        successSpanCount:
          type: string
          format: int64
          example: 100
        errorSpanCount:
          type: string
          format: int64
          example: 10
        lowSuccessSpanCount:
          type: string
          format: int64
          example: 50
        lowErrorSpanCount:
          type: string
          format: int64
          example: 5
      description: This data structure represents a spans count.
      title: Spans Count
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2TargetResponse:
      type: object
      properties:
        companyId:
          type: integer
          format: int64
        target:
          $ref: '#/components/schemas/coralogixarchivev2Target'
        additionalTargetProperties:
          $ref: '#/components/schemas/v2InternalAdditionalTargetProperties'
    v2TargetResponseOrder:
      type: object
      properties:
        orderBy:
          $ref: '#/components/schemas/coralogixarchivev2OrderBy'
        orderDirection:
          $ref: '#/components/schemas/archivev2OrderDirection'
    v2TcoTier:
      type: string
      enum:
        - TCO_TIER_UNSPECIFIED
        - TCO_TIER_LOW
        - TCO_TIER_MEDIUM
        - TCO_TIER_HIGH
        - TCO_TIER_BLOCKED
      default: TCO_TIER_UNSPECIFIED
    v2TimeRange:
      type: object
      properties:
        startTimeSeconds:
          type: string
        endTimeSeconds:
          type: string
    v2Timeframe:
      type: object
      properties:
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    v2UpdateDataUsageMetricsExportStatusRequest:
      type: object
      properties:
        enabled:
          type: boolean
          example: true
      description: This data structure is used to update data usage metrics export status.
      title: Update Data Usage Metrics Export Status Request
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2UpdateDataUsageMetricsExportStatusResponse:
      type: object
      properties:
        enabled:
          type: boolean
          example: true
      description: This data structure is used to return data usage metrics export status.
      title: Update Data Usage Metrics Export Status Response
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2UpdateTeamResponse:
      type: object
    v2ValidateFeatureRequirementsInternalResponse:
      type: object
      properties:
        requirements:
          type: array
          items:
            $ref: '#/components/schemas/v2DataSourceRequirements'
    v2ValidateFeatureRequirementsResponse:
      type: object
      properties:
        requirements:
          type: array
          items:
            $ref: '#/components/schemas/v2DataSourceRequirements'
    v2ValidateTargetRequest:
      type: object
      properties:
        isActive:
          type: boolean
        s3:
          $ref: '#/components/schemas/v2S3TargetSpec'
        ibmCos:
          $ref: '#/components/schemas/v2IBMCosTargetSpec'
      description: This data structure is used to validate a storage target for logs.
      title: Set Target Response
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - isActive
        - target_spec
    v2ValidateTargetResponse:
      type: object
      properties:
        isValid:
          type: boolean
          example: true
      description: >-
        This data structure is obtained after validating a storage target for
        logs.
      title: Validate Target Response
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - isValid
    v2WriteToDatasetMode:
      type: string
      enum:
        - WRITE_TO_DATASET_MODE_UNSPECIFIED
        - WRITE_TO_DATASET_MODE_OVERWRITE
        - WRITE_TO_DATASET_MODE_APPEND
      default: WRITE_TO_DATASET_MODE_UNSPECIFIED
    v3ActivityAnalysis:
      type: object
      properties:
        rules:
          type: array
          example:
            - rule1
            - rule2
          items:
            type: string
        status:
          $ref: '#/components/schemas/v3ActivityAnalysisStatus'
      description: Configuration for activity analysis rules and status
      title: Activity Analysis
      required:
        - rules
        - status
    v3ActivityAnalysisStats:
      type: object
      properties:
        isMutedCount:
          type: integer
          format: int64
        rules:
          type: array
          items:
            type: string
    v3ActivityAnalysisStatus:
      type: string
      enum:
        - ACTIVITY_ANALYSIS_STATUS_ACTIVATE_OR_UNSPECIFIED
        - ACTIVITY_ANALYSIS_STATUS_MUTE
      default: ACTIVITY_ANALYSIS_STATUS_ACTIVATE_OR_UNSPECIFIED
    v3ActivitySchedule:
      type: object
      properties:
        dayOfWeek:
          type: array
          items:
            $ref: '#/components/schemas/v3DayOfWeek'
        startTime:
          $ref: '#/components/schemas/v3TimeOfDay'
        endTime:
          $ref: '#/components/schemas/v3TimeOfDay'
      description: >-
        Defines when an alert should be active based on days of the week and
        time windows
      title: Activity Schedule
      required:
        - dayOfWeek
        - startTime
        - endTime
    v3AlertDef:
      type: object
      properties:
        alertDefProperties:
          $ref: '#/components/schemas/v3AlertDefProperties'
        id:
          type: string
          example: 1
          title: >-
            This is the Alert Definition's Persistent ID (does not change on
            replace) , AKA UniqueIdentifier
        alertVersionId:
          type: string
          title: the old alertId
        createdTime:
          type: string
          format: date-time
        updatedTime:
          type: string
          format: date-time
      description: This data structure represents an alert definition
      title: Alert Definition
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - alertDefProperties
        - id
        - alertVersionId
        - createdTime
        - updatedTime
    v3AlertDefIncidentSettings:
      type: object
      properties:
        minutes:
          type: integer
          format: int64
          example: 10
        notifyOn:
          $ref: '#/components/schemas/v3NotifyOn'
    v3AlertDefNotificationGroup:
      type: object
      properties:
        groupByKeys:
          type: array
          items:
            type: string
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/v3AlertDefWebhooksSettings'
        destinations:
          type: array
          items:
            $ref: '#/components/schemas/v3NotificationDestination'
    v3AlertDefOverride:
      type: object
      properties:
        priority:
          $ref: '#/components/schemas/v3AlertDefPriority'
      description: Override settings for specific alert conditions
      title: Alert Definition Override
    v3AlertDefPriority:
      type: string
      enum:
        - ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED
        - ALERT_DEF_PRIORITY_P4
        - ALERT_DEF_PRIORITY_P3
        - ALERT_DEF_PRIORITY_P2
        - ALERT_DEF_PRIORITY_P1
      default: ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED
    v3AlertDefProperties:
      type: object
      properties:
        name:
          type: string
          example: My Alert
        description:
          type: string
          example: Alert description
        enabled:
          type: boolean
          example: true
        priority:
          $ref: '#/components/schemas/v3AlertDefPriority'
        activeOn:
          $ref: '#/components/schemas/v3ActivitySchedule'
        type:
          $ref: '#/components/schemas/v3AlertDefType'
        logsImmediate:
          $ref: '#/components/schemas/v3LogsImmediateType'
        tracingImmediate:
          $ref: '#/components/schemas/v3TracingImmediateType'
        logsThreshold:
          $ref: '#/components/schemas/v3LogsThresholdType'
        logsRatioThreshold:
          $ref: '#/components/schemas/v3LogsRatioThresholdType'
        logsTimeRelativeThreshold:
          $ref: '#/components/schemas/v3LogsTimeRelativeThresholdType'
        metricThreshold:
          $ref: '#/components/schemas/v3MetricThresholdType'
        tracingThreshold:
          $ref: '#/components/schemas/v3TracingThresholdType'
        flow:
          $ref: '#/components/schemas/v3FlowType'
        logsAnomaly:
          $ref: '#/components/schemas/v3LogsAnomalyType'
        metricAnomaly:
          $ref: '#/components/schemas/v3MetricAnomalyType'
        logsNewValue:
          $ref: '#/components/schemas/v3LogsNewValueType'
        logsUniqueCount:
          $ref: '#/components/schemas/v3LogsUniqueCountType'
        groupByKeys:
          type: array
          items:
            type: string
        incidentsSettings:
          $ref: '#/components/schemas/v3AlertDefIncidentSettings'
        notificationGroup:
          $ref: '#/components/schemas/v3AlertDefNotificationGroup'
        notificationGroupExcess:
          type: array
          items:
            $ref: '#/components/schemas/v3AlertDefNotificationGroup'
        entityLabels:
          type: object
          additionalProperties:
            type: string
        phantomMode:
          type: boolean
        deleted:
          type: boolean
      description: User-configurable properties of an alert definition
      title: Alert Definition Properties
      required:
        - name
        - enabled
        - type
        - type_definition
    v3AlertDefType:
      type: string
      enum:
        - ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED
        - ALERT_DEF_TYPE_LOGS_THRESHOLD
        - ALERT_DEF_TYPE_LOGS_ANOMALY
        - ALERT_DEF_TYPE_LOGS_RATIO_THRESHOLD
        - ALERT_DEF_TYPE_LOGS_NEW_VALUE
        - ALERT_DEF_TYPE_LOGS_UNIQUE_COUNT
        - ALERT_DEF_TYPE_LOGS_TIME_RELATIVE_THRESHOLD
        - ALERT_DEF_TYPE_METRIC_THRESHOLD
        - ALERT_DEF_TYPE_METRIC_ANOMALY
        - ALERT_DEF_TYPE_TRACING_IMMEDIATE
        - ALERT_DEF_TYPE_TRACING_THRESHOLD
        - ALERT_DEF_TYPE_FLOW
      default: ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED
    v3AlertDefWebhooksSettings:
      type: object
      properties:
        minutes:
          type: integer
          format: int64
          example: 10
        notifyOn:
          $ref: '#/components/schemas/v3NotifyOn'
        integration:
          $ref: '#/components/schemas/alertsv3IntegrationType'
    v3AlertEvent:
      type: object
      properties:
        permutationLabels:
          type: object
          additionalProperties:
            type: string
        groupLabels:
          type: object
          additionalProperties:
            type: string
        timestamp:
          type: string
          format: date-time
        alertId:
          type: string
        status:
          $ref: '#/components/schemas/v3AlertStatus'
        preGroupingEventId:
          type: string
        payload:
          type: object
        payloadType:
          type: string
        permutationId:
          type: string
        incidentCorrelationKey:
          type: string
        activityAnalysis:
          $ref: '#/components/schemas/v3ActivityAnalysis'
    v3AlertEventMultiplePermutation:
      type: object
      properties:
        alertEventMultiplePermutation:
          type: array
          items:
            $ref: '#/components/schemas/v3AlertEvent'
    v3AlertEventOrderBy:
      type: object
      properties:
        fieldName:
          $ref: '#/components/schemas/v3OrderByAlertEventFields'
        direction:
          $ref: '#/components/schemas/v3OrderByAlertEventDirection'
    v3AlertStatus:
      type: string
      enum:
        - ALERT_STATUS_RESOLVED_OR_UNSPECIFIED
        - ALERT_STATUS_TRIGGERED
      default: ALERT_STATUS_RESOLVED_OR_UNSPECIFIED
    v3AlertsOp:
      type: string
      enum:
        - ALERTS_OP_AND_OR_UNSPECIFIED
        - ALERTS_OP_OR
      default: ALERTS_OP_AND_OR_UNSPECIFIED
    v3AnomalyAlertSettings:
      type: object
      properties:
        percentageOfDeviation:
          type: number
          format: float
          example: 10
      description: Common settings for anomaly-based alerts
      title: Anomaly Alert Settings
      required:
        - percentageOfDeviation
    v3AutoRetireTimeframe:
      type: string
      enum:
        - AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED
        - AUTO_RETIRE_TIMEFRAME_MINUTES_5
        - AUTO_RETIRE_TIMEFRAME_MINUTES_10
        - AUTO_RETIRE_TIMEFRAME_HOUR_1
        - AUTO_RETIRE_TIMEFRAME_HOURS_2
        - AUTO_RETIRE_TIMEFRAME_HOURS_6
        - AUTO_RETIRE_TIMEFRAME_HOURS_12
        - AUTO_RETIRE_TIMEFRAME_HOURS_24
      default: AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED
    v3CreateAlertDefResponse:
      type: object
      properties:
        alertDef:
          $ref: '#/components/schemas/v3AlertDef'
      description: Response containing the newly created alert definition
      title: Create Alert Definition Response
      required:
        - alertDef
    v3CreateApiKeyRequest:
      type: object
      properties:
        name:
          type: string
          example: my_api_key
        owner:
          $ref: '#/components/schemas/v3Owner'
        keyPermissions:
          $ref: '#/components/schemas/v3CreateApiKeyRequestKeyPermissions'
        hashed:
          type: boolean
          example: true
      description: This data structure is used to create an API key.
      title: Create Api Key Request
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
      required:
        - name
        - owner
        - keyPermissions
        - hashed
    v3CreateApiKeyRequestKeyPermissions:
      type: object
      properties:
        presets:
          type: array
          example:
            - my_preset
          items:
            type: string
        permissions:
          type: array
          example:
            - read_logs
          items:
            type: string
      description: >-
        This data structure allows to specify loose permissions and permission
        presets for an API key.
      title: Key Permissions
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
      required:
        - presets
        - permissions
    v3CreateApiKeyResponse:
      type: object
      properties:
        keyId:
          type: string
          example: my_key_id
        name:
          type: string
          example: my_api_key
        value:
          type: string
          example: my_api_key_value
      description: This data structure is the response obtained when creating an API key.
      title: Create Api Key Response
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
      required:
        - keyId
        - name
        - value
    v3DayOfWeek:
      type: string
      enum:
        - DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED
        - DAY_OF_WEEK_TUESDAY
        - DAY_OF_WEEK_WEDNESDAY
        - DAY_OF_WEEK_THURSDAY
        - DAY_OF_WEEK_FRIDAY
        - DAY_OF_WEEK_SATURDAY
        - DAY_OF_WEEK_SUNDAY
      default: DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED
    v3DeleteAlertDefResponse:
      type: object
      description: Response after deleting an alert definition
      title: Delete Alert Definition Response
    v3DeleteApiKeyResponse:
      type: object
    v3DownloadAlertsResponse:
      type: object
      properties:
        content:
          type: string
          format: byte
      description: Response containing the downloaded alerts data
      title: Download Alerts Response
      required:
        - content
    v3EventStats:
      type: object
      properties:
        count:
          type: integer
          format: int64
        resolvedCount:
          type: integer
          format: int64
        triggeredCount:
          type: integer
          format: int64
        triggeredPermutationsSamples:
          type: array
          items:
            $ref: '#/components/schemas/v3Permutation'
        resolvedPermutationsSamples:
          type: array
          items:
            $ref: '#/components/schemas/v3Permutation'
        activityAnalysisStats:
          $ref: '#/components/schemas/v3ActivityAnalysisStats'
    v3FlowStages:
      type: object
      properties:
        flowStagesGroups:
          $ref: '#/components/schemas/v3FlowStagesGroups'
        timeframeMs:
          type: string
          format: int64
          example: 60000
        timeframeType:
          $ref: '#/components/schemas/v3TimeframeType'
      description: Defines stages in a flow alert
      title: Flow Stages
      required:
        - flow_stages
        - timeframeMs
    v3FlowStagesGroup:
      type: object
      properties:
        alertDefs:
          type: array
          items:
            $ref: '#/components/schemas/v3FlowStagesGroupsAlertDefs'
        nextOp:
          $ref: '#/components/schemas/v3NextOp'
        alertsOp:
          $ref: '#/components/schemas/v3AlertsOp'
    v3FlowStagesGroups:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/v3FlowStagesGroup'
      description: Groups of stages in a flow alert
      title: Flow Stages Groups
      required:
        - groups
    v3FlowStagesGroupsAlertDefs:
      type: object
      properties:
        id:
          type: string
          example: 1
        not:
          type: boolean
          example: true
      description: Alert definitions for a flow stage group
      title: Flow Stages Groups Alert Defs
      required:
        - id
        - not
    v3FlowType:
      type: object
      properties:
        stages:
          type: array
          items:
            $ref: '#/components/schemas/v3FlowStages'
        enforceSuppression:
          type: boolean
          example: true
      description: Configuration for flow-based alerts with multiple stages
      title: Flow Alert Type
      required:
        - stages
    v3GetAlertDefByVersionIdInternalResponse:
      type: object
      properties:
        alertDef:
          $ref: '#/components/schemas/v3AlertDef'
    v3GetAlertDefByVersionIdResponse:
      type: object
      properties:
        alertDef:
          $ref: '#/components/schemas/v3AlertDef'
      description: Response containing the alert definition for the requested version
      title: Get Alert Definition By Version ID Response
      required:
        - alertDef
    v3GetAlertDefResponse:
      type: object
      properties:
        alertDef:
          $ref: '#/components/schemas/v3AlertDef'
      description: Response containing the requested alert definition
      title: Get Alert Definition Response
      required:
        - alertDef
    v3GetAlertEventResponse:
      type: object
      properties:
        id:
          type: string
        singlePermutation:
          $ref: '#/components/schemas/v3AlertEvent'
        multiplePermutation:
          $ref: '#/components/schemas/v3AlertEventMultiplePermutation'
        pagination:
          $ref: '#/components/schemas/v3PaginationResponse'
    v3GetAlertEventStatsResponse:
      type: object
      properties:
        eventsStats:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v3EventStats'
    v3GetApiKeyResponse:
      type: object
      properties:
        keyInfo:
          $ref: '#/components/schemas/v3KeyInfo'
      description: This data structure is the response obtained when retrieving an API key.
      title: Get Api Key Response
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
      required:
        - keyInfo
    v3GetSendDataApiKeysResponse:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/v3KeyInfo'
      description: This data structure is the response obtained when retrieving an API key.
      title: Get Api Key Response
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
      required:
        - key_info
    v3KeyInfo:
      type: object
      properties:
        name:
          type: string
          example: my_api_key
        owner:
          $ref: '#/components/schemas/v3Owner'
        active:
          type: boolean
          example: true
        hashed:
          type: boolean
          example: true
        keyPermissions:
          $ref: '#/components/schemas/v3KeyInfoKeyPermissions'
        value:
          type: string
        id:
          type: string
      description: >-
        This data structure represents the information associated with an API
        key.
      title: Key Info
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
      required:
        - id
        - name
        - owner
        - active
        - hashed
        - keyPermissions
    v3KeyInfoKeyPermissions:
      type: object
      properties:
        presets:
          type: array
          items:
            $ref: '#/components/schemas/v3PresetInfo'
        permissions:
          type: array
          items:
            type: string
      description: This data structure represents the permissions on an API key.
      title: Key Permissions
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
      required:
        - presets
        - permissions
    v3LabelFilterType:
      type: object
      properties:
        value:
          type: string
        operation:
          $ref: '#/components/schemas/v3LogFilterOperationType'
    v3LabelFilters:
      type: object
      properties:
        applicationName:
          type: array
          items:
            $ref: '#/components/schemas/v3LabelFilterType'
        subsystemName:
          type: array
          items:
            $ref: '#/components/schemas/v3LabelFilterType'
        severities:
          type: array
          items:
            $ref: '#/components/schemas/v3LogSeverity'
      description: Filters for application name, subsystem name, and log severities
      title: Label Filters
    v3ListAlertDefsResponse:
      type: object
      properties:
        alertDefs:
          type: array
          items:
            $ref: '#/components/schemas/v3AlertDef'
      description: Response containing a list of alert definitions
      title: List Alert Definitions Response
      required:
        - alertDefs
    v3LogFilterOperationType:
      type: string
      enum:
        - LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED
        - LOG_FILTER_OPERATION_TYPE_INCLUDES
        - LOG_FILTER_OPERATION_TYPE_ENDS_WITH
        - LOG_FILTER_OPERATION_TYPE_STARTS_WITH
      default: LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED
    v3LogSeverity:
      type: string
      enum:
        - LOG_SEVERITY_VERBOSE_UNSPECIFIED
        - LOG_SEVERITY_DEBUG
        - LOG_SEVERITY_INFO
        - LOG_SEVERITY_WARNING
        - LOG_SEVERITY_ERROR
        - LOG_SEVERITY_CRITICAL
      default: LOG_SEVERITY_VERBOSE_UNSPECIFIED
    v3LogsAnomalyCondition:
      type: object
      properties:
        minimumThreshold:
          type: number
          format: double
          example: 10
        timeWindow:
          $ref: '#/components/schemas/v3LogsTimeWindow'
        conditionType:
          $ref: '#/components/schemas/v3LogsAnomalyConditionType'
      description: Defines conditions for detecting log anomalies
      title: Logs Anomaly Condition
      required:
        - minimumThreshold
        - timeWindow
    v3LogsAnomalyConditionType:
      type: string
      enum:
        - LOGS_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED
      default: LOGS_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED
    v3LogsAnomalyRule:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/v3LogsAnomalyCondition'
      description: Defines a rule for detecting log anomalies
      title: Logs Anomaly Rule
      required:
        - condition
    v3LogsAnomalyType:
      type: object
      properties:
        logsFilter:
          $ref: '#/components/schemas/alertsv3LogsFilter'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v3LogsAnomalyRule'
        notificationPayloadFilter:
          type: array
          example: text
          items:
            type: string
        evaluationDelayMs:
          type: integer
          format: int32
          example: 60000
        anomalyAlertSettings:
          $ref: '#/components/schemas/v3AnomalyAlertSettings'
      description: Configuration for alerts triggered by anomalous log patterns
      title: Logs Anomaly Alert Type
      required:
        - logsFilter
        - rules
    v3LogsImmediateType:
      type: object
      properties:
        logsFilter:
          $ref: '#/components/schemas/alertsv3LogsFilter'
        notificationPayloadFilter:
          type: array
          example: text
          items:
            type: string
      description: >-
        Configuration for immediate alerts triggered on log entries matching
        specific filters
      title: Logs Immediate Alert Type
      required:
        - logsFilter
    v3LogsNewValueCondition:
      type: object
      properties:
        keypathToTrack:
          type: string
          example: metadata.field
        timeWindow:
          $ref: '#/components/schemas/v3LogsNewValueTimeWindow'
      description: Defines conditions for detecting new values in logs
      title: Logs New Value Condition
      required:
        - keypathToTrack
        - timeWindow
    v3LogsNewValueRule:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/v3LogsNewValueCondition'
    v3LogsNewValueTimeWindow:
      type: object
      properties:
        logsNewValueTimeWindowSpecificValue:
          $ref: '#/components/schemas/v3LogsNewValueTimeWindowValue'
      description: Time window configuration for new value alerts
      title: Logs New Value Time Window
      required:
        - type
    v3LogsNewValueTimeWindowValue:
      type: string
      enum:
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_12_OR_UNSPECIFIED
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_24
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_48
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_72
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_WEEK_1
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_MONTH_1
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_MONTHS_2
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_MONTHS_3
      default: LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_12_OR_UNSPECIFIED
    v3LogsNewValueType:
      type: object
      properties:
        logsFilter:
          $ref: '#/components/schemas/alertsv3LogsFilter'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v3LogsNewValueRule'
        notificationPayloadFilter:
          type: array
          example: text
          items:
            type: string
      description: Configuration for alerts triggered by new values appearing in logs
      title: Logs New Value Alert Type
      required:
        - logsFilter
        - rules
    v3LogsRatioCondition:
      type: object
      properties:
        threshold:
          type: number
          format: double
          example: 10
        timeWindow:
          $ref: '#/components/schemas/v3LogsRatioTimeWindow'
        conditionType:
          $ref: '#/components/schemas/v3LogsRatioConditionType'
      description: Defines conditions for ratio-based alerts
      title: Logs Ratio Condition
      required:
        - threshold
        - timeWindow
    v3LogsRatioConditionType:
      type: string
      enum:
        - LOGS_RATIO_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
        - LOGS_RATIO_CONDITION_TYPE_LESS_THAN
      default: LOGS_RATIO_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
    v3LogsRatioGroupByFor:
      type: string
      enum:
        - LOGS_RATIO_GROUP_BY_FOR_BOTH_OR_UNSPECIFIED
        - LOGS_RATIO_GROUP_BY_FOR_NUMERATOR_ONLY
        - LOGS_RATIO_GROUP_BY_FOR_DENUMERATOR_ONLY
      default: LOGS_RATIO_GROUP_BY_FOR_BOTH_OR_UNSPECIFIED
    v3LogsRatioRules:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/v3LogsRatioCondition'
        override:
          $ref: '#/components/schemas/v3AlertDefOverride'
    v3LogsRatioThresholdType:
      type: object
      properties:
        numerator:
          $ref: '#/components/schemas/alertsv3LogsFilter'
        numeratorAlias:
          type: string
          example: numerator_alias
        denominator:
          $ref: '#/components/schemas/alertsv3LogsFilter'
        denominatorAlias:
          type: string
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v3LogsRatioRules'
        notificationPayloadFilter:
          type: array
          example: text
          items:
            type: string
        groupByFor:
          $ref: '#/components/schemas/v3LogsRatioGroupByFor'
        undetectedValuesManagement:
          $ref: '#/components/schemas/v3UndetectedValuesManagement'
        ignoreInfinity:
          type: boolean
          example: true
        evaluationDelayMs:
          type: integer
          format: int32
          example: 60000
      description: Configuration for alerts based on the ratio between two log queries
      title: Logs Ratio Threshold Alert Type
      required:
        - numerator
        - denominator
        - rules
    v3LogsRatioTimeWindow:
      type: object
      properties:
        logsRatioTimeWindowSpecificValue:
          $ref: '#/components/schemas/v3LogsRatioTimeWindowValue'
      description: Time window configuration for ratio alerts
      title: Logs Ratio Time Window
      required:
        - type
    v3LogsRatioTimeWindowValue:
      type: string
      enum:
        - LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED
        - LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_10
        - LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_15
        - LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_30
        - LOGS_RATIO_TIME_WINDOW_VALUE_HOUR_1
        - LOGS_RATIO_TIME_WINDOW_VALUE_HOURS_2
        - LOGS_RATIO_TIME_WINDOW_VALUE_HOURS_4
        - LOGS_RATIO_TIME_WINDOW_VALUE_HOURS_6
        - LOGS_RATIO_TIME_WINDOW_VALUE_HOURS_12
        - LOGS_RATIO_TIME_WINDOW_VALUE_HOURS_24
        - LOGS_RATIO_TIME_WINDOW_VALUE_HOURS_36
      default: LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED
    v3LogsSimpleFilter:
      type: object
      properties:
        luceneQuery:
          type: string
        labelFilters:
          $ref: '#/components/schemas/v3LabelFilters'
      description: Basic filter configuration using Lucene query and label filters
      title: Simple Logs Filter
    v3LogsThresholdCondition:
      type: object
      properties:
        threshold:
          type: number
          format: double
          example: 100
        timeWindow:
          $ref: '#/components/schemas/v3LogsTimeWindow'
        conditionType:
          $ref: '#/components/schemas/v3LogsThresholdConditionType'
    v3LogsThresholdConditionType:
      type: string
      enum:
        - LOGS_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
        - LOGS_THRESHOLD_CONDITION_TYPE_LESS_THAN
      default: LOGS_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
    v3LogsThresholdRule:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/v3LogsThresholdCondition'
        override:
          $ref: '#/components/schemas/v3AlertDefOverride'
    v3LogsThresholdType:
      type: object
      properties:
        logsFilter:
          $ref: '#/components/schemas/alertsv3LogsFilter'
        undetectedValuesManagement:
          $ref: '#/components/schemas/v3UndetectedValuesManagement'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v3LogsThresholdRule'
        notificationPayloadFilter:
          type: array
          example: text
          items:
            type: string
        evaluationDelayMs:
          type: integer
          format: int32
          example: 60000
      description: >-
        Configuration for alerts triggered when log counts exceed or fall below
        specified thresholds
      title: Logs Threshold Alert Type
      required:
        - logsFilter
        - rules
    v3LogsTimeRelativeComparedTo:
      type: string
      enum:
        - LOGS_TIME_RELATIVE_COMPARED_TO_PREVIOUS_HOUR_OR_UNSPECIFIED
        - LOGS_TIME_RELATIVE_COMPARED_TO_SAME_HOUR_YESTERDAY
        - LOGS_TIME_RELATIVE_COMPARED_TO_SAME_HOUR_LAST_WEEK
        - LOGS_TIME_RELATIVE_COMPARED_TO_YESTERDAY
        - LOGS_TIME_RELATIVE_COMPARED_TO_SAME_DAY_LAST_WEEK
        - LOGS_TIME_RELATIVE_COMPARED_TO_SAME_DAY_LAST_MONTH
      default: LOGS_TIME_RELATIVE_COMPARED_TO_PREVIOUS_HOUR_OR_UNSPECIFIED
    v3LogsTimeRelativeCondition:
      type: object
      properties:
        threshold:
          type: number
          format: double
          example: 10
        comparedTo:
          $ref: '#/components/schemas/v3LogsTimeRelativeComparedTo'
        conditionType:
          $ref: '#/components/schemas/v3LogsTimeRelativeConditionType'
      description: Defines conditions for time-relative comparison alerts
      title: Logs Time Relative Condition
      required:
        - threshold
        - comparedTo
    v3LogsTimeRelativeConditionType:
      type: string
      enum:
        - LOGS_TIME_RELATIVE_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
        - LOGS_TIME_RELATIVE_CONDITION_TYPE_LESS_THAN
      default: LOGS_TIME_RELATIVE_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
    v3LogsTimeRelativeRule:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/v3LogsTimeRelativeCondition'
        override:
          $ref: '#/components/schemas/v3AlertDefOverride'
    v3LogsTimeRelativeThresholdType:
      type: object
      properties:
        logsFilter:
          $ref: '#/components/schemas/alertsv3LogsFilter'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v3LogsTimeRelativeRule'
        ignoreInfinity:
          type: boolean
          example: true
        notificationPayloadFilter:
          type: array
          example: text
          items:
            type: string
        undetectedValuesManagement:
          $ref: '#/components/schemas/v3UndetectedValuesManagement'
        evaluationDelayMs:
          type: integer
          format: int32
          example: 60000
      description: >-
        Configuration for alerts comparing log counts between different time
        periods
      title: Logs Time Relative Threshold Alert Type
      required:
        - logsFilter
        - rules
    v3LogsTimeWindow:
      type: object
      properties:
        logsTimeWindowSpecificValue:
          $ref: '#/components/schemas/v3LogsTimeWindowValue'
      description: Time window configuration for log-based alerts
      title: Logs Time Window
      required:
        - type
    v3LogsTimeWindowValue:
      type: string
      enum:
        - LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED
        - LOGS_TIME_WINDOW_VALUE_MINUTES_10
        - LOGS_TIME_WINDOW_VALUE_MINUTES_20
        - LOGS_TIME_WINDOW_VALUE_MINUTES_15
        - LOGS_TIME_WINDOW_VALUE_MINUTES_30
        - LOGS_TIME_WINDOW_VALUE_HOUR_1
        - LOGS_TIME_WINDOW_VALUE_HOURS_2
        - LOGS_TIME_WINDOW_VALUE_HOURS_4
        - LOGS_TIME_WINDOW_VALUE_HOURS_6
        - LOGS_TIME_WINDOW_VALUE_HOURS_12
        - LOGS_TIME_WINDOW_VALUE_HOURS_24
        - LOGS_TIME_WINDOW_VALUE_HOURS_36
      default: LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED
    v3LogsUniqueCountCondition:
      type: object
      properties:
        maxUniqueCount:
          type: string
          format: int64
        timeWindow:
          $ref: '#/components/schemas/v3LogsUniqueValueTimeWindow'
      description: Defines conditions for unique count alerts
      title: Logs Unique Count Condition
      required:
        - maxUniqueCount
        - timeWindow
    v3LogsUniqueCountRule:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/v3LogsUniqueCountCondition'
    v3LogsUniqueCountType:
      type: object
      properties:
        logsFilter:
          $ref: '#/components/schemas/alertsv3LogsFilter'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v3LogsUniqueCountRule'
        notificationPayloadFilter:
          type: array
          example: text
          items:
            type: string
        maxUniqueCountPerGroupByKey:
          type: string
          format: int64
          example: 100
        uniqueCountKeypath:
          type: string
          example: unique_count
      description: Configuration for alerts based on unique value counts in logs
      title: Logs Unique Count Alert Type
      required:
        - logsFilter
        - rules
        - uniqueCountKeypath
    v3LogsUniqueValueTimeWindow:
      type: object
      properties:
        logsUniqueValueTimeWindowSpecificValue:
          $ref: '#/components/schemas/v3LogsUniqueValueTimeWindowValue'
    v3LogsUniqueValueTimeWindowValue:
      type: string
      enum:
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTE_1_OR_UNSPECIFIED
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_5
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_10
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_15
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_20
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_30
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_1
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_2
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_4
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_6
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_12
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_24
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_36
      default: LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTE_1_OR_UNSPECIFIED
    v3MetricAnomalyCondition:
      type: object
      properties:
        threshold:
          type: number
          format: double
          example: 10
        forOverPct:
          type: integer
          format: int64
          example: 10
        ofTheLast:
          $ref: '#/components/schemas/v3MetricTimeWindow'
        minNonNullValuesPct:
          type: integer
          format: int64
          example: 10
        conditionType:
          $ref: '#/components/schemas/v3MetricAnomalyConditionType'
      description: Defines conditions for detecting metric anomalies
      title: Metric Anomaly Condition
      required:
        - minimum_threshold
        - time_window
    v3MetricAnomalyConditionType:
      type: string
      enum:
        - METRIC_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED
        - METRIC_ANOMALY_CONDITION_TYPE_LESS_THAN_USUAL
      default: METRIC_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED
    v3MetricAnomalyRule:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/v3MetricAnomalyCondition'
    v3MetricAnomalyType:
      type: object
      properties:
        metricFilter:
          $ref: '#/components/schemas/v3MetricFilter'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v3MetricAnomalyRule'
        evaluationDelayMs:
          type: integer
          format: int32
          example: 60000
        anomalyAlertSettings:
          $ref: '#/components/schemas/v3AnomalyAlertSettings'
      description: Configuration for alerts triggered by anomalous metric patterns
      title: Metric Anomaly Alert Type
      required:
        - metric_source
        - rules
    v3MetricFilter:
      type: object
      properties:
        promql:
          type: string
    v3MetricMissingValues:
      type: object
      properties:
        replaceWithZero:
          type: boolean
        minNonNullValuesPct:
          type: integer
          format: int64
    v3MetricThresholdCondition:
      type: object
      properties:
        threshold:
          type: number
          format: double
        forOverPct:
          type: integer
          format: int64
        ofTheLast:
          $ref: '#/components/schemas/v3MetricTimeWindow'
        conditionType:
          $ref: '#/components/schemas/v3MetricThresholdConditionType'
      description: Defines conditions for metric threshold alerts
      title: Metric Threshold Condition
      required:
        - threshold
        - time_window
    v3MetricThresholdConditionType:
      type: string
      enum:
        - METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
        - METRIC_THRESHOLD_CONDITION_TYPE_LESS_THAN
        - METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_EQUALS
        - METRIC_THRESHOLD_CONDITION_TYPE_LESS_THAN_OR_EQUALS
      default: METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
    v3MetricThresholdRule:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/v3MetricThresholdCondition'
        override:
          $ref: '#/components/schemas/v3AlertDefOverride'
    v3MetricThresholdType:
      type: object
      properties:
        metricFilter:
          $ref: '#/components/schemas/v3MetricFilter'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v3MetricThresholdRule'
        undetectedValuesManagement:
          $ref: '#/components/schemas/v3UndetectedValuesManagement'
        missingValues:
          $ref: '#/components/schemas/v3MetricMissingValues'
        evaluationDelayMs:
          type: integer
          format: int32
      description: Configuration for alerts based on metric threshold violations
      title: Metric Threshold Alert Type
      required:
        - metric_source
        - rules
    v3MetricTimeWindow:
      type: object
      properties:
        metricTimeWindowSpecificValue:
          $ref: '#/components/schemas/v3MetricTimeWindowValue'
    v3MetricTimeWindowValue:
      type: string
      enum:
        - METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED
        - METRIC_TIME_WINDOW_VALUE_MINUTES_5
        - METRIC_TIME_WINDOW_VALUE_MINUTES_10
        - METRIC_TIME_WINDOW_VALUE_MINUTES_15
        - METRIC_TIME_WINDOW_VALUE_MINUTES_20
        - METRIC_TIME_WINDOW_VALUE_MINUTES_30
        - METRIC_TIME_WINDOW_VALUE_HOUR_1
        - METRIC_TIME_WINDOW_VALUE_HOURS_2
        - METRIC_TIME_WINDOW_VALUE_HOURS_4
        - METRIC_TIME_WINDOW_VALUE_HOURS_6
        - METRIC_TIME_WINDOW_VALUE_HOURS_12
        - METRIC_TIME_WINDOW_VALUE_HOURS_24
        - METRIC_TIME_WINDOW_VALUE_HOURS_36
      default: METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED
    v3NextOp:
      type: string
      enum:
        - NEXT_OP_AND_OR_UNSPECIFIED
        - NEXT_OP_OR
      default: NEXT_OP_AND_OR_UNSPECIFIED
    v3NotificationDestination:
      type: object
      properties:
        connectorId:
          type: string
        presetId:
          type: string
        notifyOn:
          $ref: '#/components/schemas/v3NotifyOn'
        triggeredRoutingOverrides:
          $ref: '#/components/schemas/v3NotificationRouting'
        resolvedRouteOverrides:
          $ref: '#/components/schemas/v3NotificationRouting'
      description: Configuration for where alert notifications should be sent
      title: Notification Destination
      required:
        - destination
    v3NotificationRouting:
      type: object
      properties:
        configOverrides:
          $ref: '#/components/schemas/alertsv3SourceOverrides'
    v3NotifyOn:
      type: string
      enum:
        - NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED
        - NOTIFY_ON_TRIGGERED_AND_RESOLVED
      default: NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED
    v3OrderByAlertEventDirection:
      type: string
      enum:
        - ORDER_BY_ALERT_EVENT_DIRECTION_UNSPECIFIED
        - ORDER_BY_ALERT_EVENT_DIRECTION_ASC
        - ORDER_BY_ALERT_EVENT_DIRECTION_DESC
      default: ORDER_BY_ALERT_EVENT_DIRECTION_UNSPECIFIED
    v3OrderByAlertEventFields:
      type: string
      enum:
        - ORDER_BY_ALERT_EVENT_FIELDS_UNSPECIFIED
        - ORDER_BY_ALERT_EVENT_FIELDS_TIMESTAMP
      default: ORDER_BY_ALERT_EVENT_FIELDS_UNSPECIFIED
    v3Owner:
      type: object
      properties:
        userId:
          type: string
        teamId:
          type: integer
          format: int64
        organisationId:
          type: string
    v3PaginationRequest:
      type: object
      properties:
        pageSize:
          type: integer
          format: int64
        pageToken:
          type: string
    v3PaginationResponse:
      type: object
      properties:
        totalSize:
          type: integer
          format: int64
        nextPageToken:
          type: string
    v3Permutation:
      type: object
      properties:
        permutationLabels:
          type: object
          additionalProperties:
            type: string
    v3PresetInfo:
      type: object
      properties:
        name:
          type: string
          example: my_preset
        permissions:
          type: array
          example:
            - read_logs
          items:
            type: string
      description: >-
        This data structure represents a preset set of permissions on an API
        key.
      title: Preset Info
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
      required:
        - name
        - permissions
    v3Recipients:
      type: object
      properties:
        emails:
          type: array
          items:
            type: string
    v3ReplaceAlertDefRequest:
      type: object
      properties:
        alertDefProperties:
          $ref: '#/components/schemas/v3AlertDefProperties'
        id:
          type: string
          example: alert-123
      description: Request to replace an existing alert definition
      title: Replace Alert Definition Request
      required:
        - alertDefProperties
        - id
    v3ReplaceAlertDefResponse:
      type: object
      properties:
        alertDef:
          $ref: '#/components/schemas/v3AlertDef'
      description: Response containing the replaced alert definition
      title: Replace Alert Definition Response
      required:
        - alertDef
    v3TimeOfDay:
      type: object
      properties:
        hours:
          type: integer
          format: int32
          example: 14
          description: Hours of day in 24 hour format. Should be from 0 to 23.
        minutes:
          type: integer
          format: int32
          example: 30
          description: Minutes of hour of day. Must be from 0 to 59.
      description: Represents a specific time in 24-hour format
      title: Time of Day
      required:
        - hours
        - minutes
    v3TimeframeType:
      type: string
      enum:
        - TIMEFRAME_TYPE_UNSPECIFIED
        - TIMEFRAME_TYPE_UP_TO
      default: TIMEFRAME_TYPE_UNSPECIFIED
    v3TracingFilter:
      type: object
      properties:
        simpleFilter:
          $ref: '#/components/schemas/v3TracingSimpleFilter'
    v3TracingFilterOperationType:
      type: string
      enum:
        - TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED
        - TRACING_FILTER_OPERATION_TYPE_INCLUDES
        - TRACING_FILTER_OPERATION_TYPE_ENDS_WITH
        - TRACING_FILTER_OPERATION_TYPE_STARTS_WITH
        - TRACING_FILTER_OPERATION_TYPE_IS_NOT
      default: TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED
    v3TracingFilterType:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
        operation:
          $ref: '#/components/schemas/v3TracingFilterOperationType'
    v3TracingImmediateType:
      type: object
      properties:
        tracingFilter:
          $ref: '#/components/schemas/v3TracingFilter'
        notificationPayloadFilter:
          type: array
          items:
            type: string
      description: Configuration for immediate alerts triggered on trace entries
      title: Tracing Immediate Alert Type
      required:
        - tracingFilter
    v3TracingLabelFilters:
      type: object
      properties:
        applicationName:
          type: array
          items:
            $ref: '#/components/schemas/v3TracingFilterType'
        subsystemName:
          type: array
          items:
            $ref: '#/components/schemas/v3TracingFilterType'
        serviceName:
          type: array
          items:
            $ref: '#/components/schemas/v3TracingFilterType'
        operationName:
          type: array
          items:
            $ref: '#/components/schemas/v3TracingFilterType'
        spanFields:
          type: array
          items:
            $ref: '#/components/schemas/v3TracingSpanFieldsFilterType'
    v3TracingSimpleFilter:
      type: object
      properties:
        tracingLabelFilters:
          $ref: '#/components/schemas/v3TracingLabelFilters'
        latencyThresholdMs:
          type: string
          format: uint64
    v3TracingSpanFieldsFilterType:
      type: object
      properties:
        key:
          type: string
        filterType:
          $ref: '#/components/schemas/v3TracingFilterType'
    v3TracingThresholdCondition:
      type: object
      properties:
        spanAmount:
          type: number
          format: double
        timeWindow:
          $ref: '#/components/schemas/v3TracingTimeWindow'
        conditionType:
          $ref: '#/components/schemas/v3TracingThresholdConditionType'
      description: Defines conditions for trace threshold alerts
      title: Tracing Threshold Condition
      required:
        - threshold
        - timeWindow
    v3TracingThresholdConditionType:
      type: string
      enum:
        - TRACING_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
      default: TRACING_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
    v3TracingThresholdRule:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/v3TracingThresholdCondition'
    v3TracingThresholdType:
      type: object
      properties:
        tracingFilter:
          $ref: '#/components/schemas/v3TracingFilter'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v3TracingThresholdRule'
        notificationPayloadFilter:
          type: array
          items:
            type: string
      description: Configuration for alerts based on trace count thresholds
      title: Tracing Threshold Alert Type
      required:
        - tracingFilter
        - rules
    v3TracingTimeWindow:
      type: object
      properties:
        tracingTimeWindowValue:
          $ref: '#/components/schemas/v3TracingTimeWindowValue'
    v3TracingTimeWindowValue:
      type: string
      enum:
        - TRACING_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED
        - TRACING_TIME_WINDOW_VALUE_MINUTES_10
        - TRACING_TIME_WINDOW_VALUE_MINUTES_15
        - TRACING_TIME_WINDOW_VALUE_MINUTES_20
        - TRACING_TIME_WINDOW_VALUE_MINUTES_30
        - TRACING_TIME_WINDOW_VALUE_HOUR_1
        - TRACING_TIME_WINDOW_VALUE_HOURS_2
        - TRACING_TIME_WINDOW_VALUE_HOURS_4
        - TRACING_TIME_WINDOW_VALUE_HOURS_6
        - TRACING_TIME_WINDOW_VALUE_HOURS_12
        - TRACING_TIME_WINDOW_VALUE_HOURS_24
        - TRACING_TIME_WINDOW_VALUE_HOURS_36
      default: TRACING_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED
    v3UndetectedValuesManagement:
      type: object
      properties:
        triggerUndetectedValues:
          type: boolean
        autoRetireTimeframe:
          $ref: '#/components/schemas/v3AutoRetireTimeframe'
      description: Configuration for handling undetected values in alerts
      title: Undetected Values Management
      required:
        - auto_retire_ratio
    v3UpdateApiKeyResponse:
      type: object
    widgetsBarChart:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/widgetsBarChartQuery'
        maxBarsPerChart:
          type: integer
          format: int32
        groupNameTemplate:
          type: string
        stackDefinition:
          $ref: '#/components/schemas/widgetsBarChartStackDefinition'
        scaleType:
          $ref: '#/components/schemas/commonScaleType'
        colorsBy:
          $ref: '#/components/schemas/commonColorsBy'
        xAxis:
          $ref: '#/components/schemas/BarChartXAxis'
        unit:
          $ref: '#/components/schemas/widgetscommonUnit'
        sortBy:
          $ref: '#/components/schemas/commonSortByType'
        colorScheme:
          type: string
        dataModeType:
          $ref: '#/components/schemas/commonDataModeType'
        barValueDisplay:
          $ref: '#/components/schemas/widgetsBarValueDisplay'
        customUnit:
          type: string
        decimal:
          type: integer
          format: int32
        legend:
          $ref: '#/components/schemas/commonLegend'
    widgetsBarChartDataprimeQuery:
      type: object
      properties:
        dataprimeQuery:
          $ref: '#/components/schemas/v1commonDataprimeQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterSource'
        groupNames:
          type: array
          items:
            type: string
        stackedGroupName:
          type: string
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsBarChartLogsQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        aggregation:
          $ref: '#/components/schemas/commonLogsAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterLogsFilter'
        groupNames:
          type: array
          items:
            type: string
        stackedGroupName:
          type: string
        groupNamesFields:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
        stackedGroupNameField:
          $ref: '#/components/schemas/commonObservationField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsBarChartMetricsQuery:
      type: object
      properties:
        promqlQuery:
          $ref: '#/components/schemas/astwidgetscommonPromQlQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterMetricsFilter'
        groupNames:
          type: array
          items:
            type: string
        stackedGroupName:
          type: string
        editorMode:
          $ref: '#/components/schemas/commonMetricsQueryEditorMode'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
        promqlQueryType:
          $ref: '#/components/schemas/commonPromQLQueryType'
        aggregation:
          $ref: '#/components/schemas/widgetscommonAggregation'
    widgetsBarChartQuery:
      type: object
      properties:
        logs:
          $ref: '#/components/schemas/widgetsBarChartLogsQuery'
        spans:
          $ref: '#/components/schemas/widgetsBarChartSpansQuery'
        metrics:
          $ref: '#/components/schemas/widgetsBarChartMetricsQuery'
        dataprime:
          $ref: '#/components/schemas/widgetsBarChartDataprimeQuery'
    widgetsBarChartSpansQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        aggregation:
          $ref: '#/components/schemas/commonSpansAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterSpansFilter'
        groupNames:
          type: array
          items:
            $ref: '#/components/schemas/commonSpanField'
        stackedGroupName:
          $ref: '#/components/schemas/commonSpanField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsBarChartStackDefinition:
      type: object
      properties:
        maxSlicesPerBar:
          type: integer
          format: int32
        stackNameTemplate:
          type: string
    widgetsBarValueDisplay:
      type: string
      enum:
        - BAR_VALUE_DISPLAY_UNSPECIFIED
        - BAR_VALUE_DISPLAY_TOP
        - BAR_VALUE_DISPLAY_INSIDE
        - BAR_VALUE_DISPLAY_BOTH
      default: BAR_VALUE_DISPLAY_UNSPECIFIED
    widgetsDataTable:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/widgetsDataTableQuery'
        resultsPerPage:
          type: integer
          format: int32
        rowStyle:
          $ref: '#/components/schemas/widgetsRowStyle'
        columns:
          type: array
          items:
            $ref: '#/components/schemas/widgetsDataTableColumn'
        orderBy:
          $ref: '#/components/schemas/commonOrderingField'
        dataModeType:
          $ref: '#/components/schemas/commonDataModeType'
    widgetsDataTableColumn:
      type: object
      properties:
        field:
          type: string
        width:
          type: integer
          format: int32
    widgetsDataTableDataprimeQuery:
      type: object
      properties:
        dataprimeQuery:
          $ref: '#/components/schemas/v1commonDataprimeQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterSource'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsDataTableLogsQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterLogsFilter'
        grouping:
          $ref: '#/components/schemas/DataTableLogsQueryGrouping'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsDataTableMetricsQuery:
      type: object
      properties:
        promqlQuery:
          $ref: '#/components/schemas/astwidgetscommonPromQlQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterMetricsFilter'
        editorMode:
          $ref: '#/components/schemas/commonMetricsQueryEditorMode'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
        promqlQueryType:
          $ref: '#/components/schemas/commonPromQLQueryType'
    widgetsDataTableQuery:
      type: object
      properties:
        logs:
          $ref: '#/components/schemas/widgetsDataTableLogsQuery'
        spans:
          $ref: '#/components/schemas/widgetsDataTableSpansQuery'
        metrics:
          $ref: '#/components/schemas/widgetsDataTableMetricsQuery'
        dataprime:
          $ref: '#/components/schemas/widgetsDataTableDataprimeQuery'
    widgetsDataTableSpansQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterSpansFilter'
        grouping:
          $ref: '#/components/schemas/DataTableSpansQueryGrouping'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsGaugeAggregation:
      type: string
      enum:
        - AGGREGATION_UNSPECIFIED
        - AGGREGATION_LAST
        - AGGREGATION_MIN
        - AGGREGATION_MAX
        - AGGREGATION_AVG
        - AGGREGATION_SUM
      default: AGGREGATION_UNSPECIFIED
    widgetsGaugeDataprimeQuery:
      type: object
      properties:
        dataprimeQuery:
          $ref: '#/components/schemas/v1commonDataprimeQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterSource'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsGaugeLogsQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        logsAggregation:
          $ref: '#/components/schemas/commonLogsAggregation'
        aggregation:
          $ref: '#/components/schemas/widgetsGaugeAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterLogsFilter'
        groupBy:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsGaugeMetricsQuery:
      type: object
      properties:
        promqlQuery:
          $ref: '#/components/schemas/astwidgetscommonPromQlQuery'
        aggregation:
          $ref: '#/components/schemas/widgetsGaugeAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterMetricsFilter'
        editorMode:
          $ref: '#/components/schemas/commonMetricsQueryEditorMode'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
        promqlQueryType:
          $ref: '#/components/schemas/commonPromQLQueryType'
    widgetsGaugeQuery:
      type: object
      properties:
        metrics:
          $ref: '#/components/schemas/widgetsGaugeMetricsQuery'
        logs:
          $ref: '#/components/schemas/widgetsGaugeLogsQuery'
        spans:
          $ref: '#/components/schemas/widgetsGaugeSpansQuery'
        dataprime:
          $ref: '#/components/schemas/widgetsGaugeDataprimeQuery'
    widgetsGaugeSpansQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        spansAggregation:
          $ref: '#/components/schemas/commonSpansAggregation'
        aggregation:
          $ref: '#/components/schemas/widgetsGaugeAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterSpansFilter'
        groupBy:
          type: array
          items:
            $ref: '#/components/schemas/commonSpanField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsGaugeThreshold:
      type: object
      properties:
        from:
          type: number
          format: double
        color:
          type: string
        label:
          type: string
    widgetsGaugeThresholdBy:
      type: string
      enum:
        - THRESHOLD_BY_UNSPECIFIED
        - THRESHOLD_BY_VALUE
        - THRESHOLD_BY_BACKGROUND
      default: THRESHOLD_BY_UNSPECIFIED
    widgetsGaugeUnit:
      type: string
      enum:
        - UNIT_UNSPECIFIED
        - UNIT_NUMBER
        - UNIT_PERCENT
        - UNIT_MICROSECONDS
        - UNIT_MILLISECONDS
        - UNIT_SECONDS
        - UNIT_BYTES
        - UNIT_KBYTES
        - UNIT_MBYTES
        - UNIT_GBYTES
        - UNIT_BYTES_IEC
        - UNIT_KIBYTES
        - UNIT_MIBYTES
        - UNIT_GIBYTES
        - UNIT_EUR_CENTS
        - UNIT_EUR
        - UNIT_USD_CENTS
        - UNIT_USD
        - UNIT_CUSTOM
        - UNIT_PERCENT_ZERO_ONE
        - UNIT_PERCENT_ZERO_HUNDRED
        - UNIT_NANOSECONDS
      default: UNIT_UNSPECIFIED
    widgetsHexagon:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/widgetsHexagonQuery'
        min:
          type: number
          format: double
        max:
          type: number
          format: double
        unit:
          $ref: '#/components/schemas/widgetscommonUnit'
        thresholds:
          type: array
          items:
            $ref: '#/components/schemas/widgetscommonThreshold'
        dataModeType:
          $ref: '#/components/schemas/commonDataModeType'
        customUnit:
          type: string
        decimal:
          type: integer
          format: int32
        thresholdType:
          $ref: '#/components/schemas/commonThresholdType'
        legend:
          $ref: '#/components/schemas/commonLegend'
        legendBy:
          $ref: '#/components/schemas/commonLegendBy'
    widgetsHexagonDataprimeQuery:
      type: object
      properties:
        dataprimeQuery:
          $ref: '#/components/schemas/v1commonDataprimeQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterSource'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsHexagonLogsQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        logsAggregation:
          $ref: '#/components/schemas/commonLogsAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterLogsFilter'
        groupBy:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsHexagonMetricsQuery:
      type: object
      properties:
        promqlQuery:
          $ref: '#/components/schemas/astwidgetscommonPromQlQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterMetricsFilter'
        editorMode:
          $ref: '#/components/schemas/commonMetricsQueryEditorMode'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
        aggregation:
          $ref: '#/components/schemas/widgetscommonAggregation'
        promqlQueryType:
          $ref: '#/components/schemas/commonPromQLQueryType'
    widgetsHexagonQuery:
      type: object
      properties:
        metrics:
          $ref: '#/components/schemas/widgetsHexagonMetricsQuery'
        logs:
          $ref: '#/components/schemas/widgetsHexagonLogsQuery'
        spans:
          $ref: '#/components/schemas/widgetsHexagonSpansQuery'
        dataprime:
          $ref: '#/components/schemas/widgetsHexagonDataprimeQuery'
    widgetsHexagonSpansQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        spansAggregation:
          $ref: '#/components/schemas/commonSpansAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterSpansFilter'
        groupBy:
          type: array
          items:
            $ref: '#/components/schemas/commonSpanField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsHorizontalBarChart:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/widgetsHorizontalBarChartQuery'
        maxBarsPerChart:
          type: integer
          format: int32
        groupNameTemplate:
          type: string
        stackDefinition:
          $ref: '#/components/schemas/widgetsHorizontalBarChartStackDefinition'
        scaleType:
          $ref: '#/components/schemas/commonScaleType'
        colorsBy:
          $ref: '#/components/schemas/commonColorsBy'
        unit:
          $ref: '#/components/schemas/widgetscommonUnit'
        displayOnBar:
          type: boolean
        yAxisViewBy:
          $ref: '#/components/schemas/HorizontalBarChartYAxisViewBy'
        sortBy:
          $ref: '#/components/schemas/commonSortByType'
        colorScheme:
          type: string
        dataModeType:
          $ref: '#/components/schemas/commonDataModeType'
        customUnit:
          type: string
        decimal:
          type: integer
          format: int32
        legend:
          $ref: '#/components/schemas/commonLegend'
    widgetsHorizontalBarChartDataprimeQuery:
      type: object
      properties:
        dataprimeQuery:
          $ref: '#/components/schemas/v1commonDataprimeQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterSource'
        groupNames:
          type: array
          items:
            type: string
        stackedGroupName:
          type: string
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsHorizontalBarChartLogsQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        aggregation:
          $ref: '#/components/schemas/commonLogsAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterLogsFilter'
        groupNames:
          type: array
          items:
            type: string
        stackedGroupName:
          type: string
        groupNamesFields:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
        stackedGroupNameField:
          $ref: '#/components/schemas/commonObservationField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsHorizontalBarChartMetricsQuery:
      type: object
      properties:
        promqlQuery:
          $ref: '#/components/schemas/astwidgetscommonPromQlQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterMetricsFilter'
        groupNames:
          type: array
          items:
            type: string
        stackedGroupName:
          type: string
        editorMode:
          $ref: '#/components/schemas/commonMetricsQueryEditorMode'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
        promqlQueryType:
          $ref: '#/components/schemas/commonPromQLQueryType'
        aggregation:
          $ref: '#/components/schemas/widgetscommonAggregation'
    widgetsHorizontalBarChartQuery:
      type: object
      properties:
        logs:
          $ref: '#/components/schemas/widgetsHorizontalBarChartLogsQuery'
        spans:
          $ref: '#/components/schemas/widgetsHorizontalBarChartSpansQuery'
        metrics:
          $ref: '#/components/schemas/widgetsHorizontalBarChartMetricsQuery'
        dataprime:
          $ref: '#/components/schemas/widgetsHorizontalBarChartDataprimeQuery'
    widgetsHorizontalBarChartSpansQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        aggregation:
          $ref: '#/components/schemas/commonSpansAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterSpansFilter'
        groupNames:
          type: array
          items:
            $ref: '#/components/schemas/commonSpanField'
        stackedGroupName:
          $ref: '#/components/schemas/commonSpanField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsHorizontalBarChartStackDefinition:
      type: object
      properties:
        maxSlicesPerBar:
          type: integer
          format: int32
        stackNameTemplate:
          type: string
    widgetsLineChartDataprimeQuery:
      type: object
      properties:
        dataprimeQuery:
          $ref: '#/components/schemas/v1commonDataprimeQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterSource'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsLineChartLogsQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        groupBy:
          type: array
          items:
            type: string
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/commonLogsAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterLogsFilter'
        groupBys:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsLineChartMetricsQuery:
      type: object
      properties:
        promqlQuery:
          $ref: '#/components/schemas/astwidgetscommonPromQlQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterMetricsFilter'
        editorMode:
          $ref: '#/components/schemas/commonMetricsQueryEditorMode'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsLineChartQuery:
      type: object
      properties:
        logs:
          $ref: '#/components/schemas/widgetsLineChartLogsQuery'
        metrics:
          $ref: '#/components/schemas/widgetsLineChartMetricsQuery'
        spans:
          $ref: '#/components/schemas/widgetsLineChartSpansQuery'
        dataprime:
          $ref: '#/components/schemas/widgetsLineChartDataprimeQuery'
    widgetsLineChartSpansQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        groupBy:
          type: array
          items:
            $ref: '#/components/schemas/commonSpanField'
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/commonSpansAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterSpansFilter'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsMarkdown:
      type: object
      properties:
        markdownText:
          type: string
        tooltipText:
          type: string
    widgetsPieChart:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/widgetsPieChartQuery'
        maxSlicesPerChart:
          type: integer
          format: int32
        minSlicePercentage:
          type: integer
          format: int32
        stackDefinition:
          $ref: '#/components/schemas/widgetsPieChartStackDefinition'
        labelDefinition:
          $ref: '#/components/schemas/PieChartLabelDefinition'
        showLegend:
          type: boolean
        groupNameTemplate:
          type: string
        unit:
          $ref: '#/components/schemas/widgetscommonUnit'
        colorScheme:
          type: string
        dataModeType:
          $ref: '#/components/schemas/commonDataModeType'
        customUnit:
          type: string
        decimal:
          type: integer
          format: int32
        legend:
          $ref: '#/components/schemas/commonLegend'
    widgetsPieChartDataprimeQuery:
      type: object
      properties:
        dataprimeQuery:
          $ref: '#/components/schemas/v1commonDataprimeQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterSource'
        groupNames:
          type: array
          items:
            type: string
        stackedGroupName:
          type: string
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsPieChartLogsQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        aggregation:
          $ref: '#/components/schemas/commonLogsAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterLogsFilter'
        groupNames:
          type: array
          items:
            type: string
        stackedGroupName:
          type: string
        groupNamesFields:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
        stackedGroupNameField:
          $ref: '#/components/schemas/commonObservationField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsPieChartMetricsQuery:
      type: object
      properties:
        promqlQuery:
          $ref: '#/components/schemas/astwidgetscommonPromQlQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterMetricsFilter'
        groupNames:
          type: array
          items:
            type: string
        stackedGroupName:
          type: string
        editorMode:
          $ref: '#/components/schemas/commonMetricsQueryEditorMode'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
        promqlQueryType:
          $ref: '#/components/schemas/commonPromQLQueryType'
        aggregation:
          $ref: '#/components/schemas/widgetscommonAggregation'
    widgetsPieChartQuery:
      type: object
      properties:
        logs:
          $ref: '#/components/schemas/widgetsPieChartLogsQuery'
        spans:
          $ref: '#/components/schemas/widgetsPieChartSpansQuery'
        metrics:
          $ref: '#/components/schemas/widgetsPieChartMetricsQuery'
        dataprime:
          $ref: '#/components/schemas/widgetsPieChartDataprimeQuery'
    widgetsPieChartSpansQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        aggregation:
          $ref: '#/components/schemas/commonSpansAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterSpansFilter'
        groupNames:
          type: array
          items:
            $ref: '#/components/schemas/commonSpanField'
        stackedGroupName:
          $ref: '#/components/schemas/commonSpanField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsPieChartStackDefinition:
      type: object
      properties:
        maxSlicesPerStack:
          type: integer
          format: int32
        stackNameTemplate:
          type: string
    widgetsRowStyle:
      type: string
      enum:
        - ROW_STYLE_UNSPECIFIED
        - ROW_STYLE_ONE_LINE
        - ROW_STYLE_TWO_LINE
        - ROW_STYLE_CONDENSED
        - ROW_STYLE_JSON
        - ROW_STYLE_LIST
      default: ROW_STYLE_UNSPECIFIED
    widgetscommonAggregation:
      type: string
      enum:
        - AGGREGATION_UNSPECIFIED
        - AGGREGATION_LAST
        - AGGREGATION_MIN
        - AGGREGATION_MAX
        - AGGREGATION_AVG
        - AGGREGATION_SUM
      default: AGGREGATION_UNSPECIFIED
    widgetscommonThreshold:
      type: object
      properties:
        from:
          type: number
          format: double
        color:
          type: string
        label:
          type: string
    widgetscommonUnit:
      type: string
      enum:
        - UNIT_UNSPECIFIED
        - UNIT_MICROSECONDS
        - UNIT_MILLISECONDS
        - UNIT_SECONDS
        - UNIT_BYTES
        - UNIT_KBYTES
        - UNIT_MBYTES
        - UNIT_GBYTES
        - UNIT_BYTES_IEC
        - UNIT_KIBYTES
        - UNIT_MIBYTES
        - UNIT_GIBYTES
        - UNIT_EUR_CENTS
        - UNIT_EUR
        - UNIT_USD_CENTS
        - UNIT_USD
        - UNIT_NANOSECONDS
        - UNIT_CUSTOM
        - UNIT_PERCENT_ZERO_ONE
        - UNIT_PERCENT_ZERO_HUNDRED
        - UNIT_PERCENT
      default: UNIT_UNSPECIFIED
    widgetsv1Gauge:
      type: object
      properties:
        displayName:
          type: string
        query:
          type: string
        results:
          type: array
          items:
            $ref: '#/components/schemas/v1FloatResult'
        total:
          $ref: '#/components/schemas/v1FloatResult'
        header:
          $ref: '#/components/schemas/v1FloatResult'
    widgetsv1LineChart:
      type: object
      properties:
        displayName:
          type: string
        name:
          type: string
        query:
          type: string
        points:
          type: array
          items:
            type: array
            items:
              type: object
        toolTip:
          type: string
        unit:
          $ref: '#/components/schemas/widgetsv1Unit'
        metric:
          type: object
          additionalProperties:
            type: string
        internalMetricSchema:
          $ref: '#/components/schemas/v1InternalMetricSchema'
    widgetsv1Unit:
      type: string
      enum:
        - UNIT_UNSPECIFIED
        - UNIT_BYTES
        - UNIT_MESSAGES
        - UNIT_MESSAGES_PER_SECOND
        - UNIT_BYTES_PER_SECOND
        - UNIT_SECONDS
        - UNIT_MILLISECONDS
        - UNIT_X_PER_SECOND
        - UNIT_PERCENT
        - UNIT_MICROSECONDS
        - UNIT_MESSAGES_PER_MINUTE
        - UNIT_X_PER_MINUTE
        - UNIT_MEGABYTES
      default: UNIT_UNSPECIFIED
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: API key authentication
servers:
  - url: https://api.coralogix.com/mgmt/openapi
  - url: https://api.eu2.coralogix.com/mgmt/openapi
  - url: https://api.coralogix.us/mgmt/openapi
  - url: https://api.cx498.coralogix.com/mgmt/openapi
  - url: https://api.coralogix.in/mgmt/openapi
  - url: https://api.coralogixsg.com/mgmt/openapi
  - url: https://api.ap3.coralogix.com/mgmt/openapi
security:
  - apiKeyAuth: []
