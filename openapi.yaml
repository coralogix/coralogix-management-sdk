openapi: 3.0.0
info:
  title: google/api/client.proto
  version: version not set
tags:
  - name: SLO Service
    description: Manage your SLOs.
  - name: GlobalRoutersService
  - name: ConnectorsService
  - name: PresetsService
  - name: TestingService
  - name: EntitiesService
  - name: API Keys Service
    description: Manage your API Keys.
  - name: SAML Configuration Service
    description: Manage your SAML configuration
  - name: Alert definitions service
    description: >-
      View and manage your alerts using alert definitions - data structures that
      contain the configuration required to create an alert.
    externalDocs:
      description: Learn more about alerts in our documentation
      url: https://coralogix.com/docs/user-guides/alerting/introduction-to-alerts/
  - name: Alert events service
    description: >-
      Get information regarding your alert events - instances of alerts being
      triggered.
    externalDocs:
      description: Learn more about alert events and incidents in our documentation.
      url: https://coralogix.com/docs/user-guides/alerting/incidents/
  - name: Recording Rules Service
    description: A service to manage recording rules.
  - name: Dashboard service
    description: Manage your dashboards.
  - name: Dashboard folders service
    description: Manage your dashboard folders.
  - name: Actions Service
    description: A service for managing actions.
  - name: SloHubService
  - name: SlosService
  - name: Events2Metrics Service
    description: Manage your events2metrics.
  - name: Events Service
    description: A service for querying events.
    externalDocs:
      description: Learn more about alerts in our documentation
      url: https://coralogix.com/docs/user-guides/alerting/introduction-to-alerts/
  - name: Folders for views
    description: Create and manage view folders.
  - name: Views
    description: Create and manage views.
  - name: Scopes Service
    description: A service to manage scopes
  - name: Incidents service
    description: >-
      Handle all operations related to incident management within Coralogix.
      Identify, manage, and resolve incidents efficiently through automated
      workflows and team collaboration.
    externalDocs:
      description: Find out more about incident management in our documentation
      url: https://coralogix.com/docs/user-guides/alerting/incidents/
  - name: MetricsTcoService
  - name: MetricsConfiguratorPublicService
  - name: Data Usage Service
    description: A service to manage data usage metrics.
  - name: Target Service
    description: View and manage your storage targets for logs.
    externalDocs:
      description: Find out more about archives
      url: >-
        https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
  - name: Team Permissions Management Service
    description: Manage Team Groups.
  - name: Extension service
    description: A service that enables querying for extension information.
    externalDocs:
      description: Learn more about extensions in our documentation.
      url: https://coralogix.com/docs/integrations/extensions/
  - name: Extension deployment service
    description: A service that enables querying for extension deployment information.
    externalDocs:
      description: Find out more about extensions in our documentation.
      url: https://coralogix.com/docs/integrations/extensions/
  - name: Extension testing service
    externalDocs:
      description: Find out more about extensions in our documentation.
      url: https://coralogix.com/docs/integrations/extensions/
  - name: Integration service
    description: A service that enables querying for integration information.
    externalDocs:
      description: Find out more about integrations in our documentation.
      url: https://coralogix.com/docs/integrations/getting-started/
  - name: Contextual data integration service
    description: Query for contextual data integration information.
  - name: Outgoing webhooks service
    externalDocs:
      description: Find out more about outbound webhooks in our documentation.
      url: >-
        https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
  - name: Rule Groups Service
    description: A service to manage rule groups.
  - name: Enrichments Service
    description: Manage your enrichments.
  - name: Custom Enrichments Service
    description: Manage your enrichments.
  - name: Policies Service
    description: View and manage your TCO policies
paths:
  /api/v1/rulegroup-mapping:
    post:
      summary: Get Rule Group Model Mapping
      operationId: RuleGroupsService_GetRuleGroupModelMapping
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetRuleGroupModelMappingResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1GetRuleGroupModelMappingRequest'
        required: true
      tags:
        - Rule Groups Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v1/rulegroup-mapping';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"string","description":"string","enabled":true,"hidden":true,"creator":"string","ruleMatchers":[{"applicationName":{"value":"string"},"subsystemName":{"value":"string"},"severity":{"value":"VALUE_DEBUG_OR_UNSPECIFIED"}}],"ruleSubgroups":[{"rules":[{"name":"string","description":"string","sourceField":"string","parameters":{"extractParameters":{"rule":"string"},"jsonExtractParameters":{"destinationFieldType":"DESTINATION_FIELD_CATEGORY_OR_UNSPECIFIED","rule":"string","destinationFieldText":"string"},"replaceParameters":{"destinationField":"string","replaceNewVal":"string","rule":"string"},"parseParameters":{"destinationField":"string","rule":"string"},"allowParameters":{"keepBlockedLogs":true,"rule":"string"},"blockParameters":{"keepBlockedLogs":true,"rule":"string"},"extractTimestampParameters":{"standard":"FORMAT_STANDARD_STRFTIME_OR_UNSPECIFIED","format":"string"},"removeFieldsParameters":{"fields":["string"]},"jsonStringifyParameters":{"destinationField":"string","deleteSource":true},"jsonParseParameters":{"destinationField":"string","deleteSource":true,"escapedValue":true,"overrideDest":true}},"enabled":true,"order":0}],"enabled":true,"order":0}],"order":0}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/api/v1/rulegroup-mapping"


            payload = {
                "name": "string",
                "description": "string",
                "enabled": True,
                "hidden": True,
                "creator": "string",
                "ruleMatchers": [
                    {
                        "applicationName": {"value": "string"},
                        "subsystemName": {"value": "string"},
                        "severity": {"value": "VALUE_DEBUG_OR_UNSPECIFIED"}
                    }
                ],
                "ruleSubgroups": [
                    {
                        "rules": [
                            {
                                "name": "string",
                                "description": "string",
                                "sourceField": "string",
                                "parameters": {
                                    "extractParameters": {"rule": "string"},
                                    "jsonExtractParameters": {
                                        "destinationFieldType": "DESTINATION_FIELD_CATEGORY_OR_UNSPECIFIED",
                                        "rule": "string",
                                        "destinationFieldText": "string"
                                    },
                                    "replaceParameters": {
                                        "destinationField": "string",
                                        "replaceNewVal": "string",
                                        "rule": "string"
                                    },
                                    "parseParameters": {
                                        "destinationField": "string",
                                        "rule": "string"
                                    },
                                    "allowParameters": {
                                        "keepBlockedLogs": True,
                                        "rule": "string"
                                    },
                                    "blockParameters": {
                                        "keepBlockedLogs": True,
                                        "rule": "string"
                                    },
                                    "extractTimestampParameters": {
                                        "standard": "FORMAT_STANDARD_STRFTIME_OR_UNSPECIFIED",
                                        "format": "string"
                                    },
                                    "removeFieldsParameters": {"fields": ["string"]},
                                    "jsonStringifyParameters": {
                                        "destinationField": "string",
                                        "deleteSource": True
                                    },
                                    "jsonParseParameters": {
                                        "destinationField": "string",
                                        "deleteSource": True,
                                        "escapedValue": True,
                                        "overrideDest": True
                                    }
                                },
                                "enabled": True,
                                "order": 0
                            }
                        ],
                        "enabled": True,
                        "order": 0
                    }
                ],
                "order": 0
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/api/v1/rulegroup-mapping \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"string","description":"string","enabled":true,"hidden":true,"creator":"string","ruleMatchers":[{"applicationName":{"value":"string"},"subsystemName":{"value":"string"},"severity":{"value":"VALUE_DEBUG_OR_UNSPECIFIED"}}],"ruleSubgroups":[{"rules":[{"name":"string","description":"string","sourceField":"string","parameters":{"extractParameters":{"rule":"string"},"jsonExtractParameters":{"destinationFieldType":"DESTINATION_FIELD_CATEGORY_OR_UNSPECIFIED","rule":"string","destinationFieldText":"string"},"replaceParameters":{"destinationField":"string","replaceNewVal":"string","rule":"string"},"parseParameters":{"destinationField":"string","rule":"string"},"allowParameters":{"keepBlockedLogs":true,"rule":"string"},"blockParameters":{"keepBlockedLogs":true,"rule":"string"},"extractTimestampParameters":{"standard":"FORMAT_STANDARD_STRFTIME_OR_UNSPECIFIED","format":"string"},"removeFieldsParameters":{"fields":["string"]},"jsonStringifyParameters":{"destinationField":"string","deleteSource":true},"jsonParseParameters":{"destinationField":"string","deleteSource":true,"escapedValue":true,"overrideDest":true}},"enabled":true,"order":0}],"enabled":true,"order":0}],"order":0}'
      description: No description available
  /api/v1/rulegroups:
    get:
      summary: List Rule Groups
      operationId: RuleGroupsService_ListRuleGroups
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListRuleGroupsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Rule Groups Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      summary: Bulk Delete Rule Group
      operationId: RuleGroupsService_BulkDeleteRuleGroup
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1BulkDeleteRuleGroupResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: groupIds
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - Rule Groups Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups?groupIds=SOME_ARRAY_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups"


            querystring = {"groupIds":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups?groupIds=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      summary: Create Rule Group
      operationId: RuleGroupsService_CreateRuleGroup
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateRuleGroupResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody: &ref_0
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CreateRuleGroupRequest'
        required: true
      tags:
        - Rule Groups Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"string","description":"string","enabled":true,"hidden":true,"creator":"string","ruleMatchers":[{"applicationName":{"value":"string"},"subsystemName":{"value":"string"},"severity":{"value":"VALUE_DEBUG_OR_UNSPECIFIED"}}],"ruleSubgroups":[{"rules":[{"name":"string","description":"string","sourceField":"string","parameters":{"extractParameters":{"rule":"string"},"jsonExtractParameters":{"destinationFieldType":"DESTINATION_FIELD_CATEGORY_OR_UNSPECIFIED","rule":"string","destinationFieldText":"string"},"replaceParameters":{"destinationField":"string","replaceNewVal":"string","rule":"string"},"parseParameters":{"destinationField":"string","rule":"string"},"allowParameters":{"keepBlockedLogs":true,"rule":"string"},"blockParameters":{"keepBlockedLogs":true,"rule":"string"},"extractTimestampParameters":{"standard":"FORMAT_STANDARD_STRFTIME_OR_UNSPECIFIED","format":"string"},"removeFieldsParameters":{"fields":["string"]},"jsonStringifyParameters":{"destinationField":"string","deleteSource":true},"jsonParseParameters":{"destinationField":"string","deleteSource":true,"escapedValue":true,"overrideDest":true}},"enabled":true,"order":0}],"enabled":true,"order":0}],"order":0,"teamId":{"id":0}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups"


            payload = {
                "name": "string",
                "description": "string",
                "enabled": True,
                "hidden": True,
                "creator": "string",
                "ruleMatchers": [
                    {
                        "applicationName": {"value": "string"},
                        "subsystemName": {"value": "string"},
                        "severity": {"value": "VALUE_DEBUG_OR_UNSPECIFIED"}
                    }
                ],
                "ruleSubgroups": [
                    {
                        "rules": [
                            {
                                "name": "string",
                                "description": "string",
                                "sourceField": "string",
                                "parameters": {
                                    "extractParameters": {"rule": "string"},
                                    "jsonExtractParameters": {
                                        "destinationFieldType": "DESTINATION_FIELD_CATEGORY_OR_UNSPECIFIED",
                                        "rule": "string",
                                        "destinationFieldText": "string"
                                    },
                                    "replaceParameters": {
                                        "destinationField": "string",
                                        "replaceNewVal": "string",
                                        "rule": "string"
                                    },
                                    "parseParameters": {
                                        "destinationField": "string",
                                        "rule": "string"
                                    },
                                    "allowParameters": {
                                        "keepBlockedLogs": True,
                                        "rule": "string"
                                    },
                                    "blockParameters": {
                                        "keepBlockedLogs": True,
                                        "rule": "string"
                                    },
                                    "extractTimestampParameters": {
                                        "standard": "FORMAT_STANDARD_STRFTIME_OR_UNSPECIFIED",
                                        "format": "string"
                                    },
                                    "removeFieldsParameters": {"fields": ["string"]},
                                    "jsonStringifyParameters": {
                                        "destinationField": "string",
                                        "deleteSource": True
                                    },
                                    "jsonParseParameters": {
                                        "destinationField": "string",
                                        "deleteSource": True,
                                        "escapedValue": True,
                                        "overrideDest": True
                                    }
                                },
                                "enabled": True,
                                "order": 0
                            }
                        ],
                        "enabled": True,
                        "order": 0
                    }
                ],
                "order": 0,
                "teamId": {"id": 0}
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"string","description":"string","enabled":true,"hidden":true,"creator":"string","ruleMatchers":[{"applicationName":{"value":"string"},"subsystemName":{"value":"string"},"severity":{"value":"VALUE_DEBUG_OR_UNSPECIFIED"}}],"ruleSubgroups":[{"rules":[{"name":"string","description":"string","sourceField":"string","parameters":{"extractParameters":{"rule":"string"},"jsonExtractParameters":{"destinationFieldType":"DESTINATION_FIELD_CATEGORY_OR_UNSPECIFIED","rule":"string","destinationFieldText":"string"},"replaceParameters":{"destinationField":"string","replaceNewVal":"string","rule":"string"},"parseParameters":{"destinationField":"string","rule":"string"},"allowParameters":{"keepBlockedLogs":true,"rule":"string"},"blockParameters":{"keepBlockedLogs":true,"rule":"string"},"extractTimestampParameters":{"standard":"FORMAT_STANDARD_STRFTIME_OR_UNSPECIFIED","format":"string"},"removeFieldsParameters":{"fields":["string"]},"jsonStringifyParameters":{"destinationField":"string","deleteSource":true},"jsonParseParameters":{"destinationField":"string","deleteSource":true,"escapedValue":true,"overrideDest":true}},"enabled":true,"order":0}],"enabled":true,"order":0}],"order":0,"teamId":{"id":0}}'
      description: No description available
  /api/v1/rulegroups/company-limits:
    post:
      summary: Get Company Usage Limits
      operationId: RuleGroupsService_GetCompanyUsageLimits
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetCompanyUsageLimitsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1GetCompanyUsageLimitsRequest'
        required: true
      tags:
        - Rule Groups Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups/company-limits';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups/company-limits"


            payload = {}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups/company-limits \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{}'
      description: No description available
  /api/v1/rulegroups/{groupId}:
    get:
      summary: Get Rule Group
      operationId: RuleGroupsService_GetRuleGroup
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetRuleGroupResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Rule Groups Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups/%7BgroupId%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups/%7BgroupId%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups/%7BgroupId%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      summary: Delete Rule Group
      operationId: RuleGroupsService_DeleteRuleGroup
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeleteRuleGroupResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Rule Groups Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups/%7BgroupId%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups/%7BgroupId%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups/%7BgroupId%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      summary: Update Rule Group
      operationId: RuleGroupsService_UpdateRuleGroup
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdateRuleGroupResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      requestBody: *ref_0
      tags:
        - Rule Groups Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups/%7BgroupId%7D';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"string","description":"string","enabled":true,"hidden":true,"creator":"string","ruleMatchers":[{"applicationName":{"value":"string"},"subsystemName":{"value":"string"},"severity":{"value":"VALUE_DEBUG_OR_UNSPECIFIED"}}],"ruleSubgroups":[{"rules":[{"name":"string","description":"string","sourceField":"string","parameters":{"extractParameters":{"rule":"string"},"jsonExtractParameters":{"destinationFieldType":"DESTINATION_FIELD_CATEGORY_OR_UNSPECIFIED","rule":"string","destinationFieldText":"string"},"replaceParameters":{"destinationField":"string","replaceNewVal":"string","rule":"string"},"parseParameters":{"destinationField":"string","rule":"string"},"allowParameters":{"keepBlockedLogs":true,"rule":"string"},"blockParameters":{"keepBlockedLogs":true,"rule":"string"},"extractTimestampParameters":{"standard":"FORMAT_STANDARD_STRFTIME_OR_UNSPECIFIED","format":"string"},"removeFieldsParameters":{"fields":["string"]},"jsonStringifyParameters":{"destinationField":"string","deleteSource":true},"jsonParseParameters":{"destinationField":"string","deleteSource":true,"escapedValue":true,"overrideDest":true}},"enabled":true,"order":0}],"enabled":true,"order":0}],"order":0,"teamId":{"id":0}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups/%7BgroupId%7D"


            payload = {
                "name": "string",
                "description": "string",
                "enabled": True,
                "hidden": True,
                "creator": "string",
                "ruleMatchers": [
                    {
                        "applicationName": {"value": "string"},
                        "subsystemName": {"value": "string"},
                        "severity": {"value": "VALUE_DEBUG_OR_UNSPECIFIED"}
                    }
                ],
                "ruleSubgroups": [
                    {
                        "rules": [
                            {
                                "name": "string",
                                "description": "string",
                                "sourceField": "string",
                                "parameters": {
                                    "extractParameters": {"rule": "string"},
                                    "jsonExtractParameters": {
                                        "destinationFieldType": "DESTINATION_FIELD_CATEGORY_OR_UNSPECIFIED",
                                        "rule": "string",
                                        "destinationFieldText": "string"
                                    },
                                    "replaceParameters": {
                                        "destinationField": "string",
                                        "replaceNewVal": "string",
                                        "rule": "string"
                                    },
                                    "parseParameters": {
                                        "destinationField": "string",
                                        "rule": "string"
                                    },
                                    "allowParameters": {
                                        "keepBlockedLogs": True,
                                        "rule": "string"
                                    },
                                    "blockParameters": {
                                        "keepBlockedLogs": True,
                                        "rule": "string"
                                    },
                                    "extractTimestampParameters": {
                                        "standard": "FORMAT_STANDARD_STRFTIME_OR_UNSPECIFIED",
                                        "format": "string"
                                    },
                                    "removeFieldsParameters": {"fields": ["string"]},
                                    "jsonStringifyParameters": {
                                        "destinationField": "string",
                                        "deleteSource": True
                                    },
                                    "jsonParseParameters": {
                                        "destinationField": "string",
                                        "deleteSource": True,
                                        "escapedValue": True,
                                        "overrideDest": True
                                    }
                                },
                                "enabled": True,
                                "order": 0
                            }
                        ],
                        "enabled": True,
                        "order": 0
                    }
                ],
                "order": 0,
                "teamId": {"id": 0}
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups/%7BgroupId%7D \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"string","description":"string","enabled":true,"hidden":true,"creator":"string","ruleMatchers":[{"applicationName":{"value":"string"},"subsystemName":{"value":"string"},"severity":{"value":"VALUE_DEBUG_OR_UNSPECIFIED"}}],"ruleSubgroups":[{"rules":[{"name":"string","description":"string","sourceField":"string","parameters":{"extractParameters":{"rule":"string"},"jsonExtractParameters":{"destinationFieldType":"DESTINATION_FIELD_CATEGORY_OR_UNSPECIFIED","rule":"string","destinationFieldText":"string"},"replaceParameters":{"destinationField":"string","replaceNewVal":"string","rule":"string"},"parseParameters":{"destinationField":"string","rule":"string"},"allowParameters":{"keepBlockedLogs":true,"rule":"string"},"blockParameters":{"keepBlockedLogs":true,"rule":"string"},"extractTimestampParameters":{"standard":"FORMAT_STANDARD_STRFTIME_OR_UNSPECIFIED","format":"string"},"removeFieldsParameters":{"fields":["string"]},"jsonStringifyParameters":{"destinationField":"string","deleteSource":true},"jsonParseParameters":{"destinationField":"string","deleteSource":true,"escapedValue":true,"overrideDest":true}},"enabled":true,"order":0}],"enabled":true,"order":0}],"order":0,"teamId":{"id":0}}'
      description: No description available
  /api/v2/events2metrics:
    get:
      summary: List E2Ms
      operationId: Events2MetricService_ListE2M
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2ListE2MResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Events2Metrics Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      summary: Create a new E2M
      operationId: Events2MetricService_CreateE2M
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2CreateE2MResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2E2MCreateParams'
        required: true
      tags:
        - Events2Metrics Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"Service catalog latency","description":"avg and max the latency of catalog service","permutationsLimit":30000,"metricLabels":[{"targetLabel":"alias_label_name","sourceField":"log_obj.string_value"}],"metricFields":[{"targetBaseMetricName":"alias_field_name","sourceField":"log_obj.numeric_field","aggregations":[{"enabled":true,"aggType":"AGG_TYPE_UNSPECIFIED","targetMetricName":"alias_field_name_agg_func","samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"histogram":{"buckets":2}}]}],"type":"E2M_TYPE_UNSPECIFIED","spansQuery":{"lucene":"applicationName:myApp","applicationnameFilters":"myApp","subsystemnameFilters":"mySubsystem","actionFilters":"myAction","serviceFilters":"myService"},"logsQuery":{"lucene":"log_obj.numeric_field: [50 TO 100]","alias":"new_query","applicationnameFilters":"app_name","subsystemnameFilters":"sub_name","severityFilters":["SEVERITY_UNSPECIFIED"]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics"


            payload = {
                "name": "Service catalog latency",
                "description": "avg and max the latency of catalog service",
                "permutationsLimit": 30000,
                "metricLabels": [
                    {
                        "targetLabel": "alias_label_name",
                        "sourceField": "log_obj.string_value"
                    }
                ],
                "metricFields": [
                    {
                        "targetBaseMetricName": "alias_field_name",
                        "sourceField": "log_obj.numeric_field",
                        "aggregations": [
                            {
                                "enabled": True,
                                "aggType": "AGG_TYPE_UNSPECIFIED",
                                "targetMetricName": "alias_field_name_agg_func",
                                "samples": {"sampleType": "SAMPLE_TYPE_UNSPECIFIED"},
                                "histogram": {"buckets": 2}
                            }
                        ]
                    }
                ],
                "type": "E2M_TYPE_UNSPECIFIED",
                "spansQuery": {
                    "lucene": "applicationName:myApp",
                    "applicationnameFilters": "myApp",
                    "subsystemnameFilters": "mySubsystem",
                    "actionFilters": "myAction",
                    "serviceFilters": "myService"
                },
                "logsQuery": {
                    "lucene": "log_obj.numeric_field: [50 TO 100]",
                    "alias": "new_query",
                    "applicationnameFilters": "app_name",
                    "subsystemnameFilters": "sub_name",
                    "severityFilters": ["SEVERITY_UNSPECIFIED"]
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"Service catalog latency","description":"avg and max the latency of catalog service","permutationsLimit":30000,"metricLabels":[{"targetLabel":"alias_label_name","sourceField":"log_obj.string_value"}],"metricFields":[{"targetBaseMetricName":"alias_field_name","sourceField":"log_obj.numeric_field","aggregations":[{"enabled":true,"aggType":"AGG_TYPE_UNSPECIFIED","targetMetricName":"alias_field_name_agg_func","samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"histogram":{"buckets":2}}]}],"type":"E2M_TYPE_UNSPECIFIED","spansQuery":{"lucene":"applicationName:myApp","applicationnameFilters":"myApp","subsystemnameFilters":"mySubsystem","actionFilters":"myAction","serviceFilters":"myService"},"logsQuery":{"lucene":"log_obj.numeric_field: [50 TO 100]","alias":"new_query","applicationnameFilters":"app_name","subsystemnameFilters":"sub_name","severityFilters":["SEVERITY_UNSPECIFIED"]}}'
      description: No description available
    put:
      summary: Replace an E2M
      operationId: Events2MetricService_ReplaceE2M
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2ReplaceE2MResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2E2M'
        required: true
      tags:
        - Events2Metrics Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"d6a3658e-78d2-47d0-9b81-b2c551f01b09","name":"Service_catalog_latency","description":"avg and max the latency of catalog service","createTime":"2022-06-30T12:30:00Z\'","updateTime":"2022-06-30T12:30:00Z\'","permutations":{"limit":30000,"hasExceededLimit":true},"metricLabels":[{"targetLabel":"alias_label_name","sourceField":"log_obj.string_value"}],"metricFields":[{"targetBaseMetricName":"alias_field_name","sourceField":"log_obj.numeric_field","aggregations":[{"enabled":true,"aggType":"AGG_TYPE_UNSPECIFIED","targetMetricName":"alias_field_name_agg_func","samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"histogram":{"buckets":2}}]}],"type":"E2M_TYPE_UNSPECIFIED","spansQuery":{"lucene":"applicationName:myApp","applicationnameFilters":"myApp","subsystemnameFilters":"mySubsystem","actionFilters":"myAction","serviceFilters":"myService"},"logsQuery":{"lucene":"log_obj.numeric_field: [50 TO 100]","alias":"new_query","applicationnameFilters":"app_name","subsystemnameFilters":"sub_name","severityFilters":["SEVERITY_UNSPECIFIED"]},"isInternal":true}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics"


            payload = {
                "id": "d6a3658e-78d2-47d0-9b81-b2c551f01b09",
                "name": "Service_catalog_latency",
                "description": "avg and max the latency of catalog service",
                "createTime": "2022-06-30T12:30:00Z'",
                "updateTime": "2022-06-30T12:30:00Z'",
                "permutations": {
                    "limit": 30000,
                    "hasExceededLimit": True
                },
                "metricLabels": [
                    {
                        "targetLabel": "alias_label_name",
                        "sourceField": "log_obj.string_value"
                    }
                ],
                "metricFields": [
                    {
                        "targetBaseMetricName": "alias_field_name",
                        "sourceField": "log_obj.numeric_field",
                        "aggregations": [
                            {
                                "enabled": True,
                                "aggType": "AGG_TYPE_UNSPECIFIED",
                                "targetMetricName": "alias_field_name_agg_func",
                                "samples": {"sampleType": "SAMPLE_TYPE_UNSPECIFIED"},
                                "histogram": {"buckets": 2}
                            }
                        ]
                    }
                ],
                "type": "E2M_TYPE_UNSPECIFIED",
                "spansQuery": {
                    "lucene": "applicationName:myApp",
                    "applicationnameFilters": "myApp",
                    "subsystemnameFilters": "mySubsystem",
                    "actionFilters": "myAction",
                    "serviceFilters": "myService"
                },
                "logsQuery": {
                    "lucene": "log_obj.numeric_field: [50 TO 100]",
                    "alias": "new_query",
                    "applicationnameFilters": "app_name",
                    "subsystemnameFilters": "sub_name",
                    "severityFilters": ["SEVERITY_UNSPECIFIED"]
                },
                "isInternal": True
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"d6a3658e-78d2-47d0-9b81-b2c551f01b09","name":"Service_catalog_latency","description":"avg and max the latency of catalog service","createTime":"2022-06-30T12:30:00Z'\''","updateTime":"2022-06-30T12:30:00Z'\''","permutations":{"limit":30000,"hasExceededLimit":true},"metricLabels":[{"targetLabel":"alias_label_name","sourceField":"log_obj.string_value"}],"metricFields":[{"targetBaseMetricName":"alias_field_name","sourceField":"log_obj.numeric_field","aggregations":[{"enabled":true,"aggType":"AGG_TYPE_UNSPECIFIED","targetMetricName":"alias_field_name_agg_func","samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"histogram":{"buckets":2}}]}],"type":"E2M_TYPE_UNSPECIFIED","spansQuery":{"lucene":"applicationName:myApp","applicationnameFilters":"myApp","subsystemnameFilters":"mySubsystem","actionFilters":"myAction","serviceFilters":"myService"},"logsQuery":{"lucene":"log_obj.numeric_field: [50 TO 100]","alias":"new_query","applicationnameFilters":"app_name","subsystemnameFilters":"sub_name","severityFilters":["SEVERITY_UNSPECIFIED"]},"isInternal":true}'
      description: No description available
  /api/v2/events2metrics/atomic_batch_execute:
    post:
      summary: Atomic Batch Execute E2M
      operationId: Events2MetricService_AtomicBatchExecuteE2M
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2AtomicBatchExecuteE2MResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2AtomicBatchExecuteE2MRequest'
        required: true
      tags:
        - Events2Metrics Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/atomic_batch_execute';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requests":[{"create":{"e2m":{"name":"Service catalog latency","description":"avg and max the latency of catalog service","permutationsLimit":30000,"metricLabels":[{"targetLabel":"alias_label_name","sourceField":"log_obj.string_value"}],"metricFields":[{"targetBaseMetricName":"alias_field_name","sourceField":"log_obj.numeric_field","aggregations":[{"enabled":true,"aggType":"AGG_TYPE_UNSPECIFIED","targetMetricName":"alias_field_name_agg_func","samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"histogram":{"buckets":2}}]}],"type":"E2M_TYPE_UNSPECIFIED","spansQuery":{"lucene":"applicationName:myApp","applicationnameFilters":"myApp","subsystemnameFilters":"mySubsystem","actionFilters":"myAction","serviceFilters":"myService"},"logsQuery":{"lucene":"log_obj.numeric_field: [50 TO 100]","alias":"new_query","applicationnameFilters":"app_name","subsystemnameFilters":"sub_name","severityFilters":["SEVERITY_UNSPECIFIED"]}}},"replace":{"e2m":{"id":"d6a3658e-78d2-47d0-9b81-b2c551f01b09","name":"Service_catalog_latency","description":"avg and max the latency of catalog service","createTime":"2022-06-30T12:30:00Z\'","updateTime":"2022-06-30T12:30:00Z\'","permutations":{"limit":30000,"hasExceededLimit":true},"metricLabels":[{"targetLabel":"alias_label_name","sourceField":"log_obj.string_value"}],"metricFields":[{"targetBaseMetricName":"alias_field_name","sourceField":"log_obj.numeric_field","aggregations":[{"enabled":true,"aggType":"AGG_TYPE_UNSPECIFIED","targetMetricName":"alias_field_name_agg_func","samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"histogram":{"buckets":2}}]}],"type":"E2M_TYPE_UNSPECIFIED","spansQuery":{"lucene":"applicationName:myApp","applicationnameFilters":"myApp","subsystemnameFilters":"mySubsystem","actionFilters":"myAction","serviceFilters":"myService"},"logsQuery":{"lucene":"log_obj.numeric_field: [50 TO 100]","alias":"new_query","applicationnameFilters":"app_name","subsystemnameFilters":"sub_name","severityFilters":["SEVERITY_UNSPECIFIED"]},"isInternal":true}},"delete":{"id":"d6a3658e-78d2-47d0-9b81-b2c551f01b09"}}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/atomic_batch_execute"


            payload = {"requests": [
                    {
                        "create": {"e2m": {
                                "name": "Service catalog latency",
                                "description": "avg and max the latency of catalog service",
                                "permutationsLimit": 30000,
                                "metricLabels": [
                                    {
                                        "targetLabel": "alias_label_name",
                                        "sourceField": "log_obj.string_value"
                                    }
                                ],
                                "metricFields": [
                                    {
                                        "targetBaseMetricName": "alias_field_name",
                                        "sourceField": "log_obj.numeric_field",
                                        "aggregations": [
                                            {
                                                "enabled": True,
                                                "aggType": "AGG_TYPE_UNSPECIFIED",
                                                "targetMetricName": "alias_field_name_agg_func",
                                                "samples": {"sampleType": "SAMPLE_TYPE_UNSPECIFIED"},
                                                "histogram": {"buckets": 2}
                                            }
                                        ]
                                    }
                                ],
                                "type": "E2M_TYPE_UNSPECIFIED",
                                "spansQuery": {
                                    "lucene": "applicationName:myApp",
                                    "applicationnameFilters": "myApp",
                                    "subsystemnameFilters": "mySubsystem",
                                    "actionFilters": "myAction",
                                    "serviceFilters": "myService"
                                },
                                "logsQuery": {
                                    "lucene": "log_obj.numeric_field: [50 TO 100]",
                                    "alias": "new_query",
                                    "applicationnameFilters": "app_name",
                                    "subsystemnameFilters": "sub_name",
                                    "severityFilters": ["SEVERITY_UNSPECIFIED"]
                                }
                            }},
                        "replace": {"e2m": {
                                "id": "d6a3658e-78d2-47d0-9b81-b2c551f01b09",
                                "name": "Service_catalog_latency",
                                "description": "avg and max the latency of catalog service",
                                "createTime": "2022-06-30T12:30:00Z'",
                                "updateTime": "2022-06-30T12:30:00Z'",
                                "permutations": {
                                    "limit": 30000,
                                    "hasExceededLimit": True
                                },
                                "metricLabels": [
                                    {
                                        "targetLabel": "alias_label_name",
                                        "sourceField": "log_obj.string_value"
                                    }
                                ],
                                "metricFields": [
                                    {
                                        "targetBaseMetricName": "alias_field_name",
                                        "sourceField": "log_obj.numeric_field",
                                        "aggregations": [
                                            {
                                                "enabled": True,
                                                "aggType": "AGG_TYPE_UNSPECIFIED",
                                                "targetMetricName": "alias_field_name_agg_func",
                                                "samples": {"sampleType": "SAMPLE_TYPE_UNSPECIFIED"},
                                                "histogram": {"buckets": 2}
                                            }
                                        ]
                                    }
                                ],
                                "type": "E2M_TYPE_UNSPECIFIED",
                                "spansQuery": {
                                    "lucene": "applicationName:myApp",
                                    "applicationnameFilters": "myApp",
                                    "subsystemnameFilters": "mySubsystem",
                                    "actionFilters": "myAction",
                                    "serviceFilters": "myService"
                                },
                                "logsQuery": {
                                    "lucene": "log_obj.numeric_field: [50 TO 100]",
                                    "alias": "new_query",
                                    "applicationnameFilters": "app_name",
                                    "subsystemnameFilters": "sub_name",
                                    "severityFilters": ["SEVERITY_UNSPECIFIED"]
                                },
                                "isInternal": True
                            }},
                        "delete": {"id": "d6a3658e-78d2-47d0-9b81-b2c551f01b09"}
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/atomic_batch_execute \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requests":[{"create":{"e2m":{"name":"Service catalog latency","description":"avg and max the latency of catalog service","permutationsLimit":30000,"metricLabels":[{"targetLabel":"alias_label_name","sourceField":"log_obj.string_value"}],"metricFields":[{"targetBaseMetricName":"alias_field_name","sourceField":"log_obj.numeric_field","aggregations":[{"enabled":true,"aggType":"AGG_TYPE_UNSPECIFIED","targetMetricName":"alias_field_name_agg_func","samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"histogram":{"buckets":2}}]}],"type":"E2M_TYPE_UNSPECIFIED","spansQuery":{"lucene":"applicationName:myApp","applicationnameFilters":"myApp","subsystemnameFilters":"mySubsystem","actionFilters":"myAction","serviceFilters":"myService"},"logsQuery":{"lucene":"log_obj.numeric_field: [50 TO 100]","alias":"new_query","applicationnameFilters":"app_name","subsystemnameFilters":"sub_name","severityFilters":["SEVERITY_UNSPECIFIED"]}}},"replace":{"e2m":{"id":"d6a3658e-78d2-47d0-9b81-b2c551f01b09","name":"Service_catalog_latency","description":"avg and max the latency of catalog service","createTime":"2022-06-30T12:30:00Z'\''","updateTime":"2022-06-30T12:30:00Z'\''","permutations":{"limit":30000,"hasExceededLimit":true},"metricLabels":[{"targetLabel":"alias_label_name","sourceField":"log_obj.string_value"}],"metricFields":[{"targetBaseMetricName":"alias_field_name","sourceField":"log_obj.numeric_field","aggregations":[{"enabled":true,"aggType":"AGG_TYPE_UNSPECIFIED","targetMetricName":"alias_field_name_agg_func","samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"histogram":{"buckets":2}}]}],"type":"E2M_TYPE_UNSPECIFIED","spansQuery":{"lucene":"applicationName:myApp","applicationnameFilters":"myApp","subsystemnameFilters":"mySubsystem","actionFilters":"myAction","serviceFilters":"myService"},"logsQuery":{"lucene":"log_obj.numeric_field: [50 TO 100]","alias":"new_query","applicationnameFilters":"app_name","subsystemnameFilters":"sub_name","severityFilters":["SEVERITY_UNSPECIFIED"]},"isInternal":true}},"delete":{"id":"d6a3658e-78d2-47d0-9b81-b2c551f01b09"}}]}'
      description: No description available
  /api/v2/events2metrics/labels_cardinality:
    get:
      summary: List E2M Labels Cardinality
      operationId: Events2MetricService_ListLabelsCardinality
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2ListLabelsCardinalityResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: spansQuery.lucene
          description: lucene query
          in: query
          required: false
          schema:
            type: string
        - name: spansQuery.applicationnameFilters
          description: application name filters
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: spansQuery.subsystemnameFilters
          description: subsystem name filters
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: spansQuery.actionFilters
          description: action filters
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: spansQuery.serviceFilters
          description: service filters
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: logsQuery.lucene
          description: lucene query
          in: query
          required: false
          schema:
            type: string
        - name: logsQuery.alias
          description: alias
          in: query
          required: false
          schema:
            type: string
        - name: logsQuery.applicationnameFilters
          description: application name filters
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: logsQuery.subsystemnameFilters
          description: subsystem names filters
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: logsQuery.severityFilters
          description: severity type filters
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - SEVERITY_UNSPECIFIED
                - SEVERITY_DEBUG
                - SEVERITY_VERBOSE
                - SEVERITY_INFO
                - SEVERITY_WARNING
                - SEVERITY_ERROR
                - SEVERITY_CRITICAL
      tags:
        - Events2Metrics Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/labels_cardinality?spansQuery.lucene=SOME_STRING_VALUE&spansQuery.applicationnameFilters=SOME_ARRAY_VALUE&spansQuery.subsystemnameFilters=SOME_ARRAY_VALUE&spansQuery.actionFilters=SOME_ARRAY_VALUE&spansQuery.serviceFilters=SOME_ARRAY_VALUE&logsQuery.lucene=SOME_STRING_VALUE&logsQuery.alias=SOME_STRING_VALUE&logsQuery.applicationnameFilters=SOME_ARRAY_VALUE&logsQuery.subsystemnameFilters=SOME_ARRAY_VALUE&logsQuery.severityFilters=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/labels_cardinality"


            querystring =
            {"spansQuery.lucene":"SOME_STRING_VALUE","spansQuery.applicationnameFilters":"SOME_ARRAY_VALUE","spansQuery.subsystemnameFilters":"SOME_ARRAY_VALUE","spansQuery.actionFilters":"SOME_ARRAY_VALUE","spansQuery.serviceFilters":"SOME_ARRAY_VALUE","logsQuery.lucene":"SOME_STRING_VALUE","logsQuery.alias":"SOME_STRING_VALUE","logsQuery.applicationnameFilters":"SOME_ARRAY_VALUE","logsQuery.subsystemnameFilters":"SOME_ARRAY_VALUE","logsQuery.severityFilters":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/labels_cardinality?spansQuery.lucene=SOME_STRING_VALUE&spansQuery.applicationnameFilters=SOME_ARRAY_VALUE&spansQuery.subsystemnameFilters=SOME_ARRAY_VALUE&spansQuery.actionFilters=SOME_ARRAY_VALUE&spansQuery.serviceFilters=SOME_ARRAY_VALUE&logsQuery.lucene=SOME_STRING_VALUE&logsQuery.alias=SOME_STRING_VALUE&logsQuery.applicationnameFilters=SOME_ARRAY_VALUE&logsQuery.subsystemnameFilters=SOME_ARRAY_VALUE&logsQuery.severityFilters=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /api/v2/events2metrics/limits:
    get:
      summary: Get E2M Limits
      operationId: Events2MetricService_GetLimits
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetLimitsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Events2Metrics Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/limits';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/limits"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/limits \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /api/v2/events2metrics/{id}:
    get:
      summary: Get an E2M
      operationId: Events2MetricService_GetE2M
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetE2MResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - Events2Metrics Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      summary: Delete an E2M
      operationId: Events2MetricService_DeleteE2M
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2DeleteE2MResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          description: id of e2m to be deleted
          in: path
          required: true
          schema:
            type: string
      tags:
        - Events2Metrics Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /enrichments:
    get:
      summary: Get Enrichments
      operationId: EnrichmentService_GetEnrichments
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetEnrichmentsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/enrichments';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/enrichments"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/enrichments \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      summary: Delete Enrichments
      operationId: EnrichmentService_RemoveEnrichments
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1RemoveEnrichmentsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: enrichmentIds
          in: query
          required: true
          explode: true
          schema:
            type: array
            items:
              type: integer
              format: int64
      tags:
        - Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/enrichments?enrichmentIds=SOME_ARRAY_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/enrichments"


            querystring = {"enrichmentIds":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/enrichments?enrichmentIds=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      summary: Add Enrichments
      operationId: EnrichmentService_AddEnrichments
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1AddEnrichmentsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1AddEnrichmentsRequest'
        description: This response data structure represents a collection of enrichments
        required: true
      tags:
        - Enrichments Service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/enrichments';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestEnrichments":[{"fieldName":"sourceIPs","enrichmentType":{"geoIp":{"withAsn":true},"suspiciousIp":{},"aws":{"resourceType":"ec2"},"customEnrichment":{"id":1}},"enrichedFieldName":"string","selectedColumns":["string"]}]}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/enrichments"


            payload = {"requestEnrichments": [
                    {
                        "fieldName": "sourceIPs",
                        "enrichmentType": {
                            "geoIp": {"withAsn": True},
                            "suspiciousIp": {},
                            "aws": {"resourceType": "ec2"},
                            "customEnrichment": {"id": 1}
                        },
                        "enrichedFieldName": "string",
                        "selectedColumns": ["string"]
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/enrichments \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestEnrichments":[{"fieldName":"sourceIPs","enrichmentType":{"geoIp":{"withAsn":true},"suspiciousIp":{},"aws":{"resourceType":"ec2"},"customEnrichment":{"id":1}},"enrichedFieldName":"string","selectedColumns":["string"]}]}'
      description: No description available
  /enrichments/limit:
    get:
      summary: Get Enrichment Limit
      operationId: EnrichmentService_GetEnrichmentLimit
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetEnrichmentLimitResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/enrichments/limit';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/enrichments/limit"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/enrichments/limit \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /enrichments/settings:
    get:
      summary: Get Company Enrichment Settings
      operationId: EnrichmentService_GetCompanyEnrichmentSettings
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetCompanyEnrichmentSettingsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/enrichments/settings';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/enrichments/settings"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/enrichments/settings \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /enrichments:atomicOverwrite:
    patch:
      summary: Atomic Overwrite Enrichments
      operationId: EnrichmentService_AtomicOverwriteEnrichments
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1AtomicOverwriteEnrichmentsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1AtomicOverwriteEnrichmentsRequest'
        required: true
      tags:
        - Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/enrichments:atomicOverwrite';


            let options = {
              method: 'PATCH',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"enrichmentType":{"geoIp":{"withAsn":true},"suspiciousIp":{},"aws":{"resourceType":"ec2"},"customEnrichment":{"id":1}},"enrichmentFields":[{"fieldName":"string","enrichedFieldName":"string","selectedColumns":["string"]}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/enrichments:atomicOverwrite"


            payload = {
                "enrichmentType": {
                    "geoIp": {"withAsn": True},
                    "suspiciousIp": {},
                    "aws": {"resourceType": "ec2"},
                    "customEnrichment": {"id": 1}
                },
                "enrichmentFields": [
                    {
                        "fieldName": "string",
                        "enrichedFieldName": "string",
                        "selectedColumns": ["string"]
                    }
                ]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PATCH", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PATCH \
              --url https://api.coralogix.com/mgmt/openapi/enrichments:atomicOverwrite \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"enrichmentType":{"geoIp":{"withAsn":true},"suspiciousIp":{},"aws":{"resourceType":"ec2"},"customEnrichment":{"id":1}},"enrichmentFields":[{"fieldName":"string","enrichedFieldName":"string","selectedColumns":["string"]}]}'
      description: No description available
  /metrics-tco:
    get:
      operationId: MetricsTcoService_Get
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metrics_tcoGetResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - MetricsTcoService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/metrics-tco';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/metrics-tco"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/metrics-tco \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /metrics-tco/add:
    post:
      operationId: MetricsTcoService_Add
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metrics_tcoAddRequest'
        description: This data structure is used to add a metrics tco rule.
        required: true
      tags:
        - MetricsTcoService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/metrics-tco/add';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"label":"rule1","regex":".*"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/metrics-tco/add"


            payload = {
                "label": "rule1",
                "regex": ".*"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/metrics-tco/add \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"label":"rule1","regex":".*"}'
      description: No description available
  /metrics-tco/delete:
    post:
      operationId: MetricsTcoService_Delete
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metrics_tcoDeleteRequest'
        required: true
      tags:
        - MetricsTcoService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/metrics-tco/delete';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"ruleId":1}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/metrics-tco/delete"


            payload = {"ruleId": 1}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/metrics-tco/delete \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"ruleId":1}'
      description: No description available
  /v1/contextual-data/integration:
    post:
      summary: Save contextual data integration
      operationId: ContextualDataIntegrationService_SaveContextualDataIntegration
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1SaveContextualDataIntegrationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1SaveContextualDataIntegrationRequest'
        required: true
      tags:
        - Contextual data integration service
      x-coralogixPermissions:
        - contextual-data:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integration';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"metadata":{"integrationKey":"string","version":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string","booleanValue":true,"stringList":{"values":["string"]},"apiKey":{"id":"string","value":"string"},"numericValue":0.1,"sensitiveData":{}}]}}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integration"


            payload = {"metadata": {
                    "integrationKey": "string",
                    "version": "string",
                    "integrationParameters": {"parameters": [
                            {
                                "key": "string",
                                "stringValue": "string",
                                "booleanValue": True,
                                "stringList": {"values": ["string"]},
                                "apiKey": {
                                    "id": "string",
                                    "value": "string"
                                },
                                "numericValue": 0.1,
                                "sensitiveData": {}
                            }
                        ]}
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integration \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"metadata":{"integrationKey":"string","version":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string","booleanValue":true,"stringList":{"values":["string"]},"apiKey":{"id":"string","value":"string"},"numericValue":0.1,"sensitiveData":{}}]}}}'
      description: No description available
    put:
      summary: Update contextual data integration
      operationId: ContextualDataIntegrationService_UpdateContextualDataIntegration
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdateContextualDataIntegrationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UpdateContextualDataIntegrationRequest'
        required: true
      tags:
        - Contextual data integration service
      x-coralogixPermissions:
        - contextual-data:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integration';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"integrationId":"string","metadata":{"integrationKey":"string","version":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string","booleanValue":true,"stringList":{"values":["string"]},"apiKey":{"id":"string","value":"string"},"numericValue":0.1,"sensitiveData":{}}]}}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integration"


            payload = {
                "integrationId": "string",
                "metadata": {
                    "integrationKey": "string",
                    "version": "string",
                    "integrationParameters": {"parameters": [
                            {
                                "key": "string",
                                "stringValue": "string",
                                "booleanValue": True,
                                "stringList": {"values": ["string"]},
                                "apiKey": {
                                    "id": "string",
                                    "value": "string"
                                },
                                "numericValue": 0.1,
                                "sensitiveData": {}
                            }
                        ]}
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integration \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"integrationId":"string","metadata":{"integrationKey":"string","version":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string","booleanValue":true,"stringList":{"values":["string"]},"apiKey":{"id":"string","value":"string"},"numericValue":0.1,"sensitiveData":{}}]}}}'
      description: No description available
  /v1/contextual-data/integration/test:
    post:
      summary: Test contextual data integration
      operationId: ContextualDataIntegrationService_TestContextualDataIntegration
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestContextualDataIntegrationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestContextualDataIntegrationRequest'
        required: true
      tags:
        - Contextual data integration service
      x-coralogixPermissions:
        - contextual-data:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integration/test';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"integrationData":{"integrationKey":"string","version":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string","booleanValue":true,"stringList":{"values":["string"]},"apiKey":{"id":"string","value":"string"},"numericValue":0.1,"sensitiveData":{}}]}},"integrationId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integration/test"


            payload = {
                "integrationData": {
                    "integrationKey": "string",
                    "version": "string",
                    "integrationParameters": {"parameters": [
                            {
                                "key": "string",
                                "stringValue": "string",
                                "booleanValue": True,
                                "stringList": {"values": ["string"]},
                                "apiKey": {
                                    "id": "string",
                                    "value": "string"
                                },
                                "numericValue": 0.1,
                                "sensitiveData": {}
                            }
                        ]}
                },
                "integrationId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integration/test \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"integrationData":{"integrationKey":"string","version":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string","booleanValue":true,"stringList":{"values":["string"]},"apiKey":{"id":"string","value":"string"},"numericValue":0.1,"sensitiveData":{}}]}},"integrationId":"string"}'
      description: No description available
  /v1/contextual-data/integration/{integrationId}:
    delete:
      summary: Delete contextual data integration
      operationId: ContextualDataIntegrationService_DeleteContextualDataIntegration
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeleteContextualDataIntegrationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Contextual data integration service
      x-coralogixPermissions:
        - contextual-data:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integration/%7BintegrationId%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integration/%7BintegrationId%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integration/%7BintegrationId%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/contextual-data/integrations:
    get:
      summary: Get all contextual data integrations accessible
      operationId: ContextualDataIntegrationService_GetContextualDataIntegrations
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetContextualDataIntegrationsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: includeTestingIntegrations
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - Contextual data integration service
      x-coralogixPermissions:
        - contextual-data:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integrations?includeTestingIntegrations=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integrations"


            querystring = {"includeTestingIntegrations":"SOME_BOOLEAN_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integrations?includeTestingIntegrations=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/contextual-data/integrations/definition/{id}:
    get:
      summary: Get contextual data integration definition
      operationId: ContextualDataIntegrationService_GetContextualDataIntegrationDefinition
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/v1GetContextualDataIntegrationDefinitionResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: includeTestingIntegrations
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - Contextual data integration service
      x-coralogixPermissions:
        - contextual-data:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integrations/definition/%7Bid%7D?includeTestingIntegrations=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integrations/definition/%7Bid%7D"


            querystring = {"includeTestingIntegrations":"SOME_BOOLEAN_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integrations/definition/%7Bid%7D?includeTestingIntegrations=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/contextual-data/integrations/{id}:
    get:
      summary: Get contextual data integration details
      operationId: ContextualDataIntegrationService_GetContextualDataIntegrationDetails
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/v1GetContextualDataIntegrationDetailsResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: includeTestingRevisions
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - Contextual data integration service
      x-coralogixPermissions:
        - contextual-data:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integrations/%7Bid%7D?includeTestingRevisions=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integrations/%7Bid%7D"


            querystring = {"includeTestingRevisions":"SOME_BOOLEAN_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integrations/%7Bid%7D?includeTestingRevisions=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/custom_enrichment:
    get:
      summary: Get Custom Enrichments
      operationId: CustomEnrichmentService_GetCustomEnrichments
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetCustomEnrichmentsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Custom Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      summary: Create Custom Enrichments
      operationId: CustomEnrichmentService_CreateCustomEnrichment
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateCustomEnrichmentResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CreateCustomEnrichmentRequest'
        description: This request data structure is used to create a custom enrichment
        required: true
      tags:
        - Custom Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"custom_enrichment_name","description":"custom_enrichment_description","file":{"name":"file_name","extension":"csv","size":100,"textual":"row1,row2 value1,value2","binary":"0xFABB32"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment"


            payload = {
                "name": "custom_enrichment_name",
                "description": "custom_enrichment_description",
                "file": {
                    "name": "file_name",
                    "extension": "csv",
                    "size": 100,
                    "textual": "row1,row2 value1,value2",
                    "binary": "0xFABB32"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"custom_enrichment_name","description":"custom_enrichment_description","file":{"name":"file_name","extension":"csv","size":100,"textual":"row1,row2 value1,value2","binary":"0xFABB32"}}'
      description: No description available
    put:
      summary: Update Custom Enrichment
      operationId: CustomEnrichmentService_UpdateCustomEnrichment
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdateCustomEnrichmentResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UpdateCustomEnrichmentRequest'
        description: This request data structure is used to update a custom enrichment
        required: true
      tags:
        - Custom Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"customEnrichmentId":1,"name":"custom_enrichment_name","description":"custom_enrichment_description","file":{"name":"file_name","extension":"csv","size":100,"textual":"row1,row2 value1,value2","binary":"0xFABB32"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment"


            payload = {
                "customEnrichmentId": 1,
                "name": "custom_enrichment_name",
                "description": "custom_enrichment_description",
                "file": {
                    "name": "file_name",
                    "extension": "csv",
                    "size": 100,
                    "textual": "row1,row2 value1,value2",
                    "binary": "0xFABB32"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"customEnrichmentId":1,"name":"custom_enrichment_name","description":"custom_enrichment_description","file":{"name":"file_name","extension":"csv","size":100,"textual":"row1,row2 value1,value2","binary":"0xFABB32"}}'
      description: No description available
  /v1/custom_enrichment/search:
    post:
      summary: Search Custom Enrichment Data
      operationId: CustomEnrichmentService_SearchCustomEnrichmentData
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1SearchCustomEnrichmentDataResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Custom Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment/search';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment/search"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment/search \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/custom_enrichment/{customEnrichmentId}:
    delete:
      summary: Delete Custom Enrichments
      operationId: CustomEnrichmentService_DeleteCustomEnrichment
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeleteCustomEnrichmentResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: customEnrichmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - Custom Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment/%7BcustomEnrichmentId%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment/%7BcustomEnrichmentId%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment/%7BcustomEnrichmentId%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/custom_enrichment/{id}:
    get:
      summary: Get Custom Enrichment
      operationId: CustomEnrichmentService_GetCustomEnrichment
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetCustomEnrichmentResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - Custom Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/dashboards/catalog:
    get:
      summary: Get dashboard catalog
      description: |-
        Get a list of all dashboards accessible.

        Requires the following permissions:
        - `team-dashboards:Read`
      operationId: DashboardCatalogService_GetDashboardCatalog
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesGetDashboardCatalogResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Dashboard service
      x-coralogixPermissions:
        - team-dashboards:Read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/catalog';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/dashboards/catalog"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/catalog \
              --header 'Authorization: Bearer <API_KEY>'
  /v1/dashboards/dashboards:
    post:
      summary: Create a new dashboard
      operationId: DashboardsService_CreateDashboard
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesCreateDashboardResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicesCreateDashboardRequest'
        required: true
      tags:
        - Dashboard service
      x-coralogixPermissions:
        - team-dashboards:Update
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestId":"string","dashboard":{"id":"string","name":"string","description":"string","layout":{"sections":[{"id":{"value":"string"},"rows":[{"id":{"value":"string"},"appearance":{"height":0},"widgets":[{"id":{"value":"string"},"title":"string","description":"string","definition":{"lineChart":{"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"tooltip":{"showLabels":true,"type":"TOOLTIP_TYPE_UNSPECIFIED"},"queryDefinitions":[{"id":"string","query":{"logs":{"groupBy":[],"aggregations":[],"filters":[],"groupBys":[]},"metrics":{"filters":[]},"spans":{"groupBy":[],"aggregations":[],"filters":[],"groupBys":[]},"dataprime":{"filters":[]}},"seriesNameTemplate":"string","seriesCountLimit":"string","unit":"UNIT_UNSPECIFIED","scaleType":"SCALE_TYPE_UNSPECIFIED","name":"string","isVisible":true,"colorScheme":"string","resolution":{"interval":"string","bucketsPresented":0},"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"customLinks":[{}]}],"stackedLine":"STACKED_LINE_UNSPECIFIED"},"dataTable":{"query":{"logs":{"luceneQuery":{"value":"string"},"filters":[{}],"grouping":{"groupBy":[null],"aggregations":[null],"groupBys":[null]},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"filters":[{}],"grouping":{"groupBy":[null],"aggregations":[null],"groupBys":[null]},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"resultsPerPage":0,"rowStyle":"ROW_STYLE_UNSPECIFIED","columns":[{"field":"string","width":0}],"orderBy":{"field":"string","orderDirection":"ORDER_DIRECTION_UNSPECIFIED"},"customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}],"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED"},"gauge":{"query":{"metrics":{"promqlQuery":{"value":"string"},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"logs":{"luceneQuery":{"value":"string"},"logsAggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"groupBy":[{"keypath":[]}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"spansAggregation":{"metricAggregation":{},"dimensionAggregation":{}},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"groupBy":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"groupBys":[{"keypath":[]}]},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"min":0.1,"max":0.1,"showInnerArc":true,"showOuterArc":true,"unit":"UNIT_UNSPECIFIED","thresholds":[{"from":0.1,"color":"string","label":"string"}],"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","thresholdBy":"THRESHOLD_BY_UNSPECIFIED","customUnit":"string","decimal":0,"thresholdType":"THRESHOLD_TYPE_UNSPECIFIED","legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"legendBy":"LEGEND_BY_UNSPECIFIED","displaySeriesName":true,"customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}]},"pieChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxSlicesPerChart":0,"minSlicePercentage":0,"stackDefinition":{"maxSlicesPerStack":0,"stackNameTemplate":"string"},"labelDefinition":{"labelSource":"LABEL_SOURCE_UNSPECIFIED","isVisible":true,"showName":true,"showValue":true,"showPercentage":true},"showLegend":true,"groupNameTemplate":"string","unit":"UNIT_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}]},"barChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxBarsPerChart":0,"groupNameTemplate":"string","stackDefinition":{"maxSlicesPerBar":0,"stackNameTemplate":"string"},"scaleType":"SCALE_TYPE_UNSPECIFIED","colorsBy":{"stack":{},"groupBy":{},"aggregation":{}},"xAxis":{"value":{},"time":{"interval":"string","bucketsPresented":0}},"unit":"UNIT_UNSPECIFIED","sortBy":"SORT_BY_TYPE_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","barValueDisplay":"BAR_VALUE_DISPLAY_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}]},"horizontalBarChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxBarsPerChart":0,"groupNameTemplate":"string","stackDefinition":{"maxSlicesPerBar":0,"stackNameTemplate":"string"},"scaleType":"SCALE_TYPE_UNSPECIFIED","colorsBy":{"stack":{},"groupBy":{},"aggregation":{}},"unit":"UNIT_UNSPECIFIED","displayOnBar":true,"yAxisViewBy":{"category":{},"value":{}},"sortBy":"SORT_BY_TYPE_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}]},"markdown":{"markdownText":"string","tooltipText":"string"},"hexagon":{"query":{"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"aggregation":"AGGREGATION_UNSPECIFIED","promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"logs":{"luceneQuery":{"value":"string"},"logsAggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupBy":[{"keypath":[]}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"spansAggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupBy":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"groupBys":[{"keypath":[]}]},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"min":0.1,"max":0.1,"unit":"UNIT_UNSPECIFIED","thresholds":[{"from":0.1,"color":"string","label":"string"}],"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"thresholdType":"THRESHOLD_TYPE_UNSPECIFIED","legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"legendBy":"LEGEND_BY_UNSPECIFIED","customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}]}},"appearance":{"width":0},"createdAt":"2019-08-24T14:15:22Z","updatedAt":"2019-08-24T14:15:22Z"}]}],"options":{"internal":{},"custom":{"name":"string","description":"string","collapsed":true,"color":{"predefined":"SECTION_PREDEFINED_COLOR_UNSPECIFIED"}}}}]},"variables":[{"name":"string","definition":{"constant":{"value":"string"},"multiSelect":{"selected":["string"],"source":{"logsPath":{"value":"string","observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metricLabel":{"metricName":"string","label":"string"},"constantList":{"values":["string"]},"spanField":{"value":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"}},"query":{"query":{"logsQuery":{"type":{"fieldName":{"logRegex":"string"},"fieldValue":{"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}}},"metricsQuery":{"type":{"metricName":{"metricRegex":"string"},"labelName":{"metricRegex":"string"},"labelValue":{"metricName":{"stringValue":"string","variableName":"string"},"labelName":{"stringValue":"string","variableName":"string"},"labelFilters":[{"metric":{},"label":{},"operator":{}}]}}},"spansQuery":{"type":{"fieldName":{"spanRegex":"string"},"fieldValue":{"value":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}}}},"refreshStrategy":"REFRESH_STRATEGY_UNSPECIFIED","valueDisplayOptions":{"valueRegex":"string","labelRegex":"string"}}},"selection":{"all":{},"list":{"values":["string"],"labels":["string"]}},"valuesOrderDirection":"ORDER_DIRECTION_UNSPECIFIED","selectionOptions":{"selectionType":"SELECTION_TYPE_UNSPECIFIED"}}},"displayName":"string","description":"string","displayType":"VARIABLE_DISPLAY_TYPE_UNSPECIFIED"}],"filters":[{"source":{"logs":{"field":"string","operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}},"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"spans":{"field":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}},"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metrics":{"metric":"string","label":"string","operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}}}},"enabled":true,"collapsed":true}],"absoluteTimeFrame":{"from":"2019-08-24T14:15:22Z","to":"2019-08-24T14:15:22Z"},"relativeTimeFrame":"string","folderId":{"value":"string"},"folderPath":{"segments":["string"]},"annotations":[{"id":"string","name":"string","enabled":true,"source":{"metrics":{"promqlQuery":{"value":"string"},"strategy":{"startTimeMetric":{}},"messageTemplate":"string","labels":["string"]},"logs":{"luceneQuery":{"value":"string"},"strategy":{"instant":{"timestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"range":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"endTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"duration":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"durationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}},"messageTemplate":"string","labelFields":[{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}]},"spans":{"luceneQuery":{"value":"string"},"strategy":{"instant":{"timestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"range":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"endTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"duration":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"durationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}},"messageTemplate":"string","labelFields":[{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}]}}}],"off":{},"twoMinutes":{},"fiveMinutes":{}},"isLocked":true}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards"


            payload = {
                "requestId": "string",
                "dashboard": {
                    "id": "string",
                    "name": "string",
                    "description": "string",
                    "layout": {"sections": [
                            {
                                "id": {"value": "string"},
                                "rows": [
                                    {
                                        "id": {"value": "string"},
                                        "appearance": {"height": 0},
                                        "widgets": [
                                            {
                                                "id": {"value": "string"},
                                                "title": "string",
                                                "description": "string",
                                                "definition": {
                                                    "lineChart": {
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        },
                                                        "tooltip": {
                                                            "showLabels": True,
                                                            "type": "TOOLTIP_TYPE_UNSPECIFIED"
                                                        },
                                                        "queryDefinitions": [
                                                            {
                                                                "id": "string",
                                                                "query": {
                                                                    "logs": {
                                                                        "groupBy": [],
                                                                        "aggregations": [],
                                                                        "filters": [],
                                                                        "groupBys": []
                                                                    },
                                                                    "metrics": {"filters": []},
                                                                    "spans": {
                                                                        "groupBy": [],
                                                                        "aggregations": [],
                                                                        "filters": [],
                                                                        "groupBys": []
                                                                    },
                                                                    "dataprime": {"filters": []}
                                                                },
                                                                "seriesNameTemplate": "string",
                                                                "seriesCountLimit": "string",
                                                                "unit": "UNIT_UNSPECIFIED",
                                                                "scaleType": "SCALE_TYPE_UNSPECIFIED",
                                                                "name": "string",
                                                                "isVisible": True,
                                                                "colorScheme": "string",
                                                                "resolution": {
                                                                    "interval": "string",
                                                                    "bucketsPresented": 0
                                                                },
                                                                "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                                "customUnit": "string",
                                                                "decimal": 0,
                                                                "customLinks": [{}]
                                                            }
                                                        ],
                                                        "stackedLine": "STACKED_LINE_UNSPECIFIED"
                                                    },
                                                    "dataTable": {
                                                        "query": {
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "grouping": {
                                                                    "groupBy": [None],
                                                                    "aggregations": [None],
                                                                    "groupBys": [None]
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "grouping": {
                                                                    "groupBy": [None],
                                                                    "aggregations": [None],
                                                                    "groupBys": [None]
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED"
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "resultsPerPage": 0,
                                                        "rowStyle": "ROW_STYLE_UNSPECIFIED",
                                                        "columns": [
                                                            {
                                                                "field": "string",
                                                                "width": 0
                                                            }
                                                        ],
                                                        "orderBy": {
                                                            "field": "string",
                                                            "orderDirection": "ORDER_DIRECTION_UNSPECIFIED"
                                                        },
                                                        "customLinks": [
                                                            {
                                                                "id": {"value": "string"},
                                                                "linkName": "string",
                                                                "openInNewWindow": True,
                                                                "isPrivate": True,
                                                                "createdBy": "string",
                                                                "custom": {"url": "string"},
                                                                "template": {
                                                                    "url": "string",
                                                                    "type": "CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"
                                                                }
                                                            }
                                                        ],
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED"
                                                    },
                                                    "gauge": {
                                                        "query": {
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "aggregation": "AGGREGATION_UNSPECIFIED",
                                                                "filters": [{}],
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED"
                                                            },
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "logsAggregation": {
                                                                    "count": {},
                                                                    "countDistinct": {},
                                                                    "sum": {},
                                                                    "average": {},
                                                                    "min": {},
                                                                    "max": {},
                                                                    "percentile": {}
                                                                },
                                                                "aggregation": "AGGREGATION_UNSPECIFIED",
                                                                "filters": [{}],
                                                                "groupBy": [{"keypath": []}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "spansAggregation": {
                                                                    "metricAggregation": {},
                                                                    "dimensionAggregation": {}
                                                                },
                                                                "aggregation": "AGGREGATION_UNSPECIFIED",
                                                                "filters": [{}],
                                                                "groupBy": [{}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "groupBys": [{"keypath": []}]
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "min": 0.1,
                                                        "max": 0.1,
                                                        "showInnerArc": True,
                                                        "showOuterArc": True,
                                                        "unit": "UNIT_UNSPECIFIED",
                                                        "thresholds": [
                                                            {
                                                                "from": 0.1,
                                                                "color": "string",
                                                                "label": "string"
                                                            }
                                                        ],
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                        "thresholdBy": "THRESHOLD_BY_UNSPECIFIED",
                                                        "customUnit": "string",
                                                        "decimal": 0,
                                                        "thresholdType": "THRESHOLD_TYPE_UNSPECIFIED",
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        },
                                                        "legendBy": "LEGEND_BY_UNSPECIFIED",
                                                        "displaySeriesName": True,
                                                        "customLinks": [
                                                            {
                                                                "id": {"value": "string"},
                                                                "linkName": "string",
                                                                "openInNewWindow": True,
                                                                "isPrivate": True,
                                                                "createdBy": "string",
                                                                "custom": {"url": "string"},
                                                                "template": {
                                                                    "url": "string",
                                                                    "type": "CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "pieChart": {
                                                        "query": {
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "count": {},
                                                                    "countDistinct": {},
                                                                    "sum": {},
                                                                    "average": {},
                                                                    "min": {},
                                                                    "max": {},
                                                                    "percentile": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "groupNamesFields": [{"keypath": []}],
                                                                "stackedGroupNameField": {
                                                                    "keypath": [None],
                                                                    "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "metricAggregation": {},
                                                                    "dimensionAggregation": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": [{}],
                                                                "stackedGroupName": {
                                                                    "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                                                    "tagField": "string",
                                                                    "processTagField": "string"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "groupNamesFields": [{"keypath": []}],
                                                                "stackedGroupNameField": {
                                                                    "keypath": [None],
                                                                    "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                                }
                                                            },
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED",
                                                                "aggregation": "AGGREGATION_UNSPECIFIED"
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "maxSlicesPerChart": 0,
                                                        "minSlicePercentage": 0,
                                                        "stackDefinition": {
                                                            "maxSlicesPerStack": 0,
                                                            "stackNameTemplate": "string"
                                                        },
                                                        "labelDefinition": {
                                                            "labelSource": "LABEL_SOURCE_UNSPECIFIED",
                                                            "isVisible": True,
                                                            "showName": True,
                                                            "showValue": True,
                                                            "showPercentage": True
                                                        },
                                                        "showLegend": True,
                                                        "groupNameTemplate": "string",
                                                        "unit": "UNIT_UNSPECIFIED",
                                                        "colorScheme": "string",
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                        "customUnit": "string",
                                                        "decimal": 0,
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        },
                                                        "customLinks": [
                                                            {
                                                                "id": {"value": "string"},
                                                                "linkName": "string",
                                                                "openInNewWindow": True,
                                                                "isPrivate": True,
                                                                "createdBy": "string",
                                                                "custom": {"url": "string"},
                                                                "template": {
                                                                    "url": "string",
                                                                    "type": "CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "barChart": {
                                                        "query": {
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "count": {},
                                                                    "countDistinct": {},
                                                                    "sum": {},
                                                                    "average": {},
                                                                    "min": {},
                                                                    "max": {},
                                                                    "percentile": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "groupNamesFields": [{"keypath": []}],
                                                                "stackedGroupNameField": {
                                                                    "keypath": [None],
                                                                    "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "metricAggregation": {},
                                                                    "dimensionAggregation": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": [{}],
                                                                "stackedGroupName": {
                                                                    "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                                                    "tagField": "string",
                                                                    "processTagField": "string"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "groupNamesFields": [{"keypath": []}],
                                                                "stackedGroupNameField": {
                                                                    "keypath": [None],
                                                                    "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                                }
                                                            },
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED",
                                                                "aggregation": "AGGREGATION_UNSPECIFIED"
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "maxBarsPerChart": 0,
                                                        "groupNameTemplate": "string",
                                                        "stackDefinition": {
                                                            "maxSlicesPerBar": 0,
                                                            "stackNameTemplate": "string"
                                                        },
                                                        "scaleType": "SCALE_TYPE_UNSPECIFIED",
                                                        "colorsBy": {
                                                            "stack": {},
                                                            "groupBy": {},
                                                            "aggregation": {}
                                                        },
                                                        "xAxis": {
                                                            "value": {},
                                                            "time": {
                                                                "interval": "string",
                                                                "bucketsPresented": 0
                                                            }
                                                        },
                                                        "unit": "UNIT_UNSPECIFIED",
                                                        "sortBy": "SORT_BY_TYPE_UNSPECIFIED",
                                                        "colorScheme": "string",
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                        "barValueDisplay": "BAR_VALUE_DISPLAY_UNSPECIFIED",
                                                        "customUnit": "string",
                                                        "decimal": 0,
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        },
                                                        "customLinks": [
                                                            {
                                                                "id": {"value": "string"},
                                                                "linkName": "string",
                                                                "openInNewWindow": True,
                                                                "isPrivate": True,
                                                                "createdBy": "string",
                                                                "custom": {"url": "string"},
                                                                "template": {
                                                                    "url": "string",
                                                                    "type": "CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "horizontalBarChart": {
                                                        "query": {
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "count": {},
                                                                    "countDistinct": {},
                                                                    "sum": {},
                                                                    "average": {},
                                                                    "min": {},
                                                                    "max": {},
                                                                    "percentile": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "groupNamesFields": [{"keypath": []}],
                                                                "stackedGroupNameField": {
                                                                    "keypath": [None],
                                                                    "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "metricAggregation": {},
                                                                    "dimensionAggregation": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": [{}],
                                                                "stackedGroupName": {
                                                                    "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                                                    "tagField": "string",
                                                                    "processTagField": "string"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "groupNamesFields": [{"keypath": []}],
                                                                "stackedGroupNameField": {
                                                                    "keypath": [None],
                                                                    "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                                }
                                                            },
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED",
                                                                "aggregation": "AGGREGATION_UNSPECIFIED"
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "maxBarsPerChart": 0,
                                                        "groupNameTemplate": "string",
                                                        "stackDefinition": {
                                                            "maxSlicesPerBar": 0,
                                                            "stackNameTemplate": "string"
                                                        },
                                                        "scaleType": "SCALE_TYPE_UNSPECIFIED",
                                                        "colorsBy": {
                                                            "stack": {},
                                                            "groupBy": {},
                                                            "aggregation": {}
                                                        },
                                                        "unit": "UNIT_UNSPECIFIED",
                                                        "displayOnBar": True,
                                                        "yAxisViewBy": {
                                                            "category": {},
                                                            "value": {}
                                                        },
                                                        "sortBy": "SORT_BY_TYPE_UNSPECIFIED",
                                                        "colorScheme": "string",
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                        "customUnit": "string",
                                                        "decimal": 0,
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        },
                                                        "customLinks": [
                                                            {
                                                                "id": {"value": "string"},
                                                                "linkName": "string",
                                                                "openInNewWindow": True,
                                                                "isPrivate": True,
                                                                "createdBy": "string",
                                                                "custom": {"url": "string"},
                                                                "template": {
                                                                    "url": "string",
                                                                    "type": "CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "markdown": {
                                                        "markdownText": "string",
                                                        "tooltipText": "string"
                                                    },
                                                    "hexagon": {
                                                        "query": {
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "aggregation": "AGGREGATION_UNSPECIFIED",
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED"
                                                            },
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "logsAggregation": {
                                                                    "count": {},
                                                                    "countDistinct": {},
                                                                    "sum": {},
                                                                    "average": {},
                                                                    "min": {},
                                                                    "max": {},
                                                                    "percentile": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupBy": [{"keypath": []}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "spansAggregation": {
                                                                    "metricAggregation": {},
                                                                    "dimensionAggregation": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupBy": [{}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "groupBys": [{"keypath": []}]
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "min": 0.1,
                                                        "max": 0.1,
                                                        "unit": "UNIT_UNSPECIFIED",
                                                        "thresholds": [
                                                            {
                                                                "from": 0.1,
                                                                "color": "string",
                                                                "label": "string"
                                                            }
                                                        ],
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                        "customUnit": "string",
                                                        "decimal": 0,
                                                        "thresholdType": "THRESHOLD_TYPE_UNSPECIFIED",
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        },
                                                        "legendBy": "LEGEND_BY_UNSPECIFIED",
                                                        "customLinks": [
                                                            {
                                                                "id": {"value": "string"},
                                                                "linkName": "string",
                                                                "openInNewWindow": True,
                                                                "isPrivate": True,
                                                                "createdBy": "string",
                                                                "custom": {"url": "string"},
                                                                "template": {
                                                                    "url": "string",
                                                                    "type": "CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                "appearance": {"width": 0},
                                                "createdAt": "2019-08-24T14:15:22Z",
                                                "updatedAt": "2019-08-24T14:15:22Z"
                                            }
                                        ]
                                    }
                                ],
                                "options": {
                                    "internal": {},
                                    "custom": {
                                        "name": "string",
                                        "description": "string",
                                        "collapsed": True,
                                        "color": {"predefined": "SECTION_PREDEFINED_COLOR_UNSPECIFIED"}
                                    }
                                }
                            }
                        ]},
                    "variables": [
                        {
                            "name": "string",
                            "definition": {
                                "constant": {"value": "string"},
                                "multiSelect": {
                                    "selected": ["string"],
                                    "source": {
                                        "logsPath": {
                                            "value": "string",
                                            "observationField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }
                                        },
                                        "metricLabel": {
                                            "metricName": "string",
                                            "label": "string"
                                        },
                                        "constantList": {"values": ["string"]},
                                        "spanField": {"value": {
                                                "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                                "tagField": "string",
                                                "processTagField": "string"
                                            }},
                                        "query": {
                                            "query": {
                                                "logsQuery": {"type": {
                                                        "fieldName": {"logRegex": "string"},
                                                        "fieldValue": {"observationField": {
                                                                "keypath": ["string"],
                                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                            }}
                                                    }},
                                                "metricsQuery": {"type": {
                                                        "metricName": {"metricRegex": "string"},
                                                        "labelName": {"metricRegex": "string"},
                                                        "labelValue": {
                                                            "metricName": {
                                                                "stringValue": "string",
                                                                "variableName": "string"
                                                            },
                                                            "labelName": {
                                                                "stringValue": "string",
                                                                "variableName": "string"
                                                            },
                                                            "labelFilters": [
                                                                {
                                                                    "metric": {},
                                                                    "label": {},
                                                                    "operator": {}
                                                                }
                                                            ]
                                                        }
                                                    }},
                                                "spansQuery": {"type": {
                                                        "fieldName": {"spanRegex": "string"},
                                                        "fieldValue": {
                                                            "value": {
                                                                "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                                                "tagField": "string",
                                                                "processTagField": "string"
                                                            },
                                                            "observationField": {
                                                                "keypath": ["string"],
                                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                            }
                                                        }
                                                    }}
                                            },
                                            "refreshStrategy": "REFRESH_STRATEGY_UNSPECIFIED",
                                            "valueDisplayOptions": {
                                                "valueRegex": "string",
                                                "labelRegex": "string"
                                            }
                                        }
                                    },
                                    "selection": {
                                        "all": {},
                                        "list": {
                                            "values": ["string"],
                                            "labels": ["string"]
                                        }
                                    },
                                    "valuesOrderDirection": "ORDER_DIRECTION_UNSPECIFIED",
                                    "selectionOptions": {"selectionType": "SELECTION_TYPE_UNSPECIFIED"}
                                }
                            },
                            "displayName": "string",
                            "description": "string",
                            "displayType": "VARIABLE_DISPLAY_TYPE_UNSPECIFIED"
                        }
                    ],
                    "filters": [
                        {
                            "source": {
                                "logs": {
                                    "field": "string",
                                    "operator": {
                                        "equals": {"selection": {
                                                "all": {},
                                                "list": {"values": ["string"]}
                                            }},
                                        "notEquals": {"selection": {"list": {"values": ["string"]}}}
                                    },
                                    "observationField": {
                                        "keypath": ["string"],
                                        "scope": "DATASET_SCOPE_UNSPECIFIED"
                                    }
                                },
                                "spans": {
                                    "field": {
                                        "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                        "tagField": "string",
                                        "processTagField": "string"
                                    },
                                    "operator": {
                                        "equals": {"selection": {
                                                "all": {},
                                                "list": {"values": ["string"]}
                                            }},
                                        "notEquals": {"selection": {"list": {"values": ["string"]}}}
                                    },
                                    "observationField": {
                                        "keypath": ["string"],
                                        "scope": "DATASET_SCOPE_UNSPECIFIED"
                                    }
                                },
                                "metrics": {
                                    "metric": "string",
                                    "label": "string",
                                    "operator": {
                                        "equals": {"selection": {
                                                "all": {},
                                                "list": {"values": ["string"]}
                                            }},
                                        "notEquals": {"selection": {"list": {"values": ["string"]}}}
                                    }
                                }
                            },
                            "enabled": True,
                            "collapsed": True
                        }
                    ],
                    "absoluteTimeFrame": {
                        "from": "2019-08-24T14:15:22Z",
                        "to": "2019-08-24T14:15:22Z"
                    },
                    "relativeTimeFrame": "string",
                    "folderId": {"value": "string"},
                    "folderPath": {"segments": ["string"]},
                    "annotations": [
                        {
                            "id": "string",
                            "name": "string",
                            "enabled": True,
                            "source": {
                                "metrics": {
                                    "promqlQuery": {"value": "string"},
                                    "strategy": {"startTimeMetric": {}},
                                    "messageTemplate": "string",
                                    "labels": ["string"]
                                },
                                "logs": {
                                    "luceneQuery": {"value": "string"},
                                    "strategy": {
                                        "instant": {"timestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }},
                                        "range": {
                                            "startTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            },
                                            "endTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }
                                        },
                                        "duration": {
                                            "startTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            },
                                            "durationField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }
                                        }
                                    },
                                    "messageTemplate": "string",
                                    "labelFields": [
                                        {
                                            "keypath": ["string"],
                                            "scope": "DATASET_SCOPE_UNSPECIFIED"
                                        }
                                    ]
                                },
                                "spans": {
                                    "luceneQuery": {"value": "string"},
                                    "strategy": {
                                        "instant": {"timestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }},
                                        "range": {
                                            "startTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            },
                                            "endTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }
                                        },
                                        "duration": {
                                            "startTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            },
                                            "durationField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }
                                        }
                                    },
                                    "messageTemplate": "string",
                                    "labelFields": [
                                        {
                                            "keypath": ["string"],
                                            "scope": "DATASET_SCOPE_UNSPECIFIED"
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "off": {},
                    "twoMinutes": {},
                    "fiveMinutes": {}
                },
                "isLocked": True
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestId":"string","dashboard":{"id":"string","name":"string","description":"string","layout":{"sections":[{"id":{"value":"string"},"rows":[{"id":{"value":"string"},"appearance":{"height":0},"widgets":[{"id":{"value":"string"},"title":"string","description":"string","definition":{"lineChart":{"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"tooltip":{"showLabels":true,"type":"TOOLTIP_TYPE_UNSPECIFIED"},"queryDefinitions":[{"id":"string","query":{"logs":{"groupBy":[],"aggregations":[],"filters":[],"groupBys":[]},"metrics":{"filters":[]},"spans":{"groupBy":[],"aggregations":[],"filters":[],"groupBys":[]},"dataprime":{"filters":[]}},"seriesNameTemplate":"string","seriesCountLimit":"string","unit":"UNIT_UNSPECIFIED","scaleType":"SCALE_TYPE_UNSPECIFIED","name":"string","isVisible":true,"colorScheme":"string","resolution":{"interval":"string","bucketsPresented":0},"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"customLinks":[{}]}],"stackedLine":"STACKED_LINE_UNSPECIFIED"},"dataTable":{"query":{"logs":{"luceneQuery":{"value":"string"},"filters":[{}],"grouping":{"groupBy":[null],"aggregations":[null],"groupBys":[null]},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"filters":[{}],"grouping":{"groupBy":[null],"aggregations":[null],"groupBys":[null]},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"resultsPerPage":0,"rowStyle":"ROW_STYLE_UNSPECIFIED","columns":[{"field":"string","width":0}],"orderBy":{"field":"string","orderDirection":"ORDER_DIRECTION_UNSPECIFIED"},"customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}],"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED"},"gauge":{"query":{"metrics":{"promqlQuery":{"value":"string"},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"logs":{"luceneQuery":{"value":"string"},"logsAggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"groupBy":[{"keypath":[]}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"spansAggregation":{"metricAggregation":{},"dimensionAggregation":{}},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"groupBy":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"groupBys":[{"keypath":[]}]},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"min":0.1,"max":0.1,"showInnerArc":true,"showOuterArc":true,"unit":"UNIT_UNSPECIFIED","thresholds":[{"from":0.1,"color":"string","label":"string"}],"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","thresholdBy":"THRESHOLD_BY_UNSPECIFIED","customUnit":"string","decimal":0,"thresholdType":"THRESHOLD_TYPE_UNSPECIFIED","legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"legendBy":"LEGEND_BY_UNSPECIFIED","displaySeriesName":true,"customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}]},"pieChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxSlicesPerChart":0,"minSlicePercentage":0,"stackDefinition":{"maxSlicesPerStack":0,"stackNameTemplate":"string"},"labelDefinition":{"labelSource":"LABEL_SOURCE_UNSPECIFIED","isVisible":true,"showName":true,"showValue":true,"showPercentage":true},"showLegend":true,"groupNameTemplate":"string","unit":"UNIT_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}]},"barChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxBarsPerChart":0,"groupNameTemplate":"string","stackDefinition":{"maxSlicesPerBar":0,"stackNameTemplate":"string"},"scaleType":"SCALE_TYPE_UNSPECIFIED","colorsBy":{"stack":{},"groupBy":{},"aggregation":{}},"xAxis":{"value":{},"time":{"interval":"string","bucketsPresented":0}},"unit":"UNIT_UNSPECIFIED","sortBy":"SORT_BY_TYPE_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","barValueDisplay":"BAR_VALUE_DISPLAY_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}]},"horizontalBarChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxBarsPerChart":0,"groupNameTemplate":"string","stackDefinition":{"maxSlicesPerBar":0,"stackNameTemplate":"string"},"scaleType":"SCALE_TYPE_UNSPECIFIED","colorsBy":{"stack":{},"groupBy":{},"aggregation":{}},"unit":"UNIT_UNSPECIFIED","displayOnBar":true,"yAxisViewBy":{"category":{},"value":{}},"sortBy":"SORT_BY_TYPE_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}]},"markdown":{"markdownText":"string","tooltipText":"string"},"hexagon":{"query":{"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"aggregation":"AGGREGATION_UNSPECIFIED","promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"logs":{"luceneQuery":{"value":"string"},"logsAggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupBy":[{"keypath":[]}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"spansAggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupBy":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"groupBys":[{"keypath":[]}]},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"min":0.1,"max":0.1,"unit":"UNIT_UNSPECIFIED","thresholds":[{"from":0.1,"color":"string","label":"string"}],"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"thresholdType":"THRESHOLD_TYPE_UNSPECIFIED","legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"legendBy":"LEGEND_BY_UNSPECIFIED","customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}]}},"appearance":{"width":0},"createdAt":"2019-08-24T14:15:22Z","updatedAt":"2019-08-24T14:15:22Z"}]}],"options":{"internal":{},"custom":{"name":"string","description":"string","collapsed":true,"color":{"predefined":"SECTION_PREDEFINED_COLOR_UNSPECIFIED"}}}}]},"variables":[{"name":"string","definition":{"constant":{"value":"string"},"multiSelect":{"selected":["string"],"source":{"logsPath":{"value":"string","observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metricLabel":{"metricName":"string","label":"string"},"constantList":{"values":["string"]},"spanField":{"value":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"}},"query":{"query":{"logsQuery":{"type":{"fieldName":{"logRegex":"string"},"fieldValue":{"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}}},"metricsQuery":{"type":{"metricName":{"metricRegex":"string"},"labelName":{"metricRegex":"string"},"labelValue":{"metricName":{"stringValue":"string","variableName":"string"},"labelName":{"stringValue":"string","variableName":"string"},"labelFilters":[{"metric":{},"label":{},"operator":{}}]}}},"spansQuery":{"type":{"fieldName":{"spanRegex":"string"},"fieldValue":{"value":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}}}},"refreshStrategy":"REFRESH_STRATEGY_UNSPECIFIED","valueDisplayOptions":{"valueRegex":"string","labelRegex":"string"}}},"selection":{"all":{},"list":{"values":["string"],"labels":["string"]}},"valuesOrderDirection":"ORDER_DIRECTION_UNSPECIFIED","selectionOptions":{"selectionType":"SELECTION_TYPE_UNSPECIFIED"}}},"displayName":"string","description":"string","displayType":"VARIABLE_DISPLAY_TYPE_UNSPECIFIED"}],"filters":[{"source":{"logs":{"field":"string","operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}},"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"spans":{"field":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}},"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metrics":{"metric":"string","label":"string","operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}}}},"enabled":true,"collapsed":true}],"absoluteTimeFrame":{"from":"2019-08-24T14:15:22Z","to":"2019-08-24T14:15:22Z"},"relativeTimeFrame":"string","folderId":{"value":"string"},"folderPath":{"segments":["string"]},"annotations":[{"id":"string","name":"string","enabled":true,"source":{"metrics":{"promqlQuery":{"value":"string"},"strategy":{"startTimeMetric":{}},"messageTemplate":"string","labels":["string"]},"logs":{"luceneQuery":{"value":"string"},"strategy":{"instant":{"timestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"range":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"endTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"duration":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"durationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}},"messageTemplate":"string","labelFields":[{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}]},"spans":{"luceneQuery":{"value":"string"},"strategy":{"instant":{"timestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"range":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"endTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"duration":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"durationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}},"messageTemplate":"string","labelFields":[{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}]}}}],"off":{},"twoMinutes":{},"fiveMinutes":{}},"isLocked":true}'
      description: No description available
    put:
      summary: Replace a dashboard
      operationId: DashboardsService_ReplaceDashboard
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesReplaceDashboardResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicesReplaceDashboardRequest'
        required: true
      tags:
        - Dashboard service
      x-coralogixPermissions:
        - team-dashboards:Update
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestId":"string","dashboard":{"id":"string","name":"string","description":"string","layout":{"sections":[{"id":{"value":"string"},"rows":[{"id":{"value":"string"},"appearance":{"height":0},"widgets":[{"id":{"value":"string"},"title":"string","description":"string","definition":{"lineChart":{"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"tooltip":{"showLabels":true,"type":"TOOLTIP_TYPE_UNSPECIFIED"},"queryDefinitions":[{"id":"string","query":{"logs":{"groupBy":[],"aggregations":[],"filters":[],"groupBys":[]},"metrics":{"filters":[]},"spans":{"groupBy":[],"aggregations":[],"filters":[],"groupBys":[]},"dataprime":{"filters":[]}},"seriesNameTemplate":"string","seriesCountLimit":"string","unit":"UNIT_UNSPECIFIED","scaleType":"SCALE_TYPE_UNSPECIFIED","name":"string","isVisible":true,"colorScheme":"string","resolution":{"interval":"string","bucketsPresented":0},"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"customLinks":[{}]}],"stackedLine":"STACKED_LINE_UNSPECIFIED"},"dataTable":{"query":{"logs":{"luceneQuery":{"value":"string"},"filters":[{}],"grouping":{"groupBy":[null],"aggregations":[null],"groupBys":[null]},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"filters":[{}],"grouping":{"groupBy":[null],"aggregations":[null],"groupBys":[null]},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"resultsPerPage":0,"rowStyle":"ROW_STYLE_UNSPECIFIED","columns":[{"field":"string","width":0}],"orderBy":{"field":"string","orderDirection":"ORDER_DIRECTION_UNSPECIFIED"},"customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}],"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED"},"gauge":{"query":{"metrics":{"promqlQuery":{"value":"string"},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"logs":{"luceneQuery":{"value":"string"},"logsAggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"groupBy":[{"keypath":[]}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"spansAggregation":{"metricAggregation":{},"dimensionAggregation":{}},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"groupBy":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"groupBys":[{"keypath":[]}]},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"min":0.1,"max":0.1,"showInnerArc":true,"showOuterArc":true,"unit":"UNIT_UNSPECIFIED","thresholds":[{"from":0.1,"color":"string","label":"string"}],"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","thresholdBy":"THRESHOLD_BY_UNSPECIFIED","customUnit":"string","decimal":0,"thresholdType":"THRESHOLD_TYPE_UNSPECIFIED","legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"legendBy":"LEGEND_BY_UNSPECIFIED","displaySeriesName":true,"customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}]},"pieChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxSlicesPerChart":0,"minSlicePercentage":0,"stackDefinition":{"maxSlicesPerStack":0,"stackNameTemplate":"string"},"labelDefinition":{"labelSource":"LABEL_SOURCE_UNSPECIFIED","isVisible":true,"showName":true,"showValue":true,"showPercentage":true},"showLegend":true,"groupNameTemplate":"string","unit":"UNIT_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}]},"barChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxBarsPerChart":0,"groupNameTemplate":"string","stackDefinition":{"maxSlicesPerBar":0,"stackNameTemplate":"string"},"scaleType":"SCALE_TYPE_UNSPECIFIED","colorsBy":{"stack":{},"groupBy":{},"aggregation":{}},"xAxis":{"value":{},"time":{"interval":"string","bucketsPresented":0}},"unit":"UNIT_UNSPECIFIED","sortBy":"SORT_BY_TYPE_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","barValueDisplay":"BAR_VALUE_DISPLAY_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}]},"horizontalBarChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxBarsPerChart":0,"groupNameTemplate":"string","stackDefinition":{"maxSlicesPerBar":0,"stackNameTemplate":"string"},"scaleType":"SCALE_TYPE_UNSPECIFIED","colorsBy":{"stack":{},"groupBy":{},"aggregation":{}},"unit":"UNIT_UNSPECIFIED","displayOnBar":true,"yAxisViewBy":{"category":{},"value":{}},"sortBy":"SORT_BY_TYPE_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}]},"markdown":{"markdownText":"string","tooltipText":"string"},"hexagon":{"query":{"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"aggregation":"AGGREGATION_UNSPECIFIED","promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"logs":{"luceneQuery":{"value":"string"},"logsAggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupBy":[{"keypath":[]}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"spansAggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupBy":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"groupBys":[{"keypath":[]}]},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"min":0.1,"max":0.1,"unit":"UNIT_UNSPECIFIED","thresholds":[{"from":0.1,"color":"string","label":"string"}],"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"thresholdType":"THRESHOLD_TYPE_UNSPECIFIED","legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"legendBy":"LEGEND_BY_UNSPECIFIED","customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}]}},"appearance":{"width":0},"createdAt":"2019-08-24T14:15:22Z","updatedAt":"2019-08-24T14:15:22Z"}]}],"options":{"internal":{},"custom":{"name":"string","description":"string","collapsed":true,"color":{"predefined":"SECTION_PREDEFINED_COLOR_UNSPECIFIED"}}}}]},"variables":[{"name":"string","definition":{"constant":{"value":"string"},"multiSelect":{"selected":["string"],"source":{"logsPath":{"value":"string","observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metricLabel":{"metricName":"string","label":"string"},"constantList":{"values":["string"]},"spanField":{"value":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"}},"query":{"query":{"logsQuery":{"type":{"fieldName":{"logRegex":"string"},"fieldValue":{"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}}},"metricsQuery":{"type":{"metricName":{"metricRegex":"string"},"labelName":{"metricRegex":"string"},"labelValue":{"metricName":{"stringValue":"string","variableName":"string"},"labelName":{"stringValue":"string","variableName":"string"},"labelFilters":[{"metric":{},"label":{},"operator":{}}]}}},"spansQuery":{"type":{"fieldName":{"spanRegex":"string"},"fieldValue":{"value":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}}}},"refreshStrategy":"REFRESH_STRATEGY_UNSPECIFIED","valueDisplayOptions":{"valueRegex":"string","labelRegex":"string"}}},"selection":{"all":{},"list":{"values":["string"],"labels":["string"]}},"valuesOrderDirection":"ORDER_DIRECTION_UNSPECIFIED","selectionOptions":{"selectionType":"SELECTION_TYPE_UNSPECIFIED"}}},"displayName":"string","description":"string","displayType":"VARIABLE_DISPLAY_TYPE_UNSPECIFIED"}],"filters":[{"source":{"logs":{"field":"string","operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}},"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"spans":{"field":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}},"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metrics":{"metric":"string","label":"string","operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}}}},"enabled":true,"collapsed":true}],"absoluteTimeFrame":{"from":"2019-08-24T14:15:22Z","to":"2019-08-24T14:15:22Z"},"relativeTimeFrame":"string","folderId":{"value":"string"},"folderPath":{"segments":["string"]},"annotations":[{"id":"string","name":"string","enabled":true,"source":{"metrics":{"promqlQuery":{"value":"string"},"strategy":{"startTimeMetric":{}},"messageTemplate":"string","labels":["string"]},"logs":{"luceneQuery":{"value":"string"},"strategy":{"instant":{"timestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"range":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"endTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"duration":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"durationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}},"messageTemplate":"string","labelFields":[{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}]},"spans":{"luceneQuery":{"value":"string"},"strategy":{"instant":{"timestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"range":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"endTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"duration":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"durationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}},"messageTemplate":"string","labelFields":[{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}]}}}],"off":{},"twoMinutes":{},"fiveMinutes":{}},"isLocked":true}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards"


            payload = {
                "requestId": "string",
                "dashboard": {
                    "id": "string",
                    "name": "string",
                    "description": "string",
                    "layout": {"sections": [
                            {
                                "id": {"value": "string"},
                                "rows": [
                                    {
                                        "id": {"value": "string"},
                                        "appearance": {"height": 0},
                                        "widgets": [
                                            {
                                                "id": {"value": "string"},
                                                "title": "string",
                                                "description": "string",
                                                "definition": {
                                                    "lineChart": {
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        },
                                                        "tooltip": {
                                                            "showLabels": True,
                                                            "type": "TOOLTIP_TYPE_UNSPECIFIED"
                                                        },
                                                        "queryDefinitions": [
                                                            {
                                                                "id": "string",
                                                                "query": {
                                                                    "logs": {
                                                                        "groupBy": [],
                                                                        "aggregations": [],
                                                                        "filters": [],
                                                                        "groupBys": []
                                                                    },
                                                                    "metrics": {"filters": []},
                                                                    "spans": {
                                                                        "groupBy": [],
                                                                        "aggregations": [],
                                                                        "filters": [],
                                                                        "groupBys": []
                                                                    },
                                                                    "dataprime": {"filters": []}
                                                                },
                                                                "seriesNameTemplate": "string",
                                                                "seriesCountLimit": "string",
                                                                "unit": "UNIT_UNSPECIFIED",
                                                                "scaleType": "SCALE_TYPE_UNSPECIFIED",
                                                                "name": "string",
                                                                "isVisible": True,
                                                                "colorScheme": "string",
                                                                "resolution": {
                                                                    "interval": "string",
                                                                    "bucketsPresented": 0
                                                                },
                                                                "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                                "customUnit": "string",
                                                                "decimal": 0,
                                                                "customLinks": [{}]
                                                            }
                                                        ],
                                                        "stackedLine": "STACKED_LINE_UNSPECIFIED"
                                                    },
                                                    "dataTable": {
                                                        "query": {
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "grouping": {
                                                                    "groupBy": [None],
                                                                    "aggregations": [None],
                                                                    "groupBys": [None]
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "grouping": {
                                                                    "groupBy": [None],
                                                                    "aggregations": [None],
                                                                    "groupBys": [None]
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED"
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "resultsPerPage": 0,
                                                        "rowStyle": "ROW_STYLE_UNSPECIFIED",
                                                        "columns": [
                                                            {
                                                                "field": "string",
                                                                "width": 0
                                                            }
                                                        ],
                                                        "orderBy": {
                                                            "field": "string",
                                                            "orderDirection": "ORDER_DIRECTION_UNSPECIFIED"
                                                        },
                                                        "customLinks": [
                                                            {
                                                                "id": {"value": "string"},
                                                                "linkName": "string",
                                                                "openInNewWindow": True,
                                                                "isPrivate": True,
                                                                "createdBy": "string",
                                                                "custom": {"url": "string"},
                                                                "template": {
                                                                    "url": "string",
                                                                    "type": "CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"
                                                                }
                                                            }
                                                        ],
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED"
                                                    },
                                                    "gauge": {
                                                        "query": {
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "aggregation": "AGGREGATION_UNSPECIFIED",
                                                                "filters": [{}],
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED"
                                                            },
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "logsAggregation": {
                                                                    "count": {},
                                                                    "countDistinct": {},
                                                                    "sum": {},
                                                                    "average": {},
                                                                    "min": {},
                                                                    "max": {},
                                                                    "percentile": {}
                                                                },
                                                                "aggregation": "AGGREGATION_UNSPECIFIED",
                                                                "filters": [{}],
                                                                "groupBy": [{"keypath": []}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "spansAggregation": {
                                                                    "metricAggregation": {},
                                                                    "dimensionAggregation": {}
                                                                },
                                                                "aggregation": "AGGREGATION_UNSPECIFIED",
                                                                "filters": [{}],
                                                                "groupBy": [{}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "groupBys": [{"keypath": []}]
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "min": 0.1,
                                                        "max": 0.1,
                                                        "showInnerArc": True,
                                                        "showOuterArc": True,
                                                        "unit": "UNIT_UNSPECIFIED",
                                                        "thresholds": [
                                                            {
                                                                "from": 0.1,
                                                                "color": "string",
                                                                "label": "string"
                                                            }
                                                        ],
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                        "thresholdBy": "THRESHOLD_BY_UNSPECIFIED",
                                                        "customUnit": "string",
                                                        "decimal": 0,
                                                        "thresholdType": "THRESHOLD_TYPE_UNSPECIFIED",
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        },
                                                        "legendBy": "LEGEND_BY_UNSPECIFIED",
                                                        "displaySeriesName": True,
                                                        "customLinks": [
                                                            {
                                                                "id": {"value": "string"},
                                                                "linkName": "string",
                                                                "openInNewWindow": True,
                                                                "isPrivate": True,
                                                                "createdBy": "string",
                                                                "custom": {"url": "string"},
                                                                "template": {
                                                                    "url": "string",
                                                                    "type": "CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "pieChart": {
                                                        "query": {
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "count": {},
                                                                    "countDistinct": {},
                                                                    "sum": {},
                                                                    "average": {},
                                                                    "min": {},
                                                                    "max": {},
                                                                    "percentile": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "groupNamesFields": [{"keypath": []}],
                                                                "stackedGroupNameField": {
                                                                    "keypath": [None],
                                                                    "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "metricAggregation": {},
                                                                    "dimensionAggregation": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": [{}],
                                                                "stackedGroupName": {
                                                                    "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                                                    "tagField": "string",
                                                                    "processTagField": "string"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "groupNamesFields": [{"keypath": []}],
                                                                "stackedGroupNameField": {
                                                                    "keypath": [None],
                                                                    "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                                }
                                                            },
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED",
                                                                "aggregation": "AGGREGATION_UNSPECIFIED"
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "maxSlicesPerChart": 0,
                                                        "minSlicePercentage": 0,
                                                        "stackDefinition": {
                                                            "maxSlicesPerStack": 0,
                                                            "stackNameTemplate": "string"
                                                        },
                                                        "labelDefinition": {
                                                            "labelSource": "LABEL_SOURCE_UNSPECIFIED",
                                                            "isVisible": True,
                                                            "showName": True,
                                                            "showValue": True,
                                                            "showPercentage": True
                                                        },
                                                        "showLegend": True,
                                                        "groupNameTemplate": "string",
                                                        "unit": "UNIT_UNSPECIFIED",
                                                        "colorScheme": "string",
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                        "customUnit": "string",
                                                        "decimal": 0,
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        },
                                                        "customLinks": [
                                                            {
                                                                "id": {"value": "string"},
                                                                "linkName": "string",
                                                                "openInNewWindow": True,
                                                                "isPrivate": True,
                                                                "createdBy": "string",
                                                                "custom": {"url": "string"},
                                                                "template": {
                                                                    "url": "string",
                                                                    "type": "CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "barChart": {
                                                        "query": {
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "count": {},
                                                                    "countDistinct": {},
                                                                    "sum": {},
                                                                    "average": {},
                                                                    "min": {},
                                                                    "max": {},
                                                                    "percentile": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "groupNamesFields": [{"keypath": []}],
                                                                "stackedGroupNameField": {
                                                                    "keypath": [None],
                                                                    "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "metricAggregation": {},
                                                                    "dimensionAggregation": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": [{}],
                                                                "stackedGroupName": {
                                                                    "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                                                    "tagField": "string",
                                                                    "processTagField": "string"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "groupNamesFields": [{"keypath": []}],
                                                                "stackedGroupNameField": {
                                                                    "keypath": [None],
                                                                    "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                                }
                                                            },
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED",
                                                                "aggregation": "AGGREGATION_UNSPECIFIED"
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "maxBarsPerChart": 0,
                                                        "groupNameTemplate": "string",
                                                        "stackDefinition": {
                                                            "maxSlicesPerBar": 0,
                                                            "stackNameTemplate": "string"
                                                        },
                                                        "scaleType": "SCALE_TYPE_UNSPECIFIED",
                                                        "colorsBy": {
                                                            "stack": {},
                                                            "groupBy": {},
                                                            "aggregation": {}
                                                        },
                                                        "xAxis": {
                                                            "value": {},
                                                            "time": {
                                                                "interval": "string",
                                                                "bucketsPresented": 0
                                                            }
                                                        },
                                                        "unit": "UNIT_UNSPECIFIED",
                                                        "sortBy": "SORT_BY_TYPE_UNSPECIFIED",
                                                        "colorScheme": "string",
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                        "barValueDisplay": "BAR_VALUE_DISPLAY_UNSPECIFIED",
                                                        "customUnit": "string",
                                                        "decimal": 0,
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        },
                                                        "customLinks": [
                                                            {
                                                                "id": {"value": "string"},
                                                                "linkName": "string",
                                                                "openInNewWindow": True,
                                                                "isPrivate": True,
                                                                "createdBy": "string",
                                                                "custom": {"url": "string"},
                                                                "template": {
                                                                    "url": "string",
                                                                    "type": "CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "horizontalBarChart": {
                                                        "query": {
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "count": {},
                                                                    "countDistinct": {},
                                                                    "sum": {},
                                                                    "average": {},
                                                                    "min": {},
                                                                    "max": {},
                                                                    "percentile": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "groupNamesFields": [{"keypath": []}],
                                                                "stackedGroupNameField": {
                                                                    "keypath": [None],
                                                                    "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "aggregation": {
                                                                    "metricAggregation": {},
                                                                    "dimensionAggregation": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupNames": [{}],
                                                                "stackedGroupName": {
                                                                    "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                                                    "tagField": "string",
                                                                    "processTagField": "string"
                                                                },
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "groupNamesFields": [{"keypath": []}],
                                                                "stackedGroupNameField": {
                                                                    "keypath": [None],
                                                                    "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                                }
                                                            },
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED",
                                                                "aggregation": "AGGREGATION_UNSPECIFIED"
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "groupNames": ["string"],
                                                                "stackedGroupName": "string",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "maxBarsPerChart": 0,
                                                        "groupNameTemplate": "string",
                                                        "stackDefinition": {
                                                            "maxSlicesPerBar": 0,
                                                            "stackNameTemplate": "string"
                                                        },
                                                        "scaleType": "SCALE_TYPE_UNSPECIFIED",
                                                        "colorsBy": {
                                                            "stack": {},
                                                            "groupBy": {},
                                                            "aggregation": {}
                                                        },
                                                        "unit": "UNIT_UNSPECIFIED",
                                                        "displayOnBar": True,
                                                        "yAxisViewBy": {
                                                            "category": {},
                                                            "value": {}
                                                        },
                                                        "sortBy": "SORT_BY_TYPE_UNSPECIFIED",
                                                        "colorScheme": "string",
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                        "customUnit": "string",
                                                        "decimal": 0,
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        },
                                                        "customLinks": [
                                                            {
                                                                "id": {"value": "string"},
                                                                "linkName": "string",
                                                                "openInNewWindow": True,
                                                                "isPrivate": True,
                                                                "createdBy": "string",
                                                                "custom": {"url": "string"},
                                                                "template": {
                                                                    "url": "string",
                                                                    "type": "CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "markdown": {
                                                        "markdownText": "string",
                                                        "tooltipText": "string"
                                                    },
                                                    "hexagon": {
                                                        "query": {
                                                            "metrics": {
                                                                "promqlQuery": {"value": "string"},
                                                                "filters": [{}],
                                                                "editorMode": "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "aggregation": "AGGREGATION_UNSPECIFIED",
                                                                "promqlQueryType": "PROM_QL_QUERY_TYPE_UNSPECIFIED"
                                                            },
                                                            "logs": {
                                                                "luceneQuery": {"value": "string"},
                                                                "logsAggregation": {
                                                                    "count": {},
                                                                    "countDistinct": {},
                                                                    "sum": {},
                                                                    "average": {},
                                                                    "min": {},
                                                                    "max": {},
                                                                    "percentile": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupBy": [{"keypath": []}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            },
                                                            "spans": {
                                                                "luceneQuery": {"value": "string"},
                                                                "spansAggregation": {
                                                                    "metricAggregation": {},
                                                                    "dimensionAggregation": {}
                                                                },
                                                                "filters": [{}],
                                                                "groupBy": [{}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                },
                                                                "groupBys": [{"keypath": []}]
                                                            },
                                                            "dataprime": {
                                                                "dataprimeQuery": {"text": "string"},
                                                                "filters": [{}],
                                                                "timeFrame": {
                                                                    "absoluteTimeFrame": {},
                                                                    "relativeTimeFrame": "string"
                                                                }
                                                            }
                                                        },
                                                        "min": 0.1,
                                                        "max": 0.1,
                                                        "unit": "UNIT_UNSPECIFIED",
                                                        "thresholds": [
                                                            {
                                                                "from": 0.1,
                                                                "color": "string",
                                                                "label": "string"
                                                            }
                                                        ],
                                                        "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                        "customUnit": "string",
                                                        "decimal": 0,
                                                        "thresholdType": "THRESHOLD_TYPE_UNSPECIFIED",
                                                        "legend": {
                                                            "isVisible": True,
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        },
                                                        "legendBy": "LEGEND_BY_UNSPECIFIED",
                                                        "customLinks": [
                                                            {
                                                                "id": {"value": "string"},
                                                                "linkName": "string",
                                                                "openInNewWindow": True,
                                                                "isPrivate": True,
                                                                "createdBy": "string",
                                                                "custom": {"url": "string"},
                                                                "template": {
                                                                    "url": "string",
                                                                    "type": "CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                "appearance": {"width": 0},
                                                "createdAt": "2019-08-24T14:15:22Z",
                                                "updatedAt": "2019-08-24T14:15:22Z"
                                            }
                                        ]
                                    }
                                ],
                                "options": {
                                    "internal": {},
                                    "custom": {
                                        "name": "string",
                                        "description": "string",
                                        "collapsed": True,
                                        "color": {"predefined": "SECTION_PREDEFINED_COLOR_UNSPECIFIED"}
                                    }
                                }
                            }
                        ]},
                    "variables": [
                        {
                            "name": "string",
                            "definition": {
                                "constant": {"value": "string"},
                                "multiSelect": {
                                    "selected": ["string"],
                                    "source": {
                                        "logsPath": {
                                            "value": "string",
                                            "observationField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }
                                        },
                                        "metricLabel": {
                                            "metricName": "string",
                                            "label": "string"
                                        },
                                        "constantList": {"values": ["string"]},
                                        "spanField": {"value": {
                                                "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                                "tagField": "string",
                                                "processTagField": "string"
                                            }},
                                        "query": {
                                            "query": {
                                                "logsQuery": {"type": {
                                                        "fieldName": {"logRegex": "string"},
                                                        "fieldValue": {"observationField": {
                                                                "keypath": ["string"],
                                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                            }}
                                                    }},
                                                "metricsQuery": {"type": {
                                                        "metricName": {"metricRegex": "string"},
                                                        "labelName": {"metricRegex": "string"},
                                                        "labelValue": {
                                                            "metricName": {
                                                                "stringValue": "string",
                                                                "variableName": "string"
                                                            },
                                                            "labelName": {
                                                                "stringValue": "string",
                                                                "variableName": "string"
                                                            },
                                                            "labelFilters": [
                                                                {
                                                                    "metric": {},
                                                                    "label": {},
                                                                    "operator": {}
                                                                }
                                                            ]
                                                        }
                                                    }},
                                                "spansQuery": {"type": {
                                                        "fieldName": {"spanRegex": "string"},
                                                        "fieldValue": {
                                                            "value": {
                                                                "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                                                "tagField": "string",
                                                                "processTagField": "string"
                                                            },
                                                            "observationField": {
                                                                "keypath": ["string"],
                                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                                            }
                                                        }
                                                    }}
                                            },
                                            "refreshStrategy": "REFRESH_STRATEGY_UNSPECIFIED",
                                            "valueDisplayOptions": {
                                                "valueRegex": "string",
                                                "labelRegex": "string"
                                            }
                                        }
                                    },
                                    "selection": {
                                        "all": {},
                                        "list": {
                                            "values": ["string"],
                                            "labels": ["string"]
                                        }
                                    },
                                    "valuesOrderDirection": "ORDER_DIRECTION_UNSPECIFIED",
                                    "selectionOptions": {"selectionType": "SELECTION_TYPE_UNSPECIFIED"}
                                }
                            },
                            "displayName": "string",
                            "description": "string",
                            "displayType": "VARIABLE_DISPLAY_TYPE_UNSPECIFIED"
                        }
                    ],
                    "filters": [
                        {
                            "source": {
                                "logs": {
                                    "field": "string",
                                    "operator": {
                                        "equals": {"selection": {
                                                "all": {},
                                                "list": {"values": ["string"]}
                                            }},
                                        "notEquals": {"selection": {"list": {"values": ["string"]}}}
                                    },
                                    "observationField": {
                                        "keypath": ["string"],
                                        "scope": "DATASET_SCOPE_UNSPECIFIED"
                                    }
                                },
                                "spans": {
                                    "field": {
                                        "metadataField": "METADATA_FIELD_UNSPECIFIED",
                                        "tagField": "string",
                                        "processTagField": "string"
                                    },
                                    "operator": {
                                        "equals": {"selection": {
                                                "all": {},
                                                "list": {"values": ["string"]}
                                            }},
                                        "notEquals": {"selection": {"list": {"values": ["string"]}}}
                                    },
                                    "observationField": {
                                        "keypath": ["string"],
                                        "scope": "DATASET_SCOPE_UNSPECIFIED"
                                    }
                                },
                                "metrics": {
                                    "metric": "string",
                                    "label": "string",
                                    "operator": {
                                        "equals": {"selection": {
                                                "all": {},
                                                "list": {"values": ["string"]}
                                            }},
                                        "notEquals": {"selection": {"list": {"values": ["string"]}}}
                                    }
                                }
                            },
                            "enabled": True,
                            "collapsed": True
                        }
                    ],
                    "absoluteTimeFrame": {
                        "from": "2019-08-24T14:15:22Z",
                        "to": "2019-08-24T14:15:22Z"
                    },
                    "relativeTimeFrame": "string",
                    "folderId": {"value": "string"},
                    "folderPath": {"segments": ["string"]},
                    "annotations": [
                        {
                            "id": "string",
                            "name": "string",
                            "enabled": True,
                            "source": {
                                "metrics": {
                                    "promqlQuery": {"value": "string"},
                                    "strategy": {"startTimeMetric": {}},
                                    "messageTemplate": "string",
                                    "labels": ["string"]
                                },
                                "logs": {
                                    "luceneQuery": {"value": "string"},
                                    "strategy": {
                                        "instant": {"timestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }},
                                        "range": {
                                            "startTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            },
                                            "endTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }
                                        },
                                        "duration": {
                                            "startTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            },
                                            "durationField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }
                                        }
                                    },
                                    "messageTemplate": "string",
                                    "labelFields": [
                                        {
                                            "keypath": ["string"],
                                            "scope": "DATASET_SCOPE_UNSPECIFIED"
                                        }
                                    ]
                                },
                                "spans": {
                                    "luceneQuery": {"value": "string"},
                                    "strategy": {
                                        "instant": {"timestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }},
                                        "range": {
                                            "startTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            },
                                            "endTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }
                                        },
                                        "duration": {
                                            "startTimestampField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            },
                                            "durationField": {
                                                "keypath": ["string"],
                                                "scope": "DATASET_SCOPE_UNSPECIFIED"
                                            }
                                        }
                                    },
                                    "messageTemplate": "string",
                                    "labelFields": [
                                        {
                                            "keypath": ["string"],
                                            "scope": "DATASET_SCOPE_UNSPECIFIED"
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "off": {},
                    "twoMinutes": {},
                    "fiveMinutes": {}
                },
                "isLocked": True
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestId":"string","dashboard":{"id":"string","name":"string","description":"string","layout":{"sections":[{"id":{"value":"string"},"rows":[{"id":{"value":"string"},"appearance":{"height":0},"widgets":[{"id":{"value":"string"},"title":"string","description":"string","definition":{"lineChart":{"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"tooltip":{"showLabels":true,"type":"TOOLTIP_TYPE_UNSPECIFIED"},"queryDefinitions":[{"id":"string","query":{"logs":{"groupBy":[],"aggregations":[],"filters":[],"groupBys":[]},"metrics":{"filters":[]},"spans":{"groupBy":[],"aggregations":[],"filters":[],"groupBys":[]},"dataprime":{"filters":[]}},"seriesNameTemplate":"string","seriesCountLimit":"string","unit":"UNIT_UNSPECIFIED","scaleType":"SCALE_TYPE_UNSPECIFIED","name":"string","isVisible":true,"colorScheme":"string","resolution":{"interval":"string","bucketsPresented":0},"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"customLinks":[{}]}],"stackedLine":"STACKED_LINE_UNSPECIFIED"},"dataTable":{"query":{"logs":{"luceneQuery":{"value":"string"},"filters":[{}],"grouping":{"groupBy":[null],"aggregations":[null],"groupBys":[null]},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"filters":[{}],"grouping":{"groupBy":[null],"aggregations":[null],"groupBys":[null]},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"resultsPerPage":0,"rowStyle":"ROW_STYLE_UNSPECIFIED","columns":[{"field":"string","width":0}],"orderBy":{"field":"string","orderDirection":"ORDER_DIRECTION_UNSPECIFIED"},"customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}],"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED"},"gauge":{"query":{"metrics":{"promqlQuery":{"value":"string"},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"logs":{"luceneQuery":{"value":"string"},"logsAggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"groupBy":[{"keypath":[]}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"spansAggregation":{"metricAggregation":{},"dimensionAggregation":{}},"aggregation":"AGGREGATION_UNSPECIFIED","filters":[{}],"groupBy":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"groupBys":[{"keypath":[]}]},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"min":0.1,"max":0.1,"showInnerArc":true,"showOuterArc":true,"unit":"UNIT_UNSPECIFIED","thresholds":[{"from":0.1,"color":"string","label":"string"}],"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","thresholdBy":"THRESHOLD_BY_UNSPECIFIED","customUnit":"string","decimal":0,"thresholdType":"THRESHOLD_TYPE_UNSPECIFIED","legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"legendBy":"LEGEND_BY_UNSPECIFIED","displaySeriesName":true,"customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}]},"pieChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxSlicesPerChart":0,"minSlicePercentage":0,"stackDefinition":{"maxSlicesPerStack":0,"stackNameTemplate":"string"},"labelDefinition":{"labelSource":"LABEL_SOURCE_UNSPECIFIED","isVisible":true,"showName":true,"showValue":true,"showPercentage":true},"showLegend":true,"groupNameTemplate":"string","unit":"UNIT_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}]},"barChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxBarsPerChart":0,"groupNameTemplate":"string","stackDefinition":{"maxSlicesPerBar":0,"stackNameTemplate":"string"},"scaleType":"SCALE_TYPE_UNSPECIFIED","colorsBy":{"stack":{},"groupBy":{},"aggregation":{}},"xAxis":{"value":{},"time":{"interval":"string","bucketsPresented":0}},"unit":"UNIT_UNSPECIFIED","sortBy":"SORT_BY_TYPE_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","barValueDisplay":"BAR_VALUE_DISPLAY_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}]},"horizontalBarChart":{"query":{"logs":{"luceneQuery":{"value":"string"},"aggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"aggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupNames":[{}],"stackedGroupName":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"groupNamesFields":[{"keypath":[]}],"stackedGroupNameField":{"keypath":[null],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED","aggregation":"AGGREGATION_UNSPECIFIED"},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"groupNames":["string"],"stackedGroupName":"string","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"maxBarsPerChart":0,"groupNameTemplate":"string","stackDefinition":{"maxSlicesPerBar":0,"stackNameTemplate":"string"},"scaleType":"SCALE_TYPE_UNSPECIFIED","colorsBy":{"stack":{},"groupBy":{},"aggregation":{}},"unit":"UNIT_UNSPECIFIED","displayOnBar":true,"yAxisViewBy":{"category":{},"value":{}},"sortBy":"SORT_BY_TYPE_UNSPECIFIED","colorScheme":"string","dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}]},"markdown":{"markdownText":"string","tooltipText":"string"},"hexagon":{"query":{"metrics":{"promqlQuery":{"value":"string"},"filters":[{}],"editorMode":"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED","timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"aggregation":"AGGREGATION_UNSPECIFIED","promqlQueryType":"PROM_QL_QUERY_TYPE_UNSPECIFIED"},"logs":{"luceneQuery":{"value":"string"},"logsAggregation":{"count":{},"countDistinct":{},"sum":{},"average":{},"min":{},"max":{},"percentile":{}},"filters":[{}],"groupBy":[{"keypath":[]}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}},"spans":{"luceneQuery":{"value":"string"},"spansAggregation":{"metricAggregation":{},"dimensionAggregation":{}},"filters":[{}],"groupBy":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"},"groupBys":[{"keypath":[]}]},"dataprime":{"dataprimeQuery":{"text":"string"},"filters":[{}],"timeFrame":{"absoluteTimeFrame":{},"relativeTimeFrame":"string"}}},"min":0.1,"max":0.1,"unit":"UNIT_UNSPECIFIED","thresholds":[{"from":0.1,"color":"string","label":"string"}],"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","customUnit":"string","decimal":0,"thresholdType":"THRESHOLD_TYPE_UNSPECIFIED","legend":{"isVisible":true,"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"legendBy":"LEGEND_BY_UNSPECIFIED","customLinks":[{"id":{"value":"string"},"linkName":"string","openInNewWindow":true,"isPrivate":true,"createdBy":"string","custom":{"url":"string"},"template":{"url":"string","type":"CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED"}}]}},"appearance":{"width":0},"createdAt":"2019-08-24T14:15:22Z","updatedAt":"2019-08-24T14:15:22Z"}]}],"options":{"internal":{},"custom":{"name":"string","description":"string","collapsed":true,"color":{"predefined":"SECTION_PREDEFINED_COLOR_UNSPECIFIED"}}}}]},"variables":[{"name":"string","definition":{"constant":{"value":"string"},"multiSelect":{"selected":["string"],"source":{"logsPath":{"value":"string","observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metricLabel":{"metricName":"string","label":"string"},"constantList":{"values":["string"]},"spanField":{"value":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"}},"query":{"query":{"logsQuery":{"type":{"fieldName":{"logRegex":"string"},"fieldValue":{"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}}},"metricsQuery":{"type":{"metricName":{"metricRegex":"string"},"labelName":{"metricRegex":"string"},"labelValue":{"metricName":{"stringValue":"string","variableName":"string"},"labelName":{"stringValue":"string","variableName":"string"},"labelFilters":[{"metric":{},"label":{},"operator":{}}]}}},"spansQuery":{"type":{"fieldName":{"spanRegex":"string"},"fieldValue":{"value":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}}}},"refreshStrategy":"REFRESH_STRATEGY_UNSPECIFIED","valueDisplayOptions":{"valueRegex":"string","labelRegex":"string"}}},"selection":{"all":{},"list":{"values":["string"],"labels":["string"]}},"valuesOrderDirection":"ORDER_DIRECTION_UNSPECIFIED","selectionOptions":{"selectionType":"SELECTION_TYPE_UNSPECIFIED"}}},"displayName":"string","description":"string","displayType":"VARIABLE_DISPLAY_TYPE_UNSPECIFIED"}],"filters":[{"source":{"logs":{"field":"string","operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}},"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"spans":{"field":{"metadataField":"METADATA_FIELD_UNSPECIFIED","tagField":"string","processTagField":"string"},"operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}},"observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"metrics":{"metric":"string","label":"string","operator":{"equals":{"selection":{"all":{},"list":{"values":["string"]}}},"notEquals":{"selection":{"list":{"values":["string"]}}}}}},"enabled":true,"collapsed":true}],"absoluteTimeFrame":{"from":"2019-08-24T14:15:22Z","to":"2019-08-24T14:15:22Z"},"relativeTimeFrame":"string","folderId":{"value":"string"},"folderPath":{"segments":["string"]},"annotations":[{"id":"string","name":"string","enabled":true,"source":{"metrics":{"promqlQuery":{"value":"string"},"strategy":{"startTimeMetric":{}},"messageTemplate":"string","labels":["string"]},"logs":{"luceneQuery":{"value":"string"},"strategy":{"instant":{"timestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"range":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"endTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"duration":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"durationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}},"messageTemplate":"string","labelFields":[{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}]},"spans":{"luceneQuery":{"value":"string"},"strategy":{"instant":{"timestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"range":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"endTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}},"duration":{"startTimestampField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"durationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}}},"messageTemplate":"string","labelFields":[{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"}]}}}],"off":{},"twoMinutes":{},"fiveMinutes":{}},"isLocked":true}'
      description: No description available
  /v1/dashboards/dashboards/{dashboardId}:
    get:
      summary: Get a dashboard
      operationId: DashboardsService_GetDashboard
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesGetDashboardResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Dashboard service
      x-coralogixPermissions:
        - team-dashboards:Read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7BdashboardId%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7BdashboardId%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7BdashboardId%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      summary: Delete a dashboard
      operationId: DashboardsService_DeleteDashboard
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesDeleteDashboardResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: requestId
          in: query
          required: false
          schema:
            type: string
      tags:
        - Dashboard service
      x-coralogixPermissions:
        - team-dashboards:Update
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7BdashboardId%7D?requestId=SOME_STRING_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7BdashboardId%7D"


            querystring = {"requestId":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7BdashboardId%7D?requestId=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/dashboards/dashboards/{dashboardId}/default:
    put:
      summary: Replace the default dashboard
      operationId: DashboardsService_ReplaceDefaultDashboard
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesReplaceDefaultDashboardResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/DashboardsServiceReplaceDefaultDashboardBody
        required: true
      tags:
        - Dashboard service
      x-coralogixPermissions:
        - team-dashboards:Update
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7BdashboardId%7D/default';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7BdashboardId%7D/default"


            payload = {"requestId": "string"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7BdashboardId%7D/default \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestId":"string"}'
      description: No description available
  /v1/dashboards/dashboards/{dashboardId}/folder:
    post:
      summary: Assign a dashboard to a folder
      operationId: DashboardsService_AssignDashboardFolder
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesAssignDashboardFolderResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardsServiceAssignDashboardFolderBody'
        required: true
      tags:
        - Dashboard service
      x-coralogixPermissions:
        - team-dashboards:Update
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7BdashboardId%7D/folder';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestId":"string","folderId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7BdashboardId%7D/folder"


            payload = {
                "requestId": "string",
                "folderId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7BdashboardId%7D/folder \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestId":"string","folderId":"string"}'
      description: No description available
  /v1/dashboards/dashboards/{dashboardId}:pin:
    patch:
      summary: Add dashboard to favorites
      operationId: DashboardsService_PinDashboard
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesPinDashboardResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardsServicePinDashboardBody'
        required: true
      tags:
        - Dashboard service
      x-coralogixPermissions:
        - team-dashboards:Read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7BdashboardId%7D:pin';


            let options = {
              method: 'PATCH',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7BdashboardId%7D:pin"


            payload = {"requestId": "string"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PATCH", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PATCH \
              --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7BdashboardId%7D:pin \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestId":"string"}'
      description: No description available
  /v1/dashboards/dashboards/{dashboardId}:unpin:
    patch:
      summary: Remove dashboard from favorites
      operationId: DashboardsService_UnpinDashboard
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesUnpinDashboardResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardsServiceUnpinDashboardBody'
        required: true
      tags:
        - Dashboard service
      x-coralogixPermissions:
        - team-dashboards:Read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7BdashboardId%7D:unpin';


            let options = {
              method: 'PATCH',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7BdashboardId%7D:unpin"


            payload = {"requestId": "string"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PATCH", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PATCH \
              --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7BdashboardId%7D:unpin \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestId":"string"}'
      description: No description available
  /v1/dashboards/folders:
    get:
      summary: List dashboard folders
      description: |-
        List all dashboard folders accessible.

        Requires the following permissions:
        - `team-dashboards:Read`
      operationId: DashboardFoldersService_ListDashboardFolders
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesListDashboardFoldersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Dashboard folders service
      x-coralogixPermissions:
        - team-dashboards:Read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/folders';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/dashboards/folders"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/folders \
              --header 'Authorization: Bearer <API_KEY>'
    post:
      summary: Create a dashboard folder
      operationId: DashboardFoldersService_CreateDashboardFolder
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesCreateDashboardFolderResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicesCreateDashboardFolderRequest'
        required: true
      tags:
        - Dashboard folders service
      x-coralogixPermissions:
        - team-dashboards:Update
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/folders';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestId":"string","folder":{"id":"string","name":"string","parentId":"string"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/dashboards/folders"


            payload = {
                "requestId": "string",
                "folder": {
                    "id": "string",
                    "name": "string",
                    "parentId": "string"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/folders \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestId":"string","folder":{"id":"string","name":"string","parentId":"string"}}'
      description: No description available
    put:
      summary: Replace a dashboard folder
      operationId: DashboardFoldersService_ReplaceDashboardFolder
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesReplaceDashboardFolderResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicesReplaceDashboardFolderRequest'
        required: true
      tags:
        - Dashboard folders service
      x-coralogixPermissions:
        - team-dashboards:Update
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/folders';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestId":"string","folder":{"id":"string","name":"string","parentId":"string"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/dashboards/folders"


            payload = {
                "requestId": "string",
                "folder": {
                    "id": "string",
                    "name": "string",
                    "parentId": "string"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/folders \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestId":"string","folder":{"id":"string","name":"string","parentId":"string"}}'
      description: No description available
  /v1/dashboards/folders/{folderId}:
    get:
      summary: Get a dashboard folder
      description: |-
        Returns a dashboard folder data.

        Requires the following permissions:
        - `team-dashboards:Read`
      operationId: DashboardFoldersService_GetDashboardFolder
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesGetDashboardFolderResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            type: string
        - name: requestId
          in: query
          required: false
          schema:
            type: string
      tags:
        - Dashboard folders service
      x-coralogixPermissions:
        - team-dashboards:Read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/folders/%7BfolderId%7D?requestId=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/dashboards/folders/%7BfolderId%7D"


            querystring = {"requestId":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/dashboards/folders/%7BfolderId%7D?requestId=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
    delete:
      summary: Delete a dashboard folder
      operationId: DashboardFoldersService_DeleteDashboardFolder
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesDeleteDashboardFolderResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            type: string
        - name: requestId
          in: query
          required: false
          schema:
            type: string
      tags:
        - Dashboard folders service
      x-coralogixPermissions:
        - team-dashboards:Update
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/folders/%7BfolderId%7D?requestId=SOME_STRING_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/dashboards/folders/%7BfolderId%7D"


            querystring = {"requestId":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/dashboards/folders/%7BfolderId%7D?requestId=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/extension-deployment/deploy:
    post:
      summary: Deploy extension
      operationId: ExtensionDeploymentService_DeployExtension
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeployExtensionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1DeployExtensionRequest'
        required: true
      tags:
        - Extension deployment service
      x-coralogixPermissions:
        - extensions:Deploy
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/extension-deployment/deploy';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"string","version":"string","itemIds":["[]"],"applications":["[]"],"subsystems":["[]"],"extensionDeployment":{"id":"string","version":"string","itemIds":["[]"],"applications":["[]"],"subsystems":["[]"]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/extension-deployment/deploy"


            payload = {
                "id": "string",
                "version": "string",
                "itemIds": ["[]"],
                "applications": ["[]"],
                "subsystems": ["[]"],
                "extensionDeployment": {
                    "id": "string",
                    "version": "string",
                    "itemIds": ["[]"],
                    "applications": ["[]"],
                    "subsystems": ["[]"]
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/extension-deployment/deploy \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"string","version":"string","itemIds":["[]"],"applications":["[]"],"subsystems":["[]"],"extensionDeployment":{"id":"string","version":"string","itemIds":["[]"],"applications":["[]"],"subsystems":["[]"]}}'
      description: No description available
  /v1/extension-deployment/deployed:
    get:
      summary: Get deployed extensions
      operationId: ExtensionDeploymentService_GetDeployedExtensions
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetDeployedExtensionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Extension deployment service
      x-coralogixPermissions:
        - extensions:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/extension-deployment/deployed';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/extension-deployment/deployed"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/extension-deployment/deployed \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/extension-deployment/undeploy:
    post:
      summary: Revert deployment of extension
      operationId: ExtensionDeploymentService_UndeployExtension
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UndeployExtensionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UndeployExtensionRequest'
        required: true
      tags:
        - Extension deployment service
      x-coralogixPermissions:
        - extensions:Deploy
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/extension-deployment/undeploy';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"string","keptExtensionItems":["[]"]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/extension-deployment/undeploy"


            payload = {
                "id": "string",
                "keptExtensionItems": ["[]"]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/extension-deployment/undeploy \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"string","keptExtensionItems":["[]"]}'
      description: No description available
  /v1/extension-deployment/update:
    post:
      summary: Update extension
      operationId: ExtensionDeploymentService_UpdateExtension
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdateExtensionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UpdateExtensionRequest'
        required: true
      tags:
        - Extension deployment service
      x-coralogixPermissions:
        - extensions:Deploy
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/extension-deployment/update';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"string","version":"string","itemIds":["[]"],"applications":["[]"],"subsystems":["[]"],"extensionDeployment":{"id":"string","version":"string","itemIds":["[]"],"applications":["[]"],"subsystems":["[]"]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/extension-deployment/update"


            payload = {
                "id": "string",
                "version": "string",
                "itemIds": ["[]"],
                "applications": ["[]"],
                "subsystems": ["[]"],
                "extensionDeployment": {
                    "id": "string",
                    "version": "string",
                    "itemIds": ["[]"],
                    "applications": ["[]"],
                    "subsystems": ["[]"]
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/extension-deployment/update \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"string","version":"string","itemIds":["[]"],"applications":["[]"],"subsystems":["[]"],"extensionDeployment":{"id":"string","version":"string","itemIds":["[]"],"applications":["[]"],"subsystems":["[]"]}}'
      description: No description available
  /v1/extensions-testing/cleanup:
    post:
      summary: Cleanup testing extension
      operationId: ExtensionTestingService_CleanupTestingRevision
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CleanupTestingRevisionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CleanupTestingRevisionRequest'
        required: true
      tags:
        - Extension testing service
      x-coralogixPermissions:
        - extensions:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/extensions-testing/cleanup';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/extensions-testing/cleanup"


            payload = {"id": "string"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/extensions-testing/cleanup \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"string"}'
      description: No description available
  /v1/extensions-testing/initialize:
    post:
      summary: Initialize testing revision
      operationId: ExtensionTestingService_InitializeTestingRevision
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1InitializeTestingRevisionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1InitializeTestingRevisionRequest'
        required: true
      tags:
        - Extension testing service
      x-coralogixPermissions:
        - extensions:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/extensions-testing/initialize';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"extensionData":{"id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","name":"AWS CloudWatch Extension","description":"Integration with AWS CloudWatch for monitoring and logging","excerpt":"Monitor AWS resources and analyze logs with CloudWatch integration","image":"string","darkModeImage":"string","labels":["[]"],"version":"v1.0.13","items":[{"name":"Low cocoa content","description":"Less than 60% cocoa","targetDomain":"ACTION","data":{},"binaries":[{"type":"PREVIEW_IMAGE","data":"string","fileName":"string"}],"isMandatory":"false","internalId":"0","uniqueId":"string","permissionResource":"UNKNOWN"}],"integrationDetails":[{"name":"string","link":"string"}],"isHidden":"false","binaries":[{"type":"KIBANA_INDEX_PATTERN","data":"string"}],"integrations":["[]"],"keywords":["[]"],"changelog":[{"version":"string","descriptionMd":"string"}],"deprecation":{"reason":"string","replacementExtensions":["[]"]}}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/extensions-testing/initialize"


            payload = {"extensionData": {
                    "id": "076f4188-05e0-4ed3-afeb-653ad182ccb7",
                    "name": "AWS CloudWatch Extension",
                    "description": "Integration with AWS CloudWatch for monitoring and logging",
                    "excerpt": "Monitor AWS resources and analyze logs with CloudWatch integration",
                    "image": "string",
                    "darkModeImage": "string",
                    "labels": ["[]"],
                    "version": "v1.0.13",
                    "items": [
                        {
                            "name": "Low cocoa content",
                            "description": "Less than 60% cocoa",
                            "targetDomain": "ACTION",
                            "data": {},
                            "binaries": [
                                {
                                    "type": "PREVIEW_IMAGE",
                                    "data": "string",
                                    "fileName": "string"
                                }
                            ],
                            "isMandatory": "false",
                            "internalId": "0",
                            "uniqueId": "string",
                            "permissionResource": "UNKNOWN"
                        }
                    ],
                    "integrationDetails": [
                        {
                            "name": "string",
                            "link": "string"
                        }
                    ],
                    "isHidden": "false",
                    "binaries": [
                        {
                            "type": "KIBANA_INDEX_PATTERN",
                            "data": "string"
                        }
                    ],
                    "integrations": ["[]"],
                    "keywords": ["[]"],
                    "changelog": [
                        {
                            "version": "string",
                            "descriptionMd": "string"
                        }
                    ],
                    "deprecation": {
                        "reason": "string",
                        "replacementExtensions": ["[]"]
                    }
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/extensions-testing/initialize \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"extensionData":{"id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","name":"AWS CloudWatch Extension","description":"Integration with AWS CloudWatch for monitoring and logging","excerpt":"Monitor AWS resources and analyze logs with CloudWatch integration","image":"string","darkModeImage":"string","labels":["[]"],"version":"v1.0.13","items":[{"name":"Low cocoa content","description":"Less than 60% cocoa","targetDomain":"ACTION","data":{},"binaries":[{"type":"PREVIEW_IMAGE","data":"string","fileName":"string"}],"isMandatory":"false","internalId":"0","uniqueId":"string","permissionResource":"UNKNOWN"}],"integrationDetails":[{"name":"string","link":"string"}],"isHidden":"false","binaries":[{"type":"KIBANA_INDEX_PATTERN","data":"string"}],"integrations":["[]"],"keywords":["[]"],"changelog":[{"version":"string","descriptionMd":"string"}],"deprecation":{"reason":"string","replacementExtensions":["[]"]}}}'
      description: No description available
  /v1/extensions-testing/test:
    post:
      summary: Test extension revision
      operationId: ExtensionTestingService_TestExtensionRevision
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestExtensionRevisionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestExtensionRevisionRequest'
        required: true
      tags:
        - Extension testing service
      x-coralogixPermissions:
        - extensions:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/extensions-testing/test';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"extensionData":{"id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","name":"AWS CloudWatch Extension","description":"Integration with AWS CloudWatch for monitoring and logging","excerpt":"Monitor AWS resources and analyze logs with CloudWatch integration","image":"string","darkModeImage":"string","labels":["[]"],"version":"v1.0.13","items":[{"name":"Low cocoa content","description":"Less than 60% cocoa","targetDomain":"ACTION","data":{},"binaries":[{"type":"PREVIEW_IMAGE","data":"string","fileName":"string"}],"isMandatory":"false","internalId":"0","uniqueId":"string","permissionResource":"UNKNOWN"}],"integrationDetails":[{"name":"string","link":"string"}],"isHidden":"false","binaries":[{"type":"KIBANA_INDEX_PATTERN","data":"string"}],"integrations":["[]"],"keywords":["[]"],"changelog":[{"version":"string","descriptionMd":"string"}],"deprecation":{"reason":"string","replacementExtensions":["[]"]}},"cleanupAfterTest":"false"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/extensions-testing/test"


            payload = {
                "extensionData": {
                    "id": "076f4188-05e0-4ed3-afeb-653ad182ccb7",
                    "name": "AWS CloudWatch Extension",
                    "description": "Integration with AWS CloudWatch for monitoring and logging",
                    "excerpt": "Monitor AWS resources and analyze logs with CloudWatch integration",
                    "image": "string",
                    "darkModeImage": "string",
                    "labels": ["[]"],
                    "version": "v1.0.13",
                    "items": [
                        {
                            "name": "Low cocoa content",
                            "description": "Less than 60% cocoa",
                            "targetDomain": "ACTION",
                            "data": {},
                            "binaries": [
                                {
                                    "type": "PREVIEW_IMAGE",
                                    "data": "string",
                                    "fileName": "string"
                                }
                            ],
                            "isMandatory": "false",
                            "internalId": "0",
                            "uniqueId": "string",
                            "permissionResource": "UNKNOWN"
                        }
                    ],
                    "integrationDetails": [
                        {
                            "name": "string",
                            "link": "string"
                        }
                    ],
                    "isHidden": "false",
                    "binaries": [
                        {
                            "type": "KIBANA_INDEX_PATTERN",
                            "data": "string"
                        }
                    ],
                    "integrations": ["[]"],
                    "keywords": ["[]"],
                    "changelog": [
                        {
                            "version": "string",
                            "descriptionMd": "string"
                        }
                    ],
                    "deprecation": {
                        "reason": "string",
                        "replacementExtensions": ["[]"]
                    }
                },
                "cleanupAfterTest": "false"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/extensions-testing/test \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"extensionData":{"id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","name":"AWS CloudWatch Extension","description":"Integration with AWS CloudWatch for monitoring and logging","excerpt":"Monitor AWS resources and analyze logs with CloudWatch integration","image":"string","darkModeImage":"string","labels":["[]"],"version":"v1.0.13","items":[{"name":"Low cocoa content","description":"Less than 60% cocoa","targetDomain":"ACTION","data":{},"binaries":[{"type":"PREVIEW_IMAGE","data":"string","fileName":"string"}],"isMandatory":"false","internalId":"0","uniqueId":"string","permissionResource":"UNKNOWN"}],"integrationDetails":[{"name":"string","link":"string"}],"isHidden":"false","binaries":[{"type":"KIBANA_INDEX_PATTERN","data":"string"}],"integrations":["[]"],"keywords":["[]"],"changelog":[{"version":"string","descriptionMd":"string"}],"deprecation":{"reason":"string","replacementExtensions":["[]"]}},"cleanupAfterTest":"false"}'
      description: No description available
  /v1/extensions/all:
    post:
      summary: Get all extensions
      operationId: ExtensionService_GetAllExtensions
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetAllExtensionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1GetAllExtensionsRequest'
        description: Request to list all extensions
        required: true
      tags:
        - Extension service
      x-coralogixPermissions:
        - extensions:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/extensions/all';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"includeHiddenExtensions":"false","filter":{"integrations":["[]"]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/extensions/all"


            payload = {
                "includeHiddenExtensions": "false",
                "filter": {"integrations": ["[]"]}
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/extensions/all \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"includeHiddenExtensions":"false","filter":{"integrations":["[]"]}}'
      description: No description available
  /v1/extensions/{id}:
    get:
      summary: Get extension by ID
      operationId: ExtensionService_GetExtension
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/extensionsv1Extension'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: includeDashboardBinaries
          description: >-
            On the frontend, we don't need the dashboard binaries.

            But we need them for deployment in the extensions-service - so it's
            kind of a temporary argument,

            As soon all the deployment logic is moved to the extensions-api, it
            can be removed.
          in: query
          required: false
          schema:
            type: boolean
            default: 'false'
        - name: includeTestingRevision
          in: query
          required: false
          schema:
            type: boolean
            default: 'false'
      tags:
        - Extension service
      x-coralogixPermissions:
        - extensions:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/extensions/%7Bid%7D?includeDashboardBinaries=SOME_BOOLEAN_VALUE&includeTestingRevision=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/extensions/%7Bid%7D"


            querystring =
            {"includeDashboardBinaries":"SOME_BOOLEAN_VALUE","includeTestingRevision":"SOME_BOOLEAN_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/extensions/%7Bid%7D?includeDashboardBinaries=SOME_BOOLEAN_VALUE&includeTestingRevision=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/incidents:
    post:
      summary: List incidents with filters
      description: >-
        Lists all available incidents based on specified filters and order. The
        list is ordered in an unspecified direction and sorted by creation time.


        Requires the following permissions:

        - `incidents:read`
      operationId: IncidentsService_ListIncidents
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListIncidentsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1ListIncidentsRequest'
        description: >-
          Request to list incidents with filtering, pagination and ordering
          options
        required: true
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:read
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/incidents';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"filter":{"assignee":["string"],"status":["INCIDENT_STATUS_UNSPECIFIED"],"state":["INCIDENT_STATE_UNSPECIFIED"],"severity":["INCIDENT_SEVERITY_UNSPECIFIED"],"contextualLabels":{"property1":{"contextualLabelValues":["string"]},"property2":{"contextualLabelValues":["string"]}},"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z","searchQuery":{"query":"error","incidentField":"INCIDENTS_FIELDS_UNSPECIFIED","contextualLabel":"string"},"applicationName":["string"],"subsystemName":["string"],"isMuted":true,"createdAtRange":{"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z"},"incidentDurationRange":{"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z"},"metaLabels":[{"key":"key","value":"value"}],"metaLabelsOp":"FILTER_OPERATOR_OR_OR_UNSPECIFIED"},"pagination":{"pageSize":10,"pageToken":"next_page_token"},"orderBys":[{"incidentField":"INCIDENTS_FIELDS_UNSPECIFIED","contextualLabel":"string","direction":"ORDER_BY_DIRECTION_UNSPECIFIED"}]}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/incidents"


            payload = {
                "filter": {
                    "assignee": ["string"],
                    "status": ["INCIDENT_STATUS_UNSPECIFIED"],
                    "state": ["INCIDENT_STATE_UNSPECIFIED"],
                    "severity": ["INCIDENT_SEVERITY_UNSPECIFIED"],
                    "contextualLabels": {
                        "property1": {"contextualLabelValues": ["string"]},
                        "property2": {"contextualLabelValues": ["string"]}
                    },
                    "startTime": "2019-08-24T14:15:22Z",
                    "endTime": "2019-08-24T14:15:22Z",
                    "searchQuery": {
                        "query": "error",
                        "incidentField": "INCIDENTS_FIELDS_UNSPECIFIED",
                        "contextualLabel": "string"
                    },
                    "applicationName": ["string"],
                    "subsystemName": ["string"],
                    "isMuted": True,
                    "createdAtRange": {
                        "startTime": "2019-08-24T14:15:22Z",
                        "endTime": "2019-08-24T14:15:22Z"
                    },
                    "incidentDurationRange": {
                        "startTime": "2019-08-24T14:15:22Z",
                        "endTime": "2019-08-24T14:15:22Z"
                    },
                    "metaLabels": [
                        {
                            "key": "key",
                            "value": "value"
                        }
                    ],
                    "metaLabelsOp": "FILTER_OPERATOR_OR_OR_UNSPECIFIED"
                },
                "pagination": {
                    "pageSize": 10,
                    "pageToken": "next_page_token"
                },
                "orderBys": [
                    {
                        "incidentField": "INCIDENTS_FIELDS_UNSPECIFIED",
                        "contextualLabel": "string",
                        "direction": "ORDER_BY_DIRECTION_UNSPECIFIED"
                    }
                ]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/incidents \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"filter":{"assignee":["string"],"status":["INCIDENT_STATUS_UNSPECIFIED"],"state":["INCIDENT_STATE_UNSPECIFIED"],"severity":["INCIDENT_SEVERITY_UNSPECIFIED"],"contextualLabels":{"property1":{"contextualLabelValues":["string"]},"property2":{"contextualLabelValues":["string"]}},"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z","searchQuery":{"query":"error","incidentField":"INCIDENTS_FIELDS_UNSPECIFIED","contextualLabel":"string"},"applicationName":["string"],"subsystemName":["string"],"isMuted":true,"createdAtRange":{"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z"},"incidentDurationRange":{"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z"},"metaLabels":[{"key":"key","value":"value"}],"metaLabelsOp":"FILTER_OPERATOR_OR_OR_UNSPECIFIED"},"pagination":{"pageSize":10,"pageToken":"next_page_token"},"orderBys":[{"incidentField":"INCIDENTS_FIELDS_UNSPECIFIED","contextualLabel":"string","direction":"ORDER_BY_DIRECTION_UNSPECIFIED"}]}'
  /v1/incidents/{id}:
    get:
      summary: Get incident by ID
      description: >-
        Retrieve detailed information about a single incident by its unique
        identifier.


        Requires the following permissions:

        - `incidents:read`
      operationId: IncidentsService_GetIncident
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetIncidentResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/incidents/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/incidents/%7Bid%7D"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/incidents/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
  /v1/incidents/{incidentId}/events:
    get:
      summary: Get incident events
      description: >-
        Retrieve a chronological list of all events associated with a specific
        incident. Includes state changes, assignments, acknowledgments, and
        resolutions.


        Requires the following permissions:

        - `incidents:read`
      operationId: IncidentsService_GetIncidentEvents
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetIncidentEventsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: incidentId
          description: ID of the incident to retrieve events for
          in: path
          required: true
          schema:
            type: string
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/incidents/%7BincidentId%7D/events';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/incidents/%7BincidentId%7D/events"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/incidents/%7BincidentId%7D/events \
              --header 'Authorization: Bearer <API_KEY>'
  /v1/incidents:acknowledge:
    post:
      summary: Acknowledge incidents
      description: |-
        Mark one or more incidents as acknowledged.

        Requires the following permissions:
        - `incidents:acknowledge`
      operationId: IncidentsService_AcknowledgeIncidents
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1AcknowledgeIncidentsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1AcknowledgeIncidentsRequest'
        description: Request to acknowledge one or more incidents
        required: true
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:acknowledge
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/incidents:acknowledge';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"incidentIds":["incident_id_1","incident_id_2"]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/incidents:acknowledge"


            payload = {"incidentIds": ["incident_id_1", "incident_id_2"]}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/incidents:acknowledge \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"incidentIds":["incident_id_1","incident_id_2"]}'
  /v1/incidents:assign:
    post:
      summary: Assign incidents to a user
      description: |-
        Assign one or more incidents to a specific user.

        Requires the following permissions:
        - `incidents:assign`
      operationId: IncidentsService_AssignIncidents
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1AssignIncidentsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1AssignIncidentsRequest'
        description: Request to assign one or more incidents to a user
        required: true
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:assign
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/incidents:assign';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"incidentIds":["incident_id_1","incident_id_2"],"assignedTo":{"userId":"user_id"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/incidents:assign"


            payload = {
                "incidentIds": ["incident_id_1", "incident_id_2"],
                "assignedTo": {"userId": "user_id"}
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/incidents:assign \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"incidentIds":["incident_id_1","incident_id_2"],"assignedTo":{"userId":"user_id"}}'
  /v1/incidents:batchGet:
    post:
      summary: Get multiple incidents by IDs
      description: |-
        Retrieve multiple incidents by their IDs in a single request.

        Requires the following permissions:
        - `incidents:read`
      operationId: IncidentsService_BatchGetIncident
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1BatchGetIncidentResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: ids
          in: query
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/incidents:batchGet?ids=SOME_ARRAY_VALUE';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/incidents:batchGet"


            querystring = {"ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/incidents:batchGet?ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
  /v1/incidents:close:
    post:
      summary: Close incidents
      operationId: IncidentsService_CloseIncidents
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CloseIncidentsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CloseIncidentsRequest'
        description: Request to close one or more incidents
        required: true
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:close
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/incidents:close';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"incidentIds":["incident_id_1","incident_id_2"]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/incidents:close"


            payload = {"incidentIds": ["incident_id_1", "incident_id_2"]}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/incidents:close \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"incidentIds":["incident_id_1","incident_id_2"]}'
      description: No description available
  /v1/incidents:get-filter-values:
    post:
      summary: Get available filter values
      operationId: IncidentsService_GetFilterValues
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetFilterValuesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1GetFilterValuesRequest'
        description: Request to get available filter values for incidents
        required: true
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/incidents:get-filter-values';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"filter":{"assignee":["string"],"status":["INCIDENT_STATUS_UNSPECIFIED"],"state":["INCIDENT_STATE_UNSPECIFIED"],"severity":["INCIDENT_SEVERITY_UNSPECIFIED"],"contextualLabels":{"property1":{"contextualLabelValues":["string"]},"property2":{"contextualLabelValues":["string"]}},"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z","searchQuery":{"query":"error","incidentField":"INCIDENTS_FIELDS_UNSPECIFIED","contextualLabel":"string"},"applicationName":["string"],"subsystemName":["string"],"isMuted":true,"createdAtRange":{"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z"},"incidentDurationRange":{"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z"},"metaLabels":[{"key":"key","value":"value"}],"metaLabelsOp":"FILTER_OPERATOR_OR_OR_UNSPECIFIED"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/incidents:get-filter-values"


            payload = {"filter": {
                    "assignee": ["string"],
                    "status": ["INCIDENT_STATUS_UNSPECIFIED"],
                    "state": ["INCIDENT_STATE_UNSPECIFIED"],
                    "severity": ["INCIDENT_SEVERITY_UNSPECIFIED"],
                    "contextualLabels": {
                        "property1": {"contextualLabelValues": ["string"]},
                        "property2": {"contextualLabelValues": ["string"]}
                    },
                    "startTime": "2019-08-24T14:15:22Z",
                    "endTime": "2019-08-24T14:15:22Z",
                    "searchQuery": {
                        "query": "error",
                        "incidentField": "INCIDENTS_FIELDS_UNSPECIFIED",
                        "contextualLabel": "string"
                    },
                    "applicationName": ["string"],
                    "subsystemName": ["string"],
                    "isMuted": True,
                    "createdAtRange": {
                        "startTime": "2019-08-24T14:15:22Z",
                        "endTime": "2019-08-24T14:15:22Z"
                    },
                    "incidentDurationRange": {
                        "startTime": "2019-08-24T14:15:22Z",
                        "endTime": "2019-08-24T14:15:22Z"
                    },
                    "metaLabels": [
                        {
                            "key": "key",
                            "value": "value"
                        }
                    ],
                    "metaLabelsOp": "FILTER_OPERATOR_OR_OR_UNSPECIFIED"
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/incidents:get-filter-values \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"filter":{"assignee":["string"],"status":["INCIDENT_STATUS_UNSPECIFIED"],"state":["INCIDENT_STATE_UNSPECIFIED"],"severity":["INCIDENT_SEVERITY_UNSPECIFIED"],"contextualLabels":{"property1":{"contextualLabelValues":["string"]},"property2":{"contextualLabelValues":["string"]}},"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z","searchQuery":{"query":"error","incidentField":"INCIDENTS_FIELDS_UNSPECIFIED","contextualLabel":"string"},"applicationName":["string"],"subsystemName":["string"],"isMuted":true,"createdAtRange":{"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z"},"incidentDurationRange":{"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z"},"metaLabels":[{"key":"key","value":"value"}],"metaLabelsOp":"FILTER_OPERATOR_OR_OR_UNSPECIFIED"}}'
      description: No description available
  /v1/incidents:list-incident-events:
    post:
      summary: List incident events with filters
      description: >-
        List incident events with support for filtering, pagination, and
        ordering.


        Requires the following permissions:

        - `incidents:read`
      operationId: IncidentsService_ListIncidentEvents
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListIncidentEventsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1ListIncidentEventsRequest'
        description: >-
          Request to list incident events with filtering, pagination and
          ordering options
        required: true
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/incidents:list-incident-events';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"filter":{"status":["INCIDENT_STATUS_UNSPECIFIED"],"severity":["INCIDENT_SEVERITY_UNSPECIFIED"],"contextualLabels":{"property1":{"contextualLabelValues":["string"]},"property2":{"contextualLabelValues":["string"]}},"name":"string","isMuted":true,"timestamp":{"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z"},"labels":{"metaLabels":[{"key":"key","value":"value"}],"operator":"FILTER_OPERATOR_OR_OR_UNSPECIFIED"}},"pagination":{"pageSize":10,"pageToken":"next_page_token"},"orderBy":{"field":"INCIDENT_EVENT_ORDER_BY_FIELD_TYPE_TIMESTAMP_OR_UNSPECIFIED","direction":"ORDER_BY_DIRECTION_UNSPECIFIED"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/incidents:list-incident-events"


            payload = {
                "filter": {
                    "status": ["INCIDENT_STATUS_UNSPECIFIED"],
                    "severity": ["INCIDENT_SEVERITY_UNSPECIFIED"],
                    "contextualLabels": {
                        "property1": {"contextualLabelValues": ["string"]},
                        "property2": {"contextualLabelValues": ["string"]}
                    },
                    "name": "string",
                    "isMuted": True,
                    "timestamp": {
                        "startTime": "2019-08-24T14:15:22Z",
                        "endTime": "2019-08-24T14:15:22Z"
                    },
                    "labels": {
                        "metaLabels": [
                            {
                                "key": "key",
                                "value": "value"
                            }
                        ],
                        "operator": "FILTER_OPERATOR_OR_OR_UNSPECIFIED"
                    }
                },
                "pagination": {
                    "pageSize": 10,
                    "pageToken": "next_page_token"
                },
                "orderBy": {
                    "field": "INCIDENT_EVENT_ORDER_BY_FIELD_TYPE_TIMESTAMP_OR_UNSPECIFIED",
                    "direction": "ORDER_BY_DIRECTION_UNSPECIFIED"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/incidents:list-incident-events \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"filter":{"status":["INCIDENT_STATUS_UNSPECIFIED"],"severity":["INCIDENT_SEVERITY_UNSPECIFIED"],"contextualLabels":{"property1":{"contextualLabelValues":["string"]},"property2":{"contextualLabelValues":["string"]}},"name":"string","isMuted":true,"timestamp":{"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z"},"labels":{"metaLabels":[{"key":"key","value":"value"}],"operator":"FILTER_OPERATOR_OR_OR_UNSPECIFIED"}},"pagination":{"pageSize":10,"pageToken":"next_page_token"},"orderBy":{"field":"INCIDENT_EVENT_ORDER_BY_FIELD_TYPE_TIMESTAMP_OR_UNSPECIFIED","direction":"ORDER_BY_DIRECTION_UNSPECIFIED"}}'
  /v1/incidents:list-incident-events-filter-values:
    post:
      summary: Get available incident event filter values
      operationId: IncidentsService_ListIncidentEventsFilterValues
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListIncidentEventsFilterValuesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1ListIncidentEventsFilterValuesRequest'
        description: A request to get available filter values for incident events
        required: true
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/incidents:list-incident-events-filter-values';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"filter":{"status":["INCIDENT_STATUS_UNSPECIFIED"],"severity":["INCIDENT_SEVERITY_UNSPECIFIED"],"contextualLabels":{"property1":{"contextualLabelValues":["string"]},"property2":{"contextualLabelValues":["string"]}},"name":"string","isMuted":true,"timestamp":{"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z"},"labels":{"metaLabels":[{"key":"key","value":"value"}],"operator":"FILTER_OPERATOR_OR_OR_UNSPECIFIED"}}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/incidents:list-incident-events-filter-values"


            payload = {"filter": {
                    "status": ["INCIDENT_STATUS_UNSPECIFIED"],
                    "severity": ["INCIDENT_SEVERITY_UNSPECIFIED"],
                    "contextualLabels": {
                        "property1": {"contextualLabelValues": ["string"]},
                        "property2": {"contextualLabelValues": ["string"]}
                    },
                    "name": "string",
                    "isMuted": True,
                    "timestamp": {
                        "startTime": "2019-08-24T14:15:22Z",
                        "endTime": "2019-08-24T14:15:22Z"
                    },
                    "labels": {
                        "metaLabels": [
                            {
                                "key": "key",
                                "value": "value"
                            }
                        ],
                        "operator": "FILTER_OPERATOR_OR_OR_UNSPECIFIED"
                    }
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/incidents:list-incident-events-filter-values \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"filter":{"status":["INCIDENT_STATUS_UNSPECIFIED"],"severity":["INCIDENT_SEVERITY_UNSPECIFIED"],"contextualLabels":{"property1":{"contextualLabelValues":["string"]},"property2":{"contextualLabelValues":["string"]}},"name":"string","isMuted":true,"timestamp":{"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z"},"labels":{"metaLabels":[{"key":"key","value":"value"}],"operator":"FILTER_OPERATOR_OR_OR_UNSPECIFIED"}}}'
      description: No description available
  /v1/incidents:list-incident-events-total-count:
    post:
      summary: Get total count of incident events
      description: |-
        Retrieve the total count of incident events matching a filter.

        Requires the following permissions:
        - `incidents:read`
      operationId: IncidentsService_ListIncidentEventsTotalCount
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListIncidentEventsTotalCountResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1ListIncidentEventsTotalCountRequest'
        description: A request to get the total count of incident events matching a filter
        required: true
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/incidents:list-incident-events-total-count';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"filter":{"status":["INCIDENT_STATUS_UNSPECIFIED"],"severity":["INCIDENT_SEVERITY_UNSPECIFIED"],"contextualLabels":{"property1":{"contextualLabelValues":["string"]},"property2":{"contextualLabelValues":["string"]}},"name":"string","isMuted":true,"timestamp":{"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z"},"labels":{"metaLabels":[{"key":"key","value":"value"}],"operator":"FILTER_OPERATOR_OR_OR_UNSPECIFIED"}}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/incidents:list-incident-events-total-count"


            payload = {"filter": {
                    "status": ["INCIDENT_STATUS_UNSPECIFIED"],
                    "severity": ["INCIDENT_SEVERITY_UNSPECIFIED"],
                    "contextualLabels": {
                        "property1": {"contextualLabelValues": ["string"]},
                        "property2": {"contextualLabelValues": ["string"]}
                    },
                    "name": "string",
                    "isMuted": True,
                    "timestamp": {
                        "startTime": "2019-08-24T14:15:22Z",
                        "endTime": "2019-08-24T14:15:22Z"
                    },
                    "labels": {
                        "metaLabels": [
                            {
                                "key": "key",
                                "value": "value"
                            }
                        ],
                        "operator": "FILTER_OPERATOR_OR_OR_UNSPECIFIED"
                    }
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/incidents:list-incident-events-total-count \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"filter":{"status":["INCIDENT_STATUS_UNSPECIFIED"],"severity":["INCIDENT_SEVERITY_UNSPECIFIED"],"contextualLabels":{"property1":{"contextualLabelValues":["string"]},"property2":{"contextualLabelValues":["string"]}},"name":"string","isMuted":true,"timestamp":{"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z"},"labels":{"metaLabels":[{"key":"key","value":"value"}],"operator":"FILTER_OPERATOR_OR_OR_UNSPECIFIED"}}}'
  /v1/incidents:listIncidentAggregations:
    post:
      summary: Get incident aggregations
      description: >-
        Retrieve aggregated incident data with support for grouping and
        filtering.


        Requires the following permissions:

        - `incidents:read`
      operationId: IncidentsService_ListIncidentAggregations
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListIncidentAggregationsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1ListIncidentAggregationsRequest'
        description: >-
          Request to get aggregated incident data with filtering and grouping
          options
        required: true
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/incidents:listIncidentAggregations';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"filter":{"assignee":["string"],"status":["INCIDENT_STATUS_UNSPECIFIED"],"state":["INCIDENT_STATE_UNSPECIFIED"],"severity":["INCIDENT_SEVERITY_UNSPECIFIED"],"contextualLabels":{"property1":{"contextualLabelValues":["string"]},"property2":{"contextualLabelValues":["string"]}},"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z","searchQuery":{"query":"error","incidentField":"INCIDENTS_FIELDS_UNSPECIFIED","contextualLabel":"string"},"applicationName":["string"],"subsystemName":["string"],"isMuted":true,"createdAtRange":{"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z"},"incidentDurationRange":{"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z"},"metaLabels":[{"key":"key","value":"value"}],"metaLabelsOp":"FILTER_OPERATOR_OR_OR_UNSPECIFIED"},"groupBys":[{"incidentField":"INCIDENTS_FIELDS_UNSPECIFIED","contextualLabel":"string","orderByDirection":"ORDER_BY_DIRECTION_UNSPECIFIED"}],"pagination":{"pageSize":10,"pageToken":"next_page_token"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/incidents:listIncidentAggregations"


            payload = {
                "filter": {
                    "assignee": ["string"],
                    "status": ["INCIDENT_STATUS_UNSPECIFIED"],
                    "state": ["INCIDENT_STATE_UNSPECIFIED"],
                    "severity": ["INCIDENT_SEVERITY_UNSPECIFIED"],
                    "contextualLabels": {
                        "property1": {"contextualLabelValues": ["string"]},
                        "property2": {"contextualLabelValues": ["string"]}
                    },
                    "startTime": "2019-08-24T14:15:22Z",
                    "endTime": "2019-08-24T14:15:22Z",
                    "searchQuery": {
                        "query": "error",
                        "incidentField": "INCIDENTS_FIELDS_UNSPECIFIED",
                        "contextualLabel": "string"
                    },
                    "applicationName": ["string"],
                    "subsystemName": ["string"],
                    "isMuted": True,
                    "createdAtRange": {
                        "startTime": "2019-08-24T14:15:22Z",
                        "endTime": "2019-08-24T14:15:22Z"
                    },
                    "incidentDurationRange": {
                        "startTime": "2019-08-24T14:15:22Z",
                        "endTime": "2019-08-24T14:15:22Z"
                    },
                    "metaLabels": [
                        {
                            "key": "key",
                            "value": "value"
                        }
                    ],
                    "metaLabelsOp": "FILTER_OPERATOR_OR_OR_UNSPECIFIED"
                },
                "groupBys": [
                    {
                        "incidentField": "INCIDENTS_FIELDS_UNSPECIFIED",
                        "contextualLabel": "string",
                        "orderByDirection": "ORDER_BY_DIRECTION_UNSPECIFIED"
                    }
                ],
                "pagination": {
                    "pageSize": 10,
                    "pageToken": "next_page_token"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/incidents:listIncidentAggregations \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"filter":{"assignee":["string"],"status":["INCIDENT_STATUS_UNSPECIFIED"],"state":["INCIDENT_STATE_UNSPECIFIED"],"severity":["INCIDENT_SEVERITY_UNSPECIFIED"],"contextualLabels":{"property1":{"contextualLabelValues":["string"]},"property2":{"contextualLabelValues":["string"]}},"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z","searchQuery":{"query":"error","incidentField":"INCIDENTS_FIELDS_UNSPECIFIED","contextualLabel":"string"},"applicationName":["string"],"subsystemName":["string"],"isMuted":true,"createdAtRange":{"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z"},"incidentDurationRange":{"startTime":"2019-08-24T14:15:22Z","endTime":"2019-08-24T14:15:22Z"},"metaLabels":[{"key":"key","value":"value"}],"metaLabelsOp":"FILTER_OPERATOR_OR_OR_UNSPECIFIED"},"groupBys":[{"incidentField":"INCIDENTS_FIELDS_UNSPECIFIED","contextualLabel":"string","orderByDirection":"ORDER_BY_DIRECTION_UNSPECIFIED"}],"pagination":{"pageSize":10,"pageToken":"next_page_token"}}'
  /v1/incidents:resolve:
    post:
      summary: Resolve incidents
      description: |-
        Mark one or more incidents as resolved.

        Requires the following permissions:
        - `incidents:close`
      operationId: IncidentsService_ResolveIncidents
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ResolveIncidentsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1ResolveIncidentsRequest'
        description: Request to resolve one or more incidents
        required: true
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:close
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/incidents:resolve';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"incidentIds":["incident_id_1","incident_id_2"]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/incidents:resolve"


            payload = {"incidentIds": ["incident_id_1", "incident_id_2"]}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/incidents:resolve \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"incidentIds":["incident_id_1","incident_id_2"]}'
  /v1/incidents:unassign:
    post:
      summary: Remove incident user assignments
      description: |-
        Remove user assignments from one or more incidents.

        Requires the following permissions:
        - `incidents:assign`
      operationId: IncidentsService_UnassignIncidents
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UnassignIncidentsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UnassignIncidentsRequest'
        description: Request to remove assignments from one or more incidents
        required: true
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:assign
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/incidents:unassign';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"incidentIds":["incident_id_1","incident_id_2"]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/incidents:unassign"


            payload = {"incidentIds": ["incident_id_1", "incident_id_2"]}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/incidents:unassign \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"incidentIds":["incident_id_1","incident_id_2"]}'
  /v1/integrations:
    get:
      summary: Get all integrations
      operationId: IntegrationService_GetIntegrations
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetIntegrationsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: includeTestingRevision
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations?includeTestingRevision=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/integrations"


            querystring = {"includeTestingRevision":"SOME_BOOLEAN_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/integrations?includeTestingRevision=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/integrations/definition/{id}:
    get:
      summary: Get integration definition
      operationId: IntegrationService_GetIntegrationDefinition
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetIntegrationDefinitionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: includeTestingRevision
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/definition/%7Bid%7D?includeTestingRevision=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/definition/%7Bid%7D"


            querystring = {"includeTestingRevision":"SOME_BOOLEAN_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/integrations/definition/%7Bid%7D?includeTestingRevision=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/integrations/deployed/{integrationId}:
    get:
      summary: Get deployed integration
      operationId: IntegrationService_GetDeployedIntegration
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetDeployedIntegrationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/deployed/%7BintegrationId%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/deployed/%7BintegrationId%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/integrations/deployed/%7BintegrationId%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/integrations/instance/{integrationId}:
    delete:
      summary: Delete integration
      operationId: IntegrationService_DeleteIntegration
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeleteIntegrationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:Deploy
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/instance/%7BintegrationId%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/instance/%7BintegrationId%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/integrations/instance/%7BintegrationId%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/integrations/managed/list:
    get:
      summary: List managed integration keys
      operationId: IntegrationService_ListManagedIntegrationKeys
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListManagedIntegrationKeysResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/managed/list';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/managed/list"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/integrations/managed/list \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/integrations/managed/status/{integrationId}:
    get:
      summary: Get managed integration status
      operationId: IntegrationService_GetManagedIntegrationStatus
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetManagedIntegrationStatusResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/managed/status/%7BintegrationId%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/managed/status/%7BintegrationId%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/integrations/managed/status/%7BintegrationId%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/integrations/metadata:
    post:
      summary: Save integration registration metadata
      operationId: IntegrationService_SaveIntegration
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1SaveIntegrationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1SaveIntegrationRequest'
        required: true
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:Deploy
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/metadata';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"metadata":{"integrationKey":"string","version":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string","booleanValue":true,"stringList":{"values":["string"]},"apiKey":{"id":"string","value":"string"},"numericValue":0.1,"sensitiveData":{}}]}}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/metadata"


            payload = {"metadata": {
                    "integrationKey": "string",
                    "version": "string",
                    "integrationParameters": {"parameters": [
                            {
                                "key": "string",
                                "stringValue": "string",
                                "booleanValue": True,
                                "stringList": {"values": ["string"]},
                                "apiKey": {
                                    "id": "string",
                                    "value": "string"
                                },
                                "numericValue": 0.1,
                                "sensitiveData": {}
                            }
                        ]}
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/integrations/metadata \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"metadata":{"integrationKey":"string","version":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string","booleanValue":true,"stringList":{"values":["string"]},"apiKey":{"id":"string","value":"string"},"numericValue":0.1,"sensitiveData":{}}]}}}'
      description: No description available
    put:
      summary: Update integration
      operationId: IntegrationService_UpdateIntegration
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdateIntegrationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UpdateIntegrationRequest'
        description: This data structure represents a list of outgoing webhook types.
        required: true
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:Deploy
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/metadata';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"string","metadata":{"integrationKey":"string","version":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string","booleanValue":true,"stringList":{"values":["string"]},"apiKey":{"id":"string","value":"string"},"numericValue":0.1,"sensitiveData":{}}]}}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/metadata"


            payload = {
                "id": "string",
                "metadata": {
                    "integrationKey": "string",
                    "version": "string",
                    "integrationParameters": {"parameters": [
                            {
                                "key": "string",
                                "stringValue": "string",
                                "booleanValue": True,
                                "stringList": {"values": ["string"]},
                                "apiKey": {
                                    "id": "string",
                                    "value": "string"
                                },
                                "numericValue": 0.1,
                                "sensitiveData": {}
                            }
                        ]}
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/integrations/metadata \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"string","metadata":{"integrationKey":"string","version":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string","booleanValue":true,"stringList":{"values":["string"]},"apiKey":{"id":"string","value":"string"},"numericValue":0.1,"sensitiveData":{}}]}}}'
      description: No description available
  /v1/integrations/metadata/test:
    post:
      summary: Test integration
      operationId: IntegrationService_TestIntegration
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestIntegrationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestIntegrationRequest'
        required: true
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/metadata/test';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"integrationData":{"integrationKey":"string","version":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string","booleanValue":true,"stringList":{"values":["string"]},"apiKey":{"id":"string","value":"string"},"numericValue":0.1,"sensitiveData":{}}]}},"integrationId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/metadata/test"


            payload = {
                "integrationData": {
                    "integrationKey": "string",
                    "version": "string",
                    "integrationParameters": {"parameters": [
                            {
                                "key": "string",
                                "stringValue": "string",
                                "booleanValue": True,
                                "stringList": {"values": ["string"]},
                                "apiKey": {
                                    "id": "string",
                                    "value": "string"
                                },
                                "numericValue": 0.1,
                                "sensitiveData": {}
                            }
                        ]}
                },
                "integrationId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/integrations/metadata/test \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"integrationData":{"integrationKey":"string","version":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string","booleanValue":true,"stringList":{"values":["string"]},"apiKey":{"id":"string","value":"string"},"numericValue":0.1,"sensitiveData":{}}]}},"integrationId":"string"}'
      description: No description available
  /v1/integrations/rum/app-versions:
    get:
      summary: Get RUM integration versions data
      operationId: IntegrationService_GetRumApplicationVersionData
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetRumApplicationVersionDataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: applicationName
          in: query
          required: true
          schema:
            type: string
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/rum/app-versions?applicationName=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/rum/app-versions"


            querystring = {"applicationName":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/integrations/rum/app-versions?applicationName=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/integrations/rum/sync:
    post:
      summary: Trigger sync of RUM integration data
      operationId: IntegrationService_SyncRumData
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1SyncRumDataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1SyncRumDataRequest'
        required: true
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/rum/sync';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"force":true}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/rum/sync"


            payload = {"force": True}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/integrations/rum/sync \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"force":true}'
      description: No description available
  /v1/integrations/template:
    get:
      summary: Get integration template
      operationId: IntegrationService_GetTemplate
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetTemplateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: integrationId
          in: query
          required: true
          schema:
            type: string
        - name: commonArmParams.logsUrl
          in: query
          required: true
          schema:
            type: string
        - name: commonArmParams.apiKey
          in: query
          required: true
          schema:
            type: string
        - name: commonArmParams.cgxDomain
          in: query
          required: true
          schema:
            type: string
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/template?integrationId=SOME_STRING_VALUE&commonArmParams.logsUrl=SOME_STRING_VALUE&commonArmParams.apiKey=SOME_STRING_VALUE&commonArmParams.cgxDomain=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/template"


            querystring =
            {"integrationId":"SOME_STRING_VALUE","commonArmParams.logsUrl":"SOME_STRING_VALUE","commonArmParams.apiKey":"SOME_STRING_VALUE","commonArmParams.cgxDomain":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/integrations/template?integrationId=SOME_STRING_VALUE&commonArmParams.logsUrl=SOME_STRING_VALUE&commonArmParams.apiKey=SOME_STRING_VALUE&commonArmParams.cgxDomain=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/integrations/{id}:
    get:
      summary: Get integration details
      operationId: IntegrationService_GetIntegrationDetails
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetIntegrationDetailsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: includeTestingRevision
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/integrations/%7Bid%7D?includeTestingRevision=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/integrations/%7Bid%7D"


            querystring = {"includeTestingRevision":"SOME_BOOLEAN_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/integrations/%7Bid%7D?includeTestingRevision=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/metrics-archive:
    get:
      operationId: MetricsConfiguratorPublicService_GetTenantConfig
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/metrics_configuratorGetTenantConfigResponseV2
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - MetricsConfiguratorPublicService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/metrics-archive';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/metrics-archive"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/metrics-archive \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      operationId: MetricsConfiguratorPublicService_ConfigureTenant
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metrics_configuratorConfigureTenantRequest'
        description: This data structure is used to configure a tenant.
        required: true
      tags:
        - MetricsConfiguratorPublicService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/metrics-archive';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"retentionPolicy":{"rawResolution":1,"fiveMinutesResolution":2,"oneHourResolution":3},"ibm":{"endpoint":"s3.us-south.cloud-object-storage.appdomain.cloud","crn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::","serviceCrn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"},"s3":{"bucket":"string","region":"string"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/metrics-archive"


            payload = {
                "retentionPolicy": {
                    "rawResolution": 1,
                    "fiveMinutesResolution": 2,
                    "oneHourResolution": 3
                },
                "ibm": {
                    "endpoint": "s3.us-south.cloud-object-storage.appdomain.cloud",
                    "crn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::",
                    "serviceCrn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"
                },
                "s3": {
                    "bucket": "string",
                    "region": "string"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/metrics-archive \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"retentionPolicy":{"rawResolution":1,"fiveMinutesResolution":2,"oneHourResolution":3},"ibm":{"endpoint":"s3.us-south.cloud-object-storage.appdomain.cloud","crn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::","serviceCrn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"},"s3":{"bucket":"string","region":"string"}}'
      description: No description available
    put:
      operationId: MetricsConfiguratorPublicService_Update
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metrics_configuratorUpdateRequest'
        description: This data structure is used to update the configuration of a tenant.
        required: true
      tags:
        - MetricsConfiguratorPublicService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/metrics-archive';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"retentionDays":0,"ibm":{"endpoint":"s3.us-south.cloud-object-storage.appdomain.cloud","crn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::","serviceCrn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"},"s3":{"bucket":"string","region":"string"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/metrics-archive"


            payload = {
                "retentionDays": 0,
                "ibm": {
                    "endpoint": "s3.us-south.cloud-object-storage.appdomain.cloud",
                    "crn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::",
                    "serviceCrn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"
                },
                "s3": {
                    "bucket": "string",
                    "region": "string"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/metrics-archive \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"retentionDays":0,"ibm":{"endpoint":"s3.us-south.cloud-object-storage.appdomain.cloud","crn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::","serviceCrn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"},"s3":{"bucket":"string","region":"string"}}'
      description: No description available
  /v1/metrics-archive:disable:
    post:
      operationId: MetricsConfiguratorPublicService_DisableArchive
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - MetricsConfiguratorPublicService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/metrics-archive:disable';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/metrics-archive:disable"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/metrics-archive:disable \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/metrics-archive:enable:
    post:
      operationId: MetricsConfiguratorPublicService_EnableArchive
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - MetricsConfiguratorPublicService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/metrics-archive:enable';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/metrics-archive:enable"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/metrics-archive:enable \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/metrics-archive:validate:
    post:
      operationId: MetricsConfiguratorPublicService_ValidateBucket
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metrics_configuratorValidateBucketRequest'
        description: This data structure is used to validate a bucket.
        required: true
      tags:
        - MetricsConfiguratorPublicService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/metrics-archive:validate';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"ibm":{"endpoint":"s3.us-south.cloud-object-storage.appdomain.cloud","crn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::","serviceCrn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"},"s3":{"bucket":"string","region":"string"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/metrics-archive:validate"


            payload = {
                "ibm": {
                    "endpoint": "s3.us-south.cloud-object-storage.appdomain.cloud",
                    "crn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::",
                    "serviceCrn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"
                },
                "s3": {
                    "bucket": "string",
                    "region": "string"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/metrics-archive:validate \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"ibm":{"endpoint":"s3.us-south.cloud-object-storage.appdomain.cloud","crn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::","serviceCrn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"},"s3":{"bucket":"string","region":"string"}}'
      description: No description available
  /v1/notification-center/connector:
    put:
      operationId: ConnectorsService_ReplaceConnector
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ReplaceConnectorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody: &ref_1
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1Connector'
        required: true
      tags:
        - ConnectorsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connector';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","userDefinedId":"user-connector-id","type":"CONNECTOR_TYPE_UNSPECIFIED","teamId":"12345","name":"My Slack Connector","description":"Connector for team notifications","createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","configOverrides":[{"deprecatedEntityType":"string","entityType":"ENTITY_TYPE_UNSPECIFIED","fields":[{"fieldName":"string","template":"string"}]}],"connectorConfig":{"fields":[{"fieldName":"string","value":"string"}]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/connector"


            payload = {
                "id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "userDefinedId": "user-connector-id",
                "type": "CONNECTOR_TYPE_UNSPECIFIED",
                "teamId": "12345",
                "name": "My Slack Connector",
                "description": "Connector for team notifications",
                "createTime": "2019-08-24T14:15:22Z",
                "updateTime": "2019-08-24T14:15:22Z",
                "configOverrides": [
                    {
                        "deprecatedEntityType": "string",
                        "entityType": "ENTITY_TYPE_UNSPECIFIED",
                        "fields": [
                            {
                                "fieldName": "string",
                                "template": "string"
                            }
                        ]
                    }
                ],
                "connectorConfig": {"fields": [
                        {
                            "fieldName": "string",
                            "value": "string"
                        }
                    ]}
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/connector \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","userDefinedId":"user-connector-id","type":"CONNECTOR_TYPE_UNSPECIFIED","teamId":"12345","name":"My Slack Connector","description":"Connector for team notifications","createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","configOverrides":[{"deprecatedEntityType":"string","entityType":"ENTITY_TYPE_UNSPECIFIED","fields":[{"fieldName":"string","template":"string"}]}],"connectorConfig":{"fields":[{"fieldName":"string","value":"string"}]}}'
      description: No description available
  /v1/notification-center/connectors:
    get:
      operationId: ConnectorsService_ListConnectors
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListConnectorsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: connectorType
          in: query
          required: false
          schema:
            type: string
            enum:
              - CONNECTOR_TYPE_UNSPECIFIED
              - SLACK
              - GENERIC_HTTPS
              - PAGERDUTY
              - AWS
              - IBM_EVENT_NOTIFICATIONS
            default: CONNECTOR_TYPE_UNSPECIFIED
      tags:
        - ConnectorsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors?connectorType=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors"


            querystring = {"connectorType":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors?connectorType=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      operationId: ConnectorsService_CreateConnector
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateConnectorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody: *ref_1
      tags:
        - ConnectorsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","userDefinedId":"user-connector-id","type":"CONNECTOR_TYPE_UNSPECIFIED","teamId":"12345","name":"My Slack Connector","description":"Connector for team notifications","createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","configOverrides":[{"deprecatedEntityType":"string","entityType":"ENTITY_TYPE_UNSPECIFIED","fields":[{"fieldName":"string","template":"string"}]}],"connectorConfig":{"fields":[{"fieldName":"string","value":"string"}]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors"


            payload = {
                "id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "userDefinedId": "user-connector-id",
                "type": "CONNECTOR_TYPE_UNSPECIFIED",
                "teamId": "12345",
                "name": "My Slack Connector",
                "description": "Connector for team notifications",
                "createTime": "2019-08-24T14:15:22Z",
                "updateTime": "2019-08-24T14:15:22Z",
                "configOverrides": [
                    {
                        "deprecatedEntityType": "string",
                        "entityType": "ENTITY_TYPE_UNSPECIFIED",
                        "fields": [
                            {
                                "fieldName": "string",
                                "template": "string"
                            }
                        ]
                    }
                ],
                "connectorConfig": {"fields": [
                        {
                            "fieldName": "string",
                            "value": "string"
                        }
                    ]}
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","userDefinedId":"user-connector-id","type":"CONNECTOR_TYPE_UNSPECIFIED","teamId":"12345","name":"My Slack Connector","description":"Connector for team notifications","createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","configOverrides":[{"deprecatedEntityType":"string","entityType":"ENTITY_TYPE_UNSPECIFIED","fields":[{"fieldName":"string","template":"string"}]}],"connectorConfig":{"fields":[{"fieldName":"string","value":"string"}]}}'
      description: No description available
  /v1/notification-center/connectors/{id}:
    get:
      operationId: ConnectorsService_GetConnector
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetConnectorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: deprecatedId
          in: query
          required: false
          schema:
            type: string
        - name: identifier.id
          description: The unique identifier automatically generated by the service
          in: query
          required: false
          schema:
            type: string
        - name: identifier.userDefinedId
          in: query
          required: false
          schema:
            type: string
      tags:
        - ConnectorsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors/%7Bid%7D?deprecatedId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors/%7Bid%7D"


            querystring =
            {"deprecatedId":"SOME_STRING_VALUE","identifier.id":"SOME_STRING_VALUE","identifier.userDefinedId":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors/%7Bid%7D?deprecatedId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      operationId: ConnectorsService_DeleteConnector
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeleteConnectorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: deprecatedId
          in: query
          required: false
          schema:
            type: string
        - name: identifier.id
          description: The unique identifier automatically generated by the service
          in: query
          required: false
          schema:
            type: string
        - name: identifier.userDefinedId
          in: query
          required: false
          schema:
            type: string
      tags:
        - ConnectorsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors/%7Bid%7D?deprecatedId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors/%7Bid%7D"


            querystring =
            {"deprecatedId":"SOME_STRING_VALUE","identifier.id":"SOME_STRING_VALUE","identifier.userDefinedId":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors/%7Bid%7D?deprecatedId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/notification-center/connectors:batchGet:
    get:
      operationId: ConnectorsService_BatchGetConnectors
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1BatchGetConnectorsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: deprecatedIds
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: connectorIds
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - ConnectorsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:batchGet?deprecatedIds=SOME_ARRAY_VALUE&connectorIds=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:batchGet"


            querystring =
            {"deprecatedIds":"SOME_ARRAY_VALUE","connectorIds":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:batchGet?deprecatedIds=SOME_ARRAY_VALUE&connectorIds=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/notification-center/connectors:batchGetSummaries:
    get:
      operationId: ConnectorsService_BatchGetConnectorSummaries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1BatchGetConnectorSummariesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: deprecatedIds
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: connectorIds
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - ConnectorsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:batchGetSummaries?deprecatedIds=SOME_ARRAY_VALUE&connectorIds=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:batchGetSummaries"


            querystring =
            {"deprecatedIds":"SOME_ARRAY_VALUE","connectorIds":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:batchGetSummaries?deprecatedIds=SOME_ARRAY_VALUE&connectorIds=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/notification-center/connectors:getTypeSummaries:
    get:
      operationId: ConnectorsService_GetConnectorTypeSummaries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetConnectorTypeSummariesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - ConnectorsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:getTypeSummaries';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:getTypeSummaries"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:getTypeSummaries \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/notification-center/connectors:listSummaries:
    get:
      operationId: ConnectorsService_ListConnectorSummaries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListConnectorSummariesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: connectorType
          in: query
          required: false
          schema:
            type: string
            enum:
              - CONNECTOR_TYPE_UNSPECIFIED
              - SLACK
              - GENERIC_HTTPS
              - PAGERDUTY
              - AWS
              - IBM_EVENT_NOTIFICATIONS
            default: CONNECTOR_TYPE_UNSPECIFIED
      tags:
        - ConnectorsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:listSummaries?connectorType=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:listSummaries"


            querystring = {"connectorType":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:listSummaries?connectorType=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/notification-center/entity-types:
    get:
      operationId: EntitiesService_ListEntityTypes
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListEntityTypesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - EntitiesService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/entity-types';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/entity-types"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/entity-types \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/notification-center/entity-types/{entityType}/entity-subtypes:
    get:
      operationId: EntitiesService_ListEntitySubTypes
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListEntitySubTypesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: entityType
          in: path
          required: true
          schema:
            type: string
            enum:
              - ENTITY_TYPE_UNSPECIFIED
              - ALERTS
              - TEST_NOTIFICATIONS
      tags:
        - EntitiesService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/entity-types/%7BentityType%7D/entity-subtypes';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/entity-types/%7BentityType%7D/entity-subtypes"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/entity-types/%7BentityType%7D/entity-subtypes \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/notification-center/notifications/testing:testConnectorConfiguration:
    post:
      operationId: TestingService_TestConnectorConfig
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestConnectorConfigResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestConnectorConfigRequest'
        description: Request to test a connector configuration
        required: true
      tags:
        - TestingService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testConnectorConfiguration';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"type":"CONNECTOR_TYPE_UNSPECIFIED","outputSchemaId":"default","fields":[{"fieldName":"string","value":"string"}],"deprecatedEntityType":"string","entityType":"ENTITY_TYPE_UNSPECIFIED"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testConnectorConfiguration"


            payload = {
                "type": "CONNECTOR_TYPE_UNSPECIFIED",
                "outputSchemaId": "default",
                "fields": [
                    {
                        "fieldName": "string",
                        "value": "string"
                    }
                ],
                "deprecatedEntityType": "string",
                "entityType": "ENTITY_TYPE_UNSPECIFIED"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testConnectorConfiguration \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"type":"CONNECTOR_TYPE_UNSPECIFIED","outputSchemaId":"default","fields":[{"fieldName":"string","value":"string"}],"deprecatedEntityType":"string","entityType":"ENTITY_TYPE_UNSPECIFIED"}'
      description: No description available
  /v1/notification-center/notifications/testing:testDestination:
    post:
      operationId: TestingService_TestDestination
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestDestinationResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestDestinationRequest'
        required: true
      tags:
        - TestingService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testDestination';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"deprecatedEntityType":"string","entitySubType":"logsImmediateResolved","deprecatedConnectorId":"string","deprecatedPresetId":"string","outputSchemaId":"default","messageConfigFields":[{"fieldName":"title","template":"{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"}],"connectorIdentifier":{"id":"string","userDefinedId":"string"},"presetIdentifier":{"id":"string","userDefinedId":"string"},"entityType":"ENTITY_TYPE_UNSPECIFIED","connectorConfigFields":[{"fieldName":"string","template":"string"}],"connectorId":"string","presetId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testDestination"


            payload = {
                "deprecatedEntityType": "string",
                "entitySubType": "logsImmediateResolved",
                "deprecatedConnectorId": "string",
                "deprecatedPresetId": "string",
                "outputSchemaId": "default",
                "messageConfigFields": [
                    {
                        "fieldName": "title",
                        "template": "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                    }
                ],
                "connectorIdentifier": {
                    "id": "string",
                    "userDefinedId": "string"
                },
                "presetIdentifier": {
                    "id": "string",
                    "userDefinedId": "string"
                },
                "entityType": "ENTITY_TYPE_UNSPECIFIED",
                "connectorConfigFields": [
                    {
                        "fieldName": "string",
                        "template": "string"
                    }
                ],
                "connectorId": "string",
                "presetId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testDestination \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"deprecatedEntityType":"string","entitySubType":"logsImmediateResolved","deprecatedConnectorId":"string","deprecatedPresetId":"string","outputSchemaId":"default","messageConfigFields":[{"fieldName":"title","template":"{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"}],"connectorIdentifier":{"id":"string","userDefinedId":"string"},"presetIdentifier":{"id":"string","userDefinedId":"string"},"entityType":"ENTITY_TYPE_UNSPECIFIED","connectorConfigFields":[{"fieldName":"string","template":"string"}],"connectorId":"string","presetId":"string"}'
      description: No description available
  /v1/notification-center/notifications/testing:testExistingConnector:
    post:
      operationId: TestingService_TestExistingConnector
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestExistingConnectorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestExistingConnectorRequest'
        required: true
      tags:
        - TestingService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testExistingConnector';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"deprecatedConnectorId":"string","outputSchemaId":"default","connectorIdentifier":{"id":"string","userDefinedId":"string"},"connectorId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testExistingConnector"


            payload = {
                "deprecatedConnectorId": "string",
                "outputSchemaId": "default",
                "connectorIdentifier": {
                    "id": "string",
                    "userDefinedId": "string"
                },
                "connectorId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testExistingConnector \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"deprecatedConnectorId":"string","outputSchemaId":"default","connectorIdentifier":{"id":"string","userDefinedId":"string"},"connectorId":"string"}'
      description: No description available
  /v1/notification-center/notifications/testing:testExistingPreset:
    post:
      operationId: TestingService_TestExistingPreset
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestExistingPresetResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestExistingPresetRequest'
        required: true
      tags:
        - TestingService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testExistingPreset';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"deprecatedEntityType":"string","entitySubType":"logsImmediateResolved","deprecatedPresetId":"string","deprecatedConnectorId":"string","connectorIdentifier":{"id":"string","userDefinedId":"string"},"presetIdentifier":{"id":"string","userDefinedId":"string"},"entityType":"ENTITY_TYPE_UNSPECIFIED","connectorId":"string","presetId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testExistingPreset"


            payload = {
                "deprecatedEntityType": "string",
                "entitySubType": "logsImmediateResolved",
                "deprecatedPresetId": "string",
                "deprecatedConnectorId": "string",
                "connectorIdentifier": {
                    "id": "string",
                    "userDefinedId": "string"
                },
                "presetIdentifier": {
                    "id": "string",
                    "userDefinedId": "string"
                },
                "entityType": "ENTITY_TYPE_UNSPECIFIED",
                "connectorId": "string",
                "presetId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testExistingPreset \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"deprecatedEntityType":"string","entitySubType":"logsImmediateResolved","deprecatedPresetId":"string","deprecatedConnectorId":"string","connectorIdentifier":{"id":"string","userDefinedId":"string"},"presetIdentifier":{"id":"string","userDefinedId":"string"},"entityType":"ENTITY_TYPE_UNSPECIFIED","connectorId":"string","presetId":"string"}'
      description: No description available
  /v1/notification-center/notifications/testing:testPresetConfiguration:
    post:
      operationId: TestingService_TestPresetConfig
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestPresetConfigResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestPresetConfigRequest'
        required: true
      tags:
        - TestingService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testPresetConfiguration';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"deprecatedEntityType":"string","entitySubType":"metric","deprecatedConnectorId":"string","deprecatedPresetId":"string","configOverrides":[{"conditionType":{"matchEntityType":{"deprecatedEntityType":"string","entityType":"ENTITY_TYPE_UNSPECIFIED"},"matchEntityTypeAndSubType":{"deprecatedEntityType":"string","entitySubType":"string","entityType":"ENTITY_TYPE_UNSPECIFIED"}},"payloadType":"string","messageConfig":{"fields":[{"fieldName":"title","template":"{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"}]}}],"connectorIdentifier":{"id":"string","userDefinedId":"string"},"presetIdentifier":{"id":"string","userDefinedId":"string"},"entityType":"ENTITY_TYPE_UNSPECIFIED","connectorId":"string","parentPresetId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testPresetConfiguration"


            payload = {
                "deprecatedEntityType": "string",
                "entitySubType": "metric",
                "deprecatedConnectorId": "string",
                "deprecatedPresetId": "string",
                "configOverrides": [
                    {
                        "conditionType": {
                            "matchEntityType": {
                                "deprecatedEntityType": "string",
                                "entityType": "ENTITY_TYPE_UNSPECIFIED"
                            },
                            "matchEntityTypeAndSubType": {
                                "deprecatedEntityType": "string",
                                "entitySubType": "string",
                                "entityType": "ENTITY_TYPE_UNSPECIFIED"
                            }
                        },
                        "payloadType": "string",
                        "messageConfig": {"fields": [
                                {
                                    "fieldName": "title",
                                    "template": "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                                }
                            ]}
                    }
                ],
                "connectorIdentifier": {
                    "id": "string",
                    "userDefinedId": "string"
                },
                "presetIdentifier": {
                    "id": "string",
                    "userDefinedId": "string"
                },
                "entityType": "ENTITY_TYPE_UNSPECIFIED",
                "connectorId": "string",
                "parentPresetId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testPresetConfiguration \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"deprecatedEntityType":"string","entitySubType":"metric","deprecatedConnectorId":"string","deprecatedPresetId":"string","configOverrides":[{"conditionType":{"matchEntityType":{"deprecatedEntityType":"string","entityType":"ENTITY_TYPE_UNSPECIFIED"},"matchEntityTypeAndSubType":{"deprecatedEntityType":"string","entitySubType":"string","entityType":"ENTITY_TYPE_UNSPECIFIED"}},"payloadType":"string","messageConfig":{"fields":[{"fieldName":"title","template":"{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"}]}}],"connectorIdentifier":{"id":"string","userDefinedId":"string"},"presetIdentifier":{"id":"string","userDefinedId":"string"},"entityType":"ENTITY_TYPE_UNSPECIFIED","connectorId":"string","parentPresetId":"string"}'
      description: No description available
  /v1/notification-center/notifications/testing:testRoutingConditionValid:
    post:
      operationId: TestingService_TestRoutingConditionValid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestRoutingConditionValidResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestRoutingConditionValidRequest'
        description: Request to check that provided routing condition is valid
        required: true
      tags:
        - TestingService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testRoutingConditionValid';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"deprecatedEntityType":"string","template":"alertDef.priority == \'P1\'","entityType":"ENTITY_TYPE_UNSPECIFIED"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testRoutingConditionValid"


            payload = {
                "deprecatedEntityType": "string",
                "template": "alertDef.priority == 'P1'",
                "entityType": "ENTITY_TYPE_UNSPECIFIED"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testRoutingConditionValid \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"deprecatedEntityType":"string","template":"alertDef.priority == '\''P1'\''","entityType":"ENTITY_TYPE_UNSPECIFIED"}'
      description: No description available
  /v1/notification-center/notifications/testing:testTemplateRender:
    post:
      operationId: TestingService_TestTemplateRender
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestTemplateRenderResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestTemplateRenderRequest'
        required: true
      tags:
        - TestingService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testTemplateRender';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"deprecatedEntityType":"string","entitySubType":"logsImmediateResolved","template":"{{ alertDef.name }}","entityType":"ENTITY_TYPE_UNSPECIFIED"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testTemplateRender"


            payload = {
                "deprecatedEntityType": "string",
                "entitySubType": "logsImmediateResolved",
                "template": "{{ alertDef.name }}",
                "entityType": "ENTITY_TYPE_UNSPECIFIED"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/notifications/testing:testTemplateRender \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"deprecatedEntityType":"string","entitySubType":"logsImmediateResolved","template":"{{ alertDef.name }}","entityType":"ENTITY_TYPE_UNSPECIFIED"}'
      description: No description available
  /v1/notification-center/presets/custom:
    post:
      operationId: PresetsService_CreateCustomPreset
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateCustomPresetResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody: &ref_2
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/presetsv1Preset'
        required: true
      tags:
        - PresetsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","userDefinedId":"user-preset-id","deprecatedEntityType":"string","connectorType":"CONNECTOR_TYPE_UNSPECIFIED","configOverrides":[{"conditionType":{"matchEntityType":{"deprecatedEntityType":"string","entityType":"ENTITY_TYPE_UNSPECIFIED"},"matchEntityTypeAndSubType":{"deprecatedEntityType":"string","entitySubType":"string","entityType":"ENTITY_TYPE_UNSPECIFIED"}},"payloadType":"string","messageConfig":{"fields":[{"fieldName":"title","template":"{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"}]}}],"name":"My Preset","description":"Custom preset for alerts","createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","presetType":"PRESET_TYPE_UNSPECIFIED","entityType":"ENTITY_TYPE_UNSPECIFIED","parentId":"preset_system_slack_alerts_detailed"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom"


            payload = {
                "id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "userDefinedId": "user-preset-id",
                "deprecatedEntityType": "string",
                "connectorType": "CONNECTOR_TYPE_UNSPECIFIED",
                "configOverrides": [
                    {
                        "conditionType": {
                            "matchEntityType": {
                                "deprecatedEntityType": "string",
                                "entityType": "ENTITY_TYPE_UNSPECIFIED"
                            },
                            "matchEntityTypeAndSubType": {
                                "deprecatedEntityType": "string",
                                "entitySubType": "string",
                                "entityType": "ENTITY_TYPE_UNSPECIFIED"
                            }
                        },
                        "payloadType": "string",
                        "messageConfig": {"fields": [
                                {
                                    "fieldName": "title",
                                    "template": "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                                }
                            ]}
                    }
                ],
                "name": "My Preset",
                "description": "Custom preset for alerts",
                "createTime": "2019-08-24T14:15:22Z",
                "updateTime": "2019-08-24T14:15:22Z",
                "presetType": "PRESET_TYPE_UNSPECIFIED",
                "entityType": "ENTITY_TYPE_UNSPECIFIED",
                "parentId": "preset_system_slack_alerts_detailed"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","userDefinedId":"user-preset-id","deprecatedEntityType":"string","connectorType":"CONNECTOR_TYPE_UNSPECIFIED","configOverrides":[{"conditionType":{"matchEntityType":{"deprecatedEntityType":"string","entityType":"ENTITY_TYPE_UNSPECIFIED"},"matchEntityTypeAndSubType":{"deprecatedEntityType":"string","entitySubType":"string","entityType":"ENTITY_TYPE_UNSPECIFIED"}},"payloadType":"string","messageConfig":{"fields":[{"fieldName":"title","template":"{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"}]}}],"name":"My Preset","description":"Custom preset for alerts","createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","presetType":"PRESET_TYPE_UNSPECIFIED","entityType":"ENTITY_TYPE_UNSPECIFIED","parentId":"preset_system_slack_alerts_detailed"}'
      description: No description available
    put:
      operationId: PresetsService_ReplaceCustomPreset
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ReplaceCustomPresetResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody: *ref_2
      tags:
        - PresetsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","userDefinedId":"user-preset-id","deprecatedEntityType":"string","connectorType":"CONNECTOR_TYPE_UNSPECIFIED","configOverrides":[{"conditionType":{"matchEntityType":{"deprecatedEntityType":"string","entityType":"ENTITY_TYPE_UNSPECIFIED"},"matchEntityTypeAndSubType":{"deprecatedEntityType":"string","entitySubType":"string","entityType":"ENTITY_TYPE_UNSPECIFIED"}},"payloadType":"string","messageConfig":{"fields":[{"fieldName":"title","template":"{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"}]}}],"name":"My Preset","description":"Custom preset for alerts","createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","presetType":"PRESET_TYPE_UNSPECIFIED","entityType":"ENTITY_TYPE_UNSPECIFIED","parentId":"preset_system_slack_alerts_detailed"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom"


            payload = {
                "id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "userDefinedId": "user-preset-id",
                "deprecatedEntityType": "string",
                "connectorType": "CONNECTOR_TYPE_UNSPECIFIED",
                "configOverrides": [
                    {
                        "conditionType": {
                            "matchEntityType": {
                                "deprecatedEntityType": "string",
                                "entityType": "ENTITY_TYPE_UNSPECIFIED"
                            },
                            "matchEntityTypeAndSubType": {
                                "deprecatedEntityType": "string",
                                "entitySubType": "string",
                                "entityType": "ENTITY_TYPE_UNSPECIFIED"
                            }
                        },
                        "payloadType": "string",
                        "messageConfig": {"fields": [
                                {
                                    "fieldName": "title",
                                    "template": "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                                }
                            ]}
                    }
                ],
                "name": "My Preset",
                "description": "Custom preset for alerts",
                "createTime": "2019-08-24T14:15:22Z",
                "updateTime": "2019-08-24T14:15:22Z",
                "presetType": "PRESET_TYPE_UNSPECIFIED",
                "entityType": "ENTITY_TYPE_UNSPECIFIED",
                "parentId": "preset_system_slack_alerts_detailed"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","userDefinedId":"user-preset-id","deprecatedEntityType":"string","connectorType":"CONNECTOR_TYPE_UNSPECIFIED","configOverrides":[{"conditionType":{"matchEntityType":{"deprecatedEntityType":"string","entityType":"ENTITY_TYPE_UNSPECIFIED"},"matchEntityTypeAndSubType":{"deprecatedEntityType":"string","entitySubType":"string","entityType":"ENTITY_TYPE_UNSPECIFIED"}},"payloadType":"string","messageConfig":{"fields":[{"fieldName":"title","template":"{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"}]}}],"name":"My Preset","description":"Custom preset for alerts","createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","presetType":"PRESET_TYPE_UNSPECIFIED","entityType":"ENTITY_TYPE_UNSPECIFIED","parentId":"preset_system_slack_alerts_detailed"}'
      description: No description available
  /v1/notification-center/presets/custom/{id}:
    delete:
      operationId: PresetsService_DeleteCustomPreset
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeleteCustomPresetResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: deprecatedIdentifier2.id
          in: query
          required: false
          schema:
            type: string
        - name: deprecatedIdentifier2.userFacingId
          in: query
          required: false
          schema:
            type: string
        - name: identifier.id
          description: The unique identifier automatically generated by the service
          in: query
          required: false
          schema:
            type: string
        - name: identifier.userDefinedId
          description: The unique identifier provided by the user
          in: query
          required: false
          schema:
            type: string
      tags:
        - PresetsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom/%7Bid%7D?deprecatedIdentifier2.id=SOME_STRING_VALUE&deprecatedIdentifier2.userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom/%7Bid%7D"


            querystring =
            {"deprecatedIdentifier2.id":"SOME_STRING_VALUE","deprecatedIdentifier2.userFacingId":"SOME_STRING_VALUE","identifier.id":"SOME_STRING_VALUE","identifier.userDefinedId":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom/%7Bid%7D?deprecatedIdentifier2.id=SOME_STRING_VALUE&deprecatedIdentifier2.userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/notification-center/presets/custom/{id}:defaultSet:
    post:
      operationId: PresetsService_SetCustomPresetAsDefault
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1SetCustomPresetAsDefaultResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: deprecatedIdentifier2.id
          in: query
          required: false
          schema:
            type: string
        - name: deprecatedIdentifier2.userFacingId
          in: query
          required: false
          schema:
            type: string
        - name: identifier.id
          description: The unique identifier automatically generated by the service
          in: query
          required: false
          schema:
            type: string
        - name: identifier.userDefinedId
          description: The unique identifier provided by the user
          in: query
          required: false
          schema:
            type: string
      tags:
        - PresetsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom/%7Bid%7D:defaultSet?deprecatedIdentifier2.id=SOME_STRING_VALUE&deprecatedIdentifier2.userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom/%7Bid%7D:defaultSet"


            querystring =
            {"deprecatedIdentifier2.id":"SOME_STRING_VALUE","deprecatedIdentifier2.userFacingId":"SOME_STRING_VALUE","identifier.id":"SOME_STRING_VALUE","identifier.userDefinedId":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom/%7Bid%7D:defaultSet?deprecatedIdentifier2.id=SOME_STRING_VALUE&deprecatedIdentifier2.userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/notification-center/presets/{id}:
    get:
      operationId: PresetsService_GetPreset
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetPresetResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: deprecatedIdentifier2.id
          in: query
          required: false
          schema:
            type: string
        - name: deprecatedIdentifier2.userFacingId
          in: query
          required: false
          schema:
            type: string
        - name: identifier.id
          description: The unique identifier automatically generated by the service
          in: query
          required: false
          schema:
            type: string
        - name: identifier.userDefinedId
          description: The unique identifier provided by the user
          in: query
          required: false
          schema:
            type: string
      tags:
        - PresetsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/%7Bid%7D?deprecatedIdentifier2.id=SOME_STRING_VALUE&deprecatedIdentifier2.userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/%7Bid%7D"


            querystring =
            {"deprecatedIdentifier2.id":"SOME_STRING_VALUE","deprecatedIdentifier2.userFacingId":"SOME_STRING_VALUE","identifier.id":"SOME_STRING_VALUE","identifier.userDefinedId":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/%7Bid%7D?deprecatedIdentifier2.id=SOME_STRING_VALUE&deprecatedIdentifier2.userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/notification-center/presets/{id}:defaultSet:
    post:
      operationId: PresetsService_SetPresetAsDefault
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1SetPresetAsDefaultResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: deprecatedIdentifier.id
          in: query
          required: false
          schema:
            type: string
        - name: deprecatedIdentifier.userFacingId
          in: query
          required: false
          schema:
            type: string
        - name: identifier.id
          description: The unique identifier automatically generated by the service
          in: query
          required: false
          schema:
            type: string
        - name: identifier.userDefinedId
          description: The unique identifier provided by the user
          in: query
          required: false
          schema:
            type: string
      tags:
        - PresetsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/%7Bid%7D:defaultSet?deprecatedIdentifier.id=SOME_STRING_VALUE&deprecatedIdentifier.userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/%7Bid%7D:defaultSet"


            querystring =
            {"deprecatedIdentifier.id":"SOME_STRING_VALUE","deprecatedIdentifier.userFacingId":"SOME_STRING_VALUE","identifier.id":"SOME_STRING_VALUE","identifier.userDefinedId":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/%7Bid%7D:defaultSet?deprecatedIdentifier.id=SOME_STRING_VALUE&deprecatedIdentifier.userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/notification-center/presets:batchGet:
    get:
      operationId: PresetsService_BatchGetPresets
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1BatchGetPresetsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: deprecatedIds
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: presetIds
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - PresetsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:batchGet?deprecatedIds=SOME_ARRAY_VALUE&presetIds=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:batchGet"


            querystring =
            {"deprecatedIds":"SOME_ARRAY_VALUE","presetIds":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:batchGet?deprecatedIds=SOME_ARRAY_VALUE&presetIds=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/notification-center/presets:defaultSummaryGet:
    get:
      operationId: PresetsService_GetDefaultPresetSummary
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetDefaultPresetSummaryResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: connectorType
          in: query
          required: false
          schema:
            type: string
            enum:
              - CONNECTOR_TYPE_UNSPECIFIED
              - SLACK
              - GENERIC_HTTPS
              - PAGERDUTY
              - AWS
              - IBM_EVENT_NOTIFICATIONS
            default: CONNECTOR_TYPE_UNSPECIFIED
        - name: deprecatedEntityType
          in: query
          required: false
          schema:
            type: string
        - name: entityType
          in: query
          required: false
          schema:
            type: string
            enum:
              - ENTITY_TYPE_UNSPECIFIED
              - ALERTS
              - TEST_NOTIFICATIONS
            default: ENTITY_TYPE_UNSPECIFIED
      tags:
        - PresetsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:defaultSummaryGet?connectorType=SOME_STRING_VALUE&deprecatedEntityType=SOME_STRING_VALUE&entityType=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:defaultSummaryGet"


            querystring =
            {"connectorType":"SOME_STRING_VALUE","deprecatedEntityType":"SOME_STRING_VALUE","entityType":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:defaultSummaryGet?connectorType=SOME_STRING_VALUE&deprecatedEntityType=SOME_STRING_VALUE&entityType=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/notification-center/presets:summariesList:
    get:
      operationId: PresetsService_ListPresetSummaries
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListPresetSummariesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: connectorType
          in: query
          required: false
          schema:
            type: string
            enum:
              - CONNECTOR_TYPE_UNSPECIFIED
              - SLACK
              - GENERIC_HTTPS
              - PAGERDUTY
              - AWS
              - IBM_EVENT_NOTIFICATIONS
            default: CONNECTOR_TYPE_UNSPECIFIED
        - name: deprecatedEntityType
          in: query
          required: false
          schema:
            type: string
        - name: entityType
          in: query
          required: false
          schema:
            type: string
            enum:
              - ENTITY_TYPE_UNSPECIFIED
              - ALERTS
              - TEST_NOTIFICATIONS
            default: ENTITY_TYPE_UNSPECIFIED
      tags:
        - PresetsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:summariesList?connectorType=SOME_STRING_VALUE&deprecatedEntityType=SOME_STRING_VALUE&entityType=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:summariesList"


            querystring =
            {"connectorType":"SOME_STRING_VALUE","deprecatedEntityType":"SOME_STRING_VALUE","entityType":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:summariesList?connectorType=SOME_STRING_VALUE&deprecatedEntityType=SOME_STRING_VALUE&entityType=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/notification-center/presets:systemDefaultSummaryGet:
    get:
      operationId: PresetsService_GetSystemDefaultPresetSummary
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetSystemDefaultPresetSummaryResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: connectorType
          in: query
          required: false
          schema:
            type: string
            enum:
              - CONNECTOR_TYPE_UNSPECIFIED
              - SLACK
              - GENERIC_HTTPS
              - PAGERDUTY
              - AWS
              - IBM_EVENT_NOTIFICATIONS
            default: CONNECTOR_TYPE_UNSPECIFIED
        - name: deprecatedEntityType
          in: query
          required: false
          schema:
            type: string
        - name: entityType
          in: query
          required: false
          schema:
            type: string
            enum:
              - ENTITY_TYPE_UNSPECIFIED
              - ALERTS
              - TEST_NOTIFICATIONS
            default: ENTITY_TYPE_UNSPECIFIED
      tags:
        - PresetsService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:systemDefaultSummaryGet?connectorType=SOME_STRING_VALUE&deprecatedEntityType=SOME_STRING_VALUE&entityType=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:systemDefaultSummaryGet"


            querystring =
            {"connectorType":"SOME_STRING_VALUE","deprecatedEntityType":"SOME_STRING_VALUE","entityType":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:systemDefaultSummaryGet?connectorType=SOME_STRING_VALUE&deprecatedEntityType=SOME_STRING_VALUE&entityType=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/notification-center/routers:
    get:
      operationId: GlobalRoutersService_ListGlobalRouters
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListGlobalRoutersResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: deprecatedEntityType
          in: query
          required: false
          schema:
            type: string
        - name: entityType
          in: query
          required: false
          schema:
            type: string
            enum:
              - ENTITY_TYPE_UNSPECIFIED
              - ALERTS
              - TEST_NOTIFICATIONS
            default: ENTITY_TYPE_UNSPECIFIED
      tags:
        - GlobalRoutersService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers?deprecatedEntityType=SOME_STRING_VALUE&entityType=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers"


            querystring =
            {"deprecatedEntityType":"SOME_STRING_VALUE","entityType":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers?deprecatedEntityType=SOME_STRING_VALUE&entityType=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      operationId: GlobalRoutersService_CreateGlobalRouter
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateGlobalRouterResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody: &ref_3
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1GlobalRouter'
        required: true
      tags:
        - GlobalRoutersService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","userDefinedId":"user-provided-id","deprecatedEntityType":"string","name":"My Router","description":"string","rules":[{"condition":"alertDef.priority == \'P3\'","targets":[{"deprecatedConnectorId":"string","deprecatedPresetId":"string","customDetails":{"property1":"string","property2":"string"},"connectorIdentifier":{"id":"string","userDefinedId":"string"},"presetIdentifier":{"id":"string","userDefinedId":"string"},"connectorId":"string","presetId":"string"}],"customDetails":{"property1":"string","property2":"string"},"name":"string"}],"fallback":[{"deprecatedConnectorId":"string","deprecatedPresetId":"string","customDetails":{"property1":"string","property2":"string"},"connectorIdentifier":{"id":"string","userDefinedId":"string"},"presetIdentifier":{"id":"string","userDefinedId":"string"},"connectorId":"string","presetId":"string"}],"createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","entityLabels":{"property1":"string","property2":"string"},"entityType":"ENTITY_TYPE_UNSPECIFIED"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers"


            payload = {
                "id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "userDefinedId": "user-provided-id",
                "deprecatedEntityType": "string",
                "name": "My Router",
                "description": "string",
                "rules": [
                    {
                        "condition": "alertDef.priority == 'P3'",
                        "targets": [
                            {
                                "deprecatedConnectorId": "string",
                                "deprecatedPresetId": "string",
                                "customDetails": {
                                    "property1": "string",
                                    "property2": "string"
                                },
                                "connectorIdentifier": {
                                    "id": "string",
                                    "userDefinedId": "string"
                                },
                                "presetIdentifier": {
                                    "id": "string",
                                    "userDefinedId": "string"
                                },
                                "connectorId": "string",
                                "presetId": "string"
                            }
                        ],
                        "customDetails": {
                            "property1": "string",
                            "property2": "string"
                        },
                        "name": "string"
                    }
                ],
                "fallback": [
                    {
                        "deprecatedConnectorId": "string",
                        "deprecatedPresetId": "string",
                        "customDetails": {
                            "property1": "string",
                            "property2": "string"
                        },
                        "connectorIdentifier": {
                            "id": "string",
                            "userDefinedId": "string"
                        },
                        "presetIdentifier": {
                            "id": "string",
                            "userDefinedId": "string"
                        },
                        "connectorId": "string",
                        "presetId": "string"
                    }
                ],
                "createTime": "2019-08-24T14:15:22Z",
                "updateTime": "2019-08-24T14:15:22Z",
                "entityLabels": {
                    "property1": "string",
                    "property2": "string"
                },
                "entityType": "ENTITY_TYPE_UNSPECIFIED"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","userDefinedId":"user-provided-id","deprecatedEntityType":"string","name":"My Router","description":"string","rules":[{"condition":"alertDef.priority == '\''P3'\''","targets":[{"deprecatedConnectorId":"string","deprecatedPresetId":"string","customDetails":{"property1":"string","property2":"string"},"connectorIdentifier":{"id":"string","userDefinedId":"string"},"presetIdentifier":{"id":"string","userDefinedId":"string"},"connectorId":"string","presetId":"string"}],"customDetails":{"property1":"string","property2":"string"},"name":"string"}],"fallback":[{"deprecatedConnectorId":"string","deprecatedPresetId":"string","customDetails":{"property1":"string","property2":"string"},"connectorIdentifier":{"id":"string","userDefinedId":"string"},"presetIdentifier":{"id":"string","userDefinedId":"string"},"connectorId":"string","presetId":"string"}],"createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","entityLabels":{"property1":"string","property2":"string"},"entityType":"ENTITY_TYPE_UNSPECIFIED"}'
      description: No description available
    put:
      operationId: GlobalRoutersService_ReplaceGlobalRouter
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ReplaceGlobalRouterResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody: *ref_3
      tags:
        - GlobalRoutersService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","userDefinedId":"user-provided-id","deprecatedEntityType":"string","name":"My Router","description":"string","rules":[{"condition":"alertDef.priority == \'P3\'","targets":[{"deprecatedConnectorId":"string","deprecatedPresetId":"string","customDetails":{"property1":"string","property2":"string"},"connectorIdentifier":{"id":"string","userDefinedId":"string"},"presetIdentifier":{"id":"string","userDefinedId":"string"},"connectorId":"string","presetId":"string"}],"customDetails":{"property1":"string","property2":"string"},"name":"string"}],"fallback":[{"deprecatedConnectorId":"string","deprecatedPresetId":"string","customDetails":{"property1":"string","property2":"string"},"connectorIdentifier":{"id":"string","userDefinedId":"string"},"presetIdentifier":{"id":"string","userDefinedId":"string"},"connectorId":"string","presetId":"string"}],"createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","entityLabels":{"property1":"string","property2":"string"},"entityType":"ENTITY_TYPE_UNSPECIFIED"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers"


            payload = {
                "id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "userDefinedId": "user-provided-id",
                "deprecatedEntityType": "string",
                "name": "My Router",
                "description": "string",
                "rules": [
                    {
                        "condition": "alertDef.priority == 'P3'",
                        "targets": [
                            {
                                "deprecatedConnectorId": "string",
                                "deprecatedPresetId": "string",
                                "customDetails": {
                                    "property1": "string",
                                    "property2": "string"
                                },
                                "connectorIdentifier": {
                                    "id": "string",
                                    "userDefinedId": "string"
                                },
                                "presetIdentifier": {
                                    "id": "string",
                                    "userDefinedId": "string"
                                },
                                "connectorId": "string",
                                "presetId": "string"
                            }
                        ],
                        "customDetails": {
                            "property1": "string",
                            "property2": "string"
                        },
                        "name": "string"
                    }
                ],
                "fallback": [
                    {
                        "deprecatedConnectorId": "string",
                        "deprecatedPresetId": "string",
                        "customDetails": {
                            "property1": "string",
                            "property2": "string"
                        },
                        "connectorIdentifier": {
                            "id": "string",
                            "userDefinedId": "string"
                        },
                        "presetIdentifier": {
                            "id": "string",
                            "userDefinedId": "string"
                        },
                        "connectorId": "string",
                        "presetId": "string"
                    }
                ],
                "createTime": "2019-08-24T14:15:22Z",
                "updateTime": "2019-08-24T14:15:22Z",
                "entityLabels": {
                    "property1": "string",
                    "property2": "string"
                },
                "entityType": "ENTITY_TYPE_UNSPECIFIED"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","userDefinedId":"user-provided-id","deprecatedEntityType":"string","name":"My Router","description":"string","rules":[{"condition":"alertDef.priority == '\''P3'\''","targets":[{"deprecatedConnectorId":"string","deprecatedPresetId":"string","customDetails":{"property1":"string","property2":"string"},"connectorIdentifier":{"id":"string","userDefinedId":"string"},"presetIdentifier":{"id":"string","userDefinedId":"string"},"connectorId":"string","presetId":"string"}],"customDetails":{"property1":"string","property2":"string"},"name":"string"}],"fallback":[{"deprecatedConnectorId":"string","deprecatedPresetId":"string","customDetails":{"property1":"string","property2":"string"},"connectorIdentifier":{"id":"string","userDefinedId":"string"},"presetIdentifier":{"id":"string","userDefinedId":"string"},"connectorId":"string","presetId":"string"}],"createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","entityLabels":{"property1":"string","property2":"string"},"entityType":"ENTITY_TYPE_UNSPECIFIED"}'
      description: No description available
  /v1/notification-center/routers/{id}:
    get:
      operationId: GlobalRoutersService_GetGlobalRouter
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetGlobalRouterResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: deprecatedIdentifier.id
          in: query
          required: false
          schema:
            type: string
        - name: deprecatedIdentifier.userFacingId
          in: query
          required: false
          schema:
            type: string
        - name: identifier.id
          description: The unique identifier automatically generated by the service
          in: query
          required: false
          schema:
            type: string
        - name: identifier.userDefinedId
          description: The unique identifier provided by the user
          in: query
          required: false
          schema:
            type: string
      tags:
        - GlobalRoutersService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers/%7Bid%7D?deprecatedIdentifier.id=SOME_STRING_VALUE&deprecatedIdentifier.userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers/%7Bid%7D"


            querystring =
            {"deprecatedIdentifier.id":"SOME_STRING_VALUE","deprecatedIdentifier.userFacingId":"SOME_STRING_VALUE","identifier.id":"SOME_STRING_VALUE","identifier.userDefinedId":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers/%7Bid%7D?deprecatedIdentifier.id=SOME_STRING_VALUE&deprecatedIdentifier.userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      operationId: GlobalRoutersService_DeleteGlobalRouter
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeleteGlobalRouterResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: deprecatedIdentifier.id
          in: query
          required: false
          schema:
            type: string
        - name: deprecatedIdentifier.userFacingId
          in: query
          required: false
          schema:
            type: string
        - name: identifier.id
          description: The unique identifier automatically generated by the service
          in: query
          required: false
          schema:
            type: string
        - name: identifier.userDefinedId
          description: The unique identifier provided by the user
          in: query
          required: false
          schema:
            type: string
      tags:
        - GlobalRoutersService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers/%7Bid%7D?deprecatedIdentifier.id=SOME_STRING_VALUE&deprecatedIdentifier.userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers/%7Bid%7D"


            querystring =
            {"deprecatedIdentifier.id":"SOME_STRING_VALUE","deprecatedIdentifier.userFacingId":"SOME_STRING_VALUE","identifier.id":"SOME_STRING_VALUE","identifier.userDefinedId":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers/%7Bid%7D?deprecatedIdentifier.id=SOME_STRING_VALUE&deprecatedIdentifier.userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/notification-center/routers:batchGetSummaries:
    get:
      operationId: GlobalRoutersService_BatchGetGlobalRouters
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1BatchGetGlobalRoutersResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: globalRouterIds
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - GlobalRoutersService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers:batchGetSummaries?globalRouterIds=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers:batchGetSummaries"


            querystring = {"globalRouterIds":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers:batchGetSummaries?globalRouterIds=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/outgoing-webhooks:
    get:
      summary: List outgoing webhooks
      operationId: OutgoingWebhooksService_ListOutgoingWebhooks
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListOutgoingWebhooksResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum:
              - UNKNOWN
              - GENERIC
              - SLACK
              - PAGERDUTY
              - SEND_LOG
              - EMAIL_GROUP
              - MICROSOFT_TEAMS
              - JIRA
              - OPSGENIE
              - DEMISTO
              - AWS_EVENT_BRIDGE
              - IBM_EVENT_NOTIFICATIONS
              - MS_TEAMS_WORKFLOW
            default: UNKNOWN
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks?type=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks"


            querystring = {"type":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks?type=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      summary: Create an outgoing webhook
      operationId: OutgoingWebhooksService_CreateOutgoingWebhook
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateOutgoingWebhookResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CreateOutgoingWebhookRequest'
        required: true
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"data":{"type":"UNKNOWN","name":"my_webhook","url":"slack.webhook.com","genericWebhook":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","method":"UNKNOWN","headers":{"Content-Type":"application/json"},"payload":{"key":"value"}},"slack":{"digests":[{"type":"UNKNOWN","isActive":"false"}],"attachments":[{"type":"EMPTY","isActive":"false"}]},"pagerDuty":{"serviceKey":"pager_duty_service_key"},"sendLog":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"emailGroup":{"emailAddresses":["example@coralogix.com"]},"microsoftTeams":{},"jira":{"apiToken":"jira_api_token","email":"jira_email","projectKey":"jira_project_key"},"opsgenie":{},"demisto":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"awsEventBridge":{"eventBusArn":"arn:aws:events:us-east-1:123456789012:event-bus/default","detail":{"key":"value"},"detailType":"detail_type","source":"source","roleName":"role_name"},"ibmEventNotifications":{"eventNotificationsInstanceId":"string","regionId":"string","sourceId":"string","sourceName":"string","endpointType":"ENDPOINT_TYPE_DEFAULT_OR_PUBLIC"},"msTeamsWorkflow":{}}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks"


            payload = {"data": {
                    "type": "UNKNOWN",
                    "name": "my_webhook",
                    "url": "slack.webhook.com",
                    "genericWebhook": {
                        "uuid": "d838cd7b-087b-40c6-bc33-80997020f5d0",
                        "method": "UNKNOWN",
                        "headers": {"Content-Type": "application/json"},
                        "payload": {"key": "value"}
                    },
                    "slack": {
                        "digests": [
                            {
                                "type": "UNKNOWN",
                                "isActive": "false"
                            }
                        ],
                        "attachments": [
                            {
                                "type": "EMPTY",
                                "isActive": "false"
                            }
                        ]
                    },
                    "pagerDuty": {"serviceKey": "pager_duty_service_key"},
                    "sendLog": {
                        "uuid": "d838cd7b-087b-40c6-bc33-80997020f5d0",
                        "payload": {"key": "value"}
                    },
                    "emailGroup": {"emailAddresses": ["example@coralogix.com"]},
                    "microsoftTeams": {},
                    "jira": {
                        "apiToken": "jira_api_token",
                        "email": "jira_email",
                        "projectKey": "jira_project_key"
                    },
                    "opsgenie": {},
                    "demisto": {
                        "uuid": "d838cd7b-087b-40c6-bc33-80997020f5d0",
                        "payload": {"key": "value"}
                    },
                    "awsEventBridge": {
                        "eventBusArn": "arn:aws:events:us-east-1:123456789012:event-bus/default",
                        "detail": {"key": "value"},
                        "detailType": "detail_type",
                        "source": "source",
                        "roleName": "role_name"
                    },
                    "ibmEventNotifications": {
                        "eventNotificationsInstanceId": "string",
                        "regionId": "string",
                        "sourceId": "string",
                        "sourceName": "string",
                        "endpointType": "ENDPOINT_TYPE_DEFAULT_OR_PUBLIC"
                    },
                    "msTeamsWorkflow": {}
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"data":{"type":"UNKNOWN","name":"my_webhook","url":"slack.webhook.com","genericWebhook":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","method":"UNKNOWN","headers":{"Content-Type":"application/json"},"payload":{"key":"value"}},"slack":{"digests":[{"type":"UNKNOWN","isActive":"false"}],"attachments":[{"type":"EMPTY","isActive":"false"}]},"pagerDuty":{"serviceKey":"pager_duty_service_key"},"sendLog":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"emailGroup":{"emailAddresses":["example@coralogix.com"]},"microsoftTeams":{},"jira":{"apiToken":"jira_api_token","email":"jira_email","projectKey":"jira_project_key"},"opsgenie":{},"demisto":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"awsEventBridge":{"eventBusArn":"arn:aws:events:us-east-1:123456789012:event-bus/default","detail":{"key":"value"},"detailType":"detail_type","source":"source","roleName":"role_name"},"ibmEventNotifications":{"eventNotificationsInstanceId":"string","regionId":"string","sourceId":"string","sourceName":"string","endpointType":"ENDPOINT_TYPE_DEFAULT_OR_PUBLIC"},"msTeamsWorkflow":{}}}'
      description: No description available
    put:
      summary: Update an outgoing webhook
      operationId: OutgoingWebhooksService_UpdateOutgoingWebhook
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdateOutgoingWebhookResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UpdateOutgoingWebhookRequest'
        required: true
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"example_id","data":{"type":"UNKNOWN","name":"my_webhook","url":"slack.webhook.com","genericWebhook":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","method":"UNKNOWN","headers":{"Content-Type":"application/json"},"payload":{"key":"value"}},"slack":{"digests":[{"type":"UNKNOWN","isActive":"false"}],"attachments":[{"type":"EMPTY","isActive":"false"}]},"pagerDuty":{"serviceKey":"pager_duty_service_key"},"sendLog":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"emailGroup":{"emailAddresses":["example@coralogix.com"]},"microsoftTeams":{},"jira":{"apiToken":"jira_api_token","email":"jira_email","projectKey":"jira_project_key"},"opsgenie":{},"demisto":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"awsEventBridge":{"eventBusArn":"arn:aws:events:us-east-1:123456789012:event-bus/default","detail":{"key":"value"},"detailType":"detail_type","source":"source","roleName":"role_name"},"ibmEventNotifications":{"eventNotificationsInstanceId":"string","regionId":"string","sourceId":"string","sourceName":"string","endpointType":"ENDPOINT_TYPE_DEFAULT_OR_PUBLIC"},"msTeamsWorkflow":{}}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks"


            payload = {
                "id": "example_id",
                "data": {
                    "type": "UNKNOWN",
                    "name": "my_webhook",
                    "url": "slack.webhook.com",
                    "genericWebhook": {
                        "uuid": "d838cd7b-087b-40c6-bc33-80997020f5d0",
                        "method": "UNKNOWN",
                        "headers": {"Content-Type": "application/json"},
                        "payload": {"key": "value"}
                    },
                    "slack": {
                        "digests": [
                            {
                                "type": "UNKNOWN",
                                "isActive": "false"
                            }
                        ],
                        "attachments": [
                            {
                                "type": "EMPTY",
                                "isActive": "false"
                            }
                        ]
                    },
                    "pagerDuty": {"serviceKey": "pager_duty_service_key"},
                    "sendLog": {
                        "uuid": "d838cd7b-087b-40c6-bc33-80997020f5d0",
                        "payload": {"key": "value"}
                    },
                    "emailGroup": {"emailAddresses": ["example@coralogix.com"]},
                    "microsoftTeams": {},
                    "jira": {
                        "apiToken": "jira_api_token",
                        "email": "jira_email",
                        "projectKey": "jira_project_key"
                    },
                    "opsgenie": {},
                    "demisto": {
                        "uuid": "d838cd7b-087b-40c6-bc33-80997020f5d0",
                        "payload": {"key": "value"}
                    },
                    "awsEventBridge": {
                        "eventBusArn": "arn:aws:events:us-east-1:123456789012:event-bus/default",
                        "detail": {"key": "value"},
                        "detailType": "detail_type",
                        "source": "source",
                        "roleName": "role_name"
                    },
                    "ibmEventNotifications": {
                        "eventNotificationsInstanceId": "string",
                        "regionId": "string",
                        "sourceId": "string",
                        "sourceName": "string",
                        "endpointType": "ENDPOINT_TYPE_DEFAULT_OR_PUBLIC"
                    },
                    "msTeamsWorkflow": {}
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"example_id","data":{"type":"UNKNOWN","name":"my_webhook","url":"slack.webhook.com","genericWebhook":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","method":"UNKNOWN","headers":{"Content-Type":"application/json"},"payload":{"key":"value"}},"slack":{"digests":[{"type":"UNKNOWN","isActive":"false"}],"attachments":[{"type":"EMPTY","isActive":"false"}]},"pagerDuty":{"serviceKey":"pager_duty_service_key"},"sendLog":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"emailGroup":{"emailAddresses":["example@coralogix.com"]},"microsoftTeams":{},"jira":{"apiToken":"jira_api_token","email":"jira_email","projectKey":"jira_project_key"},"opsgenie":{},"demisto":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"awsEventBridge":{"eventBusArn":"arn:aws:events:us-east-1:123456789012:event-bus/default","detail":{"key":"value"},"detailType":"detail_type","source":"source","roleName":"role_name"},"ibmEventNotifications":{"eventNotificationsInstanceId":"string","regionId":"string","sourceId":"string","sourceName":"string","endpointType":"ENDPOINT_TYPE_DEFAULT_OR_PUBLIC"},"msTeamsWorkflow":{}}}'
      description: No description available
  /v1/outgoing-webhooks/all:
    get:
      summary: List all outgoing webhooks
      operationId: OutgoingWebhooksService_ListAllOutgoingWebhooks
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListAllOutgoingWebhooksResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/all';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/all"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/all \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/outgoing-webhooks/ibm-event-notifications/instances:
    get:
      summary: List IBM event notification instances
      operationId: OutgoingWebhooksService_ListIbmEventNotificationsInstances
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/v1ListIbmEventNotificationsInstancesResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/ibm-event-notifications/instances';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/ibm-event-notifications/instances"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/ibm-event-notifications/instances \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/outgoing-webhooks/summary:
    get:
      summary: List outbound webhooks summary
      operationId: OutgoingWebhooksService_ListOutboundWebhooksSummary
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListOutboundWebhooksSummaryResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:ReadSummary
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/summary';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/summary"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/summary \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/outgoing-webhooks/test:
    post:
      summary: Test an outgoing webhook
      operationId: OutgoingWebhooksService_TestOutgoingWebhook
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestOutgoingWebhookResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestOutgoingWebhookRequest'
        required: true
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/test';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"data":{"type":"UNKNOWN","name":"my_webhook","url":"slack.webhook.com","genericWebhook":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","method":"UNKNOWN","headers":{"Content-Type":"application/json"},"payload":{"key":"value"}},"slack":{"digests":[{"type":"UNKNOWN","isActive":"false"}],"attachments":[{"type":"EMPTY","isActive":"false"}]},"pagerDuty":{"serviceKey":"pager_duty_service_key"},"sendLog":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"emailGroup":{"emailAddresses":["example@coralogix.com"]},"microsoftTeams":{},"jira":{"apiToken":"jira_api_token","email":"jira_email","projectKey":"jira_project_key"},"opsgenie":{},"demisto":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"awsEventBridge":{"eventBusArn":"arn:aws:events:us-east-1:123456789012:event-bus/default","detail":{"key":"value"},"detailType":"detail_type","source":"source","roleName":"role_name"},"ibmEventNotifications":{"eventNotificationsInstanceId":"string","regionId":"string","sourceId":"string","sourceName":"string","endpointType":"ENDPOINT_TYPE_DEFAULT_OR_PUBLIC"},"msTeamsWorkflow":{}}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/test"


            payload = {"data": {
                    "type": "UNKNOWN",
                    "name": "my_webhook",
                    "url": "slack.webhook.com",
                    "genericWebhook": {
                        "uuid": "d838cd7b-087b-40c6-bc33-80997020f5d0",
                        "method": "UNKNOWN",
                        "headers": {"Content-Type": "application/json"},
                        "payload": {"key": "value"}
                    },
                    "slack": {
                        "digests": [
                            {
                                "type": "UNKNOWN",
                                "isActive": "false"
                            }
                        ],
                        "attachments": [
                            {
                                "type": "EMPTY",
                                "isActive": "false"
                            }
                        ]
                    },
                    "pagerDuty": {"serviceKey": "pager_duty_service_key"},
                    "sendLog": {
                        "uuid": "d838cd7b-087b-40c6-bc33-80997020f5d0",
                        "payload": {"key": "value"}
                    },
                    "emailGroup": {"emailAddresses": ["example@coralogix.com"]},
                    "microsoftTeams": {},
                    "jira": {
                        "apiToken": "jira_api_token",
                        "email": "jira_email",
                        "projectKey": "jira_project_key"
                    },
                    "opsgenie": {},
                    "demisto": {
                        "uuid": "d838cd7b-087b-40c6-bc33-80997020f5d0",
                        "payload": {"key": "value"}
                    },
                    "awsEventBridge": {
                        "eventBusArn": "arn:aws:events:us-east-1:123456789012:event-bus/default",
                        "detail": {"key": "value"},
                        "detailType": "detail_type",
                        "source": "source",
                        "roleName": "role_name"
                    },
                    "ibmEventNotifications": {
                        "eventNotificationsInstanceId": "string",
                        "regionId": "string",
                        "sourceId": "string",
                        "sourceName": "string",
                        "endpointType": "ENDPOINT_TYPE_DEFAULT_OR_PUBLIC"
                    },
                    "msTeamsWorkflow": {}
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/test \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"data":{"type":"UNKNOWN","name":"my_webhook","url":"slack.webhook.com","genericWebhook":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","method":"UNKNOWN","headers":{"Content-Type":"application/json"},"payload":{"key":"value"}},"slack":{"digests":[{"type":"UNKNOWN","isActive":"false"}],"attachments":[{"type":"EMPTY","isActive":"false"}]},"pagerDuty":{"serviceKey":"pager_duty_service_key"},"sendLog":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"emailGroup":{"emailAddresses":["example@coralogix.com"]},"microsoftTeams":{},"jira":{"apiToken":"jira_api_token","email":"jira_email","projectKey":"jira_project_key"},"opsgenie":{},"demisto":{"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0","payload":{"key":"value"}},"awsEventBridge":{"eventBusArn":"arn:aws:events:us-east-1:123456789012:event-bus/default","detail":{"key":"value"},"detailType":"detail_type","source":"source","roleName":"role_name"},"ibmEventNotifications":{"eventNotificationsInstanceId":"string","regionId":"string","sourceId":"string","sourceName":"string","endpointType":"ENDPOINT_TYPE_DEFAULT_OR_PUBLIC"},"msTeamsWorkflow":{}}}'
      description: No description available
  /v1/outgoing-webhooks/test-existing:
    post:
      summary: Test an existing outgoing webhook
      operationId: OutgoingWebhooksService_TestExistingOutgoingWebhook
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TestOutgoingWebhookResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TestExistingOutgoingWebhookRequest'
        required: true
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/test-existing';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"example_id"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/test-existing"


            payload = {"id": "example_id"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/test-existing \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"example_id"}'
      description: No description available
  /v1/outgoing-webhooks/types:
    get:
      summary: Get outgoing webhook types
      operationId: OutgoingWebhooksService_ListOutgoingWebhookTypes
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListOutgoingWebhookTypesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/types';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/types"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/types \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/outgoing-webhooks/types/{type}:
    get:
      summary: Get outgoing webhook type details
      operationId: OutgoingWebhooksService_GetOutgoingWebhookTypeDetails
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetOutgoingWebhookTypeDetailsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum:
              - UNKNOWN
              - GENERIC
              - SLACK
              - PAGERDUTY
              - SEND_LOG
              - EMAIL_GROUP
              - MICROSOFT_TEAMS
              - JIRA
              - OPSGENIE
              - DEMISTO
              - AWS_EVENT_BRIDGE
              - IBM_EVENT_NOTIFICATIONS
              - MS_TEAMS_WORKFLOW
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/types/%7Btype%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/types/%7Btype%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/types/%7Btype%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/outgoing-webhooks/{id}:
    get:
      summary: Get outgoing webhook
      operationId: OutgoingWebhooksService_GetOutgoingWebhook
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetOutgoingWebhookResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      summary: Delete an outgoing webhook
      operationId: OutgoingWebhooksService_DeleteOutgoingWebhook
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeleteOutgoingWebhookResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/policies:
    get:
      summary: Get Company Policies
      operationId: PoliciesService_GetCompanyPolicies
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetCompanyPoliciesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: enabledOnly
          in: query
          required: true
          schema:
            type: boolean
        - name: sourceType
          in: query
          required: true
          schema:
            type: string
            enum:
              - SOURCE_TYPE_UNSPECIFIED
              - SOURCE_TYPE_LOGS
              - SOURCE_TYPE_SPANS
            default: SOURCE_TYPE_UNSPECIFIED
      tags:
        - Policies Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/policies?enabledOnly=SOME_BOOLEAN_VALUE&sourceType=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/policies"


            querystring =
            {"enabledOnly":"SOME_BOOLEAN_VALUE","sourceType":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/policies?enabledOnly=SOME_BOOLEAN_VALUE&sourceType=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      summary: Get Policy by ID
      operationId: PoliciesService_CreatePolicy
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreatePolicyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CreatePolicyRequest'
        description: This data structue is used to create a new policy.
        required: true
      tags:
        - Policies Service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/policies';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"My Policy","description":"My Policy Description","priority":"PRIORITY_TYPE_UNSPECIFIED","applicationRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"subsystemRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"archiveRetention":{"id":"string"},"logRules":{"severities":["SEVERITY_UNSPECIFIED"]},"spanRules":{"serviceRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"actionRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"tagRules":[{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","tagName":"tag_name","tagValue":"tag_value"}]}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/policies"


            payload = {
                "name": "My Policy",
                "description": "My Policy Description",
                "priority": "PRIORITY_TYPE_UNSPECIFIED",
                "applicationRule": {
                    "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                    "name": "string"
                },
                "subsystemRule": {
                    "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                    "name": "string"
                },
                "archiveRetention": {"id": "string"},
                "logRules": {"severities": ["SEVERITY_UNSPECIFIED"]},
                "spanRules": {
                    "serviceRule": {
                        "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                        "name": "string"
                    },
                    "actionRule": {
                        "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                        "name": "string"
                    },
                    "tagRules": [
                        {
                            "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                            "tagName": "tag_name",
                            "tagValue": "tag_value"
                        }
                    ]
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/policies \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"My Policy","description":"My Policy Description","priority":"PRIORITY_TYPE_UNSPECIFIED","applicationRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"subsystemRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"archiveRetention":{"id":"string"},"logRules":{"severities":["SEVERITY_UNSPECIFIED"]},"spanRules":{"serviceRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"actionRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"tagRules":[{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","tagName":"tag_name","tagValue":"tag_value"}]}}'
      description: No description available
    put:
      summary: Update Policy
      operationId: PoliciesService_UpdatePolicy
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdatePolicyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UpdatePolicyRequest'
        description: This data structue is used to update an existing policy.
        required: true
      tags:
        - Policies Service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/policies';

            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"policy_id","name":"My Policy","description":"My Policy Description","priority":"PRIORITY_TYPE_UNSPECIFIED","applicationRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"subsystemRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"archiveRetention":{"id":"string"},"logRules":{"severities":["SEVERITY_UNSPECIFIED"]},"spanRules":{"serviceRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"actionRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"tagRules":[{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","tagName":"tag_name","tagValue":"tag_value"}]},"enabled":true}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/policies"


            payload = {
                "id": "policy_id",
                "name": "My Policy",
                "description": "My Policy Description",
                "priority": "PRIORITY_TYPE_UNSPECIFIED",
                "applicationRule": {
                    "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                    "name": "string"
                },
                "subsystemRule": {
                    "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                    "name": "string"
                },
                "archiveRetention": {"id": "string"},
                "logRules": {"severities": ["SEVERITY_UNSPECIFIED"]},
                "spanRules": {
                    "serviceRule": {
                        "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                        "name": "string"
                    },
                    "actionRule": {
                        "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                        "name": "string"
                    },
                    "tagRules": [
                        {
                            "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                            "tagName": "tag_name",
                            "tagValue": "tag_value"
                        }
                    ]
                },
                "enabled": True
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/policies \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"policy_id","name":"My Policy","description":"My Policy Description","priority":"PRIORITY_TYPE_UNSPECIFIED","applicationRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"subsystemRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"archiveRetention":{"id":"string"},"logRules":{"severities":["SEVERITY_UNSPECIFIED"]},"spanRules":{"serviceRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"actionRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"tagRules":[{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","tagName":"tag_name","tagValue":"tag_value"}]},"enabled":true}'
      description: No description available
  /v1/policies/{id}:
    get:
      summary: Get Policy by ID
      operationId: PoliciesService_GetPolicy
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetPolicyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - Policies Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/policies/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/policies/%7Bid%7D"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/policies/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      summary: Delete Policy
      operationId: PoliciesService_DeletePolicy
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeletePolicyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - Policies Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/policies/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/policies/%7Bid%7D"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("DELETE", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/policies/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/policies:atomicOverwriteLogPolicies:
    post:
      summary: Atomic Overwrite Log Policies
      operationId: PoliciesService_AtomicOverwriteLogPolicies
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1AtomicOverwriteLogPoliciesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1AtomicOverwriteLogPoliciesRequest'
        description: >-
          In an atomic operation delete all existing log policies and create the
          provided list by order.
        required: true
      tags:
        - Policies Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/policies:atomicOverwriteLogPolicies';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"policies":[{"policy":{"name":"My Policy","description":"My Policy Description","priority":"PRIORITY_TYPE_UNSPECIFIED","applicationRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"subsystemRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"archiveRetention":{"id":"string"}},"logRules":{"severities":["SEVERITY_UNSPECIFIED"]}}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/policies:atomicOverwriteLogPolicies"


            payload = {"policies": [
                    {
                        "policy": {
                            "name": "My Policy",
                            "description": "My Policy Description",
                            "priority": "PRIORITY_TYPE_UNSPECIFIED",
                            "applicationRule": {
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                                "name": "string"
                            },
                            "subsystemRule": {
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                                "name": "string"
                            },
                            "archiveRetention": {"id": "string"}
                        },
                        "logRules": {"severities": ["SEVERITY_UNSPECIFIED"]}
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/policies:atomicOverwriteLogPolicies \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"policies":[{"policy":{"name":"My Policy","description":"My Policy Description","priority":"PRIORITY_TYPE_UNSPECIFIED","applicationRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"subsystemRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"archiveRetention":{"id":"string"}},"logRules":{"severities":["SEVERITY_UNSPECIFIED"]}}]}'
      description: No description available
  /v1/policies:atomicOverwriteSpanPolicies:
    post:
      summary: Atomic Overwrite Span Policies
      operationId: PoliciesService_AtomicOverwriteSpanPolicies
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1AtomicOverwriteSpanPoliciesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1AtomicOverwriteSpanPoliciesRequest'
        description: >-
          In an atomic operation delete all existing span policies and create
          the provided list by order.
        required: true
      tags:
        - Policies Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/policies:atomicOverwriteSpanPolicies';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"policies":[{"policy":{"name":"My Policy","description":"My Policy Description","priority":"PRIORITY_TYPE_UNSPECIFIED","applicationRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"subsystemRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"archiveRetention":{"id":"string"}},"spanRules":{"serviceRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"actionRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"tagRules":[{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","tagName":"tag_name","tagValue":"tag_value"}]}}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/policies:atomicOverwriteSpanPolicies"


            payload = {"policies": [
                    {
                        "policy": {
                            "name": "My Policy",
                            "description": "My Policy Description",
                            "priority": "PRIORITY_TYPE_UNSPECIFIED",
                            "applicationRule": {
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                                "name": "string"
                            },
                            "subsystemRule": {
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                                "name": "string"
                            },
                            "archiveRetention": {"id": "string"}
                        },
                        "spanRules": {
                            "serviceRule": {
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                                "name": "string"
                            },
                            "actionRule": {
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                                "name": "string"
                            },
                            "tagRules": [
                                {
                                    "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                                    "tagName": "tag_name",
                                    "tagValue": "tag_value"
                                }
                            ]
                        }
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/policies:atomicOverwriteSpanPolicies \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"policies":[{"policy":{"name":"My Policy","description":"My Policy Description","priority":"PRIORITY_TYPE_UNSPECIFIED","applicationRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"subsystemRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"archiveRetention":{"id":"string"}},"spanRules":{"serviceRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"actionRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"tagRules":[{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","tagName":"tag_name","tagValue":"tag_value"}]}}]}'
      description: No description available
  /v1/policies:bulkCreate:
    post:
      summary: Atomic Batch Create Policy
      operationId: PoliciesService_AtomicBatchCreatePolicy
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1AtomicBatchCreatePolicyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1AtomicBatchCreatePolicyRequest'
        description: This data structure is used to create multiple policies atomically.
        required: true
      tags:
        - Policies Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/policies:bulkCreate';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"policyRequests":[{"name":"My Policy","description":"My Policy Description","priority":"PRIORITY_TYPE_UNSPECIFIED","applicationRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"subsystemRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"archiveRetention":{"id":"string"},"logRules":{"severities":["SEVERITY_UNSPECIFIED"]},"spanRules":{"serviceRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"actionRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"tagRules":[{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","tagName":"tag_name","tagValue":"tag_value"}]}}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/policies:bulkCreate"


            payload = {"policyRequests": [
                    {
                        "name": "My Policy",
                        "description": "My Policy Description",
                        "priority": "PRIORITY_TYPE_UNSPECIFIED",
                        "applicationRule": {
                            "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                            "name": "string"
                        },
                        "subsystemRule": {
                            "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                            "name": "string"
                        },
                        "archiveRetention": {"id": "string"},
                        "logRules": {"severities": ["SEVERITY_UNSPECIFIED"]},
                        "spanRules": {
                            "serviceRule": {
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                                "name": "string"
                            },
                            "actionRule": {
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                                "name": "string"
                            },
                            "tagRules": [
                                {
                                    "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                                    "tagName": "tag_name",
                                    "tagValue": "tag_value"
                                }
                            ]
                        }
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/policies:bulkCreate \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"policyRequests":[{"name":"My Policy","description":"My Policy Description","priority":"PRIORITY_TYPE_UNSPECIFIED","applicationRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"subsystemRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"archiveRetention":{"id":"string"},"logRules":{"severities":["SEVERITY_UNSPECIFIED"]},"spanRules":{"serviceRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"actionRule":{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","name":"string"},"tagRules":[{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","tagName":"tag_name","tagValue":"tag_value"}]}}]}'
      description: No description available
  /v1/policies:bulkTestLog:
    post:
      summary: Bulk Test Log Policies
      operationId: PoliciesService_BulkTestLogPolicies
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1BulkTestLogPoliciesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1BulkTestLogPoliciesRequest'
        description: Request to test multiple log policies.
        required: true
      tags:
        - Policies Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/policies:bulkTestLog';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"metaFieldsValuesList":[{"applicationNameValues":"application_name","severityValues":"severity","subsystemNameValues":"subsystem_name"}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/policies:bulkTestLog"


            payload = {"metaFieldsValuesList": [
                    {
                        "applicationNameValues": "application_name",
                        "severityValues": "severity",
                        "subsystemNameValues": "subsystem_name"
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/policies:bulkTestLog \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"metaFieldsValuesList":[{"applicationNameValues":"application_name","severityValues":"severity","subsystemNameValues":"subsystem_name"}]}'
      description: No description available
  /v1/policies:reorder:
    post:
      summary: Reorder Policies
      operationId: PoliciesService_ReorderPolicies
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ReorderPoliciesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1ReorderPoliciesRequest'
        description: This data structue is used to reorder policies.
        required: true
      tags:
        - Policies Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/policies:reorder';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"orders":[{"order":1,"id":"id"}],"sourceType":"SOURCE_TYPE_UNSPECIFIED"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/policies:reorder"


            payload = {
                "orders": [
                    {
                        "order": 1,
                        "id": "id"
                    }
                ],
                "sourceType": "SOURCE_TYPE_UNSPECIFIED"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/policies:reorder \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"orders":[{"order":1,"id":"id"}],"sourceType":"SOURCE_TYPE_UNSPECIFIED"}'
      description: No description available
  /v1/policies:toggle:
    post:
      summary: Toggle Policies
      operationId: PoliciesService_TogglePolicy
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1TogglePolicyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1TogglePolicyRequest'
        description: This data structue is used to toggle a policy by its ID.
        required: true
      tags:
        - Policies Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/policies:toggle';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"id","enabled":true}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/policies:toggle"


            payload = {
                "id": "id",
                "enabled": True
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/policies:toggle \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"id","enabled":true}'
      description: No description available
  /v1/retentions:
    get:
      summary: Get Retentions
      operationId: RetentionsService_GetRetentions
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetRetentionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Retentions Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v1/retentions';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/retentions"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/retentions \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      summary: Update Retentions
      operationId: RetentionsService_UpdateRetentions
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdateRetentionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UpdateRetentionsRequest'
        description: This data structure is used to update retentions
        required: true
      tags:
        - Retentions Service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/retentions';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"retentionUpdateElements":[{"id":"string","name":"string"}]}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/retentions"


            payload = {"retentionUpdateElements": [
                    {
                        "id": "string",
                        "name": "string"
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/retentions \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"retentionUpdateElements":[{"id":"string","name":"string"}]}'
      description: No description available
  /v1/retentions/enabled:
    get:
      summary: Get Retentions Enabled
      operationId: RetentionsService_GetRetentionsEnabled
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetRetentionsEnabledResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Retentions Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/retentions/enabled';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/retentions/enabled"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/retentions/enabled \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/retentions:activate:
    post:
      summary: Activate Retentions
      operationId: RetentionsService_ActivateRetentions
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ActivateRetentionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1ActivateRetentionsRequest'
        required: true
      tags:
        - Retentions Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/retentions:activate';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/retentions:activate"


            payload = {}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/retentions:activate \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{}'
      description: No description available
  /v1/rule-group-sets:
    get:
      summary: List Recording Rules
      operationId: RuleGroupSets_List
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1RuleGroupSetListing'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Recording Rules Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      summary: Create Recording Rules
      operationId: RuleGroupSets_Create
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateRuleGroupSetResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CreateRuleGroupSet'
        description: A set of rule groups to create.
        required: true
      tags:
        - Recording Rules Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"groups":[{"name":"string","interval":0,"limit":"string","rules":[{"record":"string","expr":"string","labels":{"property1":"string","property2":"string"}}],"version":0,"id":"string"}],"name":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets"


            payload = {
                "groups": [
                    {
                        "name": "string",
                        "interval": 0,
                        "limit": "string",
                        "rules": [
                            {
                                "record": "string",
                                "expr": "string",
                                "labels": {
                                    "property1": "string",
                                    "property2": "string"
                                }
                            }
                        ],
                        "version": 0,
                        "id": "string"
                    }
                ],
                "name": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"groups":[{"name":"string","interval":0,"limit":"string","rules":[{"record":"string","expr":"string","labels":{"property1":"string","property2":"string"}}],"version":0,"id":"string"}],"name":"string"}'
      description: No description available
  /v1/rule-group-sets/{id}:
    get:
      summary: Get Recording Rules
      operationId: RuleGroupSets_Fetch
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1OutRuleGroupSet'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - Recording Rules Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      summary: Delete Recording Rules
      operationId: RuleGroupSets_Delete
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - Recording Rules Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      summary: Update Recording Rules
      operationId: RuleGroupSets_Update
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1RuleGroupSetsUpdateBody'
        required: true
      tags:
        - Recording Rules Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"groups":[{"name":"string","interval":0,"limit":"string","rules":[{"record":"string","expr":"string","labels":{"property1":"string","property2":"string"}}],"version":0,"id":"string"}],"name":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D"


            payload = {
                "groups": [
                    {
                        "name": "string",
                        "interval": 0,
                        "limit": "string",
                        "rules": [
                            {
                                "record": "string",
                                "expr": "string",
                                "labels": {
                                    "property1": "string",
                                    "property2": "string"
                                }
                            }
                        ],
                        "version": 0,
                        "id": "string"
                    }
                ],
                "name": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"groups":[{"name":"string","interval":0,"limit":"string","rules":[{"record":"string","expr":"string","labels":{"property1":"string","property2":"string"}}],"version":0,"id":"string"}],"name":"string"}'
      description: No description available
  /v1/scopes:
    get:
      summary: Get Team Scopes By Ids
      operationId: ScopesService_GetTeamScopesByIds
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetScopesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: ids
          in: query
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - Scopes Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/scopes?ids=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/scopes"


            querystring = {"ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/scopes?ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      summary: Create Scope
      operationId: ScopesService_CreateScope
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateScopeResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CreateScopeRequest'
        description: This data structure represents a request to create a scope
        required: true
      tags:
        - Scopes Service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/scopes';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"displayName":"scope_name","description":"scope_description","filters":[{"entityType":"ENTITY_TYPE_UNSPECIFIED","expression":"expression"}],"defaultExpression":"expression"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/scopes"


            payload = {
                "displayName": "scope_name",
                "description": "scope_description",
                "filters": [
                    {
                        "entityType": "ENTITY_TYPE_UNSPECIFIED",
                        "expression": "expression"
                    }
                ],
                "defaultExpression": "expression"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/scopes \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"displayName":"scope_name","description":"scope_description","filters":[{"entityType":"ENTITY_TYPE_UNSPECIFIED","expression":"expression"}],"defaultExpression":"expression"}'
      description: No description available
    put:
      summary: Update Scope
      operationId: ScopesService_UpdateScope
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdateScopeResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UpdateScopeRequest'
        description: This data structure represents a request to update a scope
        required: true
      tags:
        - Scopes Service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/scopes';

            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"scope_id","displayName":"scope_name","description":"scope_description","filters":[{"entityType":"ENTITY_TYPE_UNSPECIFIED","expression":"expression"}],"defaultExpression":"expression"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/scopes"


            payload = {
                "id": "scope_id",
                "displayName": "scope_name",
                "description": "scope_description",
                "filters": [
                    {
                        "entityType": "ENTITY_TYPE_UNSPECIFIED",
                        "expression": "expression"
                    }
                ],
                "defaultExpression": "expression"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/scopes \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"scope_id","displayName":"scope_name","description":"scope_description","filters":[{"entityType":"ENTITY_TYPE_UNSPECIFIED","expression":"expression"}],"defaultExpression":"expression"}'
      description: No description available
  /v1/scopes/list:
    get:
      summary: Get Team Scopes
      operationId: ScopesService_GetTeamScopes
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetScopesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Scopes Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v1/scopes/list';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/scopes/list"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/scopes/list \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/scopes/{id}:
    delete:
      summary: Delete Scope
      operationId: ScopesService_DeleteScope
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeleteScopeResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - Scopes Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/scopes/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/scopes/%7Bid%7D"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("DELETE", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/scopes/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/service_slos:
    get:
      summary: Batch Get Service SLOs
      operationId: ServiceSloService_BatchGetServiceSlos
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1BatchGetServiceSlosResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: ids
          in: query
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - SLO Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/service_slos?ids=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/service_slos"


            querystring = {"ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/service_slos?ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      summary: Create Service SLO
      operationId: ServiceSloService_CreateServiceSlo
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateServiceSloResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CreateServiceSloRequest'
        description: This data structure represents a request to create a Service SLO.
        required: true
      tags:
        - SLO Service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/service_slos';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"slo":{"id":"slo_id","name":"slo_name","serviceName":"service_name","status":"SLO_STATUS_UNSPECIFIED","description":"slo_description","targetPercentage":99,"createdAt":"2021-01-01T00:00:00.000Z","remainingErrorBudgetPercentage":1,"latencySli":{"thresholdMicroseconds":"1000000","thresholdSymbol":"THRESHOLD_SYMBOL_UNSPECIFIED"},"errorSli":{},"filters":[{"field":"field_name","compareType":"COMPARE_TYPE_UNSPECIFIED","fieldValues":["value1","value2"]}],"period":"SLO_PERIOD_UNSPECIFIED"}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/service_slos"


            payload = {"slo": {
                    "id": "slo_id",
                    "name": "slo_name",
                    "serviceName": "service_name",
                    "status": "SLO_STATUS_UNSPECIFIED",
                    "description": "slo_description",
                    "targetPercentage": 99,
                    "createdAt": "2021-01-01T00:00:00.000Z",
                    "remainingErrorBudgetPercentage": 1,
                    "latencySli": {
                        "thresholdMicroseconds": "1000000",
                        "thresholdSymbol": "THRESHOLD_SYMBOL_UNSPECIFIED"
                    },
                    "errorSli": {},
                    "filters": [
                        {
                            "field": "field_name",
                            "compareType": "COMPARE_TYPE_UNSPECIFIED",
                            "fieldValues": ["value1", "value2"]
                        }
                    ],
                    "period": "SLO_PERIOD_UNSPECIFIED"
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/service_slos \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"slo":{"id":"slo_id","name":"slo_name","serviceName":"service_name","status":"SLO_STATUS_UNSPECIFIED","description":"slo_description","targetPercentage":99,"createdAt":"2021-01-01T00:00:00.000Z","remainingErrorBudgetPercentage":1,"latencySli":{"thresholdMicroseconds":"1000000","thresholdSymbol":"THRESHOLD_SYMBOL_UNSPECIFIED"},"errorSli":{},"filters":[{"field":"field_name","compareType":"COMPARE_TYPE_UNSPECIFIED","fieldValues":["value1","value2"]}],"period":"SLO_PERIOD_UNSPECIFIED"}}'
      description: No description available
    put:
      summary: Replace Service SLO
      operationId: ServiceSloService_ReplaceServiceSlo
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ReplaceServiceSloResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1ReplaceServiceSloRequest'
        description: This data structure represents a request to update a Service SLO.
        required: true
      tags:
        - SLO Service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/service_slos';

            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"slo":{"id":"slo_id","name":"slo_name","serviceName":"service_name","status":"SLO_STATUS_UNSPECIFIED","description":"slo_description","targetPercentage":99,"createdAt":"2021-01-01T00:00:00.000Z","remainingErrorBudgetPercentage":1,"latencySli":{"thresholdMicroseconds":"1000000","thresholdSymbol":"THRESHOLD_SYMBOL_UNSPECIFIED"},"errorSli":{},"filters":[{"field":"field_name","compareType":"COMPARE_TYPE_UNSPECIFIED","fieldValues":["value1","value2"]}],"period":"SLO_PERIOD_UNSPECIFIED"}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/service_slos"


            payload = {"slo": {
                    "id": "slo_id",
                    "name": "slo_name",
                    "serviceName": "service_name",
                    "status": "SLO_STATUS_UNSPECIFIED",
                    "description": "slo_description",
                    "targetPercentage": 99,
                    "createdAt": "2021-01-01T00:00:00.000Z",
                    "remainingErrorBudgetPercentage": 1,
                    "latencySli": {
                        "thresholdMicroseconds": "1000000",
                        "thresholdSymbol": "THRESHOLD_SYMBOL_UNSPECIFIED"
                    },
                    "errorSli": {},
                    "filters": [
                        {
                            "field": "field_name",
                            "compareType": "COMPARE_TYPE_UNSPECIFIED",
                            "fieldValues": ["value1", "value2"]
                        }
                    ],
                    "period": "SLO_PERIOD_UNSPECIFIED"
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/service_slos \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"slo":{"id":"slo_id","name":"slo_name","serviceName":"service_name","status":"SLO_STATUS_UNSPECIFIED","description":"slo_description","targetPercentage":99,"createdAt":"2021-01-01T00:00:00.000Z","remainingErrorBudgetPercentage":1,"latencySli":{"thresholdMicroseconds":"1000000","thresholdSymbol":"THRESHOLD_SYMBOL_UNSPECIFIED"},"errorSli":{},"filters":[{"field":"field_name","compareType":"COMPARE_TYPE_UNSPECIFIED","fieldValues":["value1","value2"]}],"period":"SLO_PERIOD_UNSPECIFIED"}}'
      description: No description available
  /v1/service_slos/all:
    get:
      summary: List Service SLOs
      operationId: ServiceSloService_ListServiceSlos
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListServiceSlosResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: orderBy.fieldName
          in: query
          required: true
          schema:
            type: string
        - name: orderBy.direction
          in: query
          required: true
          schema:
            type: string
            enum:
              - ORDER_BY_DIRECTION_UNSPECIFIED
              - ORDER_BY_DIRECTION_ASC
              - ORDER_BY_DIRECTION_DESC
            default: ORDER_BY_DIRECTION_UNSPECIFIED
        - name: serviceNames
          in: query
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - SLO Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/service_slos/all?orderBy.fieldName=SOME_STRING_VALUE&orderBy.direction=SOME_STRING_VALUE&serviceNames=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/service_slos/all"


            querystring =
            {"orderBy.fieldName":"SOME_STRING_VALUE","orderBy.direction":"SOME_STRING_VALUE","serviceNames":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/service_slos/all?orderBy.fieldName=SOME_STRING_VALUE&orderBy.direction=SOME_STRING_VALUE&serviceNames=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/service_slos/{id}:
    get:
      summary: Get Service SLO
      operationId: ServiceSloService_GetServiceSlo
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetServiceSloResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - SLO Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/service_slos/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/service_slos/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/service_slos/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      summary: Delete Service SLO
      operationId: ServiceSloService_DeleteServiceSlo
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeleteServiceSloResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - SLO Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/service_slos/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/service_slos/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/service_slos/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/slo-hub/slo-data:
    get:
      operationId: SloHubService_GetSloData
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetSloDataResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: sloId
          in: query
          required: false
          schema:
            type: string
      tags:
        - SloHubService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/slo-hub/slo-data?sloId=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/slo-hub/slo-data"


            querystring = {"sloId":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/slo-hub/slo-data?sloId=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/slo-hub/slo-hub-rows:
    get:
      operationId: SloHubService_ListSloRows
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListSloRowsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - SloHubService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/slo-hub/slo-hub-rows';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/slo-hub/slo-hub-rows"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/slo-hub/slo-hub-rows \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/slo/slos:
    get:
      operationId: SlosService_ListSlos
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListSlosResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - SlosService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v1/slo/slos';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/slo/slos"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/slo/slos \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      operationId: SlosService_CreateSlo
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateSloResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody: &ref_4
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1Slo'
        required: true
      tags:
        - SlosService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/slo/slos';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"string","name":"string","description":"string","creator":"string","labels":{"property1":"string","property2":"string"},"revision":{"revision":0,"updateTime":"2019-08-24T14:15:22Z"},"grouping":{"labels":["string"]},"createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","targetThresholdPercentage":0.1,"sloTimeFrame":"SLO_TIME_FRAME_UNSPECIFIED","requestBasedMetricSli":{"goodEvents":{"query":"string"},"totalEvents":{"query":"string"}},"windowBasedMetricSli":{"query":{"query":"string"},"window":"WINDOW_SLO_WINDOW_UNSPECIFIED","comparisonOperator":"COMPARISON_OPERATOR_UNSPECIFIED","threshold":0.1}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/slo/slos"


            payload = {
                "id": "string",
                "name": "string",
                "description": "string",
                "creator": "string",
                "labels": {
                    "property1": "string",
                    "property2": "string"
                },
                "revision": {
                    "revision": 0,
                    "updateTime": "2019-08-24T14:15:22Z"
                },
                "grouping": {"labels": ["string"]},
                "createTime": "2019-08-24T14:15:22Z",
                "updateTime": "2019-08-24T14:15:22Z",
                "targetThresholdPercentage": 0.1,
                "sloTimeFrame": "SLO_TIME_FRAME_UNSPECIFIED",
                "requestBasedMetricSli": {
                    "goodEvents": {"query": "string"},
                    "totalEvents": {"query": "string"}
                },
                "windowBasedMetricSli": {
                    "query": {"query": "string"},
                    "window": "WINDOW_SLO_WINDOW_UNSPECIFIED",
                    "comparisonOperator": "COMPARISON_OPERATOR_UNSPECIFIED",
                    "threshold": 0.1
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/slo/slos \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"string","name":"string","description":"string","creator":"string","labels":{"property1":"string","property2":"string"},"revision":{"revision":0,"updateTime":"2019-08-24T14:15:22Z"},"grouping":{"labels":["string"]},"createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","targetThresholdPercentage":0.1,"sloTimeFrame":"SLO_TIME_FRAME_UNSPECIFIED","requestBasedMetricSli":{"goodEvents":{"query":"string"},"totalEvents":{"query":"string"}},"windowBasedMetricSli":{"query":{"query":"string"},"window":"WINDOW_SLO_WINDOW_UNSPECIFIED","comparisonOperator":"COMPARISON_OPERATOR_UNSPECIFIED","threshold":0.1}}'
      description: No description available
    put:
      operationId: SlosService_ReplaceSlo
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ReplaceSloResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody: *ref_4
      tags:
        - SlosService
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/slo/slos';

            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"string","name":"string","description":"string","creator":"string","labels":{"property1":"string","property2":"string"},"revision":{"revision":0,"updateTime":"2019-08-24T14:15:22Z"},"grouping":{"labels":["string"]},"createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","targetThresholdPercentage":0.1,"sloTimeFrame":"SLO_TIME_FRAME_UNSPECIFIED","requestBasedMetricSli":{"goodEvents":{"query":"string"},"totalEvents":{"query":"string"}},"windowBasedMetricSli":{"query":{"query":"string"},"window":"WINDOW_SLO_WINDOW_UNSPECIFIED","comparisonOperator":"COMPARISON_OPERATOR_UNSPECIFIED","threshold":0.1}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/slo/slos"


            payload = {
                "id": "string",
                "name": "string",
                "description": "string",
                "creator": "string",
                "labels": {
                    "property1": "string",
                    "property2": "string"
                },
                "revision": {
                    "revision": 0,
                    "updateTime": "2019-08-24T14:15:22Z"
                },
                "grouping": {"labels": ["string"]},
                "createTime": "2019-08-24T14:15:22Z",
                "updateTime": "2019-08-24T14:15:22Z",
                "targetThresholdPercentage": 0.1,
                "sloTimeFrame": "SLO_TIME_FRAME_UNSPECIFIED",
                "requestBasedMetricSli": {
                    "goodEvents": {"query": "string"},
                    "totalEvents": {"query": "string"}
                },
                "windowBasedMetricSli": {
                    "query": {"query": "string"},
                    "window": "WINDOW_SLO_WINDOW_UNSPECIFIED",
                    "comparisonOperator": "COMPARISON_OPERATOR_UNSPECIFIED",
                    "threshold": 0.1
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/slo/slos \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"string","name":"string","description":"string","creator":"string","labels":{"property1":"string","property2":"string"},"revision":{"revision":0,"updateTime":"2019-08-24T14:15:22Z"},"grouping":{"labels":["string"]},"createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","targetThresholdPercentage":0.1,"sloTimeFrame":"SLO_TIME_FRAME_UNSPECIFIED","requestBasedMetricSli":{"goodEvents":{"query":"string"},"totalEvents":{"query":"string"}},"windowBasedMetricSli":{"query":{"query":"string"},"window":"WINDOW_SLO_WINDOW_UNSPECIFIED","comparisonOperator":"COMPARISON_OPERATOR_UNSPECIFIED","threshold":0.1}}'
      description: No description available
  /v1/slo/slos/{id}:
    get:
      operationId: SlosService_GetSlo
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetSloResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - SlosService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/slo/slos/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/slo/slos/%7Bid%7D"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/slo/slos/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      operationId: SlosService_DeleteSlo
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeleteSloResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - SlosService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/slo/slos/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/slo/slos/%7Bid%7D"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("DELETE", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/slo/slos/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/slo/slos:batchExecute:
    post:
      operationId: SlosService_BatchExecuteSlo
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1BatchExecuteSloResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - SlosService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/slo/slos:batchExecute';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/slo/slos:batchExecute"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/slo/slos:batchExecute \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/slo/slos:batchGet:
    get:
      operationId: SlosService_BatchGetSlos
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1BatchGetSlosResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: ids
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - SlosService
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/slo/slos:batchGet?ids=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/slo/slos:batchGet"


            querystring = {"ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/slo/slos:batchGet?ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/sso/saml/active:
    post:
      summary: Activate/Deactivate SAML
      operationId: SamlConfigurationService_SetActive
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ssov2SetActiveResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ssov2SetActiveRequest'
        description: >-
          This data structure is used to activate or deactivate a SAML identity
          provider
        required: true
      tags:
        - SAML Configuration Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/sso/saml/active';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"teamId":0,"isActive":true}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/sso/saml/active"


            payload = {
                "teamId": 0,
                "isActive": True
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/sso/saml/active \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"teamId":0,"isActive":true}'
      description: No description available
  /v1/sso/saml/configuration:
    get:
      summary: Get SAML Configuration
      operationId: SamlConfigurationService_GetConfiguration
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetConfigurationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: teamId
          in: query
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - SAML Configuration Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/sso/saml/configuration?teamId=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/sso/saml/configuration"


            querystring = {"teamId":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/sso/saml/configuration?teamId=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/sso/saml/idp_parameters:
    post:
      summary: Set IDP Parameters
      operationId: SamlConfigurationService_SetIDPParameters
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2SetIDPParametersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2SetIDPParametersRequest'
        description: >-
          This data structure is used to set the parameters of a SAML identity
          provider
        required: true
      tags:
        - SAML Configuration Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/sso/saml/idp_parameters';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"teamId":0,"params":{"active":true,"metadataUrl":"https://<...>.okta.com/app/<...>/sso/saml/metadata","metadataContent":"<?xml version= ...","teamEntityId":1234567,"groupNames":["group1"]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/sso/saml/idp_parameters"


            payload = {
                "teamId": 0,
                "params": {
                    "active": True,
                    "metadataUrl": "https://<...>.okta.com/app/<...>/sso/saml/metadata",
                    "metadataContent": "<?xml version= ...",
                    "teamEntityId": 1234567,
                    "groupNames": ["group1"]
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/sso/saml/idp_parameters \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"teamId":0,"params":{"active":true,"metadataUrl":"https://<...>.okta.com/app/<...>/sso/saml/metadata","metadataContent":"<?xml version= ...","teamEntityId":1234567,"groupNames":["group1"]}}'
      description: No description available
  /v1/sso/saml/sp_parameters:
    get:
      summary: Get SP Parameters
      operationId: SamlConfigurationService_GetSPParameters
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetSPParametersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: teamId
          in: query
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - SAML Configuration Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/sso/saml/sp_parameters?teamId=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/sso/saml/sp_parameters"


            querystring = {"teamId":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/sso/saml/sp_parameters?teamId=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/teams/groups:
    get:
      summary: Get Team Group By Name
      operationId: TeamPermissionsMgmtService_GetTeamGroupByName
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetTeamGroupByNameResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups?name=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/teams/groups"


            querystring = {"name":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups?name=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      summary: Create Team Group
      operationId: TeamPermissionsMgmtService_CreateTeamGroup
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateTeamGroupResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CreateTeamGroupRequest'
        description: >-
          Request to create a new team group with specified name, description,
          roles, users, and optional scope filters. Can be associated with a
          specific team or the authenticated team.
        required: true
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"string","teamId":{"id":0},"description":"string","externalId":"string","roleIds":[{"id":0}],"userIds":[{"id":"string"}],"scopeFilters":{"subsystems":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}],"applications":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}]},"nextGenScopeId":"string"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/teams/groups"


            payload = {
                "name": "string",
                "teamId": {"id": 0},
                "description": "string",
                "externalId": "string",
                "roleIds": [{"id": 0}],
                "userIds": [{"id": "string"}],
                "scopeFilters": {
                    "subsystems": [
                        {
                            "term": "string",
                            "filterType": "FILTER_TYPE_UNSPECIFIED"
                        }
                    ],
                    "applications": [
                        {
                            "term": "string",
                            "filterType": "FILTER_TYPE_UNSPECIFIED"
                        }
                    ]
                },
                "nextGenScopeId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"string","teamId":{"id":0},"description":"string","externalId":"string","roleIds":[{"id":0}],"userIds":[{"id":"string"}],"scopeFilters":{"subsystems":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}],"applications":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}]},"nextGenScopeId":"string"}'
      description: No description available
    put:
      summary: Update Team Group
      operationId: TeamPermissionsMgmtService_UpdateTeamGroup
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdateTeamGroupResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UpdateTeamGroupRequest'
        description: >-
          Request to modify an existing team group's details, including its
          name, description, roles, users, and scope settings.
        required: true
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups';

            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"groupId":{"id":0},"name":"string","description":"string","externalId":"string","roleUpdates":{"roleIds":[{"id":0}]},"userUpdates":{"userIds":[{"id":"string"}]},"scopeFilters":{"subsystems":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}],"applications":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}]},"nextGenScopeId":"string"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/teams/groups"


            payload = {
                "groupId": {"id": 0},
                "name": "string",
                "description": "string",
                "externalId": "string",
                "roleUpdates": {"roleIds": [{"id": 0}]},
                "userUpdates": {"userIds": [{"id": "string"}]},
                "scopeFilters": {
                    "subsystems": [
                        {
                            "term": "string",
                            "filterType": "FILTER_TYPE_UNSPECIFIED"
                        }
                    ],
                    "applications": [
                        {
                            "term": "string",
                            "filterType": "FILTER_TYPE_UNSPECIFIED"
                        }
                    ]
                },
                "nextGenScopeId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"groupId":{"id":0},"name":"string","description":"string","externalId":"string","roleUpdates":{"roleIds":[{"id":0}]},"userUpdates":{"userIds":[{"id":"string"}]},"scopeFilters":{"subsystems":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}],"applications":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}]},"nextGenScopeId":"string"}'
      description: No description available
  /v1/teams/groups/list:
    get:
      summary: Get Team Groups
      operationId: TeamPermissionsMgmtService_GetTeamGroups
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetTeamGroupsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: teamId.id
          in: query
          required: false
          schema:
            type: integer
            format: int64
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/list?teamId.id=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/list"


            querystring = {"teamId.id":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/list?teamId.id=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/teams/groups/users:
    delete:
      summary: Remove Users From Team Groups
      operationId: TeamPermissionsMgmtService_RemoveUsersFromTeamGroups
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1RemoveUsersFromTeamGroupsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: teamId.id
          in: query
          required: false
          schema:
            type: integer
            format: int64
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/users?teamId.id=SOME_INTEGER_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/users"


            querystring = {"teamId.id":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/users?teamId.id=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      summary: Add Users To Team Groups
      operationId: TeamPermissionsMgmtService_AddUsersToTeamGroups
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1AddUsersToTeamGroupsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1AddUsersToTeamGroupsRequest'
        description: >-
          Bulk request to assign users to multiple team groups simultaneously,
          efficiently managing group memberships at scale.
        required: true
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/users';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"teamId":{"id":0},"addUsersToGroup":[{"groupId":{"id":0},"userIds":[{"id":"string"}]}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/users"


            payload = {
                "teamId": {"id": 0},
                "addUsersToGroup": [
                    {
                        "groupId": {"id": 0},
                        "userIds": [{"id": "string"}]
                    }
                ]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups/users \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"teamId":{"id":0},"addUsersToGroup":[{"groupId":{"id":0},"userIds":[{"id":"string"}]}]}'
      description: No description available
  /v1/teams/groups/{groupId.id}:
    get:
      summary: Get Team Group
      operationId: TeamPermissionsMgmtService_GetTeamGroup
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetTeamGroupResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: groupId.id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      summary: Delete Team Group
      operationId: TeamPermissionsMgmtService_DeleteTeamGroup
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DeleteTeamGroupResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: groupId.id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/teams/groups/{groupId.id}/scope:
    get:
      summary: Get Team Group Scope
      operationId: TeamPermissionsMgmtService_GetTeamGroupScope
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetTeamGroupScopeResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: groupId.id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/scope';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/scope"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/scope \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      summary: Set Team Group Scope
      operationId: TeamPermissionsMgmtService_SetTeamGroupScope
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1SetTeamGroupScopeResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: groupId.id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/TeamPermissionsMgmtServiceSetTeamGroupScopeBody
        required: true
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/scope';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"groupId":{},"scopeFilters":{"subsystems":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}],"applications":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/scope"


            payload = {
                "groupId": {},
                "scopeFilters": {
                    "subsystems": [
                        {
                            "term": "string",
                            "filterType": "FILTER_TYPE_UNSPECIFIED"
                        }
                    ],
                    "applications": [
                        {
                            "term": "string",
                            "filterType": "FILTER_TYPE_UNSPECIFIED"
                        }
                    ]
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/scope \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"groupId":{},"scopeFilters":{"subsystems":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}],"applications":[{"term":"string","filterType":"FILTER_TYPE_UNSPECIFIED"}]}}'
      description: No description available
  /v1/teams/groups/{groupId.id}/users:
    get:
      summary: Get Group Users
      operationId: TeamPermissionsMgmtService_GetGroupUsers
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetGroupUsersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: groupId.id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: pageSize
          description: / Pagination size. Defaults to 100 if empty
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: pageToken
          description: |-
            / Optional pagination continuation token
            / Contains an encoded cursor
          in: query
          required: false
          schema:
            type: string
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/users?pageSize=SOME_INTEGER_VALUE&pageToken=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/users"


            querystring =
            {"pageSize":"SOME_INTEGER_VALUE","pageToken":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/users?pageSize=SOME_INTEGER_VALUE&pageToken=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      summary: Remove Users From Team Group
      operationId: TeamPermissionsMgmtService_RemoveUsersFromTeamGroup
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1RemoveUsersFromTeamGroupResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: groupId.id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/users';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/users"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/users \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      summary: Add Users To Team Group
      operationId: TeamPermissionsMgmtService_AddUsersToTeamGroup
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1AddUsersToTeamGroupResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: groupId.id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/v1TeamPermissionsMgmtServiceAddUsersToTeamGroupBody
        required: true
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/users';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"groupId":{},"userIds":[{"id":"string"}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/users"


            payload = {
                "groupId": {},
                "userIds": [{"id": "string"}]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/users \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"groupId":{},"userIds":[{"id":"string"}]}'
      description: No description available
  /v1/view_folders:
    get:
      summary: List view folders
      description: List view's folders
      operationId: ViewsFoldersService_ListViewFolders
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesListViewFoldersResponse'
              examples:
                response:
                  value:
                    view_folders:
                      - id: 0cd4ed54-9b59-4eef-b329-151a167e2304
                        name: My Folder
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Folders for views
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v1/view_folders';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/view_folders"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/view_folders \
              --header 'Authorization: Bearer <API_KEY>'
    post:
      summary: Create View Folder
      description: Create view folder
      operationId: ViewsFoldersService_CreateViewFolder
      responses:
        '200':
          description: View folder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ViewFolder'
              examples:
                response:
                  value:
                    id: 0cd4ed54-9b59-4eef-b329-151a167e2304
                    name: My Folder
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicesCreateViewFolderRequest'
        description: Create view folder.
        required: true
      tags:
        - Folders for views
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/view_folders';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"My Folder"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/view_folders"


            payload = {"name": "My Folder"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/view_folders \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"My Folder"}'
  /v1/view_folders/{folder.id}:
    put:
      summary: Replace View Folder
      description: Replaces an existing view folder
      operationId: ViewsFoldersService_ReplaceViewFolder
      responses:
        '200':
          description: View folder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ViewFolder'
              examples:
                response:
                  value:
                    id: 0cd4ed54-9b59-4eef-b329-151a167e2304
                    name: My Folder
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: folder.id
          description: Unique identifier for folders
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: My Folder
                  description: Folder name
                  minLength: 1
              title: View folder
              required:
                - name
        description: View folder
        required: true
      tags:
        - Folders for views
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/view_folders/%7Bfolder.id%7D';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"My Folder"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/view_folders/%7Bfolder.id%7D"


            payload = {"name": "My Folder"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/view_folders/%7Bfolder.id%7D \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"My Folder"}'
  /v1/view_folders/{id}:
    get:
      summary: Get View Folder
      description: Create view folder
      operationId: ViewsFoldersService_GetViewFolder
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ViewFolder'
              examples:
                response:
                  value:
                    id: 0cd4ed54-9b59-4eef-b329-151a167e2304
                    name: My Folder
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          description: Unique identifier for folders
          in: path
          required: true
          schema:
            type: string
            format: uuid
      tags:
        - Folders for views
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/view_folders/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/view_folders/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/view_folders/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
    delete:
      summary: Delete View Folder
      description: Deletes a view folder by ID
      operationId: ViewsFoldersService_DeleteViewFolder
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesDeleteViewFolderResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          description: Unique identifier for folders
          in: path
          required: true
          schema:
            type: string
            format: uuid
      tags:
        - Folders for views
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/view_folders/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/view_folders/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/view_folders/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
  /v1/views:
    get:
      summary: List views
      description: Lists all company public views
      operationId: ViewsService_ListViews
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesListViewsResponse'
              examples:
                response:
                  value:
                    views:
                      - id: 52
                        name: Logs view
                        search_query:
                          query: logs
                        time_selection:
                          custom_selection:
                            from_time: '2024-01-25T11:31:43.152Z'
                            to_time: '2024-01-25T11:37:13.238Z'
                        filters:
                          filters:
                            - name: applicationName
                              selected_values:
                                demo: true
                            - name: subsystemName
                              selected_values:
                                demo: true
                            - name: operationName
                              selected_values:
                                demo: true
                            - name: serviceName
                              selected_values:
                                demo: true
                            - name: severity
                              selected_values:
                                demo: true
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Views
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v1/views';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/views"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/views \
              --header 'Authorization: Bearer <API_KEY>'
    post:
      summary: Create a view
      description: Creates a new view
      operationId: ViewsService_CreateView
      responses:
        '200':
          description: View
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesView'
              examples:
                response:
                  value:
                    name: Logs view
                    search_query:
                      query: logs
                    time_selection:
                      custom_selection:
                        from_time: '2024-01-25T11:31:43.152Z'
                        to_time: '2024-01-25T11:37:13.238Z'
                    filters:
                      filters:
                        - name: applicationName
                          selected_values:
                            demo: true
                        - name: subsystemName
                          selected_values:
                            demo: true
                        - name: operationName
                          selected_values:
                            demo: true
                        - name: serviceName
                          selected_values:
                            demo: true
                        - name: severity
                          selected_values:
                            demo: true
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicesCreateViewRequest'
        description: View folder.
        required: true
      tags:
        - Views
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/views';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"Logs view","searchQuery":{"query":"string"},"timeSelection":{"quickSelection":{"caption":"Last Hour","seconds":3600},"customSelection":{"fromTime":"2024-01-25T11:31:43.152Z","toTime":"2024-01-25T11:35:43.152Z"}},"filters":{"filters":[{"name":"applicationName","selectedValues":{"demo":true,"cs-rest-test1":true}}]},"folderId":"3dc02998-0b50-4ea8-b68a-4779d716fa1f"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/views"


            payload = {
                "name": "Logs view",
                "searchQuery": {"query": "string"},
                "timeSelection": {
                    "quickSelection": {
                        "caption": "Last Hour",
                        "seconds": 3600
                    },
                    "customSelection": {
                        "fromTime": "2024-01-25T11:31:43.152Z",
                        "toTime": "2024-01-25T11:35:43.152Z"
                    }
                },
                "filters": {"filters": [
                        {
                            "name": "applicationName",
                            "selectedValues": {
                                "demo": True,
                                "cs-rest-test1": True
                            }
                        }
                    ]},
                "folderId": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/views \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"Logs view","searchQuery":{"query":"string"},"timeSelection":{"quickSelection":{"caption":"Last Hour","seconds":3600},"customSelection":{"fromTime":"2024-01-25T11:31:43.152Z","toTime":"2024-01-25T11:35:43.152Z"}},"filters":{"filters":[{"name":"applicationName","selectedValues":{"demo":true,"cs-rest-test1":true}}]},"folderId":"3dc02998-0b50-4ea8-b68a-4779d716fa1f"}'
  /v1/views/{id}:
    get:
      summary: Get view
      description: Gets a view by ID
      operationId: ViewsService_GetView
      responses:
        '200':
          description: View
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesView'
              examples:
                response:
                  value:
                    id: 52
                    name: Logs view
                    search_query:
                      query: logs
                    time_selection:
                      custom_selection:
                        from_time: '2024-01-25T11:31:43.152Z'
                        to_time: '2024-01-25T11:37:13.238Z'
                    filters:
                      filters:
                        - name: applicationName
                          selected_values:
                            demo: true
                        - name: subsystemName
                          selected_values:
                            demo: true
                        - name: operationName
                          selected_values:
                            demo: true
                        - name: serviceName
                          selected_values:
                            demo: true
                        - name: severity
                          selected_values:
                            demo: true
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          description: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      tags:
        - Views
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/views/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/views/%7Bid%7D"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/views/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
    delete:
      summary: Delete view
      description: Deletes a view by ID
      operationId: ViewsService_DeleteView
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesDeleteViewResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          description: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      tags:
        - Views
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/views/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/views/%7Bid%7D"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("DELETE", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/views/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
  /v1/views/{view.id}:
    put:
      summary: Replace a view
      description: Replaces an existing view
      operationId: ViewsService_ReplaceView
      responses:
        '200':
          description: View
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicesView'
              examples:
                response:
                  value:
                    name: Logs view
                    search_query:
                      query: logs new
                    time_selection:
                      custom_selection:
                        from_time: '2024-01-25T11:31:43.152Z'
                        to_time: '2024-01-25T11:37:13.238Z'
                    filters:
                      filters:
                        - name: applicationName
                          selected_values:
                            demo: true
                        - name: subsystemName
                          selected_values:
                            demo: true
                        - name: operationName
                          selected_values:
                            demo: true
                        - name: serviceName
                          selected_values:
                            demo: true
                        - name: severity
                          selected_values:
                            demo: true
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: view.id
          description: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Logs view
                  description: View name
                  title: View name
                  minLength: 1
                searchQuery:
                  $ref: '#/components/schemas/v1SearchQuery'
                timeSelection:
                  $ref: '#/components/schemas/v1TimeSelection'
                filters:
                  $ref: '#/components/schemas/v1SelectedFilters'
                folderId:
                  type: string
                  format: uuid
                  example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
                  description: Unique identifier for folders
                  maxLength: 36
                  minLength: 36
                  pattern: >-
                    ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
                isCompactMode:
                  type: boolean
              title: View
              required:
                - name
                - timeSelection
        description: View
        required: true
      tags:
        - Views
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/views/%7Bview.id%7D';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"Logs view","searchQuery":{"query":"string"},"timeSelection":{"quickSelection":{"caption":"Last Hour","seconds":3600},"customSelection":{"fromTime":"2024-01-25T11:31:43.152Z","toTime":"2024-01-25T11:35:43.152Z"}},"filters":{"filters":[{"name":"applicationName","selectedValues":{"demo":true,"cs-rest-test1":true}}]},"folderId":"3dc02998-0b50-4ea8-b68a-4779d716fa1f","isCompactMode":true}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/views/%7Bview.id%7D"


            payload = {
                "name": "Logs view",
                "searchQuery": {"query": "string"},
                "timeSelection": {
                    "quickSelection": {
                        "caption": "Last Hour",
                        "seconds": 3600
                    },
                    "customSelection": {
                        "fromTime": "2024-01-25T11:31:43.152Z",
                        "toTime": "2024-01-25T11:35:43.152Z"
                    }
                },
                "filters": {"filters": [
                        {
                            "name": "applicationName",
                            "selectedValues": {
                                "demo": True,
                                "cs-rest-test1": True
                            }
                        }
                    ]},
                "folderId": "3dc02998-0b50-4ea8-b68a-4779d716fa1f",
                "isCompactMode": True
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/views/%7Bview.id%7D \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"Logs view","searchQuery":{"query":"string"},"timeSelection":{"quickSelection":{"caption":"Last Hour","seconds":3600},"customSelection":{"fromTime":"2024-01-25T11:31:43.152Z","toTime":"2024-01-25T11:35:43.152Z"}},"filters":{"filters":[{"name":"applicationName","selectedValues":{"demo":true,"cs-rest-test1":true}}]},"folderId":"3dc02998-0b50-4ea8-b68a-4779d716fa1f","isCompactMode":true}'
  /v2/actions:
    get:
      summary: List Actions
      operationId: ActionsService_ListActions
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2ListActionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Actions Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v2/actions';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v2/actions"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v2/actions \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      summary: Create Action
      operationId: ActionsService_CreateAction
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2CreateActionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2CreateActionRequest'
        required: true
      tags:
        - Actions Service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v2/actions';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"string","url":"string","isPrivate":true,"sourceType":"SOURCE_TYPE_UNSPECIFIED","applicationNames":["string"],"subsystemNames":["string"]}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v2/actions"


            payload = {
                "name": "string",
                "url": "string",
                "isPrivate": True,
                "sourceType": "SOURCE_TYPE_UNSPECIFIED",
                "applicationNames": ["string"],
                "subsystemNames": ["string"]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v2/actions \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"string","url":"string","isPrivate":true,"sourceType":"SOURCE_TYPE_UNSPECIFIED","applicationNames":["string"],"subsystemNames":["string"]}'
      description: No description available
    put:
      summary: Replace Action
      operationId: ActionsService_ReplaceAction
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2ReplaceActionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2ReplaceActionRequest'
        required: true
      tags:
        - Actions Service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v2/actions';

            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"action":{"id":"string","name":"string","url":"string","isHidden":true,"isPrivate":true,"sourceType":"SOURCE_TYPE_UNSPECIFIED","applicationNames":["string"],"subsystemNames":["string"],"createdBy":"string"}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v2/actions"


            payload = {"action": {
                    "id": "string",
                    "name": "string",
                    "url": "string",
                    "isHidden": True,
                    "isPrivate": True,
                    "sourceType": "SOURCE_TYPE_UNSPECIFIED",
                    "applicationNames": ["string"],
                    "subsystemNames": ["string"],
                    "createdBy": "string"
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v2/actions \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"action":{"id":"string","name":"string","url":"string","isHidden":true,"isPrivate":true,"sourceType":"SOURCE_TYPE_UNSPECIFIED","applicationNames":["string"],"subsystemNames":["string"],"createdBy":"string"}}'
      description: No description available
  /v2/actions/actions:atomicBatchExecute:
    post:
      summary: Atomic Batch Execute Actions
      operationId: ActionsService_AtomicBatchExecuteActions
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2AtomicBatchExecuteActionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2AtomicBatchExecuteActionsRequest'
        required: true
      tags:
        - Actions Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/actions/actions:atomicBatchExecute';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requests":[{"create":{"name":"string","url":"string","isPrivate":true,"sourceType":"SOURCE_TYPE_UNSPECIFIED","applicationNames":["string"],"subsystemNames":["string"]},"replace":{"action":{"id":"string","name":"string","url":"string","isHidden":true,"isPrivate":true,"sourceType":"SOURCE_TYPE_UNSPECIFIED","applicationNames":["string"],"subsystemNames":["string"],"createdBy":"string"}},"delete":{"id":"string"}}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v2/actions/actions:atomicBatchExecute"


            payload = {"requests": [
                    {
                        "create": {
                            "name": "string",
                            "url": "string",
                            "isPrivate": True,
                            "sourceType": "SOURCE_TYPE_UNSPECIFIED",
                            "applicationNames": ["string"],
                            "subsystemNames": ["string"]
                        },
                        "replace": {"action": {
                                "id": "string",
                                "name": "string",
                                "url": "string",
                                "isHidden": True,
                                "isPrivate": True,
                                "sourceType": "SOURCE_TYPE_UNSPECIFIED",
                                "applicationNames": ["string"],
                                "subsystemNames": ["string"],
                                "createdBy": "string"
                            }},
                        "delete": {"id": "string"}
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v2/actions/actions:atomicBatchExecute \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requests":[{"create":{"name":"string","url":"string","isPrivate":true,"sourceType":"SOURCE_TYPE_UNSPECIFIED","applicationNames":["string"],"subsystemNames":["string"]},"replace":{"action":{"id":"string","name":"string","url":"string","isHidden":true,"isPrivate":true,"sourceType":"SOURCE_TYPE_UNSPECIFIED","applicationNames":["string"],"subsystemNames":["string"],"createdBy":"string"}},"delete":{"id":"string"}}]}'
      description: No description available
  /v2/actions/actions:order:
    post:
      summary: Order Actions
      operationId: ActionsService_OrderActions
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2OrderActionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2OrderActionsRequest'
        required: true
      tags:
        - Actions Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/actions/actions:order';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"privateActionsOrder":{"property1":0,"property2":0},"sharedActionsOrder":{"property1":0,"property2":0}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v2/actions/actions:order"


            payload = {
                "privateActionsOrder": {
                    "property1": 0,
                    "property2": 0
                },
                "sharedActionsOrder": {
                    "property1": 0,
                    "property2": 0
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v2/actions/actions:order \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"privateActionsOrder":{"property1":0,"property2":0},"sharedActionsOrder":{"property1":0,"property2":0}}'
      description: No description available
  /v2/actions/{id}:
    get:
      summary: Get Action
      operationId: ActionsService_GetAction
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetActionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - Actions Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      summary: Delete Action
      operationId: ActionsService_DeleteAction
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2DeleteActionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - Actions Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("DELETE", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v2/datausage:
    get:
      summary: Get Data Usage
      operationId: DataUsageService_GetDataUsage
      responses:
        '200':
          description: A successful response.(streaming responses)
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/v2GetDataUsageResponse'
                  error:
                    $ref: '#/components/schemas/rpcStatus'
                title: Stream result of v2GetDataUsageResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: dateRange.fromDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: dateRange.toDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: resolution
          description: >-
            Aggregation resolution. Minimum supported value is 1h


            Do note that to avoid overloading the service we enforce resolution
            limits

            that depend on the server configuration. This is configured by the
            server.

            This means that, for instance, requests with 1 hour resolution for
            an interval of 30 days will be rejected but accepted for 1 day
            interval.


            Resolution must be between 1 hour and date_range interval
          in: query
          required: false
          schema:
            type: string
        - name: aggregate
          description: >-
            List of aggregate parameters.

            i.e. if AggregateBy is [AGGREGATE_BY_PILLAR, AGGREGATE_BY_PRIORITY],
            then the response will stream data aggregated by pillar and
            priority.
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - AGGREGATE_BY_UNSPECIFIED
                - AGGREGATE_BY_APPLICATION
                - AGGREGATE_BY_SUBSYSTEM
                - AGGREGATE_BY_PILLAR
                - AGGREGATE_BY_PRIORITY
      tags:
        - Data Usage Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/datausage?dateRange.fromDate=SOME_STRING_VALUE&dateRange.toDate=SOME_STRING_VALUE&resolution=SOME_STRING_VALUE&aggregate=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v2/datausage"


            querystring =
            {"dateRange.fromDate":"SOME_STRING_VALUE","dateRange.toDate":"SOME_STRING_VALUE","resolution":"SOME_STRING_VALUE","aggregate":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v2/datausage?dateRange.fromDate=SOME_STRING_VALUE&dateRange.toDate=SOME_STRING_VALUE&resolution=SOME_STRING_VALUE&aggregate=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v2/datausage/daily/evaluation_tokens:
    post:
      summary: Get Daily Usage Evaluation Tokens
      operationId: DataUsageService_GetDailyUsageEvaluationTokens
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetDailyUsageEvaluationTokensResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2GetDailyUsageEvaluationTokensRequest'
        required: true
      tags:
        - Data Usage Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/datausage/daily/evaluation_tokens';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"range":"RANGE_UNSPECIFIED","dateRange":{"fromDate":"2021-01-01T00:00:00.000Z","toDate":"2021-01-01T00:00:00.000Z"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v2/datausage/daily/evaluation_tokens"


            payload = {
                "range": "RANGE_UNSPECIFIED",
                "dateRange": {
                    "fromDate": "2021-01-01T00:00:00.000Z",
                    "toDate": "2021-01-01T00:00:00.000Z"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v2/datausage/daily/evaluation_tokens \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"range":"RANGE_UNSPECIFIED","dateRange":{"fromDate":"2021-01-01T00:00:00.000Z","toDate":"2021-01-01T00:00:00.000Z"}}'
      description: No description available
  /v2/datausage/daily/processed_gbs:
    post:
      summary: Get Daily Usage Processed GBs
      operationId: DataUsageService_GetDailyUsageProcessedGbs
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetDailyUsageProcessedGbsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2GetDailyUsageProcessedGbsRequest'
        required: true
      tags:
        - Data Usage Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/datausage/daily/processed_gbs';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"range":"RANGE_UNSPECIFIED","dateRange":{"fromDate":"2021-01-01T00:00:00.000Z","toDate":"2021-01-01T00:00:00.000Z"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v2/datausage/daily/processed_gbs"


            payload = {
                "range": "RANGE_UNSPECIFIED",
                "dateRange": {
                    "fromDate": "2021-01-01T00:00:00.000Z",
                    "toDate": "2021-01-01T00:00:00.000Z"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v2/datausage/daily/processed_gbs \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"range":"RANGE_UNSPECIFIED","dateRange":{"fromDate":"2021-01-01T00:00:00.000Z","toDate":"2021-01-01T00:00:00.000Z"}}'
      description: No description available
  /v2/datausage/daily/units:
    post:
      summary: Get Daily Usage Units
      operationId: DataUsageService_GetDailyUsageUnits
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetDailyUsageUnitsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2GetDailyUsageUnitsRequest'
        required: true
      tags:
        - Data Usage Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/datausage/daily/units';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"range":"RANGE_UNSPECIFIED","dateRange":{"fromDate":"2021-01-01T00:00:00.000Z","toDate":"2021-01-01T00:00:00.000Z"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v2/datausage/daily/units"


            payload = {
                "range": "RANGE_UNSPECIFIED",
                "dateRange": {
                    "fromDate": "2021-01-01T00:00:00.000Z",
                    "toDate": "2021-01-01T00:00:00.000Z"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v2/datausage/daily/units \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"range":"RANGE_UNSPECIFIED","dateRange":{"fromDate":"2021-01-01T00:00:00.000Z","toDate":"2021-01-01T00:00:00.000Z"}}'
      description: No description available
  /v2/datausage/exportstatus:
    get:
      summary: Get Data Usage Metrics Export Status
      operationId: DataUsageService_GetDataUsageMetricsExportStatus
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetDataUsageMetricsExportStatusResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Data Usage Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/datausage/exportstatus';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v2/datausage/exportstatus"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v2/datausage/exportstatus \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      summary: Update Data Usage Metrics Export Status
      operationId: DataUsageService_UpdateDataUsageMetricsExportStatus
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/v2UpdateDataUsageMetricsExportStatusResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2UpdateDataUsageMetricsExportStatusRequest'
        description: >-
          This data structure is used to update data usage metrics export
          status.
        required: true
      tags:
        - Data Usage Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/datausage/exportstatus';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"enabled":true}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v2/datausage/exportstatus"


            payload = {"enabled": True}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v2/datausage/exportstatus \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"enabled":true}'
      description: No description available
  /v2/datausage/logscount:
    get:
      summary: Get Logs Count
      operationId: DataUsageService_GetLogsCount
      responses:
        '200':
          description: A successful response.(streaming responses)
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/v2GetLogsCountResponse'
                  error:
                    $ref: '#/components/schemas/rpcStatus'
                title: Stream result of v2GetLogsCountResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: dateRange.fromDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: dateRange.toDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: resolution
          description: |-
            Aggregation resolution with second precision.

            Resolution must be between 1 second and date_range interval
          in: query
          required: false
          schema:
            type: string
        - name: filters.application
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: filters.subsystem
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - Data Usage Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/datausage/logscount?dateRange.fromDate=SOME_STRING_VALUE&dateRange.toDate=SOME_STRING_VALUE&resolution=SOME_STRING_VALUE&filters.application=SOME_ARRAY_VALUE&filters.subsystem=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v2/datausage/logscount"


            querystring =
            {"dateRange.fromDate":"SOME_STRING_VALUE","dateRange.toDate":"SOME_STRING_VALUE","resolution":"SOME_STRING_VALUE","filters.application":"SOME_ARRAY_VALUE","filters.subsystem":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v2/datausage/logscount?dateRange.fromDate=SOME_STRING_VALUE&dateRange.toDate=SOME_STRING_VALUE&resolution=SOME_STRING_VALUE&filters.application=SOME_ARRAY_VALUE&filters.subsystem=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v2/datausage/spanscount:
    get:
      summary: Get Spans Count
      operationId: DataUsageService_GetSpansCount
      responses:
        '200':
          description: A successful response.(streaming responses)
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/v2GetSpansCountResponse'
                  error:
                    $ref: '#/components/schemas/rpcStatus'
                title: Stream result of v2GetSpansCountResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: dateRange.fromDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: dateRange.toDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: resolution
          description: |-
            Aggregation resolution with second precision.

            Resolution must be between 1 second and date_range interval
          in: query
          required: false
          schema:
            type: string
        - name: filters.application
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: filters.subsystem
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - Data Usage Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/datausage/spanscount?dateRange.fromDate=SOME_STRING_VALUE&dateRange.toDate=SOME_STRING_VALUE&resolution=SOME_STRING_VALUE&filters.application=SOME_ARRAY_VALUE&filters.subsystem=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v2/datausage/spanscount"


            querystring =
            {"dateRange.fromDate":"SOME_STRING_VALUE","dateRange.toDate":"SOME_STRING_VALUE","resolution":"SOME_STRING_VALUE","filters.application":"SOME_ARRAY_VALUE","filters.subsystem":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v2/datausage/spanscount?dateRange.fromDate=SOME_STRING_VALUE&dateRange.toDate=SOME_STRING_VALUE&resolution=SOME_STRING_VALUE&filters.application=SOME_ARRAY_VALUE&filters.subsystem=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v2/target:
    get:
      summary: Get target
      operationId: TargetService_GetTarget
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetTargetResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Target Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v2/target';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v2/target"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v2/target \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      summary: Set target
      operationId: TargetService_SetTarget
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2SetTargetResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2SetTargetRequest'
        description: This data structure is used to set a storage target for logs.
        required: true
      tags:
        - Target Service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v2/target';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"isActive":true,"s3":{"bucket":"bucket","region":"us-west-2"},"ibmCos":{"bucketCrn":"bucket_crn","endpoint":"http://some.endpoint.com:8081","serviceCrn":"service_crn","bucketType":"IBM_BUCKET_TYPE_UNSPECIFIED"}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v2/target"


            payload = {
                "isActive": True,
                "s3": {
                    "bucket": "bucket",
                    "region": "us-west-2"
                },
                "ibmCos": {
                    "bucketCrn": "bucket_crn",
                    "endpoint": "http://some.endpoint.com:8081",
                    "serviceCrn": "service_crn",
                    "bucketType": "IBM_BUCKET_TYPE_UNSPECIFIED"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v2/target \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"isActive":true,"s3":{"bucket":"bucket","region":"us-west-2"},"ibmCos":{"bucketCrn":"bucket_crn","endpoint":"http://some.endpoint.com:8081","serviceCrn":"service_crn","bucketType":"IBM_BUCKET_TYPE_UNSPECIFIED"}}'
      description: No description available
  /v2/target:validate:
    post:
      summary: Validate target
      operationId: TargetService_ValidateTarget
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2ValidateTargetResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2ValidateTargetRequest'
        description: This data structure is used to validate a storage target for logs.
        required: true
      tags:
        - Target Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/target:validate';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"isActive":true,"s3":{"bucket":"bucket","region":"us-west-2"},"ibmCos":{"bucketCrn":"bucket_crn","endpoint":"http://some.endpoint.com:8081","serviceCrn":"service_crn","bucketType":"IBM_BUCKET_TYPE_UNSPECIFIED"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v2/target:validate"


            payload = {
                "isActive": True,
                "s3": {
                    "bucket": "bucket",
                    "region": "us-west-2"
                },
                "ibmCos": {
                    "bucketCrn": "bucket_crn",
                    "endpoint": "http://some.endpoint.com:8081",
                    "serviceCrn": "service_crn",
                    "bucketType": "IBM_BUCKET_TYPE_UNSPECIFIED"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v2/target:validate \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"isActive":true,"s3":{"bucket":"bucket","region":"us-west-2"},"ibmCos":{"bucketCrn":"bucket_crn","endpoint":"http://some.endpoint.com:8081","serviceCrn":"service_crn","bucketType":"IBM_BUCKET_TYPE_UNSPECIFIED"}}'
      description: No description available
  /v3/alert-defs:
    get:
      summary: Get a list of all accessible alert definitions
      operationId: AlertDefsService_ListAlertDefs
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3ListAlertDefsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Alert definitions service
      x-coralogixPermissions:
        - alerts:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v3/alert-defs';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v3/alert-defs"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v3/alert-defs \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      summary: Create an alert
      operationId: AlertDefsService_CreateAlertDef
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3CreateAlertDefResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v3AlertDefProperties'
        required: true
      tags:
        - Alert definitions service
      x-coralogixPermissions:
        - alerts:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v3/alert-defs';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"My Alert","description":"Alert description","enabled":true,"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED","activeOn":{"dayOfWeek":["DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED","DAY_OF_WEEK_TUESDAY"],"startTime":{"hours":14,"minutes":30},"endTime":{"hours":14,"minutes":30}},"type":"ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED","logsImmediate":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"notificationPayloadFilter":["obj.field"]},"tracingImmediate":{"tracingFilter":{"simpleFilter":{"tracingLabelFilters":{"applicationName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"serviceName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"operationName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"spanFields":[{"key":"span.field.key","filterType":{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}}]},"latencyThresholdMs":1000}},"notificationPayloadFilter":["obj.field"]},"logsThreshold":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"rules":[{"condition":{"threshold":100,"timeWindow":{"logsTimeWindowSpecificValue":"LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"notificationPayloadFilter":["obj.field"],"evaluationDelayMs":60000},"logsRatioThreshold":{"numerator":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"numeratorAlias":"numerator_alias","denominator":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"denominatorAlias":"denominator_alias","rules":[{"condition":{"threshold":10,"timeWindow":{"logsRatioTimeWindowSpecificValue":"LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_RATIO_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"notificationPayloadFilter":["obj.field"],"groupByFor":"LOGS_RATIO_GROUP_BY_FOR_BOTH_OR_UNSPECIFIED","undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"ignoreInfinity":true,"evaluationDelayMs":60000},"logsTimeRelativeThreshold":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"threshold":0.1,"comparedTo":"LOGS_TIME_RELATIVE_COMPARED_TO_PREVIOUS_HOUR_OR_UNSPECIFIED","conditionType":"LOGS_TIME_RELATIVE_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"ignoreInfinity":true,"notificationPayloadFilter":["obj.field"],"undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"evaluationDelayMs":60000},"metricThreshold":{"metricFilter":{"promql":"avg_over_time(metric_name[5m]) > 10"},"rules":[{"condition":{"threshold":100,"forOverPct":80,"ofTheLast":{"metricTimeWindowSpecificValue":"METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED","metricTimeWindowDynamicDuration":"1h30m"},"conditionType":"METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"missingValues":{"replaceWithZero":true,"minNonNullValuesPct":80},"evaluationDelayMs":60000},"tracingThreshold":{"tracingFilter":{"simpleFilter":{"tracingLabelFilters":{"applicationName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"serviceName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"operationName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"spanFields":[{"key":"span.field.key","filterType":{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}}]},"latencyThresholdMs":1000}},"rules":[{"condition":{"spanAmount":100,"timeWindow":{"tracingTimeWindowValue":"TRACING_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"TRACING_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"}}],"notificationPayloadFilter":["obj.field"]},"flow":{"stages":[{"flowStagesGroups":{"groups":[{"alertDefs":[{"id":"123e4567-e89b-12d3-a456-426614174000","not":true}],"nextOp":"NEXT_OP_AND_OR_UNSPECIFIED","alertsOp":"ALERTS_OP_AND_OR_UNSPECIFIED"}]},"timeframeMs":"string","timeframeType":"TIMEFRAME_TYPE_UNSPECIFIED"}],"enforceSuppression":true},"logsAnomaly":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"minimumThreshold":10,"timeWindow":{"logsTimeWindowSpecificValue":"LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"}}],"notificationPayloadFilter":["obj.field"],"evaluationDelayMs":60000,"anomalyAlertSettings":{"percentageOfDeviation":0.1}},"metricAnomaly":{"metricFilter":{"promql":"avg_over_time(metric_name[5m]) > 10"},"rules":[{"condition":{"threshold":10,"forOverPct":20,"ofTheLast":{"metricTimeWindowSpecificValue":"METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED","metricTimeWindowDynamicDuration":"1h30m"},"minNonNullValuesPct":10,"conditionType":"METRIC_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"}}],"evaluationDelayMs":60000,"anomalyAlertSettings":{"percentageOfDeviation":0.1}},"logsNewValue":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"keypathToTrack":"metadata.field","timeWindow":{"logsNewValueTimeWindowSpecificValue":"LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_12_OR_UNSPECIFIED"}}}],"notificationPayloadFilter":["obj.field"]},"logsUniqueCount":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"maxUniqueCount":100,"timeWindow":{"logsUniqueValueTimeWindowSpecificValue":"LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTE_1_OR_UNSPECIFIED"}}}],"notificationPayloadFilter":["obj.field"],"maxUniqueCountPerGroupByKey":100,"uniqueCountKeypath":"obj.field"},"sloThreshold":{"sloDefinition":{"sloId":"123e4567-e89b-12d3-a456-426614174000"},"errorBudget":{"rules":[{"condition":{"threshold":0.1},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}]},"burnRate":{"rules":[{"condition":{"threshold":0.1},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"dual":{"timeDuration":{"duration":60,"unit":"DURATION_UNIT_UNSPECIFIED"}},"single":{"timeDuration":{"duration":60,"unit":"DURATION_UNIT_UNSPECIFIED"}}}},"groupByKeys":["key1","key2"],"incidentsSettings":{"minutes":30,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"notificationGroup":{"groupByKeys":["key1","key2"],"webhooks":[{"minutes":15,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","integration":{"integrationId":123,"recipients":{"emails":["mail@gmail.com"]}}}],"destinations":[{"connectorId":"connector_id_example","presetId":"preset_id_example","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","triggeredRoutingOverrides":{"configOverrides":{"outputSchemaId":"output_schema_id_example","messageConfigFields":[{"fieldName":"description","template":"template_example"}],"connectorConfigFields":[{"fieldName":"description","template":"template_example"}]}},"resolvedRouteOverrides":{"configOverrides":{"outputSchemaId":"output_schema_id_example","messageConfigFields":[{"fieldName":"description","template":"template_example"}],"connectorConfigFields":[{"fieldName":"description","template":"template_example"}]}}}],"router":{"id":"123e4567-e89b-12d3-a456-426614174000","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"}},"notificationGroupExcess":[{"groupByKeys":["key1","key2"],"webhooks":[{"minutes":15,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","integration":{"integrationId":123,"recipients":{"emails":["mail@gmail.com"]}}}],"destinations":[{"connectorId":"connector_id_example","presetId":"preset_id_example","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","triggeredRoutingOverrides":{"configOverrides":{"outputSchemaId":"output_schema_id_example","messageConfigFields":[{"fieldName":"description","template":"template_example"}],"connectorConfigFields":[{"fieldName":"description","template":"template_example"}]}},"resolvedRouteOverrides":{"configOverrides":{"outputSchemaId":"output_schema_id_example","messageConfigFields":[{"fieldName":"description","template":"template_example"}],"connectorConfigFields":[{"fieldName":"description","template":"template_example"}]}}}],"router":{"id":"123e4567-e89b-12d3-a456-426614174000","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"}}],"entityLabels":{"key":"value"},"phantomMode":false,"deleted":false}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v3/alert-defs"


            payload = {
                "name": "My Alert",
                "description": "Alert description",
                "enabled": True,
                "priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED",
                "activeOn": {
                    "dayOfWeek": ["DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED", "DAY_OF_WEEK_TUESDAY"],
                    "startTime": {
                        "hours": 14,
                        "minutes": 30
                    },
                    "endTime": {
                        "hours": 14,
                        "minutes": 30
                    }
                },
                "type": "ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED",
                "logsImmediate": {
                    "logsFilter": {"simpleFilter": {
                            "luceneQuery": "string",
                            "labelFilters": {
                                "applicationName": [
                                    {
                                        "value": "my-app",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "subsystemName": [
                                    {
                                        "value": "my-app",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                            }
                        }},
                    "notificationPayloadFilter": ["obj.field"]
                },
                "tracingImmediate": {
                    "tracingFilter": {"simpleFilter": {
                            "tracingLabelFilters": {
                                "applicationName": [
                                    {
                                        "values": ["value1", "value2"],
                                        "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "subsystemName": [
                                    {
                                        "values": ["value1", "value2"],
                                        "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "serviceName": [
                                    {
                                        "values": ["value1", "value2"],
                                        "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "operationName": [
                                    {
                                        "values": ["value1", "value2"],
                                        "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "spanFields": [
                                    {
                                        "key": "span.field.key",
                                        "filterType": {
                                            "values": ["value1", "value2"],
                                            "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    }
                                ]
                            },
                            "latencyThresholdMs": 1000
                        }},
                    "notificationPayloadFilter": ["obj.field"]
                },
                "logsThreshold": {
                    "logsFilter": {"simpleFilter": {
                            "luceneQuery": "string",
                            "labelFilters": {
                                "applicationName": [
                                    {
                                        "value": "my-app",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "subsystemName": [
                                    {
                                        "value": "my-app",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                            }
                        }},
                    "undetectedValuesManagement": {
                        "triggerUndetectedValues": True,
                        "autoRetireTimeframe": "AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"
                    },
                    "rules": [
                        {
                            "condition": {
                                "threshold": 100,
                                "timeWindow": {"logsTimeWindowSpecificValue": "LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},
                                "conditionType": "LOGS_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
                            },
                            "override": {"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}
                        }
                    ],
                    "notificationPayloadFilter": ["obj.field"],
                    "evaluationDelayMs": 60000
                },
                "logsRatioThreshold": {
                    "numerator": {"simpleFilter": {
                            "luceneQuery": "string",
                            "labelFilters": {
                                "applicationName": [
                                    {
                                        "value": "my-app",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "subsystemName": [
                                    {
                                        "value": "my-app",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                            }
                        }},
                    "numeratorAlias": "numerator_alias",
                    "denominator": {"simpleFilter": {
                            "luceneQuery": "string",
                            "labelFilters": {
                                "applicationName": [
                                    {
                                        "value": "my-app",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "subsystemName": [
                                    {
                                        "value": "my-app",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                            }
                        }},
                    "denominatorAlias": "denominator_alias",
                    "rules": [
                        {
                            "condition": {
                                "threshold": 10,
                                "timeWindow": {"logsRatioTimeWindowSpecificValue": "LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},
                                "conditionType": "LOGS_RATIO_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
                            },
                            "override": {"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}
                        }
                    ],
                    "notificationPayloadFilter": ["obj.field"],
                    "groupByFor": "LOGS_RATIO_GROUP_BY_FOR_BOTH_OR_UNSPECIFIED",
                    "undetectedValuesManagement": {
                        "triggerUndetectedValues": True,
                        "autoRetireTimeframe": "AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"
                    },
                    "ignoreInfinity": True,
                    "evaluationDelayMs": 60000
                },
                "logsTimeRelativeThreshold": {
                    "logsFilter": {"simpleFilter": {
                            "luceneQuery": "string",
                            "labelFilters": {
                                "applicationName": [
                                    {
                                        "value": "my-app",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "subsystemName": [
                                    {
                                        "value": "my-app",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                            }
                        }},
                    "rules": [
                        {
                            "condition": {
                                "threshold": 0.1,
                                "comparedTo": "LOGS_TIME_RELATIVE_COMPARED_TO_PREVIOUS_HOUR_OR_UNSPECIFIED",
                                "conditionType": "LOGS_TIME_RELATIVE_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
                            },
                            "override": {"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}
                        }
                    ],
                    "ignoreInfinity": True,
                    "notificationPayloadFilter": ["obj.field"],
                    "undetectedValuesManagement": {
                        "triggerUndetectedValues": True,
                        "autoRetireTimeframe": "AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"
                    },
                    "evaluationDelayMs": 60000
                },
                "metricThreshold": {
                    "metricFilter": {"promql": "avg_over_time(metric_name[5m]) > 10"},
                    "rules": [
                        {
                            "condition": {
                                "threshold": 100,
                                "forOverPct": 80,
                                "ofTheLast": {
                                    "metricTimeWindowSpecificValue": "METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED",
                                    "metricTimeWindowDynamicDuration": "1h30m"
                                },
                                "conditionType": "METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
                            },
                            "override": {"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}
                        }
                    ],
                    "undetectedValuesManagement": {
                        "triggerUndetectedValues": True,
                        "autoRetireTimeframe": "AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"
                    },
                    "missingValues": {
                        "replaceWithZero": True,
                        "minNonNullValuesPct": 80
                    },
                    "evaluationDelayMs": 60000
                },
                "tracingThreshold": {
                    "tracingFilter": {"simpleFilter": {
                            "tracingLabelFilters": {
                                "applicationName": [
                                    {
                                        "values": ["value1", "value2"],
                                        "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "subsystemName": [
                                    {
                                        "values": ["value1", "value2"],
                                        "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "serviceName": [
                                    {
                                        "values": ["value1", "value2"],
                                        "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "operationName": [
                                    {
                                        "values": ["value1", "value2"],
                                        "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "spanFields": [
                                    {
                                        "key": "span.field.key",
                                        "filterType": {
                                            "values": ["value1", "value2"],
                                            "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    }
                                ]
                            },
                            "latencyThresholdMs": 1000
                        }},
                    "rules": [{"condition": {
                                "spanAmount": 100,
                                "timeWindow": {"tracingTimeWindowValue": "TRACING_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},
                                "conditionType": "TRACING_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
                            }}],
                    "notificationPayloadFilter": ["obj.field"]
                },
                "flow": {
                    "stages": [
                        {
                            "flowStagesGroups": {"groups": [
                                    {
                                        "alertDefs": [
                                            {
                                                "id": "123e4567-e89b-12d3-a456-426614174000",
                                                "not": True
                                            }
                                        ],
                                        "nextOp": "NEXT_OP_AND_OR_UNSPECIFIED",
                                        "alertsOp": "ALERTS_OP_AND_OR_UNSPECIFIED"
                                    }
                                ]},
                            "timeframeMs": "string",
                            "timeframeType": "TIMEFRAME_TYPE_UNSPECIFIED"
                        }
                    ],
                    "enforceSuppression": True
                },
                "logsAnomaly": {
                    "logsFilter": {"simpleFilter": {
                            "luceneQuery": "string",
                            "labelFilters": {
                                "applicationName": [
                                    {
                                        "value": "my-app",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "subsystemName": [
                                    {
                                        "value": "my-app",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                            }
                        }},
                    "rules": [{"condition": {
                                "minimumThreshold": 10,
                                "timeWindow": {"logsTimeWindowSpecificValue": "LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},
                                "conditionType": "LOGS_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"
                            }}],
                    "notificationPayloadFilter": ["obj.field"],
                    "evaluationDelayMs": 60000,
                    "anomalyAlertSettings": {"percentageOfDeviation": 0.1}
                },
                "metricAnomaly": {
                    "metricFilter": {"promql": "avg_over_time(metric_name[5m]) > 10"},
                    "rules": [{"condition": {
                                "threshold": 10,
                                "forOverPct": 20,
                                "ofTheLast": {
                                    "metricTimeWindowSpecificValue": "METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED",
                                    "metricTimeWindowDynamicDuration": "1h30m"
                                },
                                "minNonNullValuesPct": 10,
                                "conditionType": "METRIC_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"
                            }}],
                    "evaluationDelayMs": 60000,
                    "anomalyAlertSettings": {"percentageOfDeviation": 0.1}
                },
                "logsNewValue": {
                    "logsFilter": {"simpleFilter": {
                            "luceneQuery": "string",
                            "labelFilters": {
                                "applicationName": [
                                    {
                                        "value": "my-app",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "subsystemName": [
                                    {
                                        "value": "my-app",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                            }
                        }},
                    "rules": [{"condition": {
                                "keypathToTrack": "metadata.field",
                                "timeWindow": {"logsNewValueTimeWindowSpecificValue": "LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_12_OR_UNSPECIFIED"}
                            }}],
                    "notificationPayloadFilter": ["obj.field"]
                },
                "logsUniqueCount": {
                    "logsFilter": {"simpleFilter": {
                            "luceneQuery": "string",
                            "labelFilters": {
                                "applicationName": [
                                    {
                                        "value": "my-app",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "subsystemName": [
                                    {
                                        "value": "my-app",
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                    }
                                ],
                                "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                            }
                        }},
                    "rules": [{"condition": {
                                "maxUniqueCount": 100,
                                "timeWindow": {"logsUniqueValueTimeWindowSpecificValue": "LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTE_1_OR_UNSPECIFIED"}
                            }}],
                    "notificationPayloadFilter": ["obj.field"],
                    "maxUniqueCountPerGroupByKey": 100,
                    "uniqueCountKeypath": "obj.field"
                },
                "sloThreshold": {
                    "sloDefinition": {"sloId": "123e4567-e89b-12d3-a456-426614174000"},
                    "errorBudget": {"rules": [
                            {
                                "condition": {"threshold": 0.1},
                                "override": {"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}
                            }
                        ]},
                    "burnRate": {
                        "rules": [
                            {
                                "condition": {"threshold": 0.1},
                                "override": {"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}
                            }
                        ],
                        "dual": {"timeDuration": {
                                "duration": 60,
                                "unit": "DURATION_UNIT_UNSPECIFIED"
                            }},
                        "single": {"timeDuration": {
                                "duration": 60,
                                "unit": "DURATION_UNIT_UNSPECIFIED"
                            }}
                    }
                },
                "groupByKeys": ["key1", "key2"],
                "incidentsSettings": {
                    "minutes": 30,
                    "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                },
                "notificationGroup": {
                    "groupByKeys": ["key1", "key2"],
                    "webhooks": [
                        {
                            "minutes": 15,
                            "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                            "integration": {
                                "integrationId": 123,
                                "recipients": {"emails": ["mail@gmail.com"]}
                            }
                        }
                    ],
                    "destinations": [
                        {
                            "connectorId": "connector_id_example",
                            "presetId": "preset_id_example",
                            "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                            "triggeredRoutingOverrides": {"configOverrides": {
                                    "outputSchemaId": "output_schema_id_example",
                                    "messageConfigFields": [
                                        {
                                            "fieldName": "description",
                                            "template": "template_example"
                                        }
                                    ],
                                    "connectorConfigFields": [
                                        {
                                            "fieldName": "description",
                                            "template": "template_example"
                                        }
                                    ]
                                }},
                            "resolvedRouteOverrides": {"configOverrides": {
                                    "outputSchemaId": "output_schema_id_example",
                                    "messageConfigFields": [
                                        {
                                            "fieldName": "description",
                                            "template": "template_example"
                                        }
                                    ],
                                    "connectorConfigFields": [
                                        {
                                            "fieldName": "description",
                                            "template": "template_example"
                                        }
                                    ]
                                }}
                        }
                    ],
                    "router": {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                    }
                },
                "notificationGroupExcess": [
                    {
                        "groupByKeys": ["key1", "key2"],
                        "webhooks": [
                            {
                                "minutes": 15,
                                "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                                "integration": {
                                    "integrationId": 123,
                                    "recipients": {"emails": ["mail@gmail.com"]}
                                }
                            }
                        ],
                        "destinations": [
                            {
                                "connectorId": "connector_id_example",
                                "presetId": "preset_id_example",
                                "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                                "triggeredRoutingOverrides": {"configOverrides": {
                                        "outputSchemaId": "output_schema_id_example",
                                        "messageConfigFields": [
                                            {
                                                "fieldName": "description",
                                                "template": "template_example"
                                            }
                                        ],
                                        "connectorConfigFields": [
                                            {
                                                "fieldName": "description",
                                                "template": "template_example"
                                            }
                                        ]
                                    }},
                                "resolvedRouteOverrides": {"configOverrides": {
                                        "outputSchemaId": "output_schema_id_example",
                                        "messageConfigFields": [
                                            {
                                                "fieldName": "description",
                                                "template": "template_example"
                                            }
                                        ],
                                        "connectorConfigFields": [
                                            {
                                                "fieldName": "description",
                                                "template": "template_example"
                                            }
                                        ]
                                    }}
                            }
                        ],
                        "router": {
                            "id": "123e4567-e89b-12d3-a456-426614174000",
                            "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                        }
                    }
                ],
                "entityLabels": {"key": "value"},
                "phantomMode": False,
                "deleted": False
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v3/alert-defs \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"My Alert","description":"Alert description","enabled":true,"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED","activeOn":{"dayOfWeek":["DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED","DAY_OF_WEEK_TUESDAY"],"startTime":{"hours":14,"minutes":30},"endTime":{"hours":14,"minutes":30}},"type":"ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED","logsImmediate":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"notificationPayloadFilter":["obj.field"]},"tracingImmediate":{"tracingFilter":{"simpleFilter":{"tracingLabelFilters":{"applicationName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"serviceName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"operationName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"spanFields":[{"key":"span.field.key","filterType":{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}}]},"latencyThresholdMs":1000}},"notificationPayloadFilter":["obj.field"]},"logsThreshold":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"rules":[{"condition":{"threshold":100,"timeWindow":{"logsTimeWindowSpecificValue":"LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"notificationPayloadFilter":["obj.field"],"evaluationDelayMs":60000},"logsRatioThreshold":{"numerator":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"numeratorAlias":"numerator_alias","denominator":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"denominatorAlias":"denominator_alias","rules":[{"condition":{"threshold":10,"timeWindow":{"logsRatioTimeWindowSpecificValue":"LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_RATIO_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"notificationPayloadFilter":["obj.field"],"groupByFor":"LOGS_RATIO_GROUP_BY_FOR_BOTH_OR_UNSPECIFIED","undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"ignoreInfinity":true,"evaluationDelayMs":60000},"logsTimeRelativeThreshold":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"threshold":0.1,"comparedTo":"LOGS_TIME_RELATIVE_COMPARED_TO_PREVIOUS_HOUR_OR_UNSPECIFIED","conditionType":"LOGS_TIME_RELATIVE_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"ignoreInfinity":true,"notificationPayloadFilter":["obj.field"],"undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"evaluationDelayMs":60000},"metricThreshold":{"metricFilter":{"promql":"avg_over_time(metric_name[5m]) > 10"},"rules":[{"condition":{"threshold":100,"forOverPct":80,"ofTheLast":{"metricTimeWindowSpecificValue":"METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED","metricTimeWindowDynamicDuration":"1h30m"},"conditionType":"METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"missingValues":{"replaceWithZero":true,"minNonNullValuesPct":80},"evaluationDelayMs":60000},"tracingThreshold":{"tracingFilter":{"simpleFilter":{"tracingLabelFilters":{"applicationName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"serviceName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"operationName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"spanFields":[{"key":"span.field.key","filterType":{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}}]},"latencyThresholdMs":1000}},"rules":[{"condition":{"spanAmount":100,"timeWindow":{"tracingTimeWindowValue":"TRACING_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"TRACING_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"}}],"notificationPayloadFilter":["obj.field"]},"flow":{"stages":[{"flowStagesGroups":{"groups":[{"alertDefs":[{"id":"123e4567-e89b-12d3-a456-426614174000","not":true}],"nextOp":"NEXT_OP_AND_OR_UNSPECIFIED","alertsOp":"ALERTS_OP_AND_OR_UNSPECIFIED"}]},"timeframeMs":"string","timeframeType":"TIMEFRAME_TYPE_UNSPECIFIED"}],"enforceSuppression":true},"logsAnomaly":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"minimumThreshold":10,"timeWindow":{"logsTimeWindowSpecificValue":"LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"}}],"notificationPayloadFilter":["obj.field"],"evaluationDelayMs":60000,"anomalyAlertSettings":{"percentageOfDeviation":0.1}},"metricAnomaly":{"metricFilter":{"promql":"avg_over_time(metric_name[5m]) > 10"},"rules":[{"condition":{"threshold":10,"forOverPct":20,"ofTheLast":{"metricTimeWindowSpecificValue":"METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED","metricTimeWindowDynamicDuration":"1h30m"},"minNonNullValuesPct":10,"conditionType":"METRIC_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"}}],"evaluationDelayMs":60000,"anomalyAlertSettings":{"percentageOfDeviation":0.1}},"logsNewValue":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"keypathToTrack":"metadata.field","timeWindow":{"logsNewValueTimeWindowSpecificValue":"LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_12_OR_UNSPECIFIED"}}}],"notificationPayloadFilter":["obj.field"]},"logsUniqueCount":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"maxUniqueCount":100,"timeWindow":{"logsUniqueValueTimeWindowSpecificValue":"LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTE_1_OR_UNSPECIFIED"}}}],"notificationPayloadFilter":["obj.field"],"maxUniqueCountPerGroupByKey":100,"uniqueCountKeypath":"obj.field"},"sloThreshold":{"sloDefinition":{"sloId":"123e4567-e89b-12d3-a456-426614174000"},"errorBudget":{"rules":[{"condition":{"threshold":0.1},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}]},"burnRate":{"rules":[{"condition":{"threshold":0.1},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"dual":{"timeDuration":{"duration":60,"unit":"DURATION_UNIT_UNSPECIFIED"}},"single":{"timeDuration":{"duration":60,"unit":"DURATION_UNIT_UNSPECIFIED"}}}},"groupByKeys":["key1","key2"],"incidentsSettings":{"minutes":30,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"notificationGroup":{"groupByKeys":["key1","key2"],"webhooks":[{"minutes":15,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","integration":{"integrationId":123,"recipients":{"emails":["mail@gmail.com"]}}}],"destinations":[{"connectorId":"connector_id_example","presetId":"preset_id_example","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","triggeredRoutingOverrides":{"configOverrides":{"outputSchemaId":"output_schema_id_example","messageConfigFields":[{"fieldName":"description","template":"template_example"}],"connectorConfigFields":[{"fieldName":"description","template":"template_example"}]}},"resolvedRouteOverrides":{"configOverrides":{"outputSchemaId":"output_schema_id_example","messageConfigFields":[{"fieldName":"description","template":"template_example"}],"connectorConfigFields":[{"fieldName":"description","template":"template_example"}]}}}],"router":{"id":"123e4567-e89b-12d3-a456-426614174000","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"}},"notificationGroupExcess":[{"groupByKeys":["key1","key2"],"webhooks":[{"minutes":15,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","integration":{"integrationId":123,"recipients":{"emails":["mail@gmail.com"]}}}],"destinations":[{"connectorId":"connector_id_example","presetId":"preset_id_example","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","triggeredRoutingOverrides":{"configOverrides":{"outputSchemaId":"output_schema_id_example","messageConfigFields":[{"fieldName":"description","template":"template_example"}],"connectorConfigFields":[{"fieldName":"description","template":"template_example"}]}},"resolvedRouteOverrides":{"configOverrides":{"outputSchemaId":"output_schema_id_example","messageConfigFields":[{"fieldName":"description","template":"template_example"}],"connectorConfigFields":[{"fieldName":"description","template":"template_example"}]}}}],"router":{"id":"123e4567-e89b-12d3-a456-426614174000","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"}}],"entityLabels":{"key":"value"},"phantomMode":false,"deleted":false}'
      description: No description available
    put:
      summary: Replace an alert definition
      operationId: AlertDefsService_ReplaceAlertDef
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3ReplaceAlertDefResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v3ReplaceAlertDefRequest'
        description: A request to replace an existing alert definition
        required: true
      tags:
        - Alert definitions service
      x-coralogixPermissions:
        - alerts:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v3/alert-defs';

            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"alertDefProperties":{"name":"My Alert","description":"Alert description","enabled":true,"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED","activeOn":{"dayOfWeek":["DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED","DAY_OF_WEEK_TUESDAY"],"startTime":{"hours":14,"minutes":30},"endTime":{"hours":14,"minutes":30}},"type":"ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED","logsImmediate":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"notificationPayloadFilter":["obj.field"]},"tracingImmediate":{"tracingFilter":{"simpleFilter":{"tracingLabelFilters":{"applicationName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"serviceName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"operationName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"spanFields":[{"key":"span.field.key","filterType":{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}}]},"latencyThresholdMs":1000}},"notificationPayloadFilter":["obj.field"]},"logsThreshold":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"rules":[{"condition":{"threshold":100,"timeWindow":{"logsTimeWindowSpecificValue":"LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"notificationPayloadFilter":["obj.field"],"evaluationDelayMs":60000},"logsRatioThreshold":{"numerator":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"numeratorAlias":"numerator_alias","denominator":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"denominatorAlias":"denominator_alias","rules":[{"condition":{"threshold":10,"timeWindow":{"logsRatioTimeWindowSpecificValue":"LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_RATIO_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"notificationPayloadFilter":["obj.field"],"groupByFor":"LOGS_RATIO_GROUP_BY_FOR_BOTH_OR_UNSPECIFIED","undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"ignoreInfinity":true,"evaluationDelayMs":60000},"logsTimeRelativeThreshold":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"threshold":0.1,"comparedTo":"LOGS_TIME_RELATIVE_COMPARED_TO_PREVIOUS_HOUR_OR_UNSPECIFIED","conditionType":"LOGS_TIME_RELATIVE_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"ignoreInfinity":true,"notificationPayloadFilter":["obj.field"],"undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"evaluationDelayMs":60000},"metricThreshold":{"metricFilter":{"promql":"avg_over_time(metric_name[5m]) > 10"},"rules":[{"condition":{"threshold":100,"forOverPct":80,"ofTheLast":{"metricTimeWindowSpecificValue":"METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED","metricTimeWindowDynamicDuration":"1h30m"},"conditionType":"METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"missingValues":{"replaceWithZero":true,"minNonNullValuesPct":80},"evaluationDelayMs":60000},"tracingThreshold":{"tracingFilter":{"simpleFilter":{"tracingLabelFilters":{"applicationName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"serviceName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"operationName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"spanFields":[{"key":"span.field.key","filterType":{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}}]},"latencyThresholdMs":1000}},"rules":[{"condition":{"spanAmount":100,"timeWindow":{"tracingTimeWindowValue":"TRACING_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"TRACING_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"}}],"notificationPayloadFilter":["obj.field"]},"flow":{"stages":[{"flowStagesGroups":{"groups":[{"alertDefs":[{"id":"123e4567-e89b-12d3-a456-426614174000","not":true}],"nextOp":"NEXT_OP_AND_OR_UNSPECIFIED","alertsOp":"ALERTS_OP_AND_OR_UNSPECIFIED"}]},"timeframeMs":"string","timeframeType":"TIMEFRAME_TYPE_UNSPECIFIED"}],"enforceSuppression":true},"logsAnomaly":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"minimumThreshold":10,"timeWindow":{"logsTimeWindowSpecificValue":"LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"}}],"notificationPayloadFilter":["obj.field"],"evaluationDelayMs":60000,"anomalyAlertSettings":{"percentageOfDeviation":0.1}},"metricAnomaly":{"metricFilter":{"promql":"avg_over_time(metric_name[5m]) > 10"},"rules":[{"condition":{"threshold":10,"forOverPct":20,"ofTheLast":{"metricTimeWindowSpecificValue":"METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED","metricTimeWindowDynamicDuration":"1h30m"},"minNonNullValuesPct":10,"conditionType":"METRIC_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"}}],"evaluationDelayMs":60000,"anomalyAlertSettings":{"percentageOfDeviation":0.1}},"logsNewValue":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"keypathToTrack":"metadata.field","timeWindow":{"logsNewValueTimeWindowSpecificValue":"LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_12_OR_UNSPECIFIED"}}}],"notificationPayloadFilter":["obj.field"]},"logsUniqueCount":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"maxUniqueCount":100,"timeWindow":{"logsUniqueValueTimeWindowSpecificValue":"LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTE_1_OR_UNSPECIFIED"}}}],"notificationPayloadFilter":["obj.field"],"maxUniqueCountPerGroupByKey":100,"uniqueCountKeypath":"obj.field"},"sloThreshold":{"sloDefinition":{"sloId":"123e4567-e89b-12d3-a456-426614174000"},"errorBudget":{"rules":[{"condition":{"threshold":0.1},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}]},"burnRate":{"rules":[{"condition":{"threshold":0.1},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"dual":{"timeDuration":{"duration":60,"unit":"DURATION_UNIT_UNSPECIFIED"}},"single":{"timeDuration":{"duration":60,"unit":"DURATION_UNIT_UNSPECIFIED"}}}},"groupByKeys":["key1","key2"],"incidentsSettings":{"minutes":30,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"notificationGroup":{"groupByKeys":["key1","key2"],"webhooks":[{"minutes":15,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","integration":{"integrationId":123,"recipients":{"emails":["mail@gmail.com"]}}}],"destinations":[{"connectorId":"connector_id_example","presetId":"preset_id_example","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","triggeredRoutingOverrides":{"configOverrides":{"outputSchemaId":"output_schema_id_example","messageConfigFields":[{"fieldName":"description","template":"template_example"}],"connectorConfigFields":[{"fieldName":"description","template":"template_example"}]}},"resolvedRouteOverrides":{"configOverrides":{"outputSchemaId":"output_schema_id_example","messageConfigFields":[{"fieldName":"description","template":"template_example"}],"connectorConfigFields":[{"fieldName":"description","template":"template_example"}]}}}],"router":{"id":"123e4567-e89b-12d3-a456-426614174000","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"}},"notificationGroupExcess":[{"groupByKeys":["key1","key2"],"webhooks":[{"minutes":15,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","integration":{"integrationId":123,"recipients":{"emails":["mail@gmail.com"]}}}],"destinations":[{"connectorId":"connector_id_example","presetId":"preset_id_example","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","triggeredRoutingOverrides":{"configOverrides":{"outputSchemaId":"output_schema_id_example","messageConfigFields":[{"fieldName":"description","template":"template_example"}],"connectorConfigFields":[{"fieldName":"description","template":"template_example"}]}},"resolvedRouteOverrides":{"configOverrides":{"outputSchemaId":"output_schema_id_example","messageConfigFields":[{"fieldName":"description","template":"template_example"}],"connectorConfigFields":[{"fieldName":"description","template":"template_example"}]}}}],"router":{"id":"123e4567-e89b-12d3-a456-426614174000","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"}}],"entityLabels":{"key":"value"},"phantomMode":false,"deleted":false},"id":"123e4567-e89b-12d3-a456-426614174000"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v3/alert-defs"


            payload = {
                "alertDefProperties": {
                    "name": "My Alert",
                    "description": "Alert description",
                    "enabled": True,
                    "priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED",
                    "activeOn": {
                        "dayOfWeek": ["DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED", "DAY_OF_WEEK_TUESDAY"],
                        "startTime": {
                            "hours": 14,
                            "minutes": 30
                        },
                        "endTime": {
                            "hours": 14,
                            "minutes": 30
                        }
                    },
                    "type": "ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED",
                    "logsImmediate": {
                        "logsFilter": {"simpleFilter": {
                                "luceneQuery": "string",
                                "labelFilters": {
                                    "applicationName": [
                                        {
                                            "value": "my-app",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "subsystemName": [
                                        {
                                            "value": "my-app",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                                }
                            }},
                        "notificationPayloadFilter": ["obj.field"]
                    },
                    "tracingImmediate": {
                        "tracingFilter": {"simpleFilter": {
                                "tracingLabelFilters": {
                                    "applicationName": [
                                        {
                                            "values": ["value1", "value2"],
                                            "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "subsystemName": [
                                        {
                                            "values": ["value1", "value2"],
                                            "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "serviceName": [
                                        {
                                            "values": ["value1", "value2"],
                                            "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "operationName": [
                                        {
                                            "values": ["value1", "value2"],
                                            "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "spanFields": [
                                        {
                                            "key": "span.field.key",
                                            "filterType": {
                                                "values": ["value1", "value2"],
                                                "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                            }
                                        }
                                    ]
                                },
                                "latencyThresholdMs": 1000
                            }},
                        "notificationPayloadFilter": ["obj.field"]
                    },
                    "logsThreshold": {
                        "logsFilter": {"simpleFilter": {
                                "luceneQuery": "string",
                                "labelFilters": {
                                    "applicationName": [
                                        {
                                            "value": "my-app",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "subsystemName": [
                                        {
                                            "value": "my-app",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                                }
                            }},
                        "undetectedValuesManagement": {
                            "triggerUndetectedValues": True,
                            "autoRetireTimeframe": "AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"
                        },
                        "rules": [
                            {
                                "condition": {
                                    "threshold": 100,
                                    "timeWindow": {"logsTimeWindowSpecificValue": "LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},
                                    "conditionType": "LOGS_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
                                },
                                "override": {"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}
                            }
                        ],
                        "notificationPayloadFilter": ["obj.field"],
                        "evaluationDelayMs": 60000
                    },
                    "logsRatioThreshold": {
                        "numerator": {"simpleFilter": {
                                "luceneQuery": "string",
                                "labelFilters": {
                                    "applicationName": [
                                        {
                                            "value": "my-app",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "subsystemName": [
                                        {
                                            "value": "my-app",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                                }
                            }},
                        "numeratorAlias": "numerator_alias",
                        "denominator": {"simpleFilter": {
                                "luceneQuery": "string",
                                "labelFilters": {
                                    "applicationName": [
                                        {
                                            "value": "my-app",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "subsystemName": [
                                        {
                                            "value": "my-app",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                                }
                            }},
                        "denominatorAlias": "denominator_alias",
                        "rules": [
                            {
                                "condition": {
                                    "threshold": 10,
                                    "timeWindow": {"logsRatioTimeWindowSpecificValue": "LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},
                                    "conditionType": "LOGS_RATIO_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
                                },
                                "override": {"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}
                            }
                        ],
                        "notificationPayloadFilter": ["obj.field"],
                        "groupByFor": "LOGS_RATIO_GROUP_BY_FOR_BOTH_OR_UNSPECIFIED",
                        "undetectedValuesManagement": {
                            "triggerUndetectedValues": True,
                            "autoRetireTimeframe": "AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"
                        },
                        "ignoreInfinity": True,
                        "evaluationDelayMs": 60000
                    },
                    "logsTimeRelativeThreshold": {
                        "logsFilter": {"simpleFilter": {
                                "luceneQuery": "string",
                                "labelFilters": {
                                    "applicationName": [
                                        {
                                            "value": "my-app",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "subsystemName": [
                                        {
                                            "value": "my-app",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                                }
                            }},
                        "rules": [
                            {
                                "condition": {
                                    "threshold": 0.1,
                                    "comparedTo": "LOGS_TIME_RELATIVE_COMPARED_TO_PREVIOUS_HOUR_OR_UNSPECIFIED",
                                    "conditionType": "LOGS_TIME_RELATIVE_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
                                },
                                "override": {"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}
                            }
                        ],
                        "ignoreInfinity": True,
                        "notificationPayloadFilter": ["obj.field"],
                        "undetectedValuesManagement": {
                            "triggerUndetectedValues": True,
                            "autoRetireTimeframe": "AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"
                        },
                        "evaluationDelayMs": 60000
                    },
                    "metricThreshold": {
                        "metricFilter": {"promql": "avg_over_time(metric_name[5m]) > 10"},
                        "rules": [
                            {
                                "condition": {
                                    "threshold": 100,
                                    "forOverPct": 80,
                                    "ofTheLast": {
                                        "metricTimeWindowSpecificValue": "METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED",
                                        "metricTimeWindowDynamicDuration": "1h30m"
                                    },
                                    "conditionType": "METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
                                },
                                "override": {"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}
                            }
                        ],
                        "undetectedValuesManagement": {
                            "triggerUndetectedValues": True,
                            "autoRetireTimeframe": "AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"
                        },
                        "missingValues": {
                            "replaceWithZero": True,
                            "minNonNullValuesPct": 80
                        },
                        "evaluationDelayMs": 60000
                    },
                    "tracingThreshold": {
                        "tracingFilter": {"simpleFilter": {
                                "tracingLabelFilters": {
                                    "applicationName": [
                                        {
                                            "values": ["value1", "value2"],
                                            "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "subsystemName": [
                                        {
                                            "values": ["value1", "value2"],
                                            "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "serviceName": [
                                        {
                                            "values": ["value1", "value2"],
                                            "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "operationName": [
                                        {
                                            "values": ["value1", "value2"],
                                            "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "spanFields": [
                                        {
                                            "key": "span.field.key",
                                            "filterType": {
                                                "values": ["value1", "value2"],
                                                "operation": "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                            }
                                        }
                                    ]
                                },
                                "latencyThresholdMs": 1000
                            }},
                        "rules": [{"condition": {
                                    "spanAmount": 100,
                                    "timeWindow": {"tracingTimeWindowValue": "TRACING_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},
                                    "conditionType": "TRACING_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
                                }}],
                        "notificationPayloadFilter": ["obj.field"]
                    },
                    "flow": {
                        "stages": [
                            {
                                "flowStagesGroups": {"groups": [
                                        {
                                            "alertDefs": [
                                                {
                                                    "id": "123e4567-e89b-12d3-a456-426614174000",
                                                    "not": True
                                                }
                                            ],
                                            "nextOp": "NEXT_OP_AND_OR_UNSPECIFIED",
                                            "alertsOp": "ALERTS_OP_AND_OR_UNSPECIFIED"
                                        }
                                    ]},
                                "timeframeMs": "string",
                                "timeframeType": "TIMEFRAME_TYPE_UNSPECIFIED"
                            }
                        ],
                        "enforceSuppression": True
                    },
                    "logsAnomaly": {
                        "logsFilter": {"simpleFilter": {
                                "luceneQuery": "string",
                                "labelFilters": {
                                    "applicationName": [
                                        {
                                            "value": "my-app",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "subsystemName": [
                                        {
                                            "value": "my-app",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                                }
                            }},
                        "rules": [{"condition": {
                                    "minimumThreshold": 10,
                                    "timeWindow": {"logsTimeWindowSpecificValue": "LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},
                                    "conditionType": "LOGS_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"
                                }}],
                        "notificationPayloadFilter": ["obj.field"],
                        "evaluationDelayMs": 60000,
                        "anomalyAlertSettings": {"percentageOfDeviation": 0.1}
                    },
                    "metricAnomaly": {
                        "metricFilter": {"promql": "avg_over_time(metric_name[5m]) > 10"},
                        "rules": [{"condition": {
                                    "threshold": 10,
                                    "forOverPct": 20,
                                    "ofTheLast": {
                                        "metricTimeWindowSpecificValue": "METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED",
                                        "metricTimeWindowDynamicDuration": "1h30m"
                                    },
                                    "minNonNullValuesPct": 10,
                                    "conditionType": "METRIC_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"
                                }}],
                        "evaluationDelayMs": 60000,
                        "anomalyAlertSettings": {"percentageOfDeviation": 0.1}
                    },
                    "logsNewValue": {
                        "logsFilter": {"simpleFilter": {
                                "luceneQuery": "string",
                                "labelFilters": {
                                    "applicationName": [
                                        {
                                            "value": "my-app",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "subsystemName": [
                                        {
                                            "value": "my-app",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                                }
                            }},
                        "rules": [{"condition": {
                                    "keypathToTrack": "metadata.field",
                                    "timeWindow": {"logsNewValueTimeWindowSpecificValue": "LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_12_OR_UNSPECIFIED"}
                                }}],
                        "notificationPayloadFilter": ["obj.field"]
                    },
                    "logsUniqueCount": {
                        "logsFilter": {"simpleFilter": {
                                "luceneQuery": "string",
                                "labelFilters": {
                                    "applicationName": [
                                        {
                                            "value": "my-app",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "subsystemName": [
                                        {
                                            "value": "my-app",
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
                                        }
                                    ],
                                    "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]
                                }
                            }},
                        "rules": [{"condition": {
                                    "maxUniqueCount": 100,
                                    "timeWindow": {"logsUniqueValueTimeWindowSpecificValue": "LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTE_1_OR_UNSPECIFIED"}
                                }}],
                        "notificationPayloadFilter": ["obj.field"],
                        "maxUniqueCountPerGroupByKey": 100,
                        "uniqueCountKeypath": "obj.field"
                    },
                    "sloThreshold": {
                        "sloDefinition": {"sloId": "123e4567-e89b-12d3-a456-426614174000"},
                        "errorBudget": {"rules": [
                                {
                                    "condition": {"threshold": 0.1},
                                    "override": {"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}
                                }
                            ]},
                        "burnRate": {
                            "rules": [
                                {
                                    "condition": {"threshold": 0.1},
                                    "override": {"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}
                                }
                            ],
                            "dual": {"timeDuration": {
                                    "duration": 60,
                                    "unit": "DURATION_UNIT_UNSPECIFIED"
                                }},
                            "single": {"timeDuration": {
                                    "duration": 60,
                                    "unit": "DURATION_UNIT_UNSPECIFIED"
                                }}
                        }
                    },
                    "groupByKeys": ["key1", "key2"],
                    "incidentsSettings": {
                        "minutes": 30,
                        "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                    },
                    "notificationGroup": {
                        "groupByKeys": ["key1", "key2"],
                        "webhooks": [
                            {
                                "minutes": 15,
                                "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                                "integration": {
                                    "integrationId": 123,
                                    "recipients": {"emails": ["mail@gmail.com"]}
                                }
                            }
                        ],
                        "destinations": [
                            {
                                "connectorId": "connector_id_example",
                                "presetId": "preset_id_example",
                                "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                                "triggeredRoutingOverrides": {"configOverrides": {
                                        "outputSchemaId": "output_schema_id_example",
                                        "messageConfigFields": [
                                            {
                                                "fieldName": "description",
                                                "template": "template_example"
                                            }
                                        ],
                                        "connectorConfigFields": [
                                            {
                                                "fieldName": "description",
                                                "template": "template_example"
                                            }
                                        ]
                                    }},
                                "resolvedRouteOverrides": {"configOverrides": {
                                        "outputSchemaId": "output_schema_id_example",
                                        "messageConfigFields": [
                                            {
                                                "fieldName": "description",
                                                "template": "template_example"
                                            }
                                        ],
                                        "connectorConfigFields": [
                                            {
                                                "fieldName": "description",
                                                "template": "template_example"
                                            }
                                        ]
                                    }}
                            }
                        ],
                        "router": {
                            "id": "123e4567-e89b-12d3-a456-426614174000",
                            "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                        }
                    },
                    "notificationGroupExcess": [
                        {
                            "groupByKeys": ["key1", "key2"],
                            "webhooks": [
                                {
                                    "minutes": 15,
                                    "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                                    "integration": {
                                        "integrationId": 123,
                                        "recipients": {"emails": ["mail@gmail.com"]}
                                    }
                                }
                            ],
                            "destinations": [
                                {
                                    "connectorId": "connector_id_example",
                                    "presetId": "preset_id_example",
                                    "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                                    "triggeredRoutingOverrides": {"configOverrides": {
                                            "outputSchemaId": "output_schema_id_example",
                                            "messageConfigFields": [
                                                {
                                                    "fieldName": "description",
                                                    "template": "template_example"
                                                }
                                            ],
                                            "connectorConfigFields": [
                                                {
                                                    "fieldName": "description",
                                                    "template": "template_example"
                                                }
                                            ]
                                        }},
                                    "resolvedRouteOverrides": {"configOverrides": {
                                            "outputSchemaId": "output_schema_id_example",
                                            "messageConfigFields": [
                                                {
                                                    "fieldName": "description",
                                                    "template": "template_example"
                                                }
                                            ],
                                            "connectorConfigFields": [
                                                {
                                                    "fieldName": "description",
                                                    "template": "template_example"
                                                }
                                            ]
                                        }}
                                }
                            ],
                            "router": {
                                "id": "123e4567-e89b-12d3-a456-426614174000",
                                "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                            }
                        }
                    ],
                    "entityLabels": {"key": "value"},
                    "phantomMode": False,
                    "deleted": False
                },
                "id": "123e4567-e89b-12d3-a456-426614174000"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v3/alert-defs \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"alertDefProperties":{"name":"My Alert","description":"Alert description","enabled":true,"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED","activeOn":{"dayOfWeek":["DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED","DAY_OF_WEEK_TUESDAY"],"startTime":{"hours":14,"minutes":30},"endTime":{"hours":14,"minutes":30}},"type":"ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED","logsImmediate":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"notificationPayloadFilter":["obj.field"]},"tracingImmediate":{"tracingFilter":{"simpleFilter":{"tracingLabelFilters":{"applicationName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"serviceName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"operationName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"spanFields":[{"key":"span.field.key","filterType":{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}}]},"latencyThresholdMs":1000}},"notificationPayloadFilter":["obj.field"]},"logsThreshold":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"rules":[{"condition":{"threshold":100,"timeWindow":{"logsTimeWindowSpecificValue":"LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"notificationPayloadFilter":["obj.field"],"evaluationDelayMs":60000},"logsRatioThreshold":{"numerator":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"numeratorAlias":"numerator_alias","denominator":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"denominatorAlias":"denominator_alias","rules":[{"condition":{"threshold":10,"timeWindow":{"logsRatioTimeWindowSpecificValue":"LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_RATIO_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"notificationPayloadFilter":["obj.field"],"groupByFor":"LOGS_RATIO_GROUP_BY_FOR_BOTH_OR_UNSPECIFIED","undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"ignoreInfinity":true,"evaluationDelayMs":60000},"logsTimeRelativeThreshold":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"threshold":0.1,"comparedTo":"LOGS_TIME_RELATIVE_COMPARED_TO_PREVIOUS_HOUR_OR_UNSPECIFIED","conditionType":"LOGS_TIME_RELATIVE_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"ignoreInfinity":true,"notificationPayloadFilter":["obj.field"],"undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"evaluationDelayMs":60000},"metricThreshold":{"metricFilter":{"promql":"avg_over_time(metric_name[5m]) > 10"},"rules":[{"condition":{"threshold":100,"forOverPct":80,"ofTheLast":{"metricTimeWindowSpecificValue":"METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED","metricTimeWindowDynamicDuration":"1h30m"},"conditionType":"METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"undetectedValuesManagement":{"triggerUndetectedValues":true,"autoRetireTimeframe":"AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED"},"missingValues":{"replaceWithZero":true,"minNonNullValuesPct":80},"evaluationDelayMs":60000},"tracingThreshold":{"tracingFilter":{"simpleFilter":{"tracingLabelFilters":{"applicationName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"serviceName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"operationName":[{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"spanFields":[{"key":"span.field.key","filterType":{"values":["value1","value2"],"operation":"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}}]},"latencyThresholdMs":1000}},"rules":[{"condition":{"spanAmount":100,"timeWindow":{"tracingTimeWindowValue":"TRACING_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"TRACING_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"}}],"notificationPayloadFilter":["obj.field"]},"flow":{"stages":[{"flowStagesGroups":{"groups":[{"alertDefs":[{"id":"123e4567-e89b-12d3-a456-426614174000","not":true}],"nextOp":"NEXT_OP_AND_OR_UNSPECIFIED","alertsOp":"ALERTS_OP_AND_OR_UNSPECIFIED"}]},"timeframeMs":"string","timeframeType":"TIMEFRAME_TYPE_UNSPECIFIED"}],"enforceSuppression":true},"logsAnomaly":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"minimumThreshold":10,"timeWindow":{"logsTimeWindowSpecificValue":"LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"},"conditionType":"LOGS_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"}}],"notificationPayloadFilter":["obj.field"],"evaluationDelayMs":60000,"anomalyAlertSettings":{"percentageOfDeviation":0.1}},"metricAnomaly":{"metricFilter":{"promql":"avg_over_time(metric_name[5m]) > 10"},"rules":[{"condition":{"threshold":10,"forOverPct":20,"ofTheLast":{"metricTimeWindowSpecificValue":"METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED","metricTimeWindowDynamicDuration":"1h30m"},"minNonNullValuesPct":10,"conditionType":"METRIC_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"}}],"evaluationDelayMs":60000,"anomalyAlertSettings":{"percentageOfDeviation":0.1}},"logsNewValue":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"keypathToTrack":"metadata.field","timeWindow":{"logsNewValueTimeWindowSpecificValue":"LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_12_OR_UNSPECIFIED"}}}],"notificationPayloadFilter":["obj.field"]},"logsUniqueCount":{"logsFilter":{"simpleFilter":{"luceneQuery":"string","labelFilters":{"applicationName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"subsystemName":[{"value":"my-app","operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"]}}},"rules":[{"condition":{"maxUniqueCount":100,"timeWindow":{"logsUniqueValueTimeWindowSpecificValue":"LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTE_1_OR_UNSPECIFIED"}}}],"notificationPayloadFilter":["obj.field"],"maxUniqueCountPerGroupByKey":100,"uniqueCountKeypath":"obj.field"},"sloThreshold":{"sloDefinition":{"sloId":"123e4567-e89b-12d3-a456-426614174000"},"errorBudget":{"rules":[{"condition":{"threshold":0.1},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}]},"burnRate":{"rules":[{"condition":{"threshold":0.1},"override":{"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"}}],"dual":{"timeDuration":{"duration":60,"unit":"DURATION_UNIT_UNSPECIFIED"}},"single":{"timeDuration":{"duration":60,"unit":"DURATION_UNIT_UNSPECIFIED"}}}},"groupByKeys":["key1","key2"],"incidentsSettings":{"minutes":30,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"notificationGroup":{"groupByKeys":["key1","key2"],"webhooks":[{"minutes":15,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","integration":{"integrationId":123,"recipients":{"emails":["mail@gmail.com"]}}}],"destinations":[{"connectorId":"connector_id_example","presetId":"preset_id_example","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","triggeredRoutingOverrides":{"configOverrides":{"outputSchemaId":"output_schema_id_example","messageConfigFields":[{"fieldName":"description","template":"template_example"}],"connectorConfigFields":[{"fieldName":"description","template":"template_example"}]}},"resolvedRouteOverrides":{"configOverrides":{"outputSchemaId":"output_schema_id_example","messageConfigFields":[{"fieldName":"description","template":"template_example"}],"connectorConfigFields":[{"fieldName":"description","template":"template_example"}]}}}],"router":{"id":"123e4567-e89b-12d3-a456-426614174000","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"}},"notificationGroupExcess":[{"groupByKeys":["key1","key2"],"webhooks":[{"minutes":15,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","integration":{"integrationId":123,"recipients":{"emails":["mail@gmail.com"]}}}],"destinations":[{"connectorId":"connector_id_example","presetId":"preset_id_example","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","triggeredRoutingOverrides":{"configOverrides":{"outputSchemaId":"output_schema_id_example","messageConfigFields":[{"fieldName":"description","template":"template_example"}],"connectorConfigFields":[{"fieldName":"description","template":"template_example"}]}},"resolvedRouteOverrides":{"configOverrides":{"outputSchemaId":"output_schema_id_example","messageConfigFields":[{"fieldName":"description","template":"template_example"}],"connectorConfigFields":[{"fieldName":"description","template":"template_example"}]}}}],"router":{"id":"123e4567-e89b-12d3-a456-426614174000","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"}}],"entityLabels":{"key":"value"},"phantomMode":false,"deleted":false},"id":"123e4567-e89b-12d3-a456-426614174000"}'
      description: No description available
  /v3/alert-defs/alert-version-id/{alertVersionId}:
    get:
      summary: Get alert definition by alert version ID
      operationId: AlertDefsService_GetAlertDefByVersionId
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3GetAlertDefByVersionIdResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: alertVersionId
          description: Alert version ID
          in: path
          required: true
          schema:
            type: string
            format: UUIDv4
      tags:
        - Alert definitions service
      x-coralogixPermissions:
        - alerts:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/alert-defs/alert-version-id/%7BalertVersionId%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v3/alert-defs/alert-version-id/%7BalertVersionId%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v3/alert-defs/alert-version-id/%7BalertVersionId%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v3/alert-defs/{id}:
    get:
      summary: Get alert definition by ID
      operationId: AlertDefsService_GetAlertDef
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3GetAlertDefResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          description: Alert definition ID
          in: path
          required: true
          schema:
            type: string
            format: UUIDv4
      tags:
        - Alert definitions service
      x-coralogixPermissions:
        - alerts:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/alert-defs/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v3/alert-defs/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v3/alert-defs/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      operationId: AlertDefsService_DeleteAlertDef
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3DeleteAlertDefResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          description: Alert definition ID
          in: path
          required: true
          schema:
            type: string
            format: UUIDv4
      tags:
        - Alert definitions service
      x-coralogixPermissions:
        - alerts:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/alert-defs/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v3/alert-defs/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v3/alert-defs/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v3/alert-defs/{id}:setActive:
    post:
      summary: Disable or enable an alert
      operationId: AlertDefsService_SetActive
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertsv3SetActiveResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          description: The alert definition ID
          in: path
          required: true
          schema:
            type: string
            format: UUIDv4
        - name: active
          description: Whether to enable or disable the alert definition
          in: query
          required: true
          schema:
            type: boolean
      tags:
        - Alert definitions service
      x-coralogixPermissions:
        - alerts:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/alert-defs/%7Bid%7D:setActive?active=SOME_BOOLEAN_VALUE';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v3/alert-defs/%7Bid%7D:setActive"


            querystring = {"active":"SOME_BOOLEAN_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://api.coralogix.com/mgmt/openapi/v3/alert-defs/%7Bid%7D:setActive?active=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v3/alert-event-stats:
    get:
      summary: Get alert events statistics
      operationId: AlertEventService_GetAlertEventsStats
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3GetAlertEventStatsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: ids
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      tags:
        - Alert events service
      x-coralogixPermissions:
        - alerts:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/alert-event-stats?ids=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v3/alert-event-stats"


            querystring = {"ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v3/alert-event-stats?ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v3/alert-event/{id}:
    get:
      summary: Get alert event by ID
      operationId: AlertEventService_GetAlertEvent
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3GetAlertEventResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          description: Alert event ID
          in: path
          required: true
          schema:
            type: string
        - name: pagination.pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: pagination.pageToken
          in: query
          required: false
          schema:
            type: string
      tags:
        - Alert events service
      x-coralogixPermissions:
        - alerts:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/alert-event/%7Bid%7D?pagination.pageSize=SOME_INTEGER_VALUE&pagination.pageToken=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v3/alert-event/%7Bid%7D"


            querystring =
            {"pagination.pageSize":"SOME_INTEGER_VALUE","pagination.pageToken":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v3/alert-event/%7Bid%7D?pagination.pageSize=SOME_INTEGER_VALUE&pagination.pageToken=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v3/alerts/download:
    get:
      summary: Download alerts
      description: >-
        Download a list of all accessible alert definitions in base64-encoded
        byte format.


        Requires the following permissions:

        - `alerts:ReadConfig`
      operationId: AlertDefsService_DownloadAlerts
      responses:
        '200':
          description: A successful response.(streaming responses)
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/v3DownloadAlertsResponse'
                  error:
                    $ref: '#/components/schemas/rpcStatus'
                title: Stream result of v3DownloadAlertsResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - Alert definitions service
      x-coralogixPermissions:
        - alerts:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/alerts/download';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v3/alerts/download"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v3/alerts/download \
              --header 'Authorization: Bearer <API_KEY>'
  /v3/api_keys:
    post:
      summary: Create API Key
      operationId: ApiKeysService_CreateApiKey
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3CreateApiKeyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v3CreateApiKeyRequest'
        description: This data structure is used to create an API key.
        required: true
      tags:
        - API Keys Service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v3/api_keys';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"my_api_key","owner":{"userId":"string","teamId":0,"organisationId":"string"},"keyPermissions":{"presets":["my_preset"],"permissions":["read_logs"]},"hashed":true}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v3/api_keys"


            payload = {
                "name": "my_api_key",
                "owner": {
                    "userId": "string",
                    "teamId": 0,
                    "organisationId": "string"
                },
                "keyPermissions": {
                    "presets": ["my_preset"],
                    "permissions": ["read_logs"]
                },
                "hashed": True
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v3/api_keys \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"my_api_key","owner":{"userId":"string","teamId":0,"organisationId":"string"},"keyPermissions":{"presets":["my_preset"],"permissions":["read_logs"]},"hashed":true}'
      description: No description available
  /v3/api_keys/send_data:
    get:
      summary: Get "Send Data" API Keys
      operationId: ApiKeysService_GetSendDataApiKeys
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3GetSendDataApiKeysResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      tags:
        - API Keys Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/api_keys/send_data';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v3/api_keys/send_data"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v3/api_keys/send_data \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v3/api_keys/{keyId}:
    get:
      summary: Get API Key
      operationId: ApiKeysService_GetApiKey
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3GetApiKeyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: string
      tags:
        - API Keys Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/api_keys/%7BkeyId%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v3/api_keys/%7BkeyId%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v3/api_keys/%7BkeyId%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      summary: Delete API Key
      operationId: ApiKeysService_DeleteApiKey
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3DeleteApiKeyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: string
      tags:
        - API Keys Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/api_keys/%7BkeyId%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v3/api_keys/%7BkeyId%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v3/api_keys/%7BkeyId%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      summary: Update API Key
      operationId: ApiKeysService_UpdateApiKey
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3UpdateApiKeyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeysServiceUpdateApiKeyBody'
        required: true
      tags:
        - API Keys Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/api_keys/%7BkeyId%7D';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"newName":"my_new_name","isActive":true,"presets":{"presets":["string"]},"permissions":{"permissions":["string"]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v3/api_keys/%7BkeyId%7D"


            payload = {
                "newName": "my_new_name",
                "isActive": True,
                "presets": {"presets": ["string"]},
                "permissions": {"permissions": ["string"]}
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v3/api_keys/%7BkeyId%7D \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"newName":"my_new_name","isActive":true,"presets":{"presets":["string"]},"permissions":{"permissions":["string"]}}'
      description: No description available
  /v3/events:
    get:
      summary: List Events
      operationId: EventsService_ListEvents
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3ListEventsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: filter.timestamp.from
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: filter.timestamp.to
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: filter.cxEventTypes
          in: query
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: filter.cxEventKeys
          in: query
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: filter.cxEventMetadataFilters.operator
          in: query
          required: false
          schema:
            type: string
            enum:
              - FILTER_OPERATOR_AND_OR_UNSPECIFIED
              - FILTER_OPERATOR_OR
            default: FILTER_OPERATOR_AND_OR_UNSPECIFIED
        - name: pagination.pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: pagination.pageToken
          in: query
          required: false
          schema:
            type: string
      tags:
        - Events Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/events?filter.timestamp.from=SOME_STRING_VALUE&filter.timestamp.to=SOME_STRING_VALUE&filter.cxEventTypes=SOME_ARRAY_VALUE&filter.cxEventKeys=SOME_ARRAY_VALUE&filter.cxEventMetadataFilters.operator=SOME_STRING_VALUE&pagination.pageSize=SOME_INTEGER_VALUE&pagination.pageToken=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v3/events"


            querystring =
            {"filter.timestamp.from":"SOME_STRING_VALUE","filter.timestamp.to":"SOME_STRING_VALUE","filter.cxEventTypes":"SOME_ARRAY_VALUE","filter.cxEventKeys":"SOME_ARRAY_VALUE","filter.cxEventMetadataFilters.operator":"SOME_STRING_VALUE","pagination.pageSize":"SOME_INTEGER_VALUE","pagination.pageToken":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v3/events?filter.timestamp.from=SOME_STRING_VALUE&filter.timestamp.to=SOME_STRING_VALUE&filter.cxEventTypes=SOME_ARRAY_VALUE&filter.cxEventKeys=SOME_ARRAY_VALUE&filter.cxEventMetadataFilters.operator=SOME_STRING_VALUE&pagination.pageSize=SOME_INTEGER_VALUE&pagination.pageToken=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v3/events/events:batchGet:
    get:
      summary: Batch Get Event
      operationId: EventsService_BatchGetEvent
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3BatchGetEventResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: ids
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: pagination.pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: pagination.pageToken
          in: query
          required: false
          schema:
            type: string
        - name: filter.timestamp.from
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: filter.timestamp.to
          in: query
          required: true
          schema:
            type: string
            format: date-time
      tags:
        - Events Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/events/events:batchGet?ids=SOME_ARRAY_VALUE&pagination.pageSize=SOME_INTEGER_VALUE&pagination.pageToken=SOME_STRING_VALUE&filter.timestamp.from=SOME_STRING_VALUE&filter.timestamp.to=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v3/events/events:batchGet"


            querystring =
            {"ids":"SOME_ARRAY_VALUE","pagination.pageSize":"SOME_INTEGER_VALUE","pagination.pageToken":"SOME_STRING_VALUE","filter.timestamp.from":"SOME_STRING_VALUE","filter.timestamp.to":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v3/events/events:batchGet?ids=SOME_ARRAY_VALUE&pagination.pageSize=SOME_INTEGER_VALUE&pagination.pageToken=SOME_STRING_VALUE&filter.timestamp.from=SOME_STRING_VALUE&filter.timestamp.to=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v3/events/{id}:
    get:
      summary: Get Event
      operationId: EventsService_GetEvent
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3GetEventResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: pagination.pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: pagination.pageToken
          in: query
          required: false
          schema:
            type: string
      tags:
        - Events Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/events/%7Bid%7D?pagination.pageSize=SOME_INTEGER_VALUE&pagination.pageToken=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v3/events/%7Bid%7D"


            querystring =
            {"pagination.pageSize":"SOME_INTEGER_VALUE","pagination.pageToken":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v3/events/%7Bid%7D?pagination.pageSize=SOME_INTEGER_VALUE&pagination.pageToken=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v3/events:count:
    get:
      summary: List Events Count
      operationId: EventsService_ListEventsCount
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3ListEventsCountResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: filter.timestamp.from
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: filter.timestamp.to
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: filter.cxEventTypes
          in: query
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: filter.cxEventKeys
          in: query
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: filter.cxEventMetadataFilters.operator
          in: query
          required: false
          schema:
            type: string
            enum:
              - FILTER_OPERATOR_AND_OR_UNSPECIFIED
              - FILTER_OPERATOR_OR
            default: FILTER_OPERATOR_AND_OR_UNSPECIFIED
      tags:
        - Events Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/events:count?filter.timestamp.from=SOME_STRING_VALUE&filter.timestamp.to=SOME_STRING_VALUE&filter.cxEventTypes=SOME_ARRAY_VALUE&filter.cxEventKeys=SOME_ARRAY_VALUE&filter.cxEventMetadataFilters.operator=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v3/events:count"


            querystring =
            {"filter.timestamp.from":"SOME_STRING_VALUE","filter.timestamp.to":"SOME_STRING_VALUE","filter.cxEventTypes":"SOME_ARRAY_VALUE","filter.cxEventKeys":"SOME_ARRAY_VALUE","filter.cxEventMetadataFilters.operator":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v3/events:count?filter.timestamp.from=SOME_STRING_VALUE&filter.timestamp.to=SOME_STRING_VALUE&filter.cxEventTypes=SOME_ARRAY_VALUE&filter.cxEventKeys=SOME_ARRAY_VALUE&filter.cxEventMetadataFilters.operator=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v3/events:statistics:
    get:
      summary: Get Events Statistics
      operationId: EventsService_GetEventsStatistics
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3GetEventsStatisticsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema: {}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: filter.timestamp.from
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: filter.timestamp.to
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: filter.cxEventTypes
          in: query
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: filter.cxEventKeys
          in: query
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: filter.cxEventMetadataFilters.operator
          in: query
          required: false
          schema:
            type: string
            enum:
              - FILTER_OPERATOR_AND_OR_UNSPECIFIED
              - FILTER_OPERATOR_OR
            default: FILTER_OPERATOR_AND_OR_UNSPECIFIED
      tags:
        - Events Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/events:statistics?filter.timestamp.from=SOME_STRING_VALUE&filter.timestamp.to=SOME_STRING_VALUE&filter.cxEventTypes=SOME_ARRAY_VALUE&filter.cxEventKeys=SOME_ARRAY_VALUE&filter.cxEventMetadataFilters.operator=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v3/events:statistics"


            querystring =
            {"filter.timestamp.from":"SOME_STRING_VALUE","filter.timestamp.to":"SOME_STRING_VALUE","filter.cxEventTypes":"SOME_ARRAY_VALUE","filter.cxEventKeys":"SOME_ARRAY_VALUE","filter.cxEventMetadataFilters.operator":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v3/events:statistics?filter.timestamp.from=SOME_STRING_VALUE&filter.timestamp.to=SOME_STRING_VALUE&filter.cxEventTypes=SOME_ARRAY_VALUE&filter.cxEventKeys=SOME_ARRAY_VALUE&filter.cxEventMetadataFilters.operator=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
components:
  requestBodies:
    v1Connector: *ref_1
    v1GlobalRouter: *ref_3
    presetsv1Preset: *ref_2
    v1CreateRuleGroupRequest: *ref_0
    v1Slo: *ref_4
  schemas:
    AggregationAggType:
      type: string
      enum:
        - AGG_TYPE_UNSPECIFIED
        - AGG_TYPE_MIN
        - AGG_TYPE_MAX
        - AGG_TYPE_COUNT
        - AGG_TYPE_AVG
        - AGG_TYPE_SUM
        - AGG_TYPE_HISTOGRAM
        - AGG_TYPE_SAMPLES
      default: AGG_TYPE_UNSPECIFIED
      title: Enum - Aggregation type
    AnnotationLogsSource:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/dashboardsv1commonLuceneQuery'
        strategy:
          $ref: '#/components/schemas/AnnotationLogsSourceStrategy'
        messageTemplate:
          type: string
        labelFields:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
    AnnotationLogsSourceStrategy:
      type: object
      properties:
        instant:
          $ref: '#/components/schemas/AnnotationLogsSourceStrategyInstant'
        range:
          $ref: '#/components/schemas/AnnotationLogsSourceStrategyRange'
        duration:
          $ref: '#/components/schemas/AnnotationLogsSourceStrategyDuration'
    AnnotationLogsSourceStrategyDuration:
      type: object
      properties:
        startTimestampField:
          $ref: '#/components/schemas/commonObservationField'
        durationField:
          $ref: '#/components/schemas/commonObservationField'
    AnnotationLogsSourceStrategyInstant:
      type: object
      properties:
        timestampField:
          $ref: '#/components/schemas/commonObservationField'
    AnnotationLogsSourceStrategyRange:
      type: object
      properties:
        startTimestampField:
          $ref: '#/components/schemas/commonObservationField'
        endTimestampField:
          $ref: '#/components/schemas/commonObservationField'
    AnnotationMetricsSource:
      type: object
      properties:
        promqlQuery:
          $ref: '#/components/schemas/dashboardsv1commonPromQlQuery'
        strategy:
          $ref: '#/components/schemas/AnnotationMetricsSourceStrategy'
        messageTemplate:
          type: string
        labels:
          type: array
          items:
            type: string
    AnnotationMetricsSourceStrategy:
      type: object
      properties:
        startTimeMetric:
          $ref: '#/components/schemas/MetricsSourceStartTimeMetric'
      title: A strategy for turning metrics data into annotations
    AnnotationSpansSource:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/dashboardsv1commonLuceneQuery'
        strategy:
          $ref: '#/components/schemas/AnnotationSpansSourceStrategy'
        messageTemplate:
          type: string
        labelFields:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
    AnnotationSpansSourceStrategy:
      type: object
      properties:
        instant:
          $ref: '#/components/schemas/AnnotationSpansSourceStrategyInstant'
        range:
          $ref: '#/components/schemas/AnnotationSpansSourceStrategyRange'
        duration:
          $ref: '#/components/schemas/AnnotationSpansSourceStrategyDuration'
    AnnotationSpansSourceStrategyDuration:
      type: object
      properties:
        startTimestampField:
          $ref: '#/components/schemas/commonObservationField'
        durationField:
          $ref: '#/components/schemas/commonObservationField'
    AnnotationSpansSourceStrategyInstant:
      type: object
      properties:
        timestampField:
          $ref: '#/components/schemas/commonObservationField'
    AnnotationSpansSourceStrategyRange:
      type: object
      properties:
        startTimestampField:
          $ref: '#/components/schemas/commonObservationField'
        endTimestampField:
          $ref: '#/components/schemas/commonObservationField'
    ApiKeysServiceUpdateApiKeyBody:
      type: object
      properties:
        newName:
          type: string
          example: my_new_name
        isActive:
          type: boolean
          example: true
        presets:
          $ref: '#/components/schemas/UpdateApiKeyRequestPresets'
        permissions:
          $ref: '#/components/schemas/v3UpdateApiKeyRequestPermissions'
      description: This data structure is used to update an API key.
      title: Update Api Key Request
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
    BarChartXAxis:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/XAxisXAxisByValue'
        time:
          $ref: '#/components/schemas/XAxisXAxisByTime'
    ColorsByColorsByAggregation:
      type: object
    ColorsByColorsByGroupBy:
      type: object
    ColorsByColorsByStack:
      type: object
    CommandInformationLanguage:
      type: string
      enum:
        - UNKNOWN
        - BASH
        - JAVASCRIPT
      default: UNKNOWN
    CommandInformationLink:
      type: object
      properties:
        key:
          type: string
        text:
          type: string
        url:
          type: string
      title: Link
    DashboardAutoRefreshFiveMinutes:
      type: object
    DashboardAutoRefreshOff:
      type: object
    DashboardAutoRefreshTwoMinutes:
      type: object
    DashboardsServiceAssignDashboardFolderBody:
      type: object
      properties:
        requestId:
          type: string
        folderId:
          type: string
          title: could be null to assign the dashboard to root
      title: Assign dashboard to folder request data structure
      externalDocs:
        description: Find out more about Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    DashboardsServicePinDashboardBody:
      type: object
      properties:
        requestId:
          type: string
      title: Pin dashboard request data structure
      externalDocs:
        description: Find out more about Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    DashboardsServiceReplaceDefaultDashboardBody:
      type: object
      properties:
        requestId:
          type: string
      title: Replace default dashboard request data structure
      externalDocs:
        description: Find out more about Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    DashboardsServiceUnpinDashboardBody:
      type: object
      properties:
        requestId:
          type: string
      title: Unpin dashboard request data structure
      externalDocs:
        description: Find out more about Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    DataTableColumn:
      type: object
      properties:
        field:
          type: string
        width:
          type: integer
          format: int32
    DataTableLogsQueryAggregation:
      type: object
      properties:
        id:
          type: string
          title: Aggregation unique identifier
        name:
          type: string
        isVisible:
          type: boolean
        aggregation:
          $ref: '#/components/schemas/commonLogsAggregation'
    DataTableLogsQueryGrouping:
      type: object
      properties:
        groupBy:
          type: array
          items:
            type: string
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/DataTableLogsQueryAggregation'
        groupBys:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
    DataTableSpansQueryAggregation:
      type: object
      properties:
        id:
          type: string
          title: Aggregation unique identifier
        name:
          type: string
        isVisible:
          type: boolean
        aggregation:
          $ref: '#/components/schemas/commonSpansAggregation'
    DataTableSpansQueryGrouping:
      type: object
      properties:
        groupBy:
          type: array
          items:
            $ref: '#/components/schemas/commonSpanField'
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/DataTableSpansQueryAggregation'
        groupBys:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
    DefaultIntegrationDetailsRegisteredInstance:
      type: object
      properties:
        id:
          type: string
        definitionVersion:
          type: string
        lastUpdated:
          type: string
          format: date-time
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/v1Parameter'
        integrationStatus:
          $ref: '#/components/schemas/v1IntegrationStatus'
        empty:
          $ref: '#/components/schemas/v1NoDeployment'
        cloudformation:
          $ref: '#/components/schemas/v1CloudFormationStack'
        arm:
          $ref: '#/components/schemas/v1ARMStack'
        isTesting:
          type: boolean
      title: Registered instance
    DimensionAggregationDimensionAggregationType:
      type: string
      enum:
        - DIMENSION_AGGREGATION_TYPE_UNSPECIFIED
        - DIMENSION_AGGREGATION_TYPE_UNIQUE_COUNT
        - DIMENSION_AGGREGATION_TYPE_ERROR_COUNT
      default: DIMENSION_AGGREGATION_TYPE_UNSPECIFIED
    DimensionAggregationDimensionField:
      type: string
      enum:
        - DIMENSION_FIELD_UNSPECIFIED
        - DIMENSION_FIELD_TRACE_ID
      default: DIMENSION_FIELD_UNSPECIFIED
    E2MAggSamplesSampleType:
      type: string
      enum:
        - SAMPLE_TYPE_UNSPECIFIED
        - SAMPLE_TYPE_MIN
        - SAMPLE_TYPE_MAX
      default: SAMPLE_TYPE_UNSPECIFIED
      title: Enum of aggregate type
    ExtensionItemPermissionResource:
      type: string
      enum:
        - UNKNOWN
        - ACTION
        - ALERT
        - CUSTOM_ENRICHMENT
        - GEO_ENRICHMENT
        - SECURITY_ENRICHMENT
        - RESOURCE_CLOUD_METADATA_ENRICHMENT
        - GRAFANA_DASHBOARD
        - KIBANA_DASHBOARD
        - PARSING_RULE
        - SAVED_VIEW
        - CX_CUSTOM_DASHBOARD
        - METRICS_RULE_GROUP
        - SPAN_EVENTS_TO_METRICS
        - LOGS_EVENTS_TO_METRICS
      default: UNKNOWN
    ExtractTimestampParametersFormatStandard:
      type: string
      enum:
        - FORMAT_STANDARD_STRFTIME_OR_UNSPECIFIED
        - FORMAT_STANDARD_JAVASDF
        - FORMAT_STANDARD_GOLANG
        - FORMAT_STANDARD_SECONDSTS
        - FORMAT_STANDARD_MILLITS
        - FORMAT_STANDARD_MICROTS
        - FORMAT_STANDARD_NANOTS
      default: FORMAT_STANDARD_STRFTIME_OR_UNSPECIFIED
    FilterEqualsSelection:
      type: object
      properties:
        all:
          $ref: '#/components/schemas/FilterEqualsSelectionAllSelection'
        list:
          $ref: '#/components/schemas/FilterEqualsSelectionListSelection'
      description: This data structure defines the values for the equality comparison.
      title: Selection
    FilterEqualsSelectionAllSelection:
      type: object
      description: This data structure indicates that all values are selected.
      title: AllSelection
    FilterEqualsSelectionListSelection:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
          description: A list of selected values.
      description: >-
        This data structure represents a selection from a list of specific
        values.
      title: ListSelection
    FilterMetricsFilter:
      type: object
      properties:
        metric:
          type: string
          description: The name of the metric to which the filter is applied.
        label:
          type: string
          description: The label associated with the metric.
        operator:
          $ref: '#/components/schemas/astFilterOperator'
      description: This data structure represents the filter criteria for metrics.
      title: MetricsFilter
    FilterNotEqualsSelection:
      type: object
      properties:
        list:
          $ref: '#/components/schemas/FilterNotEqualsSelectionListSelection'
      description: This data structure defines the values for the non-equality comparison.
      title: Selection
    FilterNotEqualsSelectionListSelection:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
          description: A list of values for the selection.
      description: >-
        This data structure represents a selection from a list of specific
        values.
      title: ListSelection
    FilterSpansFilter:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/commonSpanField'
        operator:
          $ref: '#/components/schemas/astFilterOperator'
        observationField:
          $ref: '#/components/schemas/commonObservationField'
      description: This data structure represents the filter criteria for spans.
      title: SpansFilter
    GenericWebhookConfigMethodType:
      type: string
      enum:
        - UNKNOWN
        - GET
        - POST
        - PUT
      default: UNKNOWN
    GetAllExtensionsResponseRevisionSummary:
      type: object
      properties:
        itemCounts:
          $ref: '#/components/schemas/v1ItemCounts'
        isNew:
          type: boolean
          default: 'false'
      title: Revision summary
      required:
        - itemCounts
    GetCompanyUsageLimitsResponseCounts:
      type: object
      properties:
        parsingThemes:
          type: integer
          format: int32
        groups:
          type: integer
          format: int32
        rules:
          type: integer
          format: int32
    GetConfigurationResponseIDPDetails:
      type: object
      properties:
        name:
          type: string
        icon:
          type: string
    GetDeployedExtensionsResponseDeployedExtension:
      type: object
      properties:
        id:
          type: string
        version:
          type: string
        applications:
          type: array
          items:
            type: string
            default: '[]'
        subsystems:
          type: array
          items:
            type: string
            default: '[]'
        itemIds:
          type: array
          items:
            type: string
            default: '[]'
        summary:
          $ref: >-
            #/components/schemas/GetDeployedExtensionsResponseDeployedExtensionSummary
      title: Deployed extension
      required:
        - id
        - version
        - summary
        - itemIds
    GetDeployedExtensionsResponseDeployedExtensionSummary:
      type: object
      properties:
        deployedItemCounts:
          $ref: '#/components/schemas/v1ItemCounts'
      title: Deployed extension summary
      required:
        - deployedItemCounts
    GetGroupUsersResponseNextPageToken:
      type: object
      properties:
        nextPageToken:
          type: string
      description: >-
        This data structure represents the information associated with an API
        key.
      title: NextPageToken
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    GetGroupUsersResponseNoMorePages:
      type: object
      description: >-
        This data structure represents the information associated with an API
        key.
      title: NoMorePages
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    GetLimitsResponseLimitUsage:
      type: object
      properties:
        limit:
          type: integer
          format: int32
          title: the limit number of e2m creation
        used:
          type: integer
          format: int32
          title: how many e2m's were created
    GetTemplateRequestCommonARMParams:
      type: object
      properties:
        logsUrl:
          type: string
        apiKey:
          type: string
        cgxDomain:
          type: string
      title: Common ARM integration parameters
      required:
        - logsUrl
        - apiKey
        - cgxDomain
    HorizontalBarChartYAxisViewBy:
      type: object
      properties:
        category:
          $ref: '#/components/schemas/YAxisViewByYAxisViewByCategory'
        value:
          $ref: '#/components/schemas/YAxisViewByYAxisViewByValue'
    IbmEventNotificationsConfigEndpointType:
      type: string
      enum:
        - ENDPOINT_TYPE_DEFAULT_OR_PUBLIC
        - ENDPOINT_TYPE_PRIVATE
      default: ENDPOINT_TYPE_DEFAULT_OR_PUBLIC
    IntegrationDetailsDefaultIntegrationDetails:
      type: object
      properties:
        registered:
          type: array
          items:
            $ref: '#/components/schemas/DefaultIntegrationDetailsRegisteredInstance'
      title: Default integration details
    IntegrationRevisionAzureArmTemplate:
      type: object
      properties:
        templateUrl:
          type: string
      description: This data structure represents an azure ARM template.
      title: Azure ARM template
    IntegrationRevisionCloudFormationTemplate:
      type: object
      properties:
        templateUrl:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        postInstallationSteps:
          type: object
          additionalProperties:
            type: string
      title: CloudFormation template
    IntegrationRevisionCommandInformation:
      type: object
      properties:
        name:
          type: string
        command:
          type: string
        description:
          type: string
        tooltipText:
          type: string
        language:
          $ref: '#/components/schemas/CommandInformationLanguage'
        links:
          type: array
          items:
            $ref: '#/components/schemas/CommandInformationLink'
      title: Command information
    IntegrationRevisionConfigurationBlock:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        description:
          type: string
      title: Configuration block
    IntegrationRevisionFieldCondition:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/IntegrationRevisionFieldConditionConditionType'
        values:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationRevisionFieldConditionFieldValue'
      title: Field condition
      required:
        - type
    IntegrationRevisionFieldConditionConditionType:
      type: string
      enum:
        - UNKNOWN
        - OR
        - AND
      default: UNKNOWN
    IntegrationRevisionFieldConditionFieldValue:
      type: object
      properties:
        fieldName:
          type: string
        valuePattern:
          type: string
      title: Field value
    IntegrationRevisionFieldInformation:
      type: object
      properties:
        single:
          $ref: '#/components/schemas/IntegrationRevisionSingleValue'
        multiText:
          $ref: '#/components/schemas/IntegrationRevisionListTextValue'
        multipleSelection:
          $ref: '#/components/schemas/IntegrationRevisionMultipleSelectionValue'
        singleBoolean:
          $ref: '#/components/schemas/IntegrationRevisionSingleBooleanValue'
        selection:
          $ref: '#/components/schemas/IntegrationRevisionSelectionValue'
        singleNumber:
          $ref: '#/components/schemas/IntegrationRevisionSingleNumericValue'
        type:
          $ref: '#/components/schemas/IntegrationRevisionInputType'
        name:
          type: string
        tooltip:
          type: string
        templateParamName:
          type: string
        placeholder:
          type: string
        required:
          type: boolean
        predefined:
          type: boolean
        visible:
          type: boolean
        readonly:
          type: boolean
        applicableIf:
          $ref: '#/components/schemas/IntegrationRevisionFieldCondition'
        groupId:
          type: string
        upgradeNotice:
          type: string
        allowedPattern:
          type: string
        documentationReference:
          type: string
      title: Field information
      required:
        - type
    IntegrationRevisionHelmChart:
      type: object
      properties:
        template:
          type: string
        commands:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationRevisionCommandInformation'
        guide:
          $ref: '#/components/schemas/IntegrationRevisionIntegrationGuide'
      description: This data structure represents a Helm chart.
      title: Helm chart
    IntegrationRevisionInputType:
      type: string
      enum:
        - API_KEY
        - TEXT
        - LIST_TEXT
        - MULTIPLE_SELECTION
        - BOOLEAN
        - SELECT
        - JSON
        - NUMBER
        - SENSITIVE_DATA
        - JSON_OBJECT_ARRAY
      default: API_KEY
    IntegrationRevisionIntegrationGuide:
      type: object
      properties:
        introduction:
          type: string
        installationRequirements:
          type: string
      title: Integration guide
    IntegrationRevisionListTextValue:
      type: object
      properties:
        options:
          type: array
          items:
            type: string
        defaultValues:
          type: array
          items:
            type: string
      title: List text value
    IntegrationRevisionManagedService:
      type: object
      description: This data structure represents a managed service.
      title: Managed service
    IntegrationRevisionMultipleSelectionValue:
      type: object
      properties:
        options:
          type: array
          items:
            type: string
      title: Multiple selection value
    IntegrationRevisionRum:
      type: object
      properties:
        browserSdkCommands:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationRevisionCommandInformation'
        sourceMapCommands:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationRevisionCommandInformation'
      description: This data structure represents a RUM integration.
      title: RUM
    IntegrationRevisionSelectionValue:
      type: object
      properties:
        options:
          type: array
          items:
            type: string
        defaultValue:
          type: string
      title: Selection value
    IntegrationRevisionSingleBooleanValue:
      type: object
      properties:
        defaultValue:
          type: boolean
      title: Single boolean value
    IntegrationRevisionSingleNumericValue:
      type: object
      properties:
        defaultValue:
          type: number
          format: double
      title: Single numeric value
    IntegrationRevisionSingleValue:
      type: object
      properties:
        defaultValue:
          type: string
      title: Single value
    IntegrationRevisionTerraform:
      type: object
      properties:
        configurationBlocks:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationRevisionConfigurationBlock'
      description: This data structure represents a Terraform integration.
      title: Terraform
    IntegrationTypeAzureArm:
      type: object
      description: This data structure represents an Azure ARM integration.
      title: Azure ARM
    IntegrationTypeCloudformation:
      type: object
      description: This data structure represents a CloudFormation integration.
      title: CloudFormation
    IntegrationTypeContextualData:
      type: object
      description: This data structure represents a contextual data integration.
      title: Contextual data
    IntegrationTypeGenericWebhook:
      type: object
      description: This data structure represents a generic webhook integration.
      title: Generic webhook
    IntegrationTypeManaged:
      type: object
      properties:
        variant:
          $ref: '#/components/schemas/ManagedVariant'
      description: This data structure represents a managed integration.
      title: Managed
      required:
        - variant
    IntegrationTypePushBasedContextualData:
      type: object
      description: This data structure represents a push based contextual data integration.
      title: Push based contextual data
    IntegrationTypeUntracked:
      type: object
      description: This data structure represents an untracked integration.
      title: Untracked
    JsonExtractParametersDestinationField:
      type: string
      enum:
        - DESTINATION_FIELD_CATEGORY_OR_UNSPECIFIED
        - DESTINATION_FIELD_CLASSNAME
        - DESTINATION_FIELD_METHODNAME
        - DESTINATION_FIELD_THREADID
        - DESTINATION_FIELD_SEVERITY
        - DESTINATION_FIELD_TEXT
      default: DESTINATION_FIELD_CATEGORY_OR_UNSPECIFIED
    LegendLegendColumn:
      type: string
      enum:
        - LEGEND_COLUMN_UNSPECIFIED
        - LEGEND_COLUMN_MIN
        - LEGEND_COLUMN_MAX
        - LEGEND_COLUMN_SUM
        - LEGEND_COLUMN_AVG
        - LEGEND_COLUMN_LAST
        - LEGEND_COLUMN_NAME
      default: LEGEND_COLUMN_UNSPECIFIED
    LegendLegendPlacement:
      type: string
      enum:
        - LEGEND_PLACEMENT_UNSPECIFIED
        - LEGEND_PLACEMENT_AUTO
        - LEGEND_PLACEMENT_BOTTOM
        - LEGEND_PLACEMENT_SIDE
        - LEGEND_PLACEMENT_HIDDEN
      default: LEGEND_PLACEMENT_UNSPECIFIED
    LineChartQueryDefinition:
      type: object
      properties:
        id:
          type: string
          title: QueryDefinition unique identifier
        query:
          $ref: '#/components/schemas/widgetsLineChartQuery'
        seriesNameTemplate:
          type: string
        seriesCountLimit:
          type: string
          format: int64
        unit:
          $ref: '#/components/schemas/widgetscommonUnit'
        scaleType:
          $ref: '#/components/schemas/commonScaleType'
        name:
          type: string
        isVisible:
          type: boolean
        colorScheme:
          type: string
        resolution:
          $ref: '#/components/schemas/widgetsLineChartResolution'
        dataModeType:
          $ref: '#/components/schemas/commonDataModeType'
        customUnit:
          type: string
        decimal:
          type: integer
          format: int32
        customLinks:
          type: array
          items:
            $ref: '#/components/schemas/commonCustomLink'
    LineChartStackedLine:
      type: string
      enum:
        - STACKED_LINE_UNSPECIFIED
        - STACKED_LINE_ABSOLUTE
        - STACKED_LINE_RELATIVE
      default: STACKED_LINE_UNSPECIFIED
    LineChartTooltip:
      type: object
      properties:
        showLabels:
          type: boolean
        type:
          $ref: '#/components/schemas/LineChartTooltipType'
    LineChartTooltipType:
      type: string
      enum:
        - TOOLTIP_TYPE_UNSPECIFIED
        - TOOLTIP_TYPE_ALL
        - TOOLTIP_TYPE_SINGLE
      default: TOOLTIP_TYPE_UNSPECIFIED
    ListIbmEventNotificationsInstancesResponseEventNotificationsInstance:
      type: object
      properties:
        instanceId:
          type: string
          example: 5a8b249b-3915-49e7-ad43-030f585d84c5
        regionId:
          type: string
          example: eu-gb
        name:
          type: string
          example: example-name
        crn:
          type: string
          example: >-
            crn:v1:staging:public:logs:eu-gb:a/436fa6f7760f46eba99e22f099c33cb8:5a8b249b-3915-49e7-ad43-030f585d84c5::
          title: Cloud Resource Name
        isUsed:
          type: boolean
          example: true
      title: Event notifications instance
      required:
        - instanceId
        - regionId
        - name
        - crn
    ListOutgoingWebhookTypesResponseOutgoingWebhookType:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/v1WebhookType'
        label:
          type: string
          example: example_label
        count:
          type: integer
          format: int64
          example: 3
      title: Outgoing webhook type
      required:
        - label
        - count
        - type
    LogsAggregationAverage:
      type: object
      properties:
        field:
          type: string
        observationField:
          $ref: '#/components/schemas/commonObservationField'
    LogsAggregationCount:
      type: object
    LogsAggregationCountDistinct:
      type: object
      properties:
        field:
          type: string
        observationField:
          $ref: '#/components/schemas/commonObservationField'
    LogsAggregationMax:
      type: object
      properties:
        field:
          type: string
        observationField:
          $ref: '#/components/schemas/commonObservationField'
    LogsAggregationMin:
      type: object
      properties:
        field:
          type: string
        observationField:
          $ref: '#/components/schemas/commonObservationField'
    LogsAggregationPercentile:
      type: object
      properties:
        field:
          type: string
        percent:
          type: number
          format: double
          title: A value in range (0, 100]
        observationField:
          $ref: '#/components/schemas/commonObservationField'
    LogsAggregationSum:
      type: object
      properties:
        field:
          type: string
        observationField:
          $ref: '#/components/schemas/commonObservationField'
    ManagedVariant:
      type: string
      enum:
        - DEFAULT
        - GCP
        - OAUTH
        - CUSTOM
      default: DEFAULT
    MetricAggregationMetricAggregationType:
      type: string
      enum:
        - METRIC_AGGREGATION_TYPE_UNSPECIFIED
        - METRIC_AGGREGATION_TYPE_MIN
        - METRIC_AGGREGATION_TYPE_MAX
        - METRIC_AGGREGATION_TYPE_AVERAGE
        - METRIC_AGGREGATION_TYPE_SUM
        - METRIC_AGGREGATION_TYPE_PERCENTILE_99
        - METRIC_AGGREGATION_TYPE_PERCENTILE_95
        - METRIC_AGGREGATION_TYPE_PERCENTILE_50
      default: METRIC_AGGREGATION_TYPE_UNSPECIFIED
    MetricsQueryMetricsLabelFilter:
      type: object
      properties:
        metric:
          $ref: '#/components/schemas/MetricsQueryStringOrVariable'
        label:
          $ref: '#/components/schemas/MetricsQueryStringOrVariable'
        operator:
          $ref: '#/components/schemas/QueryMetricsQueryOperator'
    MetricsQueryStringOrVariable:
      type: object
      properties:
        stringValue:
          type: string
        variableName:
          type: string
    MetricsQueryTypeLabelValue:
      type: object
      properties:
        metricName:
          $ref: '#/components/schemas/MetricsQueryStringOrVariable'
        labelName:
          $ref: '#/components/schemas/MetricsQueryStringOrVariable'
        labelFilters:
          type: array
          items:
            $ref: '#/components/schemas/MetricsQueryMetricsLabelFilter'
    MetricsSourceStartTimeMetric:
      type: object
    MultiSelectConstantListSource:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
    MultiSelectLogsPathSource:
      type: object
      properties:
        value:
          type: string
        observationField:
          $ref: '#/components/schemas/commonObservationField'
    MultiSelectMetricLabelSource:
      type: object
      properties:
        metricName:
          type: string
        label:
          type: string
    MultiSelectQueryLogsQuery:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/QueryLogsQueryType'
    MultiSelectQueryMetricsQuery:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/QueryMetricsQueryType'
    MultiSelectQuerySource:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/astMultiSelectQuery'
        refreshStrategy:
          $ref: '#/components/schemas/MultiSelectRefreshStrategy'
        valueDisplayOptions:
          $ref: '#/components/schemas/MultiSelectValueDisplayOptions'
    MultiSelectQuerySpansQuery:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/QuerySpansQueryType'
    MultiSelectRefreshStrategy:
      type: string
      enum:
        - REFRESH_STRATEGY_UNSPECIFIED
        - REFRESH_STRATEGY_ON_DASHBOARD_LOAD
        - REFRESH_STRATEGY_ON_TIME_FRAME_CHANGE
      default: REFRESH_STRATEGY_UNSPECIFIED
    MultiSelectSpanFieldSource:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/commonSpanField'
    MultiSelectValueDisplayOptions:
      type: object
      properties:
        valueRegex:
          type: string
        labelRegex:
          type: string
    MultiSelectVariableSelectionOptions:
      type: object
      properties:
        selectionType:
          $ref: '#/components/schemas/VariableSelectionOptionsSelectionType'
    ParameterApiKeyData:
      type: object
      properties:
        id:
          type: string
        value:
          type: string
      title: API key data
    ParameterSensitiveDataPlaceholder:
      type: object
      title: Sensitive data placeholder
    ParameterStringList:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
      title: String list
    PieChartLabelDefinition:
      type: object
      properties:
        labelSource:
          $ref: '#/components/schemas/PieChartLabelSource'
        isVisible:
          type: boolean
        showName:
          type: boolean
        showValue:
          type: boolean
        showPercentage:
          type: boolean
    PieChartLabelSource:
      type: string
      enum:
        - LABEL_SOURCE_UNSPECIFIED
        - LABEL_SOURCE_INNER
        - LABEL_SOURCE_STACK
      default: LABEL_SOURCE_UNSPECIFIED
    QueryLogsQueryType:
      type: object
      properties:
        fieldName:
          $ref: '#/components/schemas/QueryLogsQueryTypeFieldName'
        fieldValue:
          $ref: '#/components/schemas/QueryLogsQueryTypeFieldValue'
    QueryLogsQueryTypeFieldName:
      type: object
      properties:
        logRegex:
          type: string
    QueryLogsQueryTypeFieldValue:
      type: object
      properties:
        observationField:
          $ref: '#/components/schemas/commonObservationField'
    QueryMetricsQueryEquals:
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/QueryMetricsQuerySelection'
    QueryMetricsQueryNotEquals:
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/QueryMetricsQuerySelection'
    QueryMetricsQueryOperator:
      type: object
      properties:
        equals:
          $ref: '#/components/schemas/QueryMetricsQueryEquals'
        notEquals:
          $ref: '#/components/schemas/QueryMetricsQueryNotEquals'
    QueryMetricsQuerySelection:
      type: object
      properties:
        list:
          $ref: '#/components/schemas/QueryMetricsQuerySelectionListSelection'
    QueryMetricsQuerySelectionListSelection:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/MetricsQueryStringOrVariable'
    QueryMetricsQueryType:
      type: object
      properties:
        metricName:
          $ref: '#/components/schemas/TypeMetricName'
        labelName:
          $ref: '#/components/schemas/TypeLabelName'
        labelValue:
          $ref: '#/components/schemas/MetricsQueryTypeLabelValue'
    QuerySpansQueryType:
      type: object
      properties:
        fieldName:
          $ref: '#/components/schemas/QuerySpansQueryTypeFieldName'
        fieldValue:
          $ref: '#/components/schemas/QuerySpansQueryTypeFieldValue'
    QuerySpansQueryTypeFieldName:
      type: object
      properties:
        spanRegex:
          type: string
    QuerySpansQueryTypeFieldValue:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/commonSpanField'
        observationField:
          $ref: '#/components/schemas/commonObservationField'
    RecurringAlways:
      type: object
    RecurringDynamic:
      type: object
      properties:
        repeatEvery:
          type: integer
          format: int32
          description: >-
            Recurring Dynamic repeat_every: The rule will be activated in a
            recurring mode according to the interval.
        daily:
          $ref: '#/components/schemas/v1Daily'
        weekly:
          $ref: '#/components/schemas/v1Weekly'
        monthly:
          $ref: '#/components/schemas/v1Monthly'
        timeframe:
          $ref: '#/components/schemas/v1Timeframe'
        terminationDate:
          type: string
          description: >-
            Recurring Dynamic termination_date: The rule will be terminated
            according to termination_date.
    RumVersionDataLogMetadata:
      type: object
      properties:
        firstOccurrence:
          type: string
          format: date-time
        lastOccurrence:
          type: string
          format: date-time
      title: Log metadata
    RumVersionDataSourceMapMetadata:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        isUploadedSuccessful:
          type: boolean
      title: Source map metadata
    SearchCustomEnrichmentDataRequestSearchClause:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: custom_enrichment_name
      description: This data structure represents a search clause
      title: Search Clause
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - search_by
    SlackConfigAttachment:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/SlackConfigAttachmentType'
        isActive:
          type: boolean
          default: 'false'
      title: Slack attachment configuration
      required:
        - type
    SlackConfigAttachmentType:
      type: string
      enum:
        - EMPTY
        - METRIC_SNAPSHOT
        - LOGS
      default: EMPTY
    SlackConfigDigest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/SlackConfigDigestType'
        isActive:
          type: boolean
          default: 'false'
      title: Slack digest configuration
      required:
        - type
    SlackConfigDigestType:
      type: string
      enum:
        - UNKNOWN
        - ERROR_AND_CRITICAL_LOGS
        - FLOW_ANOMALIES
        - SPIKE_ANOMALIES
        - DATA_USAGE
      default: UNKNOWN
    SpanFieldMetadataField:
      type: string
      enum:
        - METADATA_FIELD_UNSPECIFIED
        - METADATA_FIELD_APPLICATION_NAME
        - METADATA_FIELD_SUBSYSTEM_NAME
        - METADATA_FIELD_SERVICE_NAME
        - METADATA_FIELD_OPERATION_NAME
      default: METADATA_FIELD_UNSPECIFIED
    SpansAggregationDimensionAggregation:
      type: object
      properties:
        dimensionField:
          $ref: '#/components/schemas/DimensionAggregationDimensionField'
        aggregationType:
          $ref: '#/components/schemas/DimensionAggregationDimensionAggregationType'
    SpansAggregationMetricAggregation:
      type: object
      properties:
        metricField:
          $ref: '#/components/schemas/SpansAggregationMetricAggregationMetricField'
        aggregationType:
          $ref: '#/components/schemas/MetricAggregationMetricAggregationType'
    SpansAggregationMetricAggregationMetricField:
      type: string
      enum:
        - METRIC_FIELD_UNSPECIFIED
        - METRIC_FIELD_DURATION
      default: METRIC_FIELD_UNSPECIFIED
    TeamPermissionsMgmtServiceSetTeamGroupScopeBody:
      type: object
      properties:
        groupId:
          type: object
          title: / Team group to set scope to
          externalDocs:
            description: Find out more about groups
            url: >-
              https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
        scopeFilters:
          $ref: '#/components/schemas/v1ScopeFilters'
      description: >-
        Request message for setting scope filters (subsystems and applications)
        for a team group to control access permissions
      title: SetTeamGroupScopeRequest
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    TestTemplateRenderResultFailureReason:
      type: string
      enum:
        - FAILURE_REASON_UNSPECIFIED
        - INVALID_TEMPLATE
        - FIELD_NOT_FOUND
        - TEMPLATE_EXCEEDS_MAX_LENGTH
        - RENDERED_VALUE_EXCEEDS_MAX_LENGTH
      default: FAILURE_REASON_UNSPECIFIED
    TypeLabelName:
      type: object
      properties:
        metricRegex:
          type: string
    TypeMetricName:
      type: object
      properties:
        metricRegex:
          type: string
    UndeployExtensionResponseFailedItem:
      type: object
      properties:
        itemId:
          type: string
        remoteId:
          type: string
        reason:
          type: string
      title: Failed item
      required:
        - itemId
        - remoteId
        - reason
    UpdateApiKeyRequestPresets:
      type: object
      properties:
        presets:
          type: array
          items:
            type: string
      description: >-
        This data structure represents a set of permissions presets on an API
        key.
      title: Presets
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
      required:
        - presets
    UpdateTeamGroupRequestRoleUpdates:
      type: object
      properties:
        roleIds:
          type: array
          items:
            $ref: '#/components/schemas/v1RoleId'
          title: / Roles to associate with a team group
      description: >-
        This data structure represents the information associated with an API
        key.
      title: RoleUpdates
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    UpdateTeamGroupRequestUserUpdates:
      type: object
      properties:
        userIds:
          type: array
          items:
            $ref: '#/components/schemas/permissionsv1UserId'
          title: / Users to associate with a team group
      description: >-
        This data structure represents the information associated with an API
        key.
      title: UserUpdates
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    VariableSelectionOptionsSelectionType:
      type: string
      enum:
        - SELECTION_TYPE_UNSPECIFIED
        - SELECTION_TYPE_MULTI_ALL
        - SELECTION_TYPE_MULTI
        - SELECTION_TYPE_SINGLE
      default: SELECTION_TYPE_UNSPECIFIED
    XAxisXAxisByTime:
      type: object
      properties:
        interval:
          type: string
        bucketsPresented:
          type: integer
          format: int32
    XAxisXAxisByValue:
      type: object
    YAxisViewByYAxisViewByCategory:
      type: object
    YAxisViewByYAxisViewByValue:
      type: object
    actionsv2Action:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        url:
          type: string
        isHidden:
          type: boolean
        isPrivate:
          type: boolean
        sourceType:
          $ref: '#/components/schemas/actionsv2SourceType'
        applicationNames:
          type: array
          items:
            type: string
        subsystemNames:
          type: array
          items:
            type: string
        createdBy:
          type: string
    actionsv2SourceType:
      type: string
      enum:
        - SOURCE_TYPE_UNSPECIFIED
        - SOURCE_TYPE_LOG
        - SOURCE_TYPE_DATA_MAP
      default: SOURCE_TYPE_UNSPECIFIED
    alert_scheduler_rule_protobufv1Duration:
      type: object
      properties:
        forOver:
          type: integer
          format: int32
          description: 'Duration for_over: The duration interval.'
        frequency:
          $ref: '#/components/schemas/v1DurationFrequency'
    alertingalert_scheduler_rule_protobufv1Filter:
      type: object
      properties:
        whatExpression:
          type: string
          description: >-
            Filter what_expression: dataprime expression that filter the alerts
            group by values.
        alertMetaLabels:
          $ref: '#/components/schemas/v1MetaLabels'
        alertUniqueIds:
          $ref: '#/components/schemas/v1AlertUniqueIds'
    alertingmeta_labels_protobufv1MetaLabel:
      type: object
      properties:
        id:
          type: string
          title: 'MetaLabel id: The meta label id'
        key:
          type: string
          title: 'MetaLabel key: The meta label key'
        value:
          type: string
          title: 'MetaLabel value: The meta label value'
      title: >-
        Must use that schemas because the metaLabel GRPC service use that
        schemas
    alertsv3AutoRetireTimeframe:
      type: string
      enum:
        - AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED
        - AUTO_RETIRE_TIMEFRAME_MINUTES_5
        - AUTO_RETIRE_TIMEFRAME_MINUTES_10
        - AUTO_RETIRE_TIMEFRAME_HOUR_1
        - AUTO_RETIRE_TIMEFRAME_HOURS_2
        - AUTO_RETIRE_TIMEFRAME_HOURS_6
        - AUTO_RETIRE_TIMEFRAME_HOURS_12
        - AUTO_RETIRE_TIMEFRAME_HOURS_24
      default: AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED
    alertsv3ConnectorConfigField:
      type: object
      properties:
        fieldName:
          type: string
          example: description
          description: The name of the configuration field
        template:
          type: string
          format: tera
          example: template_example
          description: The template for the configuration field
      title: Connector config field
      required:
        - fieldName
        - template
    alertsv3IntegrationType:
      type: object
      properties:
        integrationId:
          type: integer
          format: int64
          example: 123
          description: The integration ID for the notification
        recipients:
          $ref: '#/components/schemas/v3Recipients'
      description: Defines the type of integration to use for notifications
      title: Integration type
      required:
        - integration_type
    alertsv3LogsFilter:
      type: object
      properties:
        simpleFilter:
          $ref: '#/components/schemas/v3LogsSimpleFilter'
      description: Filter configuration for log-based alerts
      title: Log filter
      required:
        - filter_type
    alertsv3MessageConfigField:
      type: object
      properties:
        fieldName:
          type: string
          example: description
          description: The name of the configuration field
        template:
          type: string
          format: tera
          example: template_example
          description: The template for the configuration field
      description: Configuration field for a notification message
      title: Message config field
      required:
        - fieldName
        - template
    alertsv3SetActiveResponse:
      type: object
      description: Response after enabling or disabling an alert definition
      title: Set active response
    alertsv3SloDefinition:
      type: object
      properties:
        sloId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
          description: The SLO ID
      description: Configuration for SLO definition
      title: SLO Definition
      required:
        - sloId
    alertsv3SourceOverrides:
      type: object
      properties:
        outputSchemaId:
          type: string
          example: output_schema_id_example
          description: The ID of the output schema to use for routing notifications
        messageConfigFields:
          type: array
          items:
            $ref: '#/components/schemas/alertsv3MessageConfigField'
          description: Notification message configuration fields
        connectorConfigFields:
          type: array
          items:
            $ref: '#/components/schemas/alertsv3ConnectorConfigField'
          description: Connector configuration fields
      title: Source overrides
      required:
        - outputSchemaId
        - messageConfigFields
        - connectorConfigFields
    alertsv3UndetectedValuesManagement:
      type: object
      properties:
        triggerUndetectedValues:
          type: boolean
          example: true
          description: Should trigger the alert when undetected values are detected
        autoRetireTimeframe:
          $ref: '#/components/schemas/alertsv3AutoRetireTimeframe'
      description: Configuration for handling undetected values in alerts
      title: Undetected value management
      required:
        - auto_retire_ratio
    apmservicesv1SloStatus:
      type: string
      enum:
        - SLO_STATUS_UNSPECIFIED
        - SLO_STATUS_OK
        - SLO_STATUS_BREACHED
      default: SLO_STATUS_UNSPECIFIED
    astAnnotationSource:
      type: object
      properties:
        metrics:
          $ref: '#/components/schemas/AnnotationMetricsSource'
        logs:
          $ref: '#/components/schemas/AnnotationLogsSource'
        spans:
          $ref: '#/components/schemas/AnnotationSpansSource'
    astConstant:
      type: object
      properties:
        value:
          type: string
    astCustomSectionOptions:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        collapsed:
          type: boolean
        color:
          $ref: '#/components/schemas/astSectionColor'
    astDashboard:
      type: object
      properties:
        id:
          type: string
          description: A unique identifier of the dashboard.
        name:
          type: string
          description: The display name of the dashboard.
        description:
          type: string
          description: >-
            A brief description or summary of the dashboard's purpose or
            content.
        layout:
          $ref: '#/components/schemas/astLayout'
        variables:
          type: array
          items:
            $ref: '#/components/schemas/astVariable'
          description: >-
            A list of variables that can be used within the dashboard for
            dynamic content.
        filters:
          type: array
          items:
            $ref: '#/components/schemas/v1astFilter'
          description: A list of filters that can be applied to the dashboard's data.
        absoluteTimeFrame:
          $ref: '#/components/schemas/commonTimeFrame'
        relativeTimeFrame:
          type: string
          description: Relative time frame specifying a duration from the current time.
        folderId:
          $ref: '#/components/schemas/v1UUID'
        folderPath:
          $ref: '#/components/schemas/astFolderPath'
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/v1astAnnotation'
        'off':
          $ref: '#/components/schemas/DashboardAutoRefreshOff'
        twoMinutes:
          $ref: '#/components/schemas/DashboardAutoRefreshTwoMinutes'
        fiveMinutes:
          $ref: '#/components/schemas/DashboardAutoRefreshFiveMinutes'
      description: >-
        Dashboard represents the structure and configuration of a Coralogix
        Custom Dashboard.
      title: Dashboard
      externalDocs:
        description: Learn more about Custom Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    astFilterEquals:
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/FilterEqualsSelection'
      description: This data structure represents an equality comparison operation.
      title: Equals
    astFilterLogsFilter:
      type: object
      properties:
        field:
          type: string
          description: The log field to which the filter is applied.
        operator:
          $ref: '#/components/schemas/astFilterOperator'
        observationField:
          $ref: '#/components/schemas/commonObservationField'
      description: This data structure represents the filter criteria for logs.
      title: LogsFilter
    astFilterNotEquals:
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/FilterNotEqualsSelection'
      description: This data structure represents a non-equality comparison operation.
      title: NotEquals
    astFilterOperator:
      type: object
      properties:
        equals:
          $ref: '#/components/schemas/astFilterEquals'
        notEquals:
          $ref: '#/components/schemas/astFilterNotEquals'
      description: This data structure defines the comparison operation for the filter.
      title: Operator
    astFilterSource:
      type: object
      properties:
        logs:
          $ref: '#/components/schemas/astFilterLogsFilter'
        spans:
          $ref: '#/components/schemas/FilterSpansFilter'
        metrics:
          $ref: '#/components/schemas/FilterMetricsFilter'
      description: Defines the type of data the filter applies to.
      title: Source
    astFolderPath:
      type: object
      properties:
        segments:
          type: array
          items:
            type: string
    astInternalSectionOptions:
      type: object
    astLayout:
      type: object
      properties:
        sections:
          type: array
          items:
            $ref: '#/components/schemas/astSection'
    astMultiSelect:
      type: object
      properties:
        selected:
          type: array
          items:
            type: string
        source:
          $ref: '#/components/schemas/astMultiSelectSource'
        selection:
          $ref: '#/components/schemas/astMultiSelectSelection'
        valuesOrderDirection:
          $ref: '#/components/schemas/commonOrderDirection'
        selectionOptions:
          $ref: '#/components/schemas/MultiSelectVariableSelectionOptions'
    astMultiSelectQuery:
      type: object
      properties:
        logsQuery:
          $ref: '#/components/schemas/MultiSelectQueryLogsQuery'
        metricsQuery:
          $ref: '#/components/schemas/MultiSelectQueryMetricsQuery'
        spansQuery:
          $ref: '#/components/schemas/MultiSelectQuerySpansQuery'
    astMultiSelectSelection:
      type: object
      properties:
        all:
          $ref: '#/components/schemas/astMultiSelectSelectionAllSelection'
        list:
          $ref: '#/components/schemas/astMultiSelectSelectionListSelection'
    astMultiSelectSelectionAllSelection:
      type: object
    astMultiSelectSelectionListSelection:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
        labels:
          type: array
          items:
            type: string
    astMultiSelectSource:
      type: object
      properties:
        logsPath:
          $ref: '#/components/schemas/MultiSelectLogsPathSource'
        metricLabel:
          $ref: '#/components/schemas/MultiSelectMetricLabelSource'
        constantList:
          $ref: '#/components/schemas/MultiSelectConstantListSource'
        spanField:
          $ref: '#/components/schemas/MultiSelectSpanFieldSource'
        query:
          $ref: '#/components/schemas/MultiSelectQuerySource'
    astRow:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/v1UUID'
        appearance:
          $ref: '#/components/schemas/astRowAppearance'
        widgets:
          type: array
          items:
            $ref: '#/components/schemas/astWidget'
    astRowAppearance:
      type: object
      properties:
        height:
          type: integer
          format: int32
    astSection:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/v1UUID'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/astRow'
        options:
          $ref: '#/components/schemas/astSectionOptions'
    astSectionColor:
      type: object
      properties:
        predefined:
          $ref: '#/components/schemas/astSectionPredefinedColor'
    astSectionOptions:
      type: object
      properties:
        internal:
          $ref: '#/components/schemas/astInternalSectionOptions'
        custom:
          $ref: '#/components/schemas/astCustomSectionOptions'
    astSectionPredefinedColor:
      type: string
      enum:
        - SECTION_PREDEFINED_COLOR_UNSPECIFIED
        - SECTION_PREDEFINED_COLOR_CYAN
        - SECTION_PREDEFINED_COLOR_GREEN
        - SECTION_PREDEFINED_COLOR_BLUE
        - SECTION_PREDEFINED_COLOR_PURPLE
        - SECTION_PREDEFINED_COLOR_MAGENTA
        - SECTION_PREDEFINED_COLOR_PINK
        - SECTION_PREDEFINED_COLOR_ORANGE
      default: SECTION_PREDEFINED_COLOR_UNSPECIFIED
    astVariable:
      type: object
      properties:
        name:
          type: string
        definition:
          $ref: '#/components/schemas/astVariableDefinition'
        displayName:
          type: string
        description:
          type: string
        displayType:
          $ref: '#/components/schemas/astVariableDisplayType'
    astVariableDefinition:
      type: object
      properties:
        constant:
          $ref: '#/components/schemas/astConstant'
        multiSelect:
          $ref: '#/components/schemas/astMultiSelect'
    astVariableDisplayType:
      type: string
      enum:
        - VARIABLE_DISPLAY_TYPE_UNSPECIFIED
        - VARIABLE_DISPLAY_TYPE_LABEL_VALUE
        - VARIABLE_DISPLAY_TYPE_VALUE
        - VARIABLE_DISPLAY_TYPE_NOTHING
      default: VARIABLE_DISPLAY_TYPE_UNSPECIFIED
    astWidget:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/v1UUID'
        title:
          type: string
        description:
          type: string
        definition:
          $ref: '#/components/schemas/astWidgetDefinition'
        appearance:
          $ref: '#/components/schemas/astWidgetAppearance'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      description: This data structure represents a dashboard widget.
      title: Widget
      externalDocs:
        description: Find out more about creating dashboard widgets in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/#add-new-widgets
    astWidgetAppearance:
      type: object
      properties:
        width:
          type: integer
          format: int32
    astWidgetDefinition:
      type: object
      properties:
        lineChart:
          $ref: '#/components/schemas/widgetsLineChart'
        dataTable:
          $ref: '#/components/schemas/widgetsDataTable'
        gauge:
          $ref: '#/components/schemas/widgetsGauge'
        pieChart:
          $ref: '#/components/schemas/widgetsPieChart'
        barChart:
          $ref: '#/components/schemas/widgetsBarChart'
        horizontalBarChart:
          $ref: '#/components/schemas/widgetsHorizontalBarChart'
        markdown:
          $ref: '#/components/schemas/widgetsMarkdown'
        hexagon:
          $ref: '#/components/schemas/widgetsHexagon'
    astwidgetscommonLuceneQuery:
      type: object
      properties:
        value:
          type: string
    astwidgetscommonPromQlQuery:
      type: object
      properties:
        value:
          type: string
    commonColorsBy:
      type: object
      properties:
        stack:
          $ref: '#/components/schemas/ColorsByColorsByStack'
        groupBy:
          $ref: '#/components/schemas/ColorsByColorsByGroupBy'
        aggregation:
          $ref: '#/components/schemas/ColorsByColorsByAggregation'
    commonCustomLink:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/v1UUID'
        linkName:
          type: string
        openInNewWindow:
          type: boolean
        isPrivate:
          type: boolean
        createdBy:
          type: string
        custom:
          $ref: '#/components/schemas/commonCustomLinkPlain'
        template:
          $ref: '#/components/schemas/commonCustomLinkTemplate'
    commonCustomLinkPlain:
      type: object
      properties:
        url:
          type: string
    commonCustomLinkTemplate:
      type: object
      properties:
        url:
          type: string
        type:
          $ref: '#/components/schemas/commonCustomLinkTemplateType'
    commonCustomLinkTemplateType:
      type: string
      enum:
        - CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED
        - CUSTOM_LINK_TEMPLATE_TYPE_APM_SERVICE_CATALOG
      default: CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED
      description: >2-
         - CUSTOM_LINK_TEMPLATE_TYPE_UNSPECIFIED: Add more pre-defined templates after delivery from product
        Also add documentation here for required variables for each template to
        understand any possible validation error.
    commonDashboardFolder:
      type: object
      properties:
        id:
          type: string
          title: Folder unique identifier
        name:
          type: string
          title: Folder name
        parentId:
          type: string
    commonDataModeType:
      type: string
      enum:
        - DATA_MODE_TYPE_HIGH_UNSPECIFIED
        - DATA_MODE_TYPE_ARCHIVE
      default: DATA_MODE_TYPE_HIGH_UNSPECIFIED
    commonLegend:
      type: object
      properties:
        isVisible:
          type: boolean
        columns:
          type: array
          items:
            $ref: '#/components/schemas/LegendLegendColumn'
        groupByQuery:
          type: boolean
        placement:
          $ref: '#/components/schemas/LegendLegendPlacement'
    commonLegendBy:
      type: string
      enum:
        - LEGEND_BY_UNSPECIFIED
        - LEGEND_BY_THRESHOLDS
        - LEGEND_BY_GROUPS
      default: LEGEND_BY_UNSPECIFIED
    commonLogsAggregation:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/LogsAggregationCount'
        countDistinct:
          $ref: '#/components/schemas/LogsAggregationCountDistinct'
        sum:
          $ref: '#/components/schemas/LogsAggregationSum'
        average:
          $ref: '#/components/schemas/LogsAggregationAverage'
        min:
          $ref: '#/components/schemas/LogsAggregationMin'
        max:
          $ref: '#/components/schemas/LogsAggregationMax'
        percentile:
          $ref: '#/components/schemas/LogsAggregationPercentile'
    commonMetricsQueryEditorMode:
      type: string
      enum:
        - METRICS_QUERY_EDITOR_MODE_UNSPECIFIED
        - METRICS_QUERY_EDITOR_MODE_TEXT
        - METRICS_QUERY_EDITOR_MODE_BUILDER
      default: METRICS_QUERY_EDITOR_MODE_UNSPECIFIED
    commonObservationField:
      type: object
      properties:
        keypath:
          type: array
          items:
            type: string
        scope:
          $ref: '#/components/schemas/v1commonDatasetScope'
    commonOrderDirection:
      type: string
      enum:
        - ORDER_DIRECTION_UNSPECIFIED
        - ORDER_DIRECTION_ASC
        - ORDER_DIRECTION_DESC
      default: ORDER_DIRECTION_UNSPECIFIED
    commonOrderingField:
      type: object
      properties:
        field:
          type: string
        orderDirection:
          $ref: '#/components/schemas/commonOrderDirection'
    commonPromQLQueryType:
      type: string
      enum:
        - PROM_QL_QUERY_TYPE_UNSPECIFIED
        - PROM_QL_QUERY_TYPE_RANGE
        - PROM_QL_QUERY_TYPE_INSTANT
      default: PROM_QL_QUERY_TYPE_UNSPECIFIED
    commonScaleType:
      type: string
      enum:
        - SCALE_TYPE_UNSPECIFIED
        - SCALE_TYPE_LINEAR
        - SCALE_TYPE_LOGARITHMIC
      default: SCALE_TYPE_UNSPECIFIED
    commonSortByType:
      type: string
      enum:
        - SORT_BY_TYPE_UNSPECIFIED
        - SORT_BY_TYPE_VALUE
        - SORT_BY_TYPE_NAME
      default: SORT_BY_TYPE_UNSPECIFIED
    commonSpanField:
      type: object
      properties:
        metadataField:
          $ref: '#/components/schemas/SpanFieldMetadataField'
        tagField:
          type: string
        processTagField:
          type: string
    commonSpansAggregation:
      type: object
      properties:
        metricAggregation:
          $ref: '#/components/schemas/SpansAggregationMetricAggregation'
        dimensionAggregation:
          $ref: '#/components/schemas/SpansAggregationDimensionAggregation'
    commonThresholdType:
      type: string
      enum:
        - THRESHOLD_TYPE_UNSPECIFIED
        - THRESHOLD_TYPE_RELATIVE
        - THRESHOLD_TYPE_ABSOLUTE
      default: THRESHOLD_TYPE_UNSPECIFIED
    commonTimeFrame:
      type: object
      properties:
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time
    commonTimeFrameSelect:
      type: object
      properties:
        absoluteTimeFrame:
          $ref: '#/components/schemas/commonTimeFrame'
        relativeTimeFrame:
          type: string
    commonv2OrderBy:
      type: object
      properties:
        fieldName:
          type: string
          example: field_name
        direction:
          $ref: '#/components/schemas/commonv2OrderByDirection'
      description: This data structure represents an order by clause in Coralogix APM.
      title: Order By
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - fieldName
        - direction
    commonv2OrderByDirection:
      type: string
      enum:
        - ORDER_BY_DIRECTION_UNSPECIFIED
        - ORDER_BY_DIRECTION_ASC
        - ORDER_BY_DIRECTION_DESC
      default: ORDER_BY_DIRECTION_UNSPECIFIED
    coralogixapisalertsv3PaginationRequest:
      type: object
      properties:
        pageSize:
          type: integer
          format: int64
        pageToken:
          type: string
    coralogixapisalertsv3PaginationResponse:
      type: object
      properties:
        totalSize:
          type: integer
          format: int64
        nextPageToken:
          type: string
    coralogixapiseventsv3OrderBy:
      type: object
      properties:
        fieldName:
          $ref: '#/components/schemas/coralogixapiseventsv3OrderByFields'
        direction:
          $ref: '#/components/schemas/coralogixapiseventsv3OrderByDirection'
    coralogixapiseventsv3OrderByDirection:
      type: string
      enum:
        - ORDER_BY_DIRECTION_UNSPECIFIED
        - ORDER_BY_DIRECTION_ASC
        - ORDER_BY_DIRECTION_DESC
      default: ORDER_BY_DIRECTION_UNSPECIFIED
    coralogixapiseventsv3OrderByFields:
      type: string
      enum:
        - ORDER_BY_FIELDS_UNSPECIFIED
        - ORDER_BY_FIELDS_TIMESTAMP
      default: ORDER_BY_FIELDS_UNSPECIFIED
    coralogixapiseventsv3PaginationRequest:
      type: object
      properties:
        pageSize:
          type: integer
          format: int64
          example: 10
        pageToken:
          type: string
          example: test
    coralogixapiseventsv3PaginationResponse:
      type: object
      properties:
        totalSize:
          type: integer
          format: int64
          example: 10
        nextPageToken:
          type: string
          example: test
    coralogixapisincidentsv1MetaLabel:
      type: object
      properties:
        key:
          type: string
          example: key
        value:
          type: string
          example: value
      title: Incident meta label
    coralogixapisincidentsv1TimeRange:
      type: object
      properties:
        startTime:
          type: string
          format: date-time
          description: Start time of the range
        endTime:
          type: string
          format: date-time
          description: End time of the range
      description: Represents a time range with start and end timestamps
      title: Time range
      required:
        - startTime
        - endTime
    coralogixapislogs2metricsv2Severity:
      type: string
      enum:
        - SEVERITY_UNSPECIFIED
        - SEVERITY_DEBUG
        - SEVERITY_VERBOSE
        - SEVERITY_INFO
        - SEVERITY_WARNING
        - SEVERITY_ERROR
        - SEVERITY_CRITICAL
      default: SEVERITY_UNSPECIFIED
      title: enum that represents severity types
    coralogixapisnotification_centerConditionType:
      type: object
      properties:
        matchEntityType:
          $ref: '#/components/schemas/notification_centerMatchEntityTypeCondition'
        matchEntityTypeAndSubType:
          $ref: >-
            #/components/schemas/notification_centerMatchEntityTypeAndSubTypeCondition
    coralogixapisnotification_centerConnectorConfigField:
      type: object
      properties:
        fieldName:
          type: string
        value:
          type: string
    coralogixapisnotification_centerEntityType:
      type: string
      enum:
        - ENTITY_TYPE_UNSPECIFIED
        - ALERTS
        - TEST_NOTIFICATIONS
      default: ENTITY_TYPE_UNSPECIFIED
    coralogixapisnotification_centerGlobalRouterIdentifier:
      type: object
      properties:
        id:
          type: string
          title: The unique identifier automatically generated by the service
        userDefinedId:
          type: string
          title: The unique identifier provided by the user
      title: Deprecated - use single id field instead
    coralogixapisnotification_centerMessageConfigField:
      type: object
      properties:
        fieldName:
          type: string
          example: title
        template:
          type: string
          example: '{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}'
      description: >-
        Message config field provides a way to define a template that can be
        used to render the notification content
      title: Message Config Field
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
      required:
        - fieldName
        - template
    coralogixapisnotification_centerPresetIdentifier:
      type: object
      properties:
        id:
          type: string
          title: The unique identifier automatically generated by the service
        userDefinedId:
          type: string
          title: The unique identifier provided by the user
      title: Deprecated - use single id field instead
    coralogixapisscopesv1EntityType:
      type: string
      enum:
        - ENTITY_TYPE_UNSPECIFIED
        - ENTITY_TYPE_LOGS
        - ENTITY_TYPE_SPANS
      default: ENTITY_TYPE_UNSPECIFIED
    coralogixapisscopesv1Filter:
      type: object
      properties:
        entityType:
          $ref: '#/components/schemas/coralogixapisscopesv1EntityType'
        expression:
          type: string
          example: expression
      description: This data structure represents a filter
      title: Filter
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
    coralogixapisscopesv1Scope:
      type: object
      properties:
        id:
          type: string
          example: scope_id
        displayName:
          type: string
          example: scope_name
        description:
          type: string
          example: scope_description
        teamId:
          type: integer
          format: int32
          example: 1234
        filters:
          type: array
          items:
            $ref: '#/components/schemas/coralogixapisscopesv1Filter'
        defaultExpression:
          type: string
          example: expression
      description: This data structure represents a scope
      title: Scope
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
    coralogixapisslov1SloStatus:
      type: string
      enum:
        - SLO_STATUS_UNSPECIFIED
        - SLO_STATUS_OK
        - SLO_STATUS_WARNING
        - SLO_STATUS_CRITICAL
        - SLO_STATUS_BREACHED
        - SLO_STATUS_PENDING
      default: SLO_STATUS_UNSPECIFIED
    coralogixapisviewsv1Filter:
      type: object
      properties:
        name:
          type: string
          example: applicationName
          description: Filter name
          title: Filter name
          minLength: 1
        selectedValues:
          type: object
          example:
            demo: true
            cs-rest-test1: true
          additionalProperties:
            type: boolean
          description: Filter selected values
          title: Filter selected values
      description: View folder.
      title: ViewFolder
      required:
        - name
        - selectedValues
    coralogixarchivev1Retention:
      type: object
      properties:
        id:
          type: string
        order:
          type: integer
          format: int32
        name:
          type: string
        editable:
          type: boolean
      description: This data structure represents a retention
      title: Retention
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    coralogixdatausagev2Severity:
      type: string
      enum:
        - SEVERITY_UNSPECIFIED
        - SEVERITY_DEBUG
        - SEVERITY_VERBOSE
        - SEVERITY_INFO
        - SEVERITY_WARNING
        - SEVERITY_ERROR
        - SEVERITY_CRITICAL
      default: SEVERITY_UNSPECIFIED
    coralogixenrichmentv1Enrichment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        fieldName:
          type: string
          example: 1
        enrichmentType:
          $ref: '#/components/schemas/coralogixenrichmentv1EnrichmentType'
        enrichedFieldName:
          type: string
          example: 1
        selectedColumns:
          type: array
          example:
            - city
            - population
          items:
            type: string
      description: This data structure represents an enrichment
      title: Enrichment
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - id
        - fieldName
        - enrichmentType
    coralogixenrichmentv1EnrichmentType:
      type: object
      properties:
        geoIp:
          $ref: '#/components/schemas/v1GeoIpType'
        suspiciousIp:
          $ref: '#/components/schemas/v1SuspiciousIpType'
        aws:
          $ref: '#/components/schemas/v1AwsType'
        customEnrichment:
          $ref: '#/components/schemas/v1CustomEnrichmentType'
    coralogixglobal_mappingv1DataSourceType:
      type: string
      enum:
        - DATA_SOURCE_TYPE_UNSPECIFIED
        - DATA_SOURCE_TYPE_LOGS
        - DATA_SOURCE_TYPE_SPAN
        - DATA_SOURCE_TYPE_METRICS
        - DATA_SOURCE_TYPE_EVENTS
      default: DATA_SOURCE_TYPE_UNSPECIFIED
    coralogixpermissionsv1Scope:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/v1ScopeId'
        filters:
          $ref: '#/components/schemas/v1ScopeFilters'
      description: >-
        / A group scope has a list of filters for subsystems and applications.
        Used to filter traffic based on user defined rules.
    coralogixpermissionsv1TeamId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    coralogixquotav1Priority:
      type: string
      enum:
        - PRIORITY_TYPE_UNSPECIFIED
        - PRIORITY_TYPE_BLOCK
        - PRIORITY_TYPE_LOW
        - PRIORITY_TYPE_MEDIUM
        - PRIORITY_TYPE_HIGH
      default: PRIORITY_TYPE_UNSPECIFIED
    coralogixquotav1Rule:
      type: object
      properties:
        ruleTypeId:
          $ref: '#/components/schemas/v1RuleTypeId'
        name:
          type: string
    coralogixquotav1Severity:
      type: string
      enum:
        - SEVERITY_UNSPECIFIED
        - SEVERITY_DEBUG
        - SEVERITY_VERBOSE
        - SEVERITY_INFO
        - SEVERITY_WARNING
        - SEVERITY_ERROR
        - SEVERITY_CRITICAL
      default: SEVERITY_UNSPECIFIED
    coralogixrulesv1Rule:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        sourceField:
          type: string
        parameters:
          $ref: '#/components/schemas/v1RuleParameters'
        enabled:
          type: boolean
        order:
          type: integer
          format: int64
    coralogixrulesv1TeamId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    dashboardsv1commonLuceneQuery:
      type: object
      properties:
        value:
          type: string
    dashboardsv1commonPromQlQuery:
      type: object
      properties:
        value:
          type: string
    datausagev2DateRange:
      type: object
      properties:
        fromDate:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00.000Z'
        toDate:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00.000Z'
      description: This data structure represents a date range.
      title: Date Range
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    datausagev2GB:
      type: object
      properties:
        value:
          type: number
          format: float
    datausagev2Priority:
      type: string
      enum:
        - PRIORITY_UNSPECIFIED
        - PRIORITY_LOW
        - PRIORITY_MEDIUM
        - PRIORITY_HIGH
        - PRIORITY_BLOCKED
      default: PRIORITY_UNSPECIFIED
    datausagev2Range:
      type: string
      enum:
        - RANGE_UNSPECIFIED
        - RANGE_CURRENT_MONTH
        - RANGE_LAST_30_DAYS
        - RANGE_LAST_90_DAYS
        - RANGE_LAST_WEEK
      default: RANGE_UNSPECIFIED
    datausagev2TcoTier:
      type: string
      enum:
        - TCO_TIER_UNSPECIFIED
        - TCO_TIER_LOW
        - TCO_TIER_MEDIUM
        - TCO_TIER_HIGH
        - TCO_TIER_BLOCKED
      default: TCO_TIER_UNSPECIFIED
    datausagev2Unit:
      type: object
      properties:
        value:
          type: number
          format: float
    events2metricsv2Aggregation:
      type: object
      properties:
        enabled:
          type: boolean
          title: Is enabled
        aggType:
          $ref: '#/components/schemas/AggregationAggType'
        targetMetricName:
          type: string
          example: alias_field_name_agg_func
          title: Target metric field alias name
        samples:
          $ref: '#/components/schemas/v2E2MAggSamples'
        histogram:
          $ref: '#/components/schemas/v2E2MAggHistogram'
      description: This data structure represents an aggregation
      title: Aggregation
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    events2metricsv2MetricField:
      type: object
      properties:
        targetBaseMetricName:
          type: string
          example: alias_field_name
          title: Target metric field alias name
          pattern: ^[\w/-]+$
        sourceField:
          type: string
          example: log_obj.numeric_field
          title: Source field
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/events2metricsv2Aggregation'
          title: Represents Aggregation type list
      description: This data structure represents a metric field
      title: Metric Field
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - targetBaseMetricName
        - sourceField
        - aggregations
    eventsv3FilterOperator:
      type: string
      enum:
        - FILTER_OPERATOR_AND_OR_UNSPECIFIED
        - FILTER_OPERATOR_OR
      default: FILTER_OPERATOR_AND_OR_UNSPECIFIED
    extensionsv1Extension:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        image:
          type: string
        darkModeImage:
          type: string
        revisions:
          type: array
          items:
            $ref: '#/components/schemas/v1ExtensionRevision'
        isHidden:
          type: boolean
          default: 'false'
        integrations:
          type: array
          items:
            type: string
            default: '[]'
        keywords:
          type: array
          items:
            type: string
            default: '[]'
        permissionDeniedRevisions:
          type: array
          items:
            $ref: '#/components/schemas/v1ExtensionRevision'
        changelog:
          type: array
          items:
            $ref: '#/components/schemas/v1ChangelogEntry'
        deprecation:
          $ref: '#/components/schemas/v1Deprecation'
      title: Extension metadata
      required:
        - id
        - name
        - image
    global_mappingv1Span:
      type: object
      properties:
        tags:
          type: object
          additionalProperties:
            type: string
        processTags:
          type: object
          additionalProperties:
            type: string
    incidentsv1FilterOperator:
      type: string
      enum:
        - FILTER_OPERATOR_OR_OR_UNSPECIFIED
        - FILTER_OPERATOR_AND
      default: FILTER_OPERATOR_OR_OR_UNSPECIFIED
    incidentsv1OrderBy:
      type: object
      properties:
        incidentField:
          $ref: '#/components/schemas/v1IncidentFields'
        contextualLabel:
          type: string
        direction:
          $ref: '#/components/schemas/incidentsv1OrderByDirection'
      title: Incident order by
      required:
        - field
        - direction
    incidentsv1OrderByDirection:
      type: string
      enum:
        - ORDER_BY_DIRECTION_UNSPECIFIED
        - ORDER_BY_DIRECTION_ASC
        - ORDER_BY_DIRECTION_DESC
      default: ORDER_BY_DIRECTION_UNSPECIFIED
    incidentsv1PaginationRequest:
      type: object
      properties:
        pageSize:
          type: integer
          format: int64
          example: 10
          description: Number of items to return per page
        pageToken:
          type: string
          example: next_page_token
          description: Token for the next page of results
      description: Pagination parameters for list requests
      title: Pagination request
      required:
        - pageSize
    incidentsv1PaginationResponse:
      type: object
      properties:
        totalSize:
          type: integer
          format: int64
          example: 100
          description: Total number of items available
        nextPageToken:
          type: string
          example: next_page_token
          description: Token for the next page of results
      description: Pagination information for list responses
      title: Pagination response
      required:
        - totalSize
    integrationsv1IntegrationType:
      type: object
      properties:
        managed:
          $ref: '#/components/schemas/IntegrationTypeManaged'
        untracked:
          $ref: '#/components/schemas/IntegrationTypeUntracked'
        cloudformation:
          $ref: '#/components/schemas/IntegrationTypeCloudformation'
        arm:
          $ref: '#/components/schemas/IntegrationTypeAzureArm'
        pushBasedContextualData:
          $ref: '#/components/schemas/IntegrationTypePushBasedContextualData'
        contextualData:
          $ref: '#/components/schemas/IntegrationTypeContextualData'
        genericWebhook:
          $ref: '#/components/schemas/IntegrationTypeGenericWebhook'
      description: This data structure represents an integration type.
      title: Integration type
    logs2metricsv2LogsQuery:
      type: object
      properties:
        lucene:
          type: string
          example: 'log_obj.numeric_field: [50 TO 100]'
          title: lucene query
        alias:
          type: string
          example: new_query
          title: alias
        applicationnameFilters:
          type: array
          example: app_name
          items:
            type: string
          title: application name filters
        subsystemnameFilters:
          type: array
          example: sub_name
          items:
            type: string
          title: subsystem names filters
        severityFilters:
          type: array
          items:
            $ref: '#/components/schemas/coralogixapislogs2metricsv2Severity'
          title: severity type filters
      description: This data structure represents a query for logs.
      title: SpansQuery
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    metrics_configuratorConfigureTenantRequest:
      type: object
      properties:
        retentionPolicy:
          $ref: '#/components/schemas/metrics_configuratorRetentionPolicyRequest'
        ibm:
          $ref: '#/components/schemas/metrics_configuratorIbmConfigV2'
        s3:
          $ref: '#/components/schemas/metrics_configuratorS3Config'
      description: This data structure is used to configure a tenant.
      title: Configure Tenant Request
      externalDocs:
        description: Find out more about metrics cost optimization
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
      required:
        - retentionPolicy
        - storage_config
    metrics_configuratorGetTenantConfigResponse:
      type: object
      properties:
        tenantConfig:
          $ref: '#/components/schemas/metrics_configuratorTenantConfig'
    metrics_configuratorGetTenantConfigResponseV2:
      type: object
      properties:
        tenantConfig:
          $ref: '#/components/schemas/metrics_configuratorTenantConfigV2'
    metrics_configuratorHotStoreConfig:
      type: object
      properties:
        tenantId:
          type: integer
          format: int64
        clusterName:
          type: string
    metrics_configuratorIbmConfig:
      type: object
      properties:
        bucket:
          type: string
        region:
          type: string
        endpoint:
          type: string
        crn:
          type: string
    metrics_configuratorIbmConfigV2:
      type: object
      properties:
        endpoint:
          type: string
          example: s3.us-south.cloud-object-storage.appdomain.cloud
          title: Endpoint to use to access the bucket
        crn:
          type: string
          example: >-
            crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::
          title: Cloud Object Storage bucket CRN
        serviceCrn:
          type: string
          example: >-
            crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::
          title: >-
            A CRN of a service instance which will be storing data in the
            bucket.

            Team ID is comming in AuthContext
      description: This data structure is used to configure an IBM bucket.
      title: IBM Bucket Configuration
      externalDocs:
        description: Find out more about metrics cost optimization
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
      required:
        - endpoint
        - crn
        - serviceCrn
    metrics_configuratorListHotStoreConfigsResponse:
      type: object
      properties:
        configs:
          type: array
          items:
            $ref: '#/components/schemas/metrics_configuratorHotStoreConfig'
    metrics_configuratorListTenantConfigsResponse:
      type: object
      properties:
        tenantConfigs:
          type: array
          items:
            $ref: '#/components/schemas/metrics_configuratorTenantConfig'
    metrics_configuratorRetentionPolicy:
      type: object
      properties:
        resolution:
          type: integer
          format: int32
          example: 12
        retentionDays:
          type: integer
          format: int32
          example: 30
      description: This data structure represents the retention policy for a tenant.
      title: Retenion Policy
      externalDocs:
        description: Find out more about metrics cost optimization
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
      required:
        - resolution
        - retentionDays
    metrics_configuratorRetentionPolicyRequest:
      type: object
      properties:
        rawResolution:
          type: integer
          format: int64
          example: 1
        fiveMinutesResolution:
          type: integer
          format: int64
          example: 2
        oneHourResolution:
          type: integer
          format: int64
          example: 3
      description: This data structure is used to set the retention policy for a tenant.
      title: Retenion Policy Request
      externalDocs:
        description: Find out more about metrics cost optimization
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
      required:
        - rawResolution
        - fiveMinutesResolution
        - oneHourResolution
    metrics_configuratorS3Config:
      type: object
      properties:
        bucket:
          type: string
        region:
          type: string
      description: This data structure represents the S3 configuration for a tenant.
      title: S3 Configuration
      externalDocs:
        description: Find out more about metrics cost optimization
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
      required:
        - bucket
        - region
    metrics_configuratorTenantConfig:
      type: object
      properties:
        tenantId:
          type: integer
          format: int64
        bucketName:
          type: string
        region:
          type: string
        retentionPolicy:
          type: array
          items:
            $ref: '#/components/schemas/metrics_configuratorRetentionPolicy'
        ibm:
          $ref: '#/components/schemas/metrics_configuratorIbmConfig'
        s3:
          $ref: '#/components/schemas/metrics_configuratorS3Config'
        prefix:
          type: string
        indexVersion:
          type: integer
          format: int64
        disabled:
          type: boolean
    metrics_configuratorTenantConfigV2:
      type: object
      properties:
        tenantId:
          type: integer
          format: int64
        retentionPolicy:
          $ref: '#/components/schemas/metrics_configuratorRetentionPolicyRequest'
        ibm:
          $ref: '#/components/schemas/metrics_configuratorIbmConfigV2'
        s3:
          $ref: '#/components/schemas/metrics_configuratorS3Config'
        prefix:
          type: string
        disabled:
          type: boolean
    metrics_configuratorUpdateRequest:
      type: object
      properties:
        retentionDays:
          type: integer
          format: int64
        ibm:
          $ref: '#/components/schemas/metrics_configuratorIbmConfigV2'
        s3:
          $ref: '#/components/schemas/metrics_configuratorS3Config'
      description: This data structure is used to update the configuration of a tenant.
      title: Update Tenant Request
      externalDocs:
        description: Find out more about metrics cost optimization
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
      required:
        - retentionDays
        - storage_config
    metrics_configuratorValidateBucketRequest:
      type: object
      properties:
        ibm:
          $ref: '#/components/schemas/metrics_configuratorIbmConfigV2'
        s3:
          $ref: '#/components/schemas/metrics_configuratorS3Config'
      description: This data structure is used to validate a bucket.
      title: Bucket Validation Request
      externalDocs:
        description: Find out more about metrics cost optimization
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
      required:
        - storage_config
    metrics_tcoAddRequest:
      type: object
      properties:
        label:
          type: string
          example: rule1
        regex:
          type: string
          example: .*
      description: This data structure is used to add a metrics tco rule.
      title: Add Request
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - label
        - regex
    metrics_tcoDeleteRequest:
      type: object
      properties:
        ruleId:
          type: string
          format: uint64
          example: 1
    metrics_tcoGetResponse:
      type: object
      properties:
        rules:
          type: array
          example: 1
          items:
            $ref: '#/components/schemas/metricsmetrics_tcoRule'
    metricsmetrics_tcoRule:
      type: object
      properties:
        id:
          type: string
          format: uint64
          example: 1
        label:
          type: string
          example: rule1
        regex:
          type: string
          example: .*
      description: This data structure represents a metrics tco rule.
      title: Rule
      externalDocs:
        description: Find out more about metrics cost optimization
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
      required:
        - id
        - label
        - regex
    notification_centerConfigOverrides:
      type: object
      properties:
        conditionType:
          $ref: '#/components/schemas/coralogixapisnotification_centerConditionType'
        payloadType:
          type: string
        messageConfig:
          $ref: '#/components/schemas/notification_centerMessageConfig'
    notification_centerConnectorIdentifier:
      type: object
      properties:
        id:
          type: string
          title: The unique identifier automatically generated by the service
        userDefinedId:
          type: string
      title: Deprecated - use single id field instead
    notification_centerConnectorType:
      type: string
      enum:
        - CONNECTOR_TYPE_UNSPECIFIED
        - SLACK
        - GENERIC_HTTPS
        - PAGERDUTY
        - AWS
        - IBM_EVENT_NOTIFICATIONS
      default: CONNECTOR_TYPE_UNSPECIFIED
    notification_centerMatchEntityTypeAndSubTypeCondition:
      type: object
      properties:
        deprecatedEntityType:
          type: string
        entitySubType:
          type: string
        entityType:
          $ref: '#/components/schemas/coralogixapisnotification_centerEntityType'
    notification_centerMatchEntityTypeCondition:
      type: object
      properties:
        deprecatedEntityType:
          type: string
        entityType:
          $ref: '#/components/schemas/coralogixapisnotification_centerEntityType'
    notification_centerMessageConfig:
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: >-
              #/components/schemas/coralogixapisnotification_centerMessageConfigField
    notification_centerRenderedMessageConfigField:
      type: object
      properties:
        fieldName:
          type: string
        value:
          type: string
    notification_centerTemplatedConnectorConfigField:
      type: object
      properties:
        fieldName:
          type: string
        template:
          type: string
    notification_centerroutingGlobalRouterIdentifier:
      type: object
      properties:
        id:
          type: string
        userFacingId:
          type: string
    organisationsv2TeamId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    permissionsv1User:
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/permissionsv1UserId'
        userAccountId:
          $ref: '#/components/schemas/permissionsv1UserAccountId'
        username:
          type: string
          title: / Unique username
        firstName:
          type: string
          title: / User first name
        lastName:
          type: string
          title: / User last name
        status:
          $ref: '#/components/schemas/v1UserStatus'
      title: >-
        / An user is an entity that is always part of a team and has an account
        associated with it
    permissionsv1UserAccountId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    permissionsv1UserId:
      type: object
      properties:
        id:
          type: string
    presetsv1Preset:
      type: object
      properties:
        id:
          type: string
          example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
          title: >-
            A unique identifier - automatically generated unless provided by the
            user
        userDefinedId:
          type: string
          example: user-preset-id
          title: DEPRECATED - A unique identifier provided by the user
        deprecatedEntityType:
          type: string
        connectorType:
          $ref: '#/components/schemas/notification_centerConnectorType'
        configOverrides:
          type: array
          items:
            $ref: '#/components/schemas/notification_centerConfigOverrides'
          title: >-
            A list of of configuration override templates, each associated with
            a specific output schema and condition
        name:
          type: string
          example: My Preset
        description:
          type: string
          example: Custom preset for alerts
        createTime:
          type: string
          format: date-time
          title: System-generated timestamp for when the preset was created
        updateTime:
          type: string
          format: date-time
          title: System-generated timestamp for when the preset was last updated
        presetType:
          $ref: '#/components/schemas/v1PresetType'
        entityType:
          $ref: '#/components/schemas/coralogixapisnotification_centerEntityType'
        parentId:
          type: string
          example: preset_system_slack_alerts_detailed
      description: Set of preconfigured templates for notification content rendering
      title: Preset
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
      required:
        - entityType
        - configOverrides
        - name
    presetsv1PresetIdentifier:
      type: object
      properties:
        id:
          type: string
        userFacingId:
          type: string
    protobufAny:
      type: object
      properties:
        '@type':
          type: string
          description: >-
            A URL/resource name that uniquely identifies the type of the
            serialized

            protocol buffer message. This string must contain at least

            one "/" character. The last segment of the URL's path must represent

            the fully qualified name of the type (as in

            `path/google.protobuf.Duration`). The name should be in a canonical
            form

            (e.g., leading "." is not accepted).


            In practice, teams usually precompile into the binary all types that
            they

            expect it to use in the context of Any. However, for URLs which use
            the

            scheme `http`, `https`, or no scheme, one can optionally set up a
            type

            server that maps type URLs to message definitions as follows:


            * If no scheme is provided, `https` is assumed.

            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official

            protobuf release, and it is not used for type URLs beginning with

            type.googleapis.com. As of May 2023, there are no widely used type
            server

            implementations and no plans to implement one.


            Schemes other than `http`, `https` (or the empty scheme) might be

            used with implementation specific semantics.
      additionalProperties: {}
      description: >-
        `Any` contains an arbitrary serialized protocol buffer message along
        with a

        URL that describes the type of the serialized message.


        Protobuf library provides support to pack/unpack Any values in the form

        of utility functions or additional generated methods of the Any type.


        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }
            // or ...
            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
              foo = any.unpack(Foo.getDefaultInstance());
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use

        'type.googleapis.com/full.type.name' as the type URL and the unpack

        methods only use the fully qualified type name after the last '/'

        in the type URL, for example "foo.bar.com/x/y.z" will yield type

        name "y.z".


        JSON

        ====

        The JSON representation of an `Any` value uses the regular

        representation of the deserialized, embedded message, with an

        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON

        representation, that representation will be embedded adding a field

        `value` which holds the custom JSON in addition to the `@type`

        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
    protobufNullValue:
      type: string
      enum:
        - NULL_VALUE
      default: NULL_VALUE
      description: >-
        `NullValue` is a singleton enumeration to represent the null value for
        the

        `Value` type union.


        The JSON representation for `NullValue` is JSON `null`.

         - NULL_VALUE: Null value.
    quotav1SourceType:
      type: string
      enum:
        - SOURCE_TYPE_UNSPECIFIED
        - SOURCE_TYPE_LOGS
        - SOURCE_TYPE_SPANS
      default: SOURCE_TYPE_UNSPECIFIED
    rbacv2CustomRole:
      type: object
      properties:
        roleId:
          type: integer
          format: int64
        teamId:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        parentRoleId:
          type: integer
          format: int64
        permissions:
          type: array
          items:
            type: string
        parentRoleName:
          type: string
    rbacv2Permissions:
      type: object
      properties:
        permissions:
          type: array
          items:
            type: string
    rbacv2SystemRole:
      type: object
      properties:
        roleId:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string
    routingRoutingRule:
      type: object
      properties:
        condition:
          type: string
          example: alertDef.priority == 'P3'
          title: >-
            Condition template that is rendered to true or false and used to
            determine if the rule should be applied
        targets:
          type: array
          items:
            $ref: '#/components/schemas/routingRoutingTarget'
          title: List of targets to send the notification to
        customDetails:
          type: object
          additionalProperties:
            type: string
        name:
          type: string
      description: Defines routing rule for notifications
      title: Routing Rule
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
      required:
        - condition
        - targets
    routingRoutingTarget:
      type: object
      properties:
        deprecatedConnectorId:
          type: string
          title: Connector ID to send the notification to
        deprecatedPresetId:
          type: string
          title: >-
            Preset to use for rendering notification content, default preset is
            used if not provided
        customDetails:
          type: object
          additionalProperties:
            type: string
        connectorIdentifier:
          $ref: '#/components/schemas/notification_centerConnectorIdentifier'
        presetIdentifier:
          $ref: >-
            #/components/schemas/coralogixapisnotification_centerPresetIdentifier
        connectorId:
          type: string
        presetId:
          type: string
      description: Defines routing target for notifications
      title: Routing Target
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
      required:
        - connectorId
    rpcCode:
      type: string
      enum:
        - OK
        - CANCELLED
        - UNKNOWN
        - INVALID_ARGUMENT
        - DEADLINE_EXCEEDED
        - NOT_FOUND
        - ALREADY_EXISTS
        - PERMISSION_DENIED
        - UNAUTHENTICATED
        - RESOURCE_EXHAUSTED
        - FAILED_PRECONDITION
        - ABORTED
        - OUT_OF_RANGE
        - UNIMPLEMENTED
        - INTERNAL
        - UNAVAILABLE
        - DATA_LOSS
      default: OK
      description: >-
        The canonical error codes for gRPC APIs.



        Sometimes multiple error codes may apply.  Services should return

        the most specific error code that applies.  For example, prefer

        `OUT_OF_RANGE` over `FAILED_PRECONDITION` if both codes apply.

        Similarly prefer `NOT_FOUND` or `ALREADY_EXISTS` over
        `FAILED_PRECONDITION`.

         - OK: Not an error; returned on success.

        HTTP Mapping: 200 OK
         - CANCELLED: The operation was cancelled, typically by the caller.

        HTTP Mapping: 499 Client Closed Request
         - UNKNOWN: Unknown error.  For example, this error may be returned when
        a `Status` value received from another address space belongs to

        an error space that is not known in this address space.  Also

        errors raised by APIs that do not return enough error information

        may be converted to this error.


        HTTP Mapping: 500 Internal Server Error
         - INVALID_ARGUMENT: The client specified an invalid argument.  Note that this differs
        from `FAILED_PRECONDITION`.  `INVALID_ARGUMENT` indicates arguments

        that are problematic regardless of the state of the system

        (e.g., a malformed file name).


        HTTP Mapping: 400 Bad Request
         - DEADLINE_EXCEEDED: The deadline expired before the operation could complete. For operations
        that change the state of the system, this error may be returned

        even if the operation has completed successfully.  For example, a

        successful response from a server could have been delayed long

        enough for the deadline to expire.


        HTTP Mapping: 504 Gateway Timeout
         - NOT_FOUND: Some requested entity (e.g., file or directory) was not found.

        Note to server developers: if a request is denied for an entire class

        of users, such as gradual feature rollout or undocumented allowlist,

        `NOT_FOUND` may be used. If a request is denied for some users within

        a class of users, such as user-based access control, `PERMISSION_DENIED`

        must be used.


        HTTP Mapping: 404 Not Found
         - ALREADY_EXISTS: The entity that a client attempted to create (e.g., file or directory)
        already exists.


        HTTP Mapping: 409 Conflict
         - PERMISSION_DENIED: The caller does not have permission to execute the specified
        operation. `PERMISSION_DENIED` must not be used for rejections

        caused by exhausting some resource (use `RESOURCE_EXHAUSTED`

        instead for those errors). `PERMISSION_DENIED` must not be

        used if the caller can not be identified (use `UNAUTHENTICATED`

        instead for those errors). This error code does not imply the

        request is valid or the requested entity exists or satisfies

        other pre-conditions.


        HTTP Mapping: 403 Forbidden
         - UNAUTHENTICATED: The request does not have valid authentication credentials for the
        operation.


        HTTP Mapping: 401 Unauthorized
         - RESOURCE_EXHAUSTED: Some resource has been exhausted, perhaps a per-user quota, or
        perhaps the entire file system is out of space.


        HTTP Mapping: 429 Too Many Requests
         - FAILED_PRECONDITION: The operation was rejected because the system is not in a state
        required for the operation's execution.  For example, the directory

        to be deleted is non-empty, an rmdir operation is applied to

        a non-directory, etc.


        Service implementors can use the following guidelines to decide

        between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`:
         (a) Use `UNAVAILABLE` if the client can retry just the failing call.
         (b) Use `ABORTED` if the client should retry at a higher level. For
             example, when a client-specified test-and-set fails, indicating the
             client should restart a read-modify-write sequence.
         (c) Use `FAILED_PRECONDITION` if the client should not retry until
             the system state has been explicitly fixed. For example, if an "rmdir"
             fails because the directory is non-empty, `FAILED_PRECONDITION`
             should be returned since the client should not retry unless
             the files are deleted from the directory.

        HTTP Mapping: 400 Bad Request
         - ABORTED: The operation was aborted, typically due to a concurrency issue such as
        a sequencer check failure or transaction abort.


        See the guidelines above for deciding between `FAILED_PRECONDITION`,

        `ABORTED`, and `UNAVAILABLE`.


        HTTP Mapping: 409 Conflict
         - OUT_OF_RANGE: The operation was attempted past the valid range.  E.g., seeking or
        reading past end-of-file.


        Unlike `INVALID_ARGUMENT`, this error indicates a problem that may

        be fixed if the system state changes. For example, a 32-bit file

        system will generate `INVALID_ARGUMENT` if asked to read at an

        offset that is not in the range [0,2^32-1], but it will generate

        `OUT_OF_RANGE` if asked to read from an offset past the current

        file size.


        There is a fair bit of overlap between `FAILED_PRECONDITION` and

        `OUT_OF_RANGE`.  We recommend using `OUT_OF_RANGE` (the more specific

        error) when it applies so that callers who are iterating through

        a space can easily look for an `OUT_OF_RANGE` error to detect when

        they are done.


        HTTP Mapping: 400 Bad Request
         - UNIMPLEMENTED: The operation is not implemented or is not supported/enabled in this
        service.


        HTTP Mapping: 501 Not Implemented
         - INTERNAL: Internal errors.  This means that some invariants expected by the
        underlying system have been broken.  This error code is reserved

        for serious errors.


        HTTP Mapping: 500 Internal Server Error
         - UNAVAILABLE: The service is currently unavailable.  This is most likely a
        transient condition, which can be corrected by retrying with

        a backoff. Note that it is not always safe to retry

        non-idempotent operations.


        See the guidelines above for deciding between `FAILED_PRECONDITION`,

        `ABORTED`, and `UNAVAILABLE`.


        HTTP Mapping: 503 Service Unavailable
         - DATA_LOSS: Unrecoverable data loss or corruption.

        HTTP Mapping: 500 Internal Server Error
    rpcStatus:
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: |-
            The status code, which should be an enum value of
            [google.rpc.Code][google.rpc.Code].
        message:
          type: string
          description: >-
            A developer-facing error message, which should be in English. Any

            user-facing error message should be localized and sent in the

            [google.rpc.Status.details][google.rpc.Status.details] field, or
            localized

            by the client.
        details:
          type: array
          items:
            $ref: '#/components/schemas/protobufAny'
          description: >-
            A list of messages that carry the error details.  There is a common
            set of

            message types for APIs to use.
      description: >-
        The `Status` type defines a logical error model that is suitable for

        different programming environments, including REST APIs and RPC APIs. It
        is

        used by [gRPC](https://github.com/grpc). Each `Status` message contains

        three pieces of data: error code, error message, and error details.


        You can find out more about this error model and how to work with it in
        the

        [API Design Guide](https://cloud.google.com/apis/design/errors).
    servicesAssignDashboardFolderResponse:
      type: object
      title: Assign dashboard to folder response data structure
      externalDocs:
        description: Find out more about Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    servicesCreateDashboardFolderRequest:
      type: object
      properties:
        requestId:
          type: string
        folder:
          $ref: '#/components/schemas/commonDashboardFolder'
      title: Create dashboard folder request data structure
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    servicesCreateDashboardFolderResponse:
      type: object
      title: Create dashboard folder response data structure
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    servicesCreateDashboardRequest:
      type: object
      properties:
        requestId:
          type: string
        dashboard:
          $ref: '#/components/schemas/astDashboard'
        isLocked:
          type: boolean
      title: Create dashboard request data structure
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    servicesCreateDashboardResponse:
      type: object
      properties:
        dashboardId:
          type: string
      title: Create dashboard response data structure
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    servicesCreateViewFolderRequest:
      type: object
      properties:
        name:
          type: string
          example: My Folder
          description: Folder name
          title: View folder name
          minLength: 1
      description: Create view folder.
      title: CreateViewFolderRequest
    servicesCreateViewFolderResponse:
      type: object
      properties:
        folder:
          $ref: '#/components/schemas/v1ViewFolder'
      description: Request for creating view folder.
      title: CreateViewFolderRequest
    servicesCreateViewRequest:
      type: object
      properties:
        name:
          type: string
          example: Logs view
          description: View name
          minLength: 1
        searchQuery:
          $ref: '#/components/schemas/v1SearchQuery'
        timeSelection:
          $ref: '#/components/schemas/v1TimeSelection'
        filters:
          $ref: '#/components/schemas/v1SelectedFilters'
        folderId:
          type: string
          format: uuid
          example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
          description: Unique identifier for folders
          maxLength: 36
          minLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
      description: View folder.
      title: ViewFolder
      required:
        - name
        - timeSelection
    servicesCreateViewResponse:
      type: object
      properties:
        view:
          $ref: '#/components/schemas/servicesView'
    servicesDashboardCatalogItem:
      type: object
      properties:
        id:
          type: string
          example: 6U1Q8Hpa263Se8PkRKaiE
          title: Dashboard unique identifier
        name:
          type: string
        description:
          type: string
        isDefault:
          type: boolean
        isPinned:
          type: boolean
        createTime:
          type: string
          format: date-time
        updateTime:
          type: string
          format: date-time
        folder:
          $ref: '#/components/schemas/commonDashboardFolder'
        authorId:
          type: string
        isLocked:
          type: boolean
        lockerAuthorId:
          type: string
      title: Dashboard catalog item data structure
    servicesDeleteDashboardFolderResponse:
      type: object
      title: Delete dashboard folder response data structure
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    servicesDeleteDashboardResponse:
      type: object
      title: Delete dashboard response data structure
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    servicesDeleteViewFolderResponse:
      type: object
    servicesDeleteViewResponse:
      type: object
    servicesGetDashboardCatalogResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/servicesDashboardCatalogItem'
      title: Get dashboard catalog response data structure.
    servicesGetDashboardFolderResponse:
      type: object
      properties:
        folder:
          $ref: '#/components/schemas/commonDashboardFolder'
      title: Get dashboard folder response data structure
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    servicesGetDashboardResponse:
      type: object
      properties:
        dashboard:
          $ref: '#/components/schemas/astDashboard'
        updatedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updaterAuthorId:
          type: string
        updaterName:
          type: string
        authorId:
          type: string
        authorName:
          type: string
        updatedOriginType:
          $ref: '#/components/schemas/servicesTokenOriginType'
        createdOriginType:
          $ref: '#/components/schemas/servicesTokenOriginType'
        isLocked:
          type: boolean
        lockerAuthorId:
          type: string
        lockerName:
          type: string
      title: Get dashboard response data structure
      externalDocs:
        description: Find out more about Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    servicesGetViewFolderResponse:
      type: object
      properties:
        folder:
          $ref: '#/components/schemas/v1ViewFolder'
    servicesGetViewResponse:
      type: object
      properties:
        view:
          $ref: '#/components/schemas/servicesView'
    servicesListDashboardFoldersResponse:
      type: object
      properties:
        folder:
          type: array
          items:
            $ref: '#/components/schemas/commonDashboardFolder'
      title: List dashboard folders response data structure
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    servicesListViewFoldersResponse:
      type: object
      properties:
        folders:
          type: array
          items:
            $ref: '#/components/schemas/v1ViewFolder'
          title: List of view folders
    servicesListViewsResponse:
      type: object
      properties:
        views:
          type: array
          items:
            $ref: '#/components/schemas/servicesView'
          title: List of views
    servicesPinDashboardResponse:
      type: object
      title: Pin dashboard response data structure
      externalDocs:
        description: Find out more about Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    servicesReplaceDashboardFolderRequest:
      type: object
      properties:
        requestId:
          type: string
        folder:
          $ref: '#/components/schemas/commonDashboardFolder'
      title: Replace dashboard folder request data structure
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    servicesReplaceDashboardFolderResponse:
      type: object
      title: Replace dashboard folder response data structure
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    servicesReplaceDashboardRequest:
      type: object
      properties:
        requestId:
          type: string
        dashboard:
          $ref: '#/components/schemas/astDashboard'
        isLocked:
          type: boolean
      title: Replace dashboard request data structure
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    servicesReplaceDashboardResponse:
      type: object
      title: Create dashboard response data structure
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    servicesReplaceDefaultDashboardResponse:
      type: object
      title: Replace default dashboard response data structure
      externalDocs:
        description: Find out more about Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    servicesReplaceViewFolderResponse:
      type: object
      properties:
        folder:
          $ref: '#/components/schemas/v1ViewFolder'
    servicesReplaceViewResponse:
      type: object
      properties:
        view:
          $ref: '#/components/schemas/servicesView'
    servicesTokenOriginType:
      type: string
      enum:
        - TOKEN_ORIGIN_TYPE_UNSPECIFIED
        - TOKEN_ORIGIN_TYPE_USER
        - TOKEN_ORIGIN_TYPE_API
      default: TOKEN_ORIGIN_TYPE_UNSPECIFIED
    servicesUnpinDashboardResponse:
      type: object
      title: Unpin dashboard response data structure
      externalDocs:
        description: Find out more about Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    servicesView:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 52
          description: id
          title: View id
        name:
          type: string
          example: Logs view
          description: View name
          title: View name
          minLength: 1
        searchQuery:
          $ref: '#/components/schemas/v1SearchQuery'
        timeSelection:
          $ref: '#/components/schemas/v1TimeSelection'
        filters:
          $ref: '#/components/schemas/v1SelectedFilters'
        folderId:
          type: string
          format: uuid
          example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
          description: Unique identifier for folders
          maxLength: 36
          minLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
        isCompactMode:
          type: boolean
      description: Response for views.
      title: View
      required:
        - name
        - id
        - timeSelection
    slov1Grouping:
      type: object
      properties:
        labels:
          type: array
          items:
            type: string
    slov1LabelValue:
      type: object
      properties:
        label:
          type: string
        value:
          type: string
    slov1Revision:
      type: object
      properties:
        revision:
          type: integer
          format: int32
        updateTime:
          type: string
          format: date-time
    spans2metricsv2SpansQuery:
      type: object
      properties:
        lucene:
          type: string
          example: applicationName:myApp
          title: lucene query
        applicationnameFilters:
          type: array
          example: myApp
          items:
            type: string
          title: application name filters
        subsystemnameFilters:
          type: array
          example: mySubsystem
          items:
            type: string
          title: subsystem name filters
        actionFilters:
          type: array
          example: myAction
          items:
            type: string
          title: action filters
        serviceFilters:
          type: array
          example: myService
          items:
            type: string
          title: service filters
      description: This data structure represents a query for spans.
      title: SpansQuery
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    ssov2SetActiveRequest:
      type: object
      properties:
        teamId:
          type: integer
          format: int64
        isActive:
          type: boolean
      description: >-
        This data structure is used to activate or deactivate a SAML identity
        provider
      title: Set Active Request
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - teamId
        - isActive
    ssov2SetActiveResponse:
      type: object
    v1ARMStack:
      type: object
      properties:
        subscriptionId:
          type: string
        resourceGroupName:
          type: string
      description: This data structure represents an Azure Resource Manager stack.
      title: ARM stack
      externalDocs:
        description: >-
          Find out more about the Azure Resource Manager (ARM) integration in
          our documentation
        url: >-
          https://coralogix.com/docs/integrations/azure/azure-resource-manager-integration-packages/
    v1AcknowledgeIncidentsRequest:
      type: object
      properties:
        incidentIds:
          type: array
          example:
            - incident_id_1
            - incident_id_2
          items:
            type: string
          description: List of incident IDs to acknowledge
      description: Request to acknowledge one or more incidents
      title: Acknowledge incidents request
      required:
        - incidentIds
    v1AcknowledgeIncidentsResponse:
      type: object
      properties:
        incidents:
          type: array
          items:
            $ref: '#/components/schemas/v1Incident'
          description: List of incidents after acknowledgment
      description: Response containing the updated incidents after acknowledgment
      title: Acknowledge incidents response
      required:
        - incidents
    v1ActivateRetentionsRequest:
      type: object
    v1ActivateRetentionsResponse:
      type: object
      properties:
        activateRetentions:
          type: boolean
          example: true
      description: >-
        This data structure is obtained after setting the active status of
        retentions
      title: Activate Retentions Response
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - retentions
    v1ActiveTimeframe:
      type: object
      properties:
        startTime:
          type: string
          description: >-
            Timeframe start time: The point in the time(date-time) when the rule
            will start to be active.
        endTime:
          type: string
          description: >-
            Timeframe end time: The point in the time(date-time) when the rule
            will finish to be active.
        timezone:
          type: string
          description: >-
            Timeframe timezone: The rule will be active according to a specific
            timezone.
    v1AddEnrichmentsRequest:
      type: object
      properties:
        requestEnrichments:
          type: array
          items:
            $ref: '#/components/schemas/v1EnrichmentRequestModel'
      description: This response data structure represents a collection of enrichments
      title: Enrichments Creation Request
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - requestEnrichments
    v1AddEnrichmentsResponse:
      type: object
      properties:
        enrichments:
          type: array
          items:
            $ref: '#/components/schemas/coralogixenrichmentv1Enrichment'
      description: Response data structure for enrichments creation
      title: Encrichments Creation Response
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - enrichments
    v1AddUsersToTeamGroupResponse:
      type: object
      properties:
        teamId:
          $ref: '#/components/schemas/coralogixpermissionsv1TeamId'
      description: >-
        Response confirming the successful addition of users to the specified
        team group.
      title: AddUsersToTeamGroupResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1AddUsersToTeamGroupsRequest:
      type: object
      properties:
        teamId:
          $ref: '#/components/schemas/coralogixpermissionsv1TeamId'
        addUsersToGroup:
          type: array
          items:
            $ref: >-
              #/components/schemas/v1AddUsersToTeamGroupsRequestAddUsersToTeamGroup
      description: >-
        Bulk request to assign users to multiple team groups simultaneously,
        efficiently managing group memberships at scale.
      title: AddUsersToTeamGroupsRequest
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1AddUsersToTeamGroupsRequestAddUsersToTeamGroup:
      type: object
      properties:
        groupId:
          $ref: '#/components/schemas/v1TeamGroupId'
        userIds:
          type: array
          items:
            $ref: '#/components/schemas/permissionsv1UserId'
          title: / Users to add to group
      description: >-
        This data structure represents the information associated with an API
        key.
      title: AddUsersToTeamGroup
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1AddUsersToTeamGroupsResponse:
      type: object
      description: >-
        Response confirming the successful bulk addition of users to multiple
        team groups.
      title: AddUsersToTeamGroupsResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1AggregationType:
      type: string
      enum:
        - AGGREGATION_TYPE_UNSPECIFIED
        - AGGREGATION_TYPE_AVG
        - AGGREGATION_TYPE_MIN
        - AGGREGATION_TYPE_MAX
        - AGGREGATION_TYPE_SUM
        - AGGREGATION_TYPE_COUNT
      default: AGGREGATION_TYPE_UNSPECIFIED
    v1AlertSchedulerRule:
      type: object
      properties:
        uniqueIdentifier:
          type: string
          description: 'Rule unique_identifier: The rule id.'
        id:
          type: string
          description: 'Rule id: The rule version id.'
        name:
          type: string
          description: Rule name.
        description:
          type: string
          description: Rule description.
        metaLabels:
          type: array
          items:
            $ref: '#/components/schemas/alertingmeta_labels_protobufv1MetaLabel'
          description: 'Rule meta_labels: Rule tags over the system.'
        filter:
          $ref: '#/components/schemas/alertingalert_scheduler_rule_protobufv1Filter'
        schedule:
          $ref: '#/components/schemas/v1Schedule'
        enabled:
          type: boolean
          description: 'Rule enabled: The rule activation mode.'
        createdAt:
          type: string
          description: 'Rule created_at: The date-time when the rule was created.'
        updatedAt:
          type: string
          description: 'Rule updated_at: The date-time when the rule was updated.'
    v1AlertSchedulerRuleIds:
      type: object
      properties:
        alertSchedulerRuleIds:
          type: array
          items:
            type: string
    v1AlertSchedulerRuleVersionIds:
      type: object
      properties:
        alertSchedulerRuleVersionIds:
          type: array
          items:
            type: string
    v1AlertSchedulerRuleWithActiveTimeframe:
      type: object
      properties:
        alertSchedulerRule:
          $ref: '#/components/schemas/v1AlertSchedulerRule'
        nextActiveTimeframes:
          type: array
          items:
            $ref: '#/components/schemas/v1ActiveTimeframe'
    v1AlertUniqueIds:
      type: object
      properties:
        value:
          type: array
          items:
            type: string
    v1AllowParameters:
      type: object
      properties:
        keepBlockedLogs:
          type: boolean
        rule:
          type: string
    v1ApplicationNameConstraint:
      type: object
      properties:
        value:
          type: string
    v1ArchiveRetention:
      type: object
      properties:
        id:
          type: string
    v1AssignIncidentsRequest:
      type: object
      properties:
        incidentIds:
          type: array
          example:
            - incident_id_1
            - incident_id_2
          items:
            type: string
          description: List of incident IDs to assign
        assignedTo:
          $ref: '#/components/schemas/v1UserDetails'
      description: Request to assign one or more incidents to a user
      title: Assign incidents request
      required:
        - incidentIds
        - assignedTo
    v1AssignIncidentsResponse:
      type: object
      properties:
        incidents:
          type: array
          items:
            $ref: '#/components/schemas/v1Incident'
          description: List of incidents after assignment
      description: Response containing the updated incidents after assignment
      title: Assign incidents response
      required:
        - incidents
    v1AssigneeWithCount:
      type: object
      properties:
        assignee:
          type: string
          example: assignee
        count:
          type: integer
          format: int32
          example: 10
      title: Assignee with count
      required:
        - assignee
        - count
    v1Assignment:
      type: object
      properties:
        assignedTo:
          $ref: '#/components/schemas/v1UserDetails'
        assignedBy:
          $ref: '#/components/schemas/v1UserDetails'
      description: >-
        Details of the user who assigned the incident and the user to whom it
        was assigned
      title: Assignment
      required:
        - assignedTo
        - assignedBy
    v1AtomicBatchCreatePolicyRequest:
      type: object
      properties:
        policyRequests:
          type: array
          items:
            $ref: '#/components/schemas/v1CreatePolicyRequest'
      description: This data structure is used to create multiple policies atomically.
      title: Atomic Batch Create Policy Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - policyRequests
    v1AtomicBatchCreatePolicyResponse:
      type: object
      properties:
        createResponses:
          type: array
          items:
            $ref: '#/components/schemas/v1CreatePolicyResponse'
      description: >-
        This data structure is obtained when creating multiple policies
        atomically.
      title: Atomic Batch Create Policy Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - createResponses
    v1AtomicOverwriteEnrichmentsRequest:
      type: object
      properties:
        enrichmentType:
          $ref: '#/components/schemas/coralogixenrichmentv1EnrichmentType'
        enrichmentFields:
          type: array
          items:
            $ref: '#/components/schemas/v1EnrichmentFieldDefinition'
      title: >-
        Deletes all enrichments of the given type and replaces them with the new
        ones
    v1AtomicOverwriteEnrichmentsResponse:
      type: object
      properties:
        enrichments:
          type: array
          items:
            $ref: '#/components/schemas/coralogixenrichmentv1Enrichment'
    v1AtomicOverwriteLogPoliciesRequest:
      type: object
      properties:
        policies:
          type: array
          items:
            $ref: '#/components/schemas/v1CreateLogPolicyRequest'
      description: >-
        In an atomic operation delete all existing log policies and create the
        provided list by order.
      title: Atomic Overwrite Log Policies Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - policies
    v1AtomicOverwriteLogPoliciesResponse:
      type: object
      properties:
        createResponses:
          type: array
          items:
            $ref: '#/components/schemas/v1CreatePolicyResponse'
      description: This data structue is obtained when overwriting log policies atomically.
      title: Atomic Overwrite Log Policies Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - createResponses
    v1AtomicOverwriteSpanPoliciesRequest:
      type: object
      properties:
        policies:
          type: array
          items:
            $ref: '#/components/schemas/v1CreateSpanPolicyRequest'
      description: >-
        In an atomic operation delete all existing span policies and create the
        provided list by order.
      title: Atomic Overwrite Span Policies Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - policies
    v1AtomicOverwriteSpanPoliciesResponse:
      type: object
      properties:
        createResponses:
          type: array
          items:
            $ref: '#/components/schemas/v1CreatePolicyResponse'
      description: >-
        This data structue is obtained when overwriting span policies
        atomically.
      title: Atomic Overwrite Span Policies Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - createResponses
    v1AwsEventBridgeConfig:
      type: object
      properties:
        eventBusArn:
          type: string
          example: arn:aws:events:us-east-1:123456789012:event-bus/default
        detail:
          type: string
          example:
            key: value
        detailType:
          type: string
          example: detail_type
        source:
          type: string
          example: source
        roleName:
          type: string
          example: role_name
      title: AWS EventBridge configuration
      required:
        - eventBusArn
        - detail
        - detailType
        - source
        - roleName
    v1AwsType:
      type: object
      properties:
        resourceType:
          type: string
          example: ec2
    v1BatchExecuteSloResponse:
      type: object
      properties:
        matchingResponses:
          type: array
          items:
            $ref: '#/components/schemas/v1SloExecutionResponse'
        status:
          $ref: '#/components/schemas/v1ResponseStatus'
    v1BatchGetConnectorSummariesResponse:
      type: object
      properties:
        connectorSummaries:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v1ConnectorSummary'
        notFoundIds:
          type: array
          example:
            - connector-id-3
          items:
            type: string
      description: >-
        Response containing the requested connector summaries and any IDs not
        found
      title: Batch Get Connector Summaries Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1BatchGetConnectorsResponse:
      type: object
      properties:
        connectors:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v1Connector'
        notFoundIds:
          type: array
          example:
            - connector-id-3
          items:
            type: string
      description: Response containing the requested connectors and any IDs not found
      title: Batch Get Connectors Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1BatchGetGlobalRoutersResponse:
      type: object
      properties:
        routers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v1GlobalRouter'
        notFoundIds:
          type: array
          example:
            - global-router-id-3
          items:
            type: string
      description: >-
        Response containing requested global routers and missing global routers
        ids
      title: Batch Get Global Routers Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1BatchGetIncidentResponse:
      type: object
      properties:
        incidents:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v1Incident'
          description: Map of incident IDs to their corresponding incidents
        notFoundIds:
          type: array
          example:
            - not_found_id_1
            - not_found_id_2
          items:
            type: string
          description: List of IDs that were not found
      description: >-
        Response containing the requested incidents and any IDs that weren't
        found
      title: Batch get incidents response
      required:
        - incidents
        - notFoundIds
    v1BatchGetPresetsResponse:
      type: object
      properties:
        presets:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/presetsv1Preset'
        notFoundIds:
          type: array
          items:
            type: string
      description: Response containing the requested presets and any IDs not found
      title: Batch Get Presets Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1BatchGetServiceSlosResponse:
      type: object
      properties:
        slos:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v1ServiceSlo'
        notFoundIds:
          type: array
          example:
            - slo_id1
            - slo_id2
          items:
            type: string
      description: This data structure represents a response to batch get Service SLOs.
      title: Batch Get Service SLOs Response
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - slos
    v1BatchGetSlosResponse:
      type: object
      properties:
        slos:
          type: array
          items:
            $ref: '#/components/schemas/v1Slo'
        notFoundIds:
          type: array
          items:
            type: string
    v1BlockParameters:
      type: object
      properties:
        keepBlockedLogs:
          type: boolean
        rule:
          type: string
    v1BulkDeleteRuleGroupResponse:
      type: object
    v1BulkTestLogPoliciesRequest:
      type: object
      properties:
        metaFieldsValuesList:
          type: array
          items:
            $ref: '#/components/schemas/v1LogMetaFieldsValues'
      description: Request to test multiple log policies.
      title: Bulk Test Log Policies Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - metaFieldsValuesList
    v1BulkTestLogPoliciesResponse:
      type: object
      properties:
        testPoliciesBulkResult:
          type: array
          items:
            $ref: '#/components/schemas/v1TestPoliciesResult'
      description: Response to test multiple log policies.
      title: Bulk Test Log Policies Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - testPoliciesBulkResult
    v1ChangelogEntry:
      type: object
      properties:
        version:
          type: string
        descriptionMd:
          type: string
      title: Changelog entry
      required:
        - version
        - descriptionMd
    v1CleanupTestingRevisionRequest:
      type: object
      properties:
        id:
          type: string
      title: Cleanup testing revision request
      required:
        - id
    v1CleanupTestingRevisionResponse:
      type: object
      title: Cleanup testing revision response
    v1CloseIncidentsRequest:
      type: object
      properties:
        incidentIds:
          type: array
          example:
            - incident_id_1
            - incident_id_2
          items:
            type: string
          description: List of incident IDs to close
      description: Request to close one or more incidents
      title: Close incidents request
      required:
        - incidentIds
    v1CloseIncidentsResponse:
      type: object
      properties:
        incidents:
          type: array
          items:
            $ref: '#/components/schemas/v1Incident'
          description: List of incidents after closing
      description: Response containing the updated incidents after closing
      title: Close incidents response
      required:
        - incidents
    v1CloudFormationStack:
      type: object
      properties:
        arn:
          type: string
        region:
          type: string
      description: This data structure represents a CloudFormation stack.
      title: CloudFormation stack
      externalDocs:
        description: >-
          Find out more about the AWS CloudFormation integration in our
          documentation
        url: https://coralogix.com/docs/integrations/aws/aws-cloudformation-logs/
    v1CompanyEnrichmentSettings:
      type: object
      properties:
        enrichmentAmountLimit:
          type: integer
          format: int64
        enrichmentsInUse:
          type: integer
          format: int64
        sizeLimitBytes:
          type: string
          format: uint64
        rowLimit:
          type: integer
          format: int64
        queryOnlySizeLimitBytes:
          type: string
          format: uint64
        queryOnlyRowLimit:
          type: integer
          format: int64
    v1CompareType:
      type: string
      enum:
        - COMPARE_TYPE_UNSPECIFIED
        - COMPARE_TYPE_IS
        - COMPARE_TYPE_START_WITH
        - COMPARE_TYPE_ENDS_WITH
        - COMPARE_TYPE_INCLUDES
      default: COMPARE_TYPE_UNSPECIFIED
    v1ComparisonOperator:
      type: string
      enum:
        - COMPARISON_OPERATOR_UNSPECIFIED
        - COMPARISON_OPERATOR_GREATER_THAN
        - COMPARISON_OPERATOR_GREATER_THAN_OR_EQUALS
        - COMPARISON_OPERATOR_LESS_THAN
        - COMPARISON_OPERATOR_LESS_THAN_OR_EQUALS
      default: COMPARISON_OPERATOR_UNSPECIFIED
    v1ConnectionStatus:
      type: string
      enum:
        - PENDING
        - ACTIVE
        - FAILING
        - STATUS_UNKNOWN
      default: PENDING
    v1Connector:
      type: object
      properties:
        id:
          type: string
          example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
          title: >-
            A unique identifier - automatically generated unless provided by the
            user
        userDefinedId:
          type: string
          example: user-connector-id
          title: DEPRECATED - A unique identifier provided by the user
        type:
          $ref: '#/components/schemas/notification_centerConnectorType'
        teamId:
          type: integer
          format: int64
          example: '12345'
        name:
          type: string
          example: My Slack Connector
          maxLength: 200
        description:
          type: string
          example: Connector for team notifications
          maxLength: 5000
        createTime:
          type: string
          format: date-time
          title: System-generated timestamp for when the connector was last updated
        updateTime:
          type: string
          format: date-time
          title: System-generated timestamp for when the connector was last updated
        configOverrides:
          type: array
          items:
            $ref: '#/components/schemas/v1EntityTypeConfigOverrides'
          title: >-
            Configuration override templates for specific entity types, values
            from connector_configs will be used if not overridden
        connectorConfig:
          $ref: '#/components/schemas/v1ConnectorConfig'
      description: A connector configuration for sending notifications
      title: Connector
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
      required:
        - type
        - name
        - connector_configs
    v1ConnectorConfig:
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: >-
              #/components/schemas/coralogixapisnotification_centerConnectorConfigField
      description: Configuration for a specific output schema of a connector
      title: Connector Config
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1ConnectorSummary:
      type: object
      properties:
        id:
          type: string
        userDefinedId:
          type: string
          title: for declarative API
        type:
          $ref: '#/components/schemas/notification_centerConnectorType'
        teamId:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        createTime:
          type: string
          format: date-time
        updateTime:
          type: string
          format: date-time
    v1ConnectorTypeSummary:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/notification_centerConnectorType'
        count:
          type: integer
          format: int64
          example: '5'
      description: Summary information about a connector type
      title: Connector Type Summary
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1ContextualLabelValueWithCount:
      type: object
      properties:
        contextualLabelValue:
          type: string
          example: contextual_label_value
        count:
          type: integer
          format: int32
          example: 10
      title: Contextual label value with count
      required:
        - contextualLabelValue
        - count
    v1ContextualLabelValues:
      type: object
      properties:
        contextualLabelValues:
          type: array
          items:
            type: string
      description: Represents contextual label values for filtering incidents
      title: Contextual label values
      required:
        - contextualLabelValues
    v1ContextualLabelValuesWithCount:
      type: object
      properties:
        valuesWithCount:
          type: array
          items:
            $ref: '#/components/schemas/v1ContextualLabelValueWithCount'
      title: Contextual label values with count
      required:
        - valuesWithCount
    v1ContextualLabels:
      type: object
      properties:
        fieldName:
          type: string
          example: field_name
        fieldValue:
          type: string
          example: field_value
      title: Incident contextual labels
      required:
        - fieldName
        - fieldValue
    v1CreateAlertSchedulerRuleRequest:
      type: object
      properties:
        alertSchedulerRule:
          $ref: '#/components/schemas/v1AlertSchedulerRule'
    v1CreateAlertSchedulerRuleResponse:
      type: object
      properties:
        alertSchedulerRule:
          $ref: '#/components/schemas/v1AlertSchedulerRule'
    v1CreateBulkAlertSchedulerRuleResponse:
      type: object
      properties:
        createSuppressionResponses:
          type: array
          items:
            $ref: '#/components/schemas/v1CreateAlertSchedulerRuleResponse'
    v1CreateConnectorResponse:
      type: object
      properties:
        connector:
          $ref: '#/components/schemas/v1Connector'
      description: Response containing the created connector
      title: Create Connector Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1CreateCustomEnrichmentRequest:
      type: object
      properties:
        name:
          type: string
          example: custom_enrichment_name
        description:
          type: string
          example: custom_enrichment_description
        file:
          $ref: '#/components/schemas/v1File'
      description: This request data structure is used to create a custom enrichment
      title: Create Custom Enrichment Request
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - name
        - description
        - file
    v1CreateCustomEnrichmentResponse:
      type: object
      properties:
        message:
          type: string
          example: Custom enrichment created successfully
        customEnrichment:
          $ref: '#/components/schemas/v1CustomEnrichment'
      description: >-
        This response data structure is obtained when a custom enrichment is
        created
      title: Create Custom Enrichment Response
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - customEnrichment
    v1CreateCustomPresetResponse:
      type: object
      properties:
        preset:
          $ref: '#/components/schemas/presetsv1Preset'
      description: Response containing the created custom preset
      title: Create Custom Preset Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1CreateGenericPolicyRequest:
      type: object
      properties:
        name:
          type: string
          example: My Policy
        description:
          type: string
          example: My Policy Description
        priority:
          $ref: '#/components/schemas/coralogixquotav1Priority'
        applicationRule:
          $ref: '#/components/schemas/coralogixquotav1Rule'
        subsystemRule:
          $ref: '#/components/schemas/coralogixquotav1Rule'
        archiveRetention:
          $ref: '#/components/schemas/v1ArchiveRetention'
      description: This data structue is used to create a new policy.
      title: Create Generic Policy Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - name
        - description
        - priority
    v1CreateGlobalRouterResponse:
      type: object
      properties:
        router:
          $ref: '#/components/schemas/v1GlobalRouter'
      description: Response which contains a created global router
      title: Create Global Router Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1CreateLogPolicyRequest:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/v1CreateGenericPolicyRequest'
        logRules:
          $ref: '#/components/schemas/v1LogRules'
      description: This data structue is used to create a new log policy.
      title: Create Log Policy Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - policy
        - logRules
    v1CreateOrReplaceGlobalRouterResponse:
      type: object
      properties:
        router:
          $ref: '#/components/schemas/v1GlobalRouter'
      description: Response which contains a created or updated router
      title: Create Or Replace Global Router Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1CreateOutgoingWebhookRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/v1OutgoingWebhookInputData'
      title: Create outgoing webhook request
      required:
        - data
    v1CreateOutgoingWebhookResponse:
      type: object
      properties:
        id:
          type: string
          example: example_id
      title: Create outgoing webhook response
      required:
        - id
    v1CreatePolicyRequest:
      type: object
      properties:
        name:
          type: string
          example: My Policy
        description:
          type: string
          example: My Policy Description
        priority:
          $ref: '#/components/schemas/coralogixquotav1Priority'
        applicationRule:
          $ref: '#/components/schemas/coralogixquotav1Rule'
        subsystemRule:
          $ref: '#/components/schemas/coralogixquotav1Rule'
        archiveRetention:
          $ref: '#/components/schemas/v1ArchiveRetention'
        logRules:
          $ref: '#/components/schemas/v1LogRules'
        spanRules:
          $ref: '#/components/schemas/v1SpanRules'
      description: This data structue is used to create a new policy.
      title: Create Policy Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - name
        - priority
    v1CreatePolicyResponse:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/v1Policy'
      description: This data structue is obtained when creating a policy.
      title: Create Policy Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - policy
    v1CreateRuleGroupRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        hidden:
          type: boolean
        creator:
          type: string
        ruleMatchers:
          type: array
          items:
            $ref: '#/components/schemas/v1RuleMatcher'
        ruleSubgroups:
          type: array
          items:
            $ref: '#/components/schemas/v1CreateRuleGroupRequestCreateRuleSubgroup'
        order:
          type: integer
          format: int64
        teamId:
          $ref: '#/components/schemas/coralogixrulesv1TeamId'
    v1CreateRuleGroupRequestCreateRuleSubgroup:
      type: object
      properties:
        rules:
          type: array
          items:
            $ref: >-
              #/components/schemas/v1CreateRuleGroupRequestCreateRuleSubgroupCreateRule
        enabled:
          type: boolean
        order:
          type: integer
          format: int64
    v1CreateRuleGroupRequestCreateRuleSubgroupCreateRule:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        sourceField:
          type: string
        parameters:
          $ref: '#/components/schemas/v1RuleParameters'
        enabled:
          type: boolean
        order:
          type: integer
          format: int64
    v1CreateRuleGroupResponse:
      type: object
      properties:
        ruleGroup:
          $ref: '#/components/schemas/v1RuleGroup'
    v1CreateRuleGroupSet:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/v1InRuleGroup'
        name:
          type: string
      description: A set of rule groups to create.
      title: Create Rule Group Set
      externalDocs:
        description: Find out more about recording rules
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/metric-rules/recording-rules/
    v1CreateRuleGroupSetResult:
      type: object
      properties:
        id:
          type: string
      description: Result of creating a rule group set.
      title: Create Rule Group Set Result
      externalDocs:
        description: Find out more about recording rules
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/metric-rules/recording-rules/
    v1CreateScopeRequest:
      type: object
      properties:
        displayName:
          type: string
          example: scope_name
        description:
          type: string
          example: scope_description
        filters:
          type: array
          items:
            $ref: '#/components/schemas/coralogixapisscopesv1Filter'
        defaultExpression:
          type: string
          example: expression
      description: This data structure represents a request to create a scope
      title: Create Scope Request
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
      required:
        - displayName
        - filters
    v1CreateScopeResponse:
      type: object
      properties:
        scope:
          $ref: '#/components/schemas/coralogixapisscopesv1Scope'
      description: This data structure represents a response to create a scope
      title: Create Scope Response
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
      required:
        - scope
    v1CreateServiceSloRequest:
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/v1ServiceSlo'
      description: This data structure represents a request to create a Service SLO.
      title: Create Service SLO Request
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - slo
    v1CreateServiceSloResponse:
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/v1ServiceSlo'
      description: This data structure represents a response to create a Service SLO.
      title: Create Service SLO Response
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - slo
    v1CreateSloRequest:
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/v1Slo'
    v1CreateSloResponse:
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/v1Slo'
    v1CreateSpanPolicyRequest:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/v1CreateGenericPolicyRequest'
        spanRules:
          $ref: '#/components/schemas/v1SpanRules'
      description: This data structue is used to create a new span policy.
      title: Create Span Policy Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - policy
        - spanRules
    v1CreateTeamGroupRequest:
      type: object
      properties:
        name:
          type: string
          title: / Team group name
        teamId:
          $ref: '#/components/schemas/coralogixpermissionsv1TeamId'
        description:
          type: string
          title: / Team group description
        externalId:
          type: string
          description: / Team group external_id. Applies if team is externally defined.
        roleIds:
          type: array
          items:
            $ref: '#/components/schemas/v1RoleId'
          title: / Roles to associate with team group
        userIds:
          type: array
          items:
            $ref: '#/components/schemas/permissionsv1UserId'
          title: / Users to associate with team group
        scopeFilters:
          $ref: '#/components/schemas/v1ScopeFilters'
        nextGenScopeId:
          type: string
      description: >-
        Request to create a new team group with specified name, description,
        roles, users, and optional scope filters. Can be associated with a
        specific team or the authenticated team.
      title: CreateTeamGroupRequest
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1CreateTeamGroupResponse:
      type: object
      properties:
        groupId:
          $ref: '#/components/schemas/v1TeamGroupId'
      description: >-
        Response containing the unique identifier of the newly created team
        group.
      title: CreateTeamGroupResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1CustomEnrichment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        version:
          type: integer
          format: int64
        isQueryOnly:
          type: boolean
        fileName:
          type: string
        fileSize:
          type: integer
          format: int64
    v1CustomEnrichmentData:
      type: object
      properties:
        definition:
          $ref: '#/components/schemas/v1CustomEnrichment'
        textual:
          type: string
        binary:
          type: string
          format: byte
    v1CustomEnrichmentType:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
    v1CustomTimeSelection:
      type: object
      properties:
        fromTime:
          type: string
          format: date-time
          example: '2024-01-25T11:31:43.152Z'
          title: Custom time selection start timestamp
          minLength: 1
        toTime:
          type: string
          format: date-time
          example: '2024-01-25T11:35:43.152Z'
          title: Custom time selection end timestamp
          minLength: 1
      title: Custom time selection
      required:
        - fromTime
        - toTime
    v1Daily:
      type: object
    v1DataSource:
      type: object
      properties:
        provider:
          type: string
        exporter:
          type: string
        labelsMetric:
          type: string
    v1DataSourceTypeValues:
      type: object
      properties:
        dataSourceType:
          $ref: '#/components/schemas/coralogixglobal_mappingv1DataSourceType'
        destinationExtractionKeys:
          type: array
          items:
            type: string
    v1DeleteAlertSchedulerRuleResponse:
      type: object
    v1DeleteConnectorResponse:
      type: object
    v1DeleteContextualDataIntegrationResponse:
      type: object
      title: Delete contextual data integration response
    v1DeleteCustomEnrichmentResponse:
      type: object
      properties:
        message:
          type: string
          example: Custom enrichment deleted successfully
        customEnrichmentId:
          type: integer
          format: int64
          example: 1
    v1DeleteCustomPresetResponse:
      type: object
    v1DeleteGlobalRouterResponse:
      type: object
    v1DeleteIntegrationResponse:
      type: object
    v1DeleteOutgoingWebhookResponse:
      type: object
      title: Delete outgoing webhook response
    v1DeletePolicyResponse:
      type: object
      properties:
        id:
          type: string
          example: id
      description: This data structue is obtained when deleting a policy by its ID.
      title: Delete Policy Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - id
    v1DeleteRuleGroupResponse:
      type: object
    v1DeleteScopeResponse:
      type: object
    v1DeleteServiceSloResponse:
      type: object
    v1DeleteSloRequest:
      type: object
      properties:
        id:
          type: string
    v1DeleteSloResponse:
      type: object
      properties:
        effectedSloAlertIds:
          type: array
          items:
            type: string
    v1DeleteTeamGroupResponse:
      type: object
      description: >-
        Response confirming the successful deletion of a team group and its
        associated configurations.
      title: DeleteTeamGroupResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1DemistoConfig:
      type: object
      properties:
        uuid:
          type: string
          example: d838cd7b-087b-40c6-bc33-80997020f5d0
        payload:
          type: string
          example:
            key: value
      title: Demisto configuration
      required:
        - uuid
        - payload
    v1DeployExtensionRequest:
      type: object
      properties:
        id:
          type: string
        version:
          type: string
        itemIds:
          type: array
          items:
            type: string
            default: '[]'
        applications:
          type: array
          items:
            type: string
            default: '[]'
        subsystems:
          type: array
          items:
            type: string
            default: '[]'
        extensionDeployment:
          $ref: '#/components/schemas/v1ExtensionDeployment'
      title: Deploy extension request
      required:
        - id
        - version
        - itemIds
    v1DeployExtensionResponse:
      type: object
      properties:
        extensionDeployment:
          $ref: '#/components/schemas/v1ExtensionDeployment'
      title: Deploy extension response
      required:
        - extensionDeployment
    v1DeployedIntegrationInformation:
      type: object
      properties:
        id:
          type: string
        definitionKey:
          type: string
        definitionVersion:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/v1Parameter'
        integrationStatus:
          $ref: '#/components/schemas/v1IntegrationStatus'
      title: Deployed integration information
    v1Deprecation:
      type: object
      properties:
        reason:
          type: string
        replacementExtensions:
          type: array
          items:
            type: string
            default: '[]'
      title: Deprecation
      required:
        - reason
    v1DurationFrequency:
      type: string
      enum:
        - DURATION_FREQUENCY_UNSPECIFIED
        - DURATION_FREQUENCY_MINUTE
        - DURATION_FREQUENCY_HOUR
        - DURATION_FREQUENCY_DAY
      default: DURATION_FREQUENCY_UNSPECIFIED
    v1EmailGroupConfig:
      type: object
      properties:
        emailAddresses:
          type: array
          example:
            - example@coralogix.com
          items:
            type: string
      title: Email group configuration
    v1EnrichmentFieldDefinition:
      type: object
      properties:
        fieldName:
          type: string
          title: the field name of the key targeted for enrichment
        enrichedFieldName:
          type: string
          title: the field of the enriched key after enrichment
        selectedColumns:
          type: array
          items:
            type: string
          title: the columns to be selected from the enrichment
    v1EnrichmentRequestModel:
      type: object
      properties:
        fieldName:
          type: string
          example: sourceIPs
        enrichmentType:
          $ref: '#/components/schemas/coralogixenrichmentv1EnrichmentType'
        enrichedFieldName:
          type: string
        selectedColumns:
          type: array
          items:
            type: string
      description: The enrichment request model
      title: Enrichment Prototype
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - fieldName
        - enrichmentType
    v1EntityTypeConfigOverrides:
      type: object
      properties:
        deprecatedEntityType:
          type: string
        entityType:
          $ref: '#/components/schemas/coralogixapisnotification_centerEntityType'
        fields:
          type: array
          items:
            $ref: >-
              #/components/schemas/notification_centerTemplatedConnectorConfigField
    v1ErrorSli:
      type: object
    v1ExtensionBinary:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/v1ExtensionBinaryBinaryType'
        data:
          type: string
      title: Extension binary
      required:
        - type
        - data
    v1ExtensionBinaryBinaryType:
      type: string
      enum:
        - KIBANA_INDEX_PATTERN
      default: KIBANA_INDEX_PATTERN
    v1ExtensionData:
      type: object
      properties:
        id:
          type: string
          example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
        name:
          type: string
          example: AWS CloudWatch Extension
        description:
          type: string
          example: Integration with AWS CloudWatch for monitoring and logging
        excerpt:
          type: string
          example: Monitor AWS resources and analyze logs with CloudWatch integration
        image:
          type: string
        darkModeImage:
          type: string
        labels:
          type: array
          items:
            type: string
            default: '[]'
        version:
          type: string
          example: v1.0.13
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1ExtensionItemData'
        integrationDetails:
          type: array
          items:
            $ref: '#/components/schemas/v1IntegrationDetail'
        isHidden:
          type: boolean
          default: 'false'
        binaries:
          type: array
          items:
            $ref: '#/components/schemas/v1ExtensionBinary'
        integrations:
          type: array
          items:
            type: string
            default: '[]'
        keywords:
          type: array
          items:
            type: string
            default: '[]'
        changelog:
          type: array
          items:
            $ref: '#/components/schemas/v1ChangelogEntry'
        deprecation:
          $ref: '#/components/schemas/v1Deprecation'
      description: Extension details for ingestion
      title: Extension data
      required:
        - id
        - name
        - image
        - version
    v1ExtensionDeployment:
      type: object
      properties:
        id:
          type: string
        version:
          type: string
        itemIds:
          type: array
          items:
            type: string
            default: '[]'
        applications:
          type: array
          items:
            type: string
            default: '[]'
        subsystems:
          type: array
          items:
            type: string
            default: '[]'
      title: Extension deployment
      required:
        - id
        - version
        - itemIds
    v1ExtensionItem:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        targetDomain:
          $ref: '#/components/schemas/v1TargetDomain'
        data:
          type: object
        binaries:
          type: array
          items:
            $ref: '#/components/schemas/v1ExtensionItemBinary'
        isMandatory:
          type: boolean
          default: 'false'
        permissionResource:
          $ref: '#/components/schemas/ExtensionItemPermissionResource'
        extendedInternalId:
          type: string
        uniqueId:
          type: string
      title: Extension item
      required:
        - id
        - name
        - targetDomain
        - data
        - permissionResource
    v1ExtensionItemBinary:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/v1ExtensionItemBinaryBinaryType'
        data:
          type: string
        fileName:
          type: string
      title: Extension item binary
      required:
        - type
        - data
        - fileName
    v1ExtensionItemBinaryBinaryType:
      type: string
      enum:
        - PREVIEW_IMAGE
        - KIBANA_DASHBOARD_DEFINITION
        - GRAFANA_DASHBOARD_DEFINITION
        - ENRICHMENT_CSV
        - CX_CUSTOM_DASHBOARD_DEFINITION
      default: PREVIEW_IMAGE
    v1ExtensionItemData:
      type: object
      properties:
        name:
          type: string
          example: Low cocoa content
        description:
          type: string
          example: Less than 60% cocoa
        targetDomain:
          $ref: '#/components/schemas/v1TargetDomain'
        data:
          type: object
        binaries:
          type: array
          items:
            $ref: '#/components/schemas/v1ExtensionItemBinary'
        isMandatory:
          type: boolean
          default: 'false'
        internalId:
          type: integer
          format: int32
          default: '0'
        uniqueId:
          type: string
        permissionResource:
          $ref: '#/components/schemas/ExtensionItemPermissionResource'
      title: Extension item data
      required:
        - name
        - targetDomain
        - data
    v1ExtensionRevision:
      type: object
      properties:
        version:
          type: string
        description:
          type: string
        excerpt:
          type: string
        labels:
          type: array
          items:
            type: string
            default: '[]'
        integrationDetails:
          type: array
          items:
            $ref: '#/components/schemas/v1IntegrationDetail'
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1ExtensionItem'
        binaries:
          type: array
          items:
            $ref: '#/components/schemas/v1ExtensionBinary'
        permissionDeniedItems:
          type: array
          items:
            $ref: '#/components/schemas/v1ExtensionItem'
        isTesting:
          type: boolean
          default: 'false'
      title: Extension revision
      required:
        - version
    v1ExternalUrl:
      type: object
      properties:
        url:
          type: string
      title: External URL
    v1ExtractParameters:
      type: object
      properties:
        rule:
          type: string
    v1ExtractResponse:
      type: object
      properties:
        extractedLabels:
          type: array
          items:
            $ref: '#/components/schemas/v1ExtractedLabel'
    v1ExtractTimestampParameters:
      type: object
      properties:
        standard:
          $ref: '#/components/schemas/ExtractTimestampParametersFormatStandard'
        format:
          type: string
    v1ExtractedLabel:
      type: object
      properties:
        label:
          type: string
        values:
          type: array
          items:
            type: string
        destinationExtractionKey:
          type: string
        description:
          type: string
        displayName:
          type: string
        destinationExtractionKeys:
          type: array
          items:
            type: string
        destinationTypeExtractionKeys:
          type: array
          items:
            $ref: '#/components/schemas/v1DataSourceTypeValues'
        dataSource:
          $ref: '#/components/schemas/v1DataSource'
        isCustomLabel:
          type: boolean
    v1FetchRuleGroupResult:
      type: object
      properties:
        ruleGroup:
          $ref: '#/components/schemas/v1OutRuleGroup'
      description: Result of a rule group fetch operation.
      title: Fetch Rule Group Result
      externalDocs:
        description: Find out more about recording rules
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/metric-rules/recording-rules/
    v1File:
      type: object
      properties:
        name:
          type: string
          example: file_name
        extension:
          type: string
          example: csv
        size:
          type: integer
          format: int64
          example: 100
        textual:
          type: string
          example: row1,row2 value1,value2
        binary:
          type: string
          format: byte
          example: '0xFABB32'
      description: This data structure represents a file
      title: File
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    v1FilterByAlertSchedulerRuleIds:
      type: object
      properties:
        alertSchedulerIds:
          $ref: '#/components/schemas/v1AlertSchedulerRuleIds'
        alertSchedulerVersionIds:
          $ref: '#/components/schemas/v1AlertSchedulerRuleVersionIds'
    v1FilterType:
      type: string
      enum:
        - FILTER_TYPE_UNSPECIFIED
        - FILTER_TYPE_STARTS_WITH
        - FILTER_TYPE_ENDS_WITH
        - FILTER_TYPE_CONTAINS
        - FILTER_TYPE_EXACT
      default: FILTER_TYPE_UNSPECIFIED
      description: |-
        - FILTER_TYPE_STARTS_WITH: / Matches if string starts with filter
         - FILTER_TYPE_ENDS_WITH: / Matches if string ends with filter
         - FILTER_TYPE_CONTAINS: / Matches if string contains filter
         - FILTER_TYPE_EXACT: / Matches if string exactly matches filter
      title: / A filter type describes how to match a filter against an input string
    v1GenericIntegrationParameters:
      type: object
      properties:
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/v1Parameter'
      title: Generic integration parameters
    v1GenericWebhookConfig:
      type: object
      properties:
        uuid:
          type: string
          example: d838cd7b-087b-40c6-bc33-80997020f5d0
        method:
          $ref: '#/components/schemas/GenericWebhookConfigMethodType'
        headers:
          type: object
          example:
            Content-Type: application/json
          additionalProperties:
            type: string
        payload:
          type: string
          example:
            key: value
      title: Generic webhook configuration
      required:
        - uuid
        - method
    v1GeoIpType:
      type: object
      properties:
        withAsn:
          type: boolean
    v1GetAlertSchedulerRuleResponse:
      type: object
      properties:
        alertSchedulerRule:
          $ref: '#/components/schemas/v1AlertSchedulerRule'
    v1GetAllExtensionsRequest:
      type: object
      properties:
        includeHiddenExtensions:
          type: boolean
          default: 'false'
        filter:
          $ref: '#/components/schemas/v1GetAllExtensionsRequestFilter'
      description: Request to list all extensions
      title: Get all extensions request
    v1GetAllExtensionsRequestFilter:
      type: object
      properties:
        integrations:
          type: array
          items:
            type: string
            default: '[]'
      description: Filter by integration ids
      title: A filter structure for a request to get all extensions
    v1GetAllExtensionsResponse:
      type: object
      properties:
        extensions:
          type: array
          items:
            $ref: '#/components/schemas/v1GetAllExtensionsResponseExtension'
      description: Response to list all extensions
      title: Get all extensions response
    v1GetAllExtensionsResponseExtension:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        image:
          type: string
        darkModeImage:
          type: string
        revisions:
          type: array
          items:
            $ref: '#/components/schemas/v1GetAllExtensionsResponseRevision'
        isHidden:
          type: boolean
          default: 'false'
        integrations:
          type: array
          items:
            type: string
            default: '[]'
        keywords:
          type: array
          items:
            type: string
            default: '[]'
        deprecation:
          $ref: '#/components/schemas/v1Deprecation'
      title: Extension
      required:
        - id
        - name
        - image
    v1GetAllExtensionsResponseRevision:
      type: object
      properties:
        version:
          type: string
        description:
          type: string
        excerpt:
          type: string
        labels:
          type: array
          items:
            type: string
            default: '[]'
        integrationDetails:
          type: array
          items:
            $ref: '#/components/schemas/v1IntegrationDetail'
        summary:
          $ref: '#/components/schemas/GetAllExtensionsResponseRevisionSummary'
      title: Revision
      required:
        - version
        - summary
    v1GetBulkAlertSchedulerRuleResponse:
      type: object
      properties:
        alertSchedulerRules:
          type: array
          items:
            $ref: '#/components/schemas/v1AlertSchedulerRuleWithActiveTimeframe'
        nextPageToken:
          type: string
    v1GetCompanyDataSourcesInternalResponse:
      type: object
      properties:
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/v1DataSource'
    v1GetCompanyDataSourcesResponse:
      type: object
      properties:
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/v1DataSource'
    v1GetCompanyEnrichmentSettingsResponse:
      type: object
      properties:
        enrichmentSettings:
          $ref: '#/components/schemas/v1CompanyEnrichmentSettings'
    v1GetCompanyPoliciesResponse:
      type: object
      properties:
        policies:
          type: array
          items:
            $ref: '#/components/schemas/v1Policy'
      description: >-
        This data structue is obtained when retrieving all policies of a
        company.
      title: Get Company Policies Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - policies
    v1GetCompanyProvidersResponse:
      type: object
      properties:
        companyProviders:
          type: array
          items:
            type: string
    v1GetCompanyUsageLimitsRequest:
      type: object
    v1GetCompanyUsageLimitsResponse:
      type: object
      properties:
        companyId:
          type: string
        limits:
          $ref: '#/components/schemas/GetCompanyUsageLimitsResponseCounts'
        usage:
          $ref: '#/components/schemas/GetCompanyUsageLimitsResponseCounts'
    v1GetConnectorResponse:
      type: object
      properties:
        connector:
          $ref: '#/components/schemas/v1Connector'
      description: Response containing the requested connector
      title: Get Connector Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1GetConnectorTypeSummariesResponse:
      type: object
      properties:
        connectorTypeSummaries:
          type: array
          items:
            $ref: '#/components/schemas/v1ConnectorTypeSummary'
      description: Response containing summaries of connector types
      title: Get Connector Type Summaries Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1GetContextualDataIntegrationDefinitionResponse:
      type: object
      properties:
        integrationDefinition:
          $ref: '#/components/schemas/v1IntegrationDefinition'
      title: Get contextual data integration definition response
      required:
        - integrationDefinition
    v1GetContextualDataIntegrationDetailsResponse:
      type: object
      properties:
        integrationDetail:
          $ref: '#/components/schemas/v1IntegrationDetails'
      title: Get contextual data integration details response
      required:
        - integrationDetail
    v1GetContextualDataIntegrationsResponse:
      type: object
      properties:
        integrations:
          type: array
          items:
            $ref: >-
              #/components/schemas/v1GetContextualDataIntegrationsResponseIntegrationWithCounts
      title: Get contextual data integrations response
    v1GetContextualDataIntegrationsResponseIntegrationWithCounts:
      type: object
      properties:
        integration:
          $ref: '#/components/schemas/v1Integration'
        amountIntegrations:
          type: integer
          format: int64
        errors:
          type: array
          items:
            type: string
        upgradeAvailable:
          type: boolean
        isNew:
          type: boolean
      title: Integration with counts
      required:
        - integration
        - amountIntegrations
    v1GetCustomEnrichmentResponse:
      type: object
      properties:
        customEnrichment:
          $ref: '#/components/schemas/v1CustomEnrichment'
      description: >-
        This response data structure is obtained when a custom enrichment is
        retrieved
      title: Get Custom Enrichment Response
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - customEnrichment
    v1GetCustomEnrichmentsResponse:
      type: object
      properties:
        customEnrichments:
          type: array
          items:
            $ref: '#/components/schemas/v1CustomEnrichment'
      description: >-
        This response data structure is obtained when all custom enrichments are
        retrieved
      title: Get Custom Enrichments Response
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - customEnrichments
    v1GetCustomLabelMappingsResponse:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/v1LabelMapping'
    v1GetDefaultPresetSummaryResponse:
      type: object
      properties:
        presetSummary:
          $ref: '#/components/schemas/v1PresetSummary'
    v1GetDeployedExtensionsResponse:
      type: object
      properties:
        deployedExtensions:
          type: array
          items:
            $ref: >-
              #/components/schemas/GetDeployedExtensionsResponseDeployedExtension
      title: Get deployed extensions response
    v1GetDeployedIntegrationResponse:
      type: object
      properties:
        integration:
          $ref: '#/components/schemas/v1DeployedIntegrationInformation'
      title: Get deployed integration response
      required:
        - integration
    v1GetEnrichmentLimitResponse:
      type: object
      properties:
        limit:
          type: integer
          format: int64
          example: 10
        used:
          type: integer
          format: int64
          example: 5
      description: This response data structure represents the enrichments limit
      title: Enrichment Limit
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - limit
        - used
    v1GetEnrichmentsResponse:
      type: object
      properties:
        enrichments:
          type: array
          items:
            $ref: '#/components/schemas/coralogixenrichmentv1Enrichment'
      description: This response data structure represents a collection of enrichments
      title: Enrichment Collection
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - enrichments
    v1GetExtensionResponse:
      type: object
      properties:
        extension:
          $ref: '#/components/schemas/extensionsv1Extension'
      title: Get extension response
    v1GetFilterValuesRequest:
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/v1IncidentQueryFilter'
      description: Request to get available filter values for incidents
      title: Get filter values request
    v1GetFilterValuesResponse:
      type: object
      properties:
        filtersValues:
          $ref: '#/components/schemas/v1IncidentQueryFiltersValues'
      description: Response containing available filter values for incidents
      title: Get filter values response
      required:
        - filtersValues
    v1GetGlobalRouterResponse:
      type: object
      properties:
        router:
          $ref: '#/components/schemas/v1GlobalRouter'
      description: Response containing a requested global router
      title: Get Global Router Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1GetGroupUsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/permissionsv1User'
        noMorePages:
          $ref: '#/components/schemas/GetGroupUsersResponseNoMorePages'
        token:
          $ref: '#/components/schemas/GetGroupUsersResponseNextPageToken'
      description: >-
        Response containing the list of all users currently assigned to the
        requested team group.
      title: GetGroupUsersResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1GetIncidentEventsResponse:
      type: object
      properties:
        incidentEvents:
          type: array
          items:
            $ref: '#/components/schemas/v1IncidentEvent'
          description: List of incident events
      description: Response containing all events associated with the requested incident
      title: Get incident events response
    v1GetIncidentResponse:
      type: object
      properties:
        incident:
          $ref: '#/components/schemas/v1Incident'
      description: Response containing the requested incident
      title: Get incident response
      required:
        - incident
    v1GetIncidentUsingCorrelationKeyResponse:
      type: object
      properties:
        incident:
          $ref: '#/components/schemas/v1Incident'
      description: >-
        Response containing the incident matching the correlation key and
        timestamp
      title: Get incident by correlation response
    v1GetIntegrationDefinitionResponse:
      type: object
      properties:
        integrationDefinition:
          $ref: '#/components/schemas/v1IntegrationDefinition'
      description: This data structure represents a list of outgoing webhook types.
      title: Get integration definition response
      required:
        - integrationDefinition
    v1GetIntegrationDetailsResponse:
      type: object
      properties:
        integrationDetail:
          $ref: '#/components/schemas/v1IntegrationDetails'
      title: Get integration details response
      required:
        - integrationDetail
    v1GetIntegrationsResponse:
      type: object
      properties:
        integrations:
          type: array
          items:
            $ref: >-
              #/components/schemas/v1GetIntegrationsResponseIntegrationWithCounts
      description: This data structure represents a list of outgoing webhook types.
      title: Get integrations response
    v1GetIntegrationsResponseIntegrationWithCounts:
      type: object
      properties:
        integration:
          $ref: '#/components/schemas/v1Integration'
        amountIntegrations:
          type: integer
          format: int64
        errors:
          type: array
          items:
            type: string
        upgradeAvailable:
          type: boolean
        isNew:
          type: boolean
      title: Integration with counts
      required:
        - integrations
    v1GetLabelKeysResponse:
      type: object
      properties:
        labelKeys:
          type: array
          items:
            type: string
        dataSource:
          $ref: '#/components/schemas/v1DataSource'
    v1GetLabelMappingsInternalResponse:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/v1LabelMapping'
    v1GetLabelMappingsResponse:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/v1LabelMapping'
    v1GetLabelValuesInternalResponse:
      type: object
      properties:
        labelValues:
          type: array
          items:
            $ref: '#/components/schemas/v1LabelValues'
        dataSource:
          $ref: '#/components/schemas/v1DataSource'
    v1GetLabelValuesResponse:
      type: object
      properties:
        labelValues:
          type: array
          items:
            $ref: '#/components/schemas/v1LabelValues'
        dataSource:
          $ref: '#/components/schemas/v1DataSource'
    v1GetLabelsResponse:
      type: object
      properties:
        labels:
          type: array
          items:
            type: string
    v1GetManagedIntegrationStatusResponse:
      type: object
      properties:
        integrationId:
          type: string
        status:
          $ref: '#/components/schemas/v1IntegrationStatus'
      title: Get managed integration status response
      required:
        - integrationId
        - status
    v1GetMeasurementsInternalResponse:
      type: object
      properties:
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/v1Measurement'
    v1GetMeasurementsResponse:
      type: object
      properties:
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/v1Measurement'
    v1GetMeasurementsTableResponse:
      type: object
      properties:
        pageSize:
          type: integer
          format: int32
        pageIndex:
          type: integer
          format: int32
        rows:
          type: array
          items:
            $ref: '#/components/schemas/v1TableRow'
        totalRowCount:
          type: integer
          format: int32
        existingColumns:
          type: array
          items:
            type: string
    v1GetOutgoingWebhookResponse:
      type: object
      properties:
        webhook:
          $ref: '#/components/schemas/v1OutgoingWebhook'
      title: Get outgoing webhook response
      required:
        - webhook
    v1GetOutgoingWebhookTypeDetailsResponse:
      type: object
      properties:
        details:
          $ref: '#/components/schemas/v1OutgoingWebhookDetails'
      title: Get outgoing webhook type details response
      required:
        - details
    v1GetPolicyResponse:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/v1Policy'
      description: This data structue is obtained when retrieving a policy by its ID.
      title: Get Policy Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - id
    v1GetPresetResponse:
      type: object
      properties:
        preset:
          $ref: '#/components/schemas/presetsv1Preset'
    v1GetQueriesResponse:
      type: object
      properties:
        queries:
          type: array
          items:
            $ref: '#/components/schemas/v1MeasurementQuery'
    v1GetRetentionsEnabledResponse:
      type: object
      properties:
        enableTags:
          type: boolean
      description: >-
        This data structure is obtained when retrieving the active status of
        retentions
      title: Get Retentions Enabled Response
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - retentions
    v1GetRetentionsResponse:
      type: object
      properties:
        retentions:
          type: array
          items:
            $ref: '#/components/schemas/coralogixarchivev1Retention'
    v1GetRuleGroupModelMappingRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        hidden:
          type: boolean
        creator:
          type: string
        ruleMatchers:
          type: array
          items:
            $ref: '#/components/schemas/v1RuleMatcher'
        ruleSubgroups:
          type: array
          items:
            $ref: >-
              #/components/schemas/v1GetRuleGroupModelMappingRequestCreateRuleSubgroup
        order:
          type: integer
          format: int64
    v1GetRuleGroupModelMappingRequestCreateRuleSubgroup:
      type: object
      properties:
        rules:
          type: array
          items:
            $ref: >-
              #/components/schemas/v1GetRuleGroupModelMappingRequestCreateRuleSubgroupCreateRule
        enabled:
          type: boolean
        order:
          type: integer
          format: int64
    v1GetRuleGroupModelMappingRequestCreateRuleSubgroupCreateRule:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        sourceField:
          type: string
        parameters:
          $ref: '#/components/schemas/v1RuleParameters'
        enabled:
          type: boolean
        order:
          type: integer
          format: int64
    v1GetRuleGroupModelMappingResponse:
      type: object
      properties:
        ruleDefinition:
          type: object
    v1GetRuleGroupResponse:
      type: object
      properties:
        ruleGroup:
          $ref: '#/components/schemas/v1RuleGroup'
    v1GetRumApplicationVersionDataResponse:
      type: object
      properties:
        versionData:
          $ref: '#/components/schemas/v1RumVersionData'
      title: Get RUM application version data response
      required:
        - versionData
    v1GetScopesResponse:
      type: object
      properties:
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/coralogixapisscopesv1Scope'
      description: This data structure represents a response to get scopes
      title: Get Scopes Response
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
      required:
        - scopes
    v1GetServiceSloResponse:
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/v1ServiceSlo'
      description: This data structure represents a response to get a Service SLO.
      title: Get Service SLO Response
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - slo
    v1GetSloDataResponse:
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/v1Slo'
        sloPermutationData:
          type: array
          items:
            $ref: '#/components/schemas/v1SloPermutationData'
    v1GetSloResponse:
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/v1Slo'
    v1GetSystemDefaultPresetSummaryResponse:
      type: object
      properties:
        presetSummary:
          $ref: '#/components/schemas/v1PresetSummary'
    v1GetTeamGroupByNameResponse:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/v1TeamGroup'
      description: >-
        Response containing the complete details of a team group that matches
        the requested name, including its members, roles, and scope settings.
      title: GetTeamGroupByNameResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1GetTeamGroupResponse:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/v1TeamGroup'
      description: >-
        Response containing the complete details of a requested team group,
        including its members, assigned roles, and scope configuration.
      title: GetTeamGroupResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1GetTeamGroupScopeResponse:
      type: object
      properties:
        scope:
          $ref: '#/components/schemas/coralogixpermissionsv1Scope'
      description: >-
        Response message containing the optional scope configuration (filters
        for subsystems and applications) for a team group
      title: GetTeamGroupScopeResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1GetTeamGroupsResponse:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/v1TeamGroup'
          title: / Groups associated with team
      description: >-
        Response containing a list of all team groups and their complete
        details, including members, roles, and scope configurations.
      title: GetTeamGroupsResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1GetTemplateRequestEmpty:
      type: object
    v1GetTemplateResponse:
      type: object
      properties:
        templateUrl:
          type: string
      title: Get template response
    v1GlobalRouter:
      type: object
      properties:
        id:
          type: string
          example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
          title: >-
            A unique identifier - automatically generated unless provided by the
            user
        userDefinedId:
          type: string
          example: user-provided-id
          title: DEPRECATED - A unique identifier provided by the user
        deprecatedEntityType:
          type: string
          title: The source of the notification (e.g., "alerts")
        name:
          type: string
          example: My Router
        description:
          type: string
        rules:
          type: array
          items:
            $ref: '#/components/schemas/routingRoutingRule'
          title: >-
            The routing rules to be applied in order to determine the
            destinations of the notification, teh first rule that matches will
            be used
        fallback:
          type: array
          items:
            $ref: '#/components/schemas/routingRoutingTarget'
          title: The fallback destinations to be used if no rule matches
        createTime:
          type: string
          format: date-time
          title: System-generated timestamp for when the router was last updated
        updateTime:
          type: string
          format: date-time
          title: System-generated timestamp for when the router was last updated
        entityLabels:
          type: object
          additionalProperties:
            type: string
        entityType:
          $ref: '#/components/schemas/coralogixapisnotification_centerEntityType'
      description: >-
        Defines a set of pre-configured routing rules for directing
        notifications
      title: Global Router
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
      required:
        - entityType
        - name
    v1GroupBy:
      type: object
      properties:
        incidentField:
          $ref: '#/components/schemas/v1IncidentFields'
        contextualLabel:
          type: string
          description: The contextual label to group by.
        orderByDirection:
          $ref: '#/components/schemas/incidentsv1OrderByDirection'
      title: Incident group by
      required:
        - field
    v1GroupByValues:
      type: object
      properties:
        incidentField:
          $ref: '#/components/schemas/v1IncidentFieldOneOf'
        contextualLabels:
          $ref: '#/components/schemas/v1ContextualLabels'
    v1GroupOrigin:
      type: string
      enum:
        - GROUP_ORIGIN_UNSPECIFIED
        - GROUP_ORIGIN_BUILT_IN
        - GROUP_ORIGIN_USER_DEFINED
      default: GROUP_ORIGIN_UNSPECIFIED
      description: |-
        / Group origin defines in which circumstances the group was created.

         - GROUP_ORIGIN_BUILT_IN: / A built in group is defined by the system and users are not able to alter them.
         - GROUP_ORIGIN_USER_DEFINED: / User defined or custom role.
    v1GroupValue:
      type: object
      properties:
        labels:
          type: array
          items:
            $ref: '#/components/schemas/slov1LabelValue'
    v1IbmEventNotificationsConfig:
      type: object
      properties:
        eventNotificationsInstanceId:
          type: string
        regionId:
          type: string
        sourceId:
          type: string
        sourceName:
          type: string
        endpointType:
          $ref: '#/components/schemas/IbmEventNotificationsConfigEndpointType'
      title: IBM event notification configuration
      required:
        - eventNotificationsInstanceId
        - regionId
        - endpointType
    v1InRule:
      type: object
      properties:
        record:
          type: string
          description: >-
            The name of the time series to output to. Must be a valid metric
            name.
        expr:
          type: string
          description: >-
            *

            The PromQL expression to evaluate. Every evaluation cycle this is

            evaluated at the current time, and the result recorded as a new set
            of

            time series with the metric name as given by 'record'.
        labels:
          type: object
          additionalProperties:
            type: string
          description: Labels to add or overwrite before storing the result.
      description: A rule within a group that defines a recording rule expression.
      title: In Rule
      externalDocs:
        description: Find out more about recording rules
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/metric-rules/recording-rules/
    v1InRuleGroup:
      type: object
      properties:
        name:
          type: string
          description: Name of the group.
        interval:
          type: integer
          format: int64
          description: |-
            How often rules in the group are evaluated.

            optional, default = 60 secs
        limit:
          type: string
          format: uint64
          description: |-
            Limits the number of series a rule can produce.

            optional, 0 is no limit, default = 0
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v1InRule'
          description: Rules of the group.
        version:
          type: integer
          format: int64
        id:
          type: string
      description: A group of recording rules.
      title: In Rule Group
      externalDocs:
        description: Find out more about recording rules
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/metric-rules/recording-rules/
    v1Incident:
      type: object
      properties:
        id:
          type: string
          example: incident_id
          title: Incident id
        name:
          type: string
          example: incident_name
          title: Incident name
        state:
          $ref: '#/components/schemas/v1IncidentState'
        status:
          $ref: '#/components/schemas/v1IncidentStatus'
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/v1Assignment'
          title: The incident's current assignments
        description:
          type: string
          example: incident_description
          title: The incident's current description
        severity:
          $ref: '#/components/schemas/v1IncidentSeverity'
        contextualLabels:
          type: object
          additionalProperties:
            type: string
          description: >-
            The incident's current contextual labels - dynamic labels that give
            contextual information about the incident (for example, the
            alert_name label can appear in an incident created by an event
            originating from the alerting system).
        displayLabels:
          type: object
          additionalProperties:
            type: string
          title: >-
            The incident's current display labels -  dynamic labels that extend
            the incident name for identification purposes
        events:
          type: array
          items:
            $ref: '#/components/schemas/v1IncidentEvent'
          title: The incident's current events
        createdAt:
          type: string
          format: date-time
          example: '2024-01-01T00:00:00.000Z'
        closedAt:
          type: string
          format: date-time
          example: '2024-01-01T00:00:00.000Z'
        lastStateUpdateTime:
          type: string
          format: date-time
          example: '2024-01-01T00:00:00.000Z'
        lastStateUpdateKey:
          type: string
          example: last_state_update_key
          title: >-
            The payload key of the last event that caused the incident's to
            state change
        isMuted:
          type: boolean
          example: false
          title: Is the incident muted/suppressed
        metaLabels:
          type: array
          items:
            $ref: '#/components/schemas/coralogixapisincidentsv1MetaLabel'
          title: The incident's current meta labels
        duration:
          type: string
          title: The time duration between created at and closed time of the incident
      description: |-
        *
        Represents an Incident.
      title: Incident
      required:
        - id
        - state
        - status
        - assignments
        - severity
        - contextualLabels
        - displayLabels
        - events
        - createdAt
        - lastStateUpdateTime
        - lastStateUpdateKey
        - duration
    v1IncidentAggregation:
      type: object
      properties:
        groupBysValue:
          type: array
          items:
            $ref: '#/components/schemas/v1GroupByValues'
          title: The aggregation's group by fields and values
        aggStateCount:
          type: array
          items:
            $ref: '#/components/schemas/v1IncidentStateCount'
          title: The aggregation's state count
        aggStatusCount:
          type: array
          items:
            $ref: '#/components/schemas/v1IncidentStatusCount'
          title: The aggregation's status count
        aggSeverityCount:
          type: array
          items:
            $ref: '#/components/schemas/v1IncidentSeverityCount'
          title: The aggregation's severity count
        aggAssignmentsCount:
          type: array
          items:
            $ref: '#/components/schemas/v1IncidentAssignmentCount'
          title: The aggregation's assignments count
        firstCreatedAt:
          type: string
          format: date-time
          title: The aggregation's first incident created time
        lastClosedAt:
          type: string
          format: date-time
          title: The aggregation's last incident closed time
        allValuesCount:
          type: integer
          format: int64
          title: The aggregation's incident count
        listIncidentsId:
          type: array
          items:
            type: string
          title: The aggregation's list of incidents ID
        lastStateUpdateTime:
          type: string
          format: date-time
          title: The aggregation's last state update time
        aggMetaLabelsCount:
          type: array
          items:
            $ref: '#/components/schemas/v1IncidentMetaLabelsCount'
          title: The aggregation's meta labels count
      title: Incident aggregation
      required:
        - groupBysValue
        - aggStateCount
        - aggStatusCount
        - aggSeverityCount
        - aggAssignmentsCount
        - firstCreatedAt
        - lastClosedAt
        - allValuesCount
        - listIncidentsId
        - lastStateUpdateTime
        - aggMetaLabelsCount
    v1IncidentAssignmentCount:
      type: object
      properties:
        assignedTo:
          $ref: '#/components/schemas/v1UserDetails'
        count:
          type: integer
          format: int64
          example: 10
      title: Incident assignment count
      required:
        - assignedTo
        - count
    v1IncidentEvent:
      type: object
      properties:
        id:
          type: string
          example: incident_event_id
          description: The ID of the incident event
        incidentEventType:
          $ref: '#/components/schemas/v1IncidentEventType'
        snoozeIndicator:
          $ref: '#/components/schemas/v1IncidentEventSnoozeIndicator'
        assignment:
          $ref: '#/components/schemas/v1IncidentEventAssign'
        unassign:
          $ref: '#/components/schemas/v1IncidentEventUnassign'
        upsertState:
          $ref: '#/components/schemas/v1IncidentEventUpsertState'
        acknowledge:
          $ref: '#/components/schemas/v1IncidentEventAcknowledge'
        close:
          $ref: '#/components/schemas/v1IncidentEventClose'
        originatorType:
          $ref: '#/components/schemas/v1OriginatorType'
        administrativeEvent:
          $ref: '#/components/schemas/v1IncidentEventOriginatorAdministrative'
        operationalEvent:
          $ref: '#/components/schemas/v1IncidentEventOriginatorOperational'
      title: Incident event
      required:
        - id
        - incidentEventType
        - originatorType
        - originator
        - incident_event_payload
    v1IncidentEventAcknowledge:
      type: object
      properties:
        acknowledgedBy:
          $ref: '#/components/schemas/v1UserDetails'
    v1IncidentEventAlertType:
      type: string
      enum:
        - INCIDENT_EVENT_ALERT_TYPE_STANDARD_OR_UNSPECIFIED
        - INCIDENT_EVENT_ALERT_TYPE_METRIC
        - INCIDENT_EVENT_ALERT_TYPE_NEW_VALUE
        - INCIDENT_EVENT_ALERT_TYPE_RATIO
        - INCIDENT_EVENT_ALERT_TYPE_TIME_RELATIVE
        - INCIDENT_EVENT_ALERT_TYPE_UNIQUE_COUNT
        - INCIDENT_EVENT_ALERT_TYPE_TRACING
        - INCIDENT_EVENT_ALERT_TYPE_FLOW
      default: INCIDENT_EVENT_ALERT_TYPE_STANDARD_OR_UNSPECIFIED
    v1IncidentEventAssign:
      type: object
      properties:
        assignment:
          $ref: '#/components/schemas/v1Assignment'
      title: Incident event assignment details
    v1IncidentEventClose:
      type: object
      properties:
        closedBy:
          $ref: '#/components/schemas/v1UserDetails'
    v1IncidentEventExtended:
      type: object
      properties:
        cxEventKey:
          type: string
        incidentEvent:
          $ref: '#/components/schemas/v1IncidentEvent'
        cxEventTimestamp:
          type: string
          format: date-time
        incidentEventExtendedMetadata:
          $ref: '#/components/schemas/v1IncidentEventExtendedMetadata'
      title: Extended incident event
      required:
        - cxEventKey
        - incidentEvent
        - cxEventTimestamp
    v1IncidentEventExtendedMetadata:
      type: object
      properties:
        incidentSeverity:
          $ref: '#/components/schemas/v1IncidentSeverity'
        alertId:
          type: string
        incidentState:
          $ref: '#/components/schemas/v1IncidentState'
        alertName:
          type: string
        alertType:
          $ref: '#/components/schemas/v1IncidentEventAlertType'
        isMuted:
          type: boolean
        incidentStatus:
          $ref: '#/components/schemas/v1IncidentStatus'
        alertGroupByFields:
          type: array
          items:
            type: string
        alertLabels:
          type: array
          items:
            $ref: '#/components/schemas/coralogixapisincidentsv1MetaLabel'
        incidentPermutation:
          type: object
          additionalProperties:
            type: string
    v1IncidentEventOrderByFieldType:
      type: string
      enum:
        - INCIDENT_EVENT_ORDER_BY_FIELD_TYPE_TIMESTAMP_OR_UNSPECIFIED
      default: INCIDENT_EVENT_ORDER_BY_FIELD_TYPE_TIMESTAMP_OR_UNSPECIFIED
    v1IncidentEventOriginatorAdministrative:
      type: object
      properties:
        userId:
          type: string
    v1IncidentEventOriginatorOperational:
      type: object
      properties:
        systemName:
          type: string
    v1IncidentEventQueryFilter:
      type: object
      properties:
        status:
          type: array
          items:
            $ref: '#/components/schemas/v1IncidentStatus'
          description: The status of the incident
        severity:
          type: array
          items:
            $ref: '#/components/schemas/v1IncidentSeverity'
          description: The severity of the incident
        contextualLabels:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v1ContextualLabelValues'
          description: The contextual labels of the incident
        name:
          type: string
          description: The name of the incident
        isMuted:
          type: boolean
          description: Indicates if the incident is muted
        timestamp:
          $ref: '#/components/schemas/coralogixapisincidentsv1TimeRange'
        labels:
          $ref: '#/components/schemas/v1LabelsFilter'
      description: Filter configuration for incident events
      title: Incident event query filter
    v1IncidentEventSnoozeIndicator:
      type: object
      properties:
        startTime:
          type: string
          format: date-time
        durationMinutes:
          type: integer
          format: int32
        userId:
          type: string
      title: Incident event snooze indicator
    v1IncidentEventType:
      type: string
      enum:
        - INCIDENT_EVENT_TYPE_UNSPECIFIED
        - INCIDENT_EVENT_TYPE_UPSERT_STATE
        - INCIDENT_EVENT_TYPE_OPEN
        - INCIDENT_EVENT_TYPE_CLOSE
        - INCIDENT_EVENT_TYPE_SNOOZE_INDICATOR
        - INCIDENT_EVENT_TYPE_ASSIGN
        - INCIDENT_EVENT_TYPE_UNASSIGN
        - INCIDENT_EVENT_TYPE_ACKNOWLEDGE
      default: INCIDENT_EVENT_TYPE_UNSPECIFIED
    v1IncidentEventUnassign:
      type: object
    v1IncidentEventUpsertState:
      type: object
      properties:
        stateType:
          $ref: '#/components/schemas/v1UpsertIncidentStateType'
        payload:
          $ref: '#/components/schemas/v1UpsertIncidentStatePayload'
        isMuted:
          type: boolean
      title: Incident event upsert state
      required:
        - stateType
        - payload
    v1IncidentFieldOneOf:
      type: object
      properties:
        id:
          type: string
        severity:
          $ref: '#/components/schemas/v1IncidentSeverity'
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        closedAt:
          type: string
          format: date-time
        state:
          $ref: '#/components/schemas/v1IncidentState'
        status:
          $ref: '#/components/schemas/v1IncidentStatus'
        lastStateUpdateTime:
          type: string
          format: date-time
        applicationName:
          type: string
        subsystemName:
          type: string
        duration:
          type: string
    v1IncidentFields:
      type: string
      enum:
        - INCIDENTS_FIELDS_UNSPECIFIED
        - INCIDENTS_FIELDS_ID
        - INCIDENTS_FIELDS_SEVERITY
        - INCIDENTS_FIELDS_NAME
        - INCIDENTS_FIELDS_CREATED_TIME
        - INCIDENTS_FIELDS_CLOSED_TIME
        - INCIDENTS_FIELDS_STATE
        - INCIDENTS_FIELDS_STATUS
        - INCIDENTS_FIELDS_LAST_STATE_UPDATE_TIME
        - INCIDENTS_FIELDS_APPLICATION_NAME
        - INCIDENTS_FIELDS_SUBSYSTEM_NAME
        - INCIDENTS_FIELDS_DURATION
      default: INCIDENTS_FIELDS_UNSPECIFIED
    v1IncidentMetaLabelsCount:
      type: object
      properties:
        metaLabel:
          $ref: '#/components/schemas/coralogixapisincidentsv1MetaLabel'
        count:
          type: integer
          format: int64
          example: 10
      title: Incident meta labels count
      required:
        - metaLabel
        - count
    v1IncidentMetaLabelsWithCount:
      type: object
      properties:
        metaLabel:
          $ref: '#/components/schemas/coralogixapisincidentsv1MetaLabel'
        count:
          type: integer
          format: int32
          example: 10
      title: Incident meta labels with count
      required:
        - metaLabel
        - count
    v1IncidentQueryFilter:
      type: object
      properties:
        assignee:
          type: array
          items:
            type: string
          description: Filter by assignee
        status:
          type: array
          items:
            $ref: '#/components/schemas/v1IncidentStatus'
          description: Filter by incident status
        state:
          type: array
          items:
            $ref: '#/components/schemas/v1IncidentState'
          description: Filter by incident state
        severity:
          type: array
          items:
            $ref: '#/components/schemas/v1IncidentSeverity'
          description: Filter by incident severity
        contextualLabels:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v1ContextualLabelValues'
          description: Filter by contextual labels
        startTime:
          type: string
          format: date-time
          description: >-
            Filters all incidents that were open in the given timeframe start
            time (deprecated, use incident_open_range instead)
        endTime:
          type: string
          format: date-time
          description: >-
            Filters all incidents that were open in the given timeframe end time
            (deprecated, use incident_open_range instead)
        searchQuery:
          $ref: '#/components/schemas/v1IncidentSearchQuery'
        applicationName:
          type: array
          items:
            type: string
          description: Filter by application names
        subsystemName:
          type: array
          items:
            type: string
          description: Filter by subsystem names
        isMuted:
          type: boolean
          description: Indicates if the incident is muted
        createdAtRange:
          $ref: '#/components/schemas/coralogixapisincidentsv1TimeRange'
        incidentDurationRange:
          $ref: '#/components/schemas/coralogixapisincidentsv1TimeRange'
        metaLabels:
          type: array
          items:
            $ref: '#/components/schemas/coralogixapisincidentsv1MetaLabel'
          description: Filters all incidents with the given meta labels
        metaLabelsOp:
          $ref: '#/components/schemas/incidentsv1FilterOperator'
      description: Filter configuration for incidents
      title: Incident query filter
    v1IncidentQueryFiltersValues:
      type: object
      properties:
        assigneeWithCount:
          type: array
          items:
            $ref: '#/components/schemas/v1AssigneeWithCount'
        statusWithCount:
          type: array
          items:
            $ref: '#/components/schemas/v1IncidentStatusWithCount'
        stateWithCount:
          type: array
          items:
            $ref: '#/components/schemas/v1IncidentStateWithCount'
        severityWithCount:
          type: array
          items:
            $ref: '#/components/schemas/v1IncidentSeverityWithCount'
        contextualLabels:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v1ContextualLabelValuesWithCount'
        metaLabelsWithCount:
          type: array
          items:
            $ref: '#/components/schemas/v1IncidentMetaLabelsWithCount'
        metaLabelsOp:
          $ref: '#/components/schemas/incidentsv1FilterOperator'
      title: Incident query filter values
      required:
        - assigneeWithCount
        - statusWithCount
        - stateWithCount
        - severityWithCount
        - contextualLabels
        - metaLabelsWithCount
        - metaLabelsOp
    v1IncidentSearchQuery:
      type: object
      properties:
        query:
          type: string
          example: error
          description: The search query
        incidentField:
          $ref: '#/components/schemas/v1IncidentFields'
        contextualLabel:
          type: string
          description: The contextual label to search in.
      title: Incident search query
      required:
        - query
        - field
    v1IncidentSeverity:
      type: string
      enum:
        - INCIDENT_SEVERITY_UNSPECIFIED
        - INCIDENT_SEVERITY_INFO
        - INCIDENT_SEVERITY_WARNING
        - INCIDENT_SEVERITY_ERROR
        - INCIDENT_SEVERITY_CRITICAL
        - INCIDENT_SEVERITY_LOW
      default: INCIDENT_SEVERITY_UNSPECIFIED
    v1IncidentSeverityCount:
      type: object
      properties:
        severity:
          $ref: '#/components/schemas/v1IncidentSeverity'
        count:
          type: integer
          format: int64
          example: 10
      title: Incident severity count
      required:
        - severity
        - count
    v1IncidentSeverityWithCount:
      type: object
      properties:
        severity:
          $ref: '#/components/schemas/v1IncidentSeverity'
        count:
          type: integer
          format: int32
          example: 10
      title: Incident severity with count
      required:
        - severity
        - count
    v1IncidentState:
      type: string
      enum:
        - INCIDENT_STATE_UNSPECIFIED
        - INCIDENT_STATE_TRIGGERED
        - INCIDENT_STATE_RESOLVED
      default: INCIDENT_STATE_UNSPECIFIED
    v1IncidentStateCount:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/v1IncidentState'
        count:
          type: integer
          format: int64
          example: 10
      title: Incident state count
      required:
        - state
        - count
    v1IncidentStateWithCount:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/v1IncidentState'
        count:
          type: integer
          format: int32
          example: 10
      title: Incident state with count
      required:
        - state
        - count
    v1IncidentStatus:
      type: string
      enum:
        - INCIDENT_STATUS_UNSPECIFIED
        - INCIDENT_STATUS_TRIGGERED
        - INCIDENT_STATUS_ACKNOWLEDGED
        - INCIDENT_STATUS_RESOLVED
      default: INCIDENT_STATUS_UNSPECIFIED
    v1IncidentStatusCount:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/v1IncidentStatus'
        count:
          type: integer
          format: int64
          example: 10
      title: Incident status count
      required:
        - status
        - count
    v1IncidentStatusWithCount:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/v1IncidentStatus'
        count:
          type: integer
          format: int32
          example: 10
      title: Incident status with count
      required:
        - status
        - count
    v1InitializeTestingRevisionRequest:
      type: object
      properties:
        extensionData:
          $ref: '#/components/schemas/v1ExtensionData'
      title: Initialize testing revision request
      required:
        - extensionData
    v1InitializeTestingRevisionResponse:
      type: object
      title: Initialize testing revision response
    v1Integration:
      type: object
      properties:
        id:
          type: string
          title: short_name in the integrations.integration_definitions
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        darkIcon:
          type: string
        tags:
          type: array
          items:
            type: string
        versions:
          type: array
          items:
            type: string
        integrationType:
          $ref: '#/components/schemas/integrationsv1IntegrationType'
        featureFlag:
          type: string
      description: This data structure represents an integration
      title: Integration
    v1IntegrationDefinition:
      type: object
      properties:
        key:
          type: string
          title: short_name in the integrations.integration_definitions
        integrationType:
          $ref: '#/components/schemas/integrationsv1IntegrationType'
        revisions:
          type: array
          items:
            $ref: '#/components/schemas/v1IntegrationRevision'
        featureFlag:
          type: string
      description: This data structure represents a definition of an integration.
      title: Integration definition
    v1IntegrationDetail:
      type: object
      properties:
        name:
          type: string
        link:
          type: string
      title: Integration detail
      required:
        - name
        - link
    v1IntegrationDetails:
      type: object
      properties:
        integration:
          $ref: '#/components/schemas/v1Integration'
        extensions:
          type: array
          items:
            $ref: '#/components/schemas/extensionsv1Extension'
        docs:
          type: array
          items:
            $ref: '#/components/schemas/v1IntegrationDoc'
        default:
          $ref: '#/components/schemas/IntegrationDetailsDefaultIntegrationDetails'
        local:
          $ref: '#/components/schemas/v1LocalChangelog'
        external:
          $ref: '#/components/schemas/v1ExternalUrl'
      description: This data structure represents a set of integration details.
      title: Integration details
    v1IntegrationDoc:
      type: object
      properties:
        name:
          type: string
        link:
          type: string
      description: This data structure represents integration documentation.
      title: Integration doc
    v1IntegrationMetadata:
      type: object
      properties:
        integrationKey:
          type: string
        version:
          type: string
        integrationParameters:
          $ref: '#/components/schemas/v1GenericIntegrationParameters'
      description: This data structure represents the metadata of an integration.
      title: Integration metadata
    v1IntegrationRevision:
      type: object
      properties:
        id:
          type: string
          title: version from the integrations.integration_definitions_revision
        fields:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationRevisionFieldInformation'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/v1IntegrationRevisionGroup'
        cloudFormation:
          $ref: '#/components/schemas/IntegrationRevisionCloudFormationTemplate'
        managedService:
          $ref: '#/components/schemas/IntegrationRevisionManagedService'
        helmChart:
          $ref: '#/components/schemas/IntegrationRevisionHelmChart'
        azureArmTemplate:
          $ref: '#/components/schemas/IntegrationRevisionAzureArmTemplate'
        rum:
          $ref: '#/components/schemas/IntegrationRevisionRum'
        terraform:
          $ref: '#/components/schemas/IntegrationRevisionTerraform'
        upgradeInstructionsMd:
          type: string
        revisionDeploymentSupported:
          type: boolean
        featureFlag:
          type: string
      description: This data structure represents an integration revision.
      title: Integration revision
    v1IntegrationRevisionGroup:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      title: Group
    v1IntegrationStatus:
      type: object
      properties:
        connectionStatus:
          $ref: '#/components/schemas/v1ConnectionStatus'
        details:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            type: string
      description: This data structure represents an integration status.
      title: Integration status
      required:
        - connectionStatus
    v1IsFilterPredicate:
      type: object
      properties:
        is:
          type: array
          items:
            type: string
    v1ItemCounts:
      type: object
      properties:
        actions:
          type: integer
          format: int64
          default: '0'
        alerts:
          type: integer
          format: int64
          default: '0'
        customDashboards:
          type: integer
          format: int64
          default: '0'
        enrichments:
          type: integer
          format: int64
          default: '0'
        eventsToMetrics:
          type: integer
          format: int64
          default: '0'
        grafanaDashboards:
          type: integer
          format: int64
          default: '0'
        kibanaDashboards:
          type: integer
          format: int64
          default: '0'
        metricsRuleGroup:
          type: integer
          format: int64
          default: '0'
        parsingRules:
          type: integer
          format: int64
          default: '0'
        savedViews:
          type: integer
          format: int64
          default: '0'
      title: Item counts
    v1JiraConfig:
      type: object
      properties:
        apiToken:
          type: string
          example: jira_api_token
        email:
          type: string
          example: jira_email
        projectKey:
          type: string
          example: jira_project_key
      title: Jira configuration
      required:
        - apiToken
        - email
        - projectKey
    v1JsonExtractParameters:
      type: object
      properties:
        destinationFieldType:
          $ref: '#/components/schemas/JsonExtractParametersDestinationField'
        rule:
          type: string
        destinationFieldText:
          type: string
    v1JsonParseParameters:
      type: object
      properties:
        destinationField:
          type: string
        deleteSource:
          type: boolean
        escapedValue:
          type: boolean
        overrideDest:
          type: boolean
    v1JsonStringifyParameters:
      type: object
      properties:
        destinationField:
          type: string
        deleteSource:
          type: boolean
    v1LabelMapping:
      type: object
      properties:
        label:
          type: string
        dataSourceType:
          $ref: '#/components/schemas/coralogixglobal_mappingv1DataSourceType'
        extractionTemplate:
          type: string
        id:
          type: string
        description:
          type: string
        displayName:
          type: string
        extractionTemplates:
          type: array
          items:
            type: string
        isCustomLabel:
          type: boolean
        dataSource:
          $ref: '#/components/schemas/v1DataSource'
    v1LabelValues:
      type: object
      properties:
        labelName:
          type: string
        values:
          type: array
          items:
            type: string
    v1LabelsFilter:
      type: object
      properties:
        metaLabels:
          type: array
          items:
            $ref: '#/components/schemas/coralogixapisincidentsv1MetaLabel'
          description: The meta labels of the incident
        operator:
          $ref: '#/components/schemas/incidentsv1FilterOperator'
      title: Label filter configuration
      required:
        - metaLabels
    v1LatencySli:
      type: object
      properties:
        thresholdMicroseconds:
          type: string
          example: '1000000'
        thresholdSymbol:
          $ref: '#/components/schemas/v1ThresholdSymbol'
      description: >-
        This data structure represents a Latency Service Level Indicator (SLO)
        in Coralogix APM.
      title: Latency SLO
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - thresholdMicroseconds
        - thresholdSymbol
    v1ListAllOutgoingWebhooksResponse:
      type: object
      properties:
        deployed:
          type: array
          items:
            $ref: '#/components/schemas/v1OutgoingWebhookExtendedSummary'
      title: List all outgoing webhooks response
    v1ListConnectorSummariesResponse:
      type: object
      properties:
        connectors:
          type: array
          items:
            $ref: '#/components/schemas/v1ConnectorSummary'
      description: Response containing summaries of connectors
      title: List Connector Summaries Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1ListConnectorsResponse:
      type: object
      properties:
        connectors:
          type: array
          items:
            $ref: '#/components/schemas/v1Connector'
      description: Response containing a list of connectors
      title: List Connectors Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1ListEntitySubTypesResponse:
      type: object
      properties:
        entitySubTypes:
          type: array
          items:
            type: string
    v1ListEntityTypesResponse:
      type: object
      properties:
        deprecatedEntityTypes:
          type: array
          items:
            type: string
        entityTypes:
          type: array
          items:
            $ref: '#/components/schemas/coralogixapisnotification_centerEntityType'
    v1ListGlobalRoutersResponse:
      type: object
      properties:
        routers:
          type: array
          items:
            $ref: '#/components/schemas/v1GlobalRouter'
      description: Response containing requested global routers
      title: List Global Routers Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1ListIbmEventNotificationsInstancesResponse:
      type: object
      properties:
        instances:
          type: array
          items:
            $ref: >-
              #/components/schemas/ListIbmEventNotificationsInstancesResponseEventNotificationsInstance
      title: List IBM event notification instances response
    v1ListIncidentAggregationsRequest:
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/v1IncidentQueryFilter'
        groupBys:
          type: array
          items:
            $ref: '#/components/schemas/v1GroupBy'
          description: Group by fields for aggregation
        pagination:
          $ref: '#/components/schemas/incidentsv1PaginationRequest'
      description: >-
        Request to get aggregated incident data with filtering and grouping
        options
      title: List incident aggregations request
    v1ListIncidentAggregationsResponse:
      type: object
      properties:
        incidentAggs:
          type: array
          items:
            $ref: '#/components/schemas/v1IncidentAggregation'
          description: List of incident aggregations
        pagination:
          $ref: '#/components/schemas/incidentsv1PaginationResponse'
      description: Response containing aggregated incident data and pagination information
      title: List incident aggregations response
      required:
        - incidentAggs
        - pagination
    v1ListIncidentEventRequestOrderBy:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/v1IncidentEventOrderByFieldType'
        direction:
          $ref: '#/components/schemas/incidentsv1OrderByDirection'
      title: List incident events order by request
    v1ListIncidentEventsFilterValuesRequest:
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/v1IncidentEventQueryFilter'
      description: A request to get available filter values for incident events
      title: List incident events filter values request
    v1ListIncidentEventsFilterValuesResponse:
      type: object
      properties:
        filtersValues:
          $ref: '#/components/schemas/v1IncidentQueryFiltersValues'
      description: A response containing available filter values for incident events
      title: List incident events filter values response
    v1ListIncidentEventsRequest:
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/v1IncidentEventQueryFilter'
        pagination:
          $ref: '#/components/schemas/incidentsv1PaginationRequest'
        orderBy:
          $ref: '#/components/schemas/v1ListIncidentEventRequestOrderBy'
      description: >-
        Request to list incident events with filtering, pagination and ordering
        options
      title: List incident events request
    v1ListIncidentEventsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1IncidentEventExtended'
          description: List of incident events
        pagination:
          $ref: '#/components/schemas/incidentsv1PaginationResponse'
      description: >-
        A response containing a list of incident events and pagination
        information
      title: List incident events response
      required:
        - items
    v1ListIncidentEventsTotalCountRequest:
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/v1IncidentEventQueryFilter'
      description: A request to get the total count of incident events matching a filter
      title: List incident events total count request
    v1ListIncidentEventsTotalCountResponse:
      type: object
      properties:
        count:
          type: string
          format: uint64
          example: 100
          description: Total number of incident events matching the filter
        reachedLimit:
          type: boolean
          example: false
          description: Indicates if the count reached the system limit
      description: >-
        A response containing the total count of matching incident events and
        whether the count limit was reached
      title: List incident events total count response
    v1ListIncidentsRequest:
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/v1IncidentQueryFilter'
        pagination:
          $ref: '#/components/schemas/incidentsv1PaginationRequest'
        orderBys:
          type: array
          items:
            $ref: '#/components/schemas/incidentsv1OrderBy'
          description: Order by fields
      description: >-
        Request to list incidents with filtering, pagination and ordering
        options
      title: List incidents request
    v1ListIncidentsResponse:
      type: object
      properties:
        incidents:
          type: array
          items:
            $ref: '#/components/schemas/v1Incident'
        pagination:
          $ref: '#/components/schemas/incidentsv1PaginationResponse'
      description: Response containing a list of incidents and pagination information
      title: List incidents response
      required:
        - incidents
        - pagination
    v1ListManagedIntegrationKeysResponse:
      type: object
      properties:
        integrationKeys:
          type: array
          items:
            type: string
      title: List managed integration keys response
      required:
        - integrationKeys
    v1ListOutboundWebhooksSummaryResponse:
      type: object
      properties:
        outboundWebhookSummaries:
          type: array
          items:
            $ref: '#/components/schemas/v1OutboundWebhookSummary'
      title: List outbound webhooks summary response
    v1ListOutgoingWebhookTypesResponse:
      type: object
      properties:
        webhooks:
          type: array
          items:
            $ref: >-
              #/components/schemas/ListOutgoingWebhookTypesResponseOutgoingWebhookType
      title: List outgoing webhook types response
    v1ListOutgoingWebhooksResponse:
      type: object
      properties:
        deployed:
          type: array
          items:
            $ref: '#/components/schemas/v1OutgoingWebhookSummary'
      title: List outgoing webhooks response
    v1ListPresetSummariesResponse:
      type: object
      properties:
        presetSummaries:
          type: array
          items:
            $ref: '#/components/schemas/v1PresetSummary'
    v1ListRemoteActionTemplatesResponse:
      type: object
      properties:
        remoteActions:
          type: array
          items:
            $ref: '#/components/schemas/v1RemoteActionTemplate'
    v1ListRuleGroupsResponse:
      type: object
      properties:
        ruleGroups:
          type: array
          items:
            $ref: '#/components/schemas/v1RuleGroup'
    v1ListServiceSlosResponse:
      type: object
      properties:
        slos:
          type: array
          items:
            $ref: '#/components/schemas/v1ServiceSlo'
      description: This data structure represents a response to list Service SLOs.
      title: List Service SLOs Response
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - slos
    v1ListSloRowsResponse:
      type: object
      properties:
        sloRows:
          type: array
          items:
            $ref: '#/components/schemas/v1SloHubRow'
        zeroState:
          type: boolean
    v1ListSlosResponse:
      type: object
      properties:
        slos:
          type: array
          items:
            $ref: '#/components/schemas/v1Slo'
    v1LocalChangelog:
      type: object
      properties:
        changes:
          type: array
          items:
            $ref: '#/components/schemas/v1RevisionRef'
      title: Local changelog
    v1Log:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties:
            type: string
        text:
          type: string
    v1LogMetaFieldsValues:
      type: object
      properties:
        applicationNameValues:
          type: string
          example: application_name
        severityValues:
          type: string
          example: severity
        subsystemNameValues:
          type: string
          example: subsystem_name
      description: Values for log meta fields.
      title: Log Meta Fields Values
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - applicationNameValues
        - severityValues
        - subsystemNameValues
    v1LogRules:
      type: object
      properties:
        severities:
          type: array
          items:
            $ref: '#/components/schemas/coralogixquotav1Severity'
      description: Log rules for a policy.
      title: Log Rules
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - severities
    v1MSTeamsWorkflowConfig:
      type: object
      title: Microsoft Teams workflow configuration
    v1Measurement:
      type: object
      properties:
        measurementName:
          type: string
        dataSourceType:
          $ref: '#/components/schemas/coralogixglobal_mappingv1DataSourceType'
        query:
          type: string
        labels:
          type: array
          items:
            type: string
        id:
          type: string
        description:
          type: string
        displayName:
          type: string
        logicalGroup:
          type: string
        orderingQuery:
          type: string
        appendableMetrics:
          type: array
          items:
            type: string
        dataSource:
          $ref: '#/components/schemas/v1DataSource'
        groupLeft:
          type: string
        joinOn:
          type: string
        subjectLabel:
          type: string
    v1MeasurementMetadata:
      type: object
      properties:
        measurementName:
          type: string
        aggregationType:
          $ref: '#/components/schemas/v1AggregationType'
        queryType:
          $ref: '#/components/schemas/v1QueryType'
        step:
          type: integer
          format: int32
        aggregationWindowSeconds:
          type: integer
          format: int32
        topkAggregation:
          $ref: '#/components/schemas/v1TopkAggregation'
    v1MeasurementQuery:
      type: object
      properties:
        query:
          type: string
        name:
          type: string
        description:
          type: string
        displayName:
          type: string
        logicalGroup:
          type: string
        queryResults:
          type: array
          items:
            $ref: '#/components/schemas/v1QueryResult'
        orderingQuery:
          type: string
        aggregationType:
          $ref: '#/components/schemas/v1AggregationType'
        queryType:
          $ref: '#/components/schemas/v1QueryType'
        labelValues:
          $ref: '#/components/schemas/v1LabelValues'
        step:
          type: integer
          format: int32
        aggregationWindowSeconds:
          type: integer
          format: int32
    v1MetaLabels:
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/alertingmeta_labels_protobufv1MetaLabel'
    v1Metric:
      type: object
      properties:
        query:
          type: string
    v1MicrosoftTeamsConfig:
      type: object
      title: Microsoft Teams configuration
    v1Monthly:
      type: object
      properties:
        daysOfMonth:
          type: array
          items:
            type: integer
            format: int32
          description: >-
            Dynamic Monthly days_of_month: The rule will be activated at monthly
            intervals on specific days in a month.
    v1NoDeployment:
      type: object
      description: >-
        This data structure represents an integration that does not require
        deployment.
      title: No deployment
    v1OneTime:
      type: object
      properties:
        timeframe:
          $ref: '#/components/schemas/v1Timeframe'
    v1OpsgenieConfig:
      type: object
      title: Opsgenie configuration
    v1OriginatorType:
      type: string
      enum:
        - ORIGINATOR_TYPE_UNSPECIFIED
        - ORIGINATOR_TYPE_OPERATIONAL
        - ORIGINATOR_TYPE_ADMINISTRATIVE
      default: ORIGINATOR_TYPE_UNSPECIFIED
    v1OutRule:
      type: object
      properties:
        record:
          type: string
        expr:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        lastEvalDurationMs:
          type: string
          format: uint64
    v1OutRuleGroup:
      type: object
      properties:
        name:
          type: string
        interval:
          type: integer
          format: int64
        limit:
          type: string
          format: uint64
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v1OutRule'
        lastEvalAt:
          type: string
          format: uint64
        version:
          type: integer
          format: int64
        id:
          type: string
    v1OutRuleGroupSet:
      type: object
      properties:
        id:
          type: string
        groups:
          type: array
          items:
            $ref: '#/components/schemas/v1OutRuleGroup'
        name:
          type: string
      description: An output set of rule groups.
      title: Out Rule Group Set
      externalDocs:
        description: Find out more about recording rules
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/metric-rules/recording-rules/
    v1OutboundWebhookSummary:
      type: object
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/v1WebhookType'
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        externalId:
          type: integer
          format: int64
      title: Outbound webhook summary
      required:
        - id
        - name
        - createdAt
        - externalId
        - type
    v1OutgoingWebhook:
      type: object
      properties:
        id:
          type: string
          example: webhook_id
        type:
          $ref: '#/components/schemas/v1WebhookType'
        name:
          type: string
          example: my_webhook
        url:
          type: string
          example: slack.webhook.com
        createdAt:
          type: string
          format: date-time
          example: '2024-10-20T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-10-20T00:00:00.000Z'
        externalId:
          type: integer
          format: int64
          example: external_id_example
        genericWebhook:
          $ref: '#/components/schemas/v1GenericWebhookConfig'
        slack:
          $ref: '#/components/schemas/v1SlackConfig'
        pagerDuty:
          $ref: '#/components/schemas/v1PagerDutyConfig'
        sendLog:
          $ref: '#/components/schemas/v1SendLogConfig'
        emailGroup:
          $ref: '#/components/schemas/v1EmailGroupConfig'
        microsoftTeams:
          $ref: '#/components/schemas/v1MicrosoftTeamsConfig'
        jira:
          $ref: '#/components/schemas/v1JiraConfig'
        opsgenie:
          $ref: '#/components/schemas/v1OpsgenieConfig'
        demisto:
          $ref: '#/components/schemas/v1DemistoConfig'
        awsEventBridge:
          $ref: '#/components/schemas/v1AwsEventBridgeConfig'
        ibmEventNotifications:
          $ref: '#/components/schemas/v1IbmEventNotificationsConfig'
        msTeamsWorkflow:
          $ref: '#/components/schemas/v1MSTeamsWorkflowConfig'
      title: Outgoing webhook
      required:
        - id
        - type
        - name
        - createdAt
        - externalId
    v1OutgoingWebhookDetails:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/v1WebhookType'
        label:
          type: string
          example: example_label
      title: Outgoing webhook details
      required:
        - label
        - type
    v1OutgoingWebhookExtendedSummary:
      type: object
      properties:
        id:
          type: string
          example: webhook_id
        type:
          $ref: '#/components/schemas/v1WebhookType'
        name:
          type: string
          example: my_webhook
        url:
          type: string
          example: slack.webhook.com
        createdAt:
          type: string
          format: date-time
          example: '2024-10-20T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-10-20T00:00:00.000Z'
        externalId:
          type: integer
          format: int64
          example: external_id_example
      title: Outgoing webhook extended summary
      required:
        - id
        - name
        - createdAt
        - externalId
        - type
    v1OutgoingWebhookInputData:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/v1WebhookType'
        name:
          type: string
          example: my_webhook
        url:
          type: string
          example: slack.webhook.com
        genericWebhook:
          $ref: '#/components/schemas/v1GenericWebhookConfig'
        slack:
          $ref: '#/components/schemas/v1SlackConfig'
        pagerDuty:
          $ref: '#/components/schemas/v1PagerDutyConfig'
        sendLog:
          $ref: '#/components/schemas/v1SendLogConfig'
        emailGroup:
          $ref: '#/components/schemas/v1EmailGroupConfig'
        microsoftTeams:
          $ref: '#/components/schemas/v1MicrosoftTeamsConfig'
        jira:
          $ref: '#/components/schemas/v1JiraConfig'
        opsgenie:
          $ref: '#/components/schemas/v1OpsgenieConfig'
        demisto:
          $ref: '#/components/schemas/v1DemistoConfig'
        awsEventBridge:
          $ref: '#/components/schemas/v1AwsEventBridgeConfig'
        ibmEventNotifications:
          $ref: '#/components/schemas/v1IbmEventNotificationsConfig'
        msTeamsWorkflow:
          $ref: '#/components/schemas/v1MSTeamsWorkflowConfig'
      title: Outgoing webhook input data
      required:
        - name
        - config
        - type
    v1OutgoingWebhookSummary:
      type: object
      properties:
        id:
          type: string
          example: webhook_id
        name:
          type: string
          example: my_webhook
        url:
          type: string
          example: slack.webhook.com
        createdAt:
          type: string
          format: date-time
          example: '2024-10-20T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-10-20T00:00:00.000Z'
        externalId:
          type: integer
          format: int64
          example: external_id_example
      title: Outgoing webhook summary
      required:
        - id
        - name
        - createdAt
        - externalId
    v1PagerDutyConfig:
      type: object
      properties:
        serviceKey:
          type: string
          example: pager_duty_service_key
      title: PagerDuty configuration
      required:
        - serviceKey
    v1PaginationData:
      type: object
      properties:
        pageSize:
          type: integer
          format: int32
        pageIndex:
          type: integer
          format: int32
        orderBy:
          $ref: '#/components/schemas/v1SortOrder'
        orderByMeasurement:
          type: string
    v1Parameter:
      type: object
      properties:
        key:
          type: string
        stringValue:
          type: string
        booleanValue:
          type: boolean
        stringList:
          $ref: '#/components/schemas/ParameterStringList'
        apiKey:
          $ref: '#/components/schemas/ParameterApiKeyData'
        numericValue:
          type: number
          format: double
        sensitiveData:
          $ref: '#/components/schemas/ParameterSensitiveDataPlaceholder'
      title: Parameter
    v1ParseParameters:
      type: object
      properties:
        destinationField:
          type: string
        rule:
          type: string
    v1Policy:
      type: object
      properties:
        id:
          type: string
          example: policy_id
        companyId:
          type: integer
          format: int32
          example: 1234
        name:
          type: string
          example: My Policy
        description:
          type: string
          example: My Policy Description
        priority:
          $ref: '#/components/schemas/coralogixquotav1Priority'
        deleted:
          type: boolean
          example: false
        enabled:
          type: boolean
          example: true
        order:
          type: integer
          format: int32
          example: 1
        applicationRule:
          $ref: '#/components/schemas/coralogixquotav1Rule'
        subsystemRule:
          $ref: '#/components/schemas/coralogixquotav1Rule'
        logRules:
          $ref: '#/components/schemas/v1LogRules'
        spanRules:
          $ref: '#/components/schemas/v1SpanRules'
        createdAt:
          type: string
          example: '2021-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          example: '2021-01-01T00:00:00.000Z'
        archiveRetention:
          $ref: '#/components/schemas/v1ArchiveRetention'
      description: >-
        A policy is a set of rules that define the behavior of the Coralogix
        system for a specific company.
      title: Policy
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - id
        - companyId
        - name
        - priority
        - deleted
        - enabled
        - order
    v1PolicyOrder:
      type: object
      properties:
        order:
          type: integer
          format: int32
          example: 1
        id:
          type: string
          example: id
      description: Order of a policy.
      title: Policy Order
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - order
        - id
    v1PresetSummary:
      type: object
      properties:
        id:
          type: string
          example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
        userDefinedId:
          type: string
          example: user-preset-id
        deprecatedEntityType:
          type: string
        connectorType:
          $ref: '#/components/schemas/notification_centerConnectorType'
        parentId:
          type: string
          example: c246e826-10c2-405e-8d3f-afcc24ad4d15
        name:
          type: string
          example: My Preset
          maxLength: 200
        description:
          type: string
          example: Custom preset for alerts
          maxLength: 5000
        createTime:
          type: string
          format: date-time
        updateTime:
          type: string
          format: date-time
        presetType:
          $ref: '#/components/schemas/v1PresetType'
        entityType:
          $ref: '#/components/schemas/coralogixapisnotification_centerEntityType'
      description: Provides a concise overview of a preset
      title: Preset Summary
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1PresetType:
      type: string
      enum:
        - PRESET_TYPE_UNSPECIFIED
        - SYSTEM
        - CUSTOM
      default: PRESET_TYPE_UNSPECIFIED
    v1QueryResult:
      type: object
      properties:
        metric:
          type: object
          additionalProperties:
            type: string
        values:
          type: array
          items:
            type: array
            items:
              type: object
    v1QueryType:
      type: string
      enum:
        - QUERY_TYPE_UNSPECIFIED
        - QUERY_TYPE_RANGE
        - QUERY_TYPE_INSTANT
      default: QUERY_TYPE_UNSPECIFIED
    v1QuickTimeSelection:
      type: object
      properties:
        caption:
          type: string
          example: Last Hour
          description: Folder name
          minLength: 1
        seconds:
          type: integer
          format: int64
          example: 3600
          description: Folder name
      title: Quick time selection
      required:
        - seconds
    v1Recurring:
      type: object
      properties:
        always:
          $ref: '#/components/schemas/RecurringAlways'
        dynamic:
          $ref: '#/components/schemas/RecurringDynamic'
    v1RemoteActionTemplate:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        actionType:
          type: string
        connectorType:
          $ref: '#/components/schemas/notification_centerConnectorType'
        outputSchemaId:
          type: string
        entityLabels:
          type: object
          additionalProperties:
            type: string
    v1RemoveCustomLabelMappingsResponse:
      type: object
      properties:
        numberOfDeletedMappings:
          type: integer
          format: int32
    v1RemoveEnrichmentsResponse:
      type: object
      properties:
        remainingEnrichments:
          type: array
          items:
            $ref: '#/components/schemas/coralogixenrichmentv1Enrichment'
      description: Response data structure for enrichments deletion
      title: Encrichments Delettion Response
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - remainingEnrichments
    v1RemoveFieldsParameters:
      type: object
      properties:
        fields:
          type: array
          items:
            type: string
    v1RemoveGlobalMeasurementsInternalResponse:
      type: object
      properties:
        numberOfDeletedMeasurements:
          type: integer
          format: int32
    v1RemoveLabelMappingsResponse:
      type: object
      properties:
        numberOfDeletedMappings:
          type: integer
          format: int32
    v1RemoveUsersFromTeamGroupResponse:
      type: object
      description: >-
        Response confirming the successful removal of users from the specified
        team group.
      title: RemoveUsersFromTeamGroupResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1RemoveUsersFromTeamGroupsRequestRemoveUsersFromTeamGroup:
      type: object
      properties:
        groupId:
          $ref: '#/components/schemas/v1TeamGroupId'
        userIds:
          type: array
          items:
            $ref: '#/components/schemas/permissionsv1UserId'
          title: / Users to remove to group
      description: >-
        This data structure represents the information associated with an API
        key.
      title: RemoveUsersFromTeamGroup
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1RemoveUsersFromTeamGroupsResponse:
      type: object
      description: >-
        Response confirming the successful bulk removal of users from multiple
        team groups.
      title: RemoveUsersFromTeamGroupsResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1ReorderPoliciesRequest:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/v1PolicyOrder'
        sourceType:
          $ref: '#/components/schemas/quotav1SourceType'
      description: This data structue is used to reorder policies.
      title: Reorder Policies Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - orders
        - sourceType
    v1ReorderPoliciesResponse:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/v1PolicyOrder'
      description: This data structure is obtained when reordering policies.
      title: Reorder Policies Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - orders
    v1ReplaceConnectorResponse:
      type: object
      properties:
        connector:
          $ref: '#/components/schemas/v1Connector'
      description: Response containing the updated connector
      title: Replace Connector Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1ReplaceCustomPresetResponse:
      type: object
      properties:
        preset:
          $ref: '#/components/schemas/presetsv1Preset'
      description: Response containing the updated custom preset
      title: Replace Custom Preset Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1ReplaceGlobalRouterResponse:
      type: object
      properties:
        router:
          $ref: '#/components/schemas/v1GlobalRouter'
      description: Response which contains an updated global router
      title: Replace Global Router Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1ReplaceParameters:
      type: object
      properties:
        destinationField:
          type: string
        replaceNewVal:
          type: string
        rule:
          type: string
    v1ReplaceServiceSloRequest:
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/v1ServiceSlo'
      description: This data structure represents a request to update a Service SLO.
      title: Replace Service SLO Request
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - slo
    v1ReplaceServiceSloResponse:
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/v1ServiceSlo'
      description: This data structure represents a response to update a Service SLO.
      title: Replace Service SLO Response
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - slo
    v1ReplaceSloRequest:
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/v1Slo'
    v1ReplaceSloResponse:
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/v1Slo'
        effectedSloAlertIds:
          type: array
          items:
            type: string
    v1RequestBasedMetricSli:
      type: object
      properties:
        goodEvents:
          $ref: '#/components/schemas/v1Metric'
        totalEvents:
          $ref: '#/components/schemas/v1Metric'
    v1RequestBasedPermutationData:
      type: object
      properties:
        goodEvents:
          type: integer
          format: int64
        badEvents:
          type: integer
          format: int64
    v1ResolveIncidentsRequest:
      type: object
      properties:
        incidentIds:
          type: array
          example:
            - incident_id_1
            - incident_id_2
          items:
            type: string
          description: List of incident IDs to resolve
      description: Request to resolve one or more incidents
      title: Resolve incidents request
      required:
        - incidentIds
    v1ResolveIncidentsResponse:
      type: object
      properties:
        incidents:
          type: array
          items:
            $ref: '#/components/schemas/v1Incident'
          description: List of incidents after resolution
      description: Response containing the updated incidents after resolution
      title: Resolve incidents response
      required:
        - incidents
    v1ResponseStatus:
      type: object
      properties:
        statusCode:
          $ref: '#/components/schemas/rpcCode'
        message:
          type: string
        details:
          type: object
          additionalProperties:
            type: string
    v1RetentionUpdateElement:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    v1RevisionRef:
      type: object
      properties:
        version:
          type: string
          title: integration revision version
        descriptionMd:
          type: string
      title: Revision reference
    v1Role:
      type: object
      properties:
        roleId:
          $ref: '#/components/schemas/v1RoleId'
        name:
          type: string
          title: / Unique role name
        description:
          type: string
      description: >-
        / A group role. Each role has a collection of permissions associated
        with it. A group can have many roles.
    v1RoleId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    v1RuleGroup:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        creator:
          type: string
        enabled:
          type: boolean
        hidden:
          type: boolean
        ruleMatchers:
          type: array
          items:
            $ref: '#/components/schemas/v1RuleMatcher'
        ruleSubgroups:
          type: array
          items:
            $ref: '#/components/schemas/v1RuleSubgroup'
        order:
          type: integer
          format: int64
    v1RuleGroupListing:
      type: object
      properties:
        ruleGroups:
          type: array
          items:
            $ref: '#/components/schemas/v1OutRuleGroup'
      description: A listing of rule groups.
      title: Rule Group Listing
      externalDocs:
        description: Find out more about recording rules
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/metric-rules/recording-rules/
    v1RuleGroupSetListing:
      type: object
      properties:
        sets:
          type: array
          items:
            $ref: '#/components/schemas/v1OutRuleGroupSet'
      description: A listing of rule group sets.
      title: Rule Group Set Listing
      externalDocs:
        description: Find out more about recording rules
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/metric-rules/recording-rules/
    v1RuleGroupSetsUpdateBody:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/v1InRuleGroup'
        name:
          type: string
      description: A set of rule groups to update.
      title: Update Rule Group Set
      externalDocs:
        description: Find out more about recording rules
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/metric-rules/recording-rules/
    v1RuleMatcher:
      type: object
      properties:
        applicationName:
          $ref: '#/components/schemas/v1ApplicationNameConstraint'
        subsystemName:
          $ref: '#/components/schemas/v1SubsystemNameConstraint'
        severity:
          $ref: '#/components/schemas/v1SeverityConstraint'
    v1RuleParameters:
      type: object
      properties:
        extractParameters:
          $ref: '#/components/schemas/v1ExtractParameters'
        jsonExtractParameters:
          $ref: '#/components/schemas/v1JsonExtractParameters'
        replaceParameters:
          $ref: '#/components/schemas/v1ReplaceParameters'
        parseParameters:
          $ref: '#/components/schemas/v1ParseParameters'
        allowParameters:
          $ref: '#/components/schemas/v1AllowParameters'
        blockParameters:
          $ref: '#/components/schemas/v1BlockParameters'
        extractTimestampParameters:
          $ref: '#/components/schemas/v1ExtractTimestampParameters'
        removeFieldsParameters:
          $ref: '#/components/schemas/v1RemoveFieldsParameters'
        jsonStringifyParameters:
          $ref: '#/components/schemas/v1JsonStringifyParameters'
        jsonParseParameters:
          $ref: '#/components/schemas/v1JsonParseParameters'
    v1RuleSubgroup:
      type: object
      properties:
        id:
          type: string
        rules:
          type: array
          items:
            $ref: '#/components/schemas/coralogixrulesv1Rule'
        enabled:
          type: boolean
        order:
          type: integer
          format: int64
    v1RuleTypeId:
      type: string
      enum:
        - RULE_TYPE_ID_UNSPECIFIED
        - RULE_TYPE_ID_IS
        - RULE_TYPE_ID_IS_NOT
        - RULE_TYPE_ID_START_WITH
        - RULE_TYPE_ID_INCLUDES
      default: RULE_TYPE_ID_UNSPECIFIED
    v1RumVersionData:
      type: object
      properties:
        versions:
          type: array
          items:
            $ref: '#/components/schemas/v1RumVersionDataVersion'
        syncedAt:
          type: string
          format: date-time
      title: RUM version data
    v1RumVersionDataVersion:
      type: object
      properties:
        version:
          type: string
        logMetadata:
          $ref: '#/components/schemas/RumVersionDataLogMetadata'
        sourceMapMetadata:
          $ref: '#/components/schemas/RumVersionDataSourceMapMetadata'
      title: Version
    v1SaveContextualDataIntegrationRequest:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/v1IntegrationMetadata'
      title: Save contextual data integration request
      required:
        - metadata
    v1SaveContextualDataIntegrationResponse:
      type: object
      properties:
        integrationId:
          type: string
      title: Save contextual data integration response
      required:
        - integrationId
    v1SaveIntegrationRequest:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/v1IntegrationMetadata'
      title: Save integration request
      required:
        - metadata
    v1SaveIntegrationResponse:
      type: object
      properties:
        integrationId:
          type: string
      title: Save integration response
      required:
        - integrationId
    v1Schedule:
      type: object
      properties:
        scheduleOperation:
          $ref: '#/components/schemas/v1ScheduleOperation'
        oneTime:
          $ref: '#/components/schemas/v1OneTime'
        recurring:
          $ref: '#/components/schemas/v1Recurring'
    v1ScheduleOperation:
      type: string
      enum:
        - SCHEDULE_OPERATION_UNSPECIFIED
        - SCHEDULE_OPERATION_MUTE
        - SCHEDULE_OPERATION_ACTIVATE
      default: SCHEDULE_OPERATION_UNSPECIFIED
    v1ScopeFilter:
      type: object
      properties:
        term:
          type: string
          description: / The filter term to use as a matching reference.
        filterType:
          $ref: '#/components/schemas/v1FilterType'
      title: >-
        / A scope filter, given a filter term and a filter type is used to
        configure filter capabilities
    v1ScopeFilters:
      type: object
      properties:
        subsystems:
          type: array
          items:
            $ref: '#/components/schemas/v1ScopeFilter'
          title: / List of subsystem scope filters
        applications:
          type: array
          items:
            $ref: '#/components/schemas/v1ScopeFilter'
          title: / List of applications scope filters
      title: >-
        / Scope filters are currently possible to be defined for subsystems and
        applications
    v1ScopeId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    v1SearchCustomEnrichmentDataResponse:
      type: object
      properties:
        customEnrichmentsData:
          type: array
          items:
            $ref: '#/components/schemas/v1CustomEnrichmentData'
    v1SearchQuery:
      type: object
      properties:
        query:
          type: string
          title: View search query
          minLength: 1
      title: SearchQuery
      required:
        - query
    v1SelectedFilters:
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/coralogixapisviewsv1Filter'
          title: Selected filters
          minItems: 1
      title: Selected filters
    v1SendLogConfig:
      type: object
      properties:
        uuid:
          type: string
          example: d838cd7b-087b-40c6-bc33-80997020f5d0
        payload:
          type: string
          example:
            key: value
      title: Send log configuration
      required:
        - uuid
        - payload
    v1ServiceSlo:
      type: object
      properties:
        id:
          type: string
          example: slo_id
        name:
          type: string
          example: slo_name
        serviceName:
          type: string
          example: service_name
        status:
          $ref: '#/components/schemas/apmservicesv1SloStatus'
        description:
          type: string
          example: slo_description
        targetPercentage:
          type: integer
          format: int64
          example: 99
        createdAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00.000Z'
        remainingErrorBudgetPercentage:
          type: integer
          format: int64
          example: 1
        latencySli:
          $ref: '#/components/schemas/v1LatencySli'
        errorSli:
          $ref: '#/components/schemas/v1ErrorSli'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/v1SliFilter'
        period:
          $ref: '#/components/schemas/v1SloPeriod'
      description: >-
        This data structure represents a Service Level Objective (SLO) in
        Coralogix APM.
      title: Service SLO
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - name
        - serviceName
        - status
        - description
        - targetPercentage
        - sli_type
        - filters
        - period
    v1SetCustomPresetAsDefaultResponse:
      type: object
    v1SetPresetAsDefaultResponse:
      type: object
    v1SetTeamGroupScopeResponse:
      type: object
      properties:
        scopeId:
          $ref: '#/components/schemas/v1ScopeId'
      description: >-
        Response message containing the ID of the newly created or updated scope
        for a team group
      title: SetTeamGroupScopeResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1SeverityConstraint:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/v1SeverityConstraintValue'
    v1SeverityConstraintValue:
      type: string
      enum:
        - VALUE_DEBUG_OR_UNSPECIFIED
        - VALUE_VERBOSE
        - VALUE_INFO
        - VALUE_WARNING
        - VALUE_ERROR
        - VALUE_CRITICAL
      default: VALUE_DEBUG_OR_UNSPECIFIED
    v1SlackConfig:
      type: object
      properties:
        digests:
          type: array
          items:
            $ref: '#/components/schemas/SlackConfigDigest'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/SlackConfigAttachment'
      title: Slack configuration
    v1SliFilter:
      type: object
      properties:
        field:
          type: string
          example: field_name
        compareType:
          $ref: '#/components/schemas/v1CompareType'
        fieldValues:
          type: array
          example:
            - value1
            - value2
          items:
            type: string
      description: >-
        This data structure represents a filter for a Service Level Indicator
        (SLI) in Coralogix APM.
      title: SLI Filter
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
      required:
        - field
        - compareType
        - fieldValues
    v1Slo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        creator:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        revision:
          $ref: '#/components/schemas/slov1Revision'
        grouping:
          $ref: '#/components/schemas/slov1Grouping'
        createTime:
          type: string
          format: date-time
        updateTime:
          type: string
          format: date-time
        targetThresholdPercentage:
          type: number
          format: float
        sloTimeFrame:
          $ref: '#/components/schemas/v1SloTimeFrame'
        requestBasedMetricSli:
          $ref: '#/components/schemas/v1RequestBasedMetricSli'
        windowBasedMetricSli:
          $ref: '#/components/schemas/v1WindowBasedMetricSli'
    v1SloConstantFilterField:
      type: string
      enum:
        - SLO_CONST_FILTER_FIELD_UNSPECIFIED
        - SLO_CONST_FILTER_FIELD_USER_NAME
        - SLO_CONST_FILTER_FIELD_SLO_NAME
      default: SLO_CONST_FILTER_FIELD_UNSPECIFIED
    v1SloData:
      type: object
      properties:
        statusCount:
          type: array
          items:
            $ref: '#/components/schemas/v1SloStatusCount'
        minRemainingErrorBudget:
          type: number
          format: float
        minCompliance:
          type: number
          format: float
        incompleteData:
          type: boolean
    v1SloExecutionRequest:
      type: object
      properties:
        createSloRequest:
          $ref: '#/components/schemas/v1CreateSloRequest'
        replaceSloRequest:
          $ref: '#/components/schemas/v1ReplaceSloRequest'
        deleteSloRequest:
          $ref: '#/components/schemas/v1DeleteSloRequest'
    v1SloExecutionResponse:
      type: object
      properties:
        createSloResponse:
          $ref: '#/components/schemas/v1CreateSloResponse'
        replaceSloResponse:
          $ref: '#/components/schemas/v1ReplaceSloResponse'
        deleteSloResponse:
          $ref: '#/components/schemas/v1DeleteSloResponse'
    v1SloFilter:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/v1SloFilterField'
        predicate:
          $ref: '#/components/schemas/v1SloFilterPredicate'
    v1SloFilterField:
      type: object
      properties:
        constFilter:
          $ref: '#/components/schemas/v1SloConstantFilterField'
        labelName:
          type: string
    v1SloFilterPredicate:
      type: object
      properties:
        is:
          $ref: '#/components/schemas/v1IsFilterPredicate'
    v1SloFilters:
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/v1SloFilter'
    v1SloHubRow:
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/v1Slo'
        sloData:
          $ref: '#/components/schemas/v1SloData'
    v1SloPeriod:
      type: string
      enum:
        - SLO_PERIOD_UNSPECIFIED
        - SLO_PERIOD_7_DAYS
        - SLO_PERIOD_14_DAYS
        - SLO_PERIOD_30_DAYS
      default: SLO_PERIOD_UNSPECIFIED
    v1SloPermutationData:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/v1GroupValue'
        status:
          $ref: '#/components/schemas/coralogixapisslov1SloStatus'
        remainingErrorBudget:
          type: number
          format: float
        compliance:
          type: number
          format: float
        requestBasedPermutationData:
          $ref: '#/components/schemas/v1RequestBasedPermutationData'
        windowBasedPermutationData:
          $ref: '#/components/schemas/v1WindowBasedPermutationData'
        incompleteData:
          type: boolean
    v1SloStatusCount:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/coralogixapisslov1SloStatus'
        count:
          type: integer
          format: int64
    v1SloTimeFrame:
      type: string
      enum:
        - SLO_TIME_FRAME_UNSPECIFIED
        - SLO_TIME_FRAME_7_DAYS
        - SLO_TIME_FRAME_14_DAYS
        - SLO_TIME_FRAME_21_DAYS
        - SLO_TIME_FRAME_28_DAYS
        - SLO_TIME_FRAME_90_DAYS
      default: SLO_TIME_FRAME_UNSPECIFIED
    v1SortOrder:
      type: string
      enum:
        - SORT_ORDER_DESCENDING_OR_UNSPECIFIED
        - SORT_ORDER_ASCENDING
      default: SORT_ORDER_DESCENDING_OR_UNSPECIFIED
    v1SpanRules:
      type: object
      properties:
        serviceRule:
          $ref: '#/components/schemas/coralogixquotav1Rule'
        actionRule:
          $ref: '#/components/schemas/coralogixquotav1Rule'
        tagRules:
          type: array
          items:
            $ref: '#/components/schemas/v1TagRule'
    v1SubsystemNameConstraint:
      type: object
      properties:
        value:
          type: string
    v1SuspiciousIpType:
      type: object
    v1SyncRumDataRequest:
      type: object
      properties:
        force:
          type: boolean
          description: The time between syncs is controlled by configuration.
      title: Sync RUM data request
    v1SyncRumDataResponse:
      type: object
      properties:
        syncExecuted:
          type: boolean
        syncedAt:
          type: string
          format: date-time
      title: Sync RUM data response
      required:
        - syncedAt
    v1TableRow:
      type: object
      properties:
        queries:
          type: array
          items:
            $ref: '#/components/schemas/v1MeasurementQuery'
    v1TagRule:
      type: object
      properties:
        ruleTypeId:
          $ref: '#/components/schemas/v1RuleTypeId'
        tagName:
          type: string
          example: tag_name
        tagValue:
          type: string
          example: tag_value
      description: Tag rule for a policy.
      title: Tag Rule
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - ruleTypeId
        - tagName
        - tagValue
    v1TargetDomain:
      type: string
      enum:
        - ACTION
        - ALERT
        - ENRICHMENT
        - GRAFANA_DASHBOARD
        - KIBANA_DASHBOARD
        - PARSING_RULE
        - SAVED_VIEW
        - CX_CUSTOM_DASHBOARD
        - METRICS_RULE_GROUP
        - EVENTS_TO_METRICS
        - ALERT_V3
      default: ACTION
    v1TeamGroup:
      type: object
      properties:
        groupId:
          $ref: '#/components/schemas/v1TeamGroupId'
        name:
          type: string
          title: / Unique name
        description:
          type: string
          title: / Group description
        externalId:
          type: string
          description: / Group external identifier. Applies if team is externally defined.
        groupOrigin:
          $ref: '#/components/schemas/v1GroupOrigin'
        teamId:
          $ref: '#/components/schemas/coralogixpermissionsv1TeamId'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/v1Role'
          title: / Associated team roles
        scope:
          $ref: '#/components/schemas/coralogixpermissionsv1Scope'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        nextGenScopeId:
          type: string
    v1TeamGroupId:
      type: object
      properties:
        id:
          type: integer
          format: int64
      description: >-
        This data structure represents the information associated with a team
        group.
      title: TeamGroupId
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1TeamPermissionsMgmtServiceAddUsersToTeamGroupBody:
      type: object
      properties:
        groupId:
          type: object
          title: / Team group id to add users to
          externalDocs:
            description: Find out more about groups
            url: >-
              https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
        userIds:
          type: array
          items:
            $ref: '#/components/schemas/permissionsv1UserId'
          title: / Users to add to group
      description: >-
        Request to assign additional users to an existing team group, granting
        them the group's roles and scope permissions.
      title: AddUsersToTeamGroupRequest
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1TestConnectorConfigRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/notification_centerConnectorType'
        outputSchemaId:
          type: string
          example: default
        fields:
          type: array
          items:
            $ref: >-
              #/components/schemas/coralogixapisnotification_centerConnectorConfigField
        deprecatedEntityType:
          type: string
        entityType:
          $ref: '#/components/schemas/coralogixapisnotification_centerEntityType'
      description: Request to test a connector configuration
      title: Test Connector Config Request
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1TestConnectorConfigResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/v1TestResult'
    v1TestContextualDataIntegrationRequest:
      type: object
      properties:
        integrationData:
          $ref: '#/components/schemas/v1IntegrationMetadata'
        integrationId:
          type: string
      title: Test contextual data integration request
      required:
        - integrationData
    v1TestContextualDataIntegrationResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/v1TestIntegrationResult'
      title: Test contextual data integration response
      required:
        - result
    v1TestDestinationRequest:
      type: object
      properties:
        deprecatedEntityType:
          type: string
        entitySubType:
          type: string
          example: logsImmediateResolved
        deprecatedConnectorId:
          type: string
        deprecatedPresetId:
          type: string
        outputSchemaId:
          type: string
          example: default
        messageConfigFields:
          type: array
          items:
            $ref: >-
              #/components/schemas/coralogixapisnotification_centerMessageConfigField
        connectorIdentifier:
          $ref: '#/components/schemas/notification_centerConnectorIdentifier'
        presetIdentifier:
          $ref: >-
            #/components/schemas/coralogixapisnotification_centerPresetIdentifier
        entityType:
          $ref: '#/components/schemas/coralogixapisnotification_centerEntityType'
        connectorConfigFields:
          type: array
          items:
            $ref: >-
              #/components/schemas/notification_centerTemplatedConnectorConfigField
        connectorId:
          type: string
        presetId:
          type: string
    v1TestDestinationResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/v1TestResult'
    v1TestExistingConnectorRequest:
      type: object
      properties:
        deprecatedConnectorId:
          type: string
        outputSchemaId:
          type: string
          example: default
        connectorIdentifier:
          $ref: '#/components/schemas/notification_centerConnectorIdentifier'
        connectorId:
          type: string
    v1TestExistingConnectorResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/v1TestResult'
    v1TestExistingOutgoingWebhookRequest:
      type: object
      properties:
        id:
          type: string
          example: example_id
      title: Test existing outgoing webhook request
      required:
        - id
    v1TestExistingPresetRequest:
      type: object
      properties:
        deprecatedEntityType:
          type: string
        entitySubType:
          type: string
          example: logsImmediateResolved
        deprecatedPresetId:
          type: string
        deprecatedConnectorId:
          type: string
        connectorIdentifier:
          $ref: '#/components/schemas/notification_centerConnectorIdentifier'
        presetIdentifier:
          $ref: >-
            #/components/schemas/coralogixapisnotification_centerPresetIdentifier
        entityType:
          $ref: '#/components/schemas/coralogixapisnotification_centerEntityType'
        connectorId:
          type: string
        presetId:
          type: string
    v1TestExistingPresetResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/v1TestResult'
    v1TestExtensionRevisionRequest:
      type: object
      properties:
        extensionData:
          $ref: '#/components/schemas/v1ExtensionData'
        cleanupAfterTest:
          type: boolean
          default: 'false'
      title: Test extension revision request
      required:
        - extensionData
    v1TestExtensionRevisionResponse:
      type: object
      title: Test extension revision response
    v1TestIntegrationRequest:
      type: object
      properties:
        integrationData:
          $ref: '#/components/schemas/v1IntegrationMetadata'
        integrationId:
          type: string
      title: Test integration request
      required:
        - integrationData
    v1TestIntegrationResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/v1TestIntegrationResult'
      title: Test integration response
      required:
        - result
    v1TestIntegrationResult:
      type: object
      properties:
        success:
          $ref: '#/components/schemas/v1TestIntegrationResultSuccess'
        failure:
          $ref: '#/components/schemas/v1TestIntegrationResultFailure'
      title: Test integration result
    v1TestIntegrationResultFailure:
      type: object
      properties:
        errorMessage:
          type: string
      title: Failure
    v1TestIntegrationResultSuccess:
      type: object
      title: Success
    v1TestOutgoingWebhookRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/v1OutgoingWebhookInputData'
      title: Test outgoing webhook request
      required:
        - data
    v1TestOutgoingWebhookResponse:
      type: object
      properties:
        success:
          $ref: '#/components/schemas/v1TestOutgoingWebhookResponseSuccess'
        failure:
          $ref: '#/components/schemas/v1TestOutgoingWebhookResponseFailure'
      title: Test outgoing webhook response
    v1TestOutgoingWebhookResponseFailure:
      type: object
      properties:
        errorMessage:
          type: string
          example: example_error_message
        displayMessage:
          type: string
          example: example_display_message
        statusCode:
          type: integer
          format: int64
          example: 400
      title: Test outgoing webhook failure
      required:
        - errorMessage
        - displayMessage
    v1TestOutgoingWebhookResponseSuccess:
      type: object
      title: Test outgoing webhook success
    v1TestPoliciesResult:
      type: object
      properties:
        metaFieldsValues:
          $ref: '#/components/schemas/v1LogMetaFieldsValues'
        matched:
          type: boolean
          example: true
        policy:
          $ref: '#/components/schemas/v1Policy'
      description: Result of testing policies.
      title: Test Policies Result
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - metaFieldsValues
        - matched
        - policy
    v1TestPresetConfigRequest:
      type: object
      properties:
        deprecatedEntityType:
          type: string
        entitySubType:
          type: string
          example: metric
        deprecatedConnectorId:
          type: string
        deprecatedPresetId:
          type: string
        configOverrides:
          type: array
          items:
            $ref: '#/components/schemas/notification_centerConfigOverrides'
        connectorIdentifier:
          $ref: '#/components/schemas/notification_centerConnectorIdentifier'
        presetIdentifier:
          $ref: >-
            #/components/schemas/coralogixapisnotification_centerPresetIdentifier
        entityType:
          $ref: '#/components/schemas/coralogixapisnotification_centerEntityType'
        connectorId:
          type: string
        parentPresetId:
          type: string
    v1TestPresetConfigResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/v1TestResult'
    v1TestResult:
      type: object
      properties:
        success:
          $ref: '#/components/schemas/v1TestResultSuccess'
        failure:
          $ref: '#/components/schemas/v1TestResultFailure'
    v1TestResultFailure:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: integer
          format: int64
    v1TestResultSuccess:
      type: object
    v1TestRoutingConditionValidRequest:
      type: object
      properties:
        deprecatedEntityType:
          type: string
        template:
          type: string
          example: alertDef.priority == 'P1'
        entityType:
          $ref: '#/components/schemas/coralogixapisnotification_centerEntityType'
      description: Request to check that provided routing condition is valid
      title: Test Routing Condition Valid Request
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1TestRoutingConditionValidResponse:
      type: object
      properties:
        success:
          $ref: '#/components/schemas/v1TestRoutingConditionValidResponseSuccess'
        failure:
          $ref: '#/components/schemas/v1TestRoutingConditionValidResponseFailure'
      description: Response which specifies condition evaluation result or error
      title: Test Routing Condition Valid Response
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    v1TestRoutingConditionValidResponseFailure:
      type: object
      properties:
        message:
          type: string
          example: >-
            Invalid condition: condition should be rendered to a boolean value
            (true or false)
    v1TestRoutingConditionValidResponseSuccess:
      type: object
      properties:
        result:
          type: boolean
          example: true
    v1TestTemplateRenderRequest:
      type: object
      properties:
        deprecatedEntityType:
          type: string
        entitySubType:
          type: string
          example: logsImmediateResolved
        template:
          type: string
          example: '{{ alertDef.name }}'
        entityType:
          $ref: '#/components/schemas/coralogixapisnotification_centerEntityType'
    v1TestTemplateRenderResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/v1TestTemplateRenderResult'
    v1TestTemplateRenderResult:
      type: object
      properties:
        success:
          $ref: '#/components/schemas/v1TestTemplateRenderResultSuccess'
        failure:
          $ref: '#/components/schemas/v1TestTemplateRenderResultFailure'
    v1TestTemplateRenderResultFailure:
      type: object
      properties:
        message:
          type: string
          example: Template rendering failed
        reason:
          $ref: '#/components/schemas/TestTemplateRenderResultFailureReason'
    v1TestTemplateRenderResultSuccess:
      type: object
      properties:
        renderedValue:
          type: string
          example: Rendered template result
    v1ThresholdSymbol:
      type: string
      enum:
        - THRESHOLD_SYMBOL_UNSPECIFIED
        - THRESHOLD_SYMBOL_GREATER
        - THRESHOLD_SYMBOL_GREATER_OR_EQUAL
        - THRESHOLD_SYMBOL_LESS
        - THRESHOLD_SYMBOL_LESS_OR_EQUAL
        - THRESHOLD_SYMBOL_EQUAL
        - THRESHOLD_SYMBOL_NOT_EQUAL
      default: THRESHOLD_SYMBOL_UNSPECIFIED
    v1TimeSelection:
      type: object
      properties:
        quickSelection:
          $ref: '#/components/schemas/v1QuickTimeSelection'
        customSelection:
          $ref: '#/components/schemas/v1CustomTimeSelection'
      title: Time selection
    v1Timeframe:
      type: object
      properties:
        startTime:
          type: string
          description: >-
            Timeframe start time: The point in the time(date-time) when the rule
            will start to be active.
        endTime:
          type: string
          description: >-
            Timeframe end time: The point in the time(date-time) when the rule
            will finish to be active.
        duration:
          $ref: '#/components/schemas/alert_scheduler_rule_protobufv1Duration'
        timezone:
          type: string
          description: >-
            Timeframe timezone: The rule will be active according to a specific
            timezone.
    v1TogglePolicyRequest:
      type: object
      properties:
        id:
          type: string
          example: id
        enabled:
          type: boolean
          example: true
      description: This data structue is used to toggle a policy by its ID.
      title: Toggle Policy Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - id
        - enabled
    v1TogglePolicyResponse:
      type: object
      properties:
        id:
          type: string
          example: id
        enabled:
          type: boolean
          example: true
      description: This data structue is obtained when toggling a policy by its ID.
      title: Toggle Policy Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - id
        - enabled
    v1TopkAggregation:
      type: object
      properties:
        aggregation:
          $ref: '#/components/schemas/v1TopkAggregationType'
        topk:
          type: integer
          format: int64
    v1TopkAggregationType:
      type: string
      enum:
        - TOPK_AGGREGATION_TYPE_UNSPECIFIED
        - TOPK_AGGREGATION_TYPE_LAST
        - TOPK_AGGREGATION_TYPE_MAX
        - TOPK_AGGREGATION_TYPE_MIN
        - TOPK_AGGREGATION_TYPE_AVG
      default: TOPK_AGGREGATION_TYPE_UNSPECIFIED
    v1TriggerRemoteActionResponse:
      type: object
    v1UUID:
      type: object
      properties:
        value:
          type: string
    v1UnassignIncidentsRequest:
      type: object
      properties:
        incidentIds:
          type: array
          example:
            - incident_id_1
            - incident_id_2
          items:
            type: string
          description: List of incident IDs to unassign
      description: Request to remove assignments from one or more incidents
      title: Unassign incidents request
      required:
        - incidentIds
    v1UnassignIncidentsResponse:
      type: object
      properties:
        incidents:
          type: array
          items:
            $ref: '#/components/schemas/v1Incident'
          description: List of incidents after unassignment
      description: Response containing the updated incidents after unassignment
      title: Unassign incidents response
      required:
        - incidents
    v1UndeployExtensionRequest:
      type: object
      properties:
        id:
          type: string
        keptExtensionItems:
          type: array
          items:
            type: string
            default: '[]'
      title: Revert deployment of extension request
      required:
        - id
    v1UndeployExtensionResponse:
      type: object
      properties:
        failedItems:
          type: array
          items:
            $ref: '#/components/schemas/UndeployExtensionResponseFailedItem'
        extensionDeployment:
          $ref: '#/components/schemas/v1ExtensionDeployment'
      title: Revert deployment of extension response
    v1UpdateAlertSchedulerRuleRequest:
      type: object
      properties:
        alertSchedulerRule:
          $ref: '#/components/schemas/v1AlertSchedulerRule'
    v1UpdateAlertSchedulerRuleResponse:
      type: object
      properties:
        alertSchedulerRule:
          $ref: '#/components/schemas/v1AlertSchedulerRule'
    v1UpdateBulkAlertSchedulerRuleResponse:
      type: object
      properties:
        updateSuppressionResponses:
          type: array
          items:
            $ref: '#/components/schemas/v1UpdateAlertSchedulerRuleResponse'
    v1UpdateContextualDataIntegrationRequest:
      type: object
      properties:
        integrationId:
          type: string
        metadata:
          $ref: '#/components/schemas/v1IntegrationMetadata'
      title: Update contextual data integration request
      required:
        - integrationId
        - metadata
    v1UpdateContextualDataIntegrationResponse:
      type: object
      title: Update contextual data integration response
    v1UpdateCustomEnrichmentRequest:
      type: object
      properties:
        customEnrichmentId:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: custom_enrichment_name
        description:
          type: string
          example: custom_enrichment_description
        file:
          $ref: '#/components/schemas/v1File'
      description: This request data structure is used to update a custom enrichment
      title: Update Custom Enrichment Request
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - customEnrichmentId
        - name
        - description
        - file
    v1UpdateCustomEnrichmentResponse:
      type: object
      properties:
        message:
          type: string
          example: Custom enrichment updated successfully
        customEnrichment:
          $ref: '#/components/schemas/v1CustomEnrichment'
      description: >-
        This response data structure is obtained when a custom enrichment is
        updated
      title: Update Custom Enrichment Response
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - customEnrichment
    v1UpdateExtensionRequest:
      type: object
      properties:
        id:
          type: string
        version:
          type: string
        itemIds:
          type: array
          items:
            type: string
            default: '[]'
        applications:
          type: array
          items:
            type: string
            default: '[]'
        subsystems:
          type: array
          items:
            type: string
            default: '[]'
        extensionDeployment:
          $ref: '#/components/schemas/v1ExtensionDeployment'
      title: Update extension request
      required:
        - id
        - version
        - itemIds
    v1UpdateExtensionResponse:
      type: object
      properties:
        extensionDeployment:
          $ref: '#/components/schemas/v1ExtensionDeployment'
      title: Update extension response
      required:
        - extensionDeployment
    v1UpdateIntegrationRequest:
      type: object
      properties:
        id:
          type: string
          title: This is the integration ID generated at creation time
        metadata:
          $ref: '#/components/schemas/v1IntegrationMetadata'
      description: This data structure represents a list of outgoing webhook types.
      title: Update integration request
      required:
        - id
        - metadata
    v1UpdateIntegrationResponse:
      type: object
    v1UpdateOutgoingWebhookRequest:
      type: object
      properties:
        id:
          type: string
          example: example_id
        data:
          $ref: '#/components/schemas/v1OutgoingWebhookInputData'
      title: Update outgoing webhook request
      required:
        - id
        - data
    v1UpdateOutgoingWebhookResponse:
      type: object
      title: Update outgoing webhook response
    v1UpdatePolicyRequest:
      type: object
      properties:
        id:
          type: string
          example: policy_id
        name:
          type: string
          example: My Policy
        description:
          type: string
          example: My Policy Description
        priority:
          $ref: '#/components/schemas/coralogixquotav1Priority'
        applicationRule:
          $ref: '#/components/schemas/coralogixquotav1Rule'
        subsystemRule:
          $ref: '#/components/schemas/coralogixquotav1Rule'
        archiveRetention:
          $ref: '#/components/schemas/v1ArchiveRetention'
        logRules:
          $ref: '#/components/schemas/v1LogRules'
        spanRules:
          $ref: '#/components/schemas/v1SpanRules'
        enabled:
          type: boolean
          example: true
      description: This data structue is used to update an existing policy.
      title: Update Policy Request
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - id
    v1UpdatePolicyResponse:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/v1Policy'
      description: This data structue is obtained when updating a policy.
      title: Update Policy Response
      externalDocs:
        description: Find out more about quota management.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/quota-management/
      required:
        - policy
    v1UpdateRetentionsRequest:
      type: object
      properties:
        retentionUpdateElements:
          type: array
          items:
            $ref: '#/components/schemas/v1RetentionUpdateElement'
      description: This data structure is used to update retentions
      title: Update Retentions Request
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - retentionUpdateElements
    v1UpdateRetentionsResponse:
      type: object
      properties:
        retentions:
          type: array
          items:
            $ref: '#/components/schemas/coralogixarchivev1Retention'
      description: This data structure is obtained after updating retentions
      title: Update Retentions Response
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - retentions
    v1UpdateRuleGroupResponse:
      type: object
      properties:
        ruleGroup:
          $ref: '#/components/schemas/v1RuleGroup'
    v1UpdateScopeRequest:
      type: object
      properties:
        id:
          type: string
          example: scope_id
        displayName:
          type: string
          example: scope_name
        description:
          type: string
          example: scope_description
        filters:
          type: array
          items:
            $ref: '#/components/schemas/coralogixapisscopesv1Filter'
        defaultExpression:
          type: string
          example: expression
      description: This data structure represents a request to update a scope
      title: Update Scope Request
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
      required:
        - id
        - displayName
        - filters
        - defaultExpression
    v1UpdateScopeResponse:
      type: object
      properties:
        scope:
          $ref: '#/components/schemas/coralogixapisscopesv1Scope'
      description: This data structure represents a response to update a scope
      title: Update Scope Response
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
      required:
        - scope
    v1UpdateTeamGroupRequest:
      type: object
      properties:
        groupId:
          $ref: '#/components/schemas/v1TeamGroupId'
        name:
          type: string
          title: / Updated team group name
        description:
          type: string
          title: / Updated team group description
        externalId:
          type: string
          title: / Updated team group external_id
        roleUpdates:
          $ref: '#/components/schemas/UpdateTeamGroupRequestRoleUpdates'
        userUpdates:
          $ref: '#/components/schemas/UpdateTeamGroupRequestUserUpdates'
        scopeFilters:
          $ref: '#/components/schemas/v1ScopeFilters'
        nextGenScopeId:
          type: string
          title: / If set, updates new team group next gen scope
      description: >-
        Request to modify an existing team group's details, including its name,
        description, roles, users, and scope settings.
      title: UpdateTeamGroupRequest
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1UpdateTeamGroupResponse:
      type: object
      description: >-
        Response confirming the successful update of a team group's
        configuration.
      title: UpdateTeamGroupResponse
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    v1UpsertCompanyProvidersInternalResponse:
      type: object
      properties:
        providers:
          type: array
          items:
            type: string
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/v1DataSource'
    v1UpsertCompanyProvidersResponse:
      type: object
      properties:
        providers:
          type: array
          items:
            type: string
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/v1DataSource'
    v1UpsertCustomLabelMappingsResponse:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/v1LabelMapping'
    v1UpsertGlobalMeasurementsInternalResponse:
      type: object
      properties:
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/v1Measurement'
    v1UpsertIncidentStatePayload:
      type: object
      properties:
        cxEventKey:
          type: string
    v1UpsertIncidentStateType:
      type: string
      enum:
        - UPSERT_INCIDENT_STATE_TYPE_UNSPECIFIED
        - UPSERT_INCIDENT_STATE_TYPE_TRIGGERED
        - UPSERT_INCIDENT_STATE_TYPE_RESOLVED
      default: UPSERT_INCIDENT_STATE_TYPE_UNSPECIFIED
    v1UpsertLabelMappingsInternalResponse:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/v1LabelMapping'
    v1UpsertLabelMappingsResponse:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/v1LabelMapping'
    v1UserDetails:
      type: object
      properties:
        userId:
          type: string
          example: user_id
      title: User details
      required:
        - userId
    v1UserStatus:
      type: string
      enum:
        - USER_STATUS_UNSPECIFIED
        - USER_STATUS_ACTIVE
        - USER_STATUS_INACTIVE
      default: USER_STATUS_UNSPECIFIED
      description: |-
        - USER_STATUS_ACTIVE: / User is active
         - USER_STATUS_INACTIVE: / User is inactive
      title: / User status
    v1ViewFolder:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
          description: Unique identifier for folders
          maxLength: 36
          minLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
        name:
          type: string
          example: My Folder
          description: Folder name
          minLength: 1
      description: View folder.
      title: ViewFolder
      required:
        - name
    v1WebhookType:
      type: string
      enum:
        - UNKNOWN
        - GENERIC
        - SLACK
        - PAGERDUTY
        - SEND_LOG
        - EMAIL_GROUP
        - MICROSOFT_TEAMS
        - JIRA
        - OPSGENIE
        - DEMISTO
        - AWS_EVENT_BRIDGE
        - IBM_EVENT_NOTIFICATIONS
        - MS_TEAMS_WORKFLOW
      default: UNKNOWN
    v1Weekly:
      type: object
      properties:
        daysOfWeek:
          type: array
          items:
            type: integer
            format: int32
          description: >-
            Dynamic Weekly days_of_week: The rule will be activated at weekly
            intervals on specific days in a week.
    v1WindowBasedMetricSli:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/v1Metric'
        window:
          $ref: '#/components/schemas/v1WindowSloWindow'
        comparisonOperator:
          $ref: '#/components/schemas/v1ComparisonOperator'
        threshold:
          type: number
          format: float
    v1WindowBasedPermutationData:
      type: object
      properties:
        goodWindows:
          type: integer
          format: int64
        badWindows:
          type: integer
          format: int64
    v1WindowSloWindow:
      type: string
      enum:
        - WINDOW_SLO_WINDOW_UNSPECIFIED
        - WINDOW_SLO_WINDOW_1_MINUTE
        - WINDOW_SLO_WINDOW_5_MINUTES
      default: WINDOW_SLO_WINDOW_UNSPECIFIED
    v1astAnnotation:
      type: object
      properties:
        id:
          type: string
          title: Annotation unique identifier
        name:
          type: string
        enabled:
          type: boolean
        source:
          $ref: '#/components/schemas/astAnnotationSource'
    v1astFilter:
      type: object
      properties:
        source:
          $ref: '#/components/schemas/astFilterSource'
        enabled:
          type: boolean
          description: Indicates if the filter is currently enabled or not.
        collapsed:
          type: boolean
          description: >-
            Indicates if the filter's UI representation should be collapsed or
            expanded.
      description: >-
        This data structure represents the configuration for filtering data on
        the dashboard.
      title: Filter
      externalDocs:
        description: >-
          Discover how to filter and query data in Custom Dashboards by
          exploring our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    v1commonDataprimeQuery:
      type: object
      properties:
        text:
          type: string
    v1commonDatasetScope:
      type: string
      enum:
        - DATASET_SCOPE_UNSPECIFIED
        - DATASET_SCOPE_USER_DATA
        - DATASET_SCOPE_LABEL
        - DATASET_SCOPE_METADATA
      default: DATASET_SCOPE_UNSPECIFIED
    v2ActionExecutionRequest:
      type: object
      properties:
        create:
          $ref: '#/components/schemas/v2CreateActionRequest'
        replace:
          $ref: '#/components/schemas/v2ReplaceActionRequest'
        delete:
          $ref: '#/components/schemas/v2DeleteActionRequest'
    v2ActionExecutionResponse:
      type: object
      properties:
        create:
          $ref: '#/components/schemas/v2CreateActionResponse'
        replace:
          $ref: '#/components/schemas/v2ReplaceActionResponse'
        delete:
          $ref: '#/components/schemas/v2DeleteActionResponse'
    v2AggregateBy:
      type: string
      enum:
        - AGGREGATE_BY_UNSPECIFIED
        - AGGREGATE_BY_APPLICATION
        - AGGREGATE_BY_SUBSYSTEM
        - AGGREGATE_BY_PILLAR
        - AGGREGATE_BY_PRIORITY
      default: AGGREGATE_BY_UNSPECIFIED
    v2ArchiveSpec:
      type: object
      properties:
        archivingFormatId:
          type: string
          example: json_id
        isActive:
          type: boolean
          example: true
        enableTags:
          type: boolean
          example: true
      description: This data structure contains metadata about the archive.
      title: Archive Spec
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - bucket
    v2AtomicBatchExecuteActionsRequest:
      type: object
      properties:
        requests:
          type: array
          items:
            $ref: '#/components/schemas/v2ActionExecutionRequest'
    v2AtomicBatchExecuteActionsResponse:
      type: object
      properties:
        matchingResponses:
          type: array
          items:
            $ref: '#/components/schemas/v2ActionExecutionResponse'
    v2AtomicBatchExecuteE2MRequest:
      type: object
      properties:
        requests:
          type: array
          items:
            $ref: '#/components/schemas/v2E2MExecutionRequest'
      title: an atomic list of e2m action that are executed in the same request
    v2AtomicBatchExecuteE2MResponse:
      type: object
      properties:
        matchingResponses:
          type: array
          items:
            $ref: '#/components/schemas/v2E2MExecutionResponse'
      title: represents a response to atomic list of e2m actions
    v2CreateActionRequest:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        isPrivate:
          type: boolean
        sourceType:
          $ref: '#/components/schemas/actionsv2SourceType'
        applicationNames:
          type: array
          items:
            type: string
        subsystemNames:
          type: array
          items:
            type: string
    v2CreateActionResponse:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/actionsv2Action'
    v2CreateE2MRequest:
      type: object
      properties:
        e2m:
          $ref: '#/components/schemas/v2E2MCreateParams'
      description: This is used to create a new event to metric definition
      title: Create E2M Request
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - e2m
    v2CreateE2MResponse:
      type: object
      properties:
        e2m:
          $ref: '#/components/schemas/v2E2M'
      title: represents e2m create response
    v2CreateRoleResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
    v2CreateTeamInOrgResponse:
      type: object
      properties:
        teamId:
          $ref: '#/components/schemas/organisationsv2TeamId'
    v2DataUsageEntry:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        sizeGb:
          type: number
          format: float
        units:
          type: number
          format: float
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/v2Dimension'
      description: This data structure represents a data usage entry.
      title: Data Usage Entry
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2DeleteActionRequest:
      type: object
      properties:
        id:
          type: string
    v2DeleteActionResponse:
      type: object
    v2DeleteE2MRequest:
      type: object
      properties:
        id:
          type: string
          example: d6a3658e-78d2-47d0-9b81-b2c551f01b09
          title: id of e2m to be deleted
      description: >-
        This data structure is used to delete an existing event to metric
        definition
      title: Delete E2M Request
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - id
    v2DeleteE2MResponse:
      type: object
      properties:
        id:
          type: string
          title: id of deleted e2m
      description: >-
        This data structure is obtained when deleting an existing event to
        metric definition
      title: Delete E2M Request
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - id
    v2DeleteRoleResponse:
      type: object
    v2DeleteTeamResponse:
      type: object
    v2DetailedDailyEvaluationTokens:
      type: object
      properties:
        statsDate:
          type: string
          format: date-time
        totalTokens:
          $ref: '#/components/schemas/v2Token'
        evaluations:
          type: array
          items:
            $ref: '#/components/schemas/v2Evaluation'
      title: / Daily data usage in evaluation tokens
    v2DetailedDailyProcessedGbs:
      type: object
      properties:
        statsDate:
          type: string
          format: date-time
        totalGbs:
          $ref: '#/components/schemas/datausagev2GB'
        blockedGbs:
          $ref: '#/components/schemas/datausagev2GB'
        lowLogsGbs:
          $ref: '#/components/schemas/datausagev2GB'
        mediumLogsGbs:
          $ref: '#/components/schemas/datausagev2GB'
        highLogsGbs:
          $ref: '#/components/schemas/datausagev2GB'
        highMetricsGbs:
          $ref: '#/components/schemas/datausagev2GB'
        lowTracingGbs:
          $ref: '#/components/schemas/datausagev2GB'
        mediumTracingGbs:
          $ref: '#/components/schemas/datausagev2GB'
        highTracingGbs:
          $ref: '#/components/schemas/datausagev2GB'
        lowSessionRecordingGbs:
          $ref: '#/components/schemas/datausagev2GB'
        cpuProfilesGbs:
          $ref: '#/components/schemas/datausagev2GB'
        blockedMetricsGbs:
          $ref: '#/components/schemas/datausagev2GB'
      title: >-
        / Daily data usage in GBs. This entity represents only data processed by
        CX
    v2DetailedDailyUnits:
      type: object
      properties:
        statsDate:
          type: string
          format: date-time
        totalUnits:
          $ref: '#/components/schemas/datausagev2Unit'
        blockedUnits:
          $ref: '#/components/schemas/datausagev2Unit'
        lowLogsUnits:
          $ref: '#/components/schemas/datausagev2Unit'
        mediumLogsUnits:
          $ref: '#/components/schemas/datausagev2Unit'
        highLogsUnits:
          $ref: '#/components/schemas/datausagev2Unit'
        highMetricsUnits:
          $ref: '#/components/schemas/datausagev2Unit'
        lowTracingUnits:
          $ref: '#/components/schemas/datausagev2Unit'
        mediumTracingUnits:
          $ref: '#/components/schemas/datausagev2Unit'
        highTracingUnits:
          $ref: '#/components/schemas/datausagev2Unit'
        lowSessionRecordingUnits:
          $ref: '#/components/schemas/datausagev2Unit'
        evaluationUnits:
          $ref: '#/components/schemas/datausagev2Unit'
        cpuProfilesUnits:
          $ref: '#/components/schemas/datausagev2Unit'
        blockedMetricsUnits:
          $ref: '#/components/schemas/datausagev2Unit'
      title: / Daily data usage in units
    v2Dimension:
      type: object
      properties:
        pillar:
          $ref: '#/components/schemas/v2Pillar'
        genericDimension:
          $ref: '#/components/schemas/v2GenericDimension'
        tier:
          $ref: '#/components/schemas/datausagev2TcoTier'
        severity:
          $ref: '#/components/schemas/coralogixdatausagev2Severity'
        priority:
          $ref: '#/components/schemas/datausagev2Priority'
    v2E2M:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d6a3658e-78d2-47d0-9b81-b2c551f01b09
          title: E2M unique ID, required on update requests
          maxLength: 36
          minLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
        name:
          type: string
          example: Service_catalog_latency
          title: Name of the E2M
        description:
          type: string
          example: avg and max the latency of catalog service
          title: Description of the E2M
        createTime:
          type: string
          example: 2022-06-30T12:30:00Z'
          title: E2M create time
        updateTime:
          type: string
          example: 2022-06-30T12:30:00Z'
          title: E2M update time
        permutations:
          $ref: '#/components/schemas/v2E2MPermutations'
        metricLabels:
          type: array
          items:
            $ref: '#/components/schemas/v2MetricLabel'
          title: E2M metric labels
        metricFields:
          type: array
          items:
            $ref: '#/components/schemas/events2metricsv2MetricField'
          title: E2M metric fields
          maxItems: 10
        type:
          $ref: '#/components/schemas/v2E2MType'
        spansQuery:
          $ref: '#/components/schemas/spans2metricsv2SpansQuery'
        logsQuery:
          $ref: '#/components/schemas/logs2metricsv2LogsQuery'
        isInternal:
          type: boolean
          title: A flag that represents if the e2m is for internal usage
      description: This data structure represents an Event to Metrics (E2M) object.
      title: E2M
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - name
        - type
    v2E2MAggHistogram:
      type: object
      properties:
        buckets:
          type: array
          example: 2
          items:
            type: number
            format: float
          title: Buckets of the E2M
      description: This data structure represents the e2m aggregate histogram
      title: E2M Aggregate Histogram
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    v2E2MAggSamples:
      type: object
      properties:
        sampleType:
          $ref: '#/components/schemas/E2MAggSamplesSampleType'
      description: This data structure represents the e2m aggregate samples
      title: E2M Aggregate Samples
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    v2E2MCreateParams:
      type: object
      properties:
        name:
          type: string
          example: Service catalog latency
          title: Name of E2M to create
        description:
          type: string
          example: avg and max the latency of catalog service
          title: Description of E2M to create
        permutationsLimit:
          type: integer
          format: int32
          example: 30000
          title: The permutation limit of the E2M
        metricLabels:
          type: array
          items:
            $ref: '#/components/schemas/v2MetricLabel'
          title: E2M metric labels
        metricFields:
          type: array
          items:
            $ref: '#/components/schemas/events2metricsv2MetricField'
          title: E2M metric fields
        type:
          $ref: '#/components/schemas/v2E2MType'
        spansQuery:
          $ref: '#/components/schemas/spans2metricsv2SpansQuery'
        logsQuery:
          $ref: '#/components/schemas/logs2metricsv2LogsQuery'
      description: This data structure is used to create a new event to metric definition
      title: E2M Create Params
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - name
    v2E2MExecutionRequest:
      type: object
      properties:
        create:
          $ref: '#/components/schemas/v2CreateE2MRequest'
        replace:
          $ref: '#/components/schemas/v2ReplaceE2MRequest'
        delete:
          $ref: '#/components/schemas/v2DeleteE2MRequest'
      title: represents one of e2m actions create/replace/delete
    v2E2MExecutionResponse:
      type: object
      properties:
        created:
          $ref: '#/components/schemas/v2CreateE2MResponse'
        replaced:
          $ref: '#/components/schemas/v2ReplaceE2MResponse'
        deleted:
          $ref: '#/components/schemas/v2DeleteE2MResponse'
      title: represents a response of e2m execution
    v2E2MPermutations:
      type: object
      properties:
        limit:
          type: integer
          format: int32
          example: 30000
          title: E2M permutation limit
        hasExceededLimit:
          type: boolean
          title: Flag to indicate if limit was exceeded
      description: >-
        This data structure represents the limit of events2metrics permutations
        and if the limit was exceeded
      title: E2M Permutations
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - limit
        - hasExceededLimit
    v2E2MType:
      type: string
      enum:
        - E2M_TYPE_UNSPECIFIED
        - E2M_TYPE_LOGS2METRICS
        - E2M_TYPE_SPANS2METRICS
      default: E2M_TYPE_UNSPECIFIED
      title: Enum defining e2m type
    v2Evaluation:
      type: object
      properties:
        evaluatorName:
          type: string
        evaluationTokens:
          $ref: '#/components/schemas/v2Token'
    v2GenericDimension:
      type: object
      properties:
        key:
          type: string
          example: key
        value:
          type: string
          example: value
      description: This data structure represents a generic dimension.
      title: Generic Dimension
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2GetActionResponse:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/actionsv2Action'
    v2GetConfigurationResponse:
      type: object
      properties:
        teamId:
          type: integer
          format: int64
        spParameters:
          $ref: '#/components/schemas/v2SPParameters'
        idpParameters:
          $ref: '#/components/schemas/v2IDPParameters'
        idpDetails:
          $ref: '#/components/schemas/GetConfigurationResponseIDPDetails'
      description: >-
        This data structure is obtained as a response to a request to retrieve
        the configuration of a SAML service provider and identity provider
      title: Get Configuration Response
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - teamId
        - spParameters
        - idpParameters
    v2GetCustomRoleResponse:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/rbacv2CustomRole'
    v2GetDailyUsageEvaluationTokensRequest:
      type: object
      properties:
        range:
          $ref: '#/components/schemas/datausagev2Range'
        dateRange:
          $ref: '#/components/schemas/datausagev2DateRange'
    v2GetDailyUsageEvaluationTokensResponse:
      type: object
      properties:
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/v2DetailedDailyEvaluationTokens'
    v2GetDailyUsageProcessedGbsRequest:
      type: object
      properties:
        range:
          $ref: '#/components/schemas/datausagev2Range'
        dateRange:
          $ref: '#/components/schemas/datausagev2DateRange'
    v2GetDailyUsageProcessedGbsResponse:
      type: object
      properties:
        gbs:
          type: array
          items:
            $ref: '#/components/schemas/v2DetailedDailyProcessedGbs'
    v2GetDailyUsageUnitsRequest:
      type: object
      properties:
        range:
          $ref: '#/components/schemas/datausagev2Range'
        dateRange:
          $ref: '#/components/schemas/datausagev2DateRange'
    v2GetDailyUsageUnitsResponse:
      type: object
      properties:
        units:
          type: array
          items:
            $ref: '#/components/schemas/v2DetailedDailyUnits'
    v2GetDataUsageMetricsExportStatusResponse:
      type: object
      properties:
        enabled:
          type: boolean
          example: true
      description: This data structure is used to return data usage metrics export status.
      title: Get Data Usage Metrics Export Status Response
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2GetDataUsageResponse:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/v2DataUsageEntry'
      description: This data structure is used to return data usage.
      title: Get Data Usage Response
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2GetE2MResponse:
      type: object
      properties:
        e2m:
          $ref: '#/components/schemas/v2E2M'
      description: >-
        This data structure is obtained when retrieving an existing event to
        metric definition
      title: Get E2M Response
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - e2m
    v2GetLimitsResponse:
      type: object
      properties:
        companyId:
          type: string
          title: company id
        labelsLimit:
          type: integer
          format: int32
          title: labels limit
        permutationsLimit:
          $ref: '#/components/schemas/GetLimitsResponseLimitUsage'
        metricsLimit:
          $ref: '#/components/schemas/GetLimitsResponseLimitUsage'
      title: get e2m limits response
    v2GetLogsCountResponse:
      type: object
      properties:
        logsCount:
          type: array
          items:
            $ref: '#/components/schemas/v2LogsCount'
      description: This data structure is used to return logs count.
      title: Get Logs Count Response
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2GetSPParametersResponse:
      type: object
      properties:
        params:
          $ref: '#/components/schemas/v2SPParameters'
      description: >-
        This data structure is obtained as a response to a request to retrieve
        the parameters of a SAML service provider
      title: Get SP Parameters Response
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - params
    v2GetSpansCountResponse:
      type: object
      properties:
        spansCount:
          type: array
          items:
            $ref: '#/components/schemas/v2SpansCount'
      description: This data structure is used to return spans count.
      title: Get Spans Count Response
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2GetTargetResponse:
      type: object
      properties:
        target:
          $ref: '#/components/schemas/v2Target'
      description: This data structure is used to retrieve a storage target for logs.
      title: Get Target Response
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - target
    v2GetTeamDetailedDataUsageResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00.000Z'
        sizeGb:
          type: number
          format: float
          example: 2.5
        units:
          type: number
          format: float
          example: 5
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/v2Dimension'
      description: This data structure is used to return detailed data usage for a team.
      title: Get Team Detailed Data Usage Response
    v2GetTeamQuotaResponse:
      type: object
      properties:
        teamId:
          $ref: '#/components/schemas/organisationsv2TeamId'
        quota:
          type: number
          format: float
        retention:
          type: integer
          format: int32
    v2GetTeamResponse:
      type: object
      properties:
        teamId:
          $ref: '#/components/schemas/organisationsv2TeamId'
        teamName:
          type: string
        dailyQuota:
          type: number
          format: double
        retention:
          type: integer
          format: int32
    v2IBMCosTargetSpec:
      type: object
      properties:
        bucketCrn:
          type: string
          example: bucket_crn
        endpoint:
          type: string
          example: http://some.endpoint.com:8081
        serviceCrn:
          type: string
          example: service_crn
        bucketType:
          $ref: '#/components/schemas/v2IbmBucketType'
      description: This data structure represents an IBM COS target.
      title: IBM COS Target Spec
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - bucketCrn
        - endpoint
    v2IDPParameters:
      type: object
      properties:
        active:
          type: boolean
          example: true
        metadataUrl:
          type: string
          example: https://<...>.okta.com/app/<...>/sso/saml/metadata
        metadataContent:
          type: string
          example: <?xml version= ...
        teamEntityId:
          type: integer
          format: int64
          example: 1234567
        groupNames:
          type: array
          example:
            - group1
          items:
            type: string
      description: >-
        This data structure represents a set of SAML identity provider
        parameters
      title: IDP Parameters
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - active
        - metadata
        - teamEntityId
        - groupNames
    v2IbmBucketType:
      type: string
      enum:
        - IBM_BUCKET_TYPE_UNSPECIFIED
        - IBM_BUCKET_TYPE_EXTERNAL
        - IBM_BUCKET_TYPE_INTERNAL
      default: IBM_BUCKET_TYPE_UNSPECIFIED
    v2LabelsPermutationsCardinalityDay:
      type: object
      properties:
        day:
          type: string
        permutations:
          type: integer
          format: int32
      title: represents labels permutation cardinality
    v2ListActionsResponse:
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/actionsv2Action'
    v2ListCustomRolesResponse:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/rbacv2CustomRole'
    v2ListE2MResponse:
      type: object
      properties:
        e2m:
          type: array
          items:
            $ref: '#/components/schemas/v2E2M'
          title: List of event to metrics definitions
      description: >-
        This is the response obtained when listing all event to metric
        definitions
      title: List E2M Response
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - e2m
    v2ListLabelsCardinalityResponse:
      type: object
      properties:
        permutations:
          type: array
          items:
            $ref: '#/components/schemas/v2LabelsPermutationsCardinalityDay'
      title: response  represented by list of labels permutation cardinality
    v2ListSystemRolesResponse:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/rbacv2SystemRole'
    v2ListTeamsResponse:
      type: object
      properties:
        defaultTeam:
          $ref: '#/components/schemas/v2ListTeamsResponseTeamInfo'
        teams:
          type: array
          items:
            $ref: '#/components/schemas/v2ListTeamsResponseTeamInfo'
    v2ListTeamsResponseTeamInfo:
      type: object
      properties:
        teamId:
          $ref: '#/components/schemas/organisationsv2TeamId'
        teamName:
          type: string
        dailyQuota:
          type: number
          format: double
        retention:
          type: integer
          format: int32
    v2LogsCount:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        logsCount:
          type: string
          format: uint64
          example: 100
        severity:
          $ref: '#/components/schemas/coralogixdatausagev2Severity'
        priority:
          $ref: '#/components/schemas/datausagev2Priority'
      description: This data structure represents a logs count.
      title: Logs Count
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2MetricLabel:
      type: object
      properties:
        targetLabel:
          type: string
          example: alias_label_name
          title: Metric label target alias name
          pattern: ^[\w/-]+$
        sourceField:
          type: string
          example: log_obj.string_value
          title: Metric label source field
      description: This data structure represents a metric label
      title: Metric Label
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - targetLabel
        - sourceField
    v2MoveQuotaResponse:
      type: object
      properties:
        sourceTeamQuota:
          type: number
          format: double
        destinationTeamQuota:
          type: number
          format: double
    v2OrderActionsRequest:
      type: object
      properties:
        privateActionsOrder:
          type: object
          additionalProperties:
            type: integer
            format: int64
        sharedActionsOrder:
          type: object
          additionalProperties:
            type: integer
            format: int64
    v2OrderActionsResponse:
      type: object
    v2Pillar:
      type: string
      enum:
        - PILLAR_UNSPECIFIED
        - PILLAR_METRICS
        - PILLAR_LOGS
        - PILLAR_SPANS
        - PILLAR_BINARY
        - PILLAR_PROFILES
      default: PILLAR_UNSPECIFIED
    v2ReplaceActionRequest:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/actionsv2Action'
    v2ReplaceActionResponse:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/actionsv2Action'
    v2ReplaceE2MRequest:
      type: object
      properties:
        e2m:
          $ref: '#/components/schemas/v2E2M'
      description: >-
        This data structure is used to replace an existing event to metric
        definition
      title: Replace E2M Request
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - e2m
    v2ReplaceE2MResponse:
      type: object
      properties:
        e2m:
          $ref: '#/components/schemas/v2E2M'
      description: >-
        This data structure is obtained when replacing an existing event to
        metric definition
      title: Replace E2M Response
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
      required:
        - e2m
    v2S3TargetSpec:
      type: object
      properties:
        bucket:
          type: string
          example: bucket
        region:
          type: string
          example: us-west-2
      description: This data structure represents an S3 target.
      title: S3 Target Spec
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - bucket
    v2SPParameters:
      type: object
      properties:
        metadataUrl:
          type: string
          example: https://<...>.okta.com/app/<...>/sso/saml/metadata
        signingCertPem:
          type: string
          example: certificate
        nameIdFormat:
          type: string
          example: name_id
        assertionConsumerServiceUrl:
          type: string
          example: assertion
        binding:
          type: string
          example: binding
      description: This data structure represents the parameters of a SAML service provider
      title: Service Provider Parameters
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - metadataUrl
        - signingCertPem
        - nameIdFormat
        - assertionConsumerServiceUrl
        - binding
    v2ScopesFilter:
      type: object
      properties:
        application:
          type: array
          example: application1
          items:
            type: string
        subsystem:
          type: array
          example: subsystem1
          items:
            type: string
      description: This data structure represents a filter for scopes.
      title: Scopes Filter
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2SetDailyQuotaResponse:
      type: object
    v2SetIDPParametersRequest:
      type: object
      properties:
        teamId:
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/v2IDPParameters'
      description: >-
        This data structure is used to set the parameters of a SAML identity
        provider
      title: Set IDP Parameters Request
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - teamId
        - params
    v2SetIDPParametersResponse:
      type: object
    v2SetTargetRequest:
      type: object
      properties:
        isActive:
          type: boolean
          example: true
        s3:
          $ref: '#/components/schemas/v2S3TargetSpec'
        ibmCos:
          $ref: '#/components/schemas/v2IBMCosTargetSpec'
      description: This data structure is used to set a storage target for logs.
      title: Set Target Response
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - isActive
        - target_spec
    v2SetTargetResponse:
      type: object
      properties:
        target:
          $ref: '#/components/schemas/v2Target'
      description: This data structure is obtained after setting a storage target for logs.
      title: Set Target Response
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - target
    v2SpansCount:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00.000Z'
        successSpanCount:
          type: string
          format: int64
          example: 100
        errorSpanCount:
          type: string
          format: int64
          example: 10
        lowSuccessSpanCount:
          type: string
          format: int64
          example: 50
        lowErrorSpanCount:
          type: string
          format: int64
          example: 5
        mediumSuccessSpanCount:
          type: string
          format: int64
          example: 200
        mediumErrorSpanCount:
          type: string
          format: int64
          example: 20
      description: This data structure represents a spans count.
      title: Spans Count
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2Target:
      type: object
      properties:
        s3:
          $ref: '#/components/schemas/v2S3TargetSpec'
        ibmCos:
          $ref: '#/components/schemas/v2IBMCosTargetSpec'
        archiveSpec:
          $ref: '#/components/schemas/v2ArchiveSpec'
      description: This data structure represents a target to archive logs.
      title: Target
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - target_specarchive_spec
    v2Token:
      type: object
      properties:
        value:
          type: number
          format: float
    v2UpdateDataUsageMetricsExportStatusRequest:
      type: object
      properties:
        enabled:
          type: boolean
          example: true
      description: This data structure is used to update data usage metrics export status.
      title: Update Data Usage Metrics Export Status Request
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2UpdateDataUsageMetricsExportStatusResponse:
      type: object
      properties:
        enabled:
          type: boolean
          example: true
      description: This data structure is used to return data usage metrics export status.
      title: Update Data Usage Metrics Export Status Response
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2UpdateRoleResponse:
      type: object
    v2UpdateTeamResponse:
      type: object
    v2ValidateTargetRequest:
      type: object
      properties:
        isActive:
          type: boolean
        s3:
          $ref: '#/components/schemas/v2S3TargetSpec'
        ibmCos:
          $ref: '#/components/schemas/v2IBMCosTargetSpec'
      description: This data structure is used to validate a storage target for logs.
      title: Set Target Response
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - isActive
        - target_spec
    v2ValidateTargetResponse:
      type: object
      properties:
        isValid:
          type: boolean
          example: true
      description: >-
        This data structure is obtained after validating a storage target for
        logs.
      title: Validate Target Response
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
      required:
        - isValid
    v3ActivityAnalysis:
      type: object
      properties:
        rules:
          type: array
          items:
            type: string
        status:
          $ref: '#/components/schemas/v3ActivityAnalysisStatus'
      description: Configuration for alert activity analysis, containing rules and status.
      title: Activity analysis data structure
      required:
        - rules
        - status
    v3ActivityAnalysisStats:
      type: object
      properties:
        isMutedCount:
          type: integer
          format: int64
        rules:
          type: array
          items:
            type: string
      title: Event activity analysis statistics
    v3ActivityAnalysisStatus:
      type: string
      enum:
        - ACTIVITY_ANALYSIS_STATUS_ACTIVATE_OR_UNSPECIFIED
        - ACTIVITY_ANALYSIS_STATUS_MUTE
      default: ACTIVITY_ANALYSIS_STATUS_ACTIVATE_OR_UNSPECIFIED
    v3ActivitySchedule:
      type: object
      properties:
        dayOfWeek:
          type: array
          example:
            - DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED
            - DAY_OF_WEEK_TUESDAY
          items:
            $ref: '#/components/schemas/v3DayOfWeek'
        startTime:
          $ref: '#/components/schemas/v3TimeOfDay'
        endTime:
          $ref: '#/components/schemas/v3TimeOfDay'
      description: >-
        Defines when an alert should be active based on days of the week and
        time windows
      title: Alert activity schedule
      required:
        - dayOfWeek
        - startTime
        - endTime
    v3AlertDef:
      type: object
      properties:
        alertDefProperties:
          $ref: '#/components/schemas/v3AlertDefProperties'
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
          description: The alert definition's persistent ID
          title: >-
            This is the alert definition's persistent ID (does not change on
            replace), AKA UniqueIdentifier
        alertVersionId:
          type: string
          description: The old alert ID
          title: the old alertId
        createdTime:
          type: string
          format: date-time
          example: '2023-10-01T12:00:00.000Z'
          description: The time when the alert definition was created
        updatedTime:
          type: string
          format: date-time
          example: '2023-10-01T12:00:00.000Z'
          description: The time when the alert definition was last updated
      description: This data structure represents an alert definition
      title: Alert definition
      externalDocs:
        description: Find out more about alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/introduction-to-alerts/
      required:
        - alertDefProperties
        - id
        - alertVersionId
    v3AlertDefIncidentSettings:
      type: object
      properties:
        minutes:
          type: integer
          format: int64
          example: 30
          description: The time in minutes before the alert can be retriggered
        notifyOn:
          $ref: '#/components/schemas/v3NotifyOn'
      title: Alert definition incident settings
    v3AlertDefNotificationGroup:
      type: object
      properties:
        groupByKeys:
          type: array
          example:
            - key1
            - key2
          items:
            type: string
            pattern: ^[a-zA-Z0-9_.]+$
          description: The keys to group the alerts by
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/v3AlertDefWebhooksSettings'
          description: The settings for webhooks associated with the alert definition
        destinations:
          type: array
          items:
            $ref: '#/components/schemas/v3NotificationDestination'
          description: The destinations for notifications.  (Notification Center feature)
        router:
          $ref: '#/components/schemas/v3NotificationRouter'
      title: Alert definition notification group
    v3AlertDefOverride:
      type: object
      properties:
        priority:
          $ref: '#/components/schemas/v3AlertDefPriority'
      title: Alert definition priority update
    v3AlertDefPriority:
      type: string
      enum:
        - ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED
        - ALERT_DEF_PRIORITY_P4
        - ALERT_DEF_PRIORITY_P3
        - ALERT_DEF_PRIORITY_P2
        - ALERT_DEF_PRIORITY_P1
      default: ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED
    v3AlertDefProperties:
      type: object
      properties:
        name:
          type: string
          example: My Alert
          description: The name of the alert definition
        description:
          type: string
          example: Alert description
          description: >-
            A detailed description of what the alert monitors and when it
            triggers
        enabled:
          type: boolean
          example: true
          default: 'true'
          description: Whether the alert is currently active and monitoring
        priority:
          $ref: '#/components/schemas/v3AlertDefPriority'
        activeOn:
          $ref: '#/components/schemas/v3ActivitySchedule'
        type:
          $ref: '#/components/schemas/v3AlertDefType'
        logsImmediate:
          $ref: '#/components/schemas/v3LogsImmediateType'
        tracingImmediate:
          $ref: '#/components/schemas/v3TracingImmediateType'
        logsThreshold:
          $ref: '#/components/schemas/v3LogsThresholdType'
        logsRatioThreshold:
          $ref: '#/components/schemas/v3LogsRatioThresholdType'
        logsTimeRelativeThreshold:
          $ref: '#/components/schemas/v3LogsTimeRelativeThresholdType'
        metricThreshold:
          $ref: '#/components/schemas/v3MetricThresholdType'
        tracingThreshold:
          $ref: '#/components/schemas/v3TracingThresholdType'
        flow:
          $ref: '#/components/schemas/v3FlowType'
        logsAnomaly:
          $ref: '#/components/schemas/v3LogsAnomalyType'
        metricAnomaly:
          $ref: '#/components/schemas/v3MetricAnomalyType'
        logsNewValue:
          $ref: '#/components/schemas/v3LogsNewValueType'
        logsUniqueCount:
          $ref: '#/components/schemas/v3LogsUniqueCountType'
        sloThreshold:
          $ref: '#/components/schemas/v3SloThresholdType'
        groupByKeys:
          type: array
          example:
            - key1
            - key2
          items:
            type: string
          description: Keys used to group and aggregate alert data
        incidentsSettings:
          $ref: '#/components/schemas/v3AlertDefIncidentSettings'
        notificationGroup:
          $ref: '#/components/schemas/v3AlertDefNotificationGroup'
        notificationGroupExcess:
          type: array
          items:
            $ref: '#/components/schemas/v3AlertDefNotificationGroup'
          description: Additional notification groups for alerts (deprecated)
        entityLabels:
          type: object
          example:
            key: value
          additionalProperties:
            type: string
          description: Labels used to identify and categorize the alert entity
        phantomMode:
          type: boolean
          example: false
          default: 'false'
          description: Whether the alert is in phantom mode (creating incidents or not)
        deleted:
          type: boolean
          example: false
          default: 'false'
          description: Whether the alert has been marked as deleted
      description: User-configurable properties of an alert definition
      title: Alert definition properties
      required:
        - name
        - priority
        - type
        - type_definition
    v3AlertDefType:
      type: string
      enum:
        - ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED
        - ALERT_DEF_TYPE_LOGS_THRESHOLD
        - ALERT_DEF_TYPE_LOGS_ANOMALY
        - ALERT_DEF_TYPE_LOGS_RATIO_THRESHOLD
        - ALERT_DEF_TYPE_LOGS_NEW_VALUE
        - ALERT_DEF_TYPE_LOGS_UNIQUE_COUNT
        - ALERT_DEF_TYPE_LOGS_TIME_RELATIVE_THRESHOLD
        - ALERT_DEF_TYPE_METRIC_THRESHOLD
        - ALERT_DEF_TYPE_METRIC_ANOMALY
        - ALERT_DEF_TYPE_TRACING_IMMEDIATE
        - ALERT_DEF_TYPE_TRACING_THRESHOLD
        - ALERT_DEF_TYPE_FLOW
        - ALERT_DEF_TYPE_SLO_THRESHOLD
      default: ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED
    v3AlertDefWebhooksSettings:
      type: object
      properties:
        minutes:
          type: integer
          format: int64
          example: 15
          description: The time in minutes before the alert can be retriggered
        notifyOn:
          $ref: '#/components/schemas/v3NotifyOn'
        integration:
          $ref: '#/components/schemas/alertsv3IntegrationType'
      description: Configuration for webhook notifications for an alert
      title: Alert definition webhook settings
      required:
        - integration
    v3AlertEvent:
      type: object
      properties:
        permutationLabels:
          type: object
          additionalProperties:
            type: string
        groupLabels:
          type: object
          additionalProperties:
            type: string
        timestamp:
          type: string
          format: date-time
        alertId:
          type: string
        status:
          $ref: '#/components/schemas/v3AlertStatus'
        preGroupingEventId:
          type: string
        payload:
          type: object
        payloadType:
          type: string
        permutationId:
          type: string
        incidentCorrelationKey:
          type: string
        activityAnalysis:
          $ref: '#/components/schemas/v3ActivityAnalysis'
      title: Alert event
      required:
        - permutationLabels
        - groupLabels
        - timestamp
        - alertId
        - status
        - preGroupingEventId
        - payload
        - payloadType
        - permutationId
        - incidentCorrelationKey
        - activityAnalysis
    v3AlertEventMultiplePermutation:
      type: object
      properties:
        alertEventMultiplePermutation:
          type: array
          items:
            $ref: '#/components/schemas/v3AlertEvent'
    v3AlertEventOrderBy:
      type: object
      properties:
        fieldName:
          $ref: '#/components/schemas/v3OrderByAlertEventFields'
        direction:
          $ref: '#/components/schemas/v3OrderByAlertEventDirection'
    v3AlertStatus:
      type: string
      enum:
        - ALERT_STATUS_RESOLVED_OR_UNSPECIFIED
        - ALERT_STATUS_TRIGGERED
      default: ALERT_STATUS_RESOLVED_OR_UNSPECIFIED
    v3AlertsOp:
      type: string
      enum:
        - ALERTS_OP_AND_OR_UNSPECIFIED
        - ALERTS_OP_OR
      default: ALERTS_OP_AND_OR_UNSPECIFIED
    v3AnomalyAlertSettings:
      type: object
      properties:
        percentageOfDeviation:
          type: number
          format: float
          description: >-
            The percentage of deviation from the baseline for triggering the
            alert.
      description: Common settings for anomaly-based alerts.
      title: Anomaly alert settings
    v3BatchGetEventResponse:
      type: object
      properties:
        events:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v3CxEventSingleOrMultiple'
        notFoundIds:
          type: array
          items:
            type: string
        pagination:
          $ref: '#/components/schemas/coralogixapiseventsv3PaginationResponse'
    v3BurnRateThreshold:
      type: object
      properties:
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v3SloThresholdRule'
          description: The rules for the burn rate threshold
          maxItems: 5
          minItems: 1
        dual:
          $ref: '#/components/schemas/v3BurnRateTypeDual'
        single:
          $ref: '#/components/schemas/v3BurnRateTypeSingle'
      description: Burn rate threshold definition
      title: Burn Rate Threshold
      required:
        - rules
        - type
    v3BurnRateTypeDual:
      type: object
      properties:
        timeDuration:
          $ref: '#/components/schemas/v3TimeDuration'
      description: Burn rate type dual definition
      title: Burn Rate Type Dual
      required:
        - timeDuration
    v3BurnRateTypeSingle:
      type: object
      properties:
        timeDuration:
          $ref: '#/components/schemas/v3TimeDuration'
      description: Burn rate type single definition
      title: Burn Rate Type Single
      required:
        - timeDuration
    v3CreateAlertDefResponse:
      type: object
      properties:
        alertDef:
          $ref: '#/components/schemas/v3AlertDef'
      description: A response that contains the newly created alert definition
      title: Create alert definition response
      required:
        - alertDef
    v3CreateApiKeyRequest:
      type: object
      properties:
        name:
          type: string
          example: my_api_key
        owner:
          $ref: '#/components/schemas/v3Owner'
        keyPermissions:
          $ref: '#/components/schemas/v3CreateApiKeyRequestKeyPermissions'
        hashed:
          type: boolean
          example: true
      description: This data structure is used to create an API key.
      title: Create Api Key Request
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
      required:
        - name
        - owner
        - keyPermissions
        - hashed
    v3CreateApiKeyRequestKeyPermissions:
      type: object
      properties:
        presets:
          type: array
          example:
            - my_preset
          items:
            type: string
        permissions:
          type: array
          example:
            - read_logs
          items:
            type: string
      description: >-
        This data structure allows to specify loose permissions and permission
        presets for an API key.
      title: Key Permissions
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
      required:
        - presets
        - permissions
    v3CreateApiKeyResponse:
      type: object
      properties:
        keyId:
          type: string
          example: my_key_id
        name:
          type: string
          example: my_api_key
        value:
          type: string
          example: my_api_key_value
      description: This data structure is the response obtained when creating an API key.
      title: Create Api Key Response
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
      required:
        - keyId
        - name
        - value
    v3CxEvent:
      type: object
      properties:
        cxEventKey:
          type: string
          example: test
        cxEventType:
          type: string
          example: test_type
        cxEventLabels:
          type: object
          example:
            test: test
          additionalProperties:
            type: string
        companyId:
          type: integer
          format: int32
          example: 1
        cxEventTimestamp:
          type: string
          format: date-time
          example: 1714857600
        cxEventPayloadType:
          type: string
          example: test_payload_type
        cxEventPayload:
          type: object
          example:
            test: test
        cxEventDedupKey:
          type: string
          example: test_dedup_key
        cxEventMetadata:
          type: object
          example:
            test: test
          additionalProperties:
            type: string
      description: This data structure represents an event
      title: Event
      externalDocs:
        description: Find out more about events
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - cxEventKey
        - cxEventType
        - cxEventLabels
        - companyId
        - cxEventTimestamp
        - cxEventPayloadType
        - cxEventPayload
    v3CxEventArray:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/v3CxEvent'
      description: This data structure represents an array of events
      title: CxEventArray
      externalDocs:
        description: Find out more about events
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      required:
        - events
    v3CxEventSingleOrMultiple:
      type: object
      properties:
        singleEvent:
          $ref: '#/components/schemas/v3CxEvent'
        multipleEvents:
          $ref: '#/components/schemas/v3CxEventArray'
      description: This data structure represents a single or multiple events
      title: CxEventSingleOrMultiple
      required:
        - event
    v3DayOfWeek:
      type: string
      enum:
        - DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED
        - DAY_OF_WEEK_TUESDAY
        - DAY_OF_WEEK_WEDNESDAY
        - DAY_OF_WEEK_THURSDAY
        - DAY_OF_WEEK_FRIDAY
        - DAY_OF_WEEK_SATURDAY
        - DAY_OF_WEEK_SUNDAY
      default: DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED
    v3DeleteAlertDefResponse:
      type: object
      description: A response to the deletion of an alert definition
      title: Delete alert definition response
    v3DeleteApiKeyResponse:
      type: object
    v3DownloadAlertsResponse:
      type: object
      properties:
        content:
          type: string
          format: base64
          example: SGVsbG8gV29ybGQ=
          description: Base64-encoded binary data of the alert definitions
      description: A response containing the downloaded alert data
      title: Download alerts response
      required:
        - content
    v3DurationUnit:
      type: string
      enum:
        - DURATION_UNIT_UNSPECIFIED
        - DURATION_UNIT_HOURS
      default: DURATION_UNIT_UNSPECIFIED
    v3ErrorBudgetThreshold:
      type: object
      properties:
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v3SloThresholdRule'
          description: The rules for the error budget threshold
          maxItems: 5
          minItems: 1
      description: Error budget threshold definition
      title: Error Budget Threshold
      required:
        - rules
    v3EventStats:
      type: object
      properties:
        count:
          type: integer
          format: int64
        resolvedCount:
          type: integer
          format: int64
        triggeredCount:
          type: integer
          format: int64
        triggeredPermutationsSamples:
          type: array
          items:
            $ref: '#/components/schemas/v3Permutation'
        resolvedPermutationsSamples:
          type: array
          items:
            $ref: '#/components/schemas/v3Permutation'
        activityAnalysisStats:
          $ref: '#/components/schemas/v3ActivityAnalysisStats'
      title: Alert event statistics data structure
    v3EventsFilter:
      type: object
      properties:
        timestamp:
          $ref: '#/components/schemas/v3TimestampRange'
        cxEventTypes:
          type: array
          example:
            - test_type
          items:
            type: string
        cxEventKeys:
          type: array
          example:
            - test_key
          items:
            type: string
        cxEventMetadataFilters:
          $ref: '#/components/schemas/v3Filters'
      description: This data structure represents an events filter
      title: EventsFilter
      required:
        - timestamp
        - cxEventTypes
        - cxEventKeys
    v3EventsQueryFilter:
      type: object
      properties:
        timestamp:
          $ref: '#/components/schemas/v3TimestampRange'
    v3FieldStatistics:
      type: object
      properties:
        fieldStatistics:
          type: object
          additionalProperties:
            type: string
            format: int64
    v3FilterMatcher:
      type: string
      enum:
        - FILTER_MATCHER_TEXT_OR_UNSPECIFIED
        - FILTER_MATCHER_REGEXP
      default: FILTER_MATCHER_TEXT_OR_UNSPECIFIED
    v3FilterPathAndValues:
      type: object
      properties:
        path:
          type: string
          example: test
        multipleValues:
          $ref: '#/components/schemas/v3MultipleValues'
        filters:
          $ref: '#/components/schemas/v3Filters'
      description: This data structure represents a filter path and values
      title: FilterPathAndValues
      required:
        - path
        - values
    v3Filters:
      type: object
      properties:
        operator:
          $ref: '#/components/schemas/eventsv3FilterOperator'
        pathAndValues:
          type: array
          items:
            $ref: '#/components/schemas/v3FilterPathAndValues'
      description: This data structure represents a filter
      title: Filters
      required:
        - pathAndValues
    v3FlowStages:
      type: object
      properties:
        flowStagesGroups:
          $ref: '#/components/schemas/v3FlowStagesGroups'
        timeframeMs:
          type: string
          format: int64
        timeframeType:
          $ref: '#/components/schemas/v3TimeframeType'
      description: Defines stages in a flow alert
      title: Flow stages
      required:
        - flow_stages
        - timeframeMs
        - timeframeType
    v3FlowStagesGroup:
      type: object
      properties:
        alertDefs:
          type: array
          items:
            $ref: '#/components/schemas/v3FlowStagesGroupsAlertDefs'
          description: The alert definitions for the flow stage group.
          minItems: 1
        nextOp:
          $ref: '#/components/schemas/v3NextOp'
        alertsOp:
          $ref: '#/components/schemas/v3AlertsOp'
      description: Defines a group of stages in a flow alert
      title: Flow stage group
      required:
        - alertDefs
        - nextOp
        - alertsOp
    v3FlowStagesGroups:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/v3FlowStagesGroup'
      description: Groups of stages in a flow alert
      title: Flow stage groups
      required:
        - groups
    v3FlowStagesGroupsAlertDefs:
      type: object
      properties:
        id:
          type: string
          format: UUIDv4
          example: 123e4567-e89b-12d3-a456-426614174000
          description: The alert definition ID
        not:
          type: boolean
          example: true
          description: Whether to negate the alert definition or not.
      description: Alert definitions for a flow stage group
      title: Flow stage group alert definitions
      required:
        - id
    v3FlowType:
      type: object
      properties:
        stages:
          type: array
          items:
            $ref: '#/components/schemas/v3FlowStages'
          description: The stages of the flow alert.
          minItems: 1
        enforceSuppression:
          type: boolean
      description: Configuration for flow-based alerts with multiple stages
      title: Flow alert type
      externalDocs:
        description: Learn more about flow alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/flow-alerts/
      required:
        - stages
    v3GetAlertDefByVersionIdResponse:
      type: object
      properties:
        alertDef:
          $ref: '#/components/schemas/v3AlertDef'
      description: A response that contains an alert definition for the requested version
      title: Get alert definition by version ID response
      required:
        - alertDef
    v3GetAlertDefResponse:
      type: object
      properties:
        alertDef:
          $ref: '#/components/schemas/v3AlertDef'
      description: A response containing the requested alert definition
      title: Get alert definition response
      required:
        - alertDef
    v3GetAlertEventResponse:
      type: object
      properties:
        id:
          type: string
          title: Alert event ID
        singlePermutation:
          $ref: '#/components/schemas/v3AlertEvent'
        multiplePermutation:
          $ref: '#/components/schemas/v3AlertEventMultiplePermutation'
        pagination:
          $ref: '#/components/schemas/coralogixapisalertsv3PaginationResponse'
      title: Get alert event response
    v3GetAlertEventStatsResponse:
      type: object
      properties:
        eventsStats:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v3EventStats'
      title: Get alert event statistics response
    v3GetApiKeyResponse:
      type: object
      properties:
        keyInfo:
          $ref: '#/components/schemas/v3KeyInfo'
      description: This data structure is the response obtained when retrieving an API key.
      title: Get Api Key Response
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
      required:
        - keyInfo
    v3GetEventResponse:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/v3CxEventSingleOrMultiple'
        pagination:
          $ref: '#/components/schemas/coralogixapiseventsv3PaginationResponse'
    v3GetEventsStatisticsResponse:
      type: object
      properties:
        cxEventMetadataFieldStatistics:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v3FieldStatistics'
      description: This data structure represents a response to get events statistics
      title: GetEventsStatisticsResponse
      required:
        - cxEventMetadataFieldStatistics
    v3GetSendDataApiKeysResponse:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/v3KeyInfo'
      description: This data structure is the response obtained when retrieving an API key.
      title: Get Api Key Response
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
      required:
        - key_info
    v3KeyInfo:
      type: object
      properties:
        name:
          type: string
          example: my_api_key
        owner:
          $ref: '#/components/schemas/v3Owner'
        active:
          type: boolean
          example: true
        hashed:
          type: boolean
          example: true
        keyPermissions:
          $ref: '#/components/schemas/v3KeyInfoKeyPermissions'
        value:
          type: string
        id:
          type: string
      description: >-
        This data structure represents the information associated with an API
        key.
      title: Key Info
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
      required:
        - id
        - name
        - owner
        - active
        - hashed
        - keyPermissions
    v3KeyInfoKeyPermissions:
      type: object
      properties:
        presets:
          type: array
          items:
            $ref: '#/components/schemas/v3PresetInfo'
        permissions:
          type: array
          items:
            type: string
      description: This data structure represents the permissions on an API key.
      title: Key Permissions
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
      required:
        - presets
        - permissions
    v3LabelFilterType:
      type: object
      properties:
        value:
          type: string
          example: my-app
          description: The value of the label to filter by
        operation:
          $ref: '#/components/schemas/v3LogFilterOperationType'
      description: Label filter type for log entries
      title: Label filter type
      required:
        - value
        - operation
    v3LabelFilters:
      type: object
      properties:
        applicationName:
          type: array
          items:
            $ref: '#/components/schemas/v3LabelFilterType'
        subsystemName:
          type: array
          items:
            $ref: '#/components/schemas/v3LabelFilterType'
        severities:
          type: array
          items:
            $ref: '#/components/schemas/v3LogSeverity'
      description: Filters for application name, subsystem name, and log severities
      title: Label filters
    v3ListAlertDefsResponse:
      type: object
      properties:
        alertDefs:
          type: array
          items:
            $ref: '#/components/schemas/v3AlertDef'
          description: List of alert definitions
      description: A response that contains a list of alert definitions
      title: List alert definitions response
      required:
        - alertDefs
    v3ListEventsCountResponse:
      type: object
      properties:
        count:
          type: string
          format: uint64
          example: 10
        reachedLimit:
          type: boolean
          example: false
      description: This data structure represents a response to list events count
      title: ListEventsCountResponse
      required:
        - count
        - reachedLimit
    v3ListEventsResponse:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/v3CxEvent'
        pagination:
          $ref: '#/components/schemas/coralogixapiseventsv3PaginationResponse'
      description: This data structure represents a response to list events
      title: ListEventsResponse
      required:
        - events
    v3LogFilterOperationType:
      type: string
      enum:
        - LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED
        - LOG_FILTER_OPERATION_TYPE_INCLUDES
        - LOG_FILTER_OPERATION_TYPE_ENDS_WITH
        - LOG_FILTER_OPERATION_TYPE_STARTS_WITH
      default: LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED
    v3LogSeverity:
      type: string
      enum:
        - LOG_SEVERITY_VERBOSE_UNSPECIFIED
        - LOG_SEVERITY_DEBUG
        - LOG_SEVERITY_INFO
        - LOG_SEVERITY_WARNING
        - LOG_SEVERITY_ERROR
        - LOG_SEVERITY_CRITICAL
      default: LOG_SEVERITY_VERBOSE_UNSPECIFIED
    v3LogsAnomalyCondition:
      type: object
      properties:
        minimumThreshold:
          type: number
          format: double
          example: 10
          description: The threshold value for the alert condition
        timeWindow:
          $ref: '#/components/schemas/v3LogsTimeWindow'
        conditionType:
          $ref: '#/components/schemas/v3LogsAnomalyConditionType'
      description: Defines conditions for detecting log anomalies
      title: Log-based anomaly condition
      required:
        - minimumThreshold
        - timeWindow
        - conditionType
    v3LogsAnomalyConditionType:
      type: string
      enum:
        - LOGS_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED
      default: LOGS_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED
    v3LogsAnomalyRule:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/v3LogsAnomalyCondition'
      description: Defines a rule for detecting log anomalies
      title: Log-based anomaly rule
      required:
        - condition
    v3LogsAnomalyType:
      type: object
      properties:
        logsFilter:
          $ref: '#/components/schemas/alertsv3LogsFilter'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v3LogsAnomalyRule'
          description: The rules for the log anomaly alert
          maxItems: 1
          minItems: 1
        notificationPayloadFilter:
          type: array
          example:
            - obj.field
          items:
            type: string
            pattern: ^[a-zA-Z0-9_.]+$
          description: >-
            The filter to specify which fields to include in the notification
            payload
        evaluationDelayMs:
          type: integer
          format: milliseconds
          example: 60000
          description: The delay in milliseconds before evaluating the alert condition
        anomalyAlertSettings:
          $ref: '#/components/schemas/v3AnomalyAlertSettings'
      description: Configuration for alerts triggered by anomalous log patterns
      title: Log-based anomaly alert type
      externalDocs:
        description: Learn more about logs anomaly alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/logs/anomaly-detection-alerts/
      required:
        - rules
    v3LogsImmediateType:
      type: object
      properties:
        logsFilter:
          $ref: '#/components/schemas/alertsv3LogsFilter'
        notificationPayloadFilter:
          type: array
          example:
            - obj.field
          items:
            type: string
            pattern: ^[a-zA-Z0-9_.]+$
      description: >-
        Configuration for immediate alerts triggered on log entries matching
        specific filters.
      title: Logs immediate alert type
      externalDocs:
        description: Learn more about logs immediate alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/logs/immediate-notifications/
      required:
        - logsFilter
    v3LogsNewValueCondition:
      type: object
      properties:
        keypathToTrack:
          type: string
          example: metadata.field
          description: The keypath to track for new values
        timeWindow:
          $ref: '#/components/schemas/v3LogsNewValueTimeWindow'
      description: Defines conditions for detecting new values in logs
      title: Log-based new value condition
      required:
        - keypathToTrack
        - timeWindow
    v3LogsNewValueRule:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/v3LogsNewValueCondition'
      description: Defines the condition for detecting new values in logs
      title: Log-based new value rule
      required:
        - condition
    v3LogsNewValueTimeWindow:
      type: object
      properties:
        logsNewValueTimeWindowSpecificValue:
          $ref: '#/components/schemas/v3LogsNewValueTimeWindowValue'
      description: Time window configuration for log-based new value alerts
      title: Log-based new value alert time window
      required:
        - type
    v3LogsNewValueTimeWindowValue:
      type: string
      enum:
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_12_OR_UNSPECIFIED
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_24
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_48
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_72
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_WEEK_1
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_MONTH_1
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_MONTHS_2
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_MONTHS_3
      default: LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_12_OR_UNSPECIFIED
    v3LogsNewValueType:
      type: object
      properties:
        logsFilter:
          $ref: '#/components/schemas/alertsv3LogsFilter'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v3LogsNewValueRule'
          description: The rules for the log new value alert.
          maxItems: 1
          minItems: 1
        notificationPayloadFilter:
          type: array
          example:
            - obj.field
          items:
            type: string
            pattern: ^[a-zA-Z0-9_.]+$
          description: >-
            The filter to specify which fields to include in the notification
            payload.
      description: Configuration for alerts triggered by new values appearing in logs
      title: Log-based new value alert type
      required:
        - rules
    v3LogsRatioCondition:
      type: object
      properties:
        threshold:
          type: number
          format: double
          example: 10
          description: The threshold value for the alert condition
          pattern: ^\d+(\.\d+)?$
        timeWindow:
          $ref: '#/components/schemas/v3LogsRatioTimeWindow'
        conditionType:
          $ref: '#/components/schemas/v3LogsRatioConditionType'
      description: Defines conditions for ratio-based alerts
      title: Log-based ratio condition
      required:
        - threshold
        - timeWindow
        - conditionType
    v3LogsRatioConditionType:
      type: string
      enum:
        - LOGS_RATIO_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
        - LOGS_RATIO_CONDITION_TYPE_LESS_THAN
      default: LOGS_RATIO_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
    v3LogsRatioGroupByFor:
      type: string
      enum:
        - LOGS_RATIO_GROUP_BY_FOR_BOTH_OR_UNSPECIFIED
        - LOGS_RATIO_GROUP_BY_FOR_NUMERATOR_ONLY
        - LOGS_RATIO_GROUP_BY_FOR_DENUMERATOR_ONLY
      default: LOGS_RATIO_GROUP_BY_FOR_BOTH_OR_UNSPECIFIED
    v3LogsRatioRules:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/v3LogsRatioCondition'
        override:
          $ref: '#/components/schemas/v3AlertDefOverride'
      description: Defines the rules for log-based ratio alerts
      title: Log-based ratio rules
      required:
        - condition
        - override
    v3LogsRatioThresholdType:
      type: object
      properties:
        numerator:
          $ref: '#/components/schemas/alertsv3LogsFilter'
        numeratorAlias:
          type: string
          example: numerator_alias
          description: The alias for the numerator filter, used for display purposes
        denominator:
          $ref: '#/components/schemas/alertsv3LogsFilter'
        denominatorAlias:
          type: string
          example: denominator_alias
          description: The alias for the denominator filter, used for display purposes
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v3LogsRatioRules'
          description: The rules for the ratio alert
          maxItems: 5
          minItems: 1
        notificationPayloadFilter:
          type: array
          example:
            - obj.field
          items:
            type: string
            pattern: ^[a-zA-Z0-9_.]+$
        groupByFor:
          $ref: '#/components/schemas/v3LogsRatioGroupByFor'
        undetectedValuesManagement:
          $ref: '#/components/schemas/alertsv3UndetectedValuesManagement'
        ignoreInfinity:
          type: boolean
          example: true
          description: The configuration for ignoring infinity values in the ratio
        evaluationDelayMs:
          type: integer
          format: int32
          example: 60000
          description: The delay in milliseconds before evaluating the alert condition
      description: Configuration for alerts based on the ratio between two log queries
      title: Log-based ratio threshold alert type
      externalDocs:
        description: Learn more about logs ratio alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/logs/ratio-alerts/
      required:
        - numerator
        - denominator
        - rules
    v3LogsRatioTimeWindow:
      type: object
      properties:
        logsRatioTimeWindowSpecificValue:
          $ref: '#/components/schemas/v3LogsRatioTimeWindowValue'
      description: Time window configuration for ratio alerts
      title: Logs ratio time window
      externalDocs:
        description: Learn more about log-based ratio alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/logs/ratio-alerts/
      required:
        - type
    v3LogsRatioTimeWindowValue:
      type: string
      enum:
        - LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED
        - LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_10
        - LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_15
        - LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_30
        - LOGS_RATIO_TIME_WINDOW_VALUE_HOUR_1
        - LOGS_RATIO_TIME_WINDOW_VALUE_HOURS_2
        - LOGS_RATIO_TIME_WINDOW_VALUE_HOURS_4
        - LOGS_RATIO_TIME_WINDOW_VALUE_HOURS_6
        - LOGS_RATIO_TIME_WINDOW_VALUE_HOURS_12
        - LOGS_RATIO_TIME_WINDOW_VALUE_HOURS_24
        - LOGS_RATIO_TIME_WINDOW_VALUE_HOURS_36
      default: LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED
    v3LogsSimpleFilter:
      type: object
      properties:
        luceneQuery:
          type: string
        labelFilters:
          $ref: '#/components/schemas/v3LabelFilters'
      description: Basic filter configuration using a Lucene query and label filters
      title: Simple log filter
    v3LogsThresholdCondition:
      type: object
      properties:
        threshold:
          type: number
          format: double
          example: 100
          description: The threshold value for the alert condition
          pattern: ^\d+(\.\d+)?$
        timeWindow:
          $ref: '#/components/schemas/v3LogsTimeWindow'
        conditionType:
          $ref: '#/components/schemas/v3LogsThresholdConditionType'
      description: >-
        LogsThresholdCondition is a message that defines the condition for
        log-based threshold alerts.
      title: Logs Threshold Condition
      required:
        - threshold
        - timeWindow
        - conditionType
    v3LogsThresholdConditionType:
      type: string
      enum:
        - LOGS_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
        - LOGS_THRESHOLD_CONDITION_TYPE_LESS_THAN
      default: LOGS_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
    v3LogsThresholdRule:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/v3LogsThresholdCondition'
        override:
          $ref: '#/components/schemas/v3AlertDefOverride'
      description: >-
        LogsThresholdRule is a message that defines a rule for log-based
        threshold alerts.
      title: Logs Threshold Rule
      required:
        - condition
        - override
    v3LogsThresholdType:
      type: object
      properties:
        logsFilter:
          $ref: '#/components/schemas/alertsv3LogsFilter'
        undetectedValuesManagement:
          $ref: '#/components/schemas/alertsv3UndetectedValuesManagement'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v3LogsThresholdRule'
          description: The rules for the threshold alert
          maxItems: 5
          minItems: 1
        notificationPayloadFilter:
          type: array
          example:
            - obj.field
          items:
            type: string
            pattern: ^[a-zA-Z0-9_.]+$
          description: >-
            The filter to specify which fields to include in the notification
            payload
        evaluationDelayMs:
          type: integer
          format: int32
          example: 60000
          description: The delay in milliseconds before evaluating the alert condition
      description: >-
        Configuration for alerts triggered when log counts exceed or fall below
        specified thresholds
      title: Log-based threshold alert type
      externalDocs:
        description: Learn more about log-based threshold alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/logs/threshold-alerts/
      required:
        - rules
    v3LogsTimeRelativeComparedTo:
      type: string
      enum:
        - LOGS_TIME_RELATIVE_COMPARED_TO_PREVIOUS_HOUR_OR_UNSPECIFIED
        - LOGS_TIME_RELATIVE_COMPARED_TO_SAME_HOUR_YESTERDAY
        - LOGS_TIME_RELATIVE_COMPARED_TO_SAME_HOUR_LAST_WEEK
        - LOGS_TIME_RELATIVE_COMPARED_TO_YESTERDAY
        - LOGS_TIME_RELATIVE_COMPARED_TO_SAME_DAY_LAST_WEEK
        - LOGS_TIME_RELATIVE_COMPARED_TO_SAME_DAY_LAST_MONTH
      default: LOGS_TIME_RELATIVE_COMPARED_TO_PREVIOUS_HOUR_OR_UNSPECIFIED
    v3LogsTimeRelativeCondition:
      type: object
      properties:
        threshold:
          type: number
          format: double
          description: The threshold value for the alert condition.
        comparedTo:
          $ref: '#/components/schemas/v3LogsTimeRelativeComparedTo'
        conditionType:
          $ref: '#/components/schemas/v3LogsTimeRelativeConditionType'
      description: Defines conditions for time-relative comparison alerts
      title: Log-based time-relative condition
      required:
        - threshold
        - comparedTo
        - conditionType
    v3LogsTimeRelativeConditionType:
      type: string
      enum:
        - LOGS_TIME_RELATIVE_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
        - LOGS_TIME_RELATIVE_CONDITION_TYPE_LESS_THAN
      default: LOGS_TIME_RELATIVE_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
    v3LogsTimeRelativeRule:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/v3LogsTimeRelativeCondition'
        override:
          $ref: '#/components/schemas/v3AlertDefOverride'
      description: >-
        LogsTimeRelativeRule is a message that defines a rule for log-based
        time-relative alerts
      title: Logs Time Relative Rule
      required:
        - condition
        - override
    v3LogsTimeRelativeThresholdType:
      type: object
      properties:
        logsFilter:
          $ref: '#/components/schemas/alertsv3LogsFilter'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v3LogsTimeRelativeRule'
          description: The rules for the time-relative alert
          maxItems: 5
          minItems: 1
        ignoreInfinity:
          type: boolean
          example: true
          description: Ignore infinity values in the alert
        notificationPayloadFilter:
          type: array
          example:
            - obj.field
          items:
            type: string
            pattern: ^[a-zA-Z0-9_.]+$
        undetectedValuesManagement:
          $ref: '#/components/schemas/alertsv3UndetectedValuesManagement'
        evaluationDelayMs:
          type: integer
          format: int32
          example: 60000
          description: The delay in milliseconds before evaluating the alert condition
      description: >-
        Configuration for alerts that are triggered when a fixed ratio reaches a
        set threshold compared to a past time frame.
      title: Log-based time-relative threshold alert type
      externalDocs:
        description: Learn more about log-based, time-relative alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/logs/time-relative-alerts/
      required:
        - rules
    v3LogsTimeWindow:
      type: object
      properties:
        logsTimeWindowSpecificValue:
          $ref: '#/components/schemas/v3LogsTimeWindowValue'
      description: Time window configuration for log-based alerts
      title: Log-based alert time window
      required:
        - type
    v3LogsTimeWindowValue:
      type: string
      enum:
        - LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED
        - LOGS_TIME_WINDOW_VALUE_MINUTES_10
        - LOGS_TIME_WINDOW_VALUE_MINUTES_20
        - LOGS_TIME_WINDOW_VALUE_MINUTES_15
        - LOGS_TIME_WINDOW_VALUE_MINUTES_30
        - LOGS_TIME_WINDOW_VALUE_HOUR_1
        - LOGS_TIME_WINDOW_VALUE_HOURS_2
        - LOGS_TIME_WINDOW_VALUE_HOURS_4
        - LOGS_TIME_WINDOW_VALUE_HOURS_6
        - LOGS_TIME_WINDOW_VALUE_HOURS_12
        - LOGS_TIME_WINDOW_VALUE_HOURS_24
        - LOGS_TIME_WINDOW_VALUE_HOURS_36
      default: LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED
    v3LogsUniqueCountCondition:
      type: object
      properties:
        maxUniqueCount:
          type: string
          format: int64
          example: 100
          description: The maximum unique count
        timeWindow:
          $ref: '#/components/schemas/v3LogsUniqueValueTimeWindow'
      description: Defines conditions for unique count alerts
      title: Logs unique count condition
      required:
        - maxUniqueCount
        - timeWindow
    v3LogsUniqueCountRule:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/v3LogsUniqueCountCondition'
      description: Defines the rule for detecting unique counts in logs
      title: Log-based unique count rule
      required:
        - condition
    v3LogsUniqueCountType:
      type: object
      properties:
        logsFilter:
          $ref: '#/components/schemas/alertsv3LogsFilter'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v3LogsUniqueCountRule'
          description: The rules for the log unique count alert
          maxItems: 1
          minItems: 1
        notificationPayloadFilter:
          type: array
          example:
            - obj.field
          items:
            type: string
            pattern: ^[a-zA-Z0-9_.]+$
          description: >-
            The filter to specify which fields to include in the notification
            payload
        maxUniqueCountPerGroupByKey:
          type: string
          format: int64
          example: 100
          description: The maximum unique count per group by key
        uniqueCountKeypath:
          type: string
          example: obj.field
          description: The keypath in the logs to be used for unique count
      description: Configuration for alerts based on unique value counts in logs
      title: Log-based unique count alert type
      externalDocs:
        description: Learn more about log-based, unique count alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/logs/unique-count-alerts/
      required:
        - rules
        - uniqueCountKeypath
    v3LogsUniqueValueTimeWindow:
      type: object
      properties:
        logsUniqueValueTimeWindowSpecificValue:
          $ref: '#/components/schemas/v3LogsUniqueValueTimeWindowValue'
      description: Time window configuration for log-based unique value alerts
      title: Log-based unique value alert time window
      required:
        - type
    v3LogsUniqueValueTimeWindowValue:
      type: string
      enum:
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTE_1_OR_UNSPECIFIED
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_5
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_10
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_15
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_20
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_30
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_1
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_2
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_4
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_6
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_12
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_24
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_36
      default: LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTE_1_OR_UNSPECIFIED
    v3MetricAnomalyCondition:
      type: object
      properties:
        threshold:
          type: number
          format: double
          example: 10
          description: The threshold value for the alert condition
        forOverPct:
          type: integer
          format: int64
          example: 20
          description: >-
            The percentage of the metric that must exceed the threshold to
            trigger the alert
        ofTheLast:
          $ref: '#/components/schemas/v3MetricTimeWindow'
        minNonNullValuesPct:
          type: integer
          format: int64
          example: 10
          description: The percentage of non-null values required to trigger the alert
        conditionType:
          $ref: '#/components/schemas/v3MetricAnomalyConditionType'
      title: Metric-based anomaly condition
      required:
        - threshold
        - minNonNullValuesPct
        - ofTheLast
        - conditionType
    v3MetricAnomalyConditionType:
      type: string
      enum:
        - METRIC_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED
        - METRIC_ANOMALY_CONDITION_TYPE_LESS_THAN_USUAL
      default: METRIC_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED
    v3MetricAnomalyRule:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/v3MetricAnomalyCondition'
      description: A rule for metric-based anomaly detection alerts
      title: Metric-based anomaly rule
      required:
        - condition
    v3MetricAnomalyType:
      type: object
      properties:
        metricFilter:
          $ref: '#/components/schemas/v3MetricFilter'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v3MetricAnomalyRule'
          description: The rules for the metric anomaly alert.
          maxItems: 1
          minItems: 1
        evaluationDelayMs:
          type: integer
          format: milliseconds
          example: 60000
          description: The delay in milliseconds before evaluating the alert condition
        anomalyAlertSettings:
          $ref: '#/components/schemas/v3AnomalyAlertSettings'
      description: Configuration for alerts triggered by anomalous metric patterns
      title: Metric-based anomaly alert type
      externalDocs:
        description: Learn more about metric-based anomaly alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/metrics/anomaly-detection-alerts/
      required:
        - metricFilter
        - rules
    v3MetricFilter:
      type: object
      properties:
        promql:
          type: string
          format: promql
          example: avg_over_time(metric_name[5m]) > 10
          description: A PromQL filter for metrics
      title: Metric filter configuration in alerts
      required:
        - promql
    v3MetricMissingValues:
      type: object
      properties:
        replaceWithZero:
          type: boolean
          example: true
          description: If set to true, missing values will be replaced with zero
        minNonNullValuesPct:
          type: integer
          format: int64
          example: 80
          description: >-
            If set, specifies the minimum percentage of non-null values required
            for the alert to be triggered
          pattern: ^(100|[1-9][0-9]?)$
      description: Configuration for handling missing values in metric threshold alerts.
      title: Metric Missing Values Configuration
      required:
        - missing_values
    v3MetricThresholdCondition:
      type: object
      properties:
        threshold:
          type: number
          format: double
          example: 100
          description: The threshold value for the alert condition
          pattern: ^\d+(\.\d+)?$
        forOverPct:
          type: integer
          format: int64
          example: 80
          description: >-
            The percentage of values that must exceed the threshold to trigger
            the alert
          pattern: ^(100|[1-9]?\d)$
        ofTheLast:
          $ref: '#/components/schemas/v3MetricTimeWindow'
        conditionType:
          $ref: '#/components/schemas/v3MetricThresholdConditionType'
      description: Defines conditions for metric threshold alerts
      title: Metric Threshold Condition
      required:
        - threshold
        - forOverPct
        - ofTheLast
        - conditionType
    v3MetricThresholdConditionType:
      type: string
      enum:
        - METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
        - METRIC_THRESHOLD_CONDITION_TYPE_LESS_THAN
        - METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_EQUALS
        - METRIC_THRESHOLD_CONDITION_TYPE_LESS_THAN_OR_EQUALS
      default: METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
    v3MetricThresholdRule:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/v3MetricThresholdCondition'
        override:
          $ref: '#/components/schemas/v3AlertDefOverride'
      description: Defines a rule for metric-based threshold alerts
      title: Metric Threshold Rule
      required:
        - condition
        - override
    v3MetricThresholdType:
      type: object
      properties:
        metricFilter:
          $ref: '#/components/schemas/v3MetricFilter'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v3MetricThresholdRule'
          description: The rules for the metric threshold alert
          maxItems: 5
          minItems: 1
        undetectedValuesManagement:
          $ref: '#/components/schemas/alertsv3UndetectedValuesManagement'
        missingValues:
          $ref: '#/components/schemas/v3MetricMissingValues'
        evaluationDelayMs:
          type: integer
          format: int32
          example: 60000
          description: The delay in milliseconds before evaluating the alert condition
      description: Configuration for alerts based on metric threshold violations
      title: Metric-based threshold alert type
      externalDocs:
        description: Learn more about metric-based threshold alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/metrics/threshold-alerts/
      required:
        - metricFilter
        - rules
        - missingValues
    v3MetricTimeWindow:
      type: object
      properties:
        metricTimeWindowSpecificValue:
          $ref: '#/components/schemas/v3MetricTimeWindowValue'
        metricTimeWindowDynamicDuration:
          type: string
          format: duration
          example: 1h30m
          description: The time window as a dynamic value
      title: Metric time window
      required:
        - type
    v3MetricTimeWindowValue:
      type: string
      enum:
        - METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED
        - METRIC_TIME_WINDOW_VALUE_MINUTES_5
        - METRIC_TIME_WINDOW_VALUE_MINUTES_10
        - METRIC_TIME_WINDOW_VALUE_MINUTES_15
        - METRIC_TIME_WINDOW_VALUE_MINUTES_20
        - METRIC_TIME_WINDOW_VALUE_MINUTES_30
        - METRIC_TIME_WINDOW_VALUE_HOUR_1
        - METRIC_TIME_WINDOW_VALUE_HOURS_2
        - METRIC_TIME_WINDOW_VALUE_HOURS_4
        - METRIC_TIME_WINDOW_VALUE_HOURS_6
        - METRIC_TIME_WINDOW_VALUE_HOURS_12
        - METRIC_TIME_WINDOW_VALUE_HOURS_24
        - METRIC_TIME_WINDOW_VALUE_HOURS_36
      default: METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED
    v3MultipleValues:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
        matcher:
          $ref: '#/components/schemas/v3FilterMatcher'
    v3NextOp:
      type: string
      enum:
        - NEXT_OP_AND_OR_UNSPECIFIED
        - NEXT_OP_OR
      default: NEXT_OP_AND_OR_UNSPECIFIED
    v3NotificationDestination:
      type: object
      properties:
        connectorId:
          type: string
          example: connector_id_example
          description: The connector ID used to send notifications
        presetId:
          type: string
          example: preset_id_example
          description: Optional preset ID for the notification destination
        notifyOn:
          $ref: '#/components/schemas/v3NotifyOn'
        triggeredRoutingOverrides:
          $ref: '#/components/schemas/v3NotificationRouting'
        resolvedRouteOverrides:
          $ref: '#/components/schemas/v3NotificationRouting'
      description: Configuration for where and how alert notifications should be sent
      title: Notification destination configuration
      externalDocs:
        description: Learn more about alert notification destinations in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/configure-notifications/destinations/
      required:
        - connectorId
    v3NotificationRouter:
      type: object
      properties:
        id:
          type: string
          format: UUIDv4
          example: 123e4567-e89b-12d3-a456-426614174000
          description: The ID of the notification router
        notifyOn:
          $ref: '#/components/schemas/v3NotifyOn'
      description: Configuration for routing notifications
      title: Notification router
      required:
        - id
    v3NotificationRouting:
      type: object
      properties:
        configOverrides:
          $ref: '#/components/schemas/alertsv3SourceOverrides'
      title: Notification routing
    v3NotifyOn:
      type: string
      enum:
        - NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED
        - NOTIFY_ON_TRIGGERED_AND_RESOLVED
      default: NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED
    v3OrderByAlertEventDirection:
      type: string
      enum:
        - ORDER_BY_ALERT_EVENT_DIRECTION_UNSPECIFIED
        - ORDER_BY_ALERT_EVENT_DIRECTION_ASC
        - ORDER_BY_ALERT_EVENT_DIRECTION_DESC
      default: ORDER_BY_ALERT_EVENT_DIRECTION_UNSPECIFIED
    v3OrderByAlertEventFields:
      type: string
      enum:
        - ORDER_BY_ALERT_EVENT_FIELDS_UNSPECIFIED
        - ORDER_BY_ALERT_EVENT_FIELDS_TIMESTAMP
      default: ORDER_BY_ALERT_EVENT_FIELDS_UNSPECIFIED
    v3Owner:
      type: object
      properties:
        userId:
          type: string
        teamId:
          type: integer
          format: int64
        organisationId:
          type: string
    v3Permutation:
      type: object
      properties:
        permutationLabels:
          type: object
          additionalProperties:
            type: string
      title: Permutation data structure
    v3PresetInfo:
      type: object
      properties:
        name:
          type: string
          example: my_preset
        permissions:
          type: array
          example:
            - read_logs
          items:
            type: string
      description: >-
        This data structure represents a preset set of permissions on an API
        key.
      title: Preset Info
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
      required:
        - name
        - permissions
    v3Recipients:
      type: object
      properties:
        emails:
          type: array
          example:
            - mail@gmail.com
          items:
            type: string
            format: list of emails
          description: The list of email recipients for alert notifications
          minItems: 1
      description: List of email recipients for alert notifications
      title: Recipients
      required:
        - emails
    v3ReplaceAlertDefRequest:
      type: object
      properties:
        alertDefProperties:
          $ref: '#/components/schemas/v3AlertDefProperties'
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Alert definition ID
          title: Alert definition ID
      description: A request to replace an existing alert definition
      title: Replace alert definition request
      required:
        - alertDefProperties
        - id
    v3ReplaceAlertDefResponse:
      type: object
      properties:
        alertDef:
          $ref: '#/components/schemas/v3AlertDef'
      description: A response that contains the updated alert definition
      title: Replace alert definition response
      required:
        - alertDef
    v3SloThresholdCondition:
      type: object
      properties:
        threshold:
          type: number
          format: double
      description: Condition for the SLO threshold rule
      title: SLO Threshold Condition
      required:
        - threshold
    v3SloThresholdRule:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/v3SloThresholdCondition'
        override:
          $ref: '#/components/schemas/v3AlertDefOverride'
      description: SLO threshold rule definition
      title: SLO Threshold Rule
      required:
        - condition
        - override
    v3SloThresholdType:
      type: object
      properties:
        sloDefinition:
          $ref: '#/components/schemas/alertsv3SloDefinition'
        errorBudget:
          $ref: '#/components/schemas/v3ErrorBudgetThreshold'
        burnRate:
          $ref: '#/components/schemas/v3BurnRateThreshold'
      description: SLO threshold type definition
      title: SLO Threshold Type
      required:
        - sloDefinition
        - threshold
    v3TimeDuration:
      type: object
      properties:
        duration:
          type: string
          format: uint64
          example: 60
          description: The duration value
        unit:
          $ref: '#/components/schemas/v3DurationUnit'
      description: Configuration for time duration
      title: Time duration
      required:
        - duration
        - unit
    v3TimeOfDay:
      type: object
      properties:
        hours:
          type: integer
          format: int32
          example: 14
          description: Hours of day in 24 hour format. Should be from 0 to 23.
          pattern: ^([01][0-9]|2[0-3]|[0-9])$
        minutes:
          type: integer
          format: int32
          example: 30
          description: Minutes of hour of day. Must be from 0 to 59.
          pattern: ^([0-5][0-9]|[0-9])$
      description: Represents a specific time in a 24-hour format
      title: Time of day
      required:
        - hours
        - minutes
    v3TimeframeType:
      type: string
      enum:
        - TIMEFRAME_TYPE_UNSPECIFIED
        - TIMEFRAME_TYPE_UP_TO
      default: TIMEFRAME_TYPE_UNSPECIFIED
    v3TimestampRange:
      type: object
      properties:
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time
      description: This data structure represents a timestamp range
      title: TimestampRange
      required:
        - from
        - to
    v3TracingFilter:
      type: object
      properties:
        simpleFilter:
          $ref: '#/components/schemas/v3TracingSimpleFilter'
      description: Filter configuration for tracing-based alerts
      title: Tracing filter
      required:
        - filter_type
    v3TracingFilterOperationType:
      type: string
      enum:
        - TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED
        - TRACING_FILTER_OPERATION_TYPE_INCLUDES
        - TRACING_FILTER_OPERATION_TYPE_ENDS_WITH
        - TRACING_FILTER_OPERATION_TYPE_STARTS_WITH
        - TRACING_FILTER_OPERATION_TYPE_IS_NOT
      default: TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED
    v3TracingFilterType:
      type: object
      properties:
        values:
          type: array
          example:
            - value1
            - value2
          items:
            type: string
          description: The values of the label to filter by
          minItems: 1
        operation:
          $ref: '#/components/schemas/v3TracingFilterOperationType'
      description: Filter type for trace entries
      title: Tracing filter type
      required:
        - values
        - operation
    v3TracingImmediateType:
      type: object
      properties:
        tracingFilter:
          $ref: '#/components/schemas/v3TracingFilter'
        notificationPayloadFilter:
          type: array
          example:
            - obj.field
          items:
            type: string
            pattern: ^[a-zA-Z0-9_.]+$
          description: Notification payload field filter
      description: Configuration for immediate alerts triggered on trace entries
      title: Trace-based immediate alert type
      externalDocs:
        description: Learn more about trace-based alerts in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/traces/tracing-alerts/
      required:
        - tracingFilter
    v3TracingLabelFilters:
      type: object
      properties:
        applicationName:
          type: array
          items:
            $ref: '#/components/schemas/v3TracingFilterType'
          description: Filter by application names
        subsystemName:
          type: array
          items:
            $ref: '#/components/schemas/v3TracingFilterType'
          description: Filter by subsystem names
        serviceName:
          type: array
          items:
            $ref: '#/components/schemas/v3TracingFilterType'
          description: Filter by service names
        operationName:
          type: array
          items:
            $ref: '#/components/schemas/v3TracingFilterType'
          description: Filter by operation names
        spanFields:
          type: array
          items:
            $ref: '#/components/schemas/v3TracingSpanFieldsFilterType'
          description: Filter by span fields
      description: >-
        Filters for application name, subsystem name, service name, operation
        name and span fields
      title: Tracing label filters
    v3TracingSimpleFilter:
      type: object
      properties:
        tracingLabelFilters:
          $ref: '#/components/schemas/v3TracingLabelFilters'
        latencyThresholdMs:
          type: string
          format: uint64
          example: 1000
          description: The latency threshold to filter traces in milliseconds
          pattern: ^\d+$
      description: Basic filter configuration using a latency threshold and label filters
      title: Simple tracing filter
      required:
        - latencyThresholdMs
    v3TracingSpanFieldsFilterType:
      type: object
      properties:
        key:
          type: string
          example: span.field.key
          description: The key of the span field to filter by
          pattern: ^\w+\.\w+$
        filterType:
          $ref: '#/components/schemas/v3TracingFilterType'
      description: A filter for span fields in trace entries
      title: Tracing span fields filter type
      required:
        - key
        - filterType
    v3TracingThresholdCondition:
      type: object
      properties:
        spanAmount:
          type: number
          format: double
          example: 100
          description: The threshold value for the alert condition
          pattern: ^\d+?$
        timeWindow:
          $ref: '#/components/schemas/v3TracingTimeWindow'
        conditionType:
          $ref: '#/components/schemas/v3TracingThresholdConditionType'
      title: Trace-based alert threshold condition
      required:
        - spanAmount
        - timeWindow
        - conditionType
    v3TracingThresholdConditionType:
      type: string
      enum:
        - TRACING_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
      default: TRACING_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
    v3TracingThresholdRule:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/v3TracingThresholdCondition'
      description: A rule for trace-based threshold alerts
      title: Trace Threshold Rule
      required:
        - condition
    v3TracingThresholdType:
      type: object
      properties:
        tracingFilter:
          $ref: '#/components/schemas/v3TracingFilter'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/v3TracingThresholdRule'
          description: The rules for the trace threshold alert.
          maxItems: 1
          minItems: 1
        notificationPayloadFilter:
          type: array
          example:
            - obj.field
          items:
            type: string
            pattern: ^[a-zA-Z0-9_.]+$
          description: Notification payload field filter
      description: Configuration for alerts based on trace count thresholds
      title: Trace-based threshold alert type
      externalDocs:
        description: Learn more about trace-based alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/traces/tracing-alerts/
      required:
        - tracingFilter
        - rules
    v3TracingTimeWindow:
      type: object
      properties:
        tracingTimeWindowValue:
          $ref: '#/components/schemas/v3TracingTimeWindowValue'
      title: Tracing time window
      required:
        - type
    v3TracingTimeWindowValue:
      type: string
      enum:
        - TRACING_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED
        - TRACING_TIME_WINDOW_VALUE_MINUTES_10
        - TRACING_TIME_WINDOW_VALUE_MINUTES_15
        - TRACING_TIME_WINDOW_VALUE_MINUTES_20
        - TRACING_TIME_WINDOW_VALUE_MINUTES_30
        - TRACING_TIME_WINDOW_VALUE_HOUR_1
        - TRACING_TIME_WINDOW_VALUE_HOURS_2
        - TRACING_TIME_WINDOW_VALUE_HOURS_4
        - TRACING_TIME_WINDOW_VALUE_HOURS_6
        - TRACING_TIME_WINDOW_VALUE_HOURS_12
        - TRACING_TIME_WINDOW_VALUE_HOURS_24
        - TRACING_TIME_WINDOW_VALUE_HOURS_36
      default: TRACING_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED
    v3UpdateApiKeyRequestPermissions:
      type: object
      properties:
        permissions:
          type: array
          items:
            type: string
      description: This data structure represents a set of permissions on an API key.
      title: Permissions
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
      required:
        - permissions
    v3UpdateApiKeyResponse:
      type: object
    widgetsBarChart:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/widgetsBarChartQuery'
        maxBarsPerChart:
          type: integer
          format: int32
        groupNameTemplate:
          type: string
        stackDefinition:
          $ref: '#/components/schemas/widgetsBarChartStackDefinition'
        scaleType:
          $ref: '#/components/schemas/commonScaleType'
        colorsBy:
          $ref: '#/components/schemas/commonColorsBy'
        xAxis:
          $ref: '#/components/schemas/BarChartXAxis'
        unit:
          $ref: '#/components/schemas/widgetscommonUnit'
        sortBy:
          $ref: '#/components/schemas/commonSortByType'
        colorScheme:
          type: string
        dataModeType:
          $ref: '#/components/schemas/commonDataModeType'
        barValueDisplay:
          $ref: '#/components/schemas/widgetsBarValueDisplay'
        customUnit:
          type: string
        decimal:
          type: integer
          format: int32
        legend:
          $ref: '#/components/schemas/commonLegend'
        customLinks:
          type: array
          items:
            $ref: '#/components/schemas/commonCustomLink'
    widgetsBarChartDataprimeQuery:
      type: object
      properties:
        dataprimeQuery:
          $ref: '#/components/schemas/v1commonDataprimeQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterSource'
        groupNames:
          type: array
          items:
            type: string
        stackedGroupName:
          type: string
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsBarChartLogsQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        aggregation:
          $ref: '#/components/schemas/commonLogsAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterLogsFilter'
        groupNames:
          type: array
          items:
            type: string
        stackedGroupName:
          type: string
        groupNamesFields:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
        stackedGroupNameField:
          $ref: '#/components/schemas/commonObservationField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsBarChartMetricsQuery:
      type: object
      properties:
        promqlQuery:
          $ref: '#/components/schemas/astwidgetscommonPromQlQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterMetricsFilter'
        groupNames:
          type: array
          items:
            type: string
        stackedGroupName:
          type: string
        editorMode:
          $ref: '#/components/schemas/commonMetricsQueryEditorMode'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
        promqlQueryType:
          $ref: '#/components/schemas/commonPromQLQueryType'
        aggregation:
          $ref: '#/components/schemas/widgetscommonAggregation'
    widgetsBarChartQuery:
      type: object
      properties:
        logs:
          $ref: '#/components/schemas/widgetsBarChartLogsQuery'
        spans:
          $ref: '#/components/schemas/widgetsBarChartSpansQuery'
        metrics:
          $ref: '#/components/schemas/widgetsBarChartMetricsQuery'
        dataprime:
          $ref: '#/components/schemas/widgetsBarChartDataprimeQuery'
    widgetsBarChartSpansQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        aggregation:
          $ref: '#/components/schemas/commonSpansAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterSpansFilter'
        groupNames:
          type: array
          items:
            $ref: '#/components/schemas/commonSpanField'
        stackedGroupName:
          $ref: '#/components/schemas/commonSpanField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
        groupNamesFields:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
        stackedGroupNameField:
          $ref: '#/components/schemas/commonObservationField'
    widgetsBarChartStackDefinition:
      type: object
      properties:
        maxSlicesPerBar:
          type: integer
          format: int32
        stackNameTemplate:
          type: string
    widgetsBarValueDisplay:
      type: string
      enum:
        - BAR_VALUE_DISPLAY_UNSPECIFIED
        - BAR_VALUE_DISPLAY_TOP
        - BAR_VALUE_DISPLAY_INSIDE
        - BAR_VALUE_DISPLAY_BOTH
      default: BAR_VALUE_DISPLAY_UNSPECIFIED
    widgetsDataTable:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/widgetsDataTableQuery'
        resultsPerPage:
          type: integer
          format: int32
        rowStyle:
          $ref: '#/components/schemas/widgetsRowStyle'
        columns:
          type: array
          items:
            $ref: '#/components/schemas/DataTableColumn'
        orderBy:
          $ref: '#/components/schemas/commonOrderingField'
        customLinks:
          type: array
          items:
            $ref: '#/components/schemas/commonCustomLink'
        dataModeType:
          $ref: '#/components/schemas/commonDataModeType'
    widgetsDataTableDataprimeQuery:
      type: object
      properties:
        dataprimeQuery:
          $ref: '#/components/schemas/v1commonDataprimeQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterSource'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsDataTableLogsQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterLogsFilter'
        grouping:
          $ref: '#/components/schemas/DataTableLogsQueryGrouping'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsDataTableMetricsQuery:
      type: object
      properties:
        promqlQuery:
          $ref: '#/components/schemas/astwidgetscommonPromQlQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterMetricsFilter'
        editorMode:
          $ref: '#/components/schemas/commonMetricsQueryEditorMode'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
        promqlQueryType:
          $ref: '#/components/schemas/commonPromQLQueryType'
    widgetsDataTableQuery:
      type: object
      properties:
        logs:
          $ref: '#/components/schemas/widgetsDataTableLogsQuery'
        spans:
          $ref: '#/components/schemas/widgetsDataTableSpansQuery'
        metrics:
          $ref: '#/components/schemas/widgetsDataTableMetricsQuery'
        dataprime:
          $ref: '#/components/schemas/widgetsDataTableDataprimeQuery'
    widgetsDataTableSpansQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterSpansFilter'
        grouping:
          $ref: '#/components/schemas/DataTableSpansQueryGrouping'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsGauge:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/widgetsGaugeQuery'
        min:
          type: number
          format: double
        max:
          type: number
          format: double
        showInnerArc:
          type: boolean
        showOuterArc:
          type: boolean
        unit:
          $ref: '#/components/schemas/widgetsGaugeUnit'
        thresholds:
          type: array
          items:
            $ref: '#/components/schemas/widgetsGaugeThreshold'
        dataModeType:
          $ref: '#/components/schemas/commonDataModeType'
        thresholdBy:
          $ref: '#/components/schemas/widgetsGaugeThresholdBy'
        customUnit:
          type: string
        decimal:
          type: integer
          format: int32
        thresholdType:
          $ref: '#/components/schemas/commonThresholdType'
        legend:
          $ref: '#/components/schemas/commonLegend'
        legendBy:
          $ref: '#/components/schemas/commonLegendBy'
        displaySeriesName:
          type: boolean
        customLinks:
          type: array
          items:
            $ref: '#/components/schemas/commonCustomLink'
    widgetsGaugeAggregation:
      type: string
      enum:
        - AGGREGATION_UNSPECIFIED
        - AGGREGATION_LAST
        - AGGREGATION_MIN
        - AGGREGATION_MAX
        - AGGREGATION_AVG
        - AGGREGATION_SUM
      default: AGGREGATION_UNSPECIFIED
    widgetsGaugeDataprimeQuery:
      type: object
      properties:
        dataprimeQuery:
          $ref: '#/components/schemas/v1commonDataprimeQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterSource'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsGaugeLogsQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        logsAggregation:
          $ref: '#/components/schemas/commonLogsAggregation'
        aggregation:
          $ref: '#/components/schemas/widgetsGaugeAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterLogsFilter'
        groupBy:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsGaugeMetricsQuery:
      type: object
      properties:
        promqlQuery:
          $ref: '#/components/schemas/astwidgetscommonPromQlQuery'
        aggregation:
          $ref: '#/components/schemas/widgetsGaugeAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterMetricsFilter'
        editorMode:
          $ref: '#/components/schemas/commonMetricsQueryEditorMode'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
        promqlQueryType:
          $ref: '#/components/schemas/commonPromQLQueryType'
    widgetsGaugeQuery:
      type: object
      properties:
        metrics:
          $ref: '#/components/schemas/widgetsGaugeMetricsQuery'
        logs:
          $ref: '#/components/schemas/widgetsGaugeLogsQuery'
        spans:
          $ref: '#/components/schemas/widgetsGaugeSpansQuery'
        dataprime:
          $ref: '#/components/schemas/widgetsGaugeDataprimeQuery'
    widgetsGaugeSpansQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        spansAggregation:
          $ref: '#/components/schemas/commonSpansAggregation'
        aggregation:
          $ref: '#/components/schemas/widgetsGaugeAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterSpansFilter'
        groupBy:
          type: array
          items:
            $ref: '#/components/schemas/commonSpanField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
        groupBys:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
    widgetsGaugeThreshold:
      type: object
      properties:
        from:
          type: number
          format: double
        color:
          type: string
        label:
          type: string
    widgetsGaugeThresholdBy:
      type: string
      enum:
        - THRESHOLD_BY_UNSPECIFIED
        - THRESHOLD_BY_VALUE
        - THRESHOLD_BY_BACKGROUND
      default: THRESHOLD_BY_UNSPECIFIED
    widgetsGaugeUnit:
      type: string
      enum:
        - UNIT_UNSPECIFIED
        - UNIT_NUMBER
        - UNIT_PERCENT
        - UNIT_MICROSECONDS
        - UNIT_MILLISECONDS
        - UNIT_SECONDS
        - UNIT_BYTES
        - UNIT_KBYTES
        - UNIT_MBYTES
        - UNIT_GBYTES
        - UNIT_BYTES_IEC
        - UNIT_KIBYTES
        - UNIT_MIBYTES
        - UNIT_GIBYTES
        - UNIT_EUR_CENTS
        - UNIT_EUR
        - UNIT_USD_CENTS
        - UNIT_USD
        - UNIT_CUSTOM
        - UNIT_PERCENT_ZERO_ONE
        - UNIT_PERCENT_ZERO_HUNDRED
        - UNIT_NANOSECONDS
      default: UNIT_UNSPECIFIED
    widgetsHexagon:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/widgetsHexagonQuery'
        min:
          type: number
          format: double
        max:
          type: number
          format: double
        unit:
          $ref: '#/components/schemas/widgetscommonUnit'
        thresholds:
          type: array
          items:
            $ref: '#/components/schemas/widgetscommonThreshold'
        dataModeType:
          $ref: '#/components/schemas/commonDataModeType'
        customUnit:
          type: string
        decimal:
          type: integer
          format: int32
        thresholdType:
          $ref: '#/components/schemas/commonThresholdType'
        legend:
          $ref: '#/components/schemas/commonLegend'
        legendBy:
          $ref: '#/components/schemas/commonLegendBy'
        customLinks:
          type: array
          items:
            $ref: '#/components/schemas/commonCustomLink'
    widgetsHexagonDataprimeQuery:
      type: object
      properties:
        dataprimeQuery:
          $ref: '#/components/schemas/v1commonDataprimeQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterSource'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsHexagonLogsQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        logsAggregation:
          $ref: '#/components/schemas/commonLogsAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterLogsFilter'
        groupBy:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsHexagonMetricsQuery:
      type: object
      properties:
        promqlQuery:
          $ref: '#/components/schemas/astwidgetscommonPromQlQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterMetricsFilter'
        editorMode:
          $ref: '#/components/schemas/commonMetricsQueryEditorMode'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
        aggregation:
          $ref: '#/components/schemas/widgetscommonAggregation'
        promqlQueryType:
          $ref: '#/components/schemas/commonPromQLQueryType'
    widgetsHexagonQuery:
      type: object
      properties:
        metrics:
          $ref: '#/components/schemas/widgetsHexagonMetricsQuery'
        logs:
          $ref: '#/components/schemas/widgetsHexagonLogsQuery'
        spans:
          $ref: '#/components/schemas/widgetsHexagonSpansQuery'
        dataprime:
          $ref: '#/components/schemas/widgetsHexagonDataprimeQuery'
    widgetsHexagonSpansQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        spansAggregation:
          $ref: '#/components/schemas/commonSpansAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterSpansFilter'
        groupBy:
          type: array
          items:
            $ref: '#/components/schemas/commonSpanField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
        groupBys:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
    widgetsHorizontalBarChart:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/widgetsHorizontalBarChartQuery'
        maxBarsPerChart:
          type: integer
          format: int32
        groupNameTemplate:
          type: string
        stackDefinition:
          $ref: '#/components/schemas/widgetsHorizontalBarChartStackDefinition'
        scaleType:
          $ref: '#/components/schemas/commonScaleType'
        colorsBy:
          $ref: '#/components/schemas/commonColorsBy'
        unit:
          $ref: '#/components/schemas/widgetscommonUnit'
        displayOnBar:
          type: boolean
        yAxisViewBy:
          $ref: '#/components/schemas/HorizontalBarChartYAxisViewBy'
        sortBy:
          $ref: '#/components/schemas/commonSortByType'
        colorScheme:
          type: string
        dataModeType:
          $ref: '#/components/schemas/commonDataModeType'
        customUnit:
          type: string
        decimal:
          type: integer
          format: int32
        legend:
          $ref: '#/components/schemas/commonLegend'
        customLinks:
          type: array
          items:
            $ref: '#/components/schemas/commonCustomLink'
    widgetsHorizontalBarChartDataprimeQuery:
      type: object
      properties:
        dataprimeQuery:
          $ref: '#/components/schemas/v1commonDataprimeQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterSource'
        groupNames:
          type: array
          items:
            type: string
        stackedGroupName:
          type: string
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsHorizontalBarChartLogsQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        aggregation:
          $ref: '#/components/schemas/commonLogsAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterLogsFilter'
        groupNames:
          type: array
          items:
            type: string
        stackedGroupName:
          type: string
        groupNamesFields:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
        stackedGroupNameField:
          $ref: '#/components/schemas/commonObservationField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsHorizontalBarChartMetricsQuery:
      type: object
      properties:
        promqlQuery:
          $ref: '#/components/schemas/astwidgetscommonPromQlQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterMetricsFilter'
        groupNames:
          type: array
          items:
            type: string
        stackedGroupName:
          type: string
        editorMode:
          $ref: '#/components/schemas/commonMetricsQueryEditorMode'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
        promqlQueryType:
          $ref: '#/components/schemas/commonPromQLQueryType'
        aggregation:
          $ref: '#/components/schemas/widgetscommonAggregation'
    widgetsHorizontalBarChartQuery:
      type: object
      properties:
        logs:
          $ref: '#/components/schemas/widgetsHorizontalBarChartLogsQuery'
        spans:
          $ref: '#/components/schemas/widgetsHorizontalBarChartSpansQuery'
        metrics:
          $ref: '#/components/schemas/widgetsHorizontalBarChartMetricsQuery'
        dataprime:
          $ref: '#/components/schemas/widgetsHorizontalBarChartDataprimeQuery'
    widgetsHorizontalBarChartSpansQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        aggregation:
          $ref: '#/components/schemas/commonSpansAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterSpansFilter'
        groupNames:
          type: array
          items:
            $ref: '#/components/schemas/commonSpanField'
        stackedGroupName:
          $ref: '#/components/schemas/commonSpanField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
        groupNamesFields:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
        stackedGroupNameField:
          $ref: '#/components/schemas/commonObservationField'
    widgetsHorizontalBarChartStackDefinition:
      type: object
      properties:
        maxSlicesPerBar:
          type: integer
          format: int32
        stackNameTemplate:
          type: string
    widgetsLineChart:
      type: object
      properties:
        legend:
          $ref: '#/components/schemas/commonLegend'
        tooltip:
          $ref: '#/components/schemas/LineChartTooltip'
        queryDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/LineChartQueryDefinition'
        stackedLine:
          $ref: '#/components/schemas/LineChartStackedLine'
    widgetsLineChartDataprimeQuery:
      type: object
      properties:
        dataprimeQuery:
          $ref: '#/components/schemas/v1commonDataprimeQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterSource'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsLineChartLogsQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        groupBy:
          type: array
          items:
            type: string
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/commonLogsAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterLogsFilter'
        groupBys:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsLineChartMetricsQuery:
      type: object
      properties:
        promqlQuery:
          $ref: '#/components/schemas/astwidgetscommonPromQlQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterMetricsFilter'
        editorMode:
          $ref: '#/components/schemas/commonMetricsQueryEditorMode'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsLineChartQuery:
      type: object
      properties:
        logs:
          $ref: '#/components/schemas/widgetsLineChartLogsQuery'
        metrics:
          $ref: '#/components/schemas/widgetsLineChartMetricsQuery'
        spans:
          $ref: '#/components/schemas/widgetsLineChartSpansQuery'
        dataprime:
          $ref: '#/components/schemas/widgetsLineChartDataprimeQuery'
    widgetsLineChartResolution:
      type: object
      properties:
        interval:
          type: string
        bucketsPresented:
          type: integer
          format: int32
    widgetsLineChartSpansQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        groupBy:
          type: array
          items:
            $ref: '#/components/schemas/commonSpanField'
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/commonSpansAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterSpansFilter'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
        groupBys:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
    widgetsMarkdown:
      type: object
      properties:
        markdownText:
          type: string
        tooltipText:
          type: string
    widgetsPieChart:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/widgetsPieChartQuery'
        maxSlicesPerChart:
          type: integer
          format: int32
        minSlicePercentage:
          type: integer
          format: int32
        stackDefinition:
          $ref: '#/components/schemas/widgetsPieChartStackDefinition'
        labelDefinition:
          $ref: '#/components/schemas/PieChartLabelDefinition'
        showLegend:
          type: boolean
        groupNameTemplate:
          type: string
        unit:
          $ref: '#/components/schemas/widgetscommonUnit'
        colorScheme:
          type: string
        dataModeType:
          $ref: '#/components/schemas/commonDataModeType'
        customUnit:
          type: string
        decimal:
          type: integer
          format: int32
        legend:
          $ref: '#/components/schemas/commonLegend'
        customLinks:
          type: array
          items:
            $ref: '#/components/schemas/commonCustomLink'
    widgetsPieChartDataprimeQuery:
      type: object
      properties:
        dataprimeQuery:
          $ref: '#/components/schemas/v1commonDataprimeQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterSource'
        groupNames:
          type: array
          items:
            type: string
        stackedGroupName:
          type: string
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsPieChartLogsQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        aggregation:
          $ref: '#/components/schemas/commonLogsAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/astFilterLogsFilter'
        groupNames:
          type: array
          items:
            type: string
        stackedGroupName:
          type: string
        groupNamesFields:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
        stackedGroupNameField:
          $ref: '#/components/schemas/commonObservationField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
    widgetsPieChartMetricsQuery:
      type: object
      properties:
        promqlQuery:
          $ref: '#/components/schemas/astwidgetscommonPromQlQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterMetricsFilter'
        groupNames:
          type: array
          items:
            type: string
        stackedGroupName:
          type: string
        editorMode:
          $ref: '#/components/schemas/commonMetricsQueryEditorMode'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
        promqlQueryType:
          $ref: '#/components/schemas/commonPromQLQueryType'
        aggregation:
          $ref: '#/components/schemas/widgetscommonAggregation'
    widgetsPieChartQuery:
      type: object
      properties:
        logs:
          $ref: '#/components/schemas/widgetsPieChartLogsQuery'
        spans:
          $ref: '#/components/schemas/widgetsPieChartSpansQuery'
        metrics:
          $ref: '#/components/schemas/widgetsPieChartMetricsQuery'
        dataprime:
          $ref: '#/components/schemas/widgetsPieChartDataprimeQuery'
    widgetsPieChartSpansQuery:
      type: object
      properties:
        luceneQuery:
          $ref: '#/components/schemas/astwidgetscommonLuceneQuery'
        aggregation:
          $ref: '#/components/schemas/commonSpansAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterSpansFilter'
        groupNames:
          type: array
          items:
            $ref: '#/components/schemas/commonSpanField'
        stackedGroupName:
          $ref: '#/components/schemas/commonSpanField'
        timeFrame:
          $ref: '#/components/schemas/commonTimeFrameSelect'
        groupNamesFields:
          type: array
          items:
            $ref: '#/components/schemas/commonObservationField'
        stackedGroupNameField:
          $ref: '#/components/schemas/commonObservationField'
    widgetsPieChartStackDefinition:
      type: object
      properties:
        maxSlicesPerStack:
          type: integer
          format: int32
        stackNameTemplate:
          type: string
    widgetsRowStyle:
      type: string
      enum:
        - ROW_STYLE_UNSPECIFIED
        - ROW_STYLE_ONE_LINE
        - ROW_STYLE_TWO_LINE
        - ROW_STYLE_CONDENSED
        - ROW_STYLE_JSON
        - ROW_STYLE_LIST
      default: ROW_STYLE_UNSPECIFIED
    widgetscommonAggregation:
      type: string
      enum:
        - AGGREGATION_UNSPECIFIED
        - AGGREGATION_LAST
        - AGGREGATION_MIN
        - AGGREGATION_MAX
        - AGGREGATION_AVG
        - AGGREGATION_SUM
      default: AGGREGATION_UNSPECIFIED
    widgetscommonThreshold:
      type: object
      properties:
        from:
          type: number
          format: double
        color:
          type: string
        label:
          type: string
    widgetscommonUnit:
      type: string
      enum:
        - UNIT_UNSPECIFIED
        - UNIT_MICROSECONDS
        - UNIT_MILLISECONDS
        - UNIT_SECONDS
        - UNIT_BYTES
        - UNIT_KBYTES
        - UNIT_MBYTES
        - UNIT_GBYTES
        - UNIT_BYTES_IEC
        - UNIT_KIBYTES
        - UNIT_MIBYTES
        - UNIT_GIBYTES
        - UNIT_EUR_CENTS
        - UNIT_EUR
        - UNIT_USD_CENTS
        - UNIT_USD
        - UNIT_NANOSECONDS
        - UNIT_CUSTOM
        - UNIT_PERCENT_ZERO_ONE
        - UNIT_PERCENT_ZERO_HUNDRED
        - UNIT_PERCENT
      default: UNIT_UNSPECIFIED
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: API key authentication
servers:
  - url: https://api.coralogix.com/mgmt/openapi
  - url: https://api.eu2.coralogix.com/mgmt/openapi
  - url: https://api.coralogix.us/mgmt/openapi
  - url: https://api.cx498.coralogix.com/mgmt/openapi
  - url: https://api.coralogix.in/mgmt/openapi
  - url: https://api.coralogixsg.com/mgmt/openapi
  - url: https://api.ap3.coralogix.com/mgmt/openapi
security:
  - apiKeyAuth: []
