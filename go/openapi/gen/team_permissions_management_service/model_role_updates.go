/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team_permissions_management_service

import (
	"encoding/json"
)

// checks if the RoleUpdates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleUpdates{}

// RoleUpdates This data structure represents the information associated with an API key.
type RoleUpdates struct {
	RoleIds []RoleId `json:"roleIds,omitempty"`
}

// NewRoleUpdates instantiates a new RoleUpdates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleUpdates() *RoleUpdates {
	this := RoleUpdates{}
	return &this
}

// NewRoleUpdatesWithDefaults instantiates a new RoleUpdates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleUpdatesWithDefaults() *RoleUpdates {
	this := RoleUpdates{}
	return &this
}

// GetRoleIds returns the RoleIds field value if set, zero value otherwise.
func (o *RoleUpdates) GetRoleIds() []RoleId {
	if o == nil || IsNil(o.RoleIds) {
		var ret []RoleId
		return ret
	}
	return o.RoleIds
}

// GetRoleIdsOk returns a tuple with the RoleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleUpdates) GetRoleIdsOk() ([]RoleId, bool) {
	if o == nil || IsNil(o.RoleIds) {
		return nil, false
	}
	return o.RoleIds, true
}

// HasRoleIds returns a boolean if a field has been set.
func (o *RoleUpdates) HasRoleIds() bool {
	if o != nil && !IsNil(o.RoleIds) {
		return true
	}

	return false
}

// SetRoleIds gets a reference to the given []RoleId and assigns it to the RoleIds field.
func (o *RoleUpdates) SetRoleIds(v []RoleId) {
	o.RoleIds = v
}

func (o RoleUpdates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleUpdates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoleIds) {
		toSerialize["roleIds"] = o.RoleIds
	}
	return toSerialize, nil
}

type NullableRoleUpdates struct {
	value *RoleUpdates
	isSet bool
}

func (v NullableRoleUpdates) Get() *RoleUpdates {
	return v.value
}

func (v *NullableRoleUpdates) Set(val *RoleUpdates) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleUpdates) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleUpdates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleUpdates(val *RoleUpdates) *NullableRoleUpdates {
	return &NullableRoleUpdates{value: val, isSet: true}
}

func (v NullableRoleUpdates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleUpdates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


