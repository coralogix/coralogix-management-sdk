openapi: 3.0.0
info:
  title: ""
  version: 1.0.0
servers:
- url: /
paths:
  /aaa/team-groups/v1:
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: TeamPermissionsMgmtService_GetTeamGroups
      parameters:
      - explode: true
        in: query
        name: team_id
        required: false
        schema:
          $ref: "#/components/schemas/TeamPermissionsMgmtService_GetTeamGroups_team_id_parameter"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTeamGroupsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get Team Groups
      tags:
      - Team Permissions Management Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1?team_id=SOME_OBJECT_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1"

          querystring = {"team_id":"SOME_OBJECT_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1?team_id=SOME_OBJECT_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
    post:
      description: No description available
      externalDocs:
        url: ""
      operationId: TeamPermissionsMgmtService_CreateTeamGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTeamGroupRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTeamGroupResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Create Team Group
      tags:
      - Team Permissions Management Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1';

          let options = {
            method: 'POST',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"description":"string","externalId":"string","groupType":"GROUP_TYPE_UNSPECIFIED","name":"string","nextGenScopeId":"string","roleIds":[{"id":0}],"scopeFilters":{"applications":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}],"subsystems":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}]},"teamId":{"id":0},"userIds":[{"id":"string"}]}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1"

          payload = {
              "description": "string",
              "externalId": "string",
              "groupType": "GROUP_TYPE_UNSPECIFIED",
              "name": "string",
              "nextGenScopeId": "string",
              "roleIds": [{"id": 0}],
              "scopeFilters": {
                  "applications": [
                      {
                          "filterType": "FILTER_TYPE_UNSPECIFIED",
                          "term": "string"
                      }
                  ],
                  "subsystems": [
                      {
                          "filterType": "FILTER_TYPE_UNSPECIFIED",
                          "term": "string"
                      }
                  ]
              },
              "teamId": {"id": 0},
              "userIds": [{"id": "string"}]
          }
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1 \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"description":"string","externalId":"string","groupType":"GROUP_TYPE_UNSPECIFIED","name":"string","nextGenScopeId":"string","roleIds":[{"id":0}],"scopeFilters":{"applications":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}],"subsystems":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}]},"teamId":{"id":0},"userIds":[{"id":"string"}]}'
    put:
      description: No description available
      externalDocs:
        url: ""
      operationId: TeamPermissionsMgmtService_UpdateTeamGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTeamGroupRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateTeamGroupResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Update Team Group
      tags:
      - Team Permissions Management Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1';

          let options = {
            method: 'PUT',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"description":"string","externalId":"string","groupId":{"id":0},"groupType":"GROUP_TYPE_UNSPECIFIED","name":"string","nextGenScopeId":"string","roleUpdates":{"roleIds":[{"id":0}]},"scopeFilters":{"applications":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}],"subsystems":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}]},"userUpdates":{"userIds":[{"id":"string"}]}}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1"

          payload = {
              "description": "string",
              "externalId": "string",
              "groupId": {"id": 0},
              "groupType": "GROUP_TYPE_UNSPECIFIED",
              "name": "string",
              "nextGenScopeId": "string",
              "roleUpdates": {"roleIds": [{"id": 0}]},
              "scopeFilters": {
                  "applications": [
                      {
                          "filterType": "FILTER_TYPE_UNSPECIFIED",
                          "term": "string"
                      }
                  ],
                  "subsystems": [
                      {
                          "filterType": "FILTER_TYPE_UNSPECIFIED",
                          "term": "string"
                      }
                  ]
              },
              "userUpdates": {"userIds": [{"id": "string"}]}
          }
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("PUT", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1 \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"description":"string","externalId":"string","groupId":{"id":0},"groupType":"GROUP_TYPE_UNSPECIFIED","name":"string","nextGenScopeId":"string","roleUpdates":{"roleIds":[{"id":0}]},"scopeFilters":{"applications":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}],"subsystems":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}]},"userUpdates":{"userIds":[{"id":"string"}]}}'
  /aaa/team-groups/v1/users:
    delete:
      description: No description available
      externalDocs:
        url: ""
      operationId: TeamPermissionsMgmtService_RemoveUsersFromTeamGroups
      parameters:
      - explode: true
        in: query
        name: team_id
        required: false
        schema:
          $ref: "#/components/schemas/TeamPermissionsMgmtService_GetTeamGroups_team_id_parameter"
        style: form
      - explode: true
        in: query
        name: remove_users_from_group
        required: false
        schema:
          items:
            $ref: "#/components/schemas/RemoveUsersFromTeamGroup"
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoveUsersFromTeamGroupsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Remove Users From Team Groups
      tags:
      - Team Permissions Management Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/users?team_id=SOME_OBJECT_VALUE&remove_users_from_group=SOME_ARRAY_VALUE';

          let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/users"

          querystring = {"team_id":"SOME_OBJECT_VALUE","remove_users_from_group":"SOME_ARRAY_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("DELETE", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/users?team_id=SOME_OBJECT_VALUE&remove_users_from_group=SOME_ARRAY_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
    post:
      description: No description available
      externalDocs:
        url: ""
      operationId: TeamPermissionsMgmtService_AddUsersToTeamGroups
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUsersToTeamGroupsRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddUsersToTeamGroupsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Add Users To Team Groups
      tags:
      - Team Permissions Management Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/users';

          let options = {
            method: 'POST',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"addUsersToGroup":[{"groupId":{"id":0},"userIds":[{"id":"string"}]}],"teamId":{"id":0}}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/users"

          payload = {
              "addUsersToGroup": [
                  {
                      "groupId": {"id": 0},
                      "userIds": [{"id": "string"}]
                  }
              ],
              "teamId": {"id": 0}
          }
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/users \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"addUsersToGroup":[{"groupId":{"id":0},"userIds":[{"id":"string"}]}],"teamId":{"id":0}}'
  /aaa/team-groups/v1/{group_id.id}:
    delete:
      description: No description available
      externalDocs:
        url: ""
      operationId: TeamPermissionsMgmtService_DeleteTeamGroup
      parameters:
      - explode: false
        in: path
        name: group_id.id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteTeamGroupResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete Team Group
      tags:
      - Team Permissions Management Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D';

          let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("DELETE", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D \
            --header 'Authorization: Bearer <API_KEY>'
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: TeamPermissionsMgmtService_GetTeamGroup
      parameters:
      - explode: false
        in: path
        name: group_id.id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTeamGroupResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get Team Group
      tags:
      - Team Permissions Management Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D \
            --header 'Authorization: Bearer <API_KEY>'
  /aaa/team-groups/v1/{group_id.id}/users:
    delete:
      description: No description available
      externalDocs:
        url: ""
      operationId: TeamPermissionsMgmtService_RemoveUsersFromTeamGroup
      parameters:
      - explode: false
        in: path
        name: group_id.id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - explode: true
        in: query
        name: user_ids
        required: false
        schema:
          items:
            $ref: "#/components/schemas/TeamPermissionsMgmtService_RemoveUsersFromTeamGroup_user_ids_parameter_inner"
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoveUsersFromTeamGroupResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Remove Users From Team Group
      tags:
      - Team Permissions Management Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D/users?user_ids=SOME_ARRAY_VALUE';

          let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D/users"

          querystring = {"user_ids":"SOME_ARRAY_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("DELETE", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D/users?user_ids=SOME_ARRAY_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: TeamPermissionsMgmtService_GetGroupUsers
      parameters:
      - explode: false
        in: path
        name: group_id.id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - explode: true
        in: query
        name: page_size
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGroupUsersResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get Group Users
      tags:
      - Team Permissions Management Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D/users?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D/users"

          querystring = {"page_size":"SOME_INTEGER_VALUE","page_token":"SOME_STRING_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D/users?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
    post:
      description: No description available
      externalDocs:
        url: ""
      operationId: TeamPermissionsMgmtService_AddUsersToTeamGroup
      parameters:
      - explode: false
        in: path
        name: group_id.id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUsersToTeamGroupRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddUsersToTeamGroupResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Add Users To Team Group
      tags:
      - Team Permissions Management Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D/users';

          let options = {
            method: 'POST',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"userIds":[{"id":"string"}]}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D/users"

          payload = {"userIds": [{"id": "string"}]}
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D/users \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"userIds":[{"id":"string"}]}'
  /aaa/team-groups/v1/{name}:
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: TeamPermissionsMgmtService_GetTeamGroupByName
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTeamGroupByNameResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get Team Group By Name
      tags:
      - Team Permissions Management Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bname%7D';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bname%7D"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bname%7D \
            --header 'Authorization: Bearer <API_KEY>'
  /v1/teams/groups/{group_id.id}/scope:
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: TeamPermissionsMgmtService_GetTeamGroupScope
      parameters:
      - explode: false
        in: path
        name: group_id.id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTeamGroupScopeResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get Team Group Scope
      tags:
      - Team Permissions Management Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7Bgroup_id.id%7D/scope';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7Bgroup_id.id%7D/scope"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7Bgroup_id.id%7D/scope \
            --header 'Authorization: Bearer <API_KEY>'
    post:
      description: No description available
      externalDocs:
        url: ""
      operationId: TeamPermissionsMgmtService_SetTeamGroupScope
      parameters:
      - explode: false
        in: path
        name: group_id.id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetTeamGroupScopeRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetTeamGroupScopeResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Set Team Group Scope
      tags:
      - Team Permissions Management Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7Bgroup_id.id%7D/scope';

          let options = {
            method: 'POST',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"scopeFilters":{"applications":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}],"subsystems":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}]}}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7Bgroup_id.id%7D/scope"

          payload = {"scopeFilters": {
                  "applications": [
                      {
                          "filterType": "FILTER_TYPE_UNSPECIFIED",
                          "term": "string"
                      }
                  ],
                  "subsystems": [
                      {
                          "filterType": "FILTER_TYPE_UNSPECIFIED",
                          "term": "string"
                      }
                  ]
              }}
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7Bgroup_id.id%7D/scope \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"scopeFilters":{"applications":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}],"subsystems":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}]}}'
components:
  schemas:
    AddUsersToTeamGroup:
      description: This data structure represents the information associated with
        an API key.
      example:
        groupId:
          id: 0
        userIds:
        - id: id
        - id: id
      externalDocs:
        description: Find out more about groups
        url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
      properties:
        groupId:
          $ref: "#/components/schemas/TeamGroupId"
        userIds:
          items:
            $ref: "#/components/schemas/v1.UserId"
          type: array
      title: AddUsersToTeamGroup
      type: object
    AddUsersToTeamGroupResponse:
      description: Response confirming the successful addition of users to the specified
        team group.
      example:
        teamId:
          id: 5
      externalDocs:
        description: Find out more about groups
        url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
      properties:
        teamId:
          $ref: "#/components/schemas/permissions.v1.TeamId"
      title: AddUsersToTeamGroupResponse
      type: object
    AddUsersToTeamGroupsResponse:
      description: Response confirming the successful bulk addition of users to multiple
        team groups.
      externalDocs:
        description: Find out more about groups
        url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
      title: AddUsersToTeamGroupsResponse
      type: object
    CreateTeamGroupResponse:
      description: Response containing the unique identifier of the newly created
        team group.
      example:
        groupId:
          id: 0
      externalDocs:
        description: Find out more about groups
        url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
      properties:
        groupId:
          $ref: "#/components/schemas/TeamGroupId"
      title: CreateTeamGroupResponse
      type: object
    DeleteTeamGroupResponse:
      description: Response confirming the successful deletion of a team group and
        its associated configurations.
      externalDocs:
        description: Find out more about groups
        url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
      title: DeleteTeamGroupResponse
      type: object
    FieldGroup:
      properties:
        name:
          type: string
        value:
          type: string
      type: object
    FilterPathAndValues:
      oneOf:
      - $ref: "#/components/schemas/FilterPathAndValues_1"
      - $ref: "#/components/schemas/FilterPathAndValues_2"
    FilterType:
      enum:
      - FILTER_TYPE_UNSPECIFIED
      - FILTER_TYPE_STARTS_WITH
      - FILTER_TYPE_ENDS_WITH
      - FILTER_TYPE_CONTAINS
      - FILTER_TYPE_EXACT
      type: string
    Filters:
      description: This data structure represents a filter
      externalDocs:
        url: ""
      properties:
        operator:
          $ref: "#/components/schemas/v3.FilterOperator"
        pathAndValues:
          items:
            $ref: "#/components/schemas/FilterPathAndValues"
          type: array
      required:
      - pathAndValues
      title: Filters
      type: object
    GetGroupUsersResponse:
      oneOf:
      - $ref: "#/components/schemas/GetGroupUsersResponse_1"
      - $ref: "#/components/schemas/GetGroupUsersResponse_2"
    GetTeamGroupByNameResponse:
      description: "Response containing the complete details of a team group that\
        \ matches the requested name, including its members, roles, and scope settings."
      example:
        group:
          createdAt: 2000-01-23T04:56:07.000+00:00
          groupType: GROUP_TYPE_UNSPECIFIED
          groupId:
            id: 0
          roles:
          - roleId:
              id: 6
            name: name
            description: description
          - roleId:
              id: 6
            name: name
            description: description
          scope:
            filters:
              subsystems:
              - term: term
                filterType: FILTER_TYPE_UNSPECIFIED
              - term: term
                filterType: FILTER_TYPE_UNSPECIFIED
              applications:
              - term: term
                filterType: FILTER_TYPE_UNSPECIFIED
              - term: term
                filterType: FILTER_TYPE_UNSPECIFIED
            id:
              id: 1
          teamId:
            id: 5
          name: name
          description: description
          externalId: externalId
          groupOrigin: GROUP_ORIGIN_UNSPECIFIED
          nextGenScopeId: nextGenScopeId
          updatedAt: 2000-01-23T04:56:07.000+00:00
      externalDocs:
        description: Find out more about groups
        url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
      properties:
        group:
          $ref: "#/components/schemas/TeamGroup"
      title: GetTeamGroupByNameResponse
      type: object
    GetTeamGroupResponse:
      description: "Response containing the complete details of a requested team group,\
        \ including its members, assigned roles, and scope configuration."
      example:
        group:
          createdAt: 2000-01-23T04:56:07.000+00:00
          groupType: GROUP_TYPE_UNSPECIFIED
          groupId:
            id: 0
          roles:
          - roleId:
              id: 6
            name: name
            description: description
          - roleId:
              id: 6
            name: name
            description: description
          scope:
            filters:
              subsystems:
              - term: term
                filterType: FILTER_TYPE_UNSPECIFIED
              - term: term
                filterType: FILTER_TYPE_UNSPECIFIED
              applications:
              - term: term
                filterType: FILTER_TYPE_UNSPECIFIED
              - term: term
                filterType: FILTER_TYPE_UNSPECIFIED
            id:
              id: 1
          teamId:
            id: 5
          name: name
          description: description
          externalId: externalId
          groupOrigin: GROUP_ORIGIN_UNSPECIFIED
          nextGenScopeId: nextGenScopeId
          updatedAt: 2000-01-23T04:56:07.000+00:00
      externalDocs:
        description: Find out more about groups
        url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
      properties:
        group:
          $ref: "#/components/schemas/TeamGroup"
      title: GetTeamGroupResponse
      type: object
    GetTeamGroupScopeResponse:
      additionalProperties: false
      description: Response message containing the optional scope configuration (filters
        for subsystems and applications) for a team group
      example:
        scope:
          filters:
            subsystems:
            - term: term
              filterType: FILTER_TYPE_UNSPECIFIED
            - term: term
              filterType: FILTER_TYPE_UNSPECIFIED
            applications:
            - term: term
              filterType: FILTER_TYPE_UNSPECIFIED
            - term: term
              filterType: FILTER_TYPE_UNSPECIFIED
          id:
            id: 1
      externalDocs:
        description: Find out more about groups
        url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
      properties:
        scope:
          $ref: "#/components/schemas/permissions.v1.Scope"
      title: GetTeamGroupScopeResponse
      type: object
    GetTeamGroupsResponse:
      description: "Response containing a list of all team groups and their complete\
        \ details, including members, roles, and scope configurations."
      example:
        groups:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          groupType: GROUP_TYPE_UNSPECIFIED
          groupId:
            id: 0
          roles:
          - roleId:
              id: 6
            name: name
            description: description
          - roleId:
              id: 6
            name: name
            description: description
          scope:
            filters:
              subsystems:
              - term: term
                filterType: FILTER_TYPE_UNSPECIFIED
              - term: term
                filterType: FILTER_TYPE_UNSPECIFIED
              applications:
              - term: term
                filterType: FILTER_TYPE_UNSPECIFIED
              - term: term
                filterType: FILTER_TYPE_UNSPECIFIED
            id:
              id: 1
          teamId:
            id: 5
          name: name
          description: description
          externalId: externalId
          groupOrigin: GROUP_ORIGIN_UNSPECIFIED
          nextGenScopeId: nextGenScopeId
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          groupType: GROUP_TYPE_UNSPECIFIED
          groupId:
            id: 0
          roles:
          - roleId:
              id: 6
            name: name
            description: description
          - roleId:
              id: 6
            name: name
            description: description
          scope:
            filters:
              subsystems:
              - term: term
                filterType: FILTER_TYPE_UNSPECIFIED
              - term: term
                filterType: FILTER_TYPE_UNSPECIFIED
              applications:
              - term: term
                filterType: FILTER_TYPE_UNSPECIFIED
              - term: term
                filterType: FILTER_TYPE_UNSPECIFIED
            id:
              id: 1
          teamId:
            id: 5
          name: name
          description: description
          externalId: externalId
          groupOrigin: GROUP_ORIGIN_UNSPECIFIED
          nextGenScopeId: nextGenScopeId
          updatedAt: 2000-01-23T04:56:07.000+00:00
      externalDocs:
        description: Find out more about groups
        url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
      properties:
        groups:
          items:
            $ref: "#/components/schemas/TeamGroup"
          type: array
      title: GetTeamGroupsResponse
      type: object
    GroupOrigin:
      enum:
      - GROUP_ORIGIN_UNSPECIFIED
      - GROUP_ORIGIN_BUILT_IN
      - GROUP_ORIGIN_USER_DEFINED
      type: string
    GroupType:
      enum:
      - GROUP_TYPE_UNSPECIFIED
      - GROUP_TYPE_OPEN
      - GROUP_TYPE_CLOSED
      - GROUP_TYPE_RESTRICTED
      type: string
    MultipleValues:
      properties:
        matcher:
          $ref: "#/components/schemas/events.v3.FilterMatcher"
        values:
          items:
            type: string
          type: array
      type: object
    NextPageToken:
      description: This data structure represents the information associated with
        an API key.
      externalDocs:
        description: Find out more about groups
        url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
      properties:
        nextPageToken:
          type: string
      title: NextPageToken
      type: object
    NoMorePages:
      description: This data structure represents the information associated with
        an API key.
      externalDocs:
        description: Find out more about groups
        url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
      title: NoMorePages
      type: object
    RemoveUsersFromTeamGroupResponse:
      description: Response confirming the successful removal of users from the specified
        team group.
      externalDocs:
        description: Find out more about groups
        url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
      title: RemoveUsersFromTeamGroupResponse
      type: object
    RemoveUsersFromTeamGroupsResponse:
      description: Response confirming the successful bulk removal of users from multiple
        team groups.
      externalDocs:
        description: Find out more about groups
        url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
      title: RemoveUsersFromTeamGroupsResponse
      type: object
    Role:
      example:
        roleId:
          id: 6
        name: name
        description: description
      properties:
        description:
          type: string
        name:
          type: string
        roleId:
          $ref: "#/components/schemas/RoleId"
      type: object
    RoleId:
      example:
        id: 6
      properties:
        id:
          format: int64
          type: integer
      type: object
    RoleUpdates:
      description: This data structure represents the information associated with
        an API key.
      example:
        roleIds:
        - id: 6
        - id: 6
      externalDocs:
        description: Find out more about groups
        url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
      properties:
        roleIds:
          items:
            $ref: "#/components/schemas/RoleId"
          type: array
      title: RoleUpdates
      type: object
    ScopeFilter:
      example:
        term: term
        filterType: FILTER_TYPE_UNSPECIFIED
      properties:
        filterType:
          $ref: "#/components/schemas/FilterType"
        term:
          type: string
      type: object
    ScopeFilters:
      example:
        subsystems:
        - term: term
          filterType: FILTER_TYPE_UNSPECIFIED
        - term: term
          filterType: FILTER_TYPE_UNSPECIFIED
        applications:
        - term: term
          filterType: FILTER_TYPE_UNSPECIFIED
        - term: term
          filterType: FILTER_TYPE_UNSPECIFIED
      properties:
        applications:
          items:
            $ref: "#/components/schemas/ScopeFilter"
          type: array
        subsystems:
          items:
            $ref: "#/components/schemas/ScopeFilter"
          type: array
      type: object
    ScopeId:
      example:
        id: 1
      properties:
        id:
          format: int64
          type: integer
      type: object
    SetTeamGroupScopeResponse:
      description: Response message containing the ID of the newly created or updated
        scope for a team group
      example:
        scopeId:
          id: 1
      externalDocs:
        description: Find out more about groups
        url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
      properties:
        scopeId:
          $ref: "#/components/schemas/ScopeId"
      title: SetTeamGroupScopeResponse
      type: object
    TeamGroup:
      additionalProperties: false
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        groupType: GROUP_TYPE_UNSPECIFIED
        groupId:
          id: 0
        roles:
        - roleId:
            id: 6
          name: name
          description: description
        - roleId:
            id: 6
          name: name
          description: description
        scope:
          filters:
            subsystems:
            - term: term
              filterType: FILTER_TYPE_UNSPECIFIED
            - term: term
              filterType: FILTER_TYPE_UNSPECIFIED
            applications:
            - term: term
              filterType: FILTER_TYPE_UNSPECIFIED
            - term: term
              filterType: FILTER_TYPE_UNSPECIFIED
          id:
            id: 1
        teamId:
          id: 5
        name: name
        description: description
        externalId: externalId
        groupOrigin: GROUP_ORIGIN_UNSPECIFIED
        nextGenScopeId: nextGenScopeId
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        externalId:
          type: string
        groupId:
          $ref: "#/components/schemas/TeamGroupId"
        groupOrigin:
          $ref: "#/components/schemas/GroupOrigin"
        groupType:
          $ref: "#/components/schemas/GroupType"
        name:
          type: string
        nextGenScopeId:
          type: string
        roles:
          items:
            $ref: "#/components/schemas/Role"
          type: array
        scope:
          $ref: "#/components/schemas/permissions.v1.Scope"
        teamId:
          $ref: "#/components/schemas/permissions.v1.TeamId"
        updatedAt:
          format: date-time
          type: string
      type: object
    TeamGroupId:
      description: This data structure represents the information associated with
        a team group.
      example:
        id: 0
      externalDocs:
        description: Find out more about groups
        url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
      properties:
        id:
          format: int64
          type: integer
      title: TeamGroupId
      type: object
    UpdateTeamGroupResponse:
      description: Response confirming the successful update of a team group's configuration.
      externalDocs:
        description: Find out more about groups
        url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
      title: UpdateTeamGroupResponse
      type: object
    UserStatus:
      enum:
      - USER_STATUS_UNSPECIFIED
      - USER_STATUS_ACTIVE
      - USER_STATUS_INACTIVE
      type: string
    UserUpdates:
      description: This data structure represents the information associated with
        an API key.
      example:
        userIds:
        - id: id
        - id: id
      externalDocs:
        description: Find out more about groups
        url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
      properties:
        userIds:
          items:
            $ref: "#/components/schemas/v1.UserId"
          type: array
      title: UserUpdates
      type: object
    common.Group:
      properties:
        field:
          $ref: "#/components/schemas/FieldGroup"
        groups:
          items:
            $ref: "#/components/schemas/common.Group"
          type: array
        value:
          format: double
          type: number
      type: object
    events.v3.FilterMatcher:
      enum:
      - FILTER_MATCHER_TEXT_OR_UNSPECIFIED
      - FILTER_MATCHER_REGEXP
      type: string
    permissions.v1.Scope:
      example:
        filters:
          subsystems:
          - term: term
            filterType: FILTER_TYPE_UNSPECIFIED
          - term: term
            filterType: FILTER_TYPE_UNSPECIFIED
          applications:
          - term: term
            filterType: FILTER_TYPE_UNSPECIFIED
          - term: term
            filterType: FILTER_TYPE_UNSPECIFIED
        id:
          id: 1
      properties:
        filters:
          $ref: "#/components/schemas/ScopeFilters"
        id:
          $ref: "#/components/schemas/ScopeId"
      type: object
    permissions.v1.TeamId:
      example:
        id: 5
      properties:
        id:
          format: int64
          type: integer
      type: object
    v1.User:
      example:
        firstName: firstName
        lastName: lastName
        userAccountId:
          id: 0
        userId:
          id: id
        status: USER_STATUS_UNSPECIFIED
        username: username
      properties:
        firstName:
          type: string
        lastName:
          type: string
        status:
          $ref: "#/components/schemas/UserStatus"
        userAccountId:
          $ref: "#/components/schemas/v1.UserAccountId"
        userId:
          $ref: "#/components/schemas/v1.UserId"
        username:
          type: string
      type: object
    v1.UserAccountId:
      example:
        id: 0
      properties:
        id:
          format: int64
          type: integer
      type: object
    v1.UserId:
      example:
        id: id
      properties:
        id:
          type: string
      type: object
    v3.FilterOperator:
      enum:
      - FILTER_OPERATOR_AND_OR_UNSPECIFIED
      - FILTER_OPERATOR_OR
      type: string
    TeamPermissionsMgmtService_GetTeamGroups_team_id_parameter:
      properties:
        id:
          format: int64
          type: integer
      type: object
    UpdateTeamGroupRequest:
      additionalProperties: false
      description: "Request to modify an existing team group's details, including\
        \ its name, description, roles, users, and scope settings."
      example:
        roleUpdates:
          roleIds:
          - id: 6
          - id: 6
        scopeFilters:
          subsystems:
          - term: term
            filterType: FILTER_TYPE_UNSPECIFIED
          - term: term
            filterType: FILTER_TYPE_UNSPECIFIED
          applications:
          - term: term
            filterType: FILTER_TYPE_UNSPECIFIED
          - term: term
            filterType: FILTER_TYPE_UNSPECIFIED
        groupType: GROUP_TYPE_UNSPECIFIED
        groupId:
          id: 0
        userUpdates:
          userIds:
          - id: id
          - id: id
        name: name
        description: description
        externalId: externalId
        nextGenScopeId: nextGenScopeId
      properties:
        description:
          type: string
        externalId:
          type: string
        groupId:
          $ref: "#/components/schemas/TeamGroupId"
        groupType:
          $ref: "#/components/schemas/GroupType"
        name:
          type: string
        nextGenScopeId:
          type: string
        roleUpdates:
          $ref: "#/components/schemas/RoleUpdates"
        scopeFilters:
          $ref: "#/components/schemas/ScopeFilters"
        userUpdates:
          $ref: "#/components/schemas/UserUpdates"
      title: UpdateTeamGroupRequest
      type: object
    CreateTeamGroupRequest:
      additionalProperties: false
      description: "Request to create a new team group with specified name, description,\
        \ roles, users, and optional scope filters. Can be associated with a specific\
        \ team or the authenticated team."
      example:
        scopeFilters:
          subsystems:
          - term: term
            filterType: FILTER_TYPE_UNSPECIFIED
          - term: term
            filterType: FILTER_TYPE_UNSPECIFIED
          applications:
          - term: term
            filterType: FILTER_TYPE_UNSPECIFIED
          - term: term
            filterType: FILTER_TYPE_UNSPECIFIED
        groupType: GROUP_TYPE_UNSPECIFIED
        roleIds:
        - id: 6
        - id: 6
        teamId:
          id: 5
        userIds:
        - id: id
        - id: id
        name: name
        description: description
        externalId: externalId
        nextGenScopeId: nextGenScopeId
      properties:
        description:
          type: string
        externalId:
          type: string
        groupType:
          $ref: "#/components/schemas/GroupType"
        name:
          type: string
        nextGenScopeId:
          type: string
        roleIds:
          items:
            $ref: "#/components/schemas/RoleId"
          type: array
        scopeFilters:
          $ref: "#/components/schemas/ScopeFilters"
        teamId:
          $ref: "#/components/schemas/permissions.v1.TeamId"
        userIds:
          items:
            $ref: "#/components/schemas/v1.UserId"
          type: array
      title: CreateTeamGroupRequest
      type: object
    AddUsersToTeamGroupsRequest:
      additionalProperties: false
      description: "Bulk request to assign users to multiple team groups simultaneously,\
        \ efficiently managing group memberships at scale."
      example:
        addUsersToGroup:
        - groupId:
            id: 0
          userIds:
          - id: id
          - id: id
        - groupId:
            id: 0
          userIds:
          - id: id
          - id: id
        teamId:
          id: 5
      properties:
        addUsersToGroup:
          items:
            $ref: "#/components/schemas/AddUsersToTeamGroup"
          type: array
        teamId:
          $ref: "#/components/schemas/permissions.v1.TeamId"
      title: AddUsersToTeamGroupsRequest
      type: object
    RemoveUsersFromTeamGroup:
      description: This data structure represents the information associated with
        an API key.
      externalDocs:
        description: Find out more about groups
        url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
      properties:
        groupId: {}
        userIds:
          items: {}
          type: array
      title: RemoveUsersFromTeamGroup
      type: object
    AddUsersToTeamGroupRequest:
      additionalProperties: false
      description: "Request to assign additional users to an existing team group,\
        \ granting them the group's roles and scope permissions."
      example:
        userIds:
        - id: id
        - id: id
      properties:
        userIds:
          items:
            $ref: "#/components/schemas/v1.UserId"
          type: array
      title: AddUsersToTeamGroupRequest
      type: object
    TeamPermissionsMgmtService_RemoveUsersFromTeamGroup_user_ids_parameter_inner:
      properties:
        id:
          type: string
      type: object
    SetTeamGroupScopeRequest:
      additionalProperties: false
      description: Request message for setting scope filters (subsystems and applications)
        for a team group to control access permissions
      example:
        scopeFilters:
          subsystems:
          - term: term
            filterType: FILTER_TYPE_UNSPECIFIED
          - term: term
            filterType: FILTER_TYPE_UNSPECIFIED
          applications:
          - term: term
            filterType: FILTER_TYPE_UNSPECIFIED
          - term: term
            filterType: FILTER_TYPE_UNSPECIFIED
      properties:
        scopeFilters:
          $ref: "#/components/schemas/ScopeFilters"
      title: SetTeamGroupScopeRequest
      type: object
    FilterPathAndValues_1:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        multipleValues:
          $ref: "#/components/schemas/MultipleValues"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
    FilterPathAndValues_2:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        filters:
          $ref: "#/components/schemas/Filters"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
    GetGroupUsersResponse_1:
      additionalProperties: false
      description: Response containing the list of all users currently assigned to
        the requested team group.
      example:
        noMorePages: "{}"
        users:
        - firstName: firstName
          lastName: lastName
          userAccountId:
            id: 0
          userId:
            id: id
          status: USER_STATUS_UNSPECIFIED
          username: username
        - firstName: firstName
          lastName: lastName
          userAccountId:
            id: 0
          userId:
            id: id
          status: USER_STATUS_UNSPECIFIED
          username: username
      externalDocs:
        description: Find out more about groups
        url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
      properties:
        noMorePages:
          description: This data structure represents the information associated with
            an API key.
          externalDocs:
            description: Find out more about groups
            url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
          title: NoMorePages
          type: object
        users:
          items:
            $ref: "#/components/schemas/v1.User"
          type: array
      title: GetGroupUsersResponse
      type: object
    GetGroupUsersResponse_2:
      additionalProperties: false
      description: Response containing the list of all users currently assigned to
        the requested team group.
      externalDocs:
        description: Find out more about groups
        url: https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
      properties:
        token:
          $ref: "#/components/schemas/NextPageToken"
        users:
          items:
            $ref: "#/components/schemas/v1.User"
          type: array
      title: GetGroupUsersResponse
      type: object
  securitySchemes:
    apiKeyAuth:
      description: API key authentication
      in: header
      name: Authorization
      type: apiKey
