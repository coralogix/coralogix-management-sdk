/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team_permissions_management_service

import (
	"encoding/json"
)

// checks if the RemoveUsersFromTeamGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoveUsersFromTeamGroup{}

// RemoveUsersFromTeamGroup This data structure represents the information associated with an API key.
type RemoveUsersFromTeamGroup struct {
	GroupId interface{} `json:"groupId,omitempty"`
	UserIds []interface{} `json:"userIds,omitempty"`
}

// NewRemoveUsersFromTeamGroup instantiates a new RemoveUsersFromTeamGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoveUsersFromTeamGroup() *RemoveUsersFromTeamGroup {
	this := RemoveUsersFromTeamGroup{}
	return &this
}

// NewRemoveUsersFromTeamGroupWithDefaults instantiates a new RemoveUsersFromTeamGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoveUsersFromTeamGroupWithDefaults() *RemoveUsersFromTeamGroup {
	this := RemoveUsersFromTeamGroup{}
	return &this
}

// GetGroupId returns the GroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoveUsersFromTeamGroup) GetGroupId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoveUsersFromTeamGroup) GetGroupIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return &o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *RemoveUsersFromTeamGroup) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given interface{} and assigns it to the GroupId field.
func (o *RemoveUsersFromTeamGroup) SetGroupId(v interface{}) {
	o.GroupId = v
}

// GetUserIds returns the UserIds field value if set, zero value otherwise.
func (o *RemoveUsersFromTeamGroup) GetUserIds() []interface{} {
	if o == nil || IsNil(o.UserIds) {
		var ret []interface{}
		return ret
	}
	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoveUsersFromTeamGroup) GetUserIdsOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.UserIds) {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *RemoveUsersFromTeamGroup) HasUserIds() bool {
	if o != nil && !IsNil(o.UserIds) {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []interface{} and assigns it to the UserIds field.
func (o *RemoveUsersFromTeamGroup) SetUserIds(v []interface{}) {
	o.UserIds = v
}

func (o RemoveUsersFromTeamGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoveUsersFromTeamGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.GroupId != nil {
		toSerialize["groupId"] = o.GroupId
	}
	if !IsNil(o.UserIds) {
		toSerialize["userIds"] = o.UserIds
	}
	return toSerialize, nil
}

type NullableRemoveUsersFromTeamGroup struct {
	value *RemoveUsersFromTeamGroup
	isSet bool
}

func (v NullableRemoveUsersFromTeamGroup) Get() *RemoveUsersFromTeamGroup {
	return v.value
}

func (v *NullableRemoveUsersFromTeamGroup) Set(val *RemoveUsersFromTeamGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoveUsersFromTeamGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoveUsersFromTeamGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoveUsersFromTeamGroup(val *RemoveUsersFromTeamGroup) *NullableRemoveUsersFromTeamGroup {
	return &NullableRemoveUsersFromTeamGroup{value: val, isSet: true}
}

func (v NullableRemoveUsersFromTeamGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoveUsersFromTeamGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


