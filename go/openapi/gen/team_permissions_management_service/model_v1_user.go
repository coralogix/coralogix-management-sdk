/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team_permissions_management_service

import (
	"encoding/json"
)

// checks if the V1User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1User{}

// V1User struct for V1User
type V1User struct {
	FirstName *string `json:"firstName,omitempty"`
	LastName *string `json:"lastName,omitempty"`
	Status *UserStatus `json:"status,omitempty"`
	UserAccountId *V1UserAccountId `json:"userAccountId,omitempty"`
	UserId *V1UserId `json:"userId,omitempty"`
	Username *string `json:"username,omitempty"`
}

// NewV1User instantiates a new V1User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1User() *V1User {
	this := V1User{}
	return &this
}

// NewV1UserWithDefaults instantiates a new V1User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1UserWithDefaults() *V1User {
	this := V1User{}
	return &this
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *V1User) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1User) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *V1User) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *V1User) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *V1User) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1User) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *V1User) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *V1User) SetLastName(v string) {
	o.LastName = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *V1User) GetStatus() UserStatus {
	if o == nil || IsNil(o.Status) {
		var ret UserStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1User) GetStatusOk() (*UserStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *V1User) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given UserStatus and assigns it to the Status field.
func (o *V1User) SetStatus(v UserStatus) {
	o.Status = &v
}

// GetUserAccountId returns the UserAccountId field value if set, zero value otherwise.
func (o *V1User) GetUserAccountId() V1UserAccountId {
	if o == nil || IsNil(o.UserAccountId) {
		var ret V1UserAccountId
		return ret
	}
	return *o.UserAccountId
}

// GetUserAccountIdOk returns a tuple with the UserAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1User) GetUserAccountIdOk() (*V1UserAccountId, bool) {
	if o == nil || IsNil(o.UserAccountId) {
		return nil, false
	}
	return o.UserAccountId, true
}

// HasUserAccountId returns a boolean if a field has been set.
func (o *V1User) HasUserAccountId() bool {
	if o != nil && !IsNil(o.UserAccountId) {
		return true
	}

	return false
}

// SetUserAccountId gets a reference to the given V1UserAccountId and assigns it to the UserAccountId field.
func (o *V1User) SetUserAccountId(v V1UserAccountId) {
	o.UserAccountId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *V1User) GetUserId() V1UserId {
	if o == nil || IsNil(o.UserId) {
		var ret V1UserId
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1User) GetUserIdOk() (*V1UserId, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *V1User) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given V1UserId and assigns it to the UserId field.
func (o *V1User) SetUserId(v V1UserId) {
	o.UserId = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *V1User) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1User) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *V1User) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *V1User) SetUsername(v string) {
	o.Username = &v
}

func (o V1User) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.UserAccountId) {
		toSerialize["userAccountId"] = o.UserAccountId
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableV1User struct {
	value *V1User
	isSet bool
}

func (v NullableV1User) Get() *V1User {
	return v.value
}

func (v *NullableV1User) Set(val *V1User) {
	v.value = val
	v.isSet = true
}

func (v NullableV1User) IsSet() bool {
	return v.isSet
}

func (v *NullableV1User) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1User(val *V1User) *NullableV1User {
	return &NullableV1User{value: val, isSet: true}
}

func (v NullableV1User) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1User) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


