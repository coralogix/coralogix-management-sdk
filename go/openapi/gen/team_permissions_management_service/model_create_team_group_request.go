/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team_permissions_management_service

import (
	"encoding/json"
)

// checks if the CreateTeamGroupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTeamGroupRequest{}

// CreateTeamGroupRequest Request to create a new team group with specified name, description, roles, users, and optional scope filters. Can be associated with a specific team or the authenticated team.
type CreateTeamGroupRequest struct {
	Description *string `json:"description,omitempty"`
	ExternalId *string `json:"externalId,omitempty"`
	GroupType *GroupType `json:"groupType,omitempty"`
	Name *string `json:"name,omitempty"`
	NextGenScopeId *string `json:"nextGenScopeId,omitempty"`
	RoleIds []RoleId `json:"roleIds,omitempty"`
	ScopeFilters *ScopeFilters `json:"scopeFilters,omitempty"`
	TeamId *PermissionsV1TeamId `json:"teamId,omitempty"`
	UserIds []V1UserId `json:"userIds,omitempty"`
}

// NewCreateTeamGroupRequest instantiates a new CreateTeamGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTeamGroupRequest() *CreateTeamGroupRequest {
	this := CreateTeamGroupRequest{}
	return &this
}

// NewCreateTeamGroupRequestWithDefaults instantiates a new CreateTeamGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTeamGroupRequestWithDefaults() *CreateTeamGroupRequest {
	this := CreateTeamGroupRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateTeamGroupRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTeamGroupRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateTeamGroupRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateTeamGroupRequest) SetDescription(v string) {
	o.Description = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *CreateTeamGroupRequest) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTeamGroupRequest) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *CreateTeamGroupRequest) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *CreateTeamGroupRequest) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetGroupType returns the GroupType field value if set, zero value otherwise.
func (o *CreateTeamGroupRequest) GetGroupType() GroupType {
	if o == nil || IsNil(o.GroupType) {
		var ret GroupType
		return ret
	}
	return *o.GroupType
}

// GetGroupTypeOk returns a tuple with the GroupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTeamGroupRequest) GetGroupTypeOk() (*GroupType, bool) {
	if o == nil || IsNil(o.GroupType) {
		return nil, false
	}
	return o.GroupType, true
}

// HasGroupType returns a boolean if a field has been set.
func (o *CreateTeamGroupRequest) HasGroupType() bool {
	if o != nil && !IsNil(o.GroupType) {
		return true
	}

	return false
}

// SetGroupType gets a reference to the given GroupType and assigns it to the GroupType field.
func (o *CreateTeamGroupRequest) SetGroupType(v GroupType) {
	o.GroupType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateTeamGroupRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTeamGroupRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateTeamGroupRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateTeamGroupRequest) SetName(v string) {
	o.Name = &v
}

// GetNextGenScopeId returns the NextGenScopeId field value if set, zero value otherwise.
func (o *CreateTeamGroupRequest) GetNextGenScopeId() string {
	if o == nil || IsNil(o.NextGenScopeId) {
		var ret string
		return ret
	}
	return *o.NextGenScopeId
}

// GetNextGenScopeIdOk returns a tuple with the NextGenScopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTeamGroupRequest) GetNextGenScopeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NextGenScopeId) {
		return nil, false
	}
	return o.NextGenScopeId, true
}

// HasNextGenScopeId returns a boolean if a field has been set.
func (o *CreateTeamGroupRequest) HasNextGenScopeId() bool {
	if o != nil && !IsNil(o.NextGenScopeId) {
		return true
	}

	return false
}

// SetNextGenScopeId gets a reference to the given string and assigns it to the NextGenScopeId field.
func (o *CreateTeamGroupRequest) SetNextGenScopeId(v string) {
	o.NextGenScopeId = &v
}

// GetRoleIds returns the RoleIds field value if set, zero value otherwise.
func (o *CreateTeamGroupRequest) GetRoleIds() []RoleId {
	if o == nil || IsNil(o.RoleIds) {
		var ret []RoleId
		return ret
	}
	return o.RoleIds
}

// GetRoleIdsOk returns a tuple with the RoleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTeamGroupRequest) GetRoleIdsOk() ([]RoleId, bool) {
	if o == nil || IsNil(o.RoleIds) {
		return nil, false
	}
	return o.RoleIds, true
}

// HasRoleIds returns a boolean if a field has been set.
func (o *CreateTeamGroupRequest) HasRoleIds() bool {
	if o != nil && !IsNil(o.RoleIds) {
		return true
	}

	return false
}

// SetRoleIds gets a reference to the given []RoleId and assigns it to the RoleIds field.
func (o *CreateTeamGroupRequest) SetRoleIds(v []RoleId) {
	o.RoleIds = v
}

// GetScopeFilters returns the ScopeFilters field value if set, zero value otherwise.
func (o *CreateTeamGroupRequest) GetScopeFilters() ScopeFilters {
	if o == nil || IsNil(o.ScopeFilters) {
		var ret ScopeFilters
		return ret
	}
	return *o.ScopeFilters
}

// GetScopeFiltersOk returns a tuple with the ScopeFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTeamGroupRequest) GetScopeFiltersOk() (*ScopeFilters, bool) {
	if o == nil || IsNil(o.ScopeFilters) {
		return nil, false
	}
	return o.ScopeFilters, true
}

// HasScopeFilters returns a boolean if a field has been set.
func (o *CreateTeamGroupRequest) HasScopeFilters() bool {
	if o != nil && !IsNil(o.ScopeFilters) {
		return true
	}

	return false
}

// SetScopeFilters gets a reference to the given ScopeFilters and assigns it to the ScopeFilters field.
func (o *CreateTeamGroupRequest) SetScopeFilters(v ScopeFilters) {
	o.ScopeFilters = &v
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *CreateTeamGroupRequest) GetTeamId() PermissionsV1TeamId {
	if o == nil || IsNil(o.TeamId) {
		var ret PermissionsV1TeamId
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTeamGroupRequest) GetTeamIdOk() (*PermissionsV1TeamId, bool) {
	if o == nil || IsNil(o.TeamId) {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *CreateTeamGroupRequest) HasTeamId() bool {
	if o != nil && !IsNil(o.TeamId) {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given PermissionsV1TeamId and assigns it to the TeamId field.
func (o *CreateTeamGroupRequest) SetTeamId(v PermissionsV1TeamId) {
	o.TeamId = &v
}

// GetUserIds returns the UserIds field value if set, zero value otherwise.
func (o *CreateTeamGroupRequest) GetUserIds() []V1UserId {
	if o == nil || IsNil(o.UserIds) {
		var ret []V1UserId
		return ret
	}
	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTeamGroupRequest) GetUserIdsOk() ([]V1UserId, bool) {
	if o == nil || IsNil(o.UserIds) {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *CreateTeamGroupRequest) HasUserIds() bool {
	if o != nil && !IsNil(o.UserIds) {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []V1UserId and assigns it to the UserIds field.
func (o *CreateTeamGroupRequest) SetUserIds(v []V1UserId) {
	o.UserIds = v
}

func (o CreateTeamGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTeamGroupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if !IsNil(o.GroupType) {
		toSerialize["groupType"] = o.GroupType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NextGenScopeId) {
		toSerialize["nextGenScopeId"] = o.NextGenScopeId
	}
	if !IsNil(o.RoleIds) {
		toSerialize["roleIds"] = o.RoleIds
	}
	if !IsNil(o.ScopeFilters) {
		toSerialize["scopeFilters"] = o.ScopeFilters
	}
	if !IsNil(o.TeamId) {
		toSerialize["teamId"] = o.TeamId
	}
	if !IsNil(o.UserIds) {
		toSerialize["userIds"] = o.UserIds
	}
	return toSerialize, nil
}

type NullableCreateTeamGroupRequest struct {
	value *CreateTeamGroupRequest
	isSet bool
}

func (v NullableCreateTeamGroupRequest) Get() *CreateTeamGroupRequest {
	return v.value
}

func (v *NullableCreateTeamGroupRequest) Set(val *CreateTeamGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTeamGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTeamGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTeamGroupRequest(val *CreateTeamGroupRequest) *NullableCreateTeamGroupRequest {
	return &NullableCreateTeamGroupRequest{value: val, isSet: true}
}

func (v NullableCreateTeamGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTeamGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


