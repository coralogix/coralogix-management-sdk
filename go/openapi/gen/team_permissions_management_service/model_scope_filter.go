/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team_permissions_management_service

import (
	"encoding/json"
)

// checks if the ScopeFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScopeFilter{}

// ScopeFilter struct for ScopeFilter
type ScopeFilter struct {
	FilterType *FilterType `json:"filterType,omitempty"`
	Term *string `json:"term,omitempty"`
}

// NewScopeFilter instantiates a new ScopeFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopeFilter() *ScopeFilter {
	this := ScopeFilter{}
	return &this
}

// NewScopeFilterWithDefaults instantiates a new ScopeFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopeFilterWithDefaults() *ScopeFilter {
	this := ScopeFilter{}
	return &this
}

// GetFilterType returns the FilterType field value if set, zero value otherwise.
func (o *ScopeFilter) GetFilterType() FilterType {
	if o == nil || IsNil(o.FilterType) {
		var ret FilterType
		return ret
	}
	return *o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeFilter) GetFilterTypeOk() (*FilterType, bool) {
	if o == nil || IsNil(o.FilterType) {
		return nil, false
	}
	return o.FilterType, true
}

// HasFilterType returns a boolean if a field has been set.
func (o *ScopeFilter) HasFilterType() bool {
	if o != nil && !IsNil(o.FilterType) {
		return true
	}

	return false
}

// SetFilterType gets a reference to the given FilterType and assigns it to the FilterType field.
func (o *ScopeFilter) SetFilterType(v FilterType) {
	o.FilterType = &v
}

// GetTerm returns the Term field value if set, zero value otherwise.
func (o *ScopeFilter) GetTerm() string {
	if o == nil || IsNil(o.Term) {
		var ret string
		return ret
	}
	return *o.Term
}

// GetTermOk returns a tuple with the Term field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeFilter) GetTermOk() (*string, bool) {
	if o == nil || IsNil(o.Term) {
		return nil, false
	}
	return o.Term, true
}

// HasTerm returns a boolean if a field has been set.
func (o *ScopeFilter) HasTerm() bool {
	if o != nil && !IsNil(o.Term) {
		return true
	}

	return false
}

// SetTerm gets a reference to the given string and assigns it to the Term field.
func (o *ScopeFilter) SetTerm(v string) {
	o.Term = &v
}

func (o ScopeFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScopeFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FilterType) {
		toSerialize["filterType"] = o.FilterType
	}
	if !IsNil(o.Term) {
		toSerialize["term"] = o.Term
	}
	return toSerialize, nil
}

type NullableScopeFilter struct {
	value *ScopeFilter
	isSet bool
}

func (v NullableScopeFilter) Get() *ScopeFilter {
	return v.value
}

func (v *NullableScopeFilter) Set(val *ScopeFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableScopeFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableScopeFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopeFilter(val *ScopeFilter) *NullableScopeFilter {
	return &NullableScopeFilter{value: val, isSet: true}
}

func (v NullableScopeFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopeFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


