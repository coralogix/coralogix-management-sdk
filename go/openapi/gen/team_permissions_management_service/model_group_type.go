/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team_permissions_management_service

import (
	"encoding/json"
	"fmt"
)

// GroupType the model 'GroupType'
type GroupType string

// List of GroupType
const (
	GROUPTYPE_GROUP_TYPE_UNSPECIFIED GroupType = "GROUP_TYPE_UNSPECIFIED"
	GROUPTYPE_GROUP_TYPE_OPEN GroupType = "GROUP_TYPE_OPEN"
	GROUPTYPE_GROUP_TYPE_CLOSED GroupType = "GROUP_TYPE_CLOSED"
	GROUPTYPE_GROUP_TYPE_RESTRICTED GroupType = "GROUP_TYPE_RESTRICTED"
)

// All allowed values of GroupType enum
var AllowedGroupTypeEnumValues = []GroupType{
	"GROUP_TYPE_UNSPECIFIED",
	"GROUP_TYPE_OPEN",
	"GROUP_TYPE_CLOSED",
	"GROUP_TYPE_RESTRICTED",
}

func (v *GroupType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GroupType(value)
	for _, existing := range AllowedGroupTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GroupType", value)
}

// NewGroupTypeFromValue returns a pointer to a valid GroupType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupTypeFromValue(v string) (*GroupType, error) {
	ev := GroupType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GroupType: valid values are %v", v, AllowedGroupTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupType) IsValid() bool {
	for _, existing := range AllowedGroupTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupType value
func (v GroupType) Ptr() *GroupType {
	return &v
}

type NullableGroupType struct {
	value *GroupType
	isSet bool
}

func (v NullableGroupType) Get() *GroupType {
	return v.value
}

func (v *NullableGroupType) Set(val *GroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupType(val *GroupType) *NullableGroupType {
	return &NullableGroupType{value: val, isSet: true}
}

func (v NullableGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

