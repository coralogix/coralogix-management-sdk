/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team_permissions_management_service

import (
	"encoding/json"
)

// checks if the UpdateTeamGroupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTeamGroupRequest{}

// UpdateTeamGroupRequest Request to modify an existing team group's details, including its name, description, roles, users, and scope settings.
type UpdateTeamGroupRequest struct {
	Description *string `json:"description,omitempty"`
	ExternalId *string `json:"externalId,omitempty"`
	GroupId *TeamGroupId `json:"groupId,omitempty"`
	GroupType *GroupType `json:"groupType,omitempty"`
	Name *string `json:"name,omitempty"`
	NextGenScopeId *string `json:"nextGenScopeId,omitempty"`
	RoleUpdates *RoleUpdates `json:"roleUpdates,omitempty"`
	ScopeFilters *ScopeFilters `json:"scopeFilters,omitempty"`
	UserUpdates *UserUpdates `json:"userUpdates,omitempty"`
}

// NewUpdateTeamGroupRequest instantiates a new UpdateTeamGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTeamGroupRequest() *UpdateTeamGroupRequest {
	this := UpdateTeamGroupRequest{}
	return &this
}

// NewUpdateTeamGroupRequestWithDefaults instantiates a new UpdateTeamGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTeamGroupRequestWithDefaults() *UpdateTeamGroupRequest {
	this := UpdateTeamGroupRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateTeamGroupRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTeamGroupRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateTeamGroupRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateTeamGroupRequest) SetDescription(v string) {
	o.Description = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *UpdateTeamGroupRequest) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTeamGroupRequest) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *UpdateTeamGroupRequest) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *UpdateTeamGroupRequest) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *UpdateTeamGroupRequest) GetGroupId() TeamGroupId {
	if o == nil || IsNil(o.GroupId) {
		var ret TeamGroupId
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTeamGroupRequest) GetGroupIdOk() (*TeamGroupId, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *UpdateTeamGroupRequest) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given TeamGroupId and assigns it to the GroupId field.
func (o *UpdateTeamGroupRequest) SetGroupId(v TeamGroupId) {
	o.GroupId = &v
}

// GetGroupType returns the GroupType field value if set, zero value otherwise.
func (o *UpdateTeamGroupRequest) GetGroupType() GroupType {
	if o == nil || IsNil(o.GroupType) {
		var ret GroupType
		return ret
	}
	return *o.GroupType
}

// GetGroupTypeOk returns a tuple with the GroupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTeamGroupRequest) GetGroupTypeOk() (*GroupType, bool) {
	if o == nil || IsNil(o.GroupType) {
		return nil, false
	}
	return o.GroupType, true
}

// HasGroupType returns a boolean if a field has been set.
func (o *UpdateTeamGroupRequest) HasGroupType() bool {
	if o != nil && !IsNil(o.GroupType) {
		return true
	}

	return false
}

// SetGroupType gets a reference to the given GroupType and assigns it to the GroupType field.
func (o *UpdateTeamGroupRequest) SetGroupType(v GroupType) {
	o.GroupType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateTeamGroupRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTeamGroupRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateTeamGroupRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateTeamGroupRequest) SetName(v string) {
	o.Name = &v
}

// GetNextGenScopeId returns the NextGenScopeId field value if set, zero value otherwise.
func (o *UpdateTeamGroupRequest) GetNextGenScopeId() string {
	if o == nil || IsNil(o.NextGenScopeId) {
		var ret string
		return ret
	}
	return *o.NextGenScopeId
}

// GetNextGenScopeIdOk returns a tuple with the NextGenScopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTeamGroupRequest) GetNextGenScopeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NextGenScopeId) {
		return nil, false
	}
	return o.NextGenScopeId, true
}

// HasNextGenScopeId returns a boolean if a field has been set.
func (o *UpdateTeamGroupRequest) HasNextGenScopeId() bool {
	if o != nil && !IsNil(o.NextGenScopeId) {
		return true
	}

	return false
}

// SetNextGenScopeId gets a reference to the given string and assigns it to the NextGenScopeId field.
func (o *UpdateTeamGroupRequest) SetNextGenScopeId(v string) {
	o.NextGenScopeId = &v
}

// GetRoleUpdates returns the RoleUpdates field value if set, zero value otherwise.
func (o *UpdateTeamGroupRequest) GetRoleUpdates() RoleUpdates {
	if o == nil || IsNil(o.RoleUpdates) {
		var ret RoleUpdates
		return ret
	}
	return *o.RoleUpdates
}

// GetRoleUpdatesOk returns a tuple with the RoleUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTeamGroupRequest) GetRoleUpdatesOk() (*RoleUpdates, bool) {
	if o == nil || IsNil(o.RoleUpdates) {
		return nil, false
	}
	return o.RoleUpdates, true
}

// HasRoleUpdates returns a boolean if a field has been set.
func (o *UpdateTeamGroupRequest) HasRoleUpdates() bool {
	if o != nil && !IsNil(o.RoleUpdates) {
		return true
	}

	return false
}

// SetRoleUpdates gets a reference to the given RoleUpdates and assigns it to the RoleUpdates field.
func (o *UpdateTeamGroupRequest) SetRoleUpdates(v RoleUpdates) {
	o.RoleUpdates = &v
}

// GetScopeFilters returns the ScopeFilters field value if set, zero value otherwise.
func (o *UpdateTeamGroupRequest) GetScopeFilters() ScopeFilters {
	if o == nil || IsNil(o.ScopeFilters) {
		var ret ScopeFilters
		return ret
	}
	return *o.ScopeFilters
}

// GetScopeFiltersOk returns a tuple with the ScopeFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTeamGroupRequest) GetScopeFiltersOk() (*ScopeFilters, bool) {
	if o == nil || IsNil(o.ScopeFilters) {
		return nil, false
	}
	return o.ScopeFilters, true
}

// HasScopeFilters returns a boolean if a field has been set.
func (o *UpdateTeamGroupRequest) HasScopeFilters() bool {
	if o != nil && !IsNil(o.ScopeFilters) {
		return true
	}

	return false
}

// SetScopeFilters gets a reference to the given ScopeFilters and assigns it to the ScopeFilters field.
func (o *UpdateTeamGroupRequest) SetScopeFilters(v ScopeFilters) {
	o.ScopeFilters = &v
}

// GetUserUpdates returns the UserUpdates field value if set, zero value otherwise.
func (o *UpdateTeamGroupRequest) GetUserUpdates() UserUpdates {
	if o == nil || IsNil(o.UserUpdates) {
		var ret UserUpdates
		return ret
	}
	return *o.UserUpdates
}

// GetUserUpdatesOk returns a tuple with the UserUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTeamGroupRequest) GetUserUpdatesOk() (*UserUpdates, bool) {
	if o == nil || IsNil(o.UserUpdates) {
		return nil, false
	}
	return o.UserUpdates, true
}

// HasUserUpdates returns a boolean if a field has been set.
func (o *UpdateTeamGroupRequest) HasUserUpdates() bool {
	if o != nil && !IsNil(o.UserUpdates) {
		return true
	}

	return false
}

// SetUserUpdates gets a reference to the given UserUpdates and assigns it to the UserUpdates field.
func (o *UpdateTeamGroupRequest) SetUserUpdates(v UserUpdates) {
	o.UserUpdates = &v
}

func (o UpdateTeamGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTeamGroupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if !IsNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !IsNil(o.GroupType) {
		toSerialize["groupType"] = o.GroupType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NextGenScopeId) {
		toSerialize["nextGenScopeId"] = o.NextGenScopeId
	}
	if !IsNil(o.RoleUpdates) {
		toSerialize["roleUpdates"] = o.RoleUpdates
	}
	if !IsNil(o.ScopeFilters) {
		toSerialize["scopeFilters"] = o.ScopeFilters
	}
	if !IsNil(o.UserUpdates) {
		toSerialize["userUpdates"] = o.UserUpdates
	}
	return toSerialize, nil
}

type NullableUpdateTeamGroupRequest struct {
	value *UpdateTeamGroupRequest
	isSet bool
}

func (v NullableUpdateTeamGroupRequest) Get() *UpdateTeamGroupRequest {
	return v.value
}

func (v *NullableUpdateTeamGroupRequest) Set(val *UpdateTeamGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTeamGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTeamGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTeamGroupRequest(val *UpdateTeamGroupRequest) *NullableUpdateTeamGroupRequest {
	return &NullableUpdateTeamGroupRequest{value: val, isSet: true}
}

func (v NullableUpdateTeamGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTeamGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


