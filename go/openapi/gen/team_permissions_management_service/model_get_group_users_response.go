/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team_permissions_management_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// GetGroupUsersResponse - struct for GetGroupUsersResponse
type GetGroupUsersResponse struct {
	GetGroupUsersResponse1 *GetGroupUsersResponse1
	GetGroupUsersResponse2 *GetGroupUsersResponse2
}

// GetGroupUsersResponse1AsGetGroupUsersResponse is a convenience function that returns GetGroupUsersResponse1 wrapped in GetGroupUsersResponse
func GetGroupUsersResponse1AsGetGroupUsersResponse(v *GetGroupUsersResponse1) GetGroupUsersResponse {
	return GetGroupUsersResponse{
		GetGroupUsersResponse1: v,
	}
}

// GetGroupUsersResponse2AsGetGroupUsersResponse is a convenience function that returns GetGroupUsersResponse2 wrapped in GetGroupUsersResponse
func GetGroupUsersResponse2AsGetGroupUsersResponse(v *GetGroupUsersResponse2) GetGroupUsersResponse {
	return GetGroupUsersResponse{
		GetGroupUsersResponse2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetGroupUsersResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetGroupUsersResponse1
	err = newStrictDecoder(data).Decode(&dst.GetGroupUsersResponse1)
	if err == nil {
		jsonGetGroupUsersResponse1, _ := json.Marshal(dst.GetGroupUsersResponse1)
		if string(jsonGetGroupUsersResponse1) == "{}" { // empty struct
			dst.GetGroupUsersResponse1 = nil
		} else {
			if err = validator.Validate(dst.GetGroupUsersResponse1); err != nil {
				dst.GetGroupUsersResponse1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetGroupUsersResponse1 = nil
	}

	// try to unmarshal data into GetGroupUsersResponse2
	err = newStrictDecoder(data).Decode(&dst.GetGroupUsersResponse2)
	if err == nil {
		jsonGetGroupUsersResponse2, _ := json.Marshal(dst.GetGroupUsersResponse2)
		if string(jsonGetGroupUsersResponse2) == "{}" { // empty struct
			dst.GetGroupUsersResponse2 = nil
		} else {
			if err = validator.Validate(dst.GetGroupUsersResponse2); err != nil {
				dst.GetGroupUsersResponse2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetGroupUsersResponse2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetGroupUsersResponse1 = nil
		dst.GetGroupUsersResponse2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetGroupUsersResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetGroupUsersResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetGroupUsersResponse) MarshalJSON() ([]byte, error) {
	if src.GetGroupUsersResponse1 != nil {
		return json.Marshal(&src.GetGroupUsersResponse1)
	}

	if src.GetGroupUsersResponse2 != nil {
		return json.Marshal(&src.GetGroupUsersResponse2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetGroupUsersResponse) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GetGroupUsersResponse1 != nil {
		return obj.GetGroupUsersResponse1
	}

	if obj.GetGroupUsersResponse2 != nil {
		return obj.GetGroupUsersResponse2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GetGroupUsersResponse) GetActualInstanceValue() (interface{}) {
	if obj.GetGroupUsersResponse1 != nil {
		return *obj.GetGroupUsersResponse1
	}

	if obj.GetGroupUsersResponse2 != nil {
		return *obj.GetGroupUsersResponse2
	}

	// all schemas are nil
	return nil
}

type NullableGetGroupUsersResponse struct {
	value *GetGroupUsersResponse
	isSet bool
}

func (v NullableGetGroupUsersResponse) Get() *GetGroupUsersResponse {
	return v.value
}

func (v *NullableGetGroupUsersResponse) Set(val *GetGroupUsersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetGroupUsersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetGroupUsersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetGroupUsersResponse(val *GetGroupUsersResponse) *NullableGetGroupUsersResponse {
	return &NullableGetGroupUsersResponse{value: val, isSet: true}
}

func (v NullableGetGroupUsersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetGroupUsersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


