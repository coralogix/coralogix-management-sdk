/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team_permissions_management_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// GetGroupUsersResponse - struct for GetGroupUsersResponse
type GetGroupUsersResponse struct {
	GetGroupUsersResponseNoMorePages *GetGroupUsersResponseNoMorePages
	GetGroupUsersResponseToken *GetGroupUsersResponseToken
}

// GetGroupUsersResponseNoMorePagesAsGetGroupUsersResponse is a convenience function that returns GetGroupUsersResponseNoMorePages wrapped in GetGroupUsersResponse
func GetGroupUsersResponseNoMorePagesAsGetGroupUsersResponse(v *GetGroupUsersResponseNoMorePages) GetGroupUsersResponse {
	return GetGroupUsersResponse{
		GetGroupUsersResponseNoMorePages: v,
	}
}

// GetGroupUsersResponseTokenAsGetGroupUsersResponse is a convenience function that returns GetGroupUsersResponseToken wrapped in GetGroupUsersResponse
func GetGroupUsersResponseTokenAsGetGroupUsersResponse(v *GetGroupUsersResponseToken) GetGroupUsersResponse {
	return GetGroupUsersResponse{
		GetGroupUsersResponseToken: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetGroupUsersResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetGroupUsersResponseNoMorePages
	err = newStrictDecoder(data).Decode(&dst.GetGroupUsersResponseNoMorePages)
	if err == nil {
		jsonGetGroupUsersResponseNoMorePages, _ := json.Marshal(dst.GetGroupUsersResponseNoMorePages)
		if string(jsonGetGroupUsersResponseNoMorePages) == "{}" { // empty struct
			dst.GetGroupUsersResponseNoMorePages = nil
		} else {
			if err = validator.Validate(dst.GetGroupUsersResponseNoMorePages); err != nil {
				dst.GetGroupUsersResponseNoMorePages = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetGroupUsersResponseNoMorePages = nil
	}

	// try to unmarshal data into GetGroupUsersResponseToken
	err = newStrictDecoder(data).Decode(&dst.GetGroupUsersResponseToken)
	if err == nil {
		jsonGetGroupUsersResponseToken, _ := json.Marshal(dst.GetGroupUsersResponseToken)
		if string(jsonGetGroupUsersResponseToken) == "{}" { // empty struct
			dst.GetGroupUsersResponseToken = nil
		} else {
			if err = validator.Validate(dst.GetGroupUsersResponseToken); err != nil {
				dst.GetGroupUsersResponseToken = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetGroupUsersResponseToken = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetGroupUsersResponseNoMorePages = nil
		dst.GetGroupUsersResponseToken = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetGroupUsersResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetGroupUsersResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetGroupUsersResponse) MarshalJSON() ([]byte, error) {
	if src.GetGroupUsersResponseNoMorePages != nil {
		return json.Marshal(&src.GetGroupUsersResponseNoMorePages)
	}

	if src.GetGroupUsersResponseToken != nil {
		return json.Marshal(&src.GetGroupUsersResponseToken)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetGroupUsersResponse) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GetGroupUsersResponseNoMorePages != nil {
		return obj.GetGroupUsersResponseNoMorePages
	}

	if obj.GetGroupUsersResponseToken != nil {
		return obj.GetGroupUsersResponseToken
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GetGroupUsersResponse) GetActualInstanceValue() (interface{}) {
	if obj.GetGroupUsersResponseNoMorePages != nil {
		return *obj.GetGroupUsersResponseNoMorePages
	}

	if obj.GetGroupUsersResponseToken != nil {
		return *obj.GetGroupUsersResponseToken
	}

	// all schemas are nil
	return nil
}

type NullableGetGroupUsersResponse struct {
	value *GetGroupUsersResponse
	isSet bool
}

func (v NullableGetGroupUsersResponse) Get() *GetGroupUsersResponse {
	return v.value
}

func (v *NullableGetGroupUsersResponse) Set(val *GetGroupUsersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetGroupUsersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetGroupUsersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetGroupUsersResponse(val *GetGroupUsersResponse) *NullableGetGroupUsersResponse {
	return &NullableGetGroupUsersResponse{value: val, isSet: true}
}

func (v NullableGetGroupUsersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetGroupUsersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


