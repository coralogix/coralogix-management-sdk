/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team_permissions_management_service

import (
	"encoding/json"
	"time"
)

// checks if the TeamGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamGroup{}

// TeamGroup struct for TeamGroup
type TeamGroup struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Description *string `json:"description,omitempty"`
	ExternalId *string `json:"externalId,omitempty"`
	GroupId *TeamGroupId `json:"groupId,omitempty"`
	GroupOrigin *GroupOrigin `json:"groupOrigin,omitempty"`
	GroupType *GroupType `json:"groupType,omitempty"`
	Name *string `json:"name,omitempty"`
	NextGenScopeId *string `json:"nextGenScopeId,omitempty"`
	Roles []Role `json:"roles,omitempty"`
	Scope *PermissionsV1Scope `json:"scope,omitempty"`
	TeamId *PermissionsV1TeamId `json:"teamId,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// NewTeamGroup instantiates a new TeamGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamGroup() *TeamGroup {
	this := TeamGroup{}
	return &this
}

// NewTeamGroupWithDefaults instantiates a new TeamGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamGroupWithDefaults() *TeamGroup {
	this := TeamGroup{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TeamGroup) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamGroup) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TeamGroup) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *TeamGroup) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TeamGroup) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamGroup) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TeamGroup) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TeamGroup) SetDescription(v string) {
	o.Description = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *TeamGroup) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamGroup) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *TeamGroup) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *TeamGroup) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *TeamGroup) GetGroupId() TeamGroupId {
	if o == nil || IsNil(o.GroupId) {
		var ret TeamGroupId
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamGroup) GetGroupIdOk() (*TeamGroupId, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *TeamGroup) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given TeamGroupId and assigns it to the GroupId field.
func (o *TeamGroup) SetGroupId(v TeamGroupId) {
	o.GroupId = &v
}

// GetGroupOrigin returns the GroupOrigin field value if set, zero value otherwise.
func (o *TeamGroup) GetGroupOrigin() GroupOrigin {
	if o == nil || IsNil(o.GroupOrigin) {
		var ret GroupOrigin
		return ret
	}
	return *o.GroupOrigin
}

// GetGroupOriginOk returns a tuple with the GroupOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamGroup) GetGroupOriginOk() (*GroupOrigin, bool) {
	if o == nil || IsNil(o.GroupOrigin) {
		return nil, false
	}
	return o.GroupOrigin, true
}

// HasGroupOrigin returns a boolean if a field has been set.
func (o *TeamGroup) HasGroupOrigin() bool {
	if o != nil && !IsNil(o.GroupOrigin) {
		return true
	}

	return false
}

// SetGroupOrigin gets a reference to the given GroupOrigin and assigns it to the GroupOrigin field.
func (o *TeamGroup) SetGroupOrigin(v GroupOrigin) {
	o.GroupOrigin = &v
}

// GetGroupType returns the GroupType field value if set, zero value otherwise.
func (o *TeamGroup) GetGroupType() GroupType {
	if o == nil || IsNil(o.GroupType) {
		var ret GroupType
		return ret
	}
	return *o.GroupType
}

// GetGroupTypeOk returns a tuple with the GroupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamGroup) GetGroupTypeOk() (*GroupType, bool) {
	if o == nil || IsNil(o.GroupType) {
		return nil, false
	}
	return o.GroupType, true
}

// HasGroupType returns a boolean if a field has been set.
func (o *TeamGroup) HasGroupType() bool {
	if o != nil && !IsNil(o.GroupType) {
		return true
	}

	return false
}

// SetGroupType gets a reference to the given GroupType and assigns it to the GroupType field.
func (o *TeamGroup) SetGroupType(v GroupType) {
	o.GroupType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TeamGroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamGroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TeamGroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TeamGroup) SetName(v string) {
	o.Name = &v
}

// GetNextGenScopeId returns the NextGenScopeId field value if set, zero value otherwise.
func (o *TeamGroup) GetNextGenScopeId() string {
	if o == nil || IsNil(o.NextGenScopeId) {
		var ret string
		return ret
	}
	return *o.NextGenScopeId
}

// GetNextGenScopeIdOk returns a tuple with the NextGenScopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamGroup) GetNextGenScopeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NextGenScopeId) {
		return nil, false
	}
	return o.NextGenScopeId, true
}

// HasNextGenScopeId returns a boolean if a field has been set.
func (o *TeamGroup) HasNextGenScopeId() bool {
	if o != nil && !IsNil(o.NextGenScopeId) {
		return true
	}

	return false
}

// SetNextGenScopeId gets a reference to the given string and assigns it to the NextGenScopeId field.
func (o *TeamGroup) SetNextGenScopeId(v string) {
	o.NextGenScopeId = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *TeamGroup) GetRoles() []Role {
	if o == nil || IsNil(o.Roles) {
		var ret []Role
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamGroup) GetRolesOk() ([]Role, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *TeamGroup) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []Role and assigns it to the Roles field.
func (o *TeamGroup) SetRoles(v []Role) {
	o.Roles = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *TeamGroup) GetScope() PermissionsV1Scope {
	if o == nil || IsNil(o.Scope) {
		var ret PermissionsV1Scope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamGroup) GetScopeOk() (*PermissionsV1Scope, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *TeamGroup) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given PermissionsV1Scope and assigns it to the Scope field.
func (o *TeamGroup) SetScope(v PermissionsV1Scope) {
	o.Scope = &v
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *TeamGroup) GetTeamId() PermissionsV1TeamId {
	if o == nil || IsNil(o.TeamId) {
		var ret PermissionsV1TeamId
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamGroup) GetTeamIdOk() (*PermissionsV1TeamId, bool) {
	if o == nil || IsNil(o.TeamId) {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *TeamGroup) HasTeamId() bool {
	if o != nil && !IsNil(o.TeamId) {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given PermissionsV1TeamId and assigns it to the TeamId field.
func (o *TeamGroup) SetTeamId(v PermissionsV1TeamId) {
	o.TeamId = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *TeamGroup) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamGroup) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *TeamGroup) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *TeamGroup) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o TeamGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if !IsNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !IsNil(o.GroupOrigin) {
		toSerialize["groupOrigin"] = o.GroupOrigin
	}
	if !IsNil(o.GroupType) {
		toSerialize["groupType"] = o.GroupType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NextGenScopeId) {
		toSerialize["nextGenScopeId"] = o.NextGenScopeId
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.TeamId) {
		toSerialize["teamId"] = o.TeamId
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableTeamGroup struct {
	value *TeamGroup
	isSet bool
}

func (v NullableTeamGroup) Get() *TeamGroup {
	return v.value
}

func (v *NullableTeamGroup) Set(val *TeamGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamGroup(val *TeamGroup) *NullableTeamGroup {
	return &NullableTeamGroup{value: val, isSet: true}
}

func (v NullableTeamGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


