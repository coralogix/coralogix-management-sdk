/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team_permissions_management_service

import (
	"encoding/json"
)

// checks if the GetTeamGroupResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetTeamGroupResponse{}

// GetTeamGroupResponse Response containing the complete details of a requested team group, including its members, assigned roles, and scope configuration.
type GetTeamGroupResponse struct {
	Group *TeamGroup `json:"group,omitempty"`
}

// NewGetTeamGroupResponse instantiates a new GetTeamGroupResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetTeamGroupResponse() *GetTeamGroupResponse {
	this := GetTeamGroupResponse{}
	return &this
}

// NewGetTeamGroupResponseWithDefaults instantiates a new GetTeamGroupResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetTeamGroupResponseWithDefaults() *GetTeamGroupResponse {
	this := GetTeamGroupResponse{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *GetTeamGroupResponse) GetGroup() TeamGroup {
	if o == nil || IsNil(o.Group) {
		var ret TeamGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetTeamGroupResponse) GetGroupOk() (*TeamGroup, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *GetTeamGroupResponse) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given TeamGroup and assigns it to the Group field.
func (o *GetTeamGroupResponse) SetGroup(v TeamGroup) {
	o.Group = &v
}

func (o GetTeamGroupResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetTeamGroupResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	return toSerialize, nil
}

type NullableGetTeamGroupResponse struct {
	value *GetTeamGroupResponse
	isSet bool
}

func (v NullableGetTeamGroupResponse) Get() *GetTeamGroupResponse {
	return v.value
}

func (v *NullableGetTeamGroupResponse) Set(val *GetTeamGroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetTeamGroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetTeamGroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetTeamGroupResponse(val *GetTeamGroupResponse) *NullableGetTeamGroupResponse {
	return &NullableGetTeamGroupResponse{value: val, isSet: true}
}

func (v NullableGetTeamGroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetTeamGroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


