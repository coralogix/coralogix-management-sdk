/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team_permissions_management_service

import (
	"encoding/json"
)

// checks if the ScopeFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScopeFilters{}

// ScopeFilters struct for ScopeFilters
type ScopeFilters struct {
	Applications []ScopeFilter `json:"applications,omitempty"`
	Subsystems []ScopeFilter `json:"subsystems,omitempty"`
}

// NewScopeFilters instantiates a new ScopeFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopeFilters() *ScopeFilters {
	this := ScopeFilters{}
	return &this
}

// NewScopeFiltersWithDefaults instantiates a new ScopeFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopeFiltersWithDefaults() *ScopeFilters {
	this := ScopeFilters{}
	return &this
}

// GetApplications returns the Applications field value if set, zero value otherwise.
func (o *ScopeFilters) GetApplications() []ScopeFilter {
	if o == nil || IsNil(o.Applications) {
		var ret []ScopeFilter
		return ret
	}
	return o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeFilters) GetApplicationsOk() ([]ScopeFilter, bool) {
	if o == nil || IsNil(o.Applications) {
		return nil, false
	}
	return o.Applications, true
}

// HasApplications returns a boolean if a field has been set.
func (o *ScopeFilters) HasApplications() bool {
	if o != nil && !IsNil(o.Applications) {
		return true
	}

	return false
}

// SetApplications gets a reference to the given []ScopeFilter and assigns it to the Applications field.
func (o *ScopeFilters) SetApplications(v []ScopeFilter) {
	o.Applications = v
}

// GetSubsystems returns the Subsystems field value if set, zero value otherwise.
func (o *ScopeFilters) GetSubsystems() []ScopeFilter {
	if o == nil || IsNil(o.Subsystems) {
		var ret []ScopeFilter
		return ret
	}
	return o.Subsystems
}

// GetSubsystemsOk returns a tuple with the Subsystems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeFilters) GetSubsystemsOk() ([]ScopeFilter, bool) {
	if o == nil || IsNil(o.Subsystems) {
		return nil, false
	}
	return o.Subsystems, true
}

// HasSubsystems returns a boolean if a field has been set.
func (o *ScopeFilters) HasSubsystems() bool {
	if o != nil && !IsNil(o.Subsystems) {
		return true
	}

	return false
}

// SetSubsystems gets a reference to the given []ScopeFilter and assigns it to the Subsystems field.
func (o *ScopeFilters) SetSubsystems(v []ScopeFilter) {
	o.Subsystems = v
}

func (o ScopeFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScopeFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Applications) {
		toSerialize["applications"] = o.Applications
	}
	if !IsNil(o.Subsystems) {
		toSerialize["subsystems"] = o.Subsystems
	}
	return toSerialize, nil
}

type NullableScopeFilters struct {
	value *ScopeFilters
	isSet bool
}

func (v NullableScopeFilters) Get() *ScopeFilters {
	return v.value
}

func (v *NullableScopeFilters) Set(val *ScopeFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableScopeFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableScopeFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopeFilters(val *ScopeFilters) *NullableScopeFilters {
	return &NullableScopeFilters{value: val, isSet: true}
}

func (v NullableScopeFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopeFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


