/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team_permissions_management_service

import (
	"encoding/json"
)

// checks if the AddUsersToTeamGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddUsersToTeamGroup{}

// AddUsersToTeamGroup This data structure represents the information associated with an API key.
type AddUsersToTeamGroup struct {
	GroupId *TeamGroupId `json:"groupId,omitempty"`
	UserIds []V1UserId `json:"userIds,omitempty"`
}

// NewAddUsersToTeamGroup instantiates a new AddUsersToTeamGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddUsersToTeamGroup() *AddUsersToTeamGroup {
	this := AddUsersToTeamGroup{}
	return &this
}

// NewAddUsersToTeamGroupWithDefaults instantiates a new AddUsersToTeamGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddUsersToTeamGroupWithDefaults() *AddUsersToTeamGroup {
	this := AddUsersToTeamGroup{}
	return &this
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *AddUsersToTeamGroup) GetGroupId() TeamGroupId {
	if o == nil || IsNil(o.GroupId) {
		var ret TeamGroupId
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUsersToTeamGroup) GetGroupIdOk() (*TeamGroupId, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *AddUsersToTeamGroup) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given TeamGroupId and assigns it to the GroupId field.
func (o *AddUsersToTeamGroup) SetGroupId(v TeamGroupId) {
	o.GroupId = &v
}

// GetUserIds returns the UserIds field value if set, zero value otherwise.
func (o *AddUsersToTeamGroup) GetUserIds() []V1UserId {
	if o == nil || IsNil(o.UserIds) {
		var ret []V1UserId
		return ret
	}
	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUsersToTeamGroup) GetUserIdsOk() ([]V1UserId, bool) {
	if o == nil || IsNil(o.UserIds) {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *AddUsersToTeamGroup) HasUserIds() bool {
	if o != nil && !IsNil(o.UserIds) {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []V1UserId and assigns it to the UserIds field.
func (o *AddUsersToTeamGroup) SetUserIds(v []V1UserId) {
	o.UserIds = v
}

func (o AddUsersToTeamGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddUsersToTeamGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !IsNil(o.UserIds) {
		toSerialize["userIds"] = o.UserIds
	}
	return toSerialize, nil
}

type NullableAddUsersToTeamGroup struct {
	value *AddUsersToTeamGroup
	isSet bool
}

func (v NullableAddUsersToTeamGroup) Get() *AddUsersToTeamGroup {
	return v.value
}

func (v *NullableAddUsersToTeamGroup) Set(val *AddUsersToTeamGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableAddUsersToTeamGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableAddUsersToTeamGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddUsersToTeamGroup(val *AddUsersToTeamGroup) *NullableAddUsersToTeamGroup {
	return &NullableAddUsersToTeamGroup{value: val, isSet: true}
}

func (v NullableAddUsersToTeamGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddUsersToTeamGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


