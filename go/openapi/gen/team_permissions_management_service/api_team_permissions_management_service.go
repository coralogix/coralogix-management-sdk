/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team_permissions_management_service

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// TeamPermissionsManagementServiceAPIService TeamPermissionsManagementServiceAPI service
type TeamPermissionsManagementServiceAPIService service

type ApiTeamPermissionsMgmtServiceAddUsersToTeamGroupRequest struct {
	ctx context.Context
	ApiService *TeamPermissionsManagementServiceAPIService
	groupIdId int64
	addUsersToTeamGroupRequest *AddUsersToTeamGroupRequest
}

func (r ApiTeamPermissionsMgmtServiceAddUsersToTeamGroupRequest) AddUsersToTeamGroupRequest(addUsersToTeamGroupRequest AddUsersToTeamGroupRequest) ApiTeamPermissionsMgmtServiceAddUsersToTeamGroupRequest {
	r.addUsersToTeamGroupRequest = &addUsersToTeamGroupRequest
	return r
}

func (r ApiTeamPermissionsMgmtServiceAddUsersToTeamGroupRequest) Execute() (*AddUsersToTeamGroupResponse, *http.Response, error) {
	return r.ApiService.TeamPermissionsMgmtServiceAddUsersToTeamGroupExecute(r)
}

/*
TeamPermissionsMgmtServiceAddUsersToTeamGroup Add Users To Team Group

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupIdId
 @return ApiTeamPermissionsMgmtServiceAddUsersToTeamGroupRequest
*/
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceAddUsersToTeamGroup(ctx context.Context, groupIdId int64) ApiTeamPermissionsMgmtServiceAddUsersToTeamGroupRequest {
	return ApiTeamPermissionsMgmtServiceAddUsersToTeamGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupIdId: groupIdId,
	}
}

// Execute executes the request
//  @return AddUsersToTeamGroupResponse
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceAddUsersToTeamGroupExecute(r ApiTeamPermissionsMgmtServiceAddUsersToTeamGroupRequest) (*AddUsersToTeamGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddUsersToTeamGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamPermissionsManagementServiceAPIService.TeamPermissionsMgmtServiceAddUsersToTeamGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aaa/team-groups/v1/{group_id.id}/users"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id.id"+"}", url.PathEscape(parameterValueToString(r.groupIdId, "groupIdId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addUsersToTeamGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamPermissionsMgmtServiceAddUsersToTeamGroupsRequest struct {
	ctx context.Context
	ApiService *TeamPermissionsManagementServiceAPIService
	addUsersToTeamGroupsRequest *AddUsersToTeamGroupsRequest
}

func (r ApiTeamPermissionsMgmtServiceAddUsersToTeamGroupsRequest) AddUsersToTeamGroupsRequest(addUsersToTeamGroupsRequest AddUsersToTeamGroupsRequest) ApiTeamPermissionsMgmtServiceAddUsersToTeamGroupsRequest {
	r.addUsersToTeamGroupsRequest = &addUsersToTeamGroupsRequest
	return r
}

func (r ApiTeamPermissionsMgmtServiceAddUsersToTeamGroupsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.TeamPermissionsMgmtServiceAddUsersToTeamGroupsExecute(r)
}

/*
TeamPermissionsMgmtServiceAddUsersToTeamGroups Add Users To Team Groups

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTeamPermissionsMgmtServiceAddUsersToTeamGroupsRequest
*/
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceAddUsersToTeamGroups(ctx context.Context) ApiTeamPermissionsMgmtServiceAddUsersToTeamGroupsRequest {
	return ApiTeamPermissionsMgmtServiceAddUsersToTeamGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceAddUsersToTeamGroupsExecute(r ApiTeamPermissionsMgmtServiceAddUsersToTeamGroupsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamPermissionsManagementServiceAPIService.TeamPermissionsMgmtServiceAddUsersToTeamGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aaa/team-groups/v1/users"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addUsersToTeamGroupsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamPermissionsMgmtServiceCreateTeamGroupRequest struct {
	ctx context.Context
	ApiService *TeamPermissionsManagementServiceAPIService
	createTeamGroupRequest *CreateTeamGroupRequest
}

func (r ApiTeamPermissionsMgmtServiceCreateTeamGroupRequest) CreateTeamGroupRequest(createTeamGroupRequest CreateTeamGroupRequest) ApiTeamPermissionsMgmtServiceCreateTeamGroupRequest {
	r.createTeamGroupRequest = &createTeamGroupRequest
	return r
}

func (r ApiTeamPermissionsMgmtServiceCreateTeamGroupRequest) Execute() (*CreateTeamGroupResponse, *http.Response, error) {
	return r.ApiService.TeamPermissionsMgmtServiceCreateTeamGroupExecute(r)
}

/*
TeamPermissionsMgmtServiceCreateTeamGroup Create Team Group

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTeamPermissionsMgmtServiceCreateTeamGroupRequest
*/
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceCreateTeamGroup(ctx context.Context) ApiTeamPermissionsMgmtServiceCreateTeamGroupRequest {
	return ApiTeamPermissionsMgmtServiceCreateTeamGroupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateTeamGroupResponse
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceCreateTeamGroupExecute(r ApiTeamPermissionsMgmtServiceCreateTeamGroupRequest) (*CreateTeamGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTeamGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamPermissionsManagementServiceAPIService.TeamPermissionsMgmtServiceCreateTeamGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aaa/team-groups/v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createTeamGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamPermissionsMgmtServiceDeleteTeamGroupRequest struct {
	ctx context.Context
	ApiService *TeamPermissionsManagementServiceAPIService
	groupIdId int64
}

func (r ApiTeamPermissionsMgmtServiceDeleteTeamGroupRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.TeamPermissionsMgmtServiceDeleteTeamGroupExecute(r)
}

/*
TeamPermissionsMgmtServiceDeleteTeamGroup Delete Team Group

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupIdId
 @return ApiTeamPermissionsMgmtServiceDeleteTeamGroupRequest
*/
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceDeleteTeamGroup(ctx context.Context, groupIdId int64) ApiTeamPermissionsMgmtServiceDeleteTeamGroupRequest {
	return ApiTeamPermissionsMgmtServiceDeleteTeamGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupIdId: groupIdId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceDeleteTeamGroupExecute(r ApiTeamPermissionsMgmtServiceDeleteTeamGroupRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamPermissionsManagementServiceAPIService.TeamPermissionsMgmtServiceDeleteTeamGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aaa/team-groups/v1/{group_id.id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id.id"+"}", url.PathEscape(parameterValueToString(r.groupIdId, "groupIdId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamPermissionsMgmtServiceGetGroupUsersRequest struct {
	ctx context.Context
	ApiService *TeamPermissionsManagementServiceAPIService
	groupIdId int64
	pageSize *int64
	pageToken *string
}

func (r ApiTeamPermissionsMgmtServiceGetGroupUsersRequest) PageSize(pageSize int64) ApiTeamPermissionsMgmtServiceGetGroupUsersRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiTeamPermissionsMgmtServiceGetGroupUsersRequest) PageToken(pageToken string) ApiTeamPermissionsMgmtServiceGetGroupUsersRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiTeamPermissionsMgmtServiceGetGroupUsersRequest) Execute() (*GetGroupUsersResponse, *http.Response, error) {
	return r.ApiService.TeamPermissionsMgmtServiceGetGroupUsersExecute(r)
}

/*
TeamPermissionsMgmtServiceGetGroupUsers Get Group Users

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupIdId
 @return ApiTeamPermissionsMgmtServiceGetGroupUsersRequest
*/
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceGetGroupUsers(ctx context.Context, groupIdId int64) ApiTeamPermissionsMgmtServiceGetGroupUsersRequest {
	return ApiTeamPermissionsMgmtServiceGetGroupUsersRequest{
		ApiService: a,
		ctx: ctx,
		groupIdId: groupIdId,
	}
}

// Execute executes the request
//  @return GetGroupUsersResponse
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceGetGroupUsersExecute(r ApiTeamPermissionsMgmtServiceGetGroupUsersRequest) (*GetGroupUsersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetGroupUsersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamPermissionsManagementServiceAPIService.TeamPermissionsMgmtServiceGetGroupUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aaa/team-groups/v1/{group_id.id}/users"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id.id"+"}", url.PathEscape(parameterValueToString(r.groupIdId, "groupIdId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_token", r.pageToken, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamPermissionsMgmtServiceGetTeamGroupRequest struct {
	ctx context.Context
	ApiService *TeamPermissionsManagementServiceAPIService
	groupIdId int64
}

func (r ApiTeamPermissionsMgmtServiceGetTeamGroupRequest) Execute() (*GetTeamGroupResponse, *http.Response, error) {
	return r.ApiService.TeamPermissionsMgmtServiceGetTeamGroupExecute(r)
}

/*
TeamPermissionsMgmtServiceGetTeamGroup Get Team Group

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupIdId
 @return ApiTeamPermissionsMgmtServiceGetTeamGroupRequest
*/
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceGetTeamGroup(ctx context.Context, groupIdId int64) ApiTeamPermissionsMgmtServiceGetTeamGroupRequest {
	return ApiTeamPermissionsMgmtServiceGetTeamGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupIdId: groupIdId,
	}
}

// Execute executes the request
//  @return GetTeamGroupResponse
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceGetTeamGroupExecute(r ApiTeamPermissionsMgmtServiceGetTeamGroupRequest) (*GetTeamGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTeamGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamPermissionsManagementServiceAPIService.TeamPermissionsMgmtServiceGetTeamGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aaa/team-groups/v1/{group_id.id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id.id"+"}", url.PathEscape(parameterValueToString(r.groupIdId, "groupIdId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamPermissionsMgmtServiceGetTeamGroupByNameRequest struct {
	ctx context.Context
	ApiService *TeamPermissionsManagementServiceAPIService
	name string
}

func (r ApiTeamPermissionsMgmtServiceGetTeamGroupByNameRequest) Execute() (*GetTeamGroupByNameResponse, *http.Response, error) {
	return r.ApiService.TeamPermissionsMgmtServiceGetTeamGroupByNameExecute(r)
}

/*
TeamPermissionsMgmtServiceGetTeamGroupByName Get Team Group By Name

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiTeamPermissionsMgmtServiceGetTeamGroupByNameRequest
*/
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceGetTeamGroupByName(ctx context.Context, name string) ApiTeamPermissionsMgmtServiceGetTeamGroupByNameRequest {
	return ApiTeamPermissionsMgmtServiceGetTeamGroupByNameRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return GetTeamGroupByNameResponse
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceGetTeamGroupByNameExecute(r ApiTeamPermissionsMgmtServiceGetTeamGroupByNameRequest) (*GetTeamGroupByNameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTeamGroupByNameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamPermissionsManagementServiceAPIService.TeamPermissionsMgmtServiceGetTeamGroupByName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aaa/team-groups/v1/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamPermissionsMgmtServiceGetTeamGroupScopeRequest struct {
	ctx context.Context
	ApiService *TeamPermissionsManagementServiceAPIService
	groupIdId int64
}

func (r ApiTeamPermissionsMgmtServiceGetTeamGroupScopeRequest) Execute() (*GetTeamGroupScopeResponse, *http.Response, error) {
	return r.ApiService.TeamPermissionsMgmtServiceGetTeamGroupScopeExecute(r)
}

/*
TeamPermissionsMgmtServiceGetTeamGroupScope Get Team Group Scope

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupIdId
 @return ApiTeamPermissionsMgmtServiceGetTeamGroupScopeRequest
*/
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceGetTeamGroupScope(ctx context.Context, groupIdId int64) ApiTeamPermissionsMgmtServiceGetTeamGroupScopeRequest {
	return ApiTeamPermissionsMgmtServiceGetTeamGroupScopeRequest{
		ApiService: a,
		ctx: ctx,
		groupIdId: groupIdId,
	}
}

// Execute executes the request
//  @return GetTeamGroupScopeResponse
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceGetTeamGroupScopeExecute(r ApiTeamPermissionsMgmtServiceGetTeamGroupScopeRequest) (*GetTeamGroupScopeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTeamGroupScopeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamPermissionsManagementServiceAPIService.TeamPermissionsMgmtServiceGetTeamGroupScope")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/teams/groups/{group_id.id}/scope"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id.id"+"}", url.PathEscape(parameterValueToString(r.groupIdId, "groupIdId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamPermissionsMgmtServiceGetTeamGroupsRequest struct {
	ctx context.Context
	ApiService *TeamPermissionsManagementServiceAPIService
	teamId *TeamPermissionsMgmtServiceGetTeamGroupsTeamIdParameter
}

func (r ApiTeamPermissionsMgmtServiceGetTeamGroupsRequest) TeamId(teamId TeamPermissionsMgmtServiceGetTeamGroupsTeamIdParameter) ApiTeamPermissionsMgmtServiceGetTeamGroupsRequest {
	r.teamId = &teamId
	return r
}

func (r ApiTeamPermissionsMgmtServiceGetTeamGroupsRequest) Execute() (*GetTeamGroupsResponse, *http.Response, error) {
	return r.ApiService.TeamPermissionsMgmtServiceGetTeamGroupsExecute(r)
}

/*
TeamPermissionsMgmtServiceGetTeamGroups Get Team Groups

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTeamPermissionsMgmtServiceGetTeamGroupsRequest
*/
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceGetTeamGroups(ctx context.Context) ApiTeamPermissionsMgmtServiceGetTeamGroupsRequest {
	return ApiTeamPermissionsMgmtServiceGetTeamGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetTeamGroupsResponse
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceGetTeamGroupsExecute(r ApiTeamPermissionsMgmtServiceGetTeamGroupsRequest) (*GetTeamGroupsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTeamGroupsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamPermissionsManagementServiceAPIService.TeamPermissionsMgmtServiceGetTeamGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aaa/team-groups/v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.teamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "team_id", r.teamId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupRequest struct {
	ctx context.Context
	ApiService *TeamPermissionsManagementServiceAPIService
	groupIdId int64
	userIds *[]TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupUserIdsParameterInner
}

func (r ApiTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupRequest) UserIds(userIds []TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupUserIdsParameterInner) ApiTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupRequest {
	r.userIds = &userIds
	return r
}

func (r ApiTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupExecute(r)
}

/*
TeamPermissionsMgmtServiceRemoveUsersFromTeamGroup Remove Users From Team Group

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupIdId
 @return ApiTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupRequest
*/
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceRemoveUsersFromTeamGroup(ctx context.Context, groupIdId int64) ApiTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupRequest {
	return ApiTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupIdId: groupIdId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupExecute(r ApiTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamPermissionsManagementServiceAPIService.TeamPermissionsMgmtServiceRemoveUsersFromTeamGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aaa/team-groups/v1/{group_id.id}/users"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id.id"+"}", url.PathEscape(parameterValueToString(r.groupIdId, "groupIdId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userIds != nil {
		t := *r.userIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_ids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_ids", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsRequest struct {
	ctx context.Context
	ApiService *TeamPermissionsManagementServiceAPIService
	teamId *TeamPermissionsMgmtServiceGetTeamGroupsTeamIdParameter
	removeUsersFromGroup *[]RemoveUsersFromTeamGroup
}

func (r ApiTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsRequest) TeamId(teamId TeamPermissionsMgmtServiceGetTeamGroupsTeamIdParameter) ApiTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsRequest {
	r.teamId = &teamId
	return r
}

func (r ApiTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsRequest) RemoveUsersFromGroup(removeUsersFromGroup []RemoveUsersFromTeamGroup) ApiTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsRequest {
	r.removeUsersFromGroup = &removeUsersFromGroup
	return r
}

func (r ApiTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsExecute(r)
}

/*
TeamPermissionsMgmtServiceRemoveUsersFromTeamGroups Remove Users From Team Groups

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsRequest
*/
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceRemoveUsersFromTeamGroups(ctx context.Context) ApiTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsRequest {
	return ApiTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsExecute(r ApiTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamPermissionsManagementServiceAPIService.TeamPermissionsMgmtServiceRemoveUsersFromTeamGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aaa/team-groups/v1/users"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.teamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "team_id", r.teamId, "form", "")
	}
	if r.removeUsersFromGroup != nil {
		t := *r.removeUsersFromGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remove_users_from_group", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remove_users_from_group", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamPermissionsMgmtServiceSetTeamGroupScopeRequest struct {
	ctx context.Context
	ApiService *TeamPermissionsManagementServiceAPIService
	groupIdId int64
	setTeamGroupScopeRequest *SetTeamGroupScopeRequest
}

func (r ApiTeamPermissionsMgmtServiceSetTeamGroupScopeRequest) SetTeamGroupScopeRequest(setTeamGroupScopeRequest SetTeamGroupScopeRequest) ApiTeamPermissionsMgmtServiceSetTeamGroupScopeRequest {
	r.setTeamGroupScopeRequest = &setTeamGroupScopeRequest
	return r
}

func (r ApiTeamPermissionsMgmtServiceSetTeamGroupScopeRequest) Execute() (*SetTeamGroupScopeResponse, *http.Response, error) {
	return r.ApiService.TeamPermissionsMgmtServiceSetTeamGroupScopeExecute(r)
}

/*
TeamPermissionsMgmtServiceSetTeamGroupScope Set Team Group Scope

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupIdId
 @return ApiTeamPermissionsMgmtServiceSetTeamGroupScopeRequest
*/
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceSetTeamGroupScope(ctx context.Context, groupIdId int64) ApiTeamPermissionsMgmtServiceSetTeamGroupScopeRequest {
	return ApiTeamPermissionsMgmtServiceSetTeamGroupScopeRequest{
		ApiService: a,
		ctx: ctx,
		groupIdId: groupIdId,
	}
}

// Execute executes the request
//  @return SetTeamGroupScopeResponse
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceSetTeamGroupScopeExecute(r ApiTeamPermissionsMgmtServiceSetTeamGroupScopeRequest) (*SetTeamGroupScopeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SetTeamGroupScopeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamPermissionsManagementServiceAPIService.TeamPermissionsMgmtServiceSetTeamGroupScope")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/teams/groups/{group_id.id}/scope"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id.id"+"}", url.PathEscape(parameterValueToString(r.groupIdId, "groupIdId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setTeamGroupScopeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamPermissionsMgmtServiceUpdateTeamGroupRequest struct {
	ctx context.Context
	ApiService *TeamPermissionsManagementServiceAPIService
	updateTeamGroupRequest *UpdateTeamGroupRequest
}

func (r ApiTeamPermissionsMgmtServiceUpdateTeamGroupRequest) UpdateTeamGroupRequest(updateTeamGroupRequest UpdateTeamGroupRequest) ApiTeamPermissionsMgmtServiceUpdateTeamGroupRequest {
	r.updateTeamGroupRequest = &updateTeamGroupRequest
	return r
}

func (r ApiTeamPermissionsMgmtServiceUpdateTeamGroupRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.TeamPermissionsMgmtServiceUpdateTeamGroupExecute(r)
}

/*
TeamPermissionsMgmtServiceUpdateTeamGroup Update Team Group

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTeamPermissionsMgmtServiceUpdateTeamGroupRequest
*/
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceUpdateTeamGroup(ctx context.Context) ApiTeamPermissionsMgmtServiceUpdateTeamGroupRequest {
	return ApiTeamPermissionsMgmtServiceUpdateTeamGroupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *TeamPermissionsManagementServiceAPIService) TeamPermissionsMgmtServiceUpdateTeamGroupExecute(r ApiTeamPermissionsMgmtServiceUpdateTeamGroupRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamPermissionsManagementServiceAPIService.TeamPermissionsMgmtServiceUpdateTeamGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aaa/team-groups/v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateTeamGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
