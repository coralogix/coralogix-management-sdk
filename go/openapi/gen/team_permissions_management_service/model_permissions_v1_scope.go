/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team_permissions_management_service

import (
	"encoding/json"
)

// checks if the PermissionsV1Scope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionsV1Scope{}

// PermissionsV1Scope struct for PermissionsV1Scope
type PermissionsV1Scope struct {
	Filters *ScopeFilters `json:"filters,omitempty"`
	Id *ScopeId `json:"id,omitempty"`
}

// NewPermissionsV1Scope instantiates a new PermissionsV1Scope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionsV1Scope() *PermissionsV1Scope {
	this := PermissionsV1Scope{}
	return &this
}

// NewPermissionsV1ScopeWithDefaults instantiates a new PermissionsV1Scope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionsV1ScopeWithDefaults() *PermissionsV1Scope {
	this := PermissionsV1Scope{}
	return &this
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *PermissionsV1Scope) GetFilters() ScopeFilters {
	if o == nil || IsNil(o.Filters) {
		var ret ScopeFilters
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionsV1Scope) GetFiltersOk() (*ScopeFilters, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *PermissionsV1Scope) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given ScopeFilters and assigns it to the Filters field.
func (o *PermissionsV1Scope) SetFilters(v ScopeFilters) {
	o.Filters = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PermissionsV1Scope) GetId() ScopeId {
	if o == nil || IsNil(o.Id) {
		var ret ScopeId
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionsV1Scope) GetIdOk() (*ScopeId, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PermissionsV1Scope) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given ScopeId and assigns it to the Id field.
func (o *PermissionsV1Scope) SetId(v ScopeId) {
	o.Id = &v
}

func (o PermissionsV1Scope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionsV1Scope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

type NullablePermissionsV1Scope struct {
	value *PermissionsV1Scope
	isSet bool
}

func (v NullablePermissionsV1Scope) Get() *PermissionsV1Scope {
	return v.value
}

func (v *NullablePermissionsV1Scope) Set(val *PermissionsV1Scope) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionsV1Scope) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionsV1Scope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionsV1Scope(val *PermissionsV1Scope) *NullablePermissionsV1Scope {
	return &NullablePermissionsV1Scope{value: val, isSet: true}
}

func (v NullablePermissionsV1Scope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionsV1Scope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


