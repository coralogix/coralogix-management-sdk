/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team_permissions_management_service

import (
	"encoding/json"
	"fmt"
)

// GroupOrigin the model 'GroupOrigin'
type GroupOrigin string

// List of GroupOrigin
const (
	GROUPORIGIN_GROUP_ORIGIN_UNSPECIFIED GroupOrigin = "GROUP_ORIGIN_UNSPECIFIED"
	GROUPORIGIN_GROUP_ORIGIN_BUILT_IN GroupOrigin = "GROUP_ORIGIN_BUILT_IN"
	GROUPORIGIN_GROUP_ORIGIN_USER_DEFINED GroupOrigin = "GROUP_ORIGIN_USER_DEFINED"
)

// All allowed values of GroupOrigin enum
var AllowedGroupOriginEnumValues = []GroupOrigin{
	"GROUP_ORIGIN_UNSPECIFIED",
	"GROUP_ORIGIN_BUILT_IN",
	"GROUP_ORIGIN_USER_DEFINED",
}

func (v *GroupOrigin) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GroupOrigin(value)
	for _, existing := range AllowedGroupOriginEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GroupOrigin", value)
}

// NewGroupOriginFromValue returns a pointer to a valid GroupOrigin
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupOriginFromValue(v string) (*GroupOrigin, error) {
	ev := GroupOrigin(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GroupOrigin: valid values are %v", v, AllowedGroupOriginEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupOrigin) IsValid() bool {
	for _, existing := range AllowedGroupOriginEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupOrigin value
func (v GroupOrigin) Ptr() *GroupOrigin {
	return &v
}

type NullableGroupOrigin struct {
	value *GroupOrigin
	isSet bool
}

func (v NullableGroupOrigin) Get() *GroupOrigin {
	return v.value
}

func (v *NullableGroupOrigin) Set(val *GroupOrigin) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupOrigin) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupOrigin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupOrigin(val *GroupOrigin) *NullableGroupOrigin {
	return &NullableGroupOrigin{value: val, isSet: true}
}

func (v NullableGroupOrigin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupOrigin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

