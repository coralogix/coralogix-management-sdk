/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team_permissions_management_service

import (
	"encoding/json"
)

// checks if the UserUpdates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserUpdates{}

// UserUpdates This data structure represents the information associated with an API key.
type UserUpdates struct {
	UserIds []V1UserId `json:"userIds,omitempty"`
}

// NewUserUpdates instantiates a new UserUpdates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserUpdates() *UserUpdates {
	this := UserUpdates{}
	return &this
}

// NewUserUpdatesWithDefaults instantiates a new UserUpdates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserUpdatesWithDefaults() *UserUpdates {
	this := UserUpdates{}
	return &this
}

// GetUserIds returns the UserIds field value if set, zero value otherwise.
func (o *UserUpdates) GetUserIds() []V1UserId {
	if o == nil || IsNil(o.UserIds) {
		var ret []V1UserId
		return ret
	}
	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdates) GetUserIdsOk() ([]V1UserId, bool) {
	if o == nil || IsNil(o.UserIds) {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *UserUpdates) HasUserIds() bool {
	if o != nil && !IsNil(o.UserIds) {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []V1UserId and assigns it to the UserIds field.
func (o *UserUpdates) SetUserIds(v []V1UserId) {
	o.UserIds = v
}

func (o UserUpdates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserUpdates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserIds) {
		toSerialize["userIds"] = o.UserIds
	}
	return toSerialize, nil
}

type NullableUserUpdates struct {
	value *UserUpdates
	isSet bool
}

func (v NullableUserUpdates) Get() *UserUpdates {
	return v.value
}

func (v *NullableUserUpdates) Set(val *UserUpdates) {
	v.value = val
	v.isSet = true
}

func (v NullableUserUpdates) IsSet() bool {
	return v.isSet
}

func (v *NullableUserUpdates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserUpdates(val *UserUpdates) *NullableUserUpdates {
	return &NullableUserUpdates{value: val, isSet: true}
}

func (v NullableUserUpdates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserUpdates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


