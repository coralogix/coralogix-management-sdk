/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_scheduler_rule_service

import (
	"encoding/json"
	"fmt"
)

// DurationFrequency the model 'DurationFrequency'
type DurationFrequency string

// List of DurationFrequency
const (
	DURATIONFREQUENCY_DURATION_FREQUENCY_UNSPECIFIED DurationFrequency = "DURATION_FREQUENCY_UNSPECIFIED"
	DURATIONFREQUENCY_DURATION_FREQUENCY_MINUTE DurationFrequency = "DURATION_FREQUENCY_MINUTE"
	DURATIONFREQUENCY_DURATION_FREQUENCY_HOUR DurationFrequency = "DURATION_FREQUENCY_HOUR"
	DURATIONFREQUENCY_DURATION_FREQUENCY_DAY DurationFrequency = "DURATION_FREQUENCY_DAY"
)

// All allowed values of DurationFrequency enum
var AllowedDurationFrequencyEnumValues = []DurationFrequency{
	"DURATION_FREQUENCY_UNSPECIFIED",
	"DURATION_FREQUENCY_MINUTE",
	"DURATION_FREQUENCY_HOUR",
	"DURATION_FREQUENCY_DAY",
}

func (v *DurationFrequency) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DurationFrequency(value)
	for _, existing := range AllowedDurationFrequencyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DurationFrequency", value)
}

// NewDurationFrequencyFromValue returns a pointer to a valid DurationFrequency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDurationFrequencyFromValue(v string) (*DurationFrequency, error) {
	ev := DurationFrequency(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DurationFrequency: valid values are %v", v, AllowedDurationFrequencyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DurationFrequency) IsValid() bool {
	for _, existing := range AllowedDurationFrequencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DurationFrequency value
func (v DurationFrequency) Ptr() *DurationFrequency {
	return &v
}

type NullableDurationFrequency struct {
	value *DurationFrequency
	isSet bool
}

func (v NullableDurationFrequency) Get() *DurationFrequency {
	return v.value
}

func (v *NullableDurationFrequency) Set(val *DurationFrequency) {
	v.value = val
	v.isSet = true
}

func (v NullableDurationFrequency) IsSet() bool {
	return v.isSet
}

func (v *NullableDurationFrequency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDurationFrequency(val *DurationFrequency) *NullableDurationFrequency {
	return &NullableDurationFrequency{value: val, isSet: true}
}

func (v NullableDurationFrequency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDurationFrequency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

