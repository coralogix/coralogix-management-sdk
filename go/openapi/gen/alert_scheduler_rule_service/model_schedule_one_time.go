/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_scheduler_rule_service

import (
	"encoding/json"
)

// checks if the ScheduleOneTime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleOneTime{}

// ScheduleOneTime struct for ScheduleOneTime
type ScheduleOneTime struct {
	OneTime *OneTime `json:"oneTime,omitempty"`
	ScheduleOperation *ScheduleOperation `json:"scheduleOperation,omitempty"`
}

// NewScheduleOneTime instantiates a new ScheduleOneTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleOneTime() *ScheduleOneTime {
	this := ScheduleOneTime{}
	return &this
}

// NewScheduleOneTimeWithDefaults instantiates a new ScheduleOneTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleOneTimeWithDefaults() *ScheduleOneTime {
	this := ScheduleOneTime{}
	return &this
}

// GetOneTime returns the OneTime field value if set, zero value otherwise.
func (o *ScheduleOneTime) GetOneTime() OneTime {
	if o == nil || IsNil(o.OneTime) {
		var ret OneTime
		return ret
	}
	return *o.OneTime
}

// GetOneTimeOk returns a tuple with the OneTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleOneTime) GetOneTimeOk() (*OneTime, bool) {
	if o == nil || IsNil(o.OneTime) {
		return nil, false
	}
	return o.OneTime, true
}

// HasOneTime returns a boolean if a field has been set.
func (o *ScheduleOneTime) HasOneTime() bool {
	if o != nil && !IsNil(o.OneTime) {
		return true
	}

	return false
}

// SetOneTime gets a reference to the given OneTime and assigns it to the OneTime field.
func (o *ScheduleOneTime) SetOneTime(v OneTime) {
	o.OneTime = &v
}

// GetScheduleOperation returns the ScheduleOperation field value if set, zero value otherwise.
func (o *ScheduleOneTime) GetScheduleOperation() ScheduleOperation {
	if o == nil || IsNil(o.ScheduleOperation) {
		var ret ScheduleOperation
		return ret
	}
	return *o.ScheduleOperation
}

// GetScheduleOperationOk returns a tuple with the ScheduleOperation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleOneTime) GetScheduleOperationOk() (*ScheduleOperation, bool) {
	if o == nil || IsNil(o.ScheduleOperation) {
		return nil, false
	}
	return o.ScheduleOperation, true
}

// HasScheduleOperation returns a boolean if a field has been set.
func (o *ScheduleOneTime) HasScheduleOperation() bool {
	if o != nil && !IsNil(o.ScheduleOperation) {
		return true
	}

	return false
}

// SetScheduleOperation gets a reference to the given ScheduleOperation and assigns it to the ScheduleOperation field.
func (o *ScheduleOneTime) SetScheduleOperation(v ScheduleOperation) {
	o.ScheduleOperation = &v
}

func (o ScheduleOneTime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleOneTime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OneTime) {
		toSerialize["oneTime"] = o.OneTime
	}
	if !IsNil(o.ScheduleOperation) {
		toSerialize["scheduleOperation"] = o.ScheduleOperation
	}
	return toSerialize, nil
}

type NullableScheduleOneTime struct {
	value *ScheduleOneTime
	isSet bool
}

func (v NullableScheduleOneTime) Get() *ScheduleOneTime {
	return v.value
}

func (v *NullableScheduleOneTime) Set(val *ScheduleOneTime) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleOneTime) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleOneTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleOneTime(val *ScheduleOneTime) *NullableScheduleOneTime {
	return &NullableScheduleOneTime{value: val, isSet: true}
}

func (v NullableScheduleOneTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleOneTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


