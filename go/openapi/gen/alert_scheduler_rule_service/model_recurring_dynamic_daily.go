/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_scheduler_rule_service

import (
	"encoding/json"
)

// checks if the RecurringDynamicDaily type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecurringDynamicDaily{}

// RecurringDynamicDaily struct for RecurringDynamicDaily
type RecurringDynamicDaily struct {
	Daily map[string]interface{} `json:"daily,omitempty"`
	RepeatEvery *int32 `json:"repeatEvery,omitempty"`
	TerminationDate *string `json:"terminationDate,omitempty"`
	Timeframe *Timeframe `json:"timeframe,omitempty"`
}

// NewRecurringDynamicDaily instantiates a new RecurringDynamicDaily object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurringDynamicDaily() *RecurringDynamicDaily {
	this := RecurringDynamicDaily{}
	return &this
}

// NewRecurringDynamicDailyWithDefaults instantiates a new RecurringDynamicDaily object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurringDynamicDailyWithDefaults() *RecurringDynamicDaily {
	this := RecurringDynamicDaily{}
	return &this
}

// GetDaily returns the Daily field value if set, zero value otherwise.
func (o *RecurringDynamicDaily) GetDaily() map[string]interface{} {
	if o == nil || IsNil(o.Daily) {
		var ret map[string]interface{}
		return ret
	}
	return o.Daily
}

// GetDailyOk returns a tuple with the Daily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringDynamicDaily) GetDailyOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Daily) {
		return map[string]interface{}{}, false
	}
	return o.Daily, true
}

// HasDaily returns a boolean if a field has been set.
func (o *RecurringDynamicDaily) HasDaily() bool {
	if o != nil && !IsNil(o.Daily) {
		return true
	}

	return false
}

// SetDaily gets a reference to the given map[string]interface{} and assigns it to the Daily field.
func (o *RecurringDynamicDaily) SetDaily(v map[string]interface{}) {
	o.Daily = v
}

// GetRepeatEvery returns the RepeatEvery field value if set, zero value otherwise.
func (o *RecurringDynamicDaily) GetRepeatEvery() int32 {
	if o == nil || IsNil(o.RepeatEvery) {
		var ret int32
		return ret
	}
	return *o.RepeatEvery
}

// GetRepeatEveryOk returns a tuple with the RepeatEvery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringDynamicDaily) GetRepeatEveryOk() (*int32, bool) {
	if o == nil || IsNil(o.RepeatEvery) {
		return nil, false
	}
	return o.RepeatEvery, true
}

// HasRepeatEvery returns a boolean if a field has been set.
func (o *RecurringDynamicDaily) HasRepeatEvery() bool {
	if o != nil && !IsNil(o.RepeatEvery) {
		return true
	}

	return false
}

// SetRepeatEvery gets a reference to the given int32 and assigns it to the RepeatEvery field.
func (o *RecurringDynamicDaily) SetRepeatEvery(v int32) {
	o.RepeatEvery = &v
}

// GetTerminationDate returns the TerminationDate field value if set, zero value otherwise.
func (o *RecurringDynamicDaily) GetTerminationDate() string {
	if o == nil || IsNil(o.TerminationDate) {
		var ret string
		return ret
	}
	return *o.TerminationDate
}

// GetTerminationDateOk returns a tuple with the TerminationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringDynamicDaily) GetTerminationDateOk() (*string, bool) {
	if o == nil || IsNil(o.TerminationDate) {
		return nil, false
	}
	return o.TerminationDate, true
}

// HasTerminationDate returns a boolean if a field has been set.
func (o *RecurringDynamicDaily) HasTerminationDate() bool {
	if o != nil && !IsNil(o.TerminationDate) {
		return true
	}

	return false
}

// SetTerminationDate gets a reference to the given string and assigns it to the TerminationDate field.
func (o *RecurringDynamicDaily) SetTerminationDate(v string) {
	o.TerminationDate = &v
}

// GetTimeframe returns the Timeframe field value if set, zero value otherwise.
func (o *RecurringDynamicDaily) GetTimeframe() Timeframe {
	if o == nil || IsNil(o.Timeframe) {
		var ret Timeframe
		return ret
	}
	return *o.Timeframe
}

// GetTimeframeOk returns a tuple with the Timeframe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringDynamicDaily) GetTimeframeOk() (*Timeframe, bool) {
	if o == nil || IsNil(o.Timeframe) {
		return nil, false
	}
	return o.Timeframe, true
}

// HasTimeframe returns a boolean if a field has been set.
func (o *RecurringDynamicDaily) HasTimeframe() bool {
	if o != nil && !IsNil(o.Timeframe) {
		return true
	}

	return false
}

// SetTimeframe gets a reference to the given Timeframe and assigns it to the Timeframe field.
func (o *RecurringDynamicDaily) SetTimeframe(v Timeframe) {
	o.Timeframe = &v
}

func (o RecurringDynamicDaily) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecurringDynamicDaily) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Daily) {
		toSerialize["daily"] = o.Daily
	}
	if !IsNil(o.RepeatEvery) {
		toSerialize["repeatEvery"] = o.RepeatEvery
	}
	if !IsNil(o.TerminationDate) {
		toSerialize["terminationDate"] = o.TerminationDate
	}
	if !IsNil(o.Timeframe) {
		toSerialize["timeframe"] = o.Timeframe
	}
	return toSerialize, nil
}

type NullableRecurringDynamicDaily struct {
	value *RecurringDynamicDaily
	isSet bool
}

func (v NullableRecurringDynamicDaily) Get() *RecurringDynamicDaily {
	return v.value
}

func (v *NullableRecurringDynamicDaily) Set(val *RecurringDynamicDaily) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurringDynamicDaily) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurringDynamicDaily) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurringDynamicDaily(val *RecurringDynamicDaily) *NullableRecurringDynamicDaily {
	return &NullableRecurringDynamicDaily{value: val, isSet: true}
}

func (v NullableRecurringDynamicDaily) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurringDynamicDaily) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


