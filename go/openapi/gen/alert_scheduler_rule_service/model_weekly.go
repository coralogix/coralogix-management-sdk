/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_scheduler_rule_service

import (
	"encoding/json"
)

// checks if the Weekly type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Weekly{}

// Weekly struct for Weekly
type Weekly struct {
	DaysOfWeek []int32 `json:"daysOfWeek,omitempty"`
}

// NewWeekly instantiates a new Weekly object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWeekly() *Weekly {
	this := Weekly{}
	return &this
}

// NewWeeklyWithDefaults instantiates a new Weekly object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWeeklyWithDefaults() *Weekly {
	this := Weekly{}
	return &this
}

// GetDaysOfWeek returns the DaysOfWeek field value if set, zero value otherwise.
func (o *Weekly) GetDaysOfWeek() []int32 {
	if o == nil || IsNil(o.DaysOfWeek) {
		var ret []int32
		return ret
	}
	return o.DaysOfWeek
}

// GetDaysOfWeekOk returns a tuple with the DaysOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Weekly) GetDaysOfWeekOk() ([]int32, bool) {
	if o == nil || IsNil(o.DaysOfWeek) {
		return nil, false
	}
	return o.DaysOfWeek, true
}

// HasDaysOfWeek returns a boolean if a field has been set.
func (o *Weekly) HasDaysOfWeek() bool {
	if o != nil && !IsNil(o.DaysOfWeek) {
		return true
	}

	return false
}

// SetDaysOfWeek gets a reference to the given []int32 and assigns it to the DaysOfWeek field.
func (o *Weekly) SetDaysOfWeek(v []int32) {
	o.DaysOfWeek = v
}

func (o Weekly) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Weekly) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DaysOfWeek) {
		toSerialize["daysOfWeek"] = o.DaysOfWeek
	}
	return toSerialize, nil
}

type NullableWeekly struct {
	value *Weekly
	isSet bool
}

func (v NullableWeekly) Get() *Weekly {
	return v.value
}

func (v *NullableWeekly) Set(val *Weekly) {
	v.value = val
	v.isSet = true
}

func (v NullableWeekly) IsSet() bool {
	return v.isSet
}

func (v *NullableWeekly) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWeekly(val *Weekly) *NullableWeekly {
	return &NullableWeekly{value: val, isSet: true}
}

func (v NullableWeekly) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWeekly) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


