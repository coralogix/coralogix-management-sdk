/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_scheduler_rule_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Recurring - struct for Recurring
type Recurring struct {
	RecurringAlways *RecurringAlways
	RecurringDynamic *RecurringDynamic
}

// RecurringAlwaysAsRecurring is a convenience function that returns RecurringAlways wrapped in Recurring
func RecurringAlwaysAsRecurring(v *RecurringAlways) Recurring {
	return Recurring{
		RecurringAlways: v,
	}
}

// RecurringDynamicAsRecurring is a convenience function that returns RecurringDynamic wrapped in Recurring
func RecurringDynamicAsRecurring(v *RecurringDynamic) Recurring {
	return Recurring{
		RecurringDynamic: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Recurring) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RecurringAlways
	err = newStrictDecoder(data).Decode(&dst.RecurringAlways)
	if err == nil {
		jsonRecurringAlways, _ := json.Marshal(dst.RecurringAlways)
		if string(jsonRecurringAlways) == "{}" { // empty struct
			dst.RecurringAlways = nil
		} else {
			if err = validator.Validate(dst.RecurringAlways); err != nil {
				dst.RecurringAlways = nil
			} else {
				match++
			}
		}
	} else {
		dst.RecurringAlways = nil
	}

	// try to unmarshal data into RecurringDynamic
	err = newStrictDecoder(data).Decode(&dst.RecurringDynamic)
	if err == nil {
		jsonRecurringDynamic, _ := json.Marshal(dst.RecurringDynamic)
		if string(jsonRecurringDynamic) == "{}" { // empty struct
			dst.RecurringDynamic = nil
		} else {
			if err = validator.Validate(dst.RecurringDynamic); err != nil {
				dst.RecurringDynamic = nil
			} else {
				match++
			}
		}
	} else {
		dst.RecurringDynamic = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RecurringAlways = nil
		dst.RecurringDynamic = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Recurring)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Recurring)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Recurring) MarshalJSON() ([]byte, error) {
	if src.RecurringAlways != nil {
		return json.Marshal(&src.RecurringAlways)
	}

	if src.RecurringDynamic != nil {
		return json.Marshal(&src.RecurringDynamic)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Recurring) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RecurringAlways != nil {
		return obj.RecurringAlways
	}

	if obj.RecurringDynamic != nil {
		return obj.RecurringDynamic
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Recurring) GetActualInstanceValue() (interface{}) {
	if obj.RecurringAlways != nil {
		return *obj.RecurringAlways
	}

	if obj.RecurringDynamic != nil {
		return *obj.RecurringDynamic
	}

	// all schemas are nil
	return nil
}

type NullableRecurring struct {
	value *Recurring
	isSet bool
}

func (v NullableRecurring) Get() *Recurring {
	return v.value
}

func (v *NullableRecurring) Set(val *Recurring) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurring) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurring) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurring(val *Recurring) *NullableRecurring {
	return &NullableRecurring{value: val, isSet: true}
}

func (v NullableRecurring) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurring) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


