/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_scheduler_rule_service

import (
	"encoding/json"
)

// checks if the AlertSchedulerRuleWithActiveTimeframe type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertSchedulerRuleWithActiveTimeframe{}

// AlertSchedulerRuleWithActiveTimeframe struct for AlertSchedulerRuleWithActiveTimeframe
type AlertSchedulerRuleWithActiveTimeframe struct {
	AlertSchedulerRule *AlertSchedulerRule `json:"alertSchedulerRule,omitempty"`
	NextActiveTimeframes []ActiveTimeframe `json:"nextActiveTimeframes,omitempty"`
}

// NewAlertSchedulerRuleWithActiveTimeframe instantiates a new AlertSchedulerRuleWithActiveTimeframe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertSchedulerRuleWithActiveTimeframe() *AlertSchedulerRuleWithActiveTimeframe {
	this := AlertSchedulerRuleWithActiveTimeframe{}
	return &this
}

// NewAlertSchedulerRuleWithActiveTimeframeWithDefaults instantiates a new AlertSchedulerRuleWithActiveTimeframe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertSchedulerRuleWithActiveTimeframeWithDefaults() *AlertSchedulerRuleWithActiveTimeframe {
	this := AlertSchedulerRuleWithActiveTimeframe{}
	return &this
}

// GetAlertSchedulerRule returns the AlertSchedulerRule field value if set, zero value otherwise.
func (o *AlertSchedulerRuleWithActiveTimeframe) GetAlertSchedulerRule() AlertSchedulerRule {
	if o == nil || IsNil(o.AlertSchedulerRule) {
		var ret AlertSchedulerRule
		return ret
	}
	return *o.AlertSchedulerRule
}

// GetAlertSchedulerRuleOk returns a tuple with the AlertSchedulerRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSchedulerRuleWithActiveTimeframe) GetAlertSchedulerRuleOk() (*AlertSchedulerRule, bool) {
	if o == nil || IsNil(o.AlertSchedulerRule) {
		return nil, false
	}
	return o.AlertSchedulerRule, true
}

// HasAlertSchedulerRule returns a boolean if a field has been set.
func (o *AlertSchedulerRuleWithActiveTimeframe) HasAlertSchedulerRule() bool {
	if o != nil && !IsNil(o.AlertSchedulerRule) {
		return true
	}

	return false
}

// SetAlertSchedulerRule gets a reference to the given AlertSchedulerRule and assigns it to the AlertSchedulerRule field.
func (o *AlertSchedulerRuleWithActiveTimeframe) SetAlertSchedulerRule(v AlertSchedulerRule) {
	o.AlertSchedulerRule = &v
}

// GetNextActiveTimeframes returns the NextActiveTimeframes field value if set, zero value otherwise.
func (o *AlertSchedulerRuleWithActiveTimeframe) GetNextActiveTimeframes() []ActiveTimeframe {
	if o == nil || IsNil(o.NextActiveTimeframes) {
		var ret []ActiveTimeframe
		return ret
	}
	return o.NextActiveTimeframes
}

// GetNextActiveTimeframesOk returns a tuple with the NextActiveTimeframes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSchedulerRuleWithActiveTimeframe) GetNextActiveTimeframesOk() ([]ActiveTimeframe, bool) {
	if o == nil || IsNil(o.NextActiveTimeframes) {
		return nil, false
	}
	return o.NextActiveTimeframes, true
}

// HasNextActiveTimeframes returns a boolean if a field has been set.
func (o *AlertSchedulerRuleWithActiveTimeframe) HasNextActiveTimeframes() bool {
	if o != nil && !IsNil(o.NextActiveTimeframes) {
		return true
	}

	return false
}

// SetNextActiveTimeframes gets a reference to the given []ActiveTimeframe and assigns it to the NextActiveTimeframes field.
func (o *AlertSchedulerRuleWithActiveTimeframe) SetNextActiveTimeframes(v []ActiveTimeframe) {
	o.NextActiveTimeframes = v
}

func (o AlertSchedulerRuleWithActiveTimeframe) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertSchedulerRuleWithActiveTimeframe) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AlertSchedulerRule) {
		toSerialize["alertSchedulerRule"] = o.AlertSchedulerRule
	}
	if !IsNil(o.NextActiveTimeframes) {
		toSerialize["nextActiveTimeframes"] = o.NextActiveTimeframes
	}
	return toSerialize, nil
}

type NullableAlertSchedulerRuleWithActiveTimeframe struct {
	value *AlertSchedulerRuleWithActiveTimeframe
	isSet bool
}

func (v NullableAlertSchedulerRuleWithActiveTimeframe) Get() *AlertSchedulerRuleWithActiveTimeframe {
	return v.value
}

func (v *NullableAlertSchedulerRuleWithActiveTimeframe) Set(val *AlertSchedulerRuleWithActiveTimeframe) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertSchedulerRuleWithActiveTimeframe) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertSchedulerRuleWithActiveTimeframe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertSchedulerRuleWithActiveTimeframe(val *AlertSchedulerRuleWithActiveTimeframe) *NullableAlertSchedulerRuleWithActiveTimeframe {
	return &NullableAlertSchedulerRuleWithActiveTimeframe{value: val, isSet: true}
}

func (v NullableAlertSchedulerRuleWithActiveTimeframe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertSchedulerRuleWithActiveTimeframe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


