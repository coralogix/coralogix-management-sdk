/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_scheduler_rule_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// RecurringDynamic - struct for RecurringDynamic
type RecurringDynamic struct {
	RecurringDynamicOneOf *RecurringDynamicOneOf
	RecurringDynamicOneOf1 *RecurringDynamicOneOf1
	RecurringDynamicOneOf2 *RecurringDynamicOneOf2
}

// RecurringDynamicOneOfAsRecurringDynamic is a convenience function that returns RecurringDynamicOneOf wrapped in RecurringDynamic
func RecurringDynamicOneOfAsRecurringDynamic(v *RecurringDynamicOneOf) RecurringDynamic {
	return RecurringDynamic{
		RecurringDynamicOneOf: v,
	}
}

// RecurringDynamicOneOf1AsRecurringDynamic is a convenience function that returns RecurringDynamicOneOf1 wrapped in RecurringDynamic
func RecurringDynamicOneOf1AsRecurringDynamic(v *RecurringDynamicOneOf1) RecurringDynamic {
	return RecurringDynamic{
		RecurringDynamicOneOf1: v,
	}
}

// RecurringDynamicOneOf2AsRecurringDynamic is a convenience function that returns RecurringDynamicOneOf2 wrapped in RecurringDynamic
func RecurringDynamicOneOf2AsRecurringDynamic(v *RecurringDynamicOneOf2) RecurringDynamic {
	return RecurringDynamic{
		RecurringDynamicOneOf2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RecurringDynamic) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RecurringDynamicOneOf
	err = newStrictDecoder(data).Decode(&dst.RecurringDynamicOneOf)
	if err == nil {
		jsonRecurringDynamicOneOf, _ := json.Marshal(dst.RecurringDynamicOneOf)
		if string(jsonRecurringDynamicOneOf) == "{}" { // empty struct
			dst.RecurringDynamicOneOf = nil
		} else {
			if err = validator.Validate(dst.RecurringDynamicOneOf); err != nil {
				dst.RecurringDynamicOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.RecurringDynamicOneOf = nil
	}

	// try to unmarshal data into RecurringDynamicOneOf1
	err = newStrictDecoder(data).Decode(&dst.RecurringDynamicOneOf1)
	if err == nil {
		jsonRecurringDynamicOneOf1, _ := json.Marshal(dst.RecurringDynamicOneOf1)
		if string(jsonRecurringDynamicOneOf1) == "{}" { // empty struct
			dst.RecurringDynamicOneOf1 = nil
		} else {
			if err = validator.Validate(dst.RecurringDynamicOneOf1); err != nil {
				dst.RecurringDynamicOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.RecurringDynamicOneOf1 = nil
	}

	// try to unmarshal data into RecurringDynamicOneOf2
	err = newStrictDecoder(data).Decode(&dst.RecurringDynamicOneOf2)
	if err == nil {
		jsonRecurringDynamicOneOf2, _ := json.Marshal(dst.RecurringDynamicOneOf2)
		if string(jsonRecurringDynamicOneOf2) == "{}" { // empty struct
			dst.RecurringDynamicOneOf2 = nil
		} else {
			if err = validator.Validate(dst.RecurringDynamicOneOf2); err != nil {
				dst.RecurringDynamicOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.RecurringDynamicOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RecurringDynamicOneOf = nil
		dst.RecurringDynamicOneOf1 = nil
		dst.RecurringDynamicOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RecurringDynamic)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RecurringDynamic)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RecurringDynamic) MarshalJSON() ([]byte, error) {
	if src.RecurringDynamicOneOf != nil {
		return json.Marshal(&src.RecurringDynamicOneOf)
	}

	if src.RecurringDynamicOneOf1 != nil {
		return json.Marshal(&src.RecurringDynamicOneOf1)
	}

	if src.RecurringDynamicOneOf2 != nil {
		return json.Marshal(&src.RecurringDynamicOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RecurringDynamic) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RecurringDynamicOneOf != nil {
		return obj.RecurringDynamicOneOf
	}

	if obj.RecurringDynamicOneOf1 != nil {
		return obj.RecurringDynamicOneOf1
	}

	if obj.RecurringDynamicOneOf2 != nil {
		return obj.RecurringDynamicOneOf2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj RecurringDynamic) GetActualInstanceValue() (interface{}) {
	if obj.RecurringDynamicOneOf != nil {
		return *obj.RecurringDynamicOneOf
	}

	if obj.RecurringDynamicOneOf1 != nil {
		return *obj.RecurringDynamicOneOf1
	}

	if obj.RecurringDynamicOneOf2 != nil {
		return *obj.RecurringDynamicOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableRecurringDynamic struct {
	value *RecurringDynamic
	isSet bool
}

func (v NullableRecurringDynamic) Get() *RecurringDynamic {
	return v.value
}

func (v *NullableRecurringDynamic) Set(val *RecurringDynamic) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurringDynamic) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurringDynamic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurringDynamic(val *RecurringDynamic) *NullableRecurringDynamic {
	return &NullableRecurringDynamic{value: val, isSet: true}
}

func (v NullableRecurringDynamic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurringDynamic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


