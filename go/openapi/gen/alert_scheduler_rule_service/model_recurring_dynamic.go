/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_scheduler_rule_service

import (
	"encoding/json"
)

// checks if the RecurringDynamic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecurringDynamic{}

// RecurringDynamic struct for RecurringDynamic
type RecurringDynamic struct {
	Dynamic *RecurringDynamic `json:"dynamic,omitempty"`
}

// NewRecurringDynamic instantiates a new RecurringDynamic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurringDynamic() *RecurringDynamic {
	this := RecurringDynamic{}
	return &this
}

// NewRecurringDynamicWithDefaults instantiates a new RecurringDynamic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurringDynamicWithDefaults() *RecurringDynamic {
	this := RecurringDynamic{}
	return &this
}

// GetDynamic returns the Dynamic field value if set, zero value otherwise.
func (o *RecurringDynamic) GetDynamic() RecurringDynamic {
	if o == nil || IsNil(o.Dynamic) {
		var ret RecurringDynamic
		return ret
	}
	return *o.Dynamic
}

// GetDynamicOk returns a tuple with the Dynamic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringDynamic) GetDynamicOk() (*RecurringDynamic, bool) {
	if o == nil || IsNil(o.Dynamic) {
		return nil, false
	}
	return o.Dynamic, true
}

// HasDynamic returns a boolean if a field has been set.
func (o *RecurringDynamic) HasDynamic() bool {
	if o != nil && !IsNil(o.Dynamic) {
		return true
	}

	return false
}

// SetDynamic gets a reference to the given RecurringDynamic and assigns it to the Dynamic field.
func (o *RecurringDynamic) SetDynamic(v RecurringDynamic) {
	o.Dynamic = &v
}

func (o RecurringDynamic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecurringDynamic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dynamic) {
		toSerialize["dynamic"] = o.Dynamic
	}
	return toSerialize, nil
}

type NullableRecurringDynamic struct {
	value *RecurringDynamic
	isSet bool
}

func (v NullableRecurringDynamic) Get() *RecurringDynamic {
	return v.value
}

func (v *NullableRecurringDynamic) Set(val *RecurringDynamic) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurringDynamic) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurringDynamic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurringDynamic(val *RecurringDynamic) *NullableRecurringDynamic {
	return &NullableRecurringDynamic{value: val, isSet: true}
}

func (v NullableRecurringDynamic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurringDynamic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


