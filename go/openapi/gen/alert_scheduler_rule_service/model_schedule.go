/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_scheduler_rule_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Schedule - struct for Schedule
type Schedule struct {
	ScheduleOneOf *ScheduleOneOf
	ScheduleOneOf1 *ScheduleOneOf1
}

// ScheduleOneOfAsSchedule is a convenience function that returns ScheduleOneOf wrapped in Schedule
func ScheduleOneOfAsSchedule(v *ScheduleOneOf) Schedule {
	return Schedule{
		ScheduleOneOf: v,
	}
}

// ScheduleOneOf1AsSchedule is a convenience function that returns ScheduleOneOf1 wrapped in Schedule
func ScheduleOneOf1AsSchedule(v *ScheduleOneOf1) Schedule {
	return Schedule{
		ScheduleOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Schedule) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ScheduleOneOf
	err = newStrictDecoder(data).Decode(&dst.ScheduleOneOf)
	if err == nil {
		jsonScheduleOneOf, _ := json.Marshal(dst.ScheduleOneOf)
		if string(jsonScheduleOneOf) == "{}" { // empty struct
			dst.ScheduleOneOf = nil
		} else {
			if err = validator.Validate(dst.ScheduleOneOf); err != nil {
				dst.ScheduleOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.ScheduleOneOf = nil
	}

	// try to unmarshal data into ScheduleOneOf1
	err = newStrictDecoder(data).Decode(&dst.ScheduleOneOf1)
	if err == nil {
		jsonScheduleOneOf1, _ := json.Marshal(dst.ScheduleOneOf1)
		if string(jsonScheduleOneOf1) == "{}" { // empty struct
			dst.ScheduleOneOf1 = nil
		} else {
			if err = validator.Validate(dst.ScheduleOneOf1); err != nil {
				dst.ScheduleOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ScheduleOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ScheduleOneOf = nil
		dst.ScheduleOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Schedule)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Schedule)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Schedule) MarshalJSON() ([]byte, error) {
	if src.ScheduleOneOf != nil {
		return json.Marshal(&src.ScheduleOneOf)
	}

	if src.ScheduleOneOf1 != nil {
		return json.Marshal(&src.ScheduleOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Schedule) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ScheduleOneOf != nil {
		return obj.ScheduleOneOf
	}

	if obj.ScheduleOneOf1 != nil {
		return obj.ScheduleOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Schedule) GetActualInstanceValue() (interface{}) {
	if obj.ScheduleOneOf != nil {
		return *obj.ScheduleOneOf
	}

	if obj.ScheduleOneOf1 != nil {
		return *obj.ScheduleOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableSchedule struct {
	value *Schedule
	isSet bool
}

func (v NullableSchedule) Get() *Schedule {
	return v.value
}

func (v *NullableSchedule) Set(val *Schedule) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedule(val *Schedule) *NullableSchedule {
	return &NullableSchedule{value: val, isSet: true}
}

func (v NullableSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


