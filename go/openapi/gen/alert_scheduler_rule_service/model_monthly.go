/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_scheduler_rule_service

import (
	"encoding/json"
)

// checks if the Monthly type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Monthly{}

// Monthly struct for Monthly
type Monthly struct {
	DaysOfMonth []int32 `json:"daysOfMonth,omitempty"`
}

// NewMonthly instantiates a new Monthly object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonthly() *Monthly {
	this := Monthly{}
	return &this
}

// NewMonthlyWithDefaults instantiates a new Monthly object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonthlyWithDefaults() *Monthly {
	this := Monthly{}
	return &this
}

// GetDaysOfMonth returns the DaysOfMonth field value if set, zero value otherwise.
func (o *Monthly) GetDaysOfMonth() []int32 {
	if o == nil || IsNil(o.DaysOfMonth) {
		var ret []int32
		return ret
	}
	return o.DaysOfMonth
}

// GetDaysOfMonthOk returns a tuple with the DaysOfMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monthly) GetDaysOfMonthOk() ([]int32, bool) {
	if o == nil || IsNil(o.DaysOfMonth) {
		return nil, false
	}
	return o.DaysOfMonth, true
}

// HasDaysOfMonth returns a boolean if a field has been set.
func (o *Monthly) HasDaysOfMonth() bool {
	if o != nil && !IsNil(o.DaysOfMonth) {
		return true
	}

	return false
}

// SetDaysOfMonth gets a reference to the given []int32 and assigns it to the DaysOfMonth field.
func (o *Monthly) SetDaysOfMonth(v []int32) {
	o.DaysOfMonth = v
}

func (o Monthly) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Monthly) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DaysOfMonth) {
		toSerialize["daysOfMonth"] = o.DaysOfMonth
	}
	return toSerialize, nil
}

type NullableMonthly struct {
	value *Monthly
	isSet bool
}

func (v NullableMonthly) Get() *Monthly {
	return v.value
}

func (v *NullableMonthly) Set(val *Monthly) {
	v.value = val
	v.isSet = true
}

func (v NullableMonthly) IsSet() bool {
	return v.isSet
}

func (v *NullableMonthly) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonthly(val *Monthly) *NullableMonthly {
	return &NullableMonthly{value: val, isSet: true}
}

func (v NullableMonthly) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonthly) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


