/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_scheduler_rule_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// AlertSchedulerRuleProtobufV1Filter - struct for AlertSchedulerRuleProtobufV1Filter
type AlertSchedulerRuleProtobufV1Filter struct {
	AlertSchedulerRuleProtobufV1FilterAlertMetaLabels *AlertSchedulerRuleProtobufV1FilterAlertMetaLabels
	AlertSchedulerRuleProtobufV1FilterAlertUniqueIds *AlertSchedulerRuleProtobufV1FilterAlertUniqueIds
}

// AlertSchedulerRuleProtobufV1FilterAlertMetaLabelsAsAlertSchedulerRuleProtobufV1Filter is a convenience function that returns AlertSchedulerRuleProtobufV1FilterAlertMetaLabels wrapped in AlertSchedulerRuleProtobufV1Filter
func AlertSchedulerRuleProtobufV1FilterAlertMetaLabelsAsAlertSchedulerRuleProtobufV1Filter(v *AlertSchedulerRuleProtobufV1FilterAlertMetaLabels) AlertSchedulerRuleProtobufV1Filter {
	return AlertSchedulerRuleProtobufV1Filter{
		AlertSchedulerRuleProtobufV1FilterAlertMetaLabels: v,
	}
}

// AlertSchedulerRuleProtobufV1FilterAlertUniqueIdsAsAlertSchedulerRuleProtobufV1Filter is a convenience function that returns AlertSchedulerRuleProtobufV1FilterAlertUniqueIds wrapped in AlertSchedulerRuleProtobufV1Filter
func AlertSchedulerRuleProtobufV1FilterAlertUniqueIdsAsAlertSchedulerRuleProtobufV1Filter(v *AlertSchedulerRuleProtobufV1FilterAlertUniqueIds) AlertSchedulerRuleProtobufV1Filter {
	return AlertSchedulerRuleProtobufV1Filter{
		AlertSchedulerRuleProtobufV1FilterAlertUniqueIds: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AlertSchedulerRuleProtobufV1Filter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AlertSchedulerRuleProtobufV1FilterAlertMetaLabels
	err = newStrictDecoder(data).Decode(&dst.AlertSchedulerRuleProtobufV1FilterAlertMetaLabels)
	if err == nil {
		jsonAlertSchedulerRuleProtobufV1FilterAlertMetaLabels, _ := json.Marshal(dst.AlertSchedulerRuleProtobufV1FilterAlertMetaLabels)
		if string(jsonAlertSchedulerRuleProtobufV1FilterAlertMetaLabels) == "{}" { // empty struct
			dst.AlertSchedulerRuleProtobufV1FilterAlertMetaLabels = nil
		} else {
			if err = validator.Validate(dst.AlertSchedulerRuleProtobufV1FilterAlertMetaLabels); err != nil {
				dst.AlertSchedulerRuleProtobufV1FilterAlertMetaLabels = nil
			} else {
				match++
			}
		}
	} else {
		dst.AlertSchedulerRuleProtobufV1FilterAlertMetaLabels = nil
	}

	// try to unmarshal data into AlertSchedulerRuleProtobufV1FilterAlertUniqueIds
	err = newStrictDecoder(data).Decode(&dst.AlertSchedulerRuleProtobufV1FilterAlertUniqueIds)
	if err == nil {
		jsonAlertSchedulerRuleProtobufV1FilterAlertUniqueIds, _ := json.Marshal(dst.AlertSchedulerRuleProtobufV1FilterAlertUniqueIds)
		if string(jsonAlertSchedulerRuleProtobufV1FilterAlertUniqueIds) == "{}" { // empty struct
			dst.AlertSchedulerRuleProtobufV1FilterAlertUniqueIds = nil
		} else {
			if err = validator.Validate(dst.AlertSchedulerRuleProtobufV1FilterAlertUniqueIds); err != nil {
				dst.AlertSchedulerRuleProtobufV1FilterAlertUniqueIds = nil
			} else {
				match++
			}
		}
	} else {
		dst.AlertSchedulerRuleProtobufV1FilterAlertUniqueIds = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AlertSchedulerRuleProtobufV1FilterAlertMetaLabels = nil
		dst.AlertSchedulerRuleProtobufV1FilterAlertUniqueIds = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AlertSchedulerRuleProtobufV1Filter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AlertSchedulerRuleProtobufV1Filter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AlertSchedulerRuleProtobufV1Filter) MarshalJSON() ([]byte, error) {
	if src.AlertSchedulerRuleProtobufV1FilterAlertMetaLabels != nil {
		return json.Marshal(&src.AlertSchedulerRuleProtobufV1FilterAlertMetaLabels)
	}

	if src.AlertSchedulerRuleProtobufV1FilterAlertUniqueIds != nil {
		return json.Marshal(&src.AlertSchedulerRuleProtobufV1FilterAlertUniqueIds)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AlertSchedulerRuleProtobufV1Filter) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AlertSchedulerRuleProtobufV1FilterAlertMetaLabels != nil {
		return obj.AlertSchedulerRuleProtobufV1FilterAlertMetaLabels
	}

	if obj.AlertSchedulerRuleProtobufV1FilterAlertUniqueIds != nil {
		return obj.AlertSchedulerRuleProtobufV1FilterAlertUniqueIds
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj AlertSchedulerRuleProtobufV1Filter) GetActualInstanceValue() (interface{}) {
	if obj.AlertSchedulerRuleProtobufV1FilterAlertMetaLabels != nil {
		return *obj.AlertSchedulerRuleProtobufV1FilterAlertMetaLabels
	}

	if obj.AlertSchedulerRuleProtobufV1FilterAlertUniqueIds != nil {
		return *obj.AlertSchedulerRuleProtobufV1FilterAlertUniqueIds
	}

	// all schemas are nil
	return nil
}

type NullableAlertSchedulerRuleProtobufV1Filter struct {
	value *AlertSchedulerRuleProtobufV1Filter
	isSet bool
}

func (v NullableAlertSchedulerRuleProtobufV1Filter) Get() *AlertSchedulerRuleProtobufV1Filter {
	return v.value
}

func (v *NullableAlertSchedulerRuleProtobufV1Filter) Set(val *AlertSchedulerRuleProtobufV1Filter) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertSchedulerRuleProtobufV1Filter) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertSchedulerRuleProtobufV1Filter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertSchedulerRuleProtobufV1Filter(val *AlertSchedulerRuleProtobufV1Filter) *NullableAlertSchedulerRuleProtobufV1Filter {
	return &NullableAlertSchedulerRuleProtobufV1Filter{value: val, isSet: true}
}

func (v NullableAlertSchedulerRuleProtobufV1Filter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertSchedulerRuleProtobufV1Filter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


