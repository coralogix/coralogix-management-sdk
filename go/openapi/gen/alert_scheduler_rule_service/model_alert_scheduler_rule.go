/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_scheduler_rule_service

import (
	"encoding/json"
)

// checks if the AlertSchedulerRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertSchedulerRule{}

// AlertSchedulerRule struct for AlertSchedulerRule
type AlertSchedulerRule struct {
	CreatedAt *string `json:"createdAt,omitempty"`
	Description *string `json:"description,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Filter *AlertSchedulerRuleProtobufV1Filter `json:"filter,omitempty"`
	Id *string `json:"id,omitempty"`
	MetaLabels []MetaLabelsProtobufV1MetaLabel `json:"metaLabels,omitempty"`
	Name *string `json:"name,omitempty"`
	Schedule *Schedule `json:"schedule,omitempty"`
	UniqueIdentifier *string `json:"uniqueIdentifier,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// NewAlertSchedulerRule instantiates a new AlertSchedulerRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertSchedulerRule() *AlertSchedulerRule {
	this := AlertSchedulerRule{}
	return &this
}

// NewAlertSchedulerRuleWithDefaults instantiates a new AlertSchedulerRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertSchedulerRuleWithDefaults() *AlertSchedulerRule {
	this := AlertSchedulerRule{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AlertSchedulerRule) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSchedulerRule) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AlertSchedulerRule) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *AlertSchedulerRule) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AlertSchedulerRule) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSchedulerRule) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AlertSchedulerRule) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AlertSchedulerRule) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AlertSchedulerRule) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSchedulerRule) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AlertSchedulerRule) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AlertSchedulerRule) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *AlertSchedulerRule) GetFilter() AlertSchedulerRuleProtobufV1Filter {
	if o == nil || IsNil(o.Filter) {
		var ret AlertSchedulerRuleProtobufV1Filter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSchedulerRule) GetFilterOk() (*AlertSchedulerRuleProtobufV1Filter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *AlertSchedulerRule) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given AlertSchedulerRuleProtobufV1Filter and assigns it to the Filter field.
func (o *AlertSchedulerRule) SetFilter(v AlertSchedulerRuleProtobufV1Filter) {
	o.Filter = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AlertSchedulerRule) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSchedulerRule) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AlertSchedulerRule) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AlertSchedulerRule) SetId(v string) {
	o.Id = &v
}

// GetMetaLabels returns the MetaLabels field value if set, zero value otherwise.
func (o *AlertSchedulerRule) GetMetaLabels() []MetaLabelsProtobufV1MetaLabel {
	if o == nil || IsNil(o.MetaLabels) {
		var ret []MetaLabelsProtobufV1MetaLabel
		return ret
	}
	return o.MetaLabels
}

// GetMetaLabelsOk returns a tuple with the MetaLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSchedulerRule) GetMetaLabelsOk() ([]MetaLabelsProtobufV1MetaLabel, bool) {
	if o == nil || IsNil(o.MetaLabels) {
		return nil, false
	}
	return o.MetaLabels, true
}

// HasMetaLabels returns a boolean if a field has been set.
func (o *AlertSchedulerRule) HasMetaLabels() bool {
	if o != nil && !IsNil(o.MetaLabels) {
		return true
	}

	return false
}

// SetMetaLabels gets a reference to the given []MetaLabelsProtobufV1MetaLabel and assigns it to the MetaLabels field.
func (o *AlertSchedulerRule) SetMetaLabels(v []MetaLabelsProtobufV1MetaLabel) {
	o.MetaLabels = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AlertSchedulerRule) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSchedulerRule) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AlertSchedulerRule) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AlertSchedulerRule) SetName(v string) {
	o.Name = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *AlertSchedulerRule) GetSchedule() Schedule {
	if o == nil || IsNil(o.Schedule) {
		var ret Schedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSchedulerRule) GetScheduleOk() (*Schedule, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *AlertSchedulerRule) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given Schedule and assigns it to the Schedule field.
func (o *AlertSchedulerRule) SetSchedule(v Schedule) {
	o.Schedule = &v
}

// GetUniqueIdentifier returns the UniqueIdentifier field value if set, zero value otherwise.
func (o *AlertSchedulerRule) GetUniqueIdentifier() string {
	if o == nil || IsNil(o.UniqueIdentifier) {
		var ret string
		return ret
	}
	return *o.UniqueIdentifier
}

// GetUniqueIdentifierOk returns a tuple with the UniqueIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSchedulerRule) GetUniqueIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.UniqueIdentifier) {
		return nil, false
	}
	return o.UniqueIdentifier, true
}

// HasUniqueIdentifier returns a boolean if a field has been set.
func (o *AlertSchedulerRule) HasUniqueIdentifier() bool {
	if o != nil && !IsNil(o.UniqueIdentifier) {
		return true
	}

	return false
}

// SetUniqueIdentifier gets a reference to the given string and assigns it to the UniqueIdentifier field.
func (o *AlertSchedulerRule) SetUniqueIdentifier(v string) {
	o.UniqueIdentifier = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AlertSchedulerRule) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSchedulerRule) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AlertSchedulerRule) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *AlertSchedulerRule) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o AlertSchedulerRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertSchedulerRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MetaLabels) {
		toSerialize["metaLabels"] = o.MetaLabels
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.UniqueIdentifier) {
		toSerialize["uniqueIdentifier"] = o.UniqueIdentifier
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableAlertSchedulerRule struct {
	value *AlertSchedulerRule
	isSet bool
}

func (v NullableAlertSchedulerRule) Get() *AlertSchedulerRule {
	return v.value
}

func (v *NullableAlertSchedulerRule) Set(val *AlertSchedulerRule) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertSchedulerRule) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertSchedulerRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertSchedulerRule(val *AlertSchedulerRule) *NullableAlertSchedulerRule {
	return &NullableAlertSchedulerRule{value: val, isSet: true}
}

func (v NullableAlertSchedulerRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertSchedulerRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


