/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_scheduler_rule_service

import (
	"encoding/json"
)

// checks if the ScheduleOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleOneOf1{}

// ScheduleOneOf1 struct for ScheduleOneOf1
type ScheduleOneOf1 struct {
	Recurring *Recurring `json:"recurring,omitempty"`
	ScheduleOperation *ScheduleOperation `json:"scheduleOperation,omitempty"`
}

// NewScheduleOneOf1 instantiates a new ScheduleOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleOneOf1() *ScheduleOneOf1 {
	this := ScheduleOneOf1{}
	return &this
}

// NewScheduleOneOf1WithDefaults instantiates a new ScheduleOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleOneOf1WithDefaults() *ScheduleOneOf1 {
	this := ScheduleOneOf1{}
	return &this
}

// GetRecurring returns the Recurring field value if set, zero value otherwise.
func (o *ScheduleOneOf1) GetRecurring() Recurring {
	if o == nil || IsNil(o.Recurring) {
		var ret Recurring
		return ret
	}
	return *o.Recurring
}

// GetRecurringOk returns a tuple with the Recurring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleOneOf1) GetRecurringOk() (*Recurring, bool) {
	if o == nil || IsNil(o.Recurring) {
		return nil, false
	}
	return o.Recurring, true
}

// HasRecurring returns a boolean if a field has been set.
func (o *ScheduleOneOf1) HasRecurring() bool {
	if o != nil && !IsNil(o.Recurring) {
		return true
	}

	return false
}

// SetRecurring gets a reference to the given Recurring and assigns it to the Recurring field.
func (o *ScheduleOneOf1) SetRecurring(v Recurring) {
	o.Recurring = &v
}

// GetScheduleOperation returns the ScheduleOperation field value if set, zero value otherwise.
func (o *ScheduleOneOf1) GetScheduleOperation() ScheduleOperation {
	if o == nil || IsNil(o.ScheduleOperation) {
		var ret ScheduleOperation
		return ret
	}
	return *o.ScheduleOperation
}

// GetScheduleOperationOk returns a tuple with the ScheduleOperation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleOneOf1) GetScheduleOperationOk() (*ScheduleOperation, bool) {
	if o == nil || IsNil(o.ScheduleOperation) {
		return nil, false
	}
	return o.ScheduleOperation, true
}

// HasScheduleOperation returns a boolean if a field has been set.
func (o *ScheduleOneOf1) HasScheduleOperation() bool {
	if o != nil && !IsNil(o.ScheduleOperation) {
		return true
	}

	return false
}

// SetScheduleOperation gets a reference to the given ScheduleOperation and assigns it to the ScheduleOperation field.
func (o *ScheduleOneOf1) SetScheduleOperation(v ScheduleOperation) {
	o.ScheduleOperation = &v
}

func (o ScheduleOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Recurring) {
		toSerialize["recurring"] = o.Recurring
	}
	if !IsNil(o.ScheduleOperation) {
		toSerialize["scheduleOperation"] = o.ScheduleOperation
	}
	return toSerialize, nil
}

type NullableScheduleOneOf1 struct {
	value *ScheduleOneOf1
	isSet bool
}

func (v NullableScheduleOneOf1) Get() *ScheduleOneOf1 {
	return v.value
}

func (v *NullableScheduleOneOf1) Set(val *ScheduleOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleOneOf1(val *ScheduleOneOf1) *NullableScheduleOneOf1 {
	return &NullableScheduleOneOf1{value: val, isSet: true}
}

func (v NullableScheduleOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


