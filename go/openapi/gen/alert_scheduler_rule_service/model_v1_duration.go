/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_scheduler_rule_service

import (
	"encoding/json"
)

// checks if the V1Duration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1Duration{}

// V1Duration struct for V1Duration
type V1Duration struct {
	ForOver *int32 `json:"forOver,omitempty"`
	Frequency *DurationFrequency `json:"frequency,omitempty"`
}

// NewV1Duration instantiates a new V1Duration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Duration() *V1Duration {
	this := V1Duration{}
	return &this
}

// NewV1DurationWithDefaults instantiates a new V1Duration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DurationWithDefaults() *V1Duration {
	this := V1Duration{}
	return &this
}

// GetForOver returns the ForOver field value if set, zero value otherwise.
func (o *V1Duration) GetForOver() int32 {
	if o == nil || IsNil(o.ForOver) {
		var ret int32
		return ret
	}
	return *o.ForOver
}

// GetForOverOk returns a tuple with the ForOver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Duration) GetForOverOk() (*int32, bool) {
	if o == nil || IsNil(o.ForOver) {
		return nil, false
	}
	return o.ForOver, true
}

// HasForOver returns a boolean if a field has been set.
func (o *V1Duration) HasForOver() bool {
	if o != nil && !IsNil(o.ForOver) {
		return true
	}

	return false
}

// SetForOver gets a reference to the given int32 and assigns it to the ForOver field.
func (o *V1Duration) SetForOver(v int32) {
	o.ForOver = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *V1Duration) GetFrequency() DurationFrequency {
	if o == nil || IsNil(o.Frequency) {
		var ret DurationFrequency
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Duration) GetFrequencyOk() (*DurationFrequency, bool) {
	if o == nil || IsNil(o.Frequency) {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *V1Duration) HasFrequency() bool {
	if o != nil && !IsNil(o.Frequency) {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given DurationFrequency and assigns it to the Frequency field.
func (o *V1Duration) SetFrequency(v DurationFrequency) {
	o.Frequency = &v
}

func (o V1Duration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1Duration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ForOver) {
		toSerialize["forOver"] = o.ForOver
	}
	if !IsNil(o.Frequency) {
		toSerialize["frequency"] = o.Frequency
	}
	return toSerialize, nil
}

type NullableV1Duration struct {
	value *V1Duration
	isSet bool
}

func (v NullableV1Duration) Get() *V1Duration {
	return v.value
}

func (v *NullableV1Duration) Set(val *V1Duration) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Duration) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Duration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Duration(val *V1Duration) *NullableV1Duration {
	return &NullableV1Duration{value: val, isSet: true}
}

func (v NullableV1Duration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Duration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


