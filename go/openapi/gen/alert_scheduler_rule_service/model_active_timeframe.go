/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_scheduler_rule_service

import (
	"encoding/json"
)

// checks if the ActiveTimeframe type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveTimeframe{}

// ActiveTimeframe struct for ActiveTimeframe
type ActiveTimeframe struct {
	EndTime *string `json:"endTime,omitempty"`
	StartTime *string `json:"startTime,omitempty"`
	Timezone *string `json:"timezone,omitempty"`
}

// NewActiveTimeframe instantiates a new ActiveTimeframe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveTimeframe() *ActiveTimeframe {
	this := ActiveTimeframe{}
	return &this
}

// NewActiveTimeframeWithDefaults instantiates a new ActiveTimeframe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveTimeframeWithDefaults() *ActiveTimeframe {
	this := ActiveTimeframe{}
	return &this
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *ActiveTimeframe) GetEndTime() string {
	if o == nil || IsNil(o.EndTime) {
		var ret string
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveTimeframe) GetEndTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *ActiveTimeframe) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given string and assigns it to the EndTime field.
func (o *ActiveTimeframe) SetEndTime(v string) {
	o.EndTime = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *ActiveTimeframe) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveTimeframe) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *ActiveTimeframe) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *ActiveTimeframe) SetStartTime(v string) {
	o.StartTime = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *ActiveTimeframe) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveTimeframe) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *ActiveTimeframe) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *ActiveTimeframe) SetTimezone(v string) {
	o.Timezone = &v
}

func (o ActiveTimeframe) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveTimeframe) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	return toSerialize, nil
}

type NullableActiveTimeframe struct {
	value *ActiveTimeframe
	isSet bool
}

func (v NullableActiveTimeframe) Get() *ActiveTimeframe {
	return v.value
}

func (v *NullableActiveTimeframe) Set(val *ActiveTimeframe) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveTimeframe) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveTimeframe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveTimeframe(val *ActiveTimeframe) *NullableActiveTimeframe {
	return &NullableActiveTimeframe{value: val, isSet: true}
}

func (v NullableActiveTimeframe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveTimeframe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


