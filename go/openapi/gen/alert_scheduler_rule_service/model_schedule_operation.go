/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_scheduler_rule_service

import (
	"encoding/json"
	"fmt"
)

// ScheduleOperation the model 'ScheduleOperation'
type ScheduleOperation string

// List of ScheduleOperation
const (
	SCHEDULEOPERATION_SCHEDULE_OPERATION_UNSPECIFIED ScheduleOperation = "SCHEDULE_OPERATION_UNSPECIFIED"
	SCHEDULEOPERATION_SCHEDULE_OPERATION_MUTE ScheduleOperation = "SCHEDULE_OPERATION_MUTE"
	SCHEDULEOPERATION_SCHEDULE_OPERATION_ACTIVATE ScheduleOperation = "SCHEDULE_OPERATION_ACTIVATE"
)

// All allowed values of ScheduleOperation enum
var AllowedScheduleOperationEnumValues = []ScheduleOperation{
	"SCHEDULE_OPERATION_UNSPECIFIED",
	"SCHEDULE_OPERATION_MUTE",
	"SCHEDULE_OPERATION_ACTIVATE",
}

func (v *ScheduleOperation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ScheduleOperation(value)
	for _, existing := range AllowedScheduleOperationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ScheduleOperation", value)
}

// NewScheduleOperationFromValue returns a pointer to a valid ScheduleOperation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewScheduleOperationFromValue(v string) (*ScheduleOperation, error) {
	ev := ScheduleOperation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ScheduleOperation: valid values are %v", v, AllowedScheduleOperationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ScheduleOperation) IsValid() bool {
	for _, existing := range AllowedScheduleOperationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ScheduleOperation value
func (v ScheduleOperation) Ptr() *ScheduleOperation {
	return &v
}

type NullableScheduleOperation struct {
	value *ScheduleOperation
	isSet bool
}

func (v NullableScheduleOperation) Get() *ScheduleOperation {
	return v.value
}

func (v *NullableScheduleOperation) Set(val *ScheduleOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleOperation(val *ScheduleOperation) *NullableScheduleOperation {
	return &NullableScheduleOperation{value: val, isSet: true}
}

func (v NullableScheduleOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

