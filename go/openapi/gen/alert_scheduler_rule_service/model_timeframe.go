/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_scheduler_rule_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Timeframe - struct for Timeframe
type Timeframe struct {
	TimeframeDuration *TimeframeDuration
	TimeframeEndTime *TimeframeEndTime
}

// TimeframeDurationAsTimeframe is a convenience function that returns TimeframeDuration wrapped in Timeframe
func TimeframeDurationAsTimeframe(v *TimeframeDuration) Timeframe {
	return Timeframe{
		TimeframeDuration: v,
	}
}

// TimeframeEndTimeAsTimeframe is a convenience function that returns TimeframeEndTime wrapped in Timeframe
func TimeframeEndTimeAsTimeframe(v *TimeframeEndTime) Timeframe {
	return Timeframe{
		TimeframeEndTime: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Timeframe) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TimeframeDuration
	err = newStrictDecoder(data).Decode(&dst.TimeframeDuration)
	if err == nil {
		jsonTimeframeDuration, _ := json.Marshal(dst.TimeframeDuration)
		if string(jsonTimeframeDuration) == "{}" { // empty struct
			dst.TimeframeDuration = nil
		} else {
			if err = validator.Validate(dst.TimeframeDuration); err != nil {
				dst.TimeframeDuration = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimeframeDuration = nil
	}

	// try to unmarshal data into TimeframeEndTime
	err = newStrictDecoder(data).Decode(&dst.TimeframeEndTime)
	if err == nil {
		jsonTimeframeEndTime, _ := json.Marshal(dst.TimeframeEndTime)
		if string(jsonTimeframeEndTime) == "{}" { // empty struct
			dst.TimeframeEndTime = nil
		} else {
			if err = validator.Validate(dst.TimeframeEndTime); err != nil {
				dst.TimeframeEndTime = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimeframeEndTime = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TimeframeDuration = nil
		dst.TimeframeEndTime = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Timeframe)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Timeframe)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Timeframe) MarshalJSON() ([]byte, error) {
	if src.TimeframeDuration != nil {
		return json.Marshal(&src.TimeframeDuration)
	}

	if src.TimeframeEndTime != nil {
		return json.Marshal(&src.TimeframeEndTime)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Timeframe) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TimeframeDuration != nil {
		return obj.TimeframeDuration
	}

	if obj.TimeframeEndTime != nil {
		return obj.TimeframeEndTime
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Timeframe) GetActualInstanceValue() (interface{}) {
	if obj.TimeframeDuration != nil {
		return *obj.TimeframeDuration
	}

	if obj.TimeframeEndTime != nil {
		return *obj.TimeframeEndTime
	}

	// all schemas are nil
	return nil
}

type NullableTimeframe struct {
	value *Timeframe
	isSet bool
}

func (v NullableTimeframe) Get() *Timeframe {
	return v.value
}

func (v *NullableTimeframe) Set(val *Timeframe) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeframe) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeframe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeframe(val *Timeframe) *NullableTimeframe {
	return &NullableTimeframe{value: val, isSet: true}
}

func (v NullableTimeframe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeframe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


