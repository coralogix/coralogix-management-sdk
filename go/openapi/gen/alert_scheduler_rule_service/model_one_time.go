/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_scheduler_rule_service

import (
	"encoding/json"
)

// checks if the OneTime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OneTime{}

// OneTime struct for OneTime
type OneTime struct {
	Timeframe *Timeframe `json:"timeframe,omitempty"`
}

// NewOneTime instantiates a new OneTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOneTime() *OneTime {
	this := OneTime{}
	return &this
}

// NewOneTimeWithDefaults instantiates a new OneTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOneTimeWithDefaults() *OneTime {
	this := OneTime{}
	return &this
}

// GetTimeframe returns the Timeframe field value if set, zero value otherwise.
func (o *OneTime) GetTimeframe() Timeframe {
	if o == nil || IsNil(o.Timeframe) {
		var ret Timeframe
		return ret
	}
	return *o.Timeframe
}

// GetTimeframeOk returns a tuple with the Timeframe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OneTime) GetTimeframeOk() (*Timeframe, bool) {
	if o == nil || IsNil(o.Timeframe) {
		return nil, false
	}
	return o.Timeframe, true
}

// HasTimeframe returns a boolean if a field has been set.
func (o *OneTime) HasTimeframe() bool {
	if o != nil && !IsNil(o.Timeframe) {
		return true
	}

	return false
}

// SetTimeframe gets a reference to the given Timeframe and assigns it to the Timeframe field.
func (o *OneTime) SetTimeframe(v Timeframe) {
	o.Timeframe = &v
}

func (o OneTime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OneTime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timeframe) {
		toSerialize["timeframe"] = o.Timeframe
	}
	return toSerialize, nil
}

type NullableOneTime struct {
	value *OneTime
	isSet bool
}

func (v NullableOneTime) Get() *OneTime {
	return v.value
}

func (v *NullableOneTime) Set(val *OneTime) {
	v.value = val
	v.isSet = true
}

func (v NullableOneTime) IsSet() bool {
	return v.isSet
}

func (v *NullableOneTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOneTime(val *OneTime) *NullableOneTime {
	return &NullableOneTime{value: val, isSet: true}
}

func (v NullableOneTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOneTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


