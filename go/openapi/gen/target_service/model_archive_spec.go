/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package target_service

import (
	"encoding/json"
)

// checks if the ArchiveSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArchiveSpec{}

// ArchiveSpec This data structure contains metadata about the archive.
type ArchiveSpec struct {
	ArchivingFormatId *string `json:"archivingFormatId,omitempty"`
	EnableTags *bool `json:"enableTags,omitempty"`
	IsActive *bool `json:"isActive,omitempty"`
}

// NewArchiveSpec instantiates a new ArchiveSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchiveSpec() *ArchiveSpec {
	this := ArchiveSpec{}
	return &this
}

// NewArchiveSpecWithDefaults instantiates a new ArchiveSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchiveSpecWithDefaults() *ArchiveSpec {
	this := ArchiveSpec{}
	return &this
}

// GetArchivingFormatId returns the ArchivingFormatId field value if set, zero value otherwise.
func (o *ArchiveSpec) GetArchivingFormatId() string {
	if o == nil || IsNil(o.ArchivingFormatId) {
		var ret string
		return ret
	}
	return *o.ArchivingFormatId
}

// GetArchivingFormatIdOk returns a tuple with the ArchivingFormatId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveSpec) GetArchivingFormatIdOk() (*string, bool) {
	if o == nil || IsNil(o.ArchivingFormatId) {
		return nil, false
	}
	return o.ArchivingFormatId, true
}

// HasArchivingFormatId returns a boolean if a field has been set.
func (o *ArchiveSpec) HasArchivingFormatId() bool {
	if o != nil && !IsNil(o.ArchivingFormatId) {
		return true
	}

	return false
}

// SetArchivingFormatId gets a reference to the given string and assigns it to the ArchivingFormatId field.
func (o *ArchiveSpec) SetArchivingFormatId(v string) {
	o.ArchivingFormatId = &v
}

// GetEnableTags returns the EnableTags field value if set, zero value otherwise.
func (o *ArchiveSpec) GetEnableTags() bool {
	if o == nil || IsNil(o.EnableTags) {
		var ret bool
		return ret
	}
	return *o.EnableTags
}

// GetEnableTagsOk returns a tuple with the EnableTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveSpec) GetEnableTagsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableTags) {
		return nil, false
	}
	return o.EnableTags, true
}

// HasEnableTags returns a boolean if a field has been set.
func (o *ArchiveSpec) HasEnableTags() bool {
	if o != nil && !IsNil(o.EnableTags) {
		return true
	}

	return false
}

// SetEnableTags gets a reference to the given bool and assigns it to the EnableTags field.
func (o *ArchiveSpec) SetEnableTags(v bool) {
	o.EnableTags = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *ArchiveSpec) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveSpec) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *ArchiveSpec) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *ArchiveSpec) SetIsActive(v bool) {
	o.IsActive = &v
}

func (o ArchiveSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArchiveSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ArchivingFormatId) {
		toSerialize["archivingFormatId"] = o.ArchivingFormatId
	}
	if !IsNil(o.EnableTags) {
		toSerialize["enableTags"] = o.EnableTags
	}
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	return toSerialize, nil
}

type NullableArchiveSpec struct {
	value *ArchiveSpec
	isSet bool
}

func (v NullableArchiveSpec) Get() *ArchiveSpec {
	return v.value
}

func (v *NullableArchiveSpec) Set(val *ArchiveSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableArchiveSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableArchiveSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchiveSpec(val *ArchiveSpec) *NullableArchiveSpec {
	return &NullableArchiveSpec{value: val, isSet: true}
}

func (v NullableArchiveSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchiveSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


