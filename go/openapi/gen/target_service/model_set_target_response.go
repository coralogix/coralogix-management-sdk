/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package target_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SetTargetResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetTargetResponse{}

// SetTargetResponse This data structure is used to set a storage target for logs.
type SetTargetResponse struct {
	IsActive bool `json:"isActive"`
	S3 *S3TargetSpec `json:"s3,omitempty"`
}

type _SetTargetResponse SetTargetResponse

// NewSetTargetResponse instantiates a new SetTargetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetTargetResponse(isActive bool) *SetTargetResponse {
	this := SetTargetResponse{}
	this.IsActive = isActive
	return &this
}

// NewSetTargetResponseWithDefaults instantiates a new SetTargetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetTargetResponseWithDefaults() *SetTargetResponse {
	this := SetTargetResponse{}
	return &this
}

// GetIsActive returns the IsActive field value
func (o *SetTargetResponse) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *SetTargetResponse) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *SetTargetResponse) SetIsActive(v bool) {
	o.IsActive = v
}

// GetS3 returns the S3 field value if set, zero value otherwise.
func (o *SetTargetResponse) GetS3() S3TargetSpec {
	if o == nil || IsNil(o.S3) {
		var ret S3TargetSpec
		return ret
	}
	return *o.S3
}

// GetS3Ok returns a tuple with the S3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetTargetResponse) GetS3Ok() (*S3TargetSpec, bool) {
	if o == nil || IsNil(o.S3) {
		return nil, false
	}
	return o.S3, true
}

// HasS3 returns a boolean if a field has been set.
func (o *SetTargetResponse) HasS3() bool {
	if o != nil && !IsNil(o.S3) {
		return true
	}

	return false
}

// SetS3 gets a reference to the given S3TargetSpec and assigns it to the S3 field.
func (o *SetTargetResponse) SetS3(v S3TargetSpec) {
	o.S3 = &v
}

func (o SetTargetResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetTargetResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isActive"] = o.IsActive
	if !IsNil(o.S3) {
		toSerialize["s3"] = o.S3
	}
	return toSerialize, nil
}

func (o *SetTargetResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isActive",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetTargetResponse := _SetTargetResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSetTargetResponse)

	if err != nil {
		return err
	}

	*o = SetTargetResponse(varSetTargetResponse)

	return err
}

type NullableSetTargetResponse struct {
	value *SetTargetResponse
	isSet bool
}

func (v NullableSetTargetResponse) Get() *SetTargetResponse {
	return v.value
}

func (v *NullableSetTargetResponse) Set(val *SetTargetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSetTargetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSetTargetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetTargetResponse(val *SetTargetResponse) *NullableSetTargetResponse {
	return &NullableSetTargetResponse{value: val, isSet: true}
}

func (v NullableSetTargetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetTargetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


