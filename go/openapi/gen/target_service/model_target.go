/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package target_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Target - struct for Target
type Target struct {
	TargetIbmCos *TargetIbmCos
	TargetS3 *TargetS3
}

// TargetIbmCosAsTarget is a convenience function that returns TargetIbmCos wrapped in Target
func TargetIbmCosAsTarget(v *TargetIbmCos) Target {
	return Target{
		TargetIbmCos: v,
	}
}

// TargetS3AsTarget is a convenience function that returns TargetS3 wrapped in Target
func TargetS3AsTarget(v *TargetS3) Target {
	return Target{
		TargetS3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Target) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TargetIbmCos
	err = newStrictDecoder(data).Decode(&dst.TargetIbmCos)
	if err == nil {
		jsonTargetIbmCos, _ := json.Marshal(dst.TargetIbmCos)
		if string(jsonTargetIbmCos) == "{}" { // empty struct
			dst.TargetIbmCos = nil
		} else {
			if err = validator.Validate(dst.TargetIbmCos); err != nil {
				dst.TargetIbmCos = nil
			} else {
				match++
			}
		}
	} else {
		dst.TargetIbmCos = nil
	}

	// try to unmarshal data into TargetS3
	err = newStrictDecoder(data).Decode(&dst.TargetS3)
	if err == nil {
		jsonTargetS3, _ := json.Marshal(dst.TargetS3)
		if string(jsonTargetS3) == "{}" { // empty struct
			dst.TargetS3 = nil
		} else {
			if err = validator.Validate(dst.TargetS3); err != nil {
				dst.TargetS3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.TargetS3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TargetIbmCos = nil
		dst.TargetS3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Target)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Target)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Target) MarshalJSON() ([]byte, error) {
	if src.TargetIbmCos != nil {
		return json.Marshal(&src.TargetIbmCos)
	}

	if src.TargetS3 != nil {
		return json.Marshal(&src.TargetS3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Target) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TargetIbmCos != nil {
		return obj.TargetIbmCos
	}

	if obj.TargetS3 != nil {
		return obj.TargetS3
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Target) GetActualInstanceValue() (interface{}) {
	if obj.TargetIbmCos != nil {
		return *obj.TargetIbmCos
	}

	if obj.TargetS3 != nil {
		return *obj.TargetS3
	}

	// all schemas are nil
	return nil
}

type NullableTarget struct {
	value *Target
	isSet bool
}

func (v NullableTarget) Get() *Target {
	return v.value
}

func (v *NullableTarget) Set(val *Target) {
	v.value = val
	v.isSet = true
}

func (v NullableTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTarget(val *Target) *NullableTarget {
	return &NullableTarget{value: val, isSet: true}
}

func (v NullableTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


