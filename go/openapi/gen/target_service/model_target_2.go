/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package target_service

import (
	"encoding/json"
)

// checks if the Target2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Target2{}

// Target2 This data structure represents a target to archive logs.
type Target2 struct {
	ArchiveSpec *ArchiveSpec `json:"archiveSpec,omitempty"`
	IbmCos *IBMCosTargetSpec `json:"ibmCos,omitempty"`
}

// NewTarget2 instantiates a new Target2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTarget2() *Target2 {
	this := Target2{}
	return &this
}

// NewTarget2WithDefaults instantiates a new Target2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTarget2WithDefaults() *Target2 {
	this := Target2{}
	return &this
}

// GetArchiveSpec returns the ArchiveSpec field value if set, zero value otherwise.
func (o *Target2) GetArchiveSpec() ArchiveSpec {
	if o == nil || IsNil(o.ArchiveSpec) {
		var ret ArchiveSpec
		return ret
	}
	return *o.ArchiveSpec
}

// GetArchiveSpecOk returns a tuple with the ArchiveSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Target2) GetArchiveSpecOk() (*ArchiveSpec, bool) {
	if o == nil || IsNil(o.ArchiveSpec) {
		return nil, false
	}
	return o.ArchiveSpec, true
}

// HasArchiveSpec returns a boolean if a field has been set.
func (o *Target2) HasArchiveSpec() bool {
	if o != nil && !IsNil(o.ArchiveSpec) {
		return true
	}

	return false
}

// SetArchiveSpec gets a reference to the given ArchiveSpec and assigns it to the ArchiveSpec field.
func (o *Target2) SetArchiveSpec(v ArchiveSpec) {
	o.ArchiveSpec = &v
}

// GetIbmCos returns the IbmCos field value if set, zero value otherwise.
func (o *Target2) GetIbmCos() IBMCosTargetSpec {
	if o == nil || IsNil(o.IbmCos) {
		var ret IBMCosTargetSpec
		return ret
	}
	return *o.IbmCos
}

// GetIbmCosOk returns a tuple with the IbmCos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Target2) GetIbmCosOk() (*IBMCosTargetSpec, bool) {
	if o == nil || IsNil(o.IbmCos) {
		return nil, false
	}
	return o.IbmCos, true
}

// HasIbmCos returns a boolean if a field has been set.
func (o *Target2) HasIbmCos() bool {
	if o != nil && !IsNil(o.IbmCos) {
		return true
	}

	return false
}

// SetIbmCos gets a reference to the given IBMCosTargetSpec and assigns it to the IbmCos field.
func (o *Target2) SetIbmCos(v IBMCosTargetSpec) {
	o.IbmCos = &v
}

func (o Target2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Target2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ArchiveSpec) {
		toSerialize["archiveSpec"] = o.ArchiveSpec
	}
	if !IsNil(o.IbmCos) {
		toSerialize["ibmCos"] = o.IbmCos
	}
	return toSerialize, nil
}

type NullableTarget2 struct {
	value *Target2
	isSet bool
}

func (v NullableTarget2) Get() *Target2 {
	return v.value
}

func (v *NullableTarget2) Set(val *Target2) {
	v.value = val
	v.isSet = true
}

func (v NullableTarget2) IsSet() bool {
	return v.isSet
}

func (v *NullableTarget2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTarget2(val *Target2) *NullableTarget2 {
	return &NullableTarget2{value: val, isSet: true}
}

func (v NullableTarget2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTarget2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


