/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package target_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the S3TargetSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3TargetSpec{}

// S3TargetSpec This data structure represents an S3 target.
type S3TargetSpec struct {
	Bucket string `json:"bucket"`
	Region *string `json:"region,omitempty"`
}

type _S3TargetSpec S3TargetSpec

// NewS3TargetSpec instantiates a new S3TargetSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3TargetSpec(bucket string) *S3TargetSpec {
	this := S3TargetSpec{}
	this.Bucket = bucket
	return &this
}

// NewS3TargetSpecWithDefaults instantiates a new S3TargetSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3TargetSpecWithDefaults() *S3TargetSpec {
	this := S3TargetSpec{}
	return &this
}

// GetBucket returns the Bucket field value
func (o *S3TargetSpec) GetBucket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value
// and a boolean to check if the value has been set.
func (o *S3TargetSpec) GetBucketOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bucket, true
}

// SetBucket sets field value
func (o *S3TargetSpec) SetBucket(v string) {
	o.Bucket = v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *S3TargetSpec) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3TargetSpec) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *S3TargetSpec) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *S3TargetSpec) SetRegion(v string) {
	o.Region = &v
}

func (o S3TargetSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3TargetSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bucket"] = o.Bucket
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	return toSerialize, nil
}

func (o *S3TargetSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bucket",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varS3TargetSpec := _S3TargetSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varS3TargetSpec)

	if err != nil {
		return err
	}

	*o = S3TargetSpec(varS3TargetSpec)

	return err
}

type NullableS3TargetSpec struct {
	value *S3TargetSpec
	isSet bool
}

func (v NullableS3TargetSpec) Get() *S3TargetSpec {
	return v.value
}

func (v *NullableS3TargetSpec) Set(val *S3TargetSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableS3TargetSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableS3TargetSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3TargetSpec(val *S3TargetSpec) *NullableS3TargetSpec {
	return &NullableS3TargetSpec{value: val, isSet: true}
}

func (v NullableS3TargetSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3TargetSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


