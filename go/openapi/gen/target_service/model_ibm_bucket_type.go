/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package target_service

import (
	"encoding/json"
	"fmt"
)

// IbmBucketType the model 'IbmBucketType'
type IbmBucketType string

// List of IbmBucketType
const (
	IBMBUCKETTYPE_IBM_BUCKET_TYPE_UNSPECIFIED IbmBucketType = "IBM_BUCKET_TYPE_UNSPECIFIED"
	IBMBUCKETTYPE_IBM_BUCKET_TYPE_EXTERNAL IbmBucketType = "IBM_BUCKET_TYPE_EXTERNAL"
	IBMBUCKETTYPE_IBM_BUCKET_TYPE_INTERNAL IbmBucketType = "IBM_BUCKET_TYPE_INTERNAL"
)

// All allowed values of IbmBucketType enum
var AllowedIbmBucketTypeEnumValues = []IbmBucketType{
	"IBM_BUCKET_TYPE_UNSPECIFIED",
	"IBM_BUCKET_TYPE_EXTERNAL",
	"IBM_BUCKET_TYPE_INTERNAL",
}

func (v *IbmBucketType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IbmBucketType(value)
	for _, existing := range AllowedIbmBucketTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IbmBucketType", value)
}

// NewIbmBucketTypeFromValue returns a pointer to a valid IbmBucketType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIbmBucketTypeFromValue(v string) (*IbmBucketType, error) {
	ev := IbmBucketType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IbmBucketType: valid values are %v", v, AllowedIbmBucketTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IbmBucketType) IsValid() bool {
	for _, existing := range AllowedIbmBucketTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IbmBucketType value
func (v IbmBucketType) Ptr() *IbmBucketType {
	return &v
}

type NullableIbmBucketType struct {
	value *IbmBucketType
	isSet bool
}

func (v NullableIbmBucketType) Get() *IbmBucketType {
	return v.value
}

func (v *NullableIbmBucketType) Set(val *IbmBucketType) {
	v.value = val
	v.isSet = true
}

func (v NullableIbmBucketType) IsSet() bool {
	return v.isSet
}

func (v *NullableIbmBucketType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIbmBucketType(val *IbmBucketType) *NullableIbmBucketType {
	return &NullableIbmBucketType{value: val, isSet: true}
}

func (v NullableIbmBucketType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIbmBucketType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

