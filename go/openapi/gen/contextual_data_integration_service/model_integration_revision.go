/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// IntegrationRevision - struct for IntegrationRevision
type IntegrationRevision struct {
	IntegrationRevisionAzureArmTemplate *IntegrationRevisionAzureArmTemplate
	IntegrationRevisionCloudFormation *IntegrationRevisionCloudFormation
	IntegrationRevisionHelmChart *IntegrationRevisionHelmChart
	IntegrationRevisionManagedService *IntegrationRevisionManagedService
	IntegrationRevisionRum *IntegrationRevisionRum
	IntegrationRevisionTerraform *IntegrationRevisionTerraform
}

// IntegrationRevisionAzureArmTemplateAsIntegrationRevision is a convenience function that returns IntegrationRevisionAzureArmTemplate wrapped in IntegrationRevision
func IntegrationRevisionAzureArmTemplateAsIntegrationRevision(v *IntegrationRevisionAzureArmTemplate) IntegrationRevision {
	return IntegrationRevision{
		IntegrationRevisionAzureArmTemplate: v,
	}
}

// IntegrationRevisionCloudFormationAsIntegrationRevision is a convenience function that returns IntegrationRevisionCloudFormation wrapped in IntegrationRevision
func IntegrationRevisionCloudFormationAsIntegrationRevision(v *IntegrationRevisionCloudFormation) IntegrationRevision {
	return IntegrationRevision{
		IntegrationRevisionCloudFormation: v,
	}
}

// IntegrationRevisionHelmChartAsIntegrationRevision is a convenience function that returns IntegrationRevisionHelmChart wrapped in IntegrationRevision
func IntegrationRevisionHelmChartAsIntegrationRevision(v *IntegrationRevisionHelmChart) IntegrationRevision {
	return IntegrationRevision{
		IntegrationRevisionHelmChart: v,
	}
}

// IntegrationRevisionManagedServiceAsIntegrationRevision is a convenience function that returns IntegrationRevisionManagedService wrapped in IntegrationRevision
func IntegrationRevisionManagedServiceAsIntegrationRevision(v *IntegrationRevisionManagedService) IntegrationRevision {
	return IntegrationRevision{
		IntegrationRevisionManagedService: v,
	}
}

// IntegrationRevisionRumAsIntegrationRevision is a convenience function that returns IntegrationRevisionRum wrapped in IntegrationRevision
func IntegrationRevisionRumAsIntegrationRevision(v *IntegrationRevisionRum) IntegrationRevision {
	return IntegrationRevision{
		IntegrationRevisionRum: v,
	}
}

// IntegrationRevisionTerraformAsIntegrationRevision is a convenience function that returns IntegrationRevisionTerraform wrapped in IntegrationRevision
func IntegrationRevisionTerraformAsIntegrationRevision(v *IntegrationRevisionTerraform) IntegrationRevision {
	return IntegrationRevision{
		IntegrationRevisionTerraform: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IntegrationRevision) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IntegrationRevisionAzureArmTemplate
	err = newStrictDecoder(data).Decode(&dst.IntegrationRevisionAzureArmTemplate)
	if err == nil {
		jsonIntegrationRevisionAzureArmTemplate, _ := json.Marshal(dst.IntegrationRevisionAzureArmTemplate)
		if string(jsonIntegrationRevisionAzureArmTemplate) == "{}" { // empty struct
			dst.IntegrationRevisionAzureArmTemplate = nil
		} else {
			if err = validator.Validate(dst.IntegrationRevisionAzureArmTemplate); err != nil {
				dst.IntegrationRevisionAzureArmTemplate = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationRevisionAzureArmTemplate = nil
	}

	// try to unmarshal data into IntegrationRevisionCloudFormation
	err = newStrictDecoder(data).Decode(&dst.IntegrationRevisionCloudFormation)
	if err == nil {
		jsonIntegrationRevisionCloudFormation, _ := json.Marshal(dst.IntegrationRevisionCloudFormation)
		if string(jsonIntegrationRevisionCloudFormation) == "{}" { // empty struct
			dst.IntegrationRevisionCloudFormation = nil
		} else {
			if err = validator.Validate(dst.IntegrationRevisionCloudFormation); err != nil {
				dst.IntegrationRevisionCloudFormation = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationRevisionCloudFormation = nil
	}

	// try to unmarshal data into IntegrationRevisionHelmChart
	err = newStrictDecoder(data).Decode(&dst.IntegrationRevisionHelmChart)
	if err == nil {
		jsonIntegrationRevisionHelmChart, _ := json.Marshal(dst.IntegrationRevisionHelmChart)
		if string(jsonIntegrationRevisionHelmChart) == "{}" { // empty struct
			dst.IntegrationRevisionHelmChart = nil
		} else {
			if err = validator.Validate(dst.IntegrationRevisionHelmChart); err != nil {
				dst.IntegrationRevisionHelmChart = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationRevisionHelmChart = nil
	}

	// try to unmarshal data into IntegrationRevisionManagedService
	err = newStrictDecoder(data).Decode(&dst.IntegrationRevisionManagedService)
	if err == nil {
		jsonIntegrationRevisionManagedService, _ := json.Marshal(dst.IntegrationRevisionManagedService)
		if string(jsonIntegrationRevisionManagedService) == "{}" { // empty struct
			dst.IntegrationRevisionManagedService = nil
		} else {
			if err = validator.Validate(dst.IntegrationRevisionManagedService); err != nil {
				dst.IntegrationRevisionManagedService = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationRevisionManagedService = nil
	}

	// try to unmarshal data into IntegrationRevisionRum
	err = newStrictDecoder(data).Decode(&dst.IntegrationRevisionRum)
	if err == nil {
		jsonIntegrationRevisionRum, _ := json.Marshal(dst.IntegrationRevisionRum)
		if string(jsonIntegrationRevisionRum) == "{}" { // empty struct
			dst.IntegrationRevisionRum = nil
		} else {
			if err = validator.Validate(dst.IntegrationRevisionRum); err != nil {
				dst.IntegrationRevisionRum = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationRevisionRum = nil
	}

	// try to unmarshal data into IntegrationRevisionTerraform
	err = newStrictDecoder(data).Decode(&dst.IntegrationRevisionTerraform)
	if err == nil {
		jsonIntegrationRevisionTerraform, _ := json.Marshal(dst.IntegrationRevisionTerraform)
		if string(jsonIntegrationRevisionTerraform) == "{}" { // empty struct
			dst.IntegrationRevisionTerraform = nil
		} else {
			if err = validator.Validate(dst.IntegrationRevisionTerraform); err != nil {
				dst.IntegrationRevisionTerraform = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationRevisionTerraform = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IntegrationRevisionAzureArmTemplate = nil
		dst.IntegrationRevisionCloudFormation = nil
		dst.IntegrationRevisionHelmChart = nil
		dst.IntegrationRevisionManagedService = nil
		dst.IntegrationRevisionRum = nil
		dst.IntegrationRevisionTerraform = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IntegrationRevision)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IntegrationRevision)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IntegrationRevision) MarshalJSON() ([]byte, error) {
	if src.IntegrationRevisionAzureArmTemplate != nil {
		return json.Marshal(&src.IntegrationRevisionAzureArmTemplate)
	}

	if src.IntegrationRevisionCloudFormation != nil {
		return json.Marshal(&src.IntegrationRevisionCloudFormation)
	}

	if src.IntegrationRevisionHelmChart != nil {
		return json.Marshal(&src.IntegrationRevisionHelmChart)
	}

	if src.IntegrationRevisionManagedService != nil {
		return json.Marshal(&src.IntegrationRevisionManagedService)
	}

	if src.IntegrationRevisionRum != nil {
		return json.Marshal(&src.IntegrationRevisionRum)
	}

	if src.IntegrationRevisionTerraform != nil {
		return json.Marshal(&src.IntegrationRevisionTerraform)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IntegrationRevision) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IntegrationRevisionAzureArmTemplate != nil {
		return obj.IntegrationRevisionAzureArmTemplate
	}

	if obj.IntegrationRevisionCloudFormation != nil {
		return obj.IntegrationRevisionCloudFormation
	}

	if obj.IntegrationRevisionHelmChart != nil {
		return obj.IntegrationRevisionHelmChart
	}

	if obj.IntegrationRevisionManagedService != nil {
		return obj.IntegrationRevisionManagedService
	}

	if obj.IntegrationRevisionRum != nil {
		return obj.IntegrationRevisionRum
	}

	if obj.IntegrationRevisionTerraform != nil {
		return obj.IntegrationRevisionTerraform
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj IntegrationRevision) GetActualInstanceValue() (interface{}) {
	if obj.IntegrationRevisionAzureArmTemplate != nil {
		return *obj.IntegrationRevisionAzureArmTemplate
	}

	if obj.IntegrationRevisionCloudFormation != nil {
		return *obj.IntegrationRevisionCloudFormation
	}

	if obj.IntegrationRevisionHelmChart != nil {
		return *obj.IntegrationRevisionHelmChart
	}

	if obj.IntegrationRevisionManagedService != nil {
		return *obj.IntegrationRevisionManagedService
	}

	if obj.IntegrationRevisionRum != nil {
		return *obj.IntegrationRevisionRum
	}

	if obj.IntegrationRevisionTerraform != nil {
		return *obj.IntegrationRevisionTerraform
	}

	// all schemas are nil
	return nil
}

type NullableIntegrationRevision struct {
	value *IntegrationRevision
	isSet bool
}

func (v NullableIntegrationRevision) Get() *IntegrationRevision {
	return v.value
}

func (v *NullableIntegrationRevision) Set(val *IntegrationRevision) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationRevision) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationRevision) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationRevision(val *IntegrationRevision) *NullableIntegrationRevision {
	return &NullableIntegrationRevision{value: val, isSet: true}
}

func (v NullableIntegrationRevision) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationRevision) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


