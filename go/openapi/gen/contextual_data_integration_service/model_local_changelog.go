/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"encoding/json"
)

// checks if the LocalChangelog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocalChangelog{}

// LocalChangelog struct for LocalChangelog
type LocalChangelog struct {
	Changes []RevisionRef `json:"changes,omitempty"`
}

// NewLocalChangelog instantiates a new LocalChangelog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocalChangelog() *LocalChangelog {
	this := LocalChangelog{}
	return &this
}

// NewLocalChangelogWithDefaults instantiates a new LocalChangelog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocalChangelogWithDefaults() *LocalChangelog {
	this := LocalChangelog{}
	return &this
}

// GetChanges returns the Changes field value if set, zero value otherwise.
func (o *LocalChangelog) GetChanges() []RevisionRef {
	if o == nil || IsNil(o.Changes) {
		var ret []RevisionRef
		return ret
	}
	return o.Changes
}

// GetChangesOk returns a tuple with the Changes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalChangelog) GetChangesOk() ([]RevisionRef, bool) {
	if o == nil || IsNil(o.Changes) {
		return nil, false
	}
	return o.Changes, true
}

// HasChanges returns a boolean if a field has been set.
func (o *LocalChangelog) HasChanges() bool {
	if o != nil && !IsNil(o.Changes) {
		return true
	}

	return false
}

// SetChanges gets a reference to the given []RevisionRef and assigns it to the Changes field.
func (o *LocalChangelog) SetChanges(v []RevisionRef) {
	o.Changes = v
}

func (o LocalChangelog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocalChangelog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Changes) {
		toSerialize["changes"] = o.Changes
	}
	return toSerialize, nil
}

type NullableLocalChangelog struct {
	value *LocalChangelog
	isSet bool
}

func (v NullableLocalChangelog) Get() *LocalChangelog {
	return v.value
}

func (v *NullableLocalChangelog) Set(val *LocalChangelog) {
	v.value = val
	v.isSet = true
}

func (v NullableLocalChangelog) IsSet() bool {
	return v.isSet
}

func (v *NullableLocalChangelog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocalChangelog(val *LocalChangelog) *NullableLocalChangelog {
	return &NullableLocalChangelog{value: val, isSet: true}
}

func (v NullableLocalChangelog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocalChangelog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


