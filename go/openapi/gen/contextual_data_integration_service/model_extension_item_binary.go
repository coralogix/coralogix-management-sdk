/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExtensionItemBinary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionItemBinary{}

// ExtensionItemBinary struct for ExtensionItemBinary
type ExtensionItemBinary struct {
	Data string `json:"data"`
	FileName string `json:"fileName"`
	Type ExtensionItemBinaryBinaryType `json:"type"`
}

type _ExtensionItemBinary ExtensionItemBinary

// NewExtensionItemBinary instantiates a new ExtensionItemBinary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionItemBinary(data string, fileName string, type_ ExtensionItemBinaryBinaryType) *ExtensionItemBinary {
	this := ExtensionItemBinary{}
	this.Data = data
	this.FileName = fileName
	this.Type = type_
	return &this
}

// NewExtensionItemBinaryWithDefaults instantiates a new ExtensionItemBinary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionItemBinaryWithDefaults() *ExtensionItemBinary {
	this := ExtensionItemBinary{}
	return &this
}

// GetData returns the Data field value
func (o *ExtensionItemBinary) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ExtensionItemBinary) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ExtensionItemBinary) SetData(v string) {
	o.Data = v
}

// GetFileName returns the FileName field value
func (o *ExtensionItemBinary) GetFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value
// and a boolean to check if the value has been set.
func (o *ExtensionItemBinary) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileName, true
}

// SetFileName sets field value
func (o *ExtensionItemBinary) SetFileName(v string) {
	o.FileName = v
}

// GetType returns the Type field value
func (o *ExtensionItemBinary) GetType() ExtensionItemBinaryBinaryType {
	if o == nil {
		var ret ExtensionItemBinaryBinaryType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ExtensionItemBinary) GetTypeOk() (*ExtensionItemBinaryBinaryType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ExtensionItemBinary) SetType(v ExtensionItemBinaryBinaryType) {
	o.Type = v
}

func (o ExtensionItemBinary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionItemBinary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["fileName"] = o.FileName
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ExtensionItemBinary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"fileName",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtensionItemBinary := _ExtensionItemBinary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExtensionItemBinary)

	if err != nil {
		return err
	}

	*o = ExtensionItemBinary(varExtensionItemBinary)

	return err
}

type NullableExtensionItemBinary struct {
	value *ExtensionItemBinary
	isSet bool
}

func (v NullableExtensionItemBinary) Get() *ExtensionItemBinary {
	return v.value
}

func (v *NullableExtensionItemBinary) Set(val *ExtensionItemBinary) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionItemBinary) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionItemBinary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionItemBinary(val *ExtensionItemBinary) *NullableExtensionItemBinary {
	return &NullableExtensionItemBinary{value: val, isSet: true}
}

func (v NullableExtensionItemBinary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionItemBinary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


