/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"encoding/json"
	"fmt"
)

// InputType the model 'InputType'
type InputType string

// List of InputType
const (
	INPUTTYPE_API_KEY InputType = "API_KEY"
	INPUTTYPE_TEXT InputType = "TEXT"
	INPUTTYPE_LIST_TEXT InputType = "LIST_TEXT"
	INPUTTYPE_MULTIPLE_SELECTION InputType = "MULTIPLE_SELECTION"
	INPUTTYPE_BOOLEAN InputType = "BOOLEAN"
	INPUTTYPE_SELECT InputType = "SELECT"
	INPUTTYPE_JSON InputType = "JSON"
	INPUTTYPE_NUMBER InputType = "NUMBER"
	INPUTTYPE_SENSITIVE_DATA InputType = "SENSITIVE_DATA"
	INPUTTYPE_JSON_OBJECT_ARRAY InputType = "JSON_OBJECT_ARRAY"
)

// All allowed values of InputType enum
var AllowedInputTypeEnumValues = []InputType{
	"API_KEY",
	"TEXT",
	"LIST_TEXT",
	"MULTIPLE_SELECTION",
	"BOOLEAN",
	"SELECT",
	"JSON",
	"NUMBER",
	"SENSITIVE_DATA",
	"JSON_OBJECT_ARRAY",
}

func (v *InputType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InputType(value)
	for _, existing := range AllowedInputTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InputType", value)
}

// NewInputTypeFromValue returns a pointer to a valid InputType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInputTypeFromValue(v string) (*InputType, error) {
	ev := InputType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InputType: valid values are %v", v, AllowedInputTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InputType) IsValid() bool {
	for _, existing := range AllowedInputTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InputType value
func (v InputType) Ptr() *InputType {
	return &v
}

type NullableInputType struct {
	value *InputType
	isSet bool
}

func (v NullableInputType) Get() *InputType {
	return v.value
}

func (v *NullableInputType) Set(val *InputType) {
	v.value = val
	v.isSet = true
}

func (v NullableInputType) IsSet() bool {
	return v.isSet
}

func (v *NullableInputType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputType(val *InputType) *NullableInputType {
	return &NullableInputType{value: val, isSet: true}
}

func (v NullableInputType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

