/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// RegisteredInstance - struct for RegisteredInstance
type RegisteredInstance struct {
	RegisteredInstanceArm *RegisteredInstanceArm
	RegisteredInstanceCloudformation *RegisteredInstanceCloudformation
	RegisteredInstanceEmpty *RegisteredInstanceEmpty
}

// RegisteredInstanceArmAsRegisteredInstance is a convenience function that returns RegisteredInstanceArm wrapped in RegisteredInstance
func RegisteredInstanceArmAsRegisteredInstance(v *RegisteredInstanceArm) RegisteredInstance {
	return RegisteredInstance{
		RegisteredInstanceArm: v,
	}
}

// RegisteredInstanceCloudformationAsRegisteredInstance is a convenience function that returns RegisteredInstanceCloudformation wrapped in RegisteredInstance
func RegisteredInstanceCloudformationAsRegisteredInstance(v *RegisteredInstanceCloudformation) RegisteredInstance {
	return RegisteredInstance{
		RegisteredInstanceCloudformation: v,
	}
}

// RegisteredInstanceEmptyAsRegisteredInstance is a convenience function that returns RegisteredInstanceEmpty wrapped in RegisteredInstance
func RegisteredInstanceEmptyAsRegisteredInstance(v *RegisteredInstanceEmpty) RegisteredInstance {
	return RegisteredInstance{
		RegisteredInstanceEmpty: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RegisteredInstance) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RegisteredInstanceArm
	err = newStrictDecoder(data).Decode(&dst.RegisteredInstanceArm)
	if err == nil {
		jsonRegisteredInstanceArm, _ := json.Marshal(dst.RegisteredInstanceArm)
		if string(jsonRegisteredInstanceArm) == "{}" { // empty struct
			dst.RegisteredInstanceArm = nil
		} else {
			if err = validator.Validate(dst.RegisteredInstanceArm); err != nil {
				dst.RegisteredInstanceArm = nil
			} else {
				match++
			}
		}
	} else {
		dst.RegisteredInstanceArm = nil
	}

	// try to unmarshal data into RegisteredInstanceCloudformation
	err = newStrictDecoder(data).Decode(&dst.RegisteredInstanceCloudformation)
	if err == nil {
		jsonRegisteredInstanceCloudformation, _ := json.Marshal(dst.RegisteredInstanceCloudformation)
		if string(jsonRegisteredInstanceCloudformation) == "{}" { // empty struct
			dst.RegisteredInstanceCloudformation = nil
		} else {
			if err = validator.Validate(dst.RegisteredInstanceCloudformation); err != nil {
				dst.RegisteredInstanceCloudformation = nil
			} else {
				match++
			}
		}
	} else {
		dst.RegisteredInstanceCloudformation = nil
	}

	// try to unmarshal data into RegisteredInstanceEmpty
	err = newStrictDecoder(data).Decode(&dst.RegisteredInstanceEmpty)
	if err == nil {
		jsonRegisteredInstanceEmpty, _ := json.Marshal(dst.RegisteredInstanceEmpty)
		if string(jsonRegisteredInstanceEmpty) == "{}" { // empty struct
			dst.RegisteredInstanceEmpty = nil
		} else {
			if err = validator.Validate(dst.RegisteredInstanceEmpty); err != nil {
				dst.RegisteredInstanceEmpty = nil
			} else {
				match++
			}
		}
	} else {
		dst.RegisteredInstanceEmpty = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RegisteredInstanceArm = nil
		dst.RegisteredInstanceCloudformation = nil
		dst.RegisteredInstanceEmpty = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RegisteredInstance)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RegisteredInstance)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RegisteredInstance) MarshalJSON() ([]byte, error) {
	if src.RegisteredInstanceArm != nil {
		return json.Marshal(&src.RegisteredInstanceArm)
	}

	if src.RegisteredInstanceCloudformation != nil {
		return json.Marshal(&src.RegisteredInstanceCloudformation)
	}

	if src.RegisteredInstanceEmpty != nil {
		return json.Marshal(&src.RegisteredInstanceEmpty)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RegisteredInstance) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RegisteredInstanceArm != nil {
		return obj.RegisteredInstanceArm
	}

	if obj.RegisteredInstanceCloudformation != nil {
		return obj.RegisteredInstanceCloudformation
	}

	if obj.RegisteredInstanceEmpty != nil {
		return obj.RegisteredInstanceEmpty
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj RegisteredInstance) GetActualInstanceValue() (interface{}) {
	if obj.RegisteredInstanceArm != nil {
		return *obj.RegisteredInstanceArm
	}

	if obj.RegisteredInstanceCloudformation != nil {
		return *obj.RegisteredInstanceCloudformation
	}

	if obj.RegisteredInstanceEmpty != nil {
		return *obj.RegisteredInstanceEmpty
	}

	// all schemas are nil
	return nil
}

type NullableRegisteredInstance struct {
	value *RegisteredInstance
	isSet bool
}

func (v NullableRegisteredInstance) Get() *RegisteredInstance {
	return v.value
}

func (v *NullableRegisteredInstance) Set(val *RegisteredInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisteredInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisteredInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisteredInstance(val *RegisteredInstance) *NullableRegisteredInstance {
	return &NullableRegisteredInstance{value: val, isSet: true}
}

func (v NullableRegisteredInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisteredInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


