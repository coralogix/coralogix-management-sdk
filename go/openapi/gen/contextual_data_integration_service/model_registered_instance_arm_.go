/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"encoding/json"
	"time"
)

// checks if the RegisteredInstanceArm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisteredInstanceArm{}

// RegisteredInstanceArm struct for RegisteredInstanceArm
type RegisteredInstanceArm struct {
	Arm *ARMStack `json:"arm,omitempty"`
	DefinitionVersion *string `json:"definitionVersion,omitempty"`
	Id *string `json:"id,omitempty"`
	IntegrationStatus *IntegrationStatus `json:"integrationStatus,omitempty"`
	IsTesting *bool `json:"isTesting,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	Parameters []Parameter `json:"parameters,omitempty"`
}

// NewRegisteredInstanceArm instantiates a new RegisteredInstanceArm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisteredInstanceArm() *RegisteredInstanceArm {
	this := RegisteredInstanceArm{}
	return &this
}

// NewRegisteredInstanceArmWithDefaults instantiates a new RegisteredInstanceArm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisteredInstanceArmWithDefaults() *RegisteredInstanceArm {
	this := RegisteredInstanceArm{}
	return &this
}

// GetArm returns the Arm field value if set, zero value otherwise.
func (o *RegisteredInstanceArm) GetArm() ARMStack {
	if o == nil || IsNil(o.Arm) {
		var ret ARMStack
		return ret
	}
	return *o.Arm
}

// GetArmOk returns a tuple with the Arm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredInstanceArm) GetArmOk() (*ARMStack, bool) {
	if o == nil || IsNil(o.Arm) {
		return nil, false
	}
	return o.Arm, true
}

// HasArm returns a boolean if a field has been set.
func (o *RegisteredInstanceArm) HasArm() bool {
	if o != nil && !IsNil(o.Arm) {
		return true
	}

	return false
}

// SetArm gets a reference to the given ARMStack and assigns it to the Arm field.
func (o *RegisteredInstanceArm) SetArm(v ARMStack) {
	o.Arm = &v
}

// GetDefinitionVersion returns the DefinitionVersion field value if set, zero value otherwise.
func (o *RegisteredInstanceArm) GetDefinitionVersion() string {
	if o == nil || IsNil(o.DefinitionVersion) {
		var ret string
		return ret
	}
	return *o.DefinitionVersion
}

// GetDefinitionVersionOk returns a tuple with the DefinitionVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredInstanceArm) GetDefinitionVersionOk() (*string, bool) {
	if o == nil || IsNil(o.DefinitionVersion) {
		return nil, false
	}
	return o.DefinitionVersion, true
}

// HasDefinitionVersion returns a boolean if a field has been set.
func (o *RegisteredInstanceArm) HasDefinitionVersion() bool {
	if o != nil && !IsNil(o.DefinitionVersion) {
		return true
	}

	return false
}

// SetDefinitionVersion gets a reference to the given string and assigns it to the DefinitionVersion field.
func (o *RegisteredInstanceArm) SetDefinitionVersion(v string) {
	o.DefinitionVersion = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RegisteredInstanceArm) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredInstanceArm) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RegisteredInstanceArm) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RegisteredInstanceArm) SetId(v string) {
	o.Id = &v
}

// GetIntegrationStatus returns the IntegrationStatus field value if set, zero value otherwise.
func (o *RegisteredInstanceArm) GetIntegrationStatus() IntegrationStatus {
	if o == nil || IsNil(o.IntegrationStatus) {
		var ret IntegrationStatus
		return ret
	}
	return *o.IntegrationStatus
}

// GetIntegrationStatusOk returns a tuple with the IntegrationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredInstanceArm) GetIntegrationStatusOk() (*IntegrationStatus, bool) {
	if o == nil || IsNil(o.IntegrationStatus) {
		return nil, false
	}
	return o.IntegrationStatus, true
}

// HasIntegrationStatus returns a boolean if a field has been set.
func (o *RegisteredInstanceArm) HasIntegrationStatus() bool {
	if o != nil && !IsNil(o.IntegrationStatus) {
		return true
	}

	return false
}

// SetIntegrationStatus gets a reference to the given IntegrationStatus and assigns it to the IntegrationStatus field.
func (o *RegisteredInstanceArm) SetIntegrationStatus(v IntegrationStatus) {
	o.IntegrationStatus = &v
}

// GetIsTesting returns the IsTesting field value if set, zero value otherwise.
func (o *RegisteredInstanceArm) GetIsTesting() bool {
	if o == nil || IsNil(o.IsTesting) {
		var ret bool
		return ret
	}
	return *o.IsTesting
}

// GetIsTestingOk returns a tuple with the IsTesting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredInstanceArm) GetIsTestingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTesting) {
		return nil, false
	}
	return o.IsTesting, true
}

// HasIsTesting returns a boolean if a field has been set.
func (o *RegisteredInstanceArm) HasIsTesting() bool {
	if o != nil && !IsNil(o.IsTesting) {
		return true
	}

	return false
}

// SetIsTesting gets a reference to the given bool and assigns it to the IsTesting field.
func (o *RegisteredInstanceArm) SetIsTesting(v bool) {
	o.IsTesting = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *RegisteredInstanceArm) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredInstanceArm) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *RegisteredInstanceArm) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *RegisteredInstanceArm) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *RegisteredInstanceArm) GetParameters() []Parameter {
	if o == nil || IsNil(o.Parameters) {
		var ret []Parameter
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredInstanceArm) GetParametersOk() ([]Parameter, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *RegisteredInstanceArm) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []Parameter and assigns it to the Parameters field.
func (o *RegisteredInstanceArm) SetParameters(v []Parameter) {
	o.Parameters = v
}

func (o RegisteredInstanceArm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisteredInstanceArm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Arm) {
		toSerialize["arm"] = o.Arm
	}
	if !IsNil(o.DefinitionVersion) {
		toSerialize["definitionVersion"] = o.DefinitionVersion
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IntegrationStatus) {
		toSerialize["integrationStatus"] = o.IntegrationStatus
	}
	if !IsNil(o.IsTesting) {
		toSerialize["isTesting"] = o.IsTesting
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	return toSerialize, nil
}

type NullableRegisteredInstanceArm struct {
	value *RegisteredInstanceArm
	isSet bool
}

func (v NullableRegisteredInstanceArm) Get() *RegisteredInstanceArm {
	return v.value
}

func (v *NullableRegisteredInstanceArm) Set(val *RegisteredInstanceArm) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisteredInstanceArm) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisteredInstanceArm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisteredInstanceArm(val *RegisteredInstanceArm) *NullableRegisteredInstanceArm {
	return &NullableRegisteredInstanceArm{value: val, isSet: true}
}

func (v NullableRegisteredInstanceArm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisteredInstanceArm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


