/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"encoding/json"
)

// checks if the IntegrationDetails1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationDetails1{}

// IntegrationDetails1 This data structure represents a set of integration details.
type IntegrationDetails1 struct {
	Default *DefaultIntegrationDetails `json:"default,omitempty"`
	Docs []IntegrationDoc `json:"docs,omitempty"`
	Extensions []V1Extension `json:"extensions,omitempty"`
	External *ExternalUrl `json:"external,omitempty"`
	Integration *Integration `json:"integration,omitempty"`
}

// NewIntegrationDetails1 instantiates a new IntegrationDetails1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationDetails1() *IntegrationDetails1 {
	this := IntegrationDetails1{}
	return &this
}

// NewIntegrationDetails1WithDefaults instantiates a new IntegrationDetails1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationDetails1WithDefaults() *IntegrationDetails1 {
	this := IntegrationDetails1{}
	return &this
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *IntegrationDetails1) GetDefault() DefaultIntegrationDetails {
	if o == nil || IsNil(o.Default) {
		var ret DefaultIntegrationDetails
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationDetails1) GetDefaultOk() (*DefaultIntegrationDetails, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *IntegrationDetails1) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given DefaultIntegrationDetails and assigns it to the Default field.
func (o *IntegrationDetails1) SetDefault(v DefaultIntegrationDetails) {
	o.Default = &v
}

// GetDocs returns the Docs field value if set, zero value otherwise.
func (o *IntegrationDetails1) GetDocs() []IntegrationDoc {
	if o == nil || IsNil(o.Docs) {
		var ret []IntegrationDoc
		return ret
	}
	return o.Docs
}

// GetDocsOk returns a tuple with the Docs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationDetails1) GetDocsOk() ([]IntegrationDoc, bool) {
	if o == nil || IsNil(o.Docs) {
		return nil, false
	}
	return o.Docs, true
}

// HasDocs returns a boolean if a field has been set.
func (o *IntegrationDetails1) HasDocs() bool {
	if o != nil && !IsNil(o.Docs) {
		return true
	}

	return false
}

// SetDocs gets a reference to the given []IntegrationDoc and assigns it to the Docs field.
func (o *IntegrationDetails1) SetDocs(v []IntegrationDoc) {
	o.Docs = v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *IntegrationDetails1) GetExtensions() []V1Extension {
	if o == nil || IsNil(o.Extensions) {
		var ret []V1Extension
		return ret
	}
	return o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationDetails1) GetExtensionsOk() ([]V1Extension, bool) {
	if o == nil || IsNil(o.Extensions) {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *IntegrationDetails1) HasExtensions() bool {
	if o != nil && !IsNil(o.Extensions) {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given []V1Extension and assigns it to the Extensions field.
func (o *IntegrationDetails1) SetExtensions(v []V1Extension) {
	o.Extensions = v
}

// GetExternal returns the External field value if set, zero value otherwise.
func (o *IntegrationDetails1) GetExternal() ExternalUrl {
	if o == nil || IsNil(o.External) {
		var ret ExternalUrl
		return ret
	}
	return *o.External
}

// GetExternalOk returns a tuple with the External field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationDetails1) GetExternalOk() (*ExternalUrl, bool) {
	if o == nil || IsNil(o.External) {
		return nil, false
	}
	return o.External, true
}

// HasExternal returns a boolean if a field has been set.
func (o *IntegrationDetails1) HasExternal() bool {
	if o != nil && !IsNil(o.External) {
		return true
	}

	return false
}

// SetExternal gets a reference to the given ExternalUrl and assigns it to the External field.
func (o *IntegrationDetails1) SetExternal(v ExternalUrl) {
	o.External = &v
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *IntegrationDetails1) GetIntegration() Integration {
	if o == nil || IsNil(o.Integration) {
		var ret Integration
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationDetails1) GetIntegrationOk() (*Integration, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *IntegrationDetails1) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given Integration and assigns it to the Integration field.
func (o *IntegrationDetails1) SetIntegration(v Integration) {
	o.Integration = &v
}

func (o IntegrationDetails1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationDetails1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.Docs) {
		toSerialize["docs"] = o.Docs
	}
	if !IsNil(o.Extensions) {
		toSerialize["extensions"] = o.Extensions
	}
	if !IsNil(o.External) {
		toSerialize["external"] = o.External
	}
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	return toSerialize, nil
}

type NullableIntegrationDetails1 struct {
	value *IntegrationDetails1
	isSet bool
}

func (v NullableIntegrationDetails1) Get() *IntegrationDetails1 {
	return v.value
}

func (v *NullableIntegrationDetails1) Set(val *IntegrationDetails1) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationDetails1) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationDetails1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationDetails1(val *IntegrationDetails1) *NullableIntegrationDetails1 {
	return &NullableIntegrationDetails1{value: val, isSet: true}
}

func (v NullableIntegrationDetails1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationDetails1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


