/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FieldInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FieldInformation{}

// FieldInformation struct for FieldInformation
type FieldInformation struct {
	AllowedPattern *string `json:"allowedPattern,omitempty"`
	ApplicableIf *FieldCondition `json:"applicableIf,omitempty"`
	DocumentationReference *string `json:"documentationReference,omitempty"`
	GroupId *string `json:"groupId,omitempty"`
	Name *string `json:"name,omitempty"`
	Placeholder *string `json:"placeholder,omitempty"`
	Predefined *bool `json:"predefined,omitempty"`
	Readonly *bool `json:"readonly,omitempty"`
	Required *bool `json:"required,omitempty"`
	Single *SingleValue `json:"single,omitempty"`
	TemplateParamName *string `json:"templateParamName,omitempty"`
	Tooltip *string `json:"tooltip,omitempty"`
	Type InputType `json:"type"`
	UpgradeNotice *string `json:"upgradeNotice,omitempty"`
	Visible *bool `json:"visible,omitempty"`
}

type _FieldInformation FieldInformation

// NewFieldInformation instantiates a new FieldInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldInformation(type_ InputType) *FieldInformation {
	this := FieldInformation{}
	this.Type = type_
	return &this
}

// NewFieldInformationWithDefaults instantiates a new FieldInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldInformationWithDefaults() *FieldInformation {
	this := FieldInformation{}
	return &this
}

// GetAllowedPattern returns the AllowedPattern field value if set, zero value otherwise.
func (o *FieldInformation) GetAllowedPattern() string {
	if o == nil || IsNil(o.AllowedPattern) {
		var ret string
		return ret
	}
	return *o.AllowedPattern
}

// GetAllowedPatternOk returns a tuple with the AllowedPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInformation) GetAllowedPatternOk() (*string, bool) {
	if o == nil || IsNil(o.AllowedPattern) {
		return nil, false
	}
	return o.AllowedPattern, true
}

// HasAllowedPattern returns a boolean if a field has been set.
func (o *FieldInformation) HasAllowedPattern() bool {
	if o != nil && !IsNil(o.AllowedPattern) {
		return true
	}

	return false
}

// SetAllowedPattern gets a reference to the given string and assigns it to the AllowedPattern field.
func (o *FieldInformation) SetAllowedPattern(v string) {
	o.AllowedPattern = &v
}

// GetApplicableIf returns the ApplicableIf field value if set, zero value otherwise.
func (o *FieldInformation) GetApplicableIf() FieldCondition {
	if o == nil || IsNil(o.ApplicableIf) {
		var ret FieldCondition
		return ret
	}
	return *o.ApplicableIf
}

// GetApplicableIfOk returns a tuple with the ApplicableIf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInformation) GetApplicableIfOk() (*FieldCondition, bool) {
	if o == nil || IsNil(o.ApplicableIf) {
		return nil, false
	}
	return o.ApplicableIf, true
}

// HasApplicableIf returns a boolean if a field has been set.
func (o *FieldInformation) HasApplicableIf() bool {
	if o != nil && !IsNil(o.ApplicableIf) {
		return true
	}

	return false
}

// SetApplicableIf gets a reference to the given FieldCondition and assigns it to the ApplicableIf field.
func (o *FieldInformation) SetApplicableIf(v FieldCondition) {
	o.ApplicableIf = &v
}

// GetDocumentationReference returns the DocumentationReference field value if set, zero value otherwise.
func (o *FieldInformation) GetDocumentationReference() string {
	if o == nil || IsNil(o.DocumentationReference) {
		var ret string
		return ret
	}
	return *o.DocumentationReference
}

// GetDocumentationReferenceOk returns a tuple with the DocumentationReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInformation) GetDocumentationReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentationReference) {
		return nil, false
	}
	return o.DocumentationReference, true
}

// HasDocumentationReference returns a boolean if a field has been set.
func (o *FieldInformation) HasDocumentationReference() bool {
	if o != nil && !IsNil(o.DocumentationReference) {
		return true
	}

	return false
}

// SetDocumentationReference gets a reference to the given string and assigns it to the DocumentationReference field.
func (o *FieldInformation) SetDocumentationReference(v string) {
	o.DocumentationReference = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *FieldInformation) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInformation) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *FieldInformation) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *FieldInformation) SetGroupId(v string) {
	o.GroupId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FieldInformation) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInformation) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FieldInformation) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FieldInformation) SetName(v string) {
	o.Name = &v
}

// GetPlaceholder returns the Placeholder field value if set, zero value otherwise.
func (o *FieldInformation) GetPlaceholder() string {
	if o == nil || IsNil(o.Placeholder) {
		var ret string
		return ret
	}
	return *o.Placeholder
}

// GetPlaceholderOk returns a tuple with the Placeholder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInformation) GetPlaceholderOk() (*string, bool) {
	if o == nil || IsNil(o.Placeholder) {
		return nil, false
	}
	return o.Placeholder, true
}

// HasPlaceholder returns a boolean if a field has been set.
func (o *FieldInformation) HasPlaceholder() bool {
	if o != nil && !IsNil(o.Placeholder) {
		return true
	}

	return false
}

// SetPlaceholder gets a reference to the given string and assigns it to the Placeholder field.
func (o *FieldInformation) SetPlaceholder(v string) {
	o.Placeholder = &v
}

// GetPredefined returns the Predefined field value if set, zero value otherwise.
func (o *FieldInformation) GetPredefined() bool {
	if o == nil || IsNil(o.Predefined) {
		var ret bool
		return ret
	}
	return *o.Predefined
}

// GetPredefinedOk returns a tuple with the Predefined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInformation) GetPredefinedOk() (*bool, bool) {
	if o == nil || IsNil(o.Predefined) {
		return nil, false
	}
	return o.Predefined, true
}

// HasPredefined returns a boolean if a field has been set.
func (o *FieldInformation) HasPredefined() bool {
	if o != nil && !IsNil(o.Predefined) {
		return true
	}

	return false
}

// SetPredefined gets a reference to the given bool and assigns it to the Predefined field.
func (o *FieldInformation) SetPredefined(v bool) {
	o.Predefined = &v
}

// GetReadonly returns the Readonly field value if set, zero value otherwise.
func (o *FieldInformation) GetReadonly() bool {
	if o == nil || IsNil(o.Readonly) {
		var ret bool
		return ret
	}
	return *o.Readonly
}

// GetReadonlyOk returns a tuple with the Readonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInformation) GetReadonlyOk() (*bool, bool) {
	if o == nil || IsNil(o.Readonly) {
		return nil, false
	}
	return o.Readonly, true
}

// HasReadonly returns a boolean if a field has been set.
func (o *FieldInformation) HasReadonly() bool {
	if o != nil && !IsNil(o.Readonly) {
		return true
	}

	return false
}

// SetReadonly gets a reference to the given bool and assigns it to the Readonly field.
func (o *FieldInformation) SetReadonly(v bool) {
	o.Readonly = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *FieldInformation) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInformation) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *FieldInformation) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *FieldInformation) SetRequired(v bool) {
	o.Required = &v
}

// GetSingle returns the Single field value if set, zero value otherwise.
func (o *FieldInformation) GetSingle() SingleValue {
	if o == nil || IsNil(o.Single) {
		var ret SingleValue
		return ret
	}
	return *o.Single
}

// GetSingleOk returns a tuple with the Single field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInformation) GetSingleOk() (*SingleValue, bool) {
	if o == nil || IsNil(o.Single) {
		return nil, false
	}
	return o.Single, true
}

// HasSingle returns a boolean if a field has been set.
func (o *FieldInformation) HasSingle() bool {
	if o != nil && !IsNil(o.Single) {
		return true
	}

	return false
}

// SetSingle gets a reference to the given SingleValue and assigns it to the Single field.
func (o *FieldInformation) SetSingle(v SingleValue) {
	o.Single = &v
}

// GetTemplateParamName returns the TemplateParamName field value if set, zero value otherwise.
func (o *FieldInformation) GetTemplateParamName() string {
	if o == nil || IsNil(o.TemplateParamName) {
		var ret string
		return ret
	}
	return *o.TemplateParamName
}

// GetTemplateParamNameOk returns a tuple with the TemplateParamName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInformation) GetTemplateParamNameOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateParamName) {
		return nil, false
	}
	return o.TemplateParamName, true
}

// HasTemplateParamName returns a boolean if a field has been set.
func (o *FieldInformation) HasTemplateParamName() bool {
	if o != nil && !IsNil(o.TemplateParamName) {
		return true
	}

	return false
}

// SetTemplateParamName gets a reference to the given string and assigns it to the TemplateParamName field.
func (o *FieldInformation) SetTemplateParamName(v string) {
	o.TemplateParamName = &v
}

// GetTooltip returns the Tooltip field value if set, zero value otherwise.
func (o *FieldInformation) GetTooltip() string {
	if o == nil || IsNil(o.Tooltip) {
		var ret string
		return ret
	}
	return *o.Tooltip
}

// GetTooltipOk returns a tuple with the Tooltip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInformation) GetTooltipOk() (*string, bool) {
	if o == nil || IsNil(o.Tooltip) {
		return nil, false
	}
	return o.Tooltip, true
}

// HasTooltip returns a boolean if a field has been set.
func (o *FieldInformation) HasTooltip() bool {
	if o != nil && !IsNil(o.Tooltip) {
		return true
	}

	return false
}

// SetTooltip gets a reference to the given string and assigns it to the Tooltip field.
func (o *FieldInformation) SetTooltip(v string) {
	o.Tooltip = &v
}

// GetType returns the Type field value
func (o *FieldInformation) GetType() InputType {
	if o == nil {
		var ret InputType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FieldInformation) GetTypeOk() (*InputType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FieldInformation) SetType(v InputType) {
	o.Type = v
}

// GetUpgradeNotice returns the UpgradeNotice field value if set, zero value otherwise.
func (o *FieldInformation) GetUpgradeNotice() string {
	if o == nil || IsNil(o.UpgradeNotice) {
		var ret string
		return ret
	}
	return *o.UpgradeNotice
}

// GetUpgradeNoticeOk returns a tuple with the UpgradeNotice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInformation) GetUpgradeNoticeOk() (*string, bool) {
	if o == nil || IsNil(o.UpgradeNotice) {
		return nil, false
	}
	return o.UpgradeNotice, true
}

// HasUpgradeNotice returns a boolean if a field has been set.
func (o *FieldInformation) HasUpgradeNotice() bool {
	if o != nil && !IsNil(o.UpgradeNotice) {
		return true
	}

	return false
}

// SetUpgradeNotice gets a reference to the given string and assigns it to the UpgradeNotice field.
func (o *FieldInformation) SetUpgradeNotice(v string) {
	o.UpgradeNotice = &v
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *FieldInformation) GetVisible() bool {
	if o == nil || IsNil(o.Visible) {
		var ret bool
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInformation) GetVisibleOk() (*bool, bool) {
	if o == nil || IsNil(o.Visible) {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *FieldInformation) HasVisible() bool {
	if o != nil && !IsNil(o.Visible) {
		return true
	}

	return false
}

// SetVisible gets a reference to the given bool and assigns it to the Visible field.
func (o *FieldInformation) SetVisible(v bool) {
	o.Visible = &v
}

func (o FieldInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowedPattern) {
		toSerialize["allowedPattern"] = o.AllowedPattern
	}
	if !IsNil(o.ApplicableIf) {
		toSerialize["applicableIf"] = o.ApplicableIf
	}
	if !IsNil(o.DocumentationReference) {
		toSerialize["documentationReference"] = o.DocumentationReference
	}
	if !IsNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Placeholder) {
		toSerialize["placeholder"] = o.Placeholder
	}
	if !IsNil(o.Predefined) {
		toSerialize["predefined"] = o.Predefined
	}
	if !IsNil(o.Readonly) {
		toSerialize["readonly"] = o.Readonly
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.Single) {
		toSerialize["single"] = o.Single
	}
	if !IsNil(o.TemplateParamName) {
		toSerialize["templateParamName"] = o.TemplateParamName
	}
	if !IsNil(o.Tooltip) {
		toSerialize["tooltip"] = o.Tooltip
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.UpgradeNotice) {
		toSerialize["upgradeNotice"] = o.UpgradeNotice
	}
	if !IsNil(o.Visible) {
		toSerialize["visible"] = o.Visible
	}
	return toSerialize, nil
}

func (o *FieldInformation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFieldInformation := _FieldInformation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFieldInformation)

	if err != nil {
		return err
	}

	*o = FieldInformation(varFieldInformation)

	return err
}

type NullableFieldInformation struct {
	value *FieldInformation
	isSet bool
}

func (v NullableFieldInformation) Get() *FieldInformation {
	return v.value
}

func (v *NullableFieldInformation) Set(val *FieldInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldInformation(val *FieldInformation) *NullableFieldInformation {
	return &NullableFieldInformation{value: val, isSet: true}
}

func (v NullableFieldInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


