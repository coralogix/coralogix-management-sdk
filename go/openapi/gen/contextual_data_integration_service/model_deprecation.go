/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Deprecation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Deprecation{}

// Deprecation struct for Deprecation
type Deprecation struct {
	Reason string `json:"reason"`
	ReplacementExtensions []string `json:"replacementExtensions,omitempty"`
}

type _Deprecation Deprecation

// NewDeprecation instantiates a new Deprecation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeprecation(reason string) *Deprecation {
	this := Deprecation{}
	this.Reason = reason
	return &this
}

// NewDeprecationWithDefaults instantiates a new Deprecation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeprecationWithDefaults() *Deprecation {
	this := Deprecation{}
	return &this
}

// GetReason returns the Reason field value
func (o *Deprecation) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *Deprecation) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *Deprecation) SetReason(v string) {
	o.Reason = v
}

// GetReplacementExtensions returns the ReplacementExtensions field value if set, zero value otherwise.
func (o *Deprecation) GetReplacementExtensions() []string {
	if o == nil || IsNil(o.ReplacementExtensions) {
		var ret []string
		return ret
	}
	return o.ReplacementExtensions
}

// GetReplacementExtensionsOk returns a tuple with the ReplacementExtensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deprecation) GetReplacementExtensionsOk() ([]string, bool) {
	if o == nil || IsNil(o.ReplacementExtensions) {
		return nil, false
	}
	return o.ReplacementExtensions, true
}

// HasReplacementExtensions returns a boolean if a field has been set.
func (o *Deprecation) HasReplacementExtensions() bool {
	if o != nil && !IsNil(o.ReplacementExtensions) {
		return true
	}

	return false
}

// SetReplacementExtensions gets a reference to the given []string and assigns it to the ReplacementExtensions field.
func (o *Deprecation) SetReplacementExtensions(v []string) {
	o.ReplacementExtensions = v
}

func (o Deprecation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Deprecation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reason"] = o.Reason
	if !IsNil(o.ReplacementExtensions) {
		toSerialize["replacementExtensions"] = o.ReplacementExtensions
	}
	return toSerialize, nil
}

func (o *Deprecation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeprecation := _Deprecation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeprecation)

	if err != nil {
		return err
	}

	*o = Deprecation(varDeprecation)

	return err
}

type NullableDeprecation struct {
	value *Deprecation
	isSet bool
}

func (v NullableDeprecation) Get() *Deprecation {
	return v.value
}

func (v *NullableDeprecation) Set(val *Deprecation) {
	v.value = val
	v.isSet = true
}

func (v NullableDeprecation) IsSet() bool {
	return v.isSet
}

func (v *NullableDeprecation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeprecation(val *Deprecation) *NullableDeprecation {
	return &NullableDeprecation{value: val, isSet: true}
}

func (v NullableDeprecation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeprecation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


