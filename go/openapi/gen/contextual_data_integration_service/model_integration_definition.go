/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"encoding/json"
)

// checks if the IntegrationDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationDefinition{}

// IntegrationDefinition This data structure represents a definition of an integration.
type IntegrationDefinition struct {
	FeatureFlag *string `json:"featureFlag,omitempty"`
	IntegrationType *V1IntegrationType `json:"integrationType,omitempty"`
	Key *string `json:"key,omitempty"`
	Revisions []IntegrationRevision `json:"revisions,omitempty"`
}

// NewIntegrationDefinition instantiates a new IntegrationDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationDefinition() *IntegrationDefinition {
	this := IntegrationDefinition{}
	return &this
}

// NewIntegrationDefinitionWithDefaults instantiates a new IntegrationDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationDefinitionWithDefaults() *IntegrationDefinition {
	this := IntegrationDefinition{}
	return &this
}

// GetFeatureFlag returns the FeatureFlag field value if set, zero value otherwise.
func (o *IntegrationDefinition) GetFeatureFlag() string {
	if o == nil || IsNil(o.FeatureFlag) {
		var ret string
		return ret
	}
	return *o.FeatureFlag
}

// GetFeatureFlagOk returns a tuple with the FeatureFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationDefinition) GetFeatureFlagOk() (*string, bool) {
	if o == nil || IsNil(o.FeatureFlag) {
		return nil, false
	}
	return o.FeatureFlag, true
}

// HasFeatureFlag returns a boolean if a field has been set.
func (o *IntegrationDefinition) HasFeatureFlag() bool {
	if o != nil && !IsNil(o.FeatureFlag) {
		return true
	}

	return false
}

// SetFeatureFlag gets a reference to the given string and assigns it to the FeatureFlag field.
func (o *IntegrationDefinition) SetFeatureFlag(v string) {
	o.FeatureFlag = &v
}

// GetIntegrationType returns the IntegrationType field value if set, zero value otherwise.
func (o *IntegrationDefinition) GetIntegrationType() V1IntegrationType {
	if o == nil || IsNil(o.IntegrationType) {
		var ret V1IntegrationType
		return ret
	}
	return *o.IntegrationType
}

// GetIntegrationTypeOk returns a tuple with the IntegrationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationDefinition) GetIntegrationTypeOk() (*V1IntegrationType, bool) {
	if o == nil || IsNil(o.IntegrationType) {
		return nil, false
	}
	return o.IntegrationType, true
}

// HasIntegrationType returns a boolean if a field has been set.
func (o *IntegrationDefinition) HasIntegrationType() bool {
	if o != nil && !IsNil(o.IntegrationType) {
		return true
	}

	return false
}

// SetIntegrationType gets a reference to the given V1IntegrationType and assigns it to the IntegrationType field.
func (o *IntegrationDefinition) SetIntegrationType(v V1IntegrationType) {
	o.IntegrationType = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *IntegrationDefinition) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationDefinition) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *IntegrationDefinition) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *IntegrationDefinition) SetKey(v string) {
	o.Key = &v
}

// GetRevisions returns the Revisions field value if set, zero value otherwise.
func (o *IntegrationDefinition) GetRevisions() []IntegrationRevision {
	if o == nil || IsNil(o.Revisions) {
		var ret []IntegrationRevision
		return ret
	}
	return o.Revisions
}

// GetRevisionsOk returns a tuple with the Revisions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationDefinition) GetRevisionsOk() ([]IntegrationRevision, bool) {
	if o == nil || IsNil(o.Revisions) {
		return nil, false
	}
	return o.Revisions, true
}

// HasRevisions returns a boolean if a field has been set.
func (o *IntegrationDefinition) HasRevisions() bool {
	if o != nil && !IsNil(o.Revisions) {
		return true
	}

	return false
}

// SetRevisions gets a reference to the given []IntegrationRevision and assigns it to the Revisions field.
func (o *IntegrationDefinition) SetRevisions(v []IntegrationRevision) {
	o.Revisions = v
}

func (o IntegrationDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FeatureFlag) {
		toSerialize["featureFlag"] = o.FeatureFlag
	}
	if !IsNil(o.IntegrationType) {
		toSerialize["integrationType"] = o.IntegrationType
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Revisions) {
		toSerialize["revisions"] = o.Revisions
	}
	return toSerialize, nil
}

type NullableIntegrationDefinition struct {
	value *IntegrationDefinition
	isSet bool
}

func (v NullableIntegrationDefinition) Get() *IntegrationDefinition {
	return v.value
}

func (v *NullableIntegrationDefinition) Set(val *IntegrationDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationDefinition(val *IntegrationDefinition) *NullableIntegrationDefinition {
	return &NullableIntegrationDefinition{value: val, isSet: true}
}

func (v NullableIntegrationDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


