/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// V1IntegrationType - struct for V1IntegrationType
type V1IntegrationType struct {
	IntegrationTypeArm *IntegrationTypeArm
	IntegrationTypeCloudformation *IntegrationTypeCloudformation
	IntegrationTypeContextualData *IntegrationTypeContextualData
	IntegrationTypeGenericWebhook *IntegrationTypeGenericWebhook
	IntegrationTypeManaged *IntegrationTypeManaged
	IntegrationTypePushBasedContextualData *IntegrationTypePushBasedContextualData
	IntegrationTypeUntracked *IntegrationTypeUntracked
}

// IntegrationTypeArmAsV1IntegrationType is a convenience function that returns IntegrationTypeArm wrapped in V1IntegrationType
func IntegrationTypeArmAsV1IntegrationType(v *IntegrationTypeArm) V1IntegrationType {
	return V1IntegrationType{
		IntegrationTypeArm: v,
	}
}

// IntegrationTypeCloudformationAsV1IntegrationType is a convenience function that returns IntegrationTypeCloudformation wrapped in V1IntegrationType
func IntegrationTypeCloudformationAsV1IntegrationType(v *IntegrationTypeCloudformation) V1IntegrationType {
	return V1IntegrationType{
		IntegrationTypeCloudformation: v,
	}
}

// IntegrationTypeContextualDataAsV1IntegrationType is a convenience function that returns IntegrationTypeContextualData wrapped in V1IntegrationType
func IntegrationTypeContextualDataAsV1IntegrationType(v *IntegrationTypeContextualData) V1IntegrationType {
	return V1IntegrationType{
		IntegrationTypeContextualData: v,
	}
}

// IntegrationTypeGenericWebhookAsV1IntegrationType is a convenience function that returns IntegrationTypeGenericWebhook wrapped in V1IntegrationType
func IntegrationTypeGenericWebhookAsV1IntegrationType(v *IntegrationTypeGenericWebhook) V1IntegrationType {
	return V1IntegrationType{
		IntegrationTypeGenericWebhook: v,
	}
}

// IntegrationTypeManagedAsV1IntegrationType is a convenience function that returns IntegrationTypeManaged wrapped in V1IntegrationType
func IntegrationTypeManagedAsV1IntegrationType(v *IntegrationTypeManaged) V1IntegrationType {
	return V1IntegrationType{
		IntegrationTypeManaged: v,
	}
}

// IntegrationTypePushBasedContextualDataAsV1IntegrationType is a convenience function that returns IntegrationTypePushBasedContextualData wrapped in V1IntegrationType
func IntegrationTypePushBasedContextualDataAsV1IntegrationType(v *IntegrationTypePushBasedContextualData) V1IntegrationType {
	return V1IntegrationType{
		IntegrationTypePushBasedContextualData: v,
	}
}

// IntegrationTypeUntrackedAsV1IntegrationType is a convenience function that returns IntegrationTypeUntracked wrapped in V1IntegrationType
func IntegrationTypeUntrackedAsV1IntegrationType(v *IntegrationTypeUntracked) V1IntegrationType {
	return V1IntegrationType{
		IntegrationTypeUntracked: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *V1IntegrationType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IntegrationTypeArm
	err = newStrictDecoder(data).Decode(&dst.IntegrationTypeArm)
	if err == nil {
		jsonIntegrationTypeArm, _ := json.Marshal(dst.IntegrationTypeArm)
		if string(jsonIntegrationTypeArm) == "{}" { // empty struct
			dst.IntegrationTypeArm = nil
		} else {
			if err = validator.Validate(dst.IntegrationTypeArm); err != nil {
				dst.IntegrationTypeArm = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationTypeArm = nil
	}

	// try to unmarshal data into IntegrationTypeCloudformation
	err = newStrictDecoder(data).Decode(&dst.IntegrationTypeCloudformation)
	if err == nil {
		jsonIntegrationTypeCloudformation, _ := json.Marshal(dst.IntegrationTypeCloudformation)
		if string(jsonIntegrationTypeCloudformation) == "{}" { // empty struct
			dst.IntegrationTypeCloudformation = nil
		} else {
			if err = validator.Validate(dst.IntegrationTypeCloudformation); err != nil {
				dst.IntegrationTypeCloudformation = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationTypeCloudformation = nil
	}

	// try to unmarshal data into IntegrationTypeContextualData
	err = newStrictDecoder(data).Decode(&dst.IntegrationTypeContextualData)
	if err == nil {
		jsonIntegrationTypeContextualData, _ := json.Marshal(dst.IntegrationTypeContextualData)
		if string(jsonIntegrationTypeContextualData) == "{}" { // empty struct
			dst.IntegrationTypeContextualData = nil
		} else {
			if err = validator.Validate(dst.IntegrationTypeContextualData); err != nil {
				dst.IntegrationTypeContextualData = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationTypeContextualData = nil
	}

	// try to unmarshal data into IntegrationTypeGenericWebhook
	err = newStrictDecoder(data).Decode(&dst.IntegrationTypeGenericWebhook)
	if err == nil {
		jsonIntegrationTypeGenericWebhook, _ := json.Marshal(dst.IntegrationTypeGenericWebhook)
		if string(jsonIntegrationTypeGenericWebhook) == "{}" { // empty struct
			dst.IntegrationTypeGenericWebhook = nil
		} else {
			if err = validator.Validate(dst.IntegrationTypeGenericWebhook); err != nil {
				dst.IntegrationTypeGenericWebhook = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationTypeGenericWebhook = nil
	}

	// try to unmarshal data into IntegrationTypeManaged
	err = newStrictDecoder(data).Decode(&dst.IntegrationTypeManaged)
	if err == nil {
		jsonIntegrationTypeManaged, _ := json.Marshal(dst.IntegrationTypeManaged)
		if string(jsonIntegrationTypeManaged) == "{}" { // empty struct
			dst.IntegrationTypeManaged = nil
		} else {
			if err = validator.Validate(dst.IntegrationTypeManaged); err != nil {
				dst.IntegrationTypeManaged = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationTypeManaged = nil
	}

	// try to unmarshal data into IntegrationTypePushBasedContextualData
	err = newStrictDecoder(data).Decode(&dst.IntegrationTypePushBasedContextualData)
	if err == nil {
		jsonIntegrationTypePushBasedContextualData, _ := json.Marshal(dst.IntegrationTypePushBasedContextualData)
		if string(jsonIntegrationTypePushBasedContextualData) == "{}" { // empty struct
			dst.IntegrationTypePushBasedContextualData = nil
		} else {
			if err = validator.Validate(dst.IntegrationTypePushBasedContextualData); err != nil {
				dst.IntegrationTypePushBasedContextualData = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationTypePushBasedContextualData = nil
	}

	// try to unmarshal data into IntegrationTypeUntracked
	err = newStrictDecoder(data).Decode(&dst.IntegrationTypeUntracked)
	if err == nil {
		jsonIntegrationTypeUntracked, _ := json.Marshal(dst.IntegrationTypeUntracked)
		if string(jsonIntegrationTypeUntracked) == "{}" { // empty struct
			dst.IntegrationTypeUntracked = nil
		} else {
			if err = validator.Validate(dst.IntegrationTypeUntracked); err != nil {
				dst.IntegrationTypeUntracked = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationTypeUntracked = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IntegrationTypeArm = nil
		dst.IntegrationTypeCloudformation = nil
		dst.IntegrationTypeContextualData = nil
		dst.IntegrationTypeGenericWebhook = nil
		dst.IntegrationTypeManaged = nil
		dst.IntegrationTypePushBasedContextualData = nil
		dst.IntegrationTypeUntracked = nil

		return fmt.Errorf("data matches more than one schema in oneOf(V1IntegrationType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(V1IntegrationType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src V1IntegrationType) MarshalJSON() ([]byte, error) {
	if src.IntegrationTypeArm != nil {
		return json.Marshal(&src.IntegrationTypeArm)
	}

	if src.IntegrationTypeCloudformation != nil {
		return json.Marshal(&src.IntegrationTypeCloudformation)
	}

	if src.IntegrationTypeContextualData != nil {
		return json.Marshal(&src.IntegrationTypeContextualData)
	}

	if src.IntegrationTypeGenericWebhook != nil {
		return json.Marshal(&src.IntegrationTypeGenericWebhook)
	}

	if src.IntegrationTypeManaged != nil {
		return json.Marshal(&src.IntegrationTypeManaged)
	}

	if src.IntegrationTypePushBasedContextualData != nil {
		return json.Marshal(&src.IntegrationTypePushBasedContextualData)
	}

	if src.IntegrationTypeUntracked != nil {
		return json.Marshal(&src.IntegrationTypeUntracked)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *V1IntegrationType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IntegrationTypeArm != nil {
		return obj.IntegrationTypeArm
	}

	if obj.IntegrationTypeCloudformation != nil {
		return obj.IntegrationTypeCloudformation
	}

	if obj.IntegrationTypeContextualData != nil {
		return obj.IntegrationTypeContextualData
	}

	if obj.IntegrationTypeGenericWebhook != nil {
		return obj.IntegrationTypeGenericWebhook
	}

	if obj.IntegrationTypeManaged != nil {
		return obj.IntegrationTypeManaged
	}

	if obj.IntegrationTypePushBasedContextualData != nil {
		return obj.IntegrationTypePushBasedContextualData
	}

	if obj.IntegrationTypeUntracked != nil {
		return obj.IntegrationTypeUntracked
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj V1IntegrationType) GetActualInstanceValue() (interface{}) {
	if obj.IntegrationTypeArm != nil {
		return *obj.IntegrationTypeArm
	}

	if obj.IntegrationTypeCloudformation != nil {
		return *obj.IntegrationTypeCloudformation
	}

	if obj.IntegrationTypeContextualData != nil {
		return *obj.IntegrationTypeContextualData
	}

	if obj.IntegrationTypeGenericWebhook != nil {
		return *obj.IntegrationTypeGenericWebhook
	}

	if obj.IntegrationTypeManaged != nil {
		return *obj.IntegrationTypeManaged
	}

	if obj.IntegrationTypePushBasedContextualData != nil {
		return *obj.IntegrationTypePushBasedContextualData
	}

	if obj.IntegrationTypeUntracked != nil {
		return *obj.IntegrationTypeUntracked
	}

	// all schemas are nil
	return nil
}

type NullableV1IntegrationType struct {
	value *V1IntegrationType
	isSet bool
}

func (v NullableV1IntegrationType) Get() *V1IntegrationType {
	return v.value
}

func (v *NullableV1IntegrationType) Set(val *V1IntegrationType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1IntegrationType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1IntegrationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1IntegrationType(val *V1IntegrationType) *NullableV1IntegrationType {
	return &NullableV1IntegrationType{value: val, isSet: true}
}

func (v NullableV1IntegrationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1IntegrationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


