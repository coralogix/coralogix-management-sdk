/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// V1IntegrationType - struct for V1IntegrationType
type V1IntegrationType struct {
	V1IntegrationTypeArm *V1IntegrationTypeArm
	V1IntegrationTypeCloudformation *V1IntegrationTypeCloudformation
	V1IntegrationTypeContextualData *V1IntegrationTypeContextualData
	V1IntegrationTypeGenericWebhook *V1IntegrationTypeGenericWebhook
	V1IntegrationTypeManaged *V1IntegrationTypeManaged
	V1IntegrationTypePushBasedContextualData *V1IntegrationTypePushBasedContextualData
	V1IntegrationTypeUntracked *V1IntegrationTypeUntracked
}

// V1IntegrationTypeArmAsV1IntegrationType is a convenience function that returns V1IntegrationTypeArm wrapped in V1IntegrationType
func V1IntegrationTypeArmAsV1IntegrationType(v *V1IntegrationTypeArm) V1IntegrationType {
	return V1IntegrationType{
		V1IntegrationTypeArm: v,
	}
}

// V1IntegrationTypeCloudformationAsV1IntegrationType is a convenience function that returns V1IntegrationTypeCloudformation wrapped in V1IntegrationType
func V1IntegrationTypeCloudformationAsV1IntegrationType(v *V1IntegrationTypeCloudformation) V1IntegrationType {
	return V1IntegrationType{
		V1IntegrationTypeCloudformation: v,
	}
}

// V1IntegrationTypeContextualDataAsV1IntegrationType is a convenience function that returns V1IntegrationTypeContextualData wrapped in V1IntegrationType
func V1IntegrationTypeContextualDataAsV1IntegrationType(v *V1IntegrationTypeContextualData) V1IntegrationType {
	return V1IntegrationType{
		V1IntegrationTypeContextualData: v,
	}
}

// V1IntegrationTypeGenericWebhookAsV1IntegrationType is a convenience function that returns V1IntegrationTypeGenericWebhook wrapped in V1IntegrationType
func V1IntegrationTypeGenericWebhookAsV1IntegrationType(v *V1IntegrationTypeGenericWebhook) V1IntegrationType {
	return V1IntegrationType{
		V1IntegrationTypeGenericWebhook: v,
	}
}

// V1IntegrationTypeManagedAsV1IntegrationType is a convenience function that returns V1IntegrationTypeManaged wrapped in V1IntegrationType
func V1IntegrationTypeManagedAsV1IntegrationType(v *V1IntegrationTypeManaged) V1IntegrationType {
	return V1IntegrationType{
		V1IntegrationTypeManaged: v,
	}
}

// V1IntegrationTypePushBasedContextualDataAsV1IntegrationType is a convenience function that returns V1IntegrationTypePushBasedContextualData wrapped in V1IntegrationType
func V1IntegrationTypePushBasedContextualDataAsV1IntegrationType(v *V1IntegrationTypePushBasedContextualData) V1IntegrationType {
	return V1IntegrationType{
		V1IntegrationTypePushBasedContextualData: v,
	}
}

// V1IntegrationTypeUntrackedAsV1IntegrationType is a convenience function that returns V1IntegrationTypeUntracked wrapped in V1IntegrationType
func V1IntegrationTypeUntrackedAsV1IntegrationType(v *V1IntegrationTypeUntracked) V1IntegrationType {
	return V1IntegrationType{
		V1IntegrationTypeUntracked: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *V1IntegrationType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into V1IntegrationTypeArm
	err = newStrictDecoder(data).Decode(&dst.V1IntegrationTypeArm)
	if err == nil {
		jsonV1IntegrationTypeArm, _ := json.Marshal(dst.V1IntegrationTypeArm)
		if string(jsonV1IntegrationTypeArm) == "{}" { // empty struct
			dst.V1IntegrationTypeArm = nil
		} else {
			if err = validator.Validate(dst.V1IntegrationTypeArm); err != nil {
				dst.V1IntegrationTypeArm = nil
			} else {
				match++
			}
		}
	} else {
		dst.V1IntegrationTypeArm = nil
	}

	// try to unmarshal data into V1IntegrationTypeCloudformation
	err = newStrictDecoder(data).Decode(&dst.V1IntegrationTypeCloudformation)
	if err == nil {
		jsonV1IntegrationTypeCloudformation, _ := json.Marshal(dst.V1IntegrationTypeCloudformation)
		if string(jsonV1IntegrationTypeCloudformation) == "{}" { // empty struct
			dst.V1IntegrationTypeCloudformation = nil
		} else {
			if err = validator.Validate(dst.V1IntegrationTypeCloudformation); err != nil {
				dst.V1IntegrationTypeCloudformation = nil
			} else {
				match++
			}
		}
	} else {
		dst.V1IntegrationTypeCloudformation = nil
	}

	// try to unmarshal data into V1IntegrationTypeContextualData
	err = newStrictDecoder(data).Decode(&dst.V1IntegrationTypeContextualData)
	if err == nil {
		jsonV1IntegrationTypeContextualData, _ := json.Marshal(dst.V1IntegrationTypeContextualData)
		if string(jsonV1IntegrationTypeContextualData) == "{}" { // empty struct
			dst.V1IntegrationTypeContextualData = nil
		} else {
			if err = validator.Validate(dst.V1IntegrationTypeContextualData); err != nil {
				dst.V1IntegrationTypeContextualData = nil
			} else {
				match++
			}
		}
	} else {
		dst.V1IntegrationTypeContextualData = nil
	}

	// try to unmarshal data into V1IntegrationTypeGenericWebhook
	err = newStrictDecoder(data).Decode(&dst.V1IntegrationTypeGenericWebhook)
	if err == nil {
		jsonV1IntegrationTypeGenericWebhook, _ := json.Marshal(dst.V1IntegrationTypeGenericWebhook)
		if string(jsonV1IntegrationTypeGenericWebhook) == "{}" { // empty struct
			dst.V1IntegrationTypeGenericWebhook = nil
		} else {
			if err = validator.Validate(dst.V1IntegrationTypeGenericWebhook); err != nil {
				dst.V1IntegrationTypeGenericWebhook = nil
			} else {
				match++
			}
		}
	} else {
		dst.V1IntegrationTypeGenericWebhook = nil
	}

	// try to unmarshal data into V1IntegrationTypeManaged
	err = newStrictDecoder(data).Decode(&dst.V1IntegrationTypeManaged)
	if err == nil {
		jsonV1IntegrationTypeManaged, _ := json.Marshal(dst.V1IntegrationTypeManaged)
		if string(jsonV1IntegrationTypeManaged) == "{}" { // empty struct
			dst.V1IntegrationTypeManaged = nil
		} else {
			if err = validator.Validate(dst.V1IntegrationTypeManaged); err != nil {
				dst.V1IntegrationTypeManaged = nil
			} else {
				match++
			}
		}
	} else {
		dst.V1IntegrationTypeManaged = nil
	}

	// try to unmarshal data into V1IntegrationTypePushBasedContextualData
	err = newStrictDecoder(data).Decode(&dst.V1IntegrationTypePushBasedContextualData)
	if err == nil {
		jsonV1IntegrationTypePushBasedContextualData, _ := json.Marshal(dst.V1IntegrationTypePushBasedContextualData)
		if string(jsonV1IntegrationTypePushBasedContextualData) == "{}" { // empty struct
			dst.V1IntegrationTypePushBasedContextualData = nil
		} else {
			if err = validator.Validate(dst.V1IntegrationTypePushBasedContextualData); err != nil {
				dst.V1IntegrationTypePushBasedContextualData = nil
			} else {
				match++
			}
		}
	} else {
		dst.V1IntegrationTypePushBasedContextualData = nil
	}

	// try to unmarshal data into V1IntegrationTypeUntracked
	err = newStrictDecoder(data).Decode(&dst.V1IntegrationTypeUntracked)
	if err == nil {
		jsonV1IntegrationTypeUntracked, _ := json.Marshal(dst.V1IntegrationTypeUntracked)
		if string(jsonV1IntegrationTypeUntracked) == "{}" { // empty struct
			dst.V1IntegrationTypeUntracked = nil
		} else {
			if err = validator.Validate(dst.V1IntegrationTypeUntracked); err != nil {
				dst.V1IntegrationTypeUntracked = nil
			} else {
				match++
			}
		}
	} else {
		dst.V1IntegrationTypeUntracked = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.V1IntegrationTypeArm = nil
		dst.V1IntegrationTypeCloudformation = nil
		dst.V1IntegrationTypeContextualData = nil
		dst.V1IntegrationTypeGenericWebhook = nil
		dst.V1IntegrationTypeManaged = nil
		dst.V1IntegrationTypePushBasedContextualData = nil
		dst.V1IntegrationTypeUntracked = nil

		return fmt.Errorf("data matches more than one schema in oneOf(V1IntegrationType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(V1IntegrationType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src V1IntegrationType) MarshalJSON() ([]byte, error) {
	if src.V1IntegrationTypeArm != nil {
		return json.Marshal(&src.V1IntegrationTypeArm)
	}

	if src.V1IntegrationTypeCloudformation != nil {
		return json.Marshal(&src.V1IntegrationTypeCloudformation)
	}

	if src.V1IntegrationTypeContextualData != nil {
		return json.Marshal(&src.V1IntegrationTypeContextualData)
	}

	if src.V1IntegrationTypeGenericWebhook != nil {
		return json.Marshal(&src.V1IntegrationTypeGenericWebhook)
	}

	if src.V1IntegrationTypeManaged != nil {
		return json.Marshal(&src.V1IntegrationTypeManaged)
	}

	if src.V1IntegrationTypePushBasedContextualData != nil {
		return json.Marshal(&src.V1IntegrationTypePushBasedContextualData)
	}

	if src.V1IntegrationTypeUntracked != nil {
		return json.Marshal(&src.V1IntegrationTypeUntracked)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *V1IntegrationType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.V1IntegrationTypeArm != nil {
		return obj.V1IntegrationTypeArm
	}

	if obj.V1IntegrationTypeCloudformation != nil {
		return obj.V1IntegrationTypeCloudformation
	}

	if obj.V1IntegrationTypeContextualData != nil {
		return obj.V1IntegrationTypeContextualData
	}

	if obj.V1IntegrationTypeGenericWebhook != nil {
		return obj.V1IntegrationTypeGenericWebhook
	}

	if obj.V1IntegrationTypeManaged != nil {
		return obj.V1IntegrationTypeManaged
	}

	if obj.V1IntegrationTypePushBasedContextualData != nil {
		return obj.V1IntegrationTypePushBasedContextualData
	}

	if obj.V1IntegrationTypeUntracked != nil {
		return obj.V1IntegrationTypeUntracked
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj V1IntegrationType) GetActualInstanceValue() (interface{}) {
	if obj.V1IntegrationTypeArm != nil {
		return *obj.V1IntegrationTypeArm
	}

	if obj.V1IntegrationTypeCloudformation != nil {
		return *obj.V1IntegrationTypeCloudformation
	}

	if obj.V1IntegrationTypeContextualData != nil {
		return *obj.V1IntegrationTypeContextualData
	}

	if obj.V1IntegrationTypeGenericWebhook != nil {
		return *obj.V1IntegrationTypeGenericWebhook
	}

	if obj.V1IntegrationTypeManaged != nil {
		return *obj.V1IntegrationTypeManaged
	}

	if obj.V1IntegrationTypePushBasedContextualData != nil {
		return *obj.V1IntegrationTypePushBasedContextualData
	}

	if obj.V1IntegrationTypeUntracked != nil {
		return *obj.V1IntegrationTypeUntracked
	}

	// all schemas are nil
	return nil
}

type NullableV1IntegrationType struct {
	value *V1IntegrationType
	isSet bool
}

func (v NullableV1IntegrationType) Get() *V1IntegrationType {
	return v.value
}

func (v *NullableV1IntegrationType) Set(val *V1IntegrationType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1IntegrationType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1IntegrationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1IntegrationType(val *V1IntegrationType) *NullableV1IntegrationType {
	return &NullableV1IntegrationType{value: val, isSet: true}
}

func (v NullableV1IntegrationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1IntegrationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


