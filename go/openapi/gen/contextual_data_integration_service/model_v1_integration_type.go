/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// V1IntegrationType - struct for V1IntegrationType
type V1IntegrationType struct {
	IntegrationType *IntegrationType
	IntegrationType1 *IntegrationType1
	IntegrationType2 *IntegrationType2
	IntegrationType3 *IntegrationType3
	IntegrationType4 *IntegrationType4
	IntegrationType5 *IntegrationType5
	IntegrationType6 *IntegrationType6
}

// IntegrationTypeAsV1IntegrationType is a convenience function that returns IntegrationType wrapped in V1IntegrationType
func IntegrationTypeAsV1IntegrationType(v *IntegrationType) V1IntegrationType {
	return V1IntegrationType{
		IntegrationType: v,
	}
}

// IntegrationType1AsV1IntegrationType is a convenience function that returns IntegrationType1 wrapped in V1IntegrationType
func IntegrationType1AsV1IntegrationType(v *IntegrationType1) V1IntegrationType {
	return V1IntegrationType{
		IntegrationType1: v,
	}
}

// IntegrationType2AsV1IntegrationType is a convenience function that returns IntegrationType2 wrapped in V1IntegrationType
func IntegrationType2AsV1IntegrationType(v *IntegrationType2) V1IntegrationType {
	return V1IntegrationType{
		IntegrationType2: v,
	}
}

// IntegrationType3AsV1IntegrationType is a convenience function that returns IntegrationType3 wrapped in V1IntegrationType
func IntegrationType3AsV1IntegrationType(v *IntegrationType3) V1IntegrationType {
	return V1IntegrationType{
		IntegrationType3: v,
	}
}

// IntegrationType4AsV1IntegrationType is a convenience function that returns IntegrationType4 wrapped in V1IntegrationType
func IntegrationType4AsV1IntegrationType(v *IntegrationType4) V1IntegrationType {
	return V1IntegrationType{
		IntegrationType4: v,
	}
}

// IntegrationType5AsV1IntegrationType is a convenience function that returns IntegrationType5 wrapped in V1IntegrationType
func IntegrationType5AsV1IntegrationType(v *IntegrationType5) V1IntegrationType {
	return V1IntegrationType{
		IntegrationType5: v,
	}
}

// IntegrationType6AsV1IntegrationType is a convenience function that returns IntegrationType6 wrapped in V1IntegrationType
func IntegrationType6AsV1IntegrationType(v *IntegrationType6) V1IntegrationType {
	return V1IntegrationType{
		IntegrationType6: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *V1IntegrationType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IntegrationType
	err = newStrictDecoder(data).Decode(&dst.IntegrationType)
	if err == nil {
		jsonIntegrationType, _ := json.Marshal(dst.IntegrationType)
		if string(jsonIntegrationType) == "{}" { // empty struct
			dst.IntegrationType = nil
		} else {
			if err = validator.Validate(dst.IntegrationType); err != nil {
				dst.IntegrationType = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationType = nil
	}

	// try to unmarshal data into IntegrationType1
	err = newStrictDecoder(data).Decode(&dst.IntegrationType1)
	if err == nil {
		jsonIntegrationType1, _ := json.Marshal(dst.IntegrationType1)
		if string(jsonIntegrationType1) == "{}" { // empty struct
			dst.IntegrationType1 = nil
		} else {
			if err = validator.Validate(dst.IntegrationType1); err != nil {
				dst.IntegrationType1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationType1 = nil
	}

	// try to unmarshal data into IntegrationType2
	err = newStrictDecoder(data).Decode(&dst.IntegrationType2)
	if err == nil {
		jsonIntegrationType2, _ := json.Marshal(dst.IntegrationType2)
		if string(jsonIntegrationType2) == "{}" { // empty struct
			dst.IntegrationType2 = nil
		} else {
			if err = validator.Validate(dst.IntegrationType2); err != nil {
				dst.IntegrationType2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationType2 = nil
	}

	// try to unmarshal data into IntegrationType3
	err = newStrictDecoder(data).Decode(&dst.IntegrationType3)
	if err == nil {
		jsonIntegrationType3, _ := json.Marshal(dst.IntegrationType3)
		if string(jsonIntegrationType3) == "{}" { // empty struct
			dst.IntegrationType3 = nil
		} else {
			if err = validator.Validate(dst.IntegrationType3); err != nil {
				dst.IntegrationType3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationType3 = nil
	}

	// try to unmarshal data into IntegrationType4
	err = newStrictDecoder(data).Decode(&dst.IntegrationType4)
	if err == nil {
		jsonIntegrationType4, _ := json.Marshal(dst.IntegrationType4)
		if string(jsonIntegrationType4) == "{}" { // empty struct
			dst.IntegrationType4 = nil
		} else {
			if err = validator.Validate(dst.IntegrationType4); err != nil {
				dst.IntegrationType4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationType4 = nil
	}

	// try to unmarshal data into IntegrationType5
	err = newStrictDecoder(data).Decode(&dst.IntegrationType5)
	if err == nil {
		jsonIntegrationType5, _ := json.Marshal(dst.IntegrationType5)
		if string(jsonIntegrationType5) == "{}" { // empty struct
			dst.IntegrationType5 = nil
		} else {
			if err = validator.Validate(dst.IntegrationType5); err != nil {
				dst.IntegrationType5 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationType5 = nil
	}

	// try to unmarshal data into IntegrationType6
	err = newStrictDecoder(data).Decode(&dst.IntegrationType6)
	if err == nil {
		jsonIntegrationType6, _ := json.Marshal(dst.IntegrationType6)
		if string(jsonIntegrationType6) == "{}" { // empty struct
			dst.IntegrationType6 = nil
		} else {
			if err = validator.Validate(dst.IntegrationType6); err != nil {
				dst.IntegrationType6 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationType6 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IntegrationType = nil
		dst.IntegrationType1 = nil
		dst.IntegrationType2 = nil
		dst.IntegrationType3 = nil
		dst.IntegrationType4 = nil
		dst.IntegrationType5 = nil
		dst.IntegrationType6 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(V1IntegrationType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(V1IntegrationType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src V1IntegrationType) MarshalJSON() ([]byte, error) {
	if src.IntegrationType != nil {
		return json.Marshal(&src.IntegrationType)
	}

	if src.IntegrationType1 != nil {
		return json.Marshal(&src.IntegrationType1)
	}

	if src.IntegrationType2 != nil {
		return json.Marshal(&src.IntegrationType2)
	}

	if src.IntegrationType3 != nil {
		return json.Marshal(&src.IntegrationType3)
	}

	if src.IntegrationType4 != nil {
		return json.Marshal(&src.IntegrationType4)
	}

	if src.IntegrationType5 != nil {
		return json.Marshal(&src.IntegrationType5)
	}

	if src.IntegrationType6 != nil {
		return json.Marshal(&src.IntegrationType6)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *V1IntegrationType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IntegrationType != nil {
		return obj.IntegrationType
	}

	if obj.IntegrationType1 != nil {
		return obj.IntegrationType1
	}

	if obj.IntegrationType2 != nil {
		return obj.IntegrationType2
	}

	if obj.IntegrationType3 != nil {
		return obj.IntegrationType3
	}

	if obj.IntegrationType4 != nil {
		return obj.IntegrationType4
	}

	if obj.IntegrationType5 != nil {
		return obj.IntegrationType5
	}

	if obj.IntegrationType6 != nil {
		return obj.IntegrationType6
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj V1IntegrationType) GetActualInstanceValue() (interface{}) {
	if obj.IntegrationType != nil {
		return *obj.IntegrationType
	}

	if obj.IntegrationType1 != nil {
		return *obj.IntegrationType1
	}

	if obj.IntegrationType2 != nil {
		return *obj.IntegrationType2
	}

	if obj.IntegrationType3 != nil {
		return *obj.IntegrationType3
	}

	if obj.IntegrationType4 != nil {
		return *obj.IntegrationType4
	}

	if obj.IntegrationType5 != nil {
		return *obj.IntegrationType5
	}

	if obj.IntegrationType6 != nil {
		return *obj.IntegrationType6
	}

	// all schemas are nil
	return nil
}

type NullableV1IntegrationType struct {
	value *V1IntegrationType
	isSet bool
}

func (v NullableV1IntegrationType) Get() *V1IntegrationType {
	return v.value
}

func (v *NullableV1IntegrationType) Set(val *V1IntegrationType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1IntegrationType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1IntegrationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1IntegrationType(val *V1IntegrationType) *NullableV1IntegrationType {
	return &NullableV1IntegrationType{value: val, isSet: true}
}

func (v NullableV1IntegrationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1IntegrationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


