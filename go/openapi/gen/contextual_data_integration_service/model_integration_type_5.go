/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"encoding/json"
)

// checks if the IntegrationType5 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationType5{}

// IntegrationType5 This data structure represents an integration type.
type IntegrationType5 struct {
	// This data structure represents a contextual data integration.
	ContextualData map[string]interface{} `json:"contextualData,omitempty"`
}

// NewIntegrationType5 instantiates a new IntegrationType5 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationType5() *IntegrationType5 {
	this := IntegrationType5{}
	return &this
}

// NewIntegrationType5WithDefaults instantiates a new IntegrationType5 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationType5WithDefaults() *IntegrationType5 {
	this := IntegrationType5{}
	return &this
}

// GetContextualData returns the ContextualData field value if set, zero value otherwise.
func (o *IntegrationType5) GetContextualData() map[string]interface{} {
	if o == nil || IsNil(o.ContextualData) {
		var ret map[string]interface{}
		return ret
	}
	return o.ContextualData
}

// GetContextualDataOk returns a tuple with the ContextualData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationType5) GetContextualDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ContextualData) {
		return map[string]interface{}{}, false
	}
	return o.ContextualData, true
}

// HasContextualData returns a boolean if a field has been set.
func (o *IntegrationType5) HasContextualData() bool {
	if o != nil && !IsNil(o.ContextualData) {
		return true
	}

	return false
}

// SetContextualData gets a reference to the given map[string]interface{} and assigns it to the ContextualData field.
func (o *IntegrationType5) SetContextualData(v map[string]interface{}) {
	o.ContextualData = v
}

func (o IntegrationType5) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationType5) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContextualData) {
		toSerialize["contextualData"] = o.ContextualData
	}
	return toSerialize, nil
}

type NullableIntegrationType5 struct {
	value *IntegrationType5
	isSet bool
}

func (v NullableIntegrationType5) Get() *IntegrationType5 {
	return v.value
}

func (v *NullableIntegrationType5) Set(val *IntegrationType5) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationType5) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationType5) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationType5(val *IntegrationType5) *NullableIntegrationType5 {
	return &NullableIntegrationType5{value: val, isSet: true}
}

func (v NullableIntegrationType5) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationType5) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


