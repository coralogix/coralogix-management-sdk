/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ContextualDataIntegrationServiceAPIService ContextualDataIntegrationServiceAPI service
type ContextualDataIntegrationServiceAPIService service

type ApiContextualDataIntegrationServiceDeleteContextualDataIntegrationRequest struct {
	ctx context.Context
	ApiService *ContextualDataIntegrationServiceAPIService
	integrationId string
}

func (r ApiContextualDataIntegrationServiceDeleteContextualDataIntegrationRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ContextualDataIntegrationServiceDeleteContextualDataIntegrationExecute(r)
}

/*
ContextualDataIntegrationServiceDeleteContextualDataIntegration Delete contextual data integration

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param integrationId
 @return ApiContextualDataIntegrationServiceDeleteContextualDataIntegrationRequest
*/
func (a *ContextualDataIntegrationServiceAPIService) ContextualDataIntegrationServiceDeleteContextualDataIntegration(ctx context.Context, integrationId string) ApiContextualDataIntegrationServiceDeleteContextualDataIntegrationRequest {
	return ApiContextualDataIntegrationServiceDeleteContextualDataIntegrationRequest{
		ApiService: a,
		ctx: ctx,
		integrationId: integrationId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ContextualDataIntegrationServiceAPIService) ContextualDataIntegrationServiceDeleteContextualDataIntegrationExecute(r ApiContextualDataIntegrationServiceDeleteContextualDataIntegrationRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContextualDataIntegrationServiceAPIService.ContextualDataIntegrationServiceDeleteContextualDataIntegration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/contextual-data/v1/{integration_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"integration_id"+"}", url.PathEscape(parameterValueToString(r.integrationId, "integrationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionRequest struct {
	ctx context.Context
	ApiService *ContextualDataIntegrationServiceAPIService
	id string
	includeTestingIntegrations *bool
}

func (r ApiContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionRequest) IncludeTestingIntegrations(includeTestingIntegrations bool) ApiContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionRequest {
	r.includeTestingIntegrations = &includeTestingIntegrations
	return r
}

func (r ApiContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionRequest) Execute() (*GetContextualDataIntegrationDefinitionResponse, *http.Response, error) {
	return r.ApiService.ContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionExecute(r)
}

/*
ContextualDataIntegrationServiceGetContextualDataIntegrationDefinition Get contextual data integration definition

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionRequest
*/
func (a *ContextualDataIntegrationServiceAPIService) ContextualDataIntegrationServiceGetContextualDataIntegrationDefinition(ctx context.Context, id string) ApiContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionRequest {
	return ApiContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetContextualDataIntegrationDefinitionResponse
func (a *ContextualDataIntegrationServiceAPIService) ContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionExecute(r ApiContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionRequest) (*GetContextualDataIntegrationDefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetContextualDataIntegrationDefinitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContextualDataIntegrationServiceAPIService.ContextualDataIntegrationServiceGetContextualDataIntegrationDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/contextual-data/v1/definition/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeTestingIntegrations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_testing_integrations", r.includeTestingIntegrations, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContextualDataIntegrationServiceGetContextualDataIntegrationDetailsRequest struct {
	ctx context.Context
	ApiService *ContextualDataIntegrationServiceAPIService
	id string
	includeTestingRevisions *bool
}

func (r ApiContextualDataIntegrationServiceGetContextualDataIntegrationDetailsRequest) IncludeTestingRevisions(includeTestingRevisions bool) ApiContextualDataIntegrationServiceGetContextualDataIntegrationDetailsRequest {
	r.includeTestingRevisions = &includeTestingRevisions
	return r
}

func (r ApiContextualDataIntegrationServiceGetContextualDataIntegrationDetailsRequest) Execute() (*GetContextualDataIntegrationDetailsResponse, *http.Response, error) {
	return r.ApiService.ContextualDataIntegrationServiceGetContextualDataIntegrationDetailsExecute(r)
}

/*
ContextualDataIntegrationServiceGetContextualDataIntegrationDetails Get contextual data integration details

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiContextualDataIntegrationServiceGetContextualDataIntegrationDetailsRequest
*/
func (a *ContextualDataIntegrationServiceAPIService) ContextualDataIntegrationServiceGetContextualDataIntegrationDetails(ctx context.Context, id string) ApiContextualDataIntegrationServiceGetContextualDataIntegrationDetailsRequest {
	return ApiContextualDataIntegrationServiceGetContextualDataIntegrationDetailsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetContextualDataIntegrationDetailsResponse
func (a *ContextualDataIntegrationServiceAPIService) ContextualDataIntegrationServiceGetContextualDataIntegrationDetailsExecute(r ApiContextualDataIntegrationServiceGetContextualDataIntegrationDetailsRequest) (*GetContextualDataIntegrationDetailsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetContextualDataIntegrationDetailsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContextualDataIntegrationServiceAPIService.ContextualDataIntegrationServiceGetContextualDataIntegrationDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/contextual-data/v1/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeTestingRevisions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_testing_revisions", r.includeTestingRevisions, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContextualDataIntegrationServiceGetContextualDataIntegrationsRequest struct {
	ctx context.Context
	ApiService *ContextualDataIntegrationServiceAPIService
	includeTestingIntegrations *bool
}

func (r ApiContextualDataIntegrationServiceGetContextualDataIntegrationsRequest) IncludeTestingIntegrations(includeTestingIntegrations bool) ApiContextualDataIntegrationServiceGetContextualDataIntegrationsRequest {
	r.includeTestingIntegrations = &includeTestingIntegrations
	return r
}

func (r ApiContextualDataIntegrationServiceGetContextualDataIntegrationsRequest) Execute() (*GetContextualDataIntegrationsResponse, *http.Response, error) {
	return r.ApiService.ContextualDataIntegrationServiceGetContextualDataIntegrationsExecute(r)
}

/*
ContextualDataIntegrationServiceGetContextualDataIntegrations Get all contextual data integrations accessible

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiContextualDataIntegrationServiceGetContextualDataIntegrationsRequest
*/
func (a *ContextualDataIntegrationServiceAPIService) ContextualDataIntegrationServiceGetContextualDataIntegrations(ctx context.Context) ApiContextualDataIntegrationServiceGetContextualDataIntegrationsRequest {
	return ApiContextualDataIntegrationServiceGetContextualDataIntegrationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetContextualDataIntegrationsResponse
func (a *ContextualDataIntegrationServiceAPIService) ContextualDataIntegrationServiceGetContextualDataIntegrationsExecute(r ApiContextualDataIntegrationServiceGetContextualDataIntegrationsRequest) (*GetContextualDataIntegrationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetContextualDataIntegrationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContextualDataIntegrationServiceAPIService.ContextualDataIntegrationServiceGetContextualDataIntegrations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/contextual-data/v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeTestingIntegrations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_testing_integrations", r.includeTestingIntegrations, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContextualDataIntegrationServiceSaveContextualDataIntegrationRequest struct {
	ctx context.Context
	ApiService *ContextualDataIntegrationServiceAPIService
	saveContextualDataIntegrationRequest *SaveContextualDataIntegrationRequest
}

func (r ApiContextualDataIntegrationServiceSaveContextualDataIntegrationRequest) SaveContextualDataIntegrationRequest(saveContextualDataIntegrationRequest SaveContextualDataIntegrationRequest) ApiContextualDataIntegrationServiceSaveContextualDataIntegrationRequest {
	r.saveContextualDataIntegrationRequest = &saveContextualDataIntegrationRequest
	return r
}

func (r ApiContextualDataIntegrationServiceSaveContextualDataIntegrationRequest) Execute() (*SaveContextualDataIntegrationResponse, *http.Response, error) {
	return r.ApiService.ContextualDataIntegrationServiceSaveContextualDataIntegrationExecute(r)
}

/*
ContextualDataIntegrationServiceSaveContextualDataIntegration Save contextual data integration

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiContextualDataIntegrationServiceSaveContextualDataIntegrationRequest
*/
func (a *ContextualDataIntegrationServiceAPIService) ContextualDataIntegrationServiceSaveContextualDataIntegration(ctx context.Context) ApiContextualDataIntegrationServiceSaveContextualDataIntegrationRequest {
	return ApiContextualDataIntegrationServiceSaveContextualDataIntegrationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SaveContextualDataIntegrationResponse
func (a *ContextualDataIntegrationServiceAPIService) ContextualDataIntegrationServiceSaveContextualDataIntegrationExecute(r ApiContextualDataIntegrationServiceSaveContextualDataIntegrationRequest) (*SaveContextualDataIntegrationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SaveContextualDataIntegrationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContextualDataIntegrationServiceAPIService.ContextualDataIntegrationServiceSaveContextualDataIntegration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/contextual-data/v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.saveContextualDataIntegrationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContextualDataIntegrationServiceTestContextualDataIntegrationRequest struct {
	ctx context.Context
	ApiService *ContextualDataIntegrationServiceAPIService
	testContextualDataIntegrationRequest *TestContextualDataIntegrationRequest
}

func (r ApiContextualDataIntegrationServiceTestContextualDataIntegrationRequest) TestContextualDataIntegrationRequest(testContextualDataIntegrationRequest TestContextualDataIntegrationRequest) ApiContextualDataIntegrationServiceTestContextualDataIntegrationRequest {
	r.testContextualDataIntegrationRequest = &testContextualDataIntegrationRequest
	return r
}

func (r ApiContextualDataIntegrationServiceTestContextualDataIntegrationRequest) Execute() (*TestContextualDataIntegrationResponse, *http.Response, error) {
	return r.ApiService.ContextualDataIntegrationServiceTestContextualDataIntegrationExecute(r)
}

/*
ContextualDataIntegrationServiceTestContextualDataIntegration Test contextual data integration

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiContextualDataIntegrationServiceTestContextualDataIntegrationRequest
*/
func (a *ContextualDataIntegrationServiceAPIService) ContextualDataIntegrationServiceTestContextualDataIntegration(ctx context.Context) ApiContextualDataIntegrationServiceTestContextualDataIntegrationRequest {
	return ApiContextualDataIntegrationServiceTestContextualDataIntegrationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TestContextualDataIntegrationResponse
func (a *ContextualDataIntegrationServiceAPIService) ContextualDataIntegrationServiceTestContextualDataIntegrationExecute(r ApiContextualDataIntegrationServiceTestContextualDataIntegrationRequest) (*TestContextualDataIntegrationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TestContextualDataIntegrationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContextualDataIntegrationServiceAPIService.ContextualDataIntegrationServiceTestContextualDataIntegration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/contextual-data/v1/test"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.testContextualDataIntegrationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContextualDataIntegrationServiceUpdateContextualDataIntegrationRequest struct {
	ctx context.Context
	ApiService *ContextualDataIntegrationServiceAPIService
	updateContextualDataIntegrationRequest *UpdateContextualDataIntegrationRequest
}

func (r ApiContextualDataIntegrationServiceUpdateContextualDataIntegrationRequest) UpdateContextualDataIntegrationRequest(updateContextualDataIntegrationRequest UpdateContextualDataIntegrationRequest) ApiContextualDataIntegrationServiceUpdateContextualDataIntegrationRequest {
	r.updateContextualDataIntegrationRequest = &updateContextualDataIntegrationRequest
	return r
}

func (r ApiContextualDataIntegrationServiceUpdateContextualDataIntegrationRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ContextualDataIntegrationServiceUpdateContextualDataIntegrationExecute(r)
}

/*
ContextualDataIntegrationServiceUpdateContextualDataIntegration Update contextual data integration

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiContextualDataIntegrationServiceUpdateContextualDataIntegrationRequest
*/
func (a *ContextualDataIntegrationServiceAPIService) ContextualDataIntegrationServiceUpdateContextualDataIntegration(ctx context.Context) ApiContextualDataIntegrationServiceUpdateContextualDataIntegrationRequest {
	return ApiContextualDataIntegrationServiceUpdateContextualDataIntegrationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ContextualDataIntegrationServiceAPIService) ContextualDataIntegrationServiceUpdateContextualDataIntegrationExecute(r ApiContextualDataIntegrationServiceUpdateContextualDataIntegrationRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContextualDataIntegrationServiceAPIService.ContextualDataIntegrationServiceUpdateContextualDataIntegration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/contextual-data/v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateContextualDataIntegrationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
