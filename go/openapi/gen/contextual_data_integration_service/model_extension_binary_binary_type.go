/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"encoding/json"
	"fmt"
)

// ExtensionBinaryBinaryType the model 'ExtensionBinaryBinaryType'
type ExtensionBinaryBinaryType string

// List of ExtensionBinary.BinaryType
const (
	EXTENSIONBINARYBINARYTYPE_KIBANA_INDEX_PATTERN ExtensionBinaryBinaryType = "KIBANA_INDEX_PATTERN"
)

// All allowed values of ExtensionBinaryBinaryType enum
var AllowedExtensionBinaryBinaryTypeEnumValues = []ExtensionBinaryBinaryType{
	"KIBANA_INDEX_PATTERN",
}

func (v *ExtensionBinaryBinaryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExtensionBinaryBinaryType(value)
	for _, existing := range AllowedExtensionBinaryBinaryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExtensionBinaryBinaryType", value)
}

// NewExtensionBinaryBinaryTypeFromValue returns a pointer to a valid ExtensionBinaryBinaryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExtensionBinaryBinaryTypeFromValue(v string) (*ExtensionBinaryBinaryType, error) {
	ev := ExtensionBinaryBinaryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExtensionBinaryBinaryType: valid values are %v", v, AllowedExtensionBinaryBinaryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExtensionBinaryBinaryType) IsValid() bool {
	for _, existing := range AllowedExtensionBinaryBinaryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExtensionBinary.BinaryType value
func (v ExtensionBinaryBinaryType) Ptr() *ExtensionBinaryBinaryType {
	return &v
}

type NullableExtensionBinaryBinaryType struct {
	value *ExtensionBinaryBinaryType
	isSet bool
}

func (v NullableExtensionBinaryBinaryType) Get() *ExtensionBinaryBinaryType {
	return v.value
}

func (v *NullableExtensionBinaryBinaryType) Set(val *ExtensionBinaryBinaryType) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionBinaryBinaryType) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionBinaryBinaryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionBinaryBinaryType(val *ExtensionBinaryBinaryType) *NullableExtensionBinaryBinaryType {
	return &NullableExtensionBinaryBinaryType{value: val, isSet: true}
}

func (v NullableExtensionBinaryBinaryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionBinaryBinaryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

