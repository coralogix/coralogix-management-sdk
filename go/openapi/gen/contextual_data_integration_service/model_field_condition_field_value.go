/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"encoding/json"
)

// checks if the FieldConditionFieldValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FieldConditionFieldValue{}

// FieldConditionFieldValue struct for FieldConditionFieldValue
type FieldConditionFieldValue struct {
	FieldName *string `json:"fieldName,omitempty"`
	ValuePattern *string `json:"valuePattern,omitempty"`
}

// NewFieldConditionFieldValue instantiates a new FieldConditionFieldValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldConditionFieldValue() *FieldConditionFieldValue {
	this := FieldConditionFieldValue{}
	return &this
}

// NewFieldConditionFieldValueWithDefaults instantiates a new FieldConditionFieldValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldConditionFieldValueWithDefaults() *FieldConditionFieldValue {
	this := FieldConditionFieldValue{}
	return &this
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *FieldConditionFieldValue) GetFieldName() string {
	if o == nil || IsNil(o.FieldName) {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldConditionFieldValue) GetFieldNameOk() (*string, bool) {
	if o == nil || IsNil(o.FieldName) {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *FieldConditionFieldValue) HasFieldName() bool {
	if o != nil && !IsNil(o.FieldName) {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *FieldConditionFieldValue) SetFieldName(v string) {
	o.FieldName = &v
}

// GetValuePattern returns the ValuePattern field value if set, zero value otherwise.
func (o *FieldConditionFieldValue) GetValuePattern() string {
	if o == nil || IsNil(o.ValuePattern) {
		var ret string
		return ret
	}
	return *o.ValuePattern
}

// GetValuePatternOk returns a tuple with the ValuePattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldConditionFieldValue) GetValuePatternOk() (*string, bool) {
	if o == nil || IsNil(o.ValuePattern) {
		return nil, false
	}
	return o.ValuePattern, true
}

// HasValuePattern returns a boolean if a field has been set.
func (o *FieldConditionFieldValue) HasValuePattern() bool {
	if o != nil && !IsNil(o.ValuePattern) {
		return true
	}

	return false
}

// SetValuePattern gets a reference to the given string and assigns it to the ValuePattern field.
func (o *FieldConditionFieldValue) SetValuePattern(v string) {
	o.ValuePattern = &v
}

func (o FieldConditionFieldValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldConditionFieldValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FieldName) {
		toSerialize["fieldName"] = o.FieldName
	}
	if !IsNil(o.ValuePattern) {
		toSerialize["valuePattern"] = o.ValuePattern
	}
	return toSerialize, nil
}

type NullableFieldConditionFieldValue struct {
	value *FieldConditionFieldValue
	isSet bool
}

func (v NullableFieldConditionFieldValue) Get() *FieldConditionFieldValue {
	return v.value
}

func (v *NullableFieldConditionFieldValue) Set(val *FieldConditionFieldValue) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldConditionFieldValue) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldConditionFieldValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldConditionFieldValue(val *FieldConditionFieldValue) *NullableFieldConditionFieldValue {
	return &NullableFieldConditionFieldValue{value: val, isSet: true}
}

func (v NullableFieldConditionFieldValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldConditionFieldValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


