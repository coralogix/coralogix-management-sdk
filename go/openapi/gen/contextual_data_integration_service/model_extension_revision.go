/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExtensionRevision type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionRevision{}

// ExtensionRevision struct for ExtensionRevision
type ExtensionRevision struct {
	Binaries []ExtensionBinary `json:"binaries,omitempty"`
	Description *string `json:"description,omitempty"`
	Excerpt *string `json:"excerpt,omitempty"`
	IntegrationDetails []IntegrationDetail `json:"integrationDetails,omitempty"`
	IsTesting *bool `json:"isTesting,omitempty"`
	Items []ExtensionItem `json:"items,omitempty"`
	Labels []string `json:"labels,omitempty"`
	PermissionDeniedItems []ExtensionItem `json:"permissionDeniedItems,omitempty"`
	Version string `json:"version"`
}

type _ExtensionRevision ExtensionRevision

// NewExtensionRevision instantiates a new ExtensionRevision object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionRevision(version string) *ExtensionRevision {
	this := ExtensionRevision{}
	this.Version = version
	return &this
}

// NewExtensionRevisionWithDefaults instantiates a new ExtensionRevision object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionRevisionWithDefaults() *ExtensionRevision {
	this := ExtensionRevision{}
	return &this
}

// GetBinaries returns the Binaries field value if set, zero value otherwise.
func (o *ExtensionRevision) GetBinaries() []ExtensionBinary {
	if o == nil || IsNil(o.Binaries) {
		var ret []ExtensionBinary
		return ret
	}
	return o.Binaries
}

// GetBinariesOk returns a tuple with the Binaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionRevision) GetBinariesOk() ([]ExtensionBinary, bool) {
	if o == nil || IsNil(o.Binaries) {
		return nil, false
	}
	return o.Binaries, true
}

// HasBinaries returns a boolean if a field has been set.
func (o *ExtensionRevision) HasBinaries() bool {
	if o != nil && !IsNil(o.Binaries) {
		return true
	}

	return false
}

// SetBinaries gets a reference to the given []ExtensionBinary and assigns it to the Binaries field.
func (o *ExtensionRevision) SetBinaries(v []ExtensionBinary) {
	o.Binaries = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ExtensionRevision) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionRevision) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ExtensionRevision) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ExtensionRevision) SetDescription(v string) {
	o.Description = &v
}

// GetExcerpt returns the Excerpt field value if set, zero value otherwise.
func (o *ExtensionRevision) GetExcerpt() string {
	if o == nil || IsNil(o.Excerpt) {
		var ret string
		return ret
	}
	return *o.Excerpt
}

// GetExcerptOk returns a tuple with the Excerpt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionRevision) GetExcerptOk() (*string, bool) {
	if o == nil || IsNil(o.Excerpt) {
		return nil, false
	}
	return o.Excerpt, true
}

// HasExcerpt returns a boolean if a field has been set.
func (o *ExtensionRevision) HasExcerpt() bool {
	if o != nil && !IsNil(o.Excerpt) {
		return true
	}

	return false
}

// SetExcerpt gets a reference to the given string and assigns it to the Excerpt field.
func (o *ExtensionRevision) SetExcerpt(v string) {
	o.Excerpt = &v
}

// GetIntegrationDetails returns the IntegrationDetails field value if set, zero value otherwise.
func (o *ExtensionRevision) GetIntegrationDetails() []IntegrationDetail {
	if o == nil || IsNil(o.IntegrationDetails) {
		var ret []IntegrationDetail
		return ret
	}
	return o.IntegrationDetails
}

// GetIntegrationDetailsOk returns a tuple with the IntegrationDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionRevision) GetIntegrationDetailsOk() ([]IntegrationDetail, bool) {
	if o == nil || IsNil(o.IntegrationDetails) {
		return nil, false
	}
	return o.IntegrationDetails, true
}

// HasIntegrationDetails returns a boolean if a field has been set.
func (o *ExtensionRevision) HasIntegrationDetails() bool {
	if o != nil && !IsNil(o.IntegrationDetails) {
		return true
	}

	return false
}

// SetIntegrationDetails gets a reference to the given []IntegrationDetail and assigns it to the IntegrationDetails field.
func (o *ExtensionRevision) SetIntegrationDetails(v []IntegrationDetail) {
	o.IntegrationDetails = v
}

// GetIsTesting returns the IsTesting field value if set, zero value otherwise.
func (o *ExtensionRevision) GetIsTesting() bool {
	if o == nil || IsNil(o.IsTesting) {
		var ret bool
		return ret
	}
	return *o.IsTesting
}

// GetIsTestingOk returns a tuple with the IsTesting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionRevision) GetIsTestingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTesting) {
		return nil, false
	}
	return o.IsTesting, true
}

// HasIsTesting returns a boolean if a field has been set.
func (o *ExtensionRevision) HasIsTesting() bool {
	if o != nil && !IsNil(o.IsTesting) {
		return true
	}

	return false
}

// SetIsTesting gets a reference to the given bool and assigns it to the IsTesting field.
func (o *ExtensionRevision) SetIsTesting(v bool) {
	o.IsTesting = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *ExtensionRevision) GetItems() []ExtensionItem {
	if o == nil || IsNil(o.Items) {
		var ret []ExtensionItem
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionRevision) GetItemsOk() ([]ExtensionItem, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ExtensionRevision) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []ExtensionItem and assigns it to the Items field.
func (o *ExtensionRevision) SetItems(v []ExtensionItem) {
	o.Items = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ExtensionRevision) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionRevision) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ExtensionRevision) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *ExtensionRevision) SetLabels(v []string) {
	o.Labels = v
}

// GetPermissionDeniedItems returns the PermissionDeniedItems field value if set, zero value otherwise.
func (o *ExtensionRevision) GetPermissionDeniedItems() []ExtensionItem {
	if o == nil || IsNil(o.PermissionDeniedItems) {
		var ret []ExtensionItem
		return ret
	}
	return o.PermissionDeniedItems
}

// GetPermissionDeniedItemsOk returns a tuple with the PermissionDeniedItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionRevision) GetPermissionDeniedItemsOk() ([]ExtensionItem, bool) {
	if o == nil || IsNil(o.PermissionDeniedItems) {
		return nil, false
	}
	return o.PermissionDeniedItems, true
}

// HasPermissionDeniedItems returns a boolean if a field has been set.
func (o *ExtensionRevision) HasPermissionDeniedItems() bool {
	if o != nil && !IsNil(o.PermissionDeniedItems) {
		return true
	}

	return false
}

// SetPermissionDeniedItems gets a reference to the given []ExtensionItem and assigns it to the PermissionDeniedItems field.
func (o *ExtensionRevision) SetPermissionDeniedItems(v []ExtensionItem) {
	o.PermissionDeniedItems = v
}

// GetVersion returns the Version field value
func (o *ExtensionRevision) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ExtensionRevision) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ExtensionRevision) SetVersion(v string) {
	o.Version = v
}

func (o ExtensionRevision) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionRevision) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Binaries) {
		toSerialize["binaries"] = o.Binaries
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Excerpt) {
		toSerialize["excerpt"] = o.Excerpt
	}
	if !IsNil(o.IntegrationDetails) {
		toSerialize["integrationDetails"] = o.IntegrationDetails
	}
	if !IsNil(o.IsTesting) {
		toSerialize["isTesting"] = o.IsTesting
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.PermissionDeniedItems) {
		toSerialize["permissionDeniedItems"] = o.PermissionDeniedItems
	}
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *ExtensionRevision) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtensionRevision := _ExtensionRevision{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExtensionRevision)

	if err != nil {
		return err
	}

	*o = ExtensionRevision(varExtensionRevision)

	return err
}

type NullableExtensionRevision struct {
	value *ExtensionRevision
	isSet bool
}

func (v NullableExtensionRevision) Get() *ExtensionRevision {
	return v.value
}

func (v *NullableExtensionRevision) Set(val *ExtensionRevision) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionRevision) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionRevision) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionRevision(val *ExtensionRevision) *NullableExtensionRevision {
	return &NullableExtensionRevision{value: val, isSet: true}
}

func (v NullableExtensionRevision) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionRevision) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


