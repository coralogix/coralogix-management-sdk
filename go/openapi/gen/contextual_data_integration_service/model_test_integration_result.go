/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// TestIntegrationResult - struct for TestIntegrationResult
type TestIntegrationResult struct {
	TestIntegrationResultFailure *TestIntegrationResultFailure
	TestIntegrationResultSuccess *TestIntegrationResultSuccess
}

// TestIntegrationResultFailureAsTestIntegrationResult is a convenience function that returns TestIntegrationResultFailure wrapped in TestIntegrationResult
func TestIntegrationResultFailureAsTestIntegrationResult(v *TestIntegrationResultFailure) TestIntegrationResult {
	return TestIntegrationResult{
		TestIntegrationResultFailure: v,
	}
}

// TestIntegrationResultSuccessAsTestIntegrationResult is a convenience function that returns TestIntegrationResultSuccess wrapped in TestIntegrationResult
func TestIntegrationResultSuccessAsTestIntegrationResult(v *TestIntegrationResultSuccess) TestIntegrationResult {
	return TestIntegrationResult{
		TestIntegrationResultSuccess: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TestIntegrationResult) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TestIntegrationResultFailure
	err = newStrictDecoder(data).Decode(&dst.TestIntegrationResultFailure)
	if err == nil {
		jsonTestIntegrationResultFailure, _ := json.Marshal(dst.TestIntegrationResultFailure)
		if string(jsonTestIntegrationResultFailure) == "{}" { // empty struct
			dst.TestIntegrationResultFailure = nil
		} else {
			if err = validator.Validate(dst.TestIntegrationResultFailure); err != nil {
				dst.TestIntegrationResultFailure = nil
			} else {
				match++
			}
		}
	} else {
		dst.TestIntegrationResultFailure = nil
	}

	// try to unmarshal data into TestIntegrationResultSuccess
	err = newStrictDecoder(data).Decode(&dst.TestIntegrationResultSuccess)
	if err == nil {
		jsonTestIntegrationResultSuccess, _ := json.Marshal(dst.TestIntegrationResultSuccess)
		if string(jsonTestIntegrationResultSuccess) == "{}" { // empty struct
			dst.TestIntegrationResultSuccess = nil
		} else {
			if err = validator.Validate(dst.TestIntegrationResultSuccess); err != nil {
				dst.TestIntegrationResultSuccess = nil
			} else {
				match++
			}
		}
	} else {
		dst.TestIntegrationResultSuccess = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TestIntegrationResultFailure = nil
		dst.TestIntegrationResultSuccess = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TestIntegrationResult)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TestIntegrationResult)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TestIntegrationResult) MarshalJSON() ([]byte, error) {
	if src.TestIntegrationResultFailure != nil {
		return json.Marshal(&src.TestIntegrationResultFailure)
	}

	if src.TestIntegrationResultSuccess != nil {
		return json.Marshal(&src.TestIntegrationResultSuccess)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TestIntegrationResult) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TestIntegrationResultFailure != nil {
		return obj.TestIntegrationResultFailure
	}

	if obj.TestIntegrationResultSuccess != nil {
		return obj.TestIntegrationResultSuccess
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj TestIntegrationResult) GetActualInstanceValue() (interface{}) {
	if obj.TestIntegrationResultFailure != nil {
		return *obj.TestIntegrationResultFailure
	}

	if obj.TestIntegrationResultSuccess != nil {
		return *obj.TestIntegrationResultSuccess
	}

	// all schemas are nil
	return nil
}

type NullableTestIntegrationResult struct {
	value *TestIntegrationResult
	isSet bool
}

func (v NullableTestIntegrationResult) Get() *TestIntegrationResult {
	return v.value
}

func (v *NullableTestIntegrationResult) Set(val *TestIntegrationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTestIntegrationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTestIntegrationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestIntegrationResult(val *TestIntegrationResult) *NullableTestIntegrationResult {
	return &NullableTestIntegrationResult{value: val, isSet: true}
}

func (v NullableTestIntegrationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestIntegrationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


