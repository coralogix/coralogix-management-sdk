/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExtensionItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionItem{}

// ExtensionItem struct for ExtensionItem
type ExtensionItem struct {
	Binaries []ExtensionItemBinary `json:"binaries,omitempty"`
	Data map[string]interface{} `json:"data"`
	Description *string `json:"description,omitempty"`
	ExtendedInternalId *string `json:"extendedInternalId,omitempty"`
	Id string `json:"id"`
	IsMandatory *bool `json:"isMandatory,omitempty"`
	Name string `json:"name"`
	PermissionResource PermissionResource `json:"permissionResource"`
	StableId *string `json:"stableId,omitempty"`
	TargetDomain TargetDomain `json:"targetDomain"`
	UniqueId *string `json:"uniqueId,omitempty"`
}

type _ExtensionItem ExtensionItem

// NewExtensionItem instantiates a new ExtensionItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionItem(data map[string]interface{}, id string, name string, permissionResource PermissionResource, targetDomain TargetDomain) *ExtensionItem {
	this := ExtensionItem{}
	this.Data = data
	this.Id = id
	this.Name = name
	this.PermissionResource = permissionResource
	this.TargetDomain = targetDomain
	return &this
}

// NewExtensionItemWithDefaults instantiates a new ExtensionItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionItemWithDefaults() *ExtensionItem {
	this := ExtensionItem{}
	return &this
}

// GetBinaries returns the Binaries field value if set, zero value otherwise.
func (o *ExtensionItem) GetBinaries() []ExtensionItemBinary {
	if o == nil || IsNil(o.Binaries) {
		var ret []ExtensionItemBinary
		return ret
	}
	return o.Binaries
}

// GetBinariesOk returns a tuple with the Binaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionItem) GetBinariesOk() ([]ExtensionItemBinary, bool) {
	if o == nil || IsNil(o.Binaries) {
		return nil, false
	}
	return o.Binaries, true
}

// HasBinaries returns a boolean if a field has been set.
func (o *ExtensionItem) HasBinaries() bool {
	if o != nil && !IsNil(o.Binaries) {
		return true
	}

	return false
}

// SetBinaries gets a reference to the given []ExtensionItemBinary and assigns it to the Binaries field.
func (o *ExtensionItem) SetBinaries(v []ExtensionItemBinary) {
	o.Binaries = v
}

// GetData returns the Data field value
func (o *ExtensionItem) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ExtensionItem) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ExtensionItem) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ExtensionItem) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionItem) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ExtensionItem) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ExtensionItem) SetDescription(v string) {
	o.Description = &v
}

// GetExtendedInternalId returns the ExtendedInternalId field value if set, zero value otherwise.
func (o *ExtensionItem) GetExtendedInternalId() string {
	if o == nil || IsNil(o.ExtendedInternalId) {
		var ret string
		return ret
	}
	return *o.ExtendedInternalId
}

// GetExtendedInternalIdOk returns a tuple with the ExtendedInternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionItem) GetExtendedInternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExtendedInternalId) {
		return nil, false
	}
	return o.ExtendedInternalId, true
}

// HasExtendedInternalId returns a boolean if a field has been set.
func (o *ExtensionItem) HasExtendedInternalId() bool {
	if o != nil && !IsNil(o.ExtendedInternalId) {
		return true
	}

	return false
}

// SetExtendedInternalId gets a reference to the given string and assigns it to the ExtendedInternalId field.
func (o *ExtensionItem) SetExtendedInternalId(v string) {
	o.ExtendedInternalId = &v
}

// GetId returns the Id field value
func (o *ExtensionItem) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ExtensionItem) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ExtensionItem) SetId(v string) {
	o.Id = v
}

// GetIsMandatory returns the IsMandatory field value if set, zero value otherwise.
func (o *ExtensionItem) GetIsMandatory() bool {
	if o == nil || IsNil(o.IsMandatory) {
		var ret bool
		return ret
	}
	return *o.IsMandatory
}

// GetIsMandatoryOk returns a tuple with the IsMandatory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionItem) GetIsMandatoryOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMandatory) {
		return nil, false
	}
	return o.IsMandatory, true
}

// HasIsMandatory returns a boolean if a field has been set.
func (o *ExtensionItem) HasIsMandatory() bool {
	if o != nil && !IsNil(o.IsMandatory) {
		return true
	}

	return false
}

// SetIsMandatory gets a reference to the given bool and assigns it to the IsMandatory field.
func (o *ExtensionItem) SetIsMandatory(v bool) {
	o.IsMandatory = &v
}

// GetName returns the Name field value
func (o *ExtensionItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ExtensionItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ExtensionItem) SetName(v string) {
	o.Name = v
}

// GetPermissionResource returns the PermissionResource field value
func (o *ExtensionItem) GetPermissionResource() PermissionResource {
	if o == nil {
		var ret PermissionResource
		return ret
	}

	return o.PermissionResource
}

// GetPermissionResourceOk returns a tuple with the PermissionResource field value
// and a boolean to check if the value has been set.
func (o *ExtensionItem) GetPermissionResourceOk() (*PermissionResource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PermissionResource, true
}

// SetPermissionResource sets field value
func (o *ExtensionItem) SetPermissionResource(v PermissionResource) {
	o.PermissionResource = v
}

// GetStableId returns the StableId field value if set, zero value otherwise.
func (o *ExtensionItem) GetStableId() string {
	if o == nil || IsNil(o.StableId) {
		var ret string
		return ret
	}
	return *o.StableId
}

// GetStableIdOk returns a tuple with the StableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionItem) GetStableIdOk() (*string, bool) {
	if o == nil || IsNil(o.StableId) {
		return nil, false
	}
	return o.StableId, true
}

// HasStableId returns a boolean if a field has been set.
func (o *ExtensionItem) HasStableId() bool {
	if o != nil && !IsNil(o.StableId) {
		return true
	}

	return false
}

// SetStableId gets a reference to the given string and assigns it to the StableId field.
func (o *ExtensionItem) SetStableId(v string) {
	o.StableId = &v
}

// GetTargetDomain returns the TargetDomain field value
func (o *ExtensionItem) GetTargetDomain() TargetDomain {
	if o == nil {
		var ret TargetDomain
		return ret
	}

	return o.TargetDomain
}

// GetTargetDomainOk returns a tuple with the TargetDomain field value
// and a boolean to check if the value has been set.
func (o *ExtensionItem) GetTargetDomainOk() (*TargetDomain, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetDomain, true
}

// SetTargetDomain sets field value
func (o *ExtensionItem) SetTargetDomain(v TargetDomain) {
	o.TargetDomain = v
}

// GetUniqueId returns the UniqueId field value if set, zero value otherwise.
func (o *ExtensionItem) GetUniqueId() string {
	if o == nil || IsNil(o.UniqueId) {
		var ret string
		return ret
	}
	return *o.UniqueId
}

// GetUniqueIdOk returns a tuple with the UniqueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionItem) GetUniqueIdOk() (*string, bool) {
	if o == nil || IsNil(o.UniqueId) {
		return nil, false
	}
	return o.UniqueId, true
}

// HasUniqueId returns a boolean if a field has been set.
func (o *ExtensionItem) HasUniqueId() bool {
	if o != nil && !IsNil(o.UniqueId) {
		return true
	}

	return false
}

// SetUniqueId gets a reference to the given string and assigns it to the UniqueId field.
func (o *ExtensionItem) SetUniqueId(v string) {
	o.UniqueId = &v
}

func (o ExtensionItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Binaries) {
		toSerialize["binaries"] = o.Binaries
	}
	toSerialize["data"] = o.Data
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ExtendedInternalId) {
		toSerialize["extendedInternalId"] = o.ExtendedInternalId
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.IsMandatory) {
		toSerialize["isMandatory"] = o.IsMandatory
	}
	toSerialize["name"] = o.Name
	toSerialize["permissionResource"] = o.PermissionResource
	if !IsNil(o.StableId) {
		toSerialize["stableId"] = o.StableId
	}
	toSerialize["targetDomain"] = o.TargetDomain
	if !IsNil(o.UniqueId) {
		toSerialize["uniqueId"] = o.UniqueId
	}
	return toSerialize, nil
}

func (o *ExtensionItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"id",
		"name",
		"permissionResource",
		"targetDomain",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtensionItem := _ExtensionItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExtensionItem)

	if err != nil {
		return err
	}

	*o = ExtensionItem(varExtensionItem)

	return err
}

type NullableExtensionItem struct {
	value *ExtensionItem
	isSet bool
}

func (v NullableExtensionItem) Get() *ExtensionItem {
	return v.value
}

func (v *NullableExtensionItem) Set(val *ExtensionItem) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionItem) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionItem(val *ExtensionItem) *NullableExtensionItem {
	return &NullableExtensionItem{value: val, isSet: true}
}

func (v NullableExtensionItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


