/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// IntegrationDetails - struct for IntegrationDetails
type IntegrationDetails struct {
	IntegrationDetailsExternal *IntegrationDetailsExternal
	IntegrationDetailsLocal *IntegrationDetailsLocal
}

// IntegrationDetailsExternalAsIntegrationDetails is a convenience function that returns IntegrationDetailsExternal wrapped in IntegrationDetails
func IntegrationDetailsExternalAsIntegrationDetails(v *IntegrationDetailsExternal) IntegrationDetails {
	return IntegrationDetails{
		IntegrationDetailsExternal: v,
	}
}

// IntegrationDetailsLocalAsIntegrationDetails is a convenience function that returns IntegrationDetailsLocal wrapped in IntegrationDetails
func IntegrationDetailsLocalAsIntegrationDetails(v *IntegrationDetailsLocal) IntegrationDetails {
	return IntegrationDetails{
		IntegrationDetailsLocal: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IntegrationDetails) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IntegrationDetailsExternal
	err = newStrictDecoder(data).Decode(&dst.IntegrationDetailsExternal)
	if err == nil {
		jsonIntegrationDetailsExternal, _ := json.Marshal(dst.IntegrationDetailsExternal)
		if string(jsonIntegrationDetailsExternal) == "{}" { // empty struct
			dst.IntegrationDetailsExternal = nil
		} else {
			if err = validator.Validate(dst.IntegrationDetailsExternal); err != nil {
				dst.IntegrationDetailsExternal = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationDetailsExternal = nil
	}

	// try to unmarshal data into IntegrationDetailsLocal
	err = newStrictDecoder(data).Decode(&dst.IntegrationDetailsLocal)
	if err == nil {
		jsonIntegrationDetailsLocal, _ := json.Marshal(dst.IntegrationDetailsLocal)
		if string(jsonIntegrationDetailsLocal) == "{}" { // empty struct
			dst.IntegrationDetailsLocal = nil
		} else {
			if err = validator.Validate(dst.IntegrationDetailsLocal); err != nil {
				dst.IntegrationDetailsLocal = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationDetailsLocal = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IntegrationDetailsExternal = nil
		dst.IntegrationDetailsLocal = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IntegrationDetails)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IntegrationDetails)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IntegrationDetails) MarshalJSON() ([]byte, error) {
	if src.IntegrationDetailsExternal != nil {
		return json.Marshal(&src.IntegrationDetailsExternal)
	}

	if src.IntegrationDetailsLocal != nil {
		return json.Marshal(&src.IntegrationDetailsLocal)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IntegrationDetails) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IntegrationDetailsExternal != nil {
		return obj.IntegrationDetailsExternal
	}

	if obj.IntegrationDetailsLocal != nil {
		return obj.IntegrationDetailsLocal
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj IntegrationDetails) GetActualInstanceValue() (interface{}) {
	if obj.IntegrationDetailsExternal != nil {
		return *obj.IntegrationDetailsExternal
	}

	if obj.IntegrationDetailsLocal != nil {
		return *obj.IntegrationDetailsLocal
	}

	// all schemas are nil
	return nil
}

type NullableIntegrationDetails struct {
	value *IntegrationDetails
	isSet bool
}

func (v NullableIntegrationDetails) Get() *IntegrationDetails {
	return v.value
}

func (v *NullableIntegrationDetails) Set(val *IntegrationDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationDetails(val *IntegrationDetails) *NullableIntegrationDetails {
	return &NullableIntegrationDetails{value: val, isSet: true}
}

func (v NullableIntegrationDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


