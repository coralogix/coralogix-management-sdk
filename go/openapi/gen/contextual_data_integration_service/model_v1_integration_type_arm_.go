/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contextual_data_integration_service

import (
	"encoding/json"
)

// checks if the V1IntegrationTypeArm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1IntegrationTypeArm{}

// V1IntegrationTypeArm This data structure represents an integration type.
type V1IntegrationTypeArm struct {
	// This data structure represents an Azure ARM integration.
	Arm map[string]interface{} `json:"arm,omitempty"`
}

// NewV1IntegrationTypeArm instantiates a new V1IntegrationTypeArm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1IntegrationTypeArm() *V1IntegrationTypeArm {
	this := V1IntegrationTypeArm{}
	return &this
}

// NewV1IntegrationTypeArmWithDefaults instantiates a new V1IntegrationTypeArm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1IntegrationTypeArmWithDefaults() *V1IntegrationTypeArm {
	this := V1IntegrationTypeArm{}
	return &this
}

// GetArm returns the Arm field value if set, zero value otherwise.
func (o *V1IntegrationTypeArm) GetArm() map[string]interface{} {
	if o == nil || IsNil(o.Arm) {
		var ret map[string]interface{}
		return ret
	}
	return o.Arm
}

// GetArmOk returns a tuple with the Arm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1IntegrationTypeArm) GetArmOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Arm) {
		return map[string]interface{}{}, false
	}
	return o.Arm, true
}

// HasArm returns a boolean if a field has been set.
func (o *V1IntegrationTypeArm) HasArm() bool {
	if o != nil && !IsNil(o.Arm) {
		return true
	}

	return false
}

// SetArm gets a reference to the given map[string]interface{} and assigns it to the Arm field.
func (o *V1IntegrationTypeArm) SetArm(v map[string]interface{}) {
	o.Arm = v
}

func (o V1IntegrationTypeArm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1IntegrationTypeArm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Arm) {
		toSerialize["arm"] = o.Arm
	}
	return toSerialize, nil
}

type NullableV1IntegrationTypeArm struct {
	value *V1IntegrationTypeArm
	isSet bool
}

func (v NullableV1IntegrationTypeArm) Get() *V1IntegrationTypeArm {
	return v.value
}

func (v *NullableV1IntegrationTypeArm) Set(val *V1IntegrationTypeArm) {
	v.value = val
	v.isSet = true
}

func (v NullableV1IntegrationTypeArm) IsSet() bool {
	return v.isSet
}

func (v *NullableV1IntegrationTypeArm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1IntegrationTypeArm(val *V1IntegrationTypeArm) *NullableV1IntegrationTypeArm {
	return &NullableV1IntegrationTypeArm{value: val, isSet: true}
}

func (v NullableV1IntegrationTypeArm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1IntegrationTypeArm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


