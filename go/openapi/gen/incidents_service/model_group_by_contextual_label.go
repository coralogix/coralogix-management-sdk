/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
)

// checks if the GroupByContextualLabel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupByContextualLabel{}

// GroupByContextualLabel struct for GroupByContextualLabel
type GroupByContextualLabel struct {
	// The contextual label to group by.
	ContextualLabel *string `json:"contextualLabel,omitempty"`
	OrderByDirection *V1OrderByDirection `json:"orderByDirection,omitempty"`
}

// NewGroupByContextualLabel instantiates a new GroupByContextualLabel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupByContextualLabel() *GroupByContextualLabel {
	this := GroupByContextualLabel{}
	return &this
}

// NewGroupByContextualLabelWithDefaults instantiates a new GroupByContextualLabel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupByContextualLabelWithDefaults() *GroupByContextualLabel {
	this := GroupByContextualLabel{}
	return &this
}

// GetContextualLabel returns the ContextualLabel field value if set, zero value otherwise.
func (o *GroupByContextualLabel) GetContextualLabel() string {
	if o == nil || IsNil(o.ContextualLabel) {
		var ret string
		return ret
	}
	return *o.ContextualLabel
}

// GetContextualLabelOk returns a tuple with the ContextualLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupByContextualLabel) GetContextualLabelOk() (*string, bool) {
	if o == nil || IsNil(o.ContextualLabel) {
		return nil, false
	}
	return o.ContextualLabel, true
}

// HasContextualLabel returns a boolean if a field has been set.
func (o *GroupByContextualLabel) HasContextualLabel() bool {
	if o != nil && !IsNil(o.ContextualLabel) {
		return true
	}

	return false
}

// SetContextualLabel gets a reference to the given string and assigns it to the ContextualLabel field.
func (o *GroupByContextualLabel) SetContextualLabel(v string) {
	o.ContextualLabel = &v
}

// GetOrderByDirection returns the OrderByDirection field value if set, zero value otherwise.
func (o *GroupByContextualLabel) GetOrderByDirection() V1OrderByDirection {
	if o == nil || IsNil(o.OrderByDirection) {
		var ret V1OrderByDirection
		return ret
	}
	return *o.OrderByDirection
}

// GetOrderByDirectionOk returns a tuple with the OrderByDirection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupByContextualLabel) GetOrderByDirectionOk() (*V1OrderByDirection, bool) {
	if o == nil || IsNil(o.OrderByDirection) {
		return nil, false
	}
	return o.OrderByDirection, true
}

// HasOrderByDirection returns a boolean if a field has been set.
func (o *GroupByContextualLabel) HasOrderByDirection() bool {
	if o != nil && !IsNil(o.OrderByDirection) {
		return true
	}

	return false
}

// SetOrderByDirection gets a reference to the given V1OrderByDirection and assigns it to the OrderByDirection field.
func (o *GroupByContextualLabel) SetOrderByDirection(v V1OrderByDirection) {
	o.OrderByDirection = &v
}

func (o GroupByContextualLabel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupByContextualLabel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContextualLabel) {
		toSerialize["contextualLabel"] = o.ContextualLabel
	}
	if !IsNil(o.OrderByDirection) {
		toSerialize["orderByDirection"] = o.OrderByDirection
	}
	return toSerialize, nil
}

type NullableGroupByContextualLabel struct {
	value *GroupByContextualLabel
	isSet bool
}

func (v NullableGroupByContextualLabel) Get() *GroupByContextualLabel {
	return v.value
}

func (v *NullableGroupByContextualLabel) Set(val *GroupByContextualLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupByContextualLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupByContextualLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupByContextualLabel(val *GroupByContextualLabel) *NullableGroupByContextualLabel {
	return &NullableGroupByContextualLabel{value: val, isSet: true}
}

func (v NullableGroupByContextualLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupByContextualLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


