/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"fmt"
)

// IncidentStatus the model 'IncidentStatus'
type IncidentStatus string

// List of IncidentStatus
const (
	INCIDENTSTATUS_INCIDENT_STATUS_UNSPECIFIED IncidentStatus = "INCIDENT_STATUS_UNSPECIFIED"
	INCIDENTSTATUS_INCIDENT_STATUS_TRIGGERED IncidentStatus = "INCIDENT_STATUS_TRIGGERED"
	INCIDENTSTATUS_INCIDENT_STATUS_ACKNOWLEDGED IncidentStatus = "INCIDENT_STATUS_ACKNOWLEDGED"
	INCIDENTSTATUS_INCIDENT_STATUS_RESOLVED IncidentStatus = "INCIDENT_STATUS_RESOLVED"
)

// All allowed values of IncidentStatus enum
var AllowedIncidentStatusEnumValues = []IncidentStatus{
	"INCIDENT_STATUS_UNSPECIFIED",
	"INCIDENT_STATUS_TRIGGERED",
	"INCIDENT_STATUS_ACKNOWLEDGED",
	"INCIDENT_STATUS_RESOLVED",
}

func (v *IncidentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IncidentStatus(value)
	for _, existing := range AllowedIncidentStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IncidentStatus", value)
}

// NewIncidentStatusFromValue returns a pointer to a valid IncidentStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIncidentStatusFromValue(v string) (*IncidentStatus, error) {
	ev := IncidentStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IncidentStatus: valid values are %v", v, AllowedIncidentStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IncidentStatus) IsValid() bool {
	for _, existing := range AllowedIncidentStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IncidentStatus value
func (v IncidentStatus) Ptr() *IncidentStatus {
	return &v
}

type NullableIncidentStatus struct {
	value *IncidentStatus
	isSet bool
}

func (v NullableIncidentStatus) Get() *IncidentStatus {
	return v.value
}

func (v *NullableIncidentStatus) Set(val *IncidentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentStatus(val *IncidentStatus) *NullableIncidentStatus {
	return &NullableIncidentStatus{value: val, isSet: true}
}

func (v NullableIncidentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

