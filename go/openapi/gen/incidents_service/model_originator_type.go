/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"fmt"
)

// OriginatorType the model 'OriginatorType'
type OriginatorType string

// List of OriginatorType
const (
	ORIGINATORTYPE_ORIGINATOR_TYPE_UNSPECIFIED OriginatorType = "ORIGINATOR_TYPE_UNSPECIFIED"
	ORIGINATORTYPE_ORIGINATOR_TYPE_OPERATIONAL OriginatorType = "ORIGINATOR_TYPE_OPERATIONAL"
	ORIGINATORTYPE_ORIGINATOR_TYPE_ADMINISTRATIVE OriginatorType = "ORIGINATOR_TYPE_ADMINISTRATIVE"
)

// All allowed values of OriginatorType enum
var AllowedOriginatorTypeEnumValues = []OriginatorType{
	"ORIGINATOR_TYPE_UNSPECIFIED",
	"ORIGINATOR_TYPE_OPERATIONAL",
	"ORIGINATOR_TYPE_ADMINISTRATIVE",
}

func (v *OriginatorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OriginatorType(value)
	for _, existing := range AllowedOriginatorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OriginatorType", value)
}

// NewOriginatorTypeFromValue returns a pointer to a valid OriginatorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOriginatorTypeFromValue(v string) (*OriginatorType, error) {
	ev := OriginatorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OriginatorType: valid values are %v", v, AllowedOriginatorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OriginatorType) IsValid() bool {
	for _, existing := range AllowedOriginatorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OriginatorType value
func (v OriginatorType) Ptr() *OriginatorType {
	return &v
}

type NullableOriginatorType struct {
	value *OriginatorType
	isSet bool
}

func (v NullableOriginatorType) Get() *OriginatorType {
	return v.value
}

func (v *NullableOriginatorType) Set(val *OriginatorType) {
	v.value = val
	v.isSet = true
}

func (v NullableOriginatorType) IsSet() bool {
	return v.isSet
}

func (v *NullableOriginatorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOriginatorType(val *OriginatorType) *NullableOriginatorType {
	return &NullableOriginatorType{value: val, isSet: true}
}

func (v NullableOriginatorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOriginatorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

