/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
)

// checks if the IncidentGroupBy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncidentGroupBy{}

// IncidentGroupBy struct for IncidentGroupBy
type IncidentGroupBy struct {
	// The field to group by
	IncidentField *string `json:"incidentField,omitempty"`
	// The order by direction.
	OrderByDirection *string `json:"orderByDirection,omitempty"`
}

// NewIncidentGroupBy instantiates a new IncidentGroupBy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentGroupBy() *IncidentGroupBy {
	this := IncidentGroupBy{}
	return &this
}

// NewIncidentGroupByWithDefaults instantiates a new IncidentGroupBy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentGroupByWithDefaults() *IncidentGroupBy {
	this := IncidentGroupBy{}
	return &this
}

// GetIncidentField returns the IncidentField field value if set, zero value otherwise.
func (o *IncidentGroupBy) GetIncidentField() string {
	if o == nil || IsNil(o.IncidentField) {
		var ret string
		return ret
	}
	return *o.IncidentField
}

// GetIncidentFieldOk returns a tuple with the IncidentField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentGroupBy) GetIncidentFieldOk() (*string, bool) {
	if o == nil || IsNil(o.IncidentField) {
		return nil, false
	}
	return o.IncidentField, true
}

// HasIncidentField returns a boolean if a field has been set.
func (o *IncidentGroupBy) HasIncidentField() bool {
	if o != nil && !IsNil(o.IncidentField) {
		return true
	}

	return false
}

// SetIncidentField gets a reference to the given string and assigns it to the IncidentField field.
func (o *IncidentGroupBy) SetIncidentField(v string) {
	o.IncidentField = &v
}

// GetOrderByDirection returns the OrderByDirection field value if set, zero value otherwise.
func (o *IncidentGroupBy) GetOrderByDirection() string {
	if o == nil || IsNil(o.OrderByDirection) {
		var ret string
		return ret
	}
	return *o.OrderByDirection
}

// GetOrderByDirectionOk returns a tuple with the OrderByDirection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentGroupBy) GetOrderByDirectionOk() (*string, bool) {
	if o == nil || IsNil(o.OrderByDirection) {
		return nil, false
	}
	return o.OrderByDirection, true
}

// HasOrderByDirection returns a boolean if a field has been set.
func (o *IncidentGroupBy) HasOrderByDirection() bool {
	if o != nil && !IsNil(o.OrderByDirection) {
		return true
	}

	return false
}

// SetOrderByDirection gets a reference to the given string and assigns it to the OrderByDirection field.
func (o *IncidentGroupBy) SetOrderByDirection(v string) {
	o.OrderByDirection = &v
}

func (o IncidentGroupBy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncidentGroupBy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IncidentField) {
		toSerialize["incidentField"] = o.IncidentField
	}
	if !IsNil(o.OrderByDirection) {
		toSerialize["orderByDirection"] = o.OrderByDirection
	}
	return toSerialize, nil
}

type NullableIncidentGroupBy struct {
	value *IncidentGroupBy
	isSet bool
}

func (v NullableIncidentGroupBy) Get() *IncidentGroupBy {
	return v.value
}

func (v *NullableIncidentGroupBy) Set(val *IncidentGroupBy) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentGroupBy) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentGroupBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentGroupBy(val *IncidentGroupBy) *NullableIncidentGroupBy {
	return &NullableIncidentGroupBy{value: val, isSet: true}
}

func (v NullableIncidentGroupBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentGroupBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


