/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"fmt"
)

// IncidentEventAlertType the model 'IncidentEventAlertType'
type IncidentEventAlertType string

// List of IncidentEventAlertType
const (
	INCIDENTEVENTALERTTYPE_INCIDENT_EVENT_ALERT_TYPE_STANDARD_OR_UNSPECIFIED IncidentEventAlertType = "INCIDENT_EVENT_ALERT_TYPE_STANDARD_OR_UNSPECIFIED"
	INCIDENTEVENTALERTTYPE_INCIDENT_EVENT_ALERT_TYPE_METRIC IncidentEventAlertType = "INCIDENT_EVENT_ALERT_TYPE_METRIC"
	INCIDENTEVENTALERTTYPE_INCIDENT_EVENT_ALERT_TYPE_NEW_VALUE IncidentEventAlertType = "INCIDENT_EVENT_ALERT_TYPE_NEW_VALUE"
	INCIDENTEVENTALERTTYPE_INCIDENT_EVENT_ALERT_TYPE_RATIO IncidentEventAlertType = "INCIDENT_EVENT_ALERT_TYPE_RATIO"
	INCIDENTEVENTALERTTYPE_INCIDENT_EVENT_ALERT_TYPE_TIME_RELATIVE IncidentEventAlertType = "INCIDENT_EVENT_ALERT_TYPE_TIME_RELATIVE"
	INCIDENTEVENTALERTTYPE_INCIDENT_EVENT_ALERT_TYPE_UNIQUE_COUNT IncidentEventAlertType = "INCIDENT_EVENT_ALERT_TYPE_UNIQUE_COUNT"
	INCIDENTEVENTALERTTYPE_INCIDENT_EVENT_ALERT_TYPE_TRACING IncidentEventAlertType = "INCIDENT_EVENT_ALERT_TYPE_TRACING"
	INCIDENTEVENTALERTTYPE_INCIDENT_EVENT_ALERT_TYPE_FLOW IncidentEventAlertType = "INCIDENT_EVENT_ALERT_TYPE_FLOW"
	INCIDENTEVENTALERTTYPE_INCIDENT_EVENT_ALERT_TYPE_SLO IncidentEventAlertType = "INCIDENT_EVENT_ALERT_TYPE_SLO"
)

// All allowed values of IncidentEventAlertType enum
var AllowedIncidentEventAlertTypeEnumValues = []IncidentEventAlertType{
	"INCIDENT_EVENT_ALERT_TYPE_STANDARD_OR_UNSPECIFIED",
	"INCIDENT_EVENT_ALERT_TYPE_METRIC",
	"INCIDENT_EVENT_ALERT_TYPE_NEW_VALUE",
	"INCIDENT_EVENT_ALERT_TYPE_RATIO",
	"INCIDENT_EVENT_ALERT_TYPE_TIME_RELATIVE",
	"INCIDENT_EVENT_ALERT_TYPE_UNIQUE_COUNT",
	"INCIDENT_EVENT_ALERT_TYPE_TRACING",
	"INCIDENT_EVENT_ALERT_TYPE_FLOW",
	"INCIDENT_EVENT_ALERT_TYPE_SLO",
}

func (v *IncidentEventAlertType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IncidentEventAlertType(value)
	for _, existing := range AllowedIncidentEventAlertTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IncidentEventAlertType", value)
}

// NewIncidentEventAlertTypeFromValue returns a pointer to a valid IncidentEventAlertType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIncidentEventAlertTypeFromValue(v string) (*IncidentEventAlertType, error) {
	ev := IncidentEventAlertType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IncidentEventAlertType: valid values are %v", v, AllowedIncidentEventAlertTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IncidentEventAlertType) IsValid() bool {
	for _, existing := range AllowedIncidentEventAlertTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IncidentEventAlertType value
func (v IncidentEventAlertType) Ptr() *IncidentEventAlertType {
	return &v
}

type NullableIncidentEventAlertType struct {
	value *IncidentEventAlertType
	isSet bool
}

func (v NullableIncidentEventAlertType) Get() *IncidentEventAlertType {
	return v.value
}

func (v *NullableIncidentEventAlertType) Set(val *IncidentEventAlertType) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentEventAlertType) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentEventAlertType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentEventAlertType(val *IncidentEventAlertType) *NullableIncidentEventAlertType {
	return &NullableIncidentEventAlertType{value: val, isSet: true}
}

func (v NullableIncidentEventAlertType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentEventAlertType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

