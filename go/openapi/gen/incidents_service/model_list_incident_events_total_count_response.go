/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
)

// checks if the ListIncidentEventsTotalCountResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListIncidentEventsTotalCountResponse{}

// ListIncidentEventsTotalCountResponse A response containing the total count of matching incident events and whether the count limit was reached
type ListIncidentEventsTotalCountResponse struct {
	// Total number of incident events matching the filter
	Count *string `json:"count,omitempty"`
	// Indicates if the count reached the system limit
	ReachedLimit *bool `json:"reachedLimit,omitempty"`
}

// NewListIncidentEventsTotalCountResponse instantiates a new ListIncidentEventsTotalCountResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListIncidentEventsTotalCountResponse() *ListIncidentEventsTotalCountResponse {
	this := ListIncidentEventsTotalCountResponse{}
	return &this
}

// NewListIncidentEventsTotalCountResponseWithDefaults instantiates a new ListIncidentEventsTotalCountResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListIncidentEventsTotalCountResponseWithDefaults() *ListIncidentEventsTotalCountResponse {
	this := ListIncidentEventsTotalCountResponse{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *ListIncidentEventsTotalCountResponse) GetCount() string {
	if o == nil || IsNil(o.Count) {
		var ret string
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListIncidentEventsTotalCountResponse) GetCountOk() (*string, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *ListIncidentEventsTotalCountResponse) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given string and assigns it to the Count field.
func (o *ListIncidentEventsTotalCountResponse) SetCount(v string) {
	o.Count = &v
}

// GetReachedLimit returns the ReachedLimit field value if set, zero value otherwise.
func (o *ListIncidentEventsTotalCountResponse) GetReachedLimit() bool {
	if o == nil || IsNil(o.ReachedLimit) {
		var ret bool
		return ret
	}
	return *o.ReachedLimit
}

// GetReachedLimitOk returns a tuple with the ReachedLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListIncidentEventsTotalCountResponse) GetReachedLimitOk() (*bool, bool) {
	if o == nil || IsNil(o.ReachedLimit) {
		return nil, false
	}
	return o.ReachedLimit, true
}

// HasReachedLimit returns a boolean if a field has been set.
func (o *ListIncidentEventsTotalCountResponse) HasReachedLimit() bool {
	if o != nil && !IsNil(o.ReachedLimit) {
		return true
	}

	return false
}

// SetReachedLimit gets a reference to the given bool and assigns it to the ReachedLimit field.
func (o *ListIncidentEventsTotalCountResponse) SetReachedLimit(v bool) {
	o.ReachedLimit = &v
}

func (o ListIncidentEventsTotalCountResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListIncidentEventsTotalCountResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.ReachedLimit) {
		toSerialize["reachedLimit"] = o.ReachedLimit
	}
	return toSerialize, nil
}

type NullableListIncidentEventsTotalCountResponse struct {
	value *ListIncidentEventsTotalCountResponse
	isSet bool
}

func (v NullableListIncidentEventsTotalCountResponse) Get() *ListIncidentEventsTotalCountResponse {
	return v.value
}

func (v *NullableListIncidentEventsTotalCountResponse) Set(val *ListIncidentEventsTotalCountResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListIncidentEventsTotalCountResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListIncidentEventsTotalCountResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListIncidentEventsTotalCountResponse(val *ListIncidentEventsTotalCountResponse) *NullableListIncidentEventsTotalCountResponse {
	return &NullableListIncidentEventsTotalCountResponse{value: val, isSet: true}
}

func (v NullableListIncidentEventsTotalCountResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListIncidentEventsTotalCountResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


