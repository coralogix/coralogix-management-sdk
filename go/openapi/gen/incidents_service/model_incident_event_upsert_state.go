/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IncidentEventUpsertState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncidentEventUpsertState{}

// IncidentEventUpsertState struct for IncidentEventUpsertState
type IncidentEventUpsertState struct {
	IsMuted *bool `json:"isMuted,omitempty"`
	Payload UpsertIncidentStatePayload `json:"payload"`
	StateType UpsertIncidentStateType `json:"stateType"`
}

type _IncidentEventUpsertState IncidentEventUpsertState

// NewIncidentEventUpsertState instantiates a new IncidentEventUpsertState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentEventUpsertState(payload UpsertIncidentStatePayload, stateType UpsertIncidentStateType) *IncidentEventUpsertState {
	this := IncidentEventUpsertState{}
	this.Payload = payload
	this.StateType = stateType
	return &this
}

// NewIncidentEventUpsertStateWithDefaults instantiates a new IncidentEventUpsertState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentEventUpsertStateWithDefaults() *IncidentEventUpsertState {
	this := IncidentEventUpsertState{}
	return &this
}

// GetIsMuted returns the IsMuted field value if set, zero value otherwise.
func (o *IncidentEventUpsertState) GetIsMuted() bool {
	if o == nil || IsNil(o.IsMuted) {
		var ret bool
		return ret
	}
	return *o.IsMuted
}

// GetIsMutedOk returns a tuple with the IsMuted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentEventUpsertState) GetIsMutedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMuted) {
		return nil, false
	}
	return o.IsMuted, true
}

// HasIsMuted returns a boolean if a field has been set.
func (o *IncidentEventUpsertState) HasIsMuted() bool {
	if o != nil && !IsNil(o.IsMuted) {
		return true
	}

	return false
}

// SetIsMuted gets a reference to the given bool and assigns it to the IsMuted field.
func (o *IncidentEventUpsertState) SetIsMuted(v bool) {
	o.IsMuted = &v
}

// GetPayload returns the Payload field value
func (o *IncidentEventUpsertState) GetPayload() UpsertIncidentStatePayload {
	if o == nil {
		var ret UpsertIncidentStatePayload
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *IncidentEventUpsertState) GetPayloadOk() (*UpsertIncidentStatePayload, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Payload, true
}

// SetPayload sets field value
func (o *IncidentEventUpsertState) SetPayload(v UpsertIncidentStatePayload) {
	o.Payload = v
}

// GetStateType returns the StateType field value
func (o *IncidentEventUpsertState) GetStateType() UpsertIncidentStateType {
	if o == nil {
		var ret UpsertIncidentStateType
		return ret
	}

	return o.StateType
}

// GetStateTypeOk returns a tuple with the StateType field value
// and a boolean to check if the value has been set.
func (o *IncidentEventUpsertState) GetStateTypeOk() (*UpsertIncidentStateType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateType, true
}

// SetStateType sets field value
func (o *IncidentEventUpsertState) SetStateType(v UpsertIncidentStateType) {
	o.StateType = v
}

func (o IncidentEventUpsertState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncidentEventUpsertState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsMuted) {
		toSerialize["isMuted"] = o.IsMuted
	}
	toSerialize["payload"] = o.Payload
	toSerialize["stateType"] = o.StateType
	return toSerialize, nil
}

func (o *IncidentEventUpsertState) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"payload",
		"stateType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIncidentEventUpsertState := _IncidentEventUpsertState{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIncidentEventUpsertState)

	if err != nil {
		return err
	}

	*o = IncidentEventUpsertState(varIncidentEventUpsertState)

	return err
}

type NullableIncidentEventUpsertState struct {
	value *IncidentEventUpsertState
	isSet bool
}

func (v NullableIncidentEventUpsertState) Get() *IncidentEventUpsertState {
	return v.value
}

func (v *NullableIncidentEventUpsertState) Set(val *IncidentEventUpsertState) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentEventUpsertState) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentEventUpsertState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentEventUpsertState(val *IncidentEventUpsertState) *NullableIncidentEventUpsertState {
	return &NullableIncidentEventUpsertState{value: val, isSet: true}
}

func (v NullableIncidentEventUpsertState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentEventUpsertState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


