/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
)

// checks if the IncidentEventAssign type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncidentEventAssign{}

// IncidentEventAssign struct for IncidentEventAssign
type IncidentEventAssign struct {
	Assignment *Assignment `json:"assignment,omitempty"`
}

// NewIncidentEventAssign instantiates a new IncidentEventAssign object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentEventAssign() *IncidentEventAssign {
	this := IncidentEventAssign{}
	return &this
}

// NewIncidentEventAssignWithDefaults instantiates a new IncidentEventAssign object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentEventAssignWithDefaults() *IncidentEventAssign {
	this := IncidentEventAssign{}
	return &this
}

// GetAssignment returns the Assignment field value if set, zero value otherwise.
func (o *IncidentEventAssign) GetAssignment() Assignment {
	if o == nil || IsNil(o.Assignment) {
		var ret Assignment
		return ret
	}
	return *o.Assignment
}

// GetAssignmentOk returns a tuple with the Assignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentEventAssign) GetAssignmentOk() (*Assignment, bool) {
	if o == nil || IsNil(o.Assignment) {
		return nil, false
	}
	return o.Assignment, true
}

// HasAssignment returns a boolean if a field has been set.
func (o *IncidentEventAssign) HasAssignment() bool {
	if o != nil && !IsNil(o.Assignment) {
		return true
	}

	return false
}

// SetAssignment gets a reference to the given Assignment and assigns it to the Assignment field.
func (o *IncidentEventAssign) SetAssignment(v Assignment) {
	o.Assignment = &v
}

func (o IncidentEventAssign) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncidentEventAssign) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Assignment) {
		toSerialize["assignment"] = o.Assignment
	}
	return toSerialize, nil
}

type NullableIncidentEventAssign struct {
	value *IncidentEventAssign
	isSet bool
}

func (v NullableIncidentEventAssign) Get() *IncidentEventAssign {
	return v.value
}

func (v *NullableIncidentEventAssign) Set(val *IncidentEventAssign) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentEventAssign) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentEventAssign) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentEventAssign(val *IncidentEventAssign) *NullableIncidentEventAssign {
	return &NullableIncidentEventAssign{value: val, isSet: true}
}

func (v NullableIncidentEventAssign) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentEventAssign) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


