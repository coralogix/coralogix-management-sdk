/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OrderByContextualLabel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderByContextualLabel{}

// OrderByContextualLabel struct for OrderByContextualLabel
type OrderByContextualLabel struct {
	ContextualLabel *string `json:"contextualLabel,omitempty"`
	Direction V1OrderByDirection `json:"direction"`
}

type _OrderByContextualLabel OrderByContextualLabel

// NewOrderByContextualLabel instantiates a new OrderByContextualLabel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderByContextualLabel(direction V1OrderByDirection) *OrderByContextualLabel {
	this := OrderByContextualLabel{}
	this.Direction = direction
	return &this
}

// NewOrderByContextualLabelWithDefaults instantiates a new OrderByContextualLabel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderByContextualLabelWithDefaults() *OrderByContextualLabel {
	this := OrderByContextualLabel{}
	return &this
}

// GetContextualLabel returns the ContextualLabel field value if set, zero value otherwise.
func (o *OrderByContextualLabel) GetContextualLabel() string {
	if o == nil || IsNil(o.ContextualLabel) {
		var ret string
		return ret
	}
	return *o.ContextualLabel
}

// GetContextualLabelOk returns a tuple with the ContextualLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderByContextualLabel) GetContextualLabelOk() (*string, bool) {
	if o == nil || IsNil(o.ContextualLabel) {
		return nil, false
	}
	return o.ContextualLabel, true
}

// HasContextualLabel returns a boolean if a field has been set.
func (o *OrderByContextualLabel) HasContextualLabel() bool {
	if o != nil && !IsNil(o.ContextualLabel) {
		return true
	}

	return false
}

// SetContextualLabel gets a reference to the given string and assigns it to the ContextualLabel field.
func (o *OrderByContextualLabel) SetContextualLabel(v string) {
	o.ContextualLabel = &v
}

// GetDirection returns the Direction field value
func (o *OrderByContextualLabel) GetDirection() V1OrderByDirection {
	if o == nil {
		var ret V1OrderByDirection
		return ret
	}

	return o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value
// and a boolean to check if the value has been set.
func (o *OrderByContextualLabel) GetDirectionOk() (*V1OrderByDirection, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Direction, true
}

// SetDirection sets field value
func (o *OrderByContextualLabel) SetDirection(v V1OrderByDirection) {
	o.Direction = v
}

func (o OrderByContextualLabel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderByContextualLabel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContextualLabel) {
		toSerialize["contextualLabel"] = o.ContextualLabel
	}
	toSerialize["direction"] = o.Direction
	return toSerialize, nil
}

func (o *OrderByContextualLabel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"direction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderByContextualLabel := _OrderByContextualLabel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrderByContextualLabel)

	if err != nil {
		return err
	}

	*o = OrderByContextualLabel(varOrderByContextualLabel)

	return err
}

type NullableOrderByContextualLabel struct {
	value *OrderByContextualLabel
	isSet bool
}

func (v NullableOrderByContextualLabel) Get() *OrderByContextualLabel {
	return v.value
}

func (v *NullableOrderByContextualLabel) Set(val *OrderByContextualLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderByContextualLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderByContextualLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderByContextualLabel(val *OrderByContextualLabel) *NullableOrderByContextualLabel {
	return &NullableOrderByContextualLabel{value: val, isSet: true}
}

func (v NullableOrderByContextualLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderByContextualLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


