/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IncidentEventUnassignOperationalEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncidentEventUnassignOperationalEvent{}

// IncidentEventUnassignOperationalEvent struct for IncidentEventUnassignOperationalEvent
type IncidentEventUnassignOperationalEvent struct {
	// The ID of the incident event
	Id string `json:"id"`
	IncidentEventType IncidentEventType `json:"incidentEventType"`
	OperationalEvent *IncidentEventOriginatorOperational `json:"operationalEvent,omitempty"`
	OriginatorType OriginatorType `json:"originatorType"`
	Unassign map[string]interface{} `json:"unassign,omitempty"`
}

type _IncidentEventUnassignOperationalEvent IncidentEventUnassignOperationalEvent

// NewIncidentEventUnassignOperationalEvent instantiates a new IncidentEventUnassignOperationalEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentEventUnassignOperationalEvent(id string, incidentEventType IncidentEventType, originatorType OriginatorType) *IncidentEventUnassignOperationalEvent {
	this := IncidentEventUnassignOperationalEvent{}
	this.Id = id
	this.IncidentEventType = incidentEventType
	this.OriginatorType = originatorType
	return &this
}

// NewIncidentEventUnassignOperationalEventWithDefaults instantiates a new IncidentEventUnassignOperationalEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentEventUnassignOperationalEventWithDefaults() *IncidentEventUnassignOperationalEvent {
	this := IncidentEventUnassignOperationalEvent{}
	return &this
}

// GetId returns the Id field value
func (o *IncidentEventUnassignOperationalEvent) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IncidentEventUnassignOperationalEvent) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IncidentEventUnassignOperationalEvent) SetId(v string) {
	o.Id = v
}

// GetIncidentEventType returns the IncidentEventType field value
func (o *IncidentEventUnassignOperationalEvent) GetIncidentEventType() IncidentEventType {
	if o == nil {
		var ret IncidentEventType
		return ret
	}

	return o.IncidentEventType
}

// GetIncidentEventTypeOk returns a tuple with the IncidentEventType field value
// and a boolean to check if the value has been set.
func (o *IncidentEventUnassignOperationalEvent) GetIncidentEventTypeOk() (*IncidentEventType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncidentEventType, true
}

// SetIncidentEventType sets field value
func (o *IncidentEventUnassignOperationalEvent) SetIncidentEventType(v IncidentEventType) {
	o.IncidentEventType = v
}

// GetOperationalEvent returns the OperationalEvent field value if set, zero value otherwise.
func (o *IncidentEventUnassignOperationalEvent) GetOperationalEvent() IncidentEventOriginatorOperational {
	if o == nil || IsNil(o.OperationalEvent) {
		var ret IncidentEventOriginatorOperational
		return ret
	}
	return *o.OperationalEvent
}

// GetOperationalEventOk returns a tuple with the OperationalEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentEventUnassignOperationalEvent) GetOperationalEventOk() (*IncidentEventOriginatorOperational, bool) {
	if o == nil || IsNil(o.OperationalEvent) {
		return nil, false
	}
	return o.OperationalEvent, true
}

// HasOperationalEvent returns a boolean if a field has been set.
func (o *IncidentEventUnassignOperationalEvent) HasOperationalEvent() bool {
	if o != nil && !IsNil(o.OperationalEvent) {
		return true
	}

	return false
}

// SetOperationalEvent gets a reference to the given IncidentEventOriginatorOperational and assigns it to the OperationalEvent field.
func (o *IncidentEventUnassignOperationalEvent) SetOperationalEvent(v IncidentEventOriginatorOperational) {
	o.OperationalEvent = &v
}

// GetOriginatorType returns the OriginatorType field value
func (o *IncidentEventUnassignOperationalEvent) GetOriginatorType() OriginatorType {
	if o == nil {
		var ret OriginatorType
		return ret
	}

	return o.OriginatorType
}

// GetOriginatorTypeOk returns a tuple with the OriginatorType field value
// and a boolean to check if the value has been set.
func (o *IncidentEventUnassignOperationalEvent) GetOriginatorTypeOk() (*OriginatorType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginatorType, true
}

// SetOriginatorType sets field value
func (o *IncidentEventUnassignOperationalEvent) SetOriginatorType(v OriginatorType) {
	o.OriginatorType = v
}

// GetUnassign returns the Unassign field value if set, zero value otherwise.
func (o *IncidentEventUnassignOperationalEvent) GetUnassign() map[string]interface{} {
	if o == nil || IsNil(o.Unassign) {
		var ret map[string]interface{}
		return ret
	}
	return o.Unassign
}

// GetUnassignOk returns a tuple with the Unassign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentEventUnassignOperationalEvent) GetUnassignOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Unassign) {
		return map[string]interface{}{}, false
	}
	return o.Unassign, true
}

// HasUnassign returns a boolean if a field has been set.
func (o *IncidentEventUnassignOperationalEvent) HasUnassign() bool {
	if o != nil && !IsNil(o.Unassign) {
		return true
	}

	return false
}

// SetUnassign gets a reference to the given map[string]interface{} and assigns it to the Unassign field.
func (o *IncidentEventUnassignOperationalEvent) SetUnassign(v map[string]interface{}) {
	o.Unassign = v
}

func (o IncidentEventUnassignOperationalEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncidentEventUnassignOperationalEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["incidentEventType"] = o.IncidentEventType
	if !IsNil(o.OperationalEvent) {
		toSerialize["operationalEvent"] = o.OperationalEvent
	}
	toSerialize["originatorType"] = o.OriginatorType
	if !IsNil(o.Unassign) {
		toSerialize["unassign"] = o.Unassign
	}
	return toSerialize, nil
}

func (o *IncidentEventUnassignOperationalEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"incidentEventType",
		"originatorType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIncidentEventUnassignOperationalEvent := _IncidentEventUnassignOperationalEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIncidentEventUnassignOperationalEvent)

	if err != nil {
		return err
	}

	*o = IncidentEventUnassignOperationalEvent(varIncidentEventUnassignOperationalEvent)

	return err
}

type NullableIncidentEventUnassignOperationalEvent struct {
	value *IncidentEventUnassignOperationalEvent
	isSet bool
}

func (v NullableIncidentEventUnassignOperationalEvent) Get() *IncidentEventUnassignOperationalEvent {
	return v.value
}

func (v *NullableIncidentEventUnassignOperationalEvent) Set(val *IncidentEventUnassignOperationalEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentEventUnassignOperationalEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentEventUnassignOperationalEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentEventUnassignOperationalEvent(val *IncidentEventUnassignOperationalEvent) *NullableIncidentEventUnassignOperationalEvent {
	return &NullableIncidentEventUnassignOperationalEvent{value: val, isSet: true}
}

func (v NullableIncidentEventUnassignOperationalEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentEventUnassignOperationalEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


