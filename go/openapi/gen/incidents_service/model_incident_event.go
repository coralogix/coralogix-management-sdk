/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// IncidentEvent - struct for IncidentEvent
type IncidentEvent struct {
	IncidentEventAcknowledgeAdministrativeEvent *IncidentEventAcknowledgeAdministrativeEvent
	IncidentEventAcknowledgeOperationalEvent *IncidentEventAcknowledgeOperationalEvent
	IncidentEventAssignmentAdministrativeEvent *IncidentEventAssignmentAdministrativeEvent
	IncidentEventAssignmentOperationalEvent *IncidentEventAssignmentOperationalEvent
	IncidentEventCloseAdministrativeEvent *IncidentEventCloseAdministrativeEvent
	IncidentEventCloseOperationalEvent *IncidentEventCloseOperationalEvent
	IncidentEventSnoozeIndicatorAdministrativeEvent *IncidentEventSnoozeIndicatorAdministrativeEvent
	IncidentEventSnoozeIndicatorOperationalEvent *IncidentEventSnoozeIndicatorOperationalEvent
	IncidentEventUnassignAdministrativeEvent *IncidentEventUnassignAdministrativeEvent
	IncidentEventUnassignOperationalEvent *IncidentEventUnassignOperationalEvent
	IncidentEventUpsertStateAdministrativeEvent *IncidentEventUpsertStateAdministrativeEvent
	IncidentEventUpsertStateOperationalEvent *IncidentEventUpsertStateOperationalEvent
}

// IncidentEventAcknowledgeAdministrativeEventAsIncidentEvent is a convenience function that returns IncidentEventAcknowledgeAdministrativeEvent wrapped in IncidentEvent
func IncidentEventAcknowledgeAdministrativeEventAsIncidentEvent(v *IncidentEventAcknowledgeAdministrativeEvent) IncidentEvent {
	return IncidentEvent{
		IncidentEventAcknowledgeAdministrativeEvent: v,
	}
}

// IncidentEventAcknowledgeOperationalEventAsIncidentEvent is a convenience function that returns IncidentEventAcknowledgeOperationalEvent wrapped in IncidentEvent
func IncidentEventAcknowledgeOperationalEventAsIncidentEvent(v *IncidentEventAcknowledgeOperationalEvent) IncidentEvent {
	return IncidentEvent{
		IncidentEventAcknowledgeOperationalEvent: v,
	}
}

// IncidentEventAssignmentAdministrativeEventAsIncidentEvent is a convenience function that returns IncidentEventAssignmentAdministrativeEvent wrapped in IncidentEvent
func IncidentEventAssignmentAdministrativeEventAsIncidentEvent(v *IncidentEventAssignmentAdministrativeEvent) IncidentEvent {
	return IncidentEvent{
		IncidentEventAssignmentAdministrativeEvent: v,
	}
}

// IncidentEventAssignmentOperationalEventAsIncidentEvent is a convenience function that returns IncidentEventAssignmentOperationalEvent wrapped in IncidentEvent
func IncidentEventAssignmentOperationalEventAsIncidentEvent(v *IncidentEventAssignmentOperationalEvent) IncidentEvent {
	return IncidentEvent{
		IncidentEventAssignmentOperationalEvent: v,
	}
}

// IncidentEventCloseAdministrativeEventAsIncidentEvent is a convenience function that returns IncidentEventCloseAdministrativeEvent wrapped in IncidentEvent
func IncidentEventCloseAdministrativeEventAsIncidentEvent(v *IncidentEventCloseAdministrativeEvent) IncidentEvent {
	return IncidentEvent{
		IncidentEventCloseAdministrativeEvent: v,
	}
}

// IncidentEventCloseOperationalEventAsIncidentEvent is a convenience function that returns IncidentEventCloseOperationalEvent wrapped in IncidentEvent
func IncidentEventCloseOperationalEventAsIncidentEvent(v *IncidentEventCloseOperationalEvent) IncidentEvent {
	return IncidentEvent{
		IncidentEventCloseOperationalEvent: v,
	}
}

// IncidentEventSnoozeIndicatorAdministrativeEventAsIncidentEvent is a convenience function that returns IncidentEventSnoozeIndicatorAdministrativeEvent wrapped in IncidentEvent
func IncidentEventSnoozeIndicatorAdministrativeEventAsIncidentEvent(v *IncidentEventSnoozeIndicatorAdministrativeEvent) IncidentEvent {
	return IncidentEvent{
		IncidentEventSnoozeIndicatorAdministrativeEvent: v,
	}
}

// IncidentEventSnoozeIndicatorOperationalEventAsIncidentEvent is a convenience function that returns IncidentEventSnoozeIndicatorOperationalEvent wrapped in IncidentEvent
func IncidentEventSnoozeIndicatorOperationalEventAsIncidentEvent(v *IncidentEventSnoozeIndicatorOperationalEvent) IncidentEvent {
	return IncidentEvent{
		IncidentEventSnoozeIndicatorOperationalEvent: v,
	}
}

// IncidentEventUnassignAdministrativeEventAsIncidentEvent is a convenience function that returns IncidentEventUnassignAdministrativeEvent wrapped in IncidentEvent
func IncidentEventUnassignAdministrativeEventAsIncidentEvent(v *IncidentEventUnassignAdministrativeEvent) IncidentEvent {
	return IncidentEvent{
		IncidentEventUnassignAdministrativeEvent: v,
	}
}

// IncidentEventUnassignOperationalEventAsIncidentEvent is a convenience function that returns IncidentEventUnassignOperationalEvent wrapped in IncidentEvent
func IncidentEventUnassignOperationalEventAsIncidentEvent(v *IncidentEventUnassignOperationalEvent) IncidentEvent {
	return IncidentEvent{
		IncidentEventUnassignOperationalEvent: v,
	}
}

// IncidentEventUpsertStateAdministrativeEventAsIncidentEvent is a convenience function that returns IncidentEventUpsertStateAdministrativeEvent wrapped in IncidentEvent
func IncidentEventUpsertStateAdministrativeEventAsIncidentEvent(v *IncidentEventUpsertStateAdministrativeEvent) IncidentEvent {
	return IncidentEvent{
		IncidentEventUpsertStateAdministrativeEvent: v,
	}
}

// IncidentEventUpsertStateOperationalEventAsIncidentEvent is a convenience function that returns IncidentEventUpsertStateOperationalEvent wrapped in IncidentEvent
func IncidentEventUpsertStateOperationalEventAsIncidentEvent(v *IncidentEventUpsertStateOperationalEvent) IncidentEvent {
	return IncidentEvent{
		IncidentEventUpsertStateOperationalEvent: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IncidentEvent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IncidentEventAcknowledgeAdministrativeEvent
	err = newStrictDecoder(data).Decode(&dst.IncidentEventAcknowledgeAdministrativeEvent)
	if err == nil {
		jsonIncidentEventAcknowledgeAdministrativeEvent, _ := json.Marshal(dst.IncidentEventAcknowledgeAdministrativeEvent)
		if string(jsonIncidentEventAcknowledgeAdministrativeEvent) == "{}" { // empty struct
			dst.IncidentEventAcknowledgeAdministrativeEvent = nil
		} else {
			if err = validator.Validate(dst.IncidentEventAcknowledgeAdministrativeEvent); err != nil {
				dst.IncidentEventAcknowledgeAdministrativeEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentEventAcknowledgeAdministrativeEvent = nil
	}

	// try to unmarshal data into IncidentEventAcknowledgeOperationalEvent
	err = newStrictDecoder(data).Decode(&dst.IncidentEventAcknowledgeOperationalEvent)
	if err == nil {
		jsonIncidentEventAcknowledgeOperationalEvent, _ := json.Marshal(dst.IncidentEventAcknowledgeOperationalEvent)
		if string(jsonIncidentEventAcknowledgeOperationalEvent) == "{}" { // empty struct
			dst.IncidentEventAcknowledgeOperationalEvent = nil
		} else {
			if err = validator.Validate(dst.IncidentEventAcknowledgeOperationalEvent); err != nil {
				dst.IncidentEventAcknowledgeOperationalEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentEventAcknowledgeOperationalEvent = nil
	}

	// try to unmarshal data into IncidentEventAssignmentAdministrativeEvent
	err = newStrictDecoder(data).Decode(&dst.IncidentEventAssignmentAdministrativeEvent)
	if err == nil {
		jsonIncidentEventAssignmentAdministrativeEvent, _ := json.Marshal(dst.IncidentEventAssignmentAdministrativeEvent)
		if string(jsonIncidentEventAssignmentAdministrativeEvent) == "{}" { // empty struct
			dst.IncidentEventAssignmentAdministrativeEvent = nil
		} else {
			if err = validator.Validate(dst.IncidentEventAssignmentAdministrativeEvent); err != nil {
				dst.IncidentEventAssignmentAdministrativeEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentEventAssignmentAdministrativeEvent = nil
	}

	// try to unmarshal data into IncidentEventAssignmentOperationalEvent
	err = newStrictDecoder(data).Decode(&dst.IncidentEventAssignmentOperationalEvent)
	if err == nil {
		jsonIncidentEventAssignmentOperationalEvent, _ := json.Marshal(dst.IncidentEventAssignmentOperationalEvent)
		if string(jsonIncidentEventAssignmentOperationalEvent) == "{}" { // empty struct
			dst.IncidentEventAssignmentOperationalEvent = nil
		} else {
			if err = validator.Validate(dst.IncidentEventAssignmentOperationalEvent); err != nil {
				dst.IncidentEventAssignmentOperationalEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentEventAssignmentOperationalEvent = nil
	}

	// try to unmarshal data into IncidentEventCloseAdministrativeEvent
	err = newStrictDecoder(data).Decode(&dst.IncidentEventCloseAdministrativeEvent)
	if err == nil {
		jsonIncidentEventCloseAdministrativeEvent, _ := json.Marshal(dst.IncidentEventCloseAdministrativeEvent)
		if string(jsonIncidentEventCloseAdministrativeEvent) == "{}" { // empty struct
			dst.IncidentEventCloseAdministrativeEvent = nil
		} else {
			if err = validator.Validate(dst.IncidentEventCloseAdministrativeEvent); err != nil {
				dst.IncidentEventCloseAdministrativeEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentEventCloseAdministrativeEvent = nil
	}

	// try to unmarshal data into IncidentEventCloseOperationalEvent
	err = newStrictDecoder(data).Decode(&dst.IncidentEventCloseOperationalEvent)
	if err == nil {
		jsonIncidentEventCloseOperationalEvent, _ := json.Marshal(dst.IncidentEventCloseOperationalEvent)
		if string(jsonIncidentEventCloseOperationalEvent) == "{}" { // empty struct
			dst.IncidentEventCloseOperationalEvent = nil
		} else {
			if err = validator.Validate(dst.IncidentEventCloseOperationalEvent); err != nil {
				dst.IncidentEventCloseOperationalEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentEventCloseOperationalEvent = nil
	}

	// try to unmarshal data into IncidentEventSnoozeIndicatorAdministrativeEvent
	err = newStrictDecoder(data).Decode(&dst.IncidentEventSnoozeIndicatorAdministrativeEvent)
	if err == nil {
		jsonIncidentEventSnoozeIndicatorAdministrativeEvent, _ := json.Marshal(dst.IncidentEventSnoozeIndicatorAdministrativeEvent)
		if string(jsonIncidentEventSnoozeIndicatorAdministrativeEvent) == "{}" { // empty struct
			dst.IncidentEventSnoozeIndicatorAdministrativeEvent = nil
		} else {
			if err = validator.Validate(dst.IncidentEventSnoozeIndicatorAdministrativeEvent); err != nil {
				dst.IncidentEventSnoozeIndicatorAdministrativeEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentEventSnoozeIndicatorAdministrativeEvent = nil
	}

	// try to unmarshal data into IncidentEventSnoozeIndicatorOperationalEvent
	err = newStrictDecoder(data).Decode(&dst.IncidentEventSnoozeIndicatorOperationalEvent)
	if err == nil {
		jsonIncidentEventSnoozeIndicatorOperationalEvent, _ := json.Marshal(dst.IncidentEventSnoozeIndicatorOperationalEvent)
		if string(jsonIncidentEventSnoozeIndicatorOperationalEvent) == "{}" { // empty struct
			dst.IncidentEventSnoozeIndicatorOperationalEvent = nil
		} else {
			if err = validator.Validate(dst.IncidentEventSnoozeIndicatorOperationalEvent); err != nil {
				dst.IncidentEventSnoozeIndicatorOperationalEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentEventSnoozeIndicatorOperationalEvent = nil
	}

	// try to unmarshal data into IncidentEventUnassignAdministrativeEvent
	err = newStrictDecoder(data).Decode(&dst.IncidentEventUnassignAdministrativeEvent)
	if err == nil {
		jsonIncidentEventUnassignAdministrativeEvent, _ := json.Marshal(dst.IncidentEventUnassignAdministrativeEvent)
		if string(jsonIncidentEventUnassignAdministrativeEvent) == "{}" { // empty struct
			dst.IncidentEventUnassignAdministrativeEvent = nil
		} else {
			if err = validator.Validate(dst.IncidentEventUnassignAdministrativeEvent); err != nil {
				dst.IncidentEventUnassignAdministrativeEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentEventUnassignAdministrativeEvent = nil
	}

	// try to unmarshal data into IncidentEventUnassignOperationalEvent
	err = newStrictDecoder(data).Decode(&dst.IncidentEventUnassignOperationalEvent)
	if err == nil {
		jsonIncidentEventUnassignOperationalEvent, _ := json.Marshal(dst.IncidentEventUnassignOperationalEvent)
		if string(jsonIncidentEventUnassignOperationalEvent) == "{}" { // empty struct
			dst.IncidentEventUnassignOperationalEvent = nil
		} else {
			if err = validator.Validate(dst.IncidentEventUnassignOperationalEvent); err != nil {
				dst.IncidentEventUnassignOperationalEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentEventUnassignOperationalEvent = nil
	}

	// try to unmarshal data into IncidentEventUpsertStateAdministrativeEvent
	err = newStrictDecoder(data).Decode(&dst.IncidentEventUpsertStateAdministrativeEvent)
	if err == nil {
		jsonIncidentEventUpsertStateAdministrativeEvent, _ := json.Marshal(dst.IncidentEventUpsertStateAdministrativeEvent)
		if string(jsonIncidentEventUpsertStateAdministrativeEvent) == "{}" { // empty struct
			dst.IncidentEventUpsertStateAdministrativeEvent = nil
		} else {
			if err = validator.Validate(dst.IncidentEventUpsertStateAdministrativeEvent); err != nil {
				dst.IncidentEventUpsertStateAdministrativeEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentEventUpsertStateAdministrativeEvent = nil
	}

	// try to unmarshal data into IncidentEventUpsertStateOperationalEvent
	err = newStrictDecoder(data).Decode(&dst.IncidentEventUpsertStateOperationalEvent)
	if err == nil {
		jsonIncidentEventUpsertStateOperationalEvent, _ := json.Marshal(dst.IncidentEventUpsertStateOperationalEvent)
		if string(jsonIncidentEventUpsertStateOperationalEvent) == "{}" { // empty struct
			dst.IncidentEventUpsertStateOperationalEvent = nil
		} else {
			if err = validator.Validate(dst.IncidentEventUpsertStateOperationalEvent); err != nil {
				dst.IncidentEventUpsertStateOperationalEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentEventUpsertStateOperationalEvent = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IncidentEventAcknowledgeAdministrativeEvent = nil
		dst.IncidentEventAcknowledgeOperationalEvent = nil
		dst.IncidentEventAssignmentAdministrativeEvent = nil
		dst.IncidentEventAssignmentOperationalEvent = nil
		dst.IncidentEventCloseAdministrativeEvent = nil
		dst.IncidentEventCloseOperationalEvent = nil
		dst.IncidentEventSnoozeIndicatorAdministrativeEvent = nil
		dst.IncidentEventSnoozeIndicatorOperationalEvent = nil
		dst.IncidentEventUnassignAdministrativeEvent = nil
		dst.IncidentEventUnassignOperationalEvent = nil
		dst.IncidentEventUpsertStateAdministrativeEvent = nil
		dst.IncidentEventUpsertStateOperationalEvent = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IncidentEvent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IncidentEvent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IncidentEvent) MarshalJSON() ([]byte, error) {
	if src.IncidentEventAcknowledgeAdministrativeEvent != nil {
		return json.Marshal(&src.IncidentEventAcknowledgeAdministrativeEvent)
	}

	if src.IncidentEventAcknowledgeOperationalEvent != nil {
		return json.Marshal(&src.IncidentEventAcknowledgeOperationalEvent)
	}

	if src.IncidentEventAssignmentAdministrativeEvent != nil {
		return json.Marshal(&src.IncidentEventAssignmentAdministrativeEvent)
	}

	if src.IncidentEventAssignmentOperationalEvent != nil {
		return json.Marshal(&src.IncidentEventAssignmentOperationalEvent)
	}

	if src.IncidentEventCloseAdministrativeEvent != nil {
		return json.Marshal(&src.IncidentEventCloseAdministrativeEvent)
	}

	if src.IncidentEventCloseOperationalEvent != nil {
		return json.Marshal(&src.IncidentEventCloseOperationalEvent)
	}

	if src.IncidentEventSnoozeIndicatorAdministrativeEvent != nil {
		return json.Marshal(&src.IncidentEventSnoozeIndicatorAdministrativeEvent)
	}

	if src.IncidentEventSnoozeIndicatorOperationalEvent != nil {
		return json.Marshal(&src.IncidentEventSnoozeIndicatorOperationalEvent)
	}

	if src.IncidentEventUnassignAdministrativeEvent != nil {
		return json.Marshal(&src.IncidentEventUnassignAdministrativeEvent)
	}

	if src.IncidentEventUnassignOperationalEvent != nil {
		return json.Marshal(&src.IncidentEventUnassignOperationalEvent)
	}

	if src.IncidentEventUpsertStateAdministrativeEvent != nil {
		return json.Marshal(&src.IncidentEventUpsertStateAdministrativeEvent)
	}

	if src.IncidentEventUpsertStateOperationalEvent != nil {
		return json.Marshal(&src.IncidentEventUpsertStateOperationalEvent)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IncidentEvent) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IncidentEventAcknowledgeAdministrativeEvent != nil {
		return obj.IncidentEventAcknowledgeAdministrativeEvent
	}

	if obj.IncidentEventAcknowledgeOperationalEvent != nil {
		return obj.IncidentEventAcknowledgeOperationalEvent
	}

	if obj.IncidentEventAssignmentAdministrativeEvent != nil {
		return obj.IncidentEventAssignmentAdministrativeEvent
	}

	if obj.IncidentEventAssignmentOperationalEvent != nil {
		return obj.IncidentEventAssignmentOperationalEvent
	}

	if obj.IncidentEventCloseAdministrativeEvent != nil {
		return obj.IncidentEventCloseAdministrativeEvent
	}

	if obj.IncidentEventCloseOperationalEvent != nil {
		return obj.IncidentEventCloseOperationalEvent
	}

	if obj.IncidentEventSnoozeIndicatorAdministrativeEvent != nil {
		return obj.IncidentEventSnoozeIndicatorAdministrativeEvent
	}

	if obj.IncidentEventSnoozeIndicatorOperationalEvent != nil {
		return obj.IncidentEventSnoozeIndicatorOperationalEvent
	}

	if obj.IncidentEventUnassignAdministrativeEvent != nil {
		return obj.IncidentEventUnassignAdministrativeEvent
	}

	if obj.IncidentEventUnassignOperationalEvent != nil {
		return obj.IncidentEventUnassignOperationalEvent
	}

	if obj.IncidentEventUpsertStateAdministrativeEvent != nil {
		return obj.IncidentEventUpsertStateAdministrativeEvent
	}

	if obj.IncidentEventUpsertStateOperationalEvent != nil {
		return obj.IncidentEventUpsertStateOperationalEvent
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj IncidentEvent) GetActualInstanceValue() (interface{}) {
	if obj.IncidentEventAcknowledgeAdministrativeEvent != nil {
		return *obj.IncidentEventAcknowledgeAdministrativeEvent
	}

	if obj.IncidentEventAcknowledgeOperationalEvent != nil {
		return *obj.IncidentEventAcknowledgeOperationalEvent
	}

	if obj.IncidentEventAssignmentAdministrativeEvent != nil {
		return *obj.IncidentEventAssignmentAdministrativeEvent
	}

	if obj.IncidentEventAssignmentOperationalEvent != nil {
		return *obj.IncidentEventAssignmentOperationalEvent
	}

	if obj.IncidentEventCloseAdministrativeEvent != nil {
		return *obj.IncidentEventCloseAdministrativeEvent
	}

	if obj.IncidentEventCloseOperationalEvent != nil {
		return *obj.IncidentEventCloseOperationalEvent
	}

	if obj.IncidentEventSnoozeIndicatorAdministrativeEvent != nil {
		return *obj.IncidentEventSnoozeIndicatorAdministrativeEvent
	}

	if obj.IncidentEventSnoozeIndicatorOperationalEvent != nil {
		return *obj.IncidentEventSnoozeIndicatorOperationalEvent
	}

	if obj.IncidentEventUnassignAdministrativeEvent != nil {
		return *obj.IncidentEventUnassignAdministrativeEvent
	}

	if obj.IncidentEventUnassignOperationalEvent != nil {
		return *obj.IncidentEventUnassignOperationalEvent
	}

	if obj.IncidentEventUpsertStateAdministrativeEvent != nil {
		return *obj.IncidentEventUpsertStateAdministrativeEvent
	}

	if obj.IncidentEventUpsertStateOperationalEvent != nil {
		return *obj.IncidentEventUpsertStateOperationalEvent
	}

	// all schemas are nil
	return nil
}

type NullableIncidentEvent struct {
	value *IncidentEvent
	isSet bool
}

func (v NullableIncidentEvent) Get() *IncidentEvent {
	return v.value
}

func (v *NullableIncidentEvent) Set(val *IncidentEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentEvent(val *IncidentEvent) *NullableIncidentEvent {
	return &NullableIncidentEvent{value: val, isSet: true}
}

func (v NullableIncidentEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


