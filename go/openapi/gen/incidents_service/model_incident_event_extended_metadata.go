/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
)

// checks if the IncidentEventExtendedMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncidentEventExtendedMetadata{}

// IncidentEventExtendedMetadata struct for IncidentEventExtendedMetadata
type IncidentEventExtendedMetadata struct {
	AlertGroupByFields []string `json:"alertGroupByFields,omitempty"`
	AlertId *string `json:"alertId,omitempty"`
	AlertLabels []IncidentsV1MetaLabel `json:"alertLabels,omitempty"`
	AlertName *string `json:"alertName,omitempty"`
	AlertType *IncidentEventAlertType `json:"alertType,omitempty"`
	IncidentPermutation *map[string]string `json:"incidentPermutation,omitempty"`
	IncidentSeverity *IncidentSeverity `json:"incidentSeverity,omitempty"`
	IncidentState *IncidentState `json:"incidentState,omitempty"`
	IncidentStatus *IncidentStatus `json:"incidentStatus,omitempty"`
	IsMuted *bool `json:"isMuted,omitempty"`
}

// NewIncidentEventExtendedMetadata instantiates a new IncidentEventExtendedMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentEventExtendedMetadata() *IncidentEventExtendedMetadata {
	this := IncidentEventExtendedMetadata{}
	return &this
}

// NewIncidentEventExtendedMetadataWithDefaults instantiates a new IncidentEventExtendedMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentEventExtendedMetadataWithDefaults() *IncidentEventExtendedMetadata {
	this := IncidentEventExtendedMetadata{}
	return &this
}

// GetAlertGroupByFields returns the AlertGroupByFields field value if set, zero value otherwise.
func (o *IncidentEventExtendedMetadata) GetAlertGroupByFields() []string {
	if o == nil || IsNil(o.AlertGroupByFields) {
		var ret []string
		return ret
	}
	return o.AlertGroupByFields
}

// GetAlertGroupByFieldsOk returns a tuple with the AlertGroupByFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentEventExtendedMetadata) GetAlertGroupByFieldsOk() ([]string, bool) {
	if o == nil || IsNil(o.AlertGroupByFields) {
		return nil, false
	}
	return o.AlertGroupByFields, true
}

// HasAlertGroupByFields returns a boolean if a field has been set.
func (o *IncidentEventExtendedMetadata) HasAlertGroupByFields() bool {
	if o != nil && !IsNil(o.AlertGroupByFields) {
		return true
	}

	return false
}

// SetAlertGroupByFields gets a reference to the given []string and assigns it to the AlertGroupByFields field.
func (o *IncidentEventExtendedMetadata) SetAlertGroupByFields(v []string) {
	o.AlertGroupByFields = v
}

// GetAlertId returns the AlertId field value if set, zero value otherwise.
func (o *IncidentEventExtendedMetadata) GetAlertId() string {
	if o == nil || IsNil(o.AlertId) {
		var ret string
		return ret
	}
	return *o.AlertId
}

// GetAlertIdOk returns a tuple with the AlertId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentEventExtendedMetadata) GetAlertIdOk() (*string, bool) {
	if o == nil || IsNil(o.AlertId) {
		return nil, false
	}
	return o.AlertId, true
}

// HasAlertId returns a boolean if a field has been set.
func (o *IncidentEventExtendedMetadata) HasAlertId() bool {
	if o != nil && !IsNil(o.AlertId) {
		return true
	}

	return false
}

// SetAlertId gets a reference to the given string and assigns it to the AlertId field.
func (o *IncidentEventExtendedMetadata) SetAlertId(v string) {
	o.AlertId = &v
}

// GetAlertLabels returns the AlertLabels field value if set, zero value otherwise.
func (o *IncidentEventExtendedMetadata) GetAlertLabels() []IncidentsV1MetaLabel {
	if o == nil || IsNil(o.AlertLabels) {
		var ret []IncidentsV1MetaLabel
		return ret
	}
	return o.AlertLabels
}

// GetAlertLabelsOk returns a tuple with the AlertLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentEventExtendedMetadata) GetAlertLabelsOk() ([]IncidentsV1MetaLabel, bool) {
	if o == nil || IsNil(o.AlertLabels) {
		return nil, false
	}
	return o.AlertLabels, true
}

// HasAlertLabels returns a boolean if a field has been set.
func (o *IncidentEventExtendedMetadata) HasAlertLabels() bool {
	if o != nil && !IsNil(o.AlertLabels) {
		return true
	}

	return false
}

// SetAlertLabels gets a reference to the given []IncidentsV1MetaLabel and assigns it to the AlertLabels field.
func (o *IncidentEventExtendedMetadata) SetAlertLabels(v []IncidentsV1MetaLabel) {
	o.AlertLabels = v
}

// GetAlertName returns the AlertName field value if set, zero value otherwise.
func (o *IncidentEventExtendedMetadata) GetAlertName() string {
	if o == nil || IsNil(o.AlertName) {
		var ret string
		return ret
	}
	return *o.AlertName
}

// GetAlertNameOk returns a tuple with the AlertName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentEventExtendedMetadata) GetAlertNameOk() (*string, bool) {
	if o == nil || IsNil(o.AlertName) {
		return nil, false
	}
	return o.AlertName, true
}

// HasAlertName returns a boolean if a field has been set.
func (o *IncidentEventExtendedMetadata) HasAlertName() bool {
	if o != nil && !IsNil(o.AlertName) {
		return true
	}

	return false
}

// SetAlertName gets a reference to the given string and assigns it to the AlertName field.
func (o *IncidentEventExtendedMetadata) SetAlertName(v string) {
	o.AlertName = &v
}

// GetAlertType returns the AlertType field value if set, zero value otherwise.
func (o *IncidentEventExtendedMetadata) GetAlertType() IncidentEventAlertType {
	if o == nil || IsNil(o.AlertType) {
		var ret IncidentEventAlertType
		return ret
	}
	return *o.AlertType
}

// GetAlertTypeOk returns a tuple with the AlertType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentEventExtendedMetadata) GetAlertTypeOk() (*IncidentEventAlertType, bool) {
	if o == nil || IsNil(o.AlertType) {
		return nil, false
	}
	return o.AlertType, true
}

// HasAlertType returns a boolean if a field has been set.
func (o *IncidentEventExtendedMetadata) HasAlertType() bool {
	if o != nil && !IsNil(o.AlertType) {
		return true
	}

	return false
}

// SetAlertType gets a reference to the given IncidentEventAlertType and assigns it to the AlertType field.
func (o *IncidentEventExtendedMetadata) SetAlertType(v IncidentEventAlertType) {
	o.AlertType = &v
}

// GetIncidentPermutation returns the IncidentPermutation field value if set, zero value otherwise.
func (o *IncidentEventExtendedMetadata) GetIncidentPermutation() map[string]string {
	if o == nil || IsNil(o.IncidentPermutation) {
		var ret map[string]string
		return ret
	}
	return *o.IncidentPermutation
}

// GetIncidentPermutationOk returns a tuple with the IncidentPermutation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentEventExtendedMetadata) GetIncidentPermutationOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.IncidentPermutation) {
		return nil, false
	}
	return o.IncidentPermutation, true
}

// HasIncidentPermutation returns a boolean if a field has been set.
func (o *IncidentEventExtendedMetadata) HasIncidentPermutation() bool {
	if o != nil && !IsNil(o.IncidentPermutation) {
		return true
	}

	return false
}

// SetIncidentPermutation gets a reference to the given map[string]string and assigns it to the IncidentPermutation field.
func (o *IncidentEventExtendedMetadata) SetIncidentPermutation(v map[string]string) {
	o.IncidentPermutation = &v
}

// GetIncidentSeverity returns the IncidentSeverity field value if set, zero value otherwise.
func (o *IncidentEventExtendedMetadata) GetIncidentSeverity() IncidentSeverity {
	if o == nil || IsNil(o.IncidentSeverity) {
		var ret IncidentSeverity
		return ret
	}
	return *o.IncidentSeverity
}

// GetIncidentSeverityOk returns a tuple with the IncidentSeverity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentEventExtendedMetadata) GetIncidentSeverityOk() (*IncidentSeverity, bool) {
	if o == nil || IsNil(o.IncidentSeverity) {
		return nil, false
	}
	return o.IncidentSeverity, true
}

// HasIncidentSeverity returns a boolean if a field has been set.
func (o *IncidentEventExtendedMetadata) HasIncidentSeverity() bool {
	if o != nil && !IsNil(o.IncidentSeverity) {
		return true
	}

	return false
}

// SetIncidentSeverity gets a reference to the given IncidentSeverity and assigns it to the IncidentSeverity field.
func (o *IncidentEventExtendedMetadata) SetIncidentSeverity(v IncidentSeverity) {
	o.IncidentSeverity = &v
}

// GetIncidentState returns the IncidentState field value if set, zero value otherwise.
func (o *IncidentEventExtendedMetadata) GetIncidentState() IncidentState {
	if o == nil || IsNil(o.IncidentState) {
		var ret IncidentState
		return ret
	}
	return *o.IncidentState
}

// GetIncidentStateOk returns a tuple with the IncidentState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentEventExtendedMetadata) GetIncidentStateOk() (*IncidentState, bool) {
	if o == nil || IsNil(o.IncidentState) {
		return nil, false
	}
	return o.IncidentState, true
}

// HasIncidentState returns a boolean if a field has been set.
func (o *IncidentEventExtendedMetadata) HasIncidentState() bool {
	if o != nil && !IsNil(o.IncidentState) {
		return true
	}

	return false
}

// SetIncidentState gets a reference to the given IncidentState and assigns it to the IncidentState field.
func (o *IncidentEventExtendedMetadata) SetIncidentState(v IncidentState) {
	o.IncidentState = &v
}

// GetIncidentStatus returns the IncidentStatus field value if set, zero value otherwise.
func (o *IncidentEventExtendedMetadata) GetIncidentStatus() IncidentStatus {
	if o == nil || IsNil(o.IncidentStatus) {
		var ret IncidentStatus
		return ret
	}
	return *o.IncidentStatus
}

// GetIncidentStatusOk returns a tuple with the IncidentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentEventExtendedMetadata) GetIncidentStatusOk() (*IncidentStatus, bool) {
	if o == nil || IsNil(o.IncidentStatus) {
		return nil, false
	}
	return o.IncidentStatus, true
}

// HasIncidentStatus returns a boolean if a field has been set.
func (o *IncidentEventExtendedMetadata) HasIncidentStatus() bool {
	if o != nil && !IsNil(o.IncidentStatus) {
		return true
	}

	return false
}

// SetIncidentStatus gets a reference to the given IncidentStatus and assigns it to the IncidentStatus field.
func (o *IncidentEventExtendedMetadata) SetIncidentStatus(v IncidentStatus) {
	o.IncidentStatus = &v
}

// GetIsMuted returns the IsMuted field value if set, zero value otherwise.
func (o *IncidentEventExtendedMetadata) GetIsMuted() bool {
	if o == nil || IsNil(o.IsMuted) {
		var ret bool
		return ret
	}
	return *o.IsMuted
}

// GetIsMutedOk returns a tuple with the IsMuted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentEventExtendedMetadata) GetIsMutedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMuted) {
		return nil, false
	}
	return o.IsMuted, true
}

// HasIsMuted returns a boolean if a field has been set.
func (o *IncidentEventExtendedMetadata) HasIsMuted() bool {
	if o != nil && !IsNil(o.IsMuted) {
		return true
	}

	return false
}

// SetIsMuted gets a reference to the given bool and assigns it to the IsMuted field.
func (o *IncidentEventExtendedMetadata) SetIsMuted(v bool) {
	o.IsMuted = &v
}

func (o IncidentEventExtendedMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncidentEventExtendedMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AlertGroupByFields) {
		toSerialize["alertGroupByFields"] = o.AlertGroupByFields
	}
	if !IsNil(o.AlertId) {
		toSerialize["alertId"] = o.AlertId
	}
	if !IsNil(o.AlertLabels) {
		toSerialize["alertLabels"] = o.AlertLabels
	}
	if !IsNil(o.AlertName) {
		toSerialize["alertName"] = o.AlertName
	}
	if !IsNil(o.AlertType) {
		toSerialize["alertType"] = o.AlertType
	}
	if !IsNil(o.IncidentPermutation) {
		toSerialize["incidentPermutation"] = o.IncidentPermutation
	}
	if !IsNil(o.IncidentSeverity) {
		toSerialize["incidentSeverity"] = o.IncidentSeverity
	}
	if !IsNil(o.IncidentState) {
		toSerialize["incidentState"] = o.IncidentState
	}
	if !IsNil(o.IncidentStatus) {
		toSerialize["incidentStatus"] = o.IncidentStatus
	}
	if !IsNil(o.IsMuted) {
		toSerialize["isMuted"] = o.IsMuted
	}
	return toSerialize, nil
}

type NullableIncidentEventExtendedMetadata struct {
	value *IncidentEventExtendedMetadata
	isSet bool
}

func (v NullableIncidentEventExtendedMetadata) Get() *IncidentEventExtendedMetadata {
	return v.value
}

func (v *NullableIncidentEventExtendedMetadata) Set(val *IncidentEventExtendedMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentEventExtendedMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentEventExtendedMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentEventExtendedMetadata(val *IncidentEventExtendedMetadata) *NullableIncidentEventExtendedMetadata {
	return &NullableIncidentEventExtendedMetadata{value: val, isSet: true}
}

func (v NullableIncidentEventExtendedMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentEventExtendedMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


