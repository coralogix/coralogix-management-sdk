/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// IncidentsServiceListIncidentAggregationsGroupBysParameterInner - struct for IncidentsServiceListIncidentAggregationsGroupBysParameterInner
type IncidentsServiceListIncidentAggregationsGroupBysParameterInner struct {
	IncidentGroupBy *IncidentGroupBy
	IncidentGroupBy1 *IncidentGroupBy1
}

// IncidentGroupByAsIncidentsServiceListIncidentAggregationsGroupBysParameterInner is a convenience function that returns IncidentGroupBy wrapped in IncidentsServiceListIncidentAggregationsGroupBysParameterInner
func IncidentGroupByAsIncidentsServiceListIncidentAggregationsGroupBysParameterInner(v *IncidentGroupBy) IncidentsServiceListIncidentAggregationsGroupBysParameterInner {
	return IncidentsServiceListIncidentAggregationsGroupBysParameterInner{
		IncidentGroupBy: v,
	}
}

// IncidentGroupBy1AsIncidentsServiceListIncidentAggregationsGroupBysParameterInner is a convenience function that returns IncidentGroupBy1 wrapped in IncidentsServiceListIncidentAggregationsGroupBysParameterInner
func IncidentGroupBy1AsIncidentsServiceListIncidentAggregationsGroupBysParameterInner(v *IncidentGroupBy1) IncidentsServiceListIncidentAggregationsGroupBysParameterInner {
	return IncidentsServiceListIncidentAggregationsGroupBysParameterInner{
		IncidentGroupBy1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IncidentsServiceListIncidentAggregationsGroupBysParameterInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IncidentGroupBy
	err = newStrictDecoder(data).Decode(&dst.IncidentGroupBy)
	if err == nil {
		jsonIncidentGroupBy, _ := json.Marshal(dst.IncidentGroupBy)
		if string(jsonIncidentGroupBy) == "{}" { // empty struct
			dst.IncidentGroupBy = nil
		} else {
			if err = validator.Validate(dst.IncidentGroupBy); err != nil {
				dst.IncidentGroupBy = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentGroupBy = nil
	}

	// try to unmarshal data into IncidentGroupBy1
	err = newStrictDecoder(data).Decode(&dst.IncidentGroupBy1)
	if err == nil {
		jsonIncidentGroupBy1, _ := json.Marshal(dst.IncidentGroupBy1)
		if string(jsonIncidentGroupBy1) == "{}" { // empty struct
			dst.IncidentGroupBy1 = nil
		} else {
			if err = validator.Validate(dst.IncidentGroupBy1); err != nil {
				dst.IncidentGroupBy1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentGroupBy1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IncidentGroupBy = nil
		dst.IncidentGroupBy1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IncidentsServiceListIncidentAggregationsGroupBysParameterInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IncidentsServiceListIncidentAggregationsGroupBysParameterInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IncidentsServiceListIncidentAggregationsGroupBysParameterInner) MarshalJSON() ([]byte, error) {
	if src.IncidentGroupBy != nil {
		return json.Marshal(&src.IncidentGroupBy)
	}

	if src.IncidentGroupBy1 != nil {
		return json.Marshal(&src.IncidentGroupBy1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IncidentsServiceListIncidentAggregationsGroupBysParameterInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IncidentGroupBy != nil {
		return obj.IncidentGroupBy
	}

	if obj.IncidentGroupBy1 != nil {
		return obj.IncidentGroupBy1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj IncidentsServiceListIncidentAggregationsGroupBysParameterInner) GetActualInstanceValue() (interface{}) {
	if obj.IncidentGroupBy != nil {
		return *obj.IncidentGroupBy
	}

	if obj.IncidentGroupBy1 != nil {
		return *obj.IncidentGroupBy1
	}

	// all schemas are nil
	return nil
}

type NullableIncidentsServiceListIncidentAggregationsGroupBysParameterInner struct {
	value *IncidentsServiceListIncidentAggregationsGroupBysParameterInner
	isSet bool
}

func (v NullableIncidentsServiceListIncidentAggregationsGroupBysParameterInner) Get() *IncidentsServiceListIncidentAggregationsGroupBysParameterInner {
	return v.value
}

func (v *NullableIncidentsServiceListIncidentAggregationsGroupBysParameterInner) Set(val *IncidentsServiceListIncidentAggregationsGroupBysParameterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentsServiceListIncidentAggregationsGroupBysParameterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentsServiceListIncidentAggregationsGroupBysParameterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentsServiceListIncidentAggregationsGroupBysParameterInner(val *IncidentsServiceListIncidentAggregationsGroupBysParameterInner) *NullableIncidentsServiceListIncidentAggregationsGroupBysParameterInner {
	return &NullableIncidentsServiceListIncidentAggregationsGroupBysParameterInner{value: val, isSet: true}
}

func (v NullableIncidentsServiceListIncidentAggregationsGroupBysParameterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentsServiceListIncidentAggregationsGroupBysParameterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


