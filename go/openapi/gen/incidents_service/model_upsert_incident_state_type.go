/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"fmt"
)

// UpsertIncidentStateType the model 'UpsertIncidentStateType'
type UpsertIncidentStateType string

// List of UpsertIncidentStateType
const (
	UPSERTINCIDENTSTATETYPE_UPSERT_INCIDENT_STATE_TYPE_UNSPECIFIED UpsertIncidentStateType = "UPSERT_INCIDENT_STATE_TYPE_UNSPECIFIED"
	UPSERTINCIDENTSTATETYPE_UPSERT_INCIDENT_STATE_TYPE_TRIGGERED UpsertIncidentStateType = "UPSERT_INCIDENT_STATE_TYPE_TRIGGERED"
	UPSERTINCIDENTSTATETYPE_UPSERT_INCIDENT_STATE_TYPE_RESOLVED UpsertIncidentStateType = "UPSERT_INCIDENT_STATE_TYPE_RESOLVED"
)

// All allowed values of UpsertIncidentStateType enum
var AllowedUpsertIncidentStateTypeEnumValues = []UpsertIncidentStateType{
	"UPSERT_INCIDENT_STATE_TYPE_UNSPECIFIED",
	"UPSERT_INCIDENT_STATE_TYPE_TRIGGERED",
	"UPSERT_INCIDENT_STATE_TYPE_RESOLVED",
}

func (v *UpsertIncidentStateType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UpsertIncidentStateType(value)
	for _, existing := range AllowedUpsertIncidentStateTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UpsertIncidentStateType", value)
}

// NewUpsertIncidentStateTypeFromValue returns a pointer to a valid UpsertIncidentStateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUpsertIncidentStateTypeFromValue(v string) (*UpsertIncidentStateType, error) {
	ev := UpsertIncidentStateType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UpsertIncidentStateType: valid values are %v", v, AllowedUpsertIncidentStateTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UpsertIncidentStateType) IsValid() bool {
	for _, existing := range AllowedUpsertIncidentStateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UpsertIncidentStateType value
func (v UpsertIncidentStateType) Ptr() *UpsertIncidentStateType {
	return &v
}

type NullableUpsertIncidentStateType struct {
	value *UpsertIncidentStateType
	isSet bool
}

func (v NullableUpsertIncidentStateType) Get() *UpsertIncidentStateType {
	return v.value
}

func (v *NullableUpsertIncidentStateType) Set(val *UpsertIncidentStateType) {
	v.value = val
	v.isSet = true
}

func (v NullableUpsertIncidentStateType) IsSet() bool {
	return v.isSet
}

func (v *NullableUpsertIncidentStateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpsertIncidentStateType(val *UpsertIncidentStateType) *NullableUpsertIncidentStateType {
	return &NullableUpsertIncidentStateType{value: val, isSet: true}
}

func (v NullableUpsertIncidentStateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpsertIncidentStateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

