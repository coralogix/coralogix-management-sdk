/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Assignment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Assignment{}

// Assignment Details of the user who assigned the incident and the user to whom it was assigned
type Assignment struct {
	AssignedBy UserDetails `json:"assignedBy"`
	AssignedTo UserDetails `json:"assignedTo"`
}

type _Assignment Assignment

// NewAssignment instantiates a new Assignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssignment(assignedBy UserDetails, assignedTo UserDetails) *Assignment {
	this := Assignment{}
	this.AssignedBy = assignedBy
	this.AssignedTo = assignedTo
	return &this
}

// NewAssignmentWithDefaults instantiates a new Assignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssignmentWithDefaults() *Assignment {
	this := Assignment{}
	return &this
}

// GetAssignedBy returns the AssignedBy field value
func (o *Assignment) GetAssignedBy() UserDetails {
	if o == nil {
		var ret UserDetails
		return ret
	}

	return o.AssignedBy
}

// GetAssignedByOk returns a tuple with the AssignedBy field value
// and a boolean to check if the value has been set.
func (o *Assignment) GetAssignedByOk() (*UserDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssignedBy, true
}

// SetAssignedBy sets field value
func (o *Assignment) SetAssignedBy(v UserDetails) {
	o.AssignedBy = v
}

// GetAssignedTo returns the AssignedTo field value
func (o *Assignment) GetAssignedTo() UserDetails {
	if o == nil {
		var ret UserDetails
		return ret
	}

	return o.AssignedTo
}

// GetAssignedToOk returns a tuple with the AssignedTo field value
// and a boolean to check if the value has been set.
func (o *Assignment) GetAssignedToOk() (*UserDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssignedTo, true
}

// SetAssignedTo sets field value
func (o *Assignment) SetAssignedTo(v UserDetails) {
	o.AssignedTo = v
}

func (o Assignment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Assignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assignedBy"] = o.AssignedBy
	toSerialize["assignedTo"] = o.AssignedTo
	return toSerialize, nil
}

func (o *Assignment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assignedBy",
		"assignedTo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssignment := _Assignment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssignment)

	if err != nil {
		return err
	}

	*o = Assignment(varAssignment)

	return err
}

type NullableAssignment struct {
	value *Assignment
	isSet bool
}

func (v NullableAssignment) Get() *Assignment {
	return v.value
}

func (v *NullableAssignment) Set(val *Assignment) {
	v.value = val
	v.isSet = true
}

func (v NullableAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssignment(val *Assignment) *NullableAssignment {
	return &NullableAssignment{value: val, isSet: true}
}

func (v NullableAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


