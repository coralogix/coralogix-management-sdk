/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// IncidentFieldOneOf - struct for IncidentFieldOneOf
type IncidentFieldOneOf struct {
	IncidentFieldOneOfApplicationName *IncidentFieldOneOfApplicationName
	IncidentFieldOneOfClosedAt *IncidentFieldOneOfClosedAt
	IncidentFieldOneOfCreatedAt *IncidentFieldOneOfCreatedAt
	IncidentFieldOneOfDuration *IncidentFieldOneOfDuration
	IncidentFieldOneOfId *IncidentFieldOneOfId
	IncidentFieldOneOfLastStateUpdateTime *IncidentFieldOneOfLastStateUpdateTime
	IncidentFieldOneOfName *IncidentFieldOneOfName
	IncidentFieldOneOfSeverity *IncidentFieldOneOfSeverity
	IncidentFieldOneOfState *IncidentFieldOneOfState
	IncidentFieldOneOfStatus *IncidentFieldOneOfStatus
	IncidentFieldOneOfSubsystemName *IncidentFieldOneOfSubsystemName
}

// IncidentFieldOneOfApplicationNameAsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfApplicationName wrapped in IncidentFieldOneOf
func IncidentFieldOneOfApplicationNameAsIncidentFieldOneOf(v *IncidentFieldOneOfApplicationName) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfApplicationName: v,
	}
}

// IncidentFieldOneOfClosedAtAsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfClosedAt wrapped in IncidentFieldOneOf
func IncidentFieldOneOfClosedAtAsIncidentFieldOneOf(v *IncidentFieldOneOfClosedAt) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfClosedAt: v,
	}
}

// IncidentFieldOneOfCreatedAtAsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfCreatedAt wrapped in IncidentFieldOneOf
func IncidentFieldOneOfCreatedAtAsIncidentFieldOneOf(v *IncidentFieldOneOfCreatedAt) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfCreatedAt: v,
	}
}

// IncidentFieldOneOfDurationAsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfDuration wrapped in IncidentFieldOneOf
func IncidentFieldOneOfDurationAsIncidentFieldOneOf(v *IncidentFieldOneOfDuration) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfDuration: v,
	}
}

// IncidentFieldOneOfIdAsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfId wrapped in IncidentFieldOneOf
func IncidentFieldOneOfIdAsIncidentFieldOneOf(v *IncidentFieldOneOfId) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfId: v,
	}
}

// IncidentFieldOneOfLastStateUpdateTimeAsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfLastStateUpdateTime wrapped in IncidentFieldOneOf
func IncidentFieldOneOfLastStateUpdateTimeAsIncidentFieldOneOf(v *IncidentFieldOneOfLastStateUpdateTime) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfLastStateUpdateTime: v,
	}
}

// IncidentFieldOneOfNameAsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfName wrapped in IncidentFieldOneOf
func IncidentFieldOneOfNameAsIncidentFieldOneOf(v *IncidentFieldOneOfName) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfName: v,
	}
}

// IncidentFieldOneOfSeverityAsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfSeverity wrapped in IncidentFieldOneOf
func IncidentFieldOneOfSeverityAsIncidentFieldOneOf(v *IncidentFieldOneOfSeverity) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfSeverity: v,
	}
}

// IncidentFieldOneOfStateAsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfState wrapped in IncidentFieldOneOf
func IncidentFieldOneOfStateAsIncidentFieldOneOf(v *IncidentFieldOneOfState) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfState: v,
	}
}

// IncidentFieldOneOfStatusAsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfStatus wrapped in IncidentFieldOneOf
func IncidentFieldOneOfStatusAsIncidentFieldOneOf(v *IncidentFieldOneOfStatus) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfStatus: v,
	}
}

// IncidentFieldOneOfSubsystemNameAsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfSubsystemName wrapped in IncidentFieldOneOf
func IncidentFieldOneOfSubsystemNameAsIncidentFieldOneOf(v *IncidentFieldOneOfSubsystemName) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfSubsystemName: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IncidentFieldOneOf) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IncidentFieldOneOfApplicationName
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfApplicationName)
	if err == nil {
		jsonIncidentFieldOneOfApplicationName, _ := json.Marshal(dst.IncidentFieldOneOfApplicationName)
		if string(jsonIncidentFieldOneOfApplicationName) == "{}" { // empty struct
			dst.IncidentFieldOneOfApplicationName = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfApplicationName); err != nil {
				dst.IncidentFieldOneOfApplicationName = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfApplicationName = nil
	}

	// try to unmarshal data into IncidentFieldOneOfClosedAt
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfClosedAt)
	if err == nil {
		jsonIncidentFieldOneOfClosedAt, _ := json.Marshal(dst.IncidentFieldOneOfClosedAt)
		if string(jsonIncidentFieldOneOfClosedAt) == "{}" { // empty struct
			dst.IncidentFieldOneOfClosedAt = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfClosedAt); err != nil {
				dst.IncidentFieldOneOfClosedAt = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfClosedAt = nil
	}

	// try to unmarshal data into IncidentFieldOneOfCreatedAt
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfCreatedAt)
	if err == nil {
		jsonIncidentFieldOneOfCreatedAt, _ := json.Marshal(dst.IncidentFieldOneOfCreatedAt)
		if string(jsonIncidentFieldOneOfCreatedAt) == "{}" { // empty struct
			dst.IncidentFieldOneOfCreatedAt = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfCreatedAt); err != nil {
				dst.IncidentFieldOneOfCreatedAt = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfCreatedAt = nil
	}

	// try to unmarshal data into IncidentFieldOneOfDuration
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfDuration)
	if err == nil {
		jsonIncidentFieldOneOfDuration, _ := json.Marshal(dst.IncidentFieldOneOfDuration)
		if string(jsonIncidentFieldOneOfDuration) == "{}" { // empty struct
			dst.IncidentFieldOneOfDuration = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfDuration); err != nil {
				dst.IncidentFieldOneOfDuration = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfDuration = nil
	}

	// try to unmarshal data into IncidentFieldOneOfId
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfId)
	if err == nil {
		jsonIncidentFieldOneOfId, _ := json.Marshal(dst.IncidentFieldOneOfId)
		if string(jsonIncidentFieldOneOfId) == "{}" { // empty struct
			dst.IncidentFieldOneOfId = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfId); err != nil {
				dst.IncidentFieldOneOfId = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfId = nil
	}

	// try to unmarshal data into IncidentFieldOneOfLastStateUpdateTime
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfLastStateUpdateTime)
	if err == nil {
		jsonIncidentFieldOneOfLastStateUpdateTime, _ := json.Marshal(dst.IncidentFieldOneOfLastStateUpdateTime)
		if string(jsonIncidentFieldOneOfLastStateUpdateTime) == "{}" { // empty struct
			dst.IncidentFieldOneOfLastStateUpdateTime = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfLastStateUpdateTime); err != nil {
				dst.IncidentFieldOneOfLastStateUpdateTime = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfLastStateUpdateTime = nil
	}

	// try to unmarshal data into IncidentFieldOneOfName
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfName)
	if err == nil {
		jsonIncidentFieldOneOfName, _ := json.Marshal(dst.IncidentFieldOneOfName)
		if string(jsonIncidentFieldOneOfName) == "{}" { // empty struct
			dst.IncidentFieldOneOfName = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfName); err != nil {
				dst.IncidentFieldOneOfName = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfName = nil
	}

	// try to unmarshal data into IncidentFieldOneOfSeverity
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfSeverity)
	if err == nil {
		jsonIncidentFieldOneOfSeverity, _ := json.Marshal(dst.IncidentFieldOneOfSeverity)
		if string(jsonIncidentFieldOneOfSeverity) == "{}" { // empty struct
			dst.IncidentFieldOneOfSeverity = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfSeverity); err != nil {
				dst.IncidentFieldOneOfSeverity = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfSeverity = nil
	}

	// try to unmarshal data into IncidentFieldOneOfState
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfState)
	if err == nil {
		jsonIncidentFieldOneOfState, _ := json.Marshal(dst.IncidentFieldOneOfState)
		if string(jsonIncidentFieldOneOfState) == "{}" { // empty struct
			dst.IncidentFieldOneOfState = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfState); err != nil {
				dst.IncidentFieldOneOfState = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfState = nil
	}

	// try to unmarshal data into IncidentFieldOneOfStatus
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfStatus)
	if err == nil {
		jsonIncidentFieldOneOfStatus, _ := json.Marshal(dst.IncidentFieldOneOfStatus)
		if string(jsonIncidentFieldOneOfStatus) == "{}" { // empty struct
			dst.IncidentFieldOneOfStatus = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfStatus); err != nil {
				dst.IncidentFieldOneOfStatus = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfStatus = nil
	}

	// try to unmarshal data into IncidentFieldOneOfSubsystemName
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfSubsystemName)
	if err == nil {
		jsonIncidentFieldOneOfSubsystemName, _ := json.Marshal(dst.IncidentFieldOneOfSubsystemName)
		if string(jsonIncidentFieldOneOfSubsystemName) == "{}" { // empty struct
			dst.IncidentFieldOneOfSubsystemName = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfSubsystemName); err != nil {
				dst.IncidentFieldOneOfSubsystemName = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfSubsystemName = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IncidentFieldOneOfApplicationName = nil
		dst.IncidentFieldOneOfClosedAt = nil
		dst.IncidentFieldOneOfCreatedAt = nil
		dst.IncidentFieldOneOfDuration = nil
		dst.IncidentFieldOneOfId = nil
		dst.IncidentFieldOneOfLastStateUpdateTime = nil
		dst.IncidentFieldOneOfName = nil
		dst.IncidentFieldOneOfSeverity = nil
		dst.IncidentFieldOneOfState = nil
		dst.IncidentFieldOneOfStatus = nil
		dst.IncidentFieldOneOfSubsystemName = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IncidentFieldOneOf)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IncidentFieldOneOf)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IncidentFieldOneOf) MarshalJSON() ([]byte, error) {
	if src.IncidentFieldOneOfApplicationName != nil {
		return json.Marshal(&src.IncidentFieldOneOfApplicationName)
	}

	if src.IncidentFieldOneOfClosedAt != nil {
		return json.Marshal(&src.IncidentFieldOneOfClosedAt)
	}

	if src.IncidentFieldOneOfCreatedAt != nil {
		return json.Marshal(&src.IncidentFieldOneOfCreatedAt)
	}

	if src.IncidentFieldOneOfDuration != nil {
		return json.Marshal(&src.IncidentFieldOneOfDuration)
	}

	if src.IncidentFieldOneOfId != nil {
		return json.Marshal(&src.IncidentFieldOneOfId)
	}

	if src.IncidentFieldOneOfLastStateUpdateTime != nil {
		return json.Marshal(&src.IncidentFieldOneOfLastStateUpdateTime)
	}

	if src.IncidentFieldOneOfName != nil {
		return json.Marshal(&src.IncidentFieldOneOfName)
	}

	if src.IncidentFieldOneOfSeverity != nil {
		return json.Marshal(&src.IncidentFieldOneOfSeverity)
	}

	if src.IncidentFieldOneOfState != nil {
		return json.Marshal(&src.IncidentFieldOneOfState)
	}

	if src.IncidentFieldOneOfStatus != nil {
		return json.Marshal(&src.IncidentFieldOneOfStatus)
	}

	if src.IncidentFieldOneOfSubsystemName != nil {
		return json.Marshal(&src.IncidentFieldOneOfSubsystemName)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IncidentFieldOneOf) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IncidentFieldOneOfApplicationName != nil {
		return obj.IncidentFieldOneOfApplicationName
	}

	if obj.IncidentFieldOneOfClosedAt != nil {
		return obj.IncidentFieldOneOfClosedAt
	}

	if obj.IncidentFieldOneOfCreatedAt != nil {
		return obj.IncidentFieldOneOfCreatedAt
	}

	if obj.IncidentFieldOneOfDuration != nil {
		return obj.IncidentFieldOneOfDuration
	}

	if obj.IncidentFieldOneOfId != nil {
		return obj.IncidentFieldOneOfId
	}

	if obj.IncidentFieldOneOfLastStateUpdateTime != nil {
		return obj.IncidentFieldOneOfLastStateUpdateTime
	}

	if obj.IncidentFieldOneOfName != nil {
		return obj.IncidentFieldOneOfName
	}

	if obj.IncidentFieldOneOfSeverity != nil {
		return obj.IncidentFieldOneOfSeverity
	}

	if obj.IncidentFieldOneOfState != nil {
		return obj.IncidentFieldOneOfState
	}

	if obj.IncidentFieldOneOfStatus != nil {
		return obj.IncidentFieldOneOfStatus
	}

	if obj.IncidentFieldOneOfSubsystemName != nil {
		return obj.IncidentFieldOneOfSubsystemName
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj IncidentFieldOneOf) GetActualInstanceValue() (interface{}) {
	if obj.IncidentFieldOneOfApplicationName != nil {
		return *obj.IncidentFieldOneOfApplicationName
	}

	if obj.IncidentFieldOneOfClosedAt != nil {
		return *obj.IncidentFieldOneOfClosedAt
	}

	if obj.IncidentFieldOneOfCreatedAt != nil {
		return *obj.IncidentFieldOneOfCreatedAt
	}

	if obj.IncidentFieldOneOfDuration != nil {
		return *obj.IncidentFieldOneOfDuration
	}

	if obj.IncidentFieldOneOfId != nil {
		return *obj.IncidentFieldOneOfId
	}

	if obj.IncidentFieldOneOfLastStateUpdateTime != nil {
		return *obj.IncidentFieldOneOfLastStateUpdateTime
	}

	if obj.IncidentFieldOneOfName != nil {
		return *obj.IncidentFieldOneOfName
	}

	if obj.IncidentFieldOneOfSeverity != nil {
		return *obj.IncidentFieldOneOfSeverity
	}

	if obj.IncidentFieldOneOfState != nil {
		return *obj.IncidentFieldOneOfState
	}

	if obj.IncidentFieldOneOfStatus != nil {
		return *obj.IncidentFieldOneOfStatus
	}

	if obj.IncidentFieldOneOfSubsystemName != nil {
		return *obj.IncidentFieldOneOfSubsystemName
	}

	// all schemas are nil
	return nil
}

type NullableIncidentFieldOneOf struct {
	value *IncidentFieldOneOf
	isSet bool
}

func (v NullableIncidentFieldOneOf) Get() *IncidentFieldOneOf {
	return v.value
}

func (v *NullableIncidentFieldOneOf) Set(val *IncidentFieldOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentFieldOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentFieldOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentFieldOneOf(val *IncidentFieldOneOf) *NullableIncidentFieldOneOf {
	return &NullableIncidentFieldOneOf{value: val, isSet: true}
}

func (v NullableIncidentFieldOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentFieldOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


