/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// IncidentFieldOneOf - struct for IncidentFieldOneOf
type IncidentFieldOneOf struct {
	IncidentFieldOneOfOneOf *IncidentFieldOneOfOneOf
	IncidentFieldOneOfOneOf1 *IncidentFieldOneOfOneOf1
	IncidentFieldOneOfOneOf10 *IncidentFieldOneOfOneOf10
	IncidentFieldOneOfOneOf2 *IncidentFieldOneOfOneOf2
	IncidentFieldOneOfOneOf3 *IncidentFieldOneOfOneOf3
	IncidentFieldOneOfOneOf4 *IncidentFieldOneOfOneOf4
	IncidentFieldOneOfOneOf5 *IncidentFieldOneOfOneOf5
	IncidentFieldOneOfOneOf6 *IncidentFieldOneOfOneOf6
	IncidentFieldOneOfOneOf7 *IncidentFieldOneOfOneOf7
	IncidentFieldOneOfOneOf8 *IncidentFieldOneOfOneOf8
	IncidentFieldOneOfOneOf9 *IncidentFieldOneOfOneOf9
}

// IncidentFieldOneOfOneOfAsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfOneOf wrapped in IncidentFieldOneOf
func IncidentFieldOneOfOneOfAsIncidentFieldOneOf(v *IncidentFieldOneOfOneOf) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfOneOf: v,
	}
}

// IncidentFieldOneOfOneOf1AsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfOneOf1 wrapped in IncidentFieldOneOf
func IncidentFieldOneOfOneOf1AsIncidentFieldOneOf(v *IncidentFieldOneOfOneOf1) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfOneOf1: v,
	}
}

// IncidentFieldOneOfOneOf10AsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfOneOf10 wrapped in IncidentFieldOneOf
func IncidentFieldOneOfOneOf10AsIncidentFieldOneOf(v *IncidentFieldOneOfOneOf10) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfOneOf10: v,
	}
}

// IncidentFieldOneOfOneOf2AsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfOneOf2 wrapped in IncidentFieldOneOf
func IncidentFieldOneOfOneOf2AsIncidentFieldOneOf(v *IncidentFieldOneOfOneOf2) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfOneOf2: v,
	}
}

// IncidentFieldOneOfOneOf3AsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfOneOf3 wrapped in IncidentFieldOneOf
func IncidentFieldOneOfOneOf3AsIncidentFieldOneOf(v *IncidentFieldOneOfOneOf3) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfOneOf3: v,
	}
}

// IncidentFieldOneOfOneOf4AsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfOneOf4 wrapped in IncidentFieldOneOf
func IncidentFieldOneOfOneOf4AsIncidentFieldOneOf(v *IncidentFieldOneOfOneOf4) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfOneOf4: v,
	}
}

// IncidentFieldOneOfOneOf5AsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfOneOf5 wrapped in IncidentFieldOneOf
func IncidentFieldOneOfOneOf5AsIncidentFieldOneOf(v *IncidentFieldOneOfOneOf5) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfOneOf5: v,
	}
}

// IncidentFieldOneOfOneOf6AsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfOneOf6 wrapped in IncidentFieldOneOf
func IncidentFieldOneOfOneOf6AsIncidentFieldOneOf(v *IncidentFieldOneOfOneOf6) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfOneOf6: v,
	}
}

// IncidentFieldOneOfOneOf7AsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfOneOf7 wrapped in IncidentFieldOneOf
func IncidentFieldOneOfOneOf7AsIncidentFieldOneOf(v *IncidentFieldOneOfOneOf7) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfOneOf7: v,
	}
}

// IncidentFieldOneOfOneOf8AsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfOneOf8 wrapped in IncidentFieldOneOf
func IncidentFieldOneOfOneOf8AsIncidentFieldOneOf(v *IncidentFieldOneOfOneOf8) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfOneOf8: v,
	}
}

// IncidentFieldOneOfOneOf9AsIncidentFieldOneOf is a convenience function that returns IncidentFieldOneOfOneOf9 wrapped in IncidentFieldOneOf
func IncidentFieldOneOfOneOf9AsIncidentFieldOneOf(v *IncidentFieldOneOfOneOf9) IncidentFieldOneOf {
	return IncidentFieldOneOf{
		IncidentFieldOneOfOneOf9: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IncidentFieldOneOf) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IncidentFieldOneOfOneOf
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfOneOf)
	if err == nil {
		jsonIncidentFieldOneOfOneOf, _ := json.Marshal(dst.IncidentFieldOneOfOneOf)
		if string(jsonIncidentFieldOneOfOneOf) == "{}" { // empty struct
			dst.IncidentFieldOneOfOneOf = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfOneOf); err != nil {
				dst.IncidentFieldOneOfOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfOneOf = nil
	}

	// try to unmarshal data into IncidentFieldOneOfOneOf1
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfOneOf1)
	if err == nil {
		jsonIncidentFieldOneOfOneOf1, _ := json.Marshal(dst.IncidentFieldOneOfOneOf1)
		if string(jsonIncidentFieldOneOfOneOf1) == "{}" { // empty struct
			dst.IncidentFieldOneOfOneOf1 = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfOneOf1); err != nil {
				dst.IncidentFieldOneOfOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfOneOf1 = nil
	}

	// try to unmarshal data into IncidentFieldOneOfOneOf10
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfOneOf10)
	if err == nil {
		jsonIncidentFieldOneOfOneOf10, _ := json.Marshal(dst.IncidentFieldOneOfOneOf10)
		if string(jsonIncidentFieldOneOfOneOf10) == "{}" { // empty struct
			dst.IncidentFieldOneOfOneOf10 = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfOneOf10); err != nil {
				dst.IncidentFieldOneOfOneOf10 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfOneOf10 = nil
	}

	// try to unmarshal data into IncidentFieldOneOfOneOf2
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfOneOf2)
	if err == nil {
		jsonIncidentFieldOneOfOneOf2, _ := json.Marshal(dst.IncidentFieldOneOfOneOf2)
		if string(jsonIncidentFieldOneOfOneOf2) == "{}" { // empty struct
			dst.IncidentFieldOneOfOneOf2 = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfOneOf2); err != nil {
				dst.IncidentFieldOneOfOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfOneOf2 = nil
	}

	// try to unmarshal data into IncidentFieldOneOfOneOf3
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfOneOf3)
	if err == nil {
		jsonIncidentFieldOneOfOneOf3, _ := json.Marshal(dst.IncidentFieldOneOfOneOf3)
		if string(jsonIncidentFieldOneOfOneOf3) == "{}" { // empty struct
			dst.IncidentFieldOneOfOneOf3 = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfOneOf3); err != nil {
				dst.IncidentFieldOneOfOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfOneOf3 = nil
	}

	// try to unmarshal data into IncidentFieldOneOfOneOf4
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfOneOf4)
	if err == nil {
		jsonIncidentFieldOneOfOneOf4, _ := json.Marshal(dst.IncidentFieldOneOfOneOf4)
		if string(jsonIncidentFieldOneOfOneOf4) == "{}" { // empty struct
			dst.IncidentFieldOneOfOneOf4 = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfOneOf4); err != nil {
				dst.IncidentFieldOneOfOneOf4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfOneOf4 = nil
	}

	// try to unmarshal data into IncidentFieldOneOfOneOf5
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfOneOf5)
	if err == nil {
		jsonIncidentFieldOneOfOneOf5, _ := json.Marshal(dst.IncidentFieldOneOfOneOf5)
		if string(jsonIncidentFieldOneOfOneOf5) == "{}" { // empty struct
			dst.IncidentFieldOneOfOneOf5 = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfOneOf5); err != nil {
				dst.IncidentFieldOneOfOneOf5 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfOneOf5 = nil
	}

	// try to unmarshal data into IncidentFieldOneOfOneOf6
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfOneOf6)
	if err == nil {
		jsonIncidentFieldOneOfOneOf6, _ := json.Marshal(dst.IncidentFieldOneOfOneOf6)
		if string(jsonIncidentFieldOneOfOneOf6) == "{}" { // empty struct
			dst.IncidentFieldOneOfOneOf6 = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfOneOf6); err != nil {
				dst.IncidentFieldOneOfOneOf6 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfOneOf6 = nil
	}

	// try to unmarshal data into IncidentFieldOneOfOneOf7
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfOneOf7)
	if err == nil {
		jsonIncidentFieldOneOfOneOf7, _ := json.Marshal(dst.IncidentFieldOneOfOneOf7)
		if string(jsonIncidentFieldOneOfOneOf7) == "{}" { // empty struct
			dst.IncidentFieldOneOfOneOf7 = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfOneOf7); err != nil {
				dst.IncidentFieldOneOfOneOf7 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfOneOf7 = nil
	}

	// try to unmarshal data into IncidentFieldOneOfOneOf8
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfOneOf8)
	if err == nil {
		jsonIncidentFieldOneOfOneOf8, _ := json.Marshal(dst.IncidentFieldOneOfOneOf8)
		if string(jsonIncidentFieldOneOfOneOf8) == "{}" { // empty struct
			dst.IncidentFieldOneOfOneOf8 = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfOneOf8); err != nil {
				dst.IncidentFieldOneOfOneOf8 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfOneOf8 = nil
	}

	// try to unmarshal data into IncidentFieldOneOfOneOf9
	err = newStrictDecoder(data).Decode(&dst.IncidentFieldOneOfOneOf9)
	if err == nil {
		jsonIncidentFieldOneOfOneOf9, _ := json.Marshal(dst.IncidentFieldOneOfOneOf9)
		if string(jsonIncidentFieldOneOfOneOf9) == "{}" { // empty struct
			dst.IncidentFieldOneOfOneOf9 = nil
		} else {
			if err = validator.Validate(dst.IncidentFieldOneOfOneOf9); err != nil {
				dst.IncidentFieldOneOfOneOf9 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncidentFieldOneOfOneOf9 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IncidentFieldOneOfOneOf = nil
		dst.IncidentFieldOneOfOneOf1 = nil
		dst.IncidentFieldOneOfOneOf10 = nil
		dst.IncidentFieldOneOfOneOf2 = nil
		dst.IncidentFieldOneOfOneOf3 = nil
		dst.IncidentFieldOneOfOneOf4 = nil
		dst.IncidentFieldOneOfOneOf5 = nil
		dst.IncidentFieldOneOfOneOf6 = nil
		dst.IncidentFieldOneOfOneOf7 = nil
		dst.IncidentFieldOneOfOneOf8 = nil
		dst.IncidentFieldOneOfOneOf9 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IncidentFieldOneOf)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IncidentFieldOneOf)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IncidentFieldOneOf) MarshalJSON() ([]byte, error) {
	if src.IncidentFieldOneOfOneOf != nil {
		return json.Marshal(&src.IncidentFieldOneOfOneOf)
	}

	if src.IncidentFieldOneOfOneOf1 != nil {
		return json.Marshal(&src.IncidentFieldOneOfOneOf1)
	}

	if src.IncidentFieldOneOfOneOf10 != nil {
		return json.Marshal(&src.IncidentFieldOneOfOneOf10)
	}

	if src.IncidentFieldOneOfOneOf2 != nil {
		return json.Marshal(&src.IncidentFieldOneOfOneOf2)
	}

	if src.IncidentFieldOneOfOneOf3 != nil {
		return json.Marshal(&src.IncidentFieldOneOfOneOf3)
	}

	if src.IncidentFieldOneOfOneOf4 != nil {
		return json.Marshal(&src.IncidentFieldOneOfOneOf4)
	}

	if src.IncidentFieldOneOfOneOf5 != nil {
		return json.Marshal(&src.IncidentFieldOneOfOneOf5)
	}

	if src.IncidentFieldOneOfOneOf6 != nil {
		return json.Marshal(&src.IncidentFieldOneOfOneOf6)
	}

	if src.IncidentFieldOneOfOneOf7 != nil {
		return json.Marshal(&src.IncidentFieldOneOfOneOf7)
	}

	if src.IncidentFieldOneOfOneOf8 != nil {
		return json.Marshal(&src.IncidentFieldOneOfOneOf8)
	}

	if src.IncidentFieldOneOfOneOf9 != nil {
		return json.Marshal(&src.IncidentFieldOneOfOneOf9)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IncidentFieldOneOf) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IncidentFieldOneOfOneOf != nil {
		return obj.IncidentFieldOneOfOneOf
	}

	if obj.IncidentFieldOneOfOneOf1 != nil {
		return obj.IncidentFieldOneOfOneOf1
	}

	if obj.IncidentFieldOneOfOneOf10 != nil {
		return obj.IncidentFieldOneOfOneOf10
	}

	if obj.IncidentFieldOneOfOneOf2 != nil {
		return obj.IncidentFieldOneOfOneOf2
	}

	if obj.IncidentFieldOneOfOneOf3 != nil {
		return obj.IncidentFieldOneOfOneOf3
	}

	if obj.IncidentFieldOneOfOneOf4 != nil {
		return obj.IncidentFieldOneOfOneOf4
	}

	if obj.IncidentFieldOneOfOneOf5 != nil {
		return obj.IncidentFieldOneOfOneOf5
	}

	if obj.IncidentFieldOneOfOneOf6 != nil {
		return obj.IncidentFieldOneOfOneOf6
	}

	if obj.IncidentFieldOneOfOneOf7 != nil {
		return obj.IncidentFieldOneOfOneOf7
	}

	if obj.IncidentFieldOneOfOneOf8 != nil {
		return obj.IncidentFieldOneOfOneOf8
	}

	if obj.IncidentFieldOneOfOneOf9 != nil {
		return obj.IncidentFieldOneOfOneOf9
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj IncidentFieldOneOf) GetActualInstanceValue() (interface{}) {
	if obj.IncidentFieldOneOfOneOf != nil {
		return *obj.IncidentFieldOneOfOneOf
	}

	if obj.IncidentFieldOneOfOneOf1 != nil {
		return *obj.IncidentFieldOneOfOneOf1
	}

	if obj.IncidentFieldOneOfOneOf10 != nil {
		return *obj.IncidentFieldOneOfOneOf10
	}

	if obj.IncidentFieldOneOfOneOf2 != nil {
		return *obj.IncidentFieldOneOfOneOf2
	}

	if obj.IncidentFieldOneOfOneOf3 != nil {
		return *obj.IncidentFieldOneOfOneOf3
	}

	if obj.IncidentFieldOneOfOneOf4 != nil {
		return *obj.IncidentFieldOneOfOneOf4
	}

	if obj.IncidentFieldOneOfOneOf5 != nil {
		return *obj.IncidentFieldOneOfOneOf5
	}

	if obj.IncidentFieldOneOfOneOf6 != nil {
		return *obj.IncidentFieldOneOfOneOf6
	}

	if obj.IncidentFieldOneOfOneOf7 != nil {
		return *obj.IncidentFieldOneOfOneOf7
	}

	if obj.IncidentFieldOneOfOneOf8 != nil {
		return *obj.IncidentFieldOneOfOneOf8
	}

	if obj.IncidentFieldOneOfOneOf9 != nil {
		return *obj.IncidentFieldOneOfOneOf9
	}

	// all schemas are nil
	return nil
}

type NullableIncidentFieldOneOf struct {
	value *IncidentFieldOneOf
	isSet bool
}

func (v NullableIncidentFieldOneOf) Get() *IncidentFieldOneOf {
	return v.value
}

func (v *NullableIncidentFieldOneOf) Set(val *IncidentFieldOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentFieldOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentFieldOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentFieldOneOf(val *IncidentFieldOneOf) *NullableIncidentFieldOneOf {
	return &NullableIncidentFieldOneOf{value: val, isSet: true}
}

func (v NullableIncidentFieldOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentFieldOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


