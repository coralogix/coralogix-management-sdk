/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
)

// checks if the UpsertIncidentStatePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpsertIncidentStatePayload{}

// UpsertIncidentStatePayload struct for UpsertIncidentStatePayload
type UpsertIncidentStatePayload struct {
	CxEventKey *string `json:"cxEventKey,omitempty"`
}

// NewUpsertIncidentStatePayload instantiates a new UpsertIncidentStatePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpsertIncidentStatePayload() *UpsertIncidentStatePayload {
	this := UpsertIncidentStatePayload{}
	return &this
}

// NewUpsertIncidentStatePayloadWithDefaults instantiates a new UpsertIncidentStatePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpsertIncidentStatePayloadWithDefaults() *UpsertIncidentStatePayload {
	this := UpsertIncidentStatePayload{}
	return &this
}

// GetCxEventKey returns the CxEventKey field value if set, zero value otherwise.
func (o *UpsertIncidentStatePayload) GetCxEventKey() string {
	if o == nil || IsNil(o.CxEventKey) {
		var ret string
		return ret
	}
	return *o.CxEventKey
}

// GetCxEventKeyOk returns a tuple with the CxEventKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertIncidentStatePayload) GetCxEventKeyOk() (*string, bool) {
	if o == nil || IsNil(o.CxEventKey) {
		return nil, false
	}
	return o.CxEventKey, true
}

// HasCxEventKey returns a boolean if a field has been set.
func (o *UpsertIncidentStatePayload) HasCxEventKey() bool {
	if o != nil && !IsNil(o.CxEventKey) {
		return true
	}

	return false
}

// SetCxEventKey gets a reference to the given string and assigns it to the CxEventKey field.
func (o *UpsertIncidentStatePayload) SetCxEventKey(v string) {
	o.CxEventKey = &v
}

func (o UpsertIncidentStatePayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpsertIncidentStatePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CxEventKey) {
		toSerialize["cxEventKey"] = o.CxEventKey
	}
	return toSerialize, nil
}

type NullableUpsertIncidentStatePayload struct {
	value *UpsertIncidentStatePayload
	isSet bool
}

func (v NullableUpsertIncidentStatePayload) Get() *UpsertIncidentStatePayload {
	return v.value
}

func (v *NullableUpsertIncidentStatePayload) Set(val *UpsertIncidentStatePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableUpsertIncidentStatePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableUpsertIncidentStatePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpsertIncidentStatePayload(val *UpsertIncidentStatePayload) *NullableUpsertIncidentStatePayload {
	return &NullableUpsertIncidentStatePayload{value: val, isSet: true}
}

func (v NullableUpsertIncidentStatePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpsertIncidentStatePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


