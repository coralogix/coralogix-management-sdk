/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
)

// checks if the GroupByValuesOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupByValuesOneOf1{}

// GroupByValuesOneOf1 struct for GroupByValuesOneOf1
type GroupByValuesOneOf1 struct {
	ContextualLabels *ContextualLabels `json:"contextualLabels,omitempty"`
}

// NewGroupByValuesOneOf1 instantiates a new GroupByValuesOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupByValuesOneOf1() *GroupByValuesOneOf1 {
	this := GroupByValuesOneOf1{}
	return &this
}

// NewGroupByValuesOneOf1WithDefaults instantiates a new GroupByValuesOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupByValuesOneOf1WithDefaults() *GroupByValuesOneOf1 {
	this := GroupByValuesOneOf1{}
	return &this
}

// GetContextualLabels returns the ContextualLabels field value if set, zero value otherwise.
func (o *GroupByValuesOneOf1) GetContextualLabels() ContextualLabels {
	if o == nil || IsNil(o.ContextualLabels) {
		var ret ContextualLabels
		return ret
	}
	return *o.ContextualLabels
}

// GetContextualLabelsOk returns a tuple with the ContextualLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupByValuesOneOf1) GetContextualLabelsOk() (*ContextualLabels, bool) {
	if o == nil || IsNil(o.ContextualLabels) {
		return nil, false
	}
	return o.ContextualLabels, true
}

// HasContextualLabels returns a boolean if a field has been set.
func (o *GroupByValuesOneOf1) HasContextualLabels() bool {
	if o != nil && !IsNil(o.ContextualLabels) {
		return true
	}

	return false
}

// SetContextualLabels gets a reference to the given ContextualLabels and assigns it to the ContextualLabels field.
func (o *GroupByValuesOneOf1) SetContextualLabels(v ContextualLabels) {
	o.ContextualLabels = &v
}

func (o GroupByValuesOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupByValuesOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContextualLabels) {
		toSerialize["contextualLabels"] = o.ContextualLabels
	}
	return toSerialize, nil
}

type NullableGroupByValuesOneOf1 struct {
	value *GroupByValuesOneOf1
	isSet bool
}

func (v NullableGroupByValuesOneOf1) Get() *GroupByValuesOneOf1 {
	return v.value
}

func (v *NullableGroupByValuesOneOf1) Set(val *GroupByValuesOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupByValuesOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupByValuesOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupByValuesOneOf1(val *GroupByValuesOneOf1) *NullableGroupByValuesOneOf1 {
	return &NullableGroupByValuesOneOf1{value: val, isSet: true}
}

func (v NullableGroupByValuesOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupByValuesOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


