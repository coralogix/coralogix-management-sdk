/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResolveIncidentByEventIdResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResolveIncidentByEventIdResponse{}

// ResolveIncidentByEventIdResponse Response containing the updated incident after resolution
type ResolveIncidentByEventIdResponse struct {
	Incident Incident `json:"incident"`
}

type _ResolveIncidentByEventIdResponse ResolveIncidentByEventIdResponse

// NewResolveIncidentByEventIdResponse instantiates a new ResolveIncidentByEventIdResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResolveIncidentByEventIdResponse(incident Incident) *ResolveIncidentByEventIdResponse {
	this := ResolveIncidentByEventIdResponse{}
	this.Incident = incident
	return &this
}

// NewResolveIncidentByEventIdResponseWithDefaults instantiates a new ResolveIncidentByEventIdResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResolveIncidentByEventIdResponseWithDefaults() *ResolveIncidentByEventIdResponse {
	this := ResolveIncidentByEventIdResponse{}
	return &this
}

// GetIncident returns the Incident field value
func (o *ResolveIncidentByEventIdResponse) GetIncident() Incident {
	if o == nil {
		var ret Incident
		return ret
	}

	return o.Incident
}

// GetIncidentOk returns a tuple with the Incident field value
// and a boolean to check if the value has been set.
func (o *ResolveIncidentByEventIdResponse) GetIncidentOk() (*Incident, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Incident, true
}

// SetIncident sets field value
func (o *ResolveIncidentByEventIdResponse) SetIncident(v Incident) {
	o.Incident = v
}

func (o ResolveIncidentByEventIdResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResolveIncidentByEventIdResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["incident"] = o.Incident
	return toSerialize, nil
}

func (o *ResolveIncidentByEventIdResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"incident",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResolveIncidentByEventIdResponse := _ResolveIncidentByEventIdResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResolveIncidentByEventIdResponse)

	if err != nil {
		return err
	}

	*o = ResolveIncidentByEventIdResponse(varResolveIncidentByEventIdResponse)

	return err
}

type NullableResolveIncidentByEventIdResponse struct {
	value *ResolveIncidentByEventIdResponse
	isSet bool
}

func (v NullableResolveIncidentByEventIdResponse) Get() *ResolveIncidentByEventIdResponse {
	return v.value
}

func (v *NullableResolveIncidentByEventIdResponse) Set(val *ResolveIncidentByEventIdResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableResolveIncidentByEventIdResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableResolveIncidentByEventIdResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResolveIncidentByEventIdResponse(val *ResolveIncidentByEventIdResponse) *NullableResolveIncidentByEventIdResponse {
	return &NullableResolveIncidentByEventIdResponse{value: val, isSet: true}
}

func (v NullableResolveIncidentByEventIdResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResolveIncidentByEventIdResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


