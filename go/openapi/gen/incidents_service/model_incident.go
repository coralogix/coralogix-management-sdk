/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Incident type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Incident{}

// Incident struct for Incident
type Incident struct {
	Assignments []Assignment `json:"assignments"`
	ClosedAt *time.Time `json:"closedAt,omitempty"`
	ContextualLabels map[string]string `json:"contextualLabels"`
	CreatedAt time.Time `json:"createdAt"`
	Description *string `json:"description,omitempty"`
	DisplayLabels map[string]string `json:"displayLabels"`
	Duration string `json:"duration"`
	Events []IncidentEvent `json:"events"`
	Id string `json:"id"`
	IsMuted *bool `json:"isMuted,omitempty"`
	LastStateUpdateKey string `json:"lastStateUpdateKey"`
	LastStateUpdateTime time.Time `json:"lastStateUpdateTime"`
	MetaLabels []IncidentsV1MetaLabel `json:"metaLabels,omitempty"`
	Name *string `json:"name,omitempty"`
	Severity IncidentSeverity `json:"severity"`
	State IncidentState `json:"state"`
	Status IncidentStatus `json:"status"`
}

type _Incident Incident

// NewIncident instantiates a new Incident object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncident(assignments []Assignment, contextualLabels map[string]string, createdAt time.Time, displayLabels map[string]string, duration string, events []IncidentEvent, id string, lastStateUpdateKey string, lastStateUpdateTime time.Time, severity IncidentSeverity, state IncidentState, status IncidentStatus) *Incident {
	this := Incident{}
	this.Assignments = assignments
	this.ContextualLabels = contextualLabels
	this.CreatedAt = createdAt
	this.DisplayLabels = displayLabels
	this.Duration = duration
	this.Events = events
	this.Id = id
	this.LastStateUpdateKey = lastStateUpdateKey
	this.LastStateUpdateTime = lastStateUpdateTime
	this.Severity = severity
	this.State = state
	this.Status = status
	return &this
}

// NewIncidentWithDefaults instantiates a new Incident object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentWithDefaults() *Incident {
	this := Incident{}
	return &this
}

// GetAssignments returns the Assignments field value
func (o *Incident) GetAssignments() []Assignment {
	if o == nil {
		var ret []Assignment
		return ret
	}

	return o.Assignments
}

// GetAssignmentsOk returns a tuple with the Assignments field value
// and a boolean to check if the value has been set.
func (o *Incident) GetAssignmentsOk() ([]Assignment, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assignments, true
}

// SetAssignments sets field value
func (o *Incident) SetAssignments(v []Assignment) {
	o.Assignments = v
}

// GetClosedAt returns the ClosedAt field value if set, zero value otherwise.
func (o *Incident) GetClosedAt() time.Time {
	if o == nil || IsNil(o.ClosedAt) {
		var ret time.Time
		return ret
	}
	return *o.ClosedAt
}

// GetClosedAtOk returns a tuple with the ClosedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetClosedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ClosedAt) {
		return nil, false
	}
	return o.ClosedAt, true
}

// HasClosedAt returns a boolean if a field has been set.
func (o *Incident) HasClosedAt() bool {
	if o != nil && !IsNil(o.ClosedAt) {
		return true
	}

	return false
}

// SetClosedAt gets a reference to the given time.Time and assigns it to the ClosedAt field.
func (o *Incident) SetClosedAt(v time.Time) {
	o.ClosedAt = &v
}

// GetContextualLabels returns the ContextualLabels field value
func (o *Incident) GetContextualLabels() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.ContextualLabels
}

// GetContextualLabelsOk returns a tuple with the ContextualLabels field value
// and a boolean to check if the value has been set.
func (o *Incident) GetContextualLabelsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContextualLabels, true
}

// SetContextualLabels sets field value
func (o *Incident) SetContextualLabels(v map[string]string) {
	o.ContextualLabels = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Incident) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Incident) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Incident) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Incident) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Incident) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Incident) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayLabels returns the DisplayLabels field value
func (o *Incident) GetDisplayLabels() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.DisplayLabels
}

// GetDisplayLabelsOk returns a tuple with the DisplayLabels field value
// and a boolean to check if the value has been set.
func (o *Incident) GetDisplayLabelsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayLabels, true
}

// SetDisplayLabels sets field value
func (o *Incident) SetDisplayLabels(v map[string]string) {
	o.DisplayLabels = v
}

// GetDuration returns the Duration field value
func (o *Incident) GetDuration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *Incident) GetDurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *Incident) SetDuration(v string) {
	o.Duration = v
}

// GetEvents returns the Events field value
func (o *Incident) GetEvents() []IncidentEvent {
	if o == nil {
		var ret []IncidentEvent
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *Incident) GetEventsOk() ([]IncidentEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *Incident) SetEvents(v []IncidentEvent) {
	o.Events = v
}

// GetId returns the Id field value
func (o *Incident) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Incident) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Incident) SetId(v string) {
	o.Id = v
}

// GetIsMuted returns the IsMuted field value if set, zero value otherwise.
func (o *Incident) GetIsMuted() bool {
	if o == nil || IsNil(o.IsMuted) {
		var ret bool
		return ret
	}
	return *o.IsMuted
}

// GetIsMutedOk returns a tuple with the IsMuted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetIsMutedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMuted) {
		return nil, false
	}
	return o.IsMuted, true
}

// HasIsMuted returns a boolean if a field has been set.
func (o *Incident) HasIsMuted() bool {
	if o != nil && !IsNil(o.IsMuted) {
		return true
	}

	return false
}

// SetIsMuted gets a reference to the given bool and assigns it to the IsMuted field.
func (o *Incident) SetIsMuted(v bool) {
	o.IsMuted = &v
}

// GetLastStateUpdateKey returns the LastStateUpdateKey field value
func (o *Incident) GetLastStateUpdateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastStateUpdateKey
}

// GetLastStateUpdateKeyOk returns a tuple with the LastStateUpdateKey field value
// and a boolean to check if the value has been set.
func (o *Incident) GetLastStateUpdateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastStateUpdateKey, true
}

// SetLastStateUpdateKey sets field value
func (o *Incident) SetLastStateUpdateKey(v string) {
	o.LastStateUpdateKey = v
}

// GetLastStateUpdateTime returns the LastStateUpdateTime field value
func (o *Incident) GetLastStateUpdateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastStateUpdateTime
}

// GetLastStateUpdateTimeOk returns a tuple with the LastStateUpdateTime field value
// and a boolean to check if the value has been set.
func (o *Incident) GetLastStateUpdateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastStateUpdateTime, true
}

// SetLastStateUpdateTime sets field value
func (o *Incident) SetLastStateUpdateTime(v time.Time) {
	o.LastStateUpdateTime = v
}

// GetMetaLabels returns the MetaLabels field value if set, zero value otherwise.
func (o *Incident) GetMetaLabels() []IncidentsV1MetaLabel {
	if o == nil || IsNil(o.MetaLabels) {
		var ret []IncidentsV1MetaLabel
		return ret
	}
	return o.MetaLabels
}

// GetMetaLabelsOk returns a tuple with the MetaLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetMetaLabelsOk() ([]IncidentsV1MetaLabel, bool) {
	if o == nil || IsNil(o.MetaLabels) {
		return nil, false
	}
	return o.MetaLabels, true
}

// HasMetaLabels returns a boolean if a field has been set.
func (o *Incident) HasMetaLabels() bool {
	if o != nil && !IsNil(o.MetaLabels) {
		return true
	}

	return false
}

// SetMetaLabels gets a reference to the given []IncidentsV1MetaLabel and assigns it to the MetaLabels field.
func (o *Incident) SetMetaLabels(v []IncidentsV1MetaLabel) {
	o.MetaLabels = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Incident) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Incident) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Incident) SetName(v string) {
	o.Name = &v
}

// GetSeverity returns the Severity field value
func (o *Incident) GetSeverity() IncidentSeverity {
	if o == nil {
		var ret IncidentSeverity
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *Incident) GetSeverityOk() (*IncidentSeverity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *Incident) SetSeverity(v IncidentSeverity) {
	o.Severity = v
}

// GetState returns the State field value
func (o *Incident) GetState() IncidentState {
	if o == nil {
		var ret IncidentState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Incident) GetStateOk() (*IncidentState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Incident) SetState(v IncidentState) {
	o.State = v
}

// GetStatus returns the Status field value
func (o *Incident) GetStatus() IncidentStatus {
	if o == nil {
		var ret IncidentStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Incident) GetStatusOk() (*IncidentStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Incident) SetStatus(v IncidentStatus) {
	o.Status = v
}

func (o Incident) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Incident) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assignments"] = o.Assignments
	if !IsNil(o.ClosedAt) {
		toSerialize["closedAt"] = o.ClosedAt
	}
	toSerialize["contextualLabels"] = o.ContextualLabels
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["displayLabels"] = o.DisplayLabels
	toSerialize["duration"] = o.Duration
	toSerialize["events"] = o.Events
	toSerialize["id"] = o.Id
	if !IsNil(o.IsMuted) {
		toSerialize["isMuted"] = o.IsMuted
	}
	toSerialize["lastStateUpdateKey"] = o.LastStateUpdateKey
	toSerialize["lastStateUpdateTime"] = o.LastStateUpdateTime
	if !IsNil(o.MetaLabels) {
		toSerialize["metaLabels"] = o.MetaLabels
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["severity"] = o.Severity
	toSerialize["state"] = o.State
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *Incident) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assignments",
		"contextualLabels",
		"createdAt",
		"displayLabels",
		"duration",
		"events",
		"id",
		"lastStateUpdateKey",
		"lastStateUpdateTime",
		"severity",
		"state",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIncident := _Incident{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIncident)

	if err != nil {
		return err
	}

	*o = Incident(varIncident)

	return err
}

type NullableIncident struct {
	value *Incident
	isSet bool
}

func (v NullableIncident) Get() *Incident {
	return v.value
}

func (v *NullableIncident) Set(val *Incident) {
	v.value = val
	v.isSet = true
}

func (v NullableIncident) IsSet() bool {
	return v.isSet
}

func (v *NullableIncident) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncident(val *Incident) *NullableIncident {
	return &NullableIncident{value: val, isSet: true}
}

func (v NullableIncident) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncident) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


