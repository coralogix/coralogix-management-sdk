/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the IncidentAggregation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncidentAggregation{}

// IncidentAggregation struct for IncidentAggregation
type IncidentAggregation struct {
	AggAssignmentsCount []IncidentAssignmentCount `json:"aggAssignmentsCount"`
	AggMetaLabelsCount []IncidentMetaLabelsCount `json:"aggMetaLabelsCount"`
	AggSeverityCount []IncidentSeverityCount `json:"aggSeverityCount"`
	AggStateCount []IncidentStateCount `json:"aggStateCount"`
	AggStatusCount []IncidentStatusCount `json:"aggStatusCount"`
	AllValuesCount int64 `json:"allValuesCount"`
	FirstCreatedAt time.Time `json:"firstCreatedAt"`
	GroupBysValue []GroupByValues `json:"groupBysValue"`
	LastClosedAt time.Time `json:"lastClosedAt"`
	LastStateUpdateTime time.Time `json:"lastStateUpdateTime"`
	ListIncidentsId []string `json:"listIncidentsId"`
}

type _IncidentAggregation IncidentAggregation

// NewIncidentAggregation instantiates a new IncidentAggregation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentAggregation(aggAssignmentsCount []IncidentAssignmentCount, aggMetaLabelsCount []IncidentMetaLabelsCount, aggSeverityCount []IncidentSeverityCount, aggStateCount []IncidentStateCount, aggStatusCount []IncidentStatusCount, allValuesCount int64, firstCreatedAt time.Time, groupBysValue []GroupByValues, lastClosedAt time.Time, lastStateUpdateTime time.Time, listIncidentsId []string) *IncidentAggregation {
	this := IncidentAggregation{}
	this.AggAssignmentsCount = aggAssignmentsCount
	this.AggMetaLabelsCount = aggMetaLabelsCount
	this.AggSeverityCount = aggSeverityCount
	this.AggStateCount = aggStateCount
	this.AggStatusCount = aggStatusCount
	this.AllValuesCount = allValuesCount
	this.FirstCreatedAt = firstCreatedAt
	this.GroupBysValue = groupBysValue
	this.LastClosedAt = lastClosedAt
	this.LastStateUpdateTime = lastStateUpdateTime
	this.ListIncidentsId = listIncidentsId
	return &this
}

// NewIncidentAggregationWithDefaults instantiates a new IncidentAggregation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentAggregationWithDefaults() *IncidentAggregation {
	this := IncidentAggregation{}
	return &this
}

// GetAggAssignmentsCount returns the AggAssignmentsCount field value
func (o *IncidentAggregation) GetAggAssignmentsCount() []IncidentAssignmentCount {
	if o == nil {
		var ret []IncidentAssignmentCount
		return ret
	}

	return o.AggAssignmentsCount
}

// GetAggAssignmentsCountOk returns a tuple with the AggAssignmentsCount field value
// and a boolean to check if the value has been set.
func (o *IncidentAggregation) GetAggAssignmentsCountOk() ([]IncidentAssignmentCount, bool) {
	if o == nil {
		return nil, false
	}
	return o.AggAssignmentsCount, true
}

// SetAggAssignmentsCount sets field value
func (o *IncidentAggregation) SetAggAssignmentsCount(v []IncidentAssignmentCount) {
	o.AggAssignmentsCount = v
}

// GetAggMetaLabelsCount returns the AggMetaLabelsCount field value
func (o *IncidentAggregation) GetAggMetaLabelsCount() []IncidentMetaLabelsCount {
	if o == nil {
		var ret []IncidentMetaLabelsCount
		return ret
	}

	return o.AggMetaLabelsCount
}

// GetAggMetaLabelsCountOk returns a tuple with the AggMetaLabelsCount field value
// and a boolean to check if the value has been set.
func (o *IncidentAggregation) GetAggMetaLabelsCountOk() ([]IncidentMetaLabelsCount, bool) {
	if o == nil {
		return nil, false
	}
	return o.AggMetaLabelsCount, true
}

// SetAggMetaLabelsCount sets field value
func (o *IncidentAggregation) SetAggMetaLabelsCount(v []IncidentMetaLabelsCount) {
	o.AggMetaLabelsCount = v
}

// GetAggSeverityCount returns the AggSeverityCount field value
func (o *IncidentAggregation) GetAggSeverityCount() []IncidentSeverityCount {
	if o == nil {
		var ret []IncidentSeverityCount
		return ret
	}

	return o.AggSeverityCount
}

// GetAggSeverityCountOk returns a tuple with the AggSeverityCount field value
// and a boolean to check if the value has been set.
func (o *IncidentAggregation) GetAggSeverityCountOk() ([]IncidentSeverityCount, bool) {
	if o == nil {
		return nil, false
	}
	return o.AggSeverityCount, true
}

// SetAggSeverityCount sets field value
func (o *IncidentAggregation) SetAggSeverityCount(v []IncidentSeverityCount) {
	o.AggSeverityCount = v
}

// GetAggStateCount returns the AggStateCount field value
func (o *IncidentAggregation) GetAggStateCount() []IncidentStateCount {
	if o == nil {
		var ret []IncidentStateCount
		return ret
	}

	return o.AggStateCount
}

// GetAggStateCountOk returns a tuple with the AggStateCount field value
// and a boolean to check if the value has been set.
func (o *IncidentAggregation) GetAggStateCountOk() ([]IncidentStateCount, bool) {
	if o == nil {
		return nil, false
	}
	return o.AggStateCount, true
}

// SetAggStateCount sets field value
func (o *IncidentAggregation) SetAggStateCount(v []IncidentStateCount) {
	o.AggStateCount = v
}

// GetAggStatusCount returns the AggStatusCount field value
func (o *IncidentAggregation) GetAggStatusCount() []IncidentStatusCount {
	if o == nil {
		var ret []IncidentStatusCount
		return ret
	}

	return o.AggStatusCount
}

// GetAggStatusCountOk returns a tuple with the AggStatusCount field value
// and a boolean to check if the value has been set.
func (o *IncidentAggregation) GetAggStatusCountOk() ([]IncidentStatusCount, bool) {
	if o == nil {
		return nil, false
	}
	return o.AggStatusCount, true
}

// SetAggStatusCount sets field value
func (o *IncidentAggregation) SetAggStatusCount(v []IncidentStatusCount) {
	o.AggStatusCount = v
}

// GetAllValuesCount returns the AllValuesCount field value
func (o *IncidentAggregation) GetAllValuesCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AllValuesCount
}

// GetAllValuesCountOk returns a tuple with the AllValuesCount field value
// and a boolean to check if the value has been set.
func (o *IncidentAggregation) GetAllValuesCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllValuesCount, true
}

// SetAllValuesCount sets field value
func (o *IncidentAggregation) SetAllValuesCount(v int64) {
	o.AllValuesCount = v
}

// GetFirstCreatedAt returns the FirstCreatedAt field value
func (o *IncidentAggregation) GetFirstCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.FirstCreatedAt
}

// GetFirstCreatedAtOk returns a tuple with the FirstCreatedAt field value
// and a boolean to check if the value has been set.
func (o *IncidentAggregation) GetFirstCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstCreatedAt, true
}

// SetFirstCreatedAt sets field value
func (o *IncidentAggregation) SetFirstCreatedAt(v time.Time) {
	o.FirstCreatedAt = v
}

// GetGroupBysValue returns the GroupBysValue field value
func (o *IncidentAggregation) GetGroupBysValue() []GroupByValues {
	if o == nil {
		var ret []GroupByValues
		return ret
	}

	return o.GroupBysValue
}

// GetGroupBysValueOk returns a tuple with the GroupBysValue field value
// and a boolean to check if the value has been set.
func (o *IncidentAggregation) GetGroupBysValueOk() ([]GroupByValues, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupBysValue, true
}

// SetGroupBysValue sets field value
func (o *IncidentAggregation) SetGroupBysValue(v []GroupByValues) {
	o.GroupBysValue = v
}

// GetLastClosedAt returns the LastClosedAt field value
func (o *IncidentAggregation) GetLastClosedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastClosedAt
}

// GetLastClosedAtOk returns a tuple with the LastClosedAt field value
// and a boolean to check if the value has been set.
func (o *IncidentAggregation) GetLastClosedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastClosedAt, true
}

// SetLastClosedAt sets field value
func (o *IncidentAggregation) SetLastClosedAt(v time.Time) {
	o.LastClosedAt = v
}

// GetLastStateUpdateTime returns the LastStateUpdateTime field value
func (o *IncidentAggregation) GetLastStateUpdateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastStateUpdateTime
}

// GetLastStateUpdateTimeOk returns a tuple with the LastStateUpdateTime field value
// and a boolean to check if the value has been set.
func (o *IncidentAggregation) GetLastStateUpdateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastStateUpdateTime, true
}

// SetLastStateUpdateTime sets field value
func (o *IncidentAggregation) SetLastStateUpdateTime(v time.Time) {
	o.LastStateUpdateTime = v
}

// GetListIncidentsId returns the ListIncidentsId field value
func (o *IncidentAggregation) GetListIncidentsId() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ListIncidentsId
}

// GetListIncidentsIdOk returns a tuple with the ListIncidentsId field value
// and a boolean to check if the value has been set.
func (o *IncidentAggregation) GetListIncidentsIdOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ListIncidentsId, true
}

// SetListIncidentsId sets field value
func (o *IncidentAggregation) SetListIncidentsId(v []string) {
	o.ListIncidentsId = v
}

func (o IncidentAggregation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncidentAggregation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["aggAssignmentsCount"] = o.AggAssignmentsCount
	toSerialize["aggMetaLabelsCount"] = o.AggMetaLabelsCount
	toSerialize["aggSeverityCount"] = o.AggSeverityCount
	toSerialize["aggStateCount"] = o.AggStateCount
	toSerialize["aggStatusCount"] = o.AggStatusCount
	toSerialize["allValuesCount"] = o.AllValuesCount
	toSerialize["firstCreatedAt"] = o.FirstCreatedAt
	toSerialize["groupBysValue"] = o.GroupBysValue
	toSerialize["lastClosedAt"] = o.LastClosedAt
	toSerialize["lastStateUpdateTime"] = o.LastStateUpdateTime
	toSerialize["listIncidentsId"] = o.ListIncidentsId
	return toSerialize, nil
}

func (o *IncidentAggregation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aggAssignmentsCount",
		"aggMetaLabelsCount",
		"aggSeverityCount",
		"aggStateCount",
		"aggStatusCount",
		"allValuesCount",
		"firstCreatedAt",
		"groupBysValue",
		"lastClosedAt",
		"lastStateUpdateTime",
		"listIncidentsId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIncidentAggregation := _IncidentAggregation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIncidentAggregation)

	if err != nil {
		return err
	}

	*o = IncidentAggregation(varIncidentAggregation)

	return err
}

type NullableIncidentAggregation struct {
	value *IncidentAggregation
	isSet bool
}

func (v NullableIncidentAggregation) Get() *IncidentAggregation {
	return v.value
}

func (v *NullableIncidentAggregation) Set(val *IncidentAggregation) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentAggregation) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentAggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentAggregation(val *IncidentAggregation) *NullableIncidentAggregation {
	return &NullableIncidentAggregation{value: val, isSet: true}
}

func (v NullableIncidentAggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentAggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


