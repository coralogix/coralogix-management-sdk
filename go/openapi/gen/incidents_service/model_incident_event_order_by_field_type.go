/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"fmt"
)

// IncidentEventOrderByFieldType the model 'IncidentEventOrderByFieldType'
type IncidentEventOrderByFieldType string

// List of IncidentEventOrderByFieldType
const (
	INCIDENTEVENTORDERBYFIELDTYPE_INCIDENT_EVENT_ORDER_BY_FIELD_TYPE_TIMESTAMP_OR_UNSPECIFIED IncidentEventOrderByFieldType = "INCIDENT_EVENT_ORDER_BY_FIELD_TYPE_TIMESTAMP_OR_UNSPECIFIED"
)

// All allowed values of IncidentEventOrderByFieldType enum
var AllowedIncidentEventOrderByFieldTypeEnumValues = []IncidentEventOrderByFieldType{
	"INCIDENT_EVENT_ORDER_BY_FIELD_TYPE_TIMESTAMP_OR_UNSPECIFIED",
}

func (v *IncidentEventOrderByFieldType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IncidentEventOrderByFieldType(value)
	for _, existing := range AllowedIncidentEventOrderByFieldTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IncidentEventOrderByFieldType", value)
}

// NewIncidentEventOrderByFieldTypeFromValue returns a pointer to a valid IncidentEventOrderByFieldType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIncidentEventOrderByFieldTypeFromValue(v string) (*IncidentEventOrderByFieldType, error) {
	ev := IncidentEventOrderByFieldType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IncidentEventOrderByFieldType: valid values are %v", v, AllowedIncidentEventOrderByFieldTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IncidentEventOrderByFieldType) IsValid() bool {
	for _, existing := range AllowedIncidentEventOrderByFieldTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IncidentEventOrderByFieldType value
func (v IncidentEventOrderByFieldType) Ptr() *IncidentEventOrderByFieldType {
	return &v
}

type NullableIncidentEventOrderByFieldType struct {
	value *IncidentEventOrderByFieldType
	isSet bool
}

func (v NullableIncidentEventOrderByFieldType) Get() *IncidentEventOrderByFieldType {
	return v.value
}

func (v *NullableIncidentEventOrderByFieldType) Set(val *IncidentEventOrderByFieldType) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentEventOrderByFieldType) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentEventOrderByFieldType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentEventOrderByFieldType(val *IncidentEventOrderByFieldType) *NullableIncidentEventOrderByFieldType {
	return &NullableIncidentEventOrderByFieldType{value: val, isSet: true}
}

func (v NullableIncidentEventOrderByFieldType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentEventOrderByFieldType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

