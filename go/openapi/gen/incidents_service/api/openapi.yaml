openapi: 3.0.0
info:
  title: ""
  version: 1.0.0
servers:
- url: /
paths:
  /incidents/incidents/v1:
    post:
      description: |-
        Lists all available incidents based on specified filters and order. The list is ordered in an unspecified direction and sorted by creation time.

        Requires the following permissions:
        - `incidents:read`
      externalDocs:
        url: ""
      operationId: IncidentsService_ListIncidents
      parameters:
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          $ref: "#/components/schemas/Incident_query_filter"
        style: form
      - explode: true
        in: query
        name: pagination
        required: false
        schema:
          $ref: "#/components/schemas/Pagination_request"
        style: form
      - explode: true
        in: query
        name: order_bys
        required: false
        schema:
          items:
            $ref: "#/components/schemas/IncidentsService_ListIncidents_order_bys_parameter_inner"
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListIncidentsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: List incidents with filters
      tags:
      - Incidents service
      x-coralogixPermissions:
      - incidents:read
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1?filter=SOME_OBJECT_VALUE&pagination=SOME_OBJECT_VALUE&order_bys=SOME_ARRAY_VALUE';

          let options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1"

          querystring = {"filter":"SOME_OBJECT_VALUE","pagination":"SOME_OBJECT_VALUE","order_bys":"SOME_ARRAY_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("POST", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1?filter=SOME_OBJECT_VALUE&pagination=SOME_OBJECT_VALUE&order_bys=SOME_ARRAY_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/acknowledge:
    post:
      description: |-
        Mark one or more incidents as acknowledged.

        Requires the following permissions:
        - `incidents:acknowledge`
      externalDocs:
        url: ""
      operationId: IncidentsService_AcknowledgeIncidents
      parameters:
      - explode: true
        in: query
        name: incident_ids
        required: false
        schema:
          items:
            description: List of incident IDs to acknowledge
            example: "[\"incident_id_1\",\"incident_id_2\"]"
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AcknowledgeIncidentsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Acknowledge incidents
      tags:
      - Incidents service
      x-coralogixPermissions:
      - incidents:acknowledge
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/acknowledge?incident_ids=SOME_ARRAY_VALUE';

          let options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/acknowledge"

          querystring = {"incident_ids":"SOME_ARRAY_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("POST", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/acknowledge?incident_ids=SOME_ARRAY_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/aggregations:
    get:
      description: |-
        Retrieve aggregated incident data with support for grouping and filtering.

        Requires the following permissions:
        - `incidents:read`
      externalDocs:
        url: ""
      operationId: IncidentsService_ListIncidentAggregations
      parameters:
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          $ref: "#/components/schemas/Incident_query_filter"
        style: form
      - explode: true
        in: query
        name: group_bys
        required: false
        schema:
          items:
            $ref: "#/components/schemas/IncidentsService_ListIncidentAggregations_group_bys_parameter_inner"
          type: array
        style: form
      - explode: true
        in: query
        name: pagination
        required: false
        schema:
          $ref: "#/components/schemas/Pagination_request"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListIncidentAggregationsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get incident aggregations
      tags:
      - Incidents service
      x-coralogixPermissions:
      - incidents:read
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/aggregations?filter=SOME_OBJECT_VALUE&group_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/aggregations"

          querystring = {"filter":"SOME_OBJECT_VALUE","group_bys":"SOME_ARRAY_VALUE","pagination":"SOME_OBJECT_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/aggregations?filter=SOME_OBJECT_VALUE&group_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/batch:
    get:
      description: |-
        Retrieve multiple incidents by their IDs in a single request.

        Requires the following permissions:
        - `incidents:read`
      externalDocs:
        url: ""
      operationId: IncidentsService_BatchGetIncident
      parameters:
      - explode: true
        in: query
        name: ids
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchGetIncidentResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get multiple incidents by IDs
      tags:
      - Incidents service
      x-coralogixPermissions:
      - incidents:read
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/batch?ids=SOME_ARRAY_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/batch"

          querystring = {"ids":"SOME_ARRAY_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/batch?ids=SOME_ARRAY_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/by-user:
    delete:
      description: |-
        Remove user assignments from one or more incidents.

        Requires the following permissions:
        - `incidents:assign`
      externalDocs:
        url: ""
      operationId: IncidentsService_UnassignIncidents
      parameters:
      - explode: true
        in: query
        name: incident_ids
        required: false
        schema:
          items:
            description: List of incident IDs to unassign
            example: "[\"incident_id_1\",\"incident_id_2\"]"
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnassignIncidentsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Remove incident user assignments
      tags:
      - Incidents service
      x-coralogixPermissions:
      - incidents:assign
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/by-user?incident_ids=SOME_ARRAY_VALUE';

          let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/by-user"

          querystring = {"incident_ids":"SOME_ARRAY_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("DELETE", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/by-user?incident_ids=SOME_ARRAY_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
    post:
      description: |-
        Assign one or more incidents to a specific user.

        Requires the following permissions:
        - `incidents:assign`
      externalDocs:
        url: ""
      operationId: IncidentsService_AssignIncidents
      parameters:
      - explode: true
        in: query
        name: incident_ids
        required: false
        schema:
          items:
            description: List of incident IDs to assign
            example: "[\"incident_id_1\",\"incident_id_2\"]"
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: assigned_to
        required: false
        schema:
          $ref: "#/components/schemas/User_details"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignIncidentsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Assign incidents to a user
      tags:
      - Incidents service
      x-coralogixPermissions:
      - incidents:assign
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/by-user?incident_ids=SOME_ARRAY_VALUE&assigned_to=SOME_OBJECT_VALUE';

          let options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/by-user"

          querystring = {"incident_ids":"SOME_ARRAY_VALUE","assigned_to":"SOME_OBJECT_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("POST", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/by-user?incident_ids=SOME_ARRAY_VALUE&assigned_to=SOME_OBJECT_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/close:
    post:
      description: No description available
      externalDocs:
        url: ""
      operationId: IncidentsService_CloseIncidents
      parameters:
      - explode: true
        in: query
        name: incident_ids
        required: false
        schema:
          items:
            description: List of incident IDs to close
            example: "[\"incident_id_1\",\"incident_id_2\"]"
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloseIncidentsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Close incidents
      tags:
      - Incidents service
      x-coralogixPermissions:
      - incidents:close
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/close?incident_ids=SOME_ARRAY_VALUE';

          let options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/close"

          querystring = {"incident_ids":"SOME_ARRAY_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("POST", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/close?incident_ids=SOME_ARRAY_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/events:
    get:
      description: |-
        List incident events with support for filtering, pagination, and ordering.

        Requires the following permissions:
        - `incidents:read`
      externalDocs:
        url: ""
      operationId: IncidentsService_ListIncidentEvents
      parameters:
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          $ref: "#/components/schemas/Incident_event_query_filter"
        style: form
      - explode: true
        in: query
        name: pagination
        required: false
        schema:
          $ref: "#/components/schemas/Pagination_request"
        style: form
      - explode: true
        in: query
        name: order_by
        required: false
        schema:
          $ref: "#/components/schemas/List_incident_events_order_by_request"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListIncidentEventsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: List incident events with filters
      tags:
      - Incidents service
      x-coralogixPermissions:
      - incidents:read
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events?filter=SOME_OBJECT_VALUE&pagination=SOME_OBJECT_VALUE&order_by=SOME_OBJECT_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events"

          querystring = {"filter":"SOME_OBJECT_VALUE","pagination":"SOME_OBJECT_VALUE","order_by":"SOME_OBJECT_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events?filter=SOME_OBJECT_VALUE&pagination=SOME_OBJECT_VALUE&order_by=SOME_OBJECT_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/events/count:
    get:
      description: |-
        Retrieve the total count of incident events matching a filter.

        Requires the following permissions:
        - `incidents:read`
      externalDocs:
        url: ""
      operationId: IncidentsService_ListIncidentEventsTotalCount
      parameters:
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          $ref: "#/components/schemas/Incident_event_query_filter"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListIncidentEventsTotalCountResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get total count of incident events
      tags:
      - Incidents service
      x-coralogixPermissions:
      - incidents:read
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/count?filter=SOME_OBJECT_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/count"

          querystring = {"filter":"SOME_OBJECT_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/count?filter=SOME_OBJECT_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/events/filter-values:
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: IncidentsService_ListIncidentEventsFilterValues
      parameters:
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          $ref: "#/components/schemas/Incident_event_query_filter"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListIncidentEventsFilterValuesResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get available incident event filter values
      tags:
      - Incidents service
      x-coralogixPermissions:
      - incidents:read
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/filter-values?filter=SOME_OBJECT_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/filter-values"

          querystring = {"filter":"SOME_OBJECT_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/filter-values?filter=SOME_OBJECT_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/events/{event_id}:
    get:
      description: |-
        Retrieve detailed information about a single incident by related alert event id.

        Requires the following permissions:
        - `incidents:read`
      externalDocs:
        url: ""
      operationId: IncidentsService_GetIncidentByEventId
      parameters:
      - explode: false
        in: path
        name: event_id
        required: true
        schema:
          description: Event ID associated to the Incident to acknowledge
          example: event_id_1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIncidentByEventIdResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get incident by event ID
      tags:
      - Incidents service
      x-coralogixPermissions:
      - incidents:read
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1 \
            --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/events/{event_id}/acknowledge:
    post:
      description: |-
        Mark incident as acknowledged by event id.

        Requires the following permissions:
        - `incidents:acknowledge`
      externalDocs:
        url: ""
      operationId: IncidentsService_AcknowledgeIncidentByEventId
      parameters:
      - explode: false
        in: path
        name: event_id
        required: true
        schema:
          description: Event ID associated to the Incident to acknowledge
          example: event_id_1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AcknowledgeIncidentByEventIdResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Acknowledge incident by event id
      tags:
      - Incidents service
      x-coralogixPermissions:
      - incidents:acknowledge
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1/acknowledge';

          let options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1/acknowledge"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("POST", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1/acknowledge \
            --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/events/{event_id}/resolve:
    post:
      description: |-
        Mark incident as resolved by event id.

        Requires the following permissions:
        - `incidents:close`
      externalDocs:
        url: ""
      operationId: IncidentsService_ResolveIncidentByEventId
      parameters:
      - explode: false
        in: path
        name: event_id
        required: true
        schema:
          description: Event ID associated to the Incident to resolve
          example: event_id_1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResolveIncidentByEventIdResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Resolve incident by event id
      tags:
      - Incidents service
      x-coralogixPermissions:
      - incidents:close
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1/resolve';

          let options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1/resolve"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("POST", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1/resolve \
            --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/filter-values:
    post:
      description: No description available
      externalDocs:
        url: ""
      operationId: IncidentsService_GetFilterValues
      parameters:
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          $ref: "#/components/schemas/Incident_query_filter"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFilterValuesResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get available filter values
      tags:
      - Incidents service
      x-coralogixPermissions:
      - incidents:read
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/filter-values?filter=SOME_OBJECT_VALUE';

          let options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/filter-values"

          querystring = {"filter":"SOME_OBJECT_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("POST", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/filter-values?filter=SOME_OBJECT_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/resolve:
    post:
      description: |-
        Mark one or more incidents as resolved.

        Requires the following permissions:
        - `incidents:close`
      externalDocs:
        url: ""
      operationId: IncidentsService_ResolveIncidents
      parameters:
      - explode: true
        in: query
        name: incident_ids
        required: false
        schema:
          items:
            description: List of incident IDs to resolve
            example: "[\"incident_id_1\",\"incident_id_2\"]"
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResolveIncidentsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Resolve incidents
      tags:
      - Incidents service
      x-coralogixPermissions:
      - incidents:close
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/resolve?incident_ids=SOME_ARRAY_VALUE';

          let options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/resolve"

          querystring = {"incident_ids":"SOME_ARRAY_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("POST", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/resolve?incident_ids=SOME_ARRAY_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/{id}:
    get:
      description: |-
        Retrieve detailed information about a single incident by its unique identifier.

        Requires the following permissions:
        - `incidents:read`
      externalDocs:
        url: ""
      operationId: IncidentsService_GetIncident
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          example: incident_id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIncidentResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get incident by ID
      tags:
      - Incidents service
      x-coralogixPermissions:
      - incidents:read
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/incident_id';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/incident_id"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/incident_id \
            --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/{incident_id}/events:
    get:
      description: |-
        Retrieve a chronological list of all events associated with a specific incident. Includes state changes, assignments, acknowledgments, and resolutions.

        Requires the following permissions:
        - `incidents:read`
      externalDocs:
        url: ""
      operationId: IncidentsService_GetIncidentEvents
      parameters:
      - explode: false
        in: path
        name: incident_id
        required: true
        schema:
          description: ID of the incident to retrieve events for
          example: incident_id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIncidentEventsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get incident events
      tags:
      - Incidents service
      x-coralogixPermissions:
      - incidents:read
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/incident_id/events';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/incident_id/events"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/incident_id/events \
            --header 'Authorization: Bearer <API_KEY>'
components:
  schemas:
    AcknowledgeIncidentByEventIdResponse:
      description: Response containing the updated incident after acknowledgment
      example:
        incident:
          displayLabels:
            key: displayLabels
          severity: INCIDENT_SEVERITY_UNSPECIFIED
          assignments:
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          contextualLabels:
            key: contextualLabels
          description: incident_description
          lastStateUpdateKey: last_state_update_key
          lastStateUpdateTime: 2024-01-01T00:00:00Z
          duration: duration
          createdAt: 2024-01-01T00:00:00Z
          name: incident_name
          id: incident_id
          metaLabels:
          - value: value
            key: key
          - value: value
            key: key
          state: INCIDENT_STATE_UNSPECIFIED
          closedAt: 2024-01-01T00:00:00Z
          events:
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          isMuted: false
          status: INCIDENT_STATUS_UNSPECIFIED
      externalDocs:
        url: ""
      properties:
        incident:
          $ref: "#/components/schemas/Incident"
      required:
      - incident
      title: Acknowledge incident by event id response
      type: object
    AcknowledgeIncidentsResponse:
      description: Response containing the updated incidents after acknowledgment
      example:
        incidents:
        - displayLabels:
            key: displayLabels
          severity: INCIDENT_SEVERITY_UNSPECIFIED
          assignments:
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          contextualLabels:
            key: contextualLabels
          description: incident_description
          lastStateUpdateKey: last_state_update_key
          lastStateUpdateTime: 2024-01-01T00:00:00Z
          duration: duration
          createdAt: 2024-01-01T00:00:00Z
          name: incident_name
          id: incident_id
          metaLabels:
          - value: value
            key: key
          - value: value
            key: key
          state: INCIDENT_STATE_UNSPECIFIED
          closedAt: 2024-01-01T00:00:00Z
          events:
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          isMuted: false
          status: INCIDENT_STATUS_UNSPECIFIED
        - displayLabels:
            key: displayLabels
          severity: INCIDENT_SEVERITY_UNSPECIFIED
          assignments:
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          contextualLabels:
            key: contextualLabels
          description: incident_description
          lastStateUpdateKey: last_state_update_key
          lastStateUpdateTime: 2024-01-01T00:00:00Z
          duration: duration
          createdAt: 2024-01-01T00:00:00Z
          name: incident_name
          id: incident_id
          metaLabels:
          - value: value
            key: key
          - value: value
            key: key
          state: INCIDENT_STATE_UNSPECIFIED
          closedAt: 2024-01-01T00:00:00Z
          events:
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          isMuted: false
          status: INCIDENT_STATUS_UNSPECIFIED
      externalDocs:
        url: ""
      properties:
        incidents:
          items:
            $ref: "#/components/schemas/Incident"
          type: array
      required:
      - incidents
      title: Acknowledge incidents response
      type: object
    AssignIncidentsResponse:
      description: Response containing the updated incidents after assignment
      example:
        incidents:
        - displayLabels:
            key: displayLabels
          severity: INCIDENT_SEVERITY_UNSPECIFIED
          assignments:
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          contextualLabels:
            key: contextualLabels
          description: incident_description
          lastStateUpdateKey: last_state_update_key
          lastStateUpdateTime: 2024-01-01T00:00:00Z
          duration: duration
          createdAt: 2024-01-01T00:00:00Z
          name: incident_name
          id: incident_id
          metaLabels:
          - value: value
            key: key
          - value: value
            key: key
          state: INCIDENT_STATE_UNSPECIFIED
          closedAt: 2024-01-01T00:00:00Z
          events:
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          isMuted: false
          status: INCIDENT_STATUS_UNSPECIFIED
        - displayLabels:
            key: displayLabels
          severity: INCIDENT_SEVERITY_UNSPECIFIED
          assignments:
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          contextualLabels:
            key: contextualLabels
          description: incident_description
          lastStateUpdateKey: last_state_update_key
          lastStateUpdateTime: 2024-01-01T00:00:00Z
          duration: duration
          createdAt: 2024-01-01T00:00:00Z
          name: incident_name
          id: incident_id
          metaLabels:
          - value: value
            key: key
          - value: value
            key: key
          state: INCIDENT_STATE_UNSPECIFIED
          closedAt: 2024-01-01T00:00:00Z
          events:
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          isMuted: false
          status: INCIDENT_STATUS_UNSPECIFIED
      externalDocs:
        url: ""
      properties:
        incidents:
          items:
            $ref: "#/components/schemas/Incident"
          type: array
      required:
      - incidents
      title: Assign incidents response
      type: object
    AssigneeWithCount:
      example:
        count: 10
        assignee: assignee
      externalDocs:
        url: ""
      properties:
        assignee:
          example: assignee
          type: string
        count:
          example: 10
          format: int32
          type: integer
      required:
      - assignee
      - count
      title: Assignee with count
      type: object
    Assignment:
      description: Details of the user who assigned the incident and the user to whom
        it was assigned
      example:
        assignedBy:
          userId: user_id
        assignedTo:
          userId: user_id
      externalDocs:
        url: ""
      properties:
        assignedBy:
          $ref: "#/components/schemas/UserDetails"
        assignedTo:
          $ref: "#/components/schemas/UserDetails"
      required:
      - assignedBy
      - assignedTo
      title: Assignment
      type: object
    BatchGetIncidentResponse:
      description: Response containing the requested incidents and any IDs that weren't
        found
      example:
        notFoundIds:
        - "[\"not_found_id_1\",\"not_found_id_2\"]"
        - "[\"not_found_id_1\",\"not_found_id_2\"]"
        incidents:
          key:
            displayLabels:
              key: displayLabels
            severity: INCIDENT_SEVERITY_UNSPECIFIED
            assignments:
            - assignedBy:
                userId: user_id
              assignedTo:
                userId: user_id
            - assignedBy:
                userId: user_id
              assignedTo:
                userId: user_id
            contextualLabels:
              key: contextualLabels
            description: incident_description
            lastStateUpdateKey: last_state_update_key
            lastStateUpdateTime: 2024-01-01T00:00:00Z
            duration: duration
            createdAt: 2024-01-01T00:00:00Z
            name: incident_name
            id: incident_id
            metaLabels:
            - value: value
              key: key
            - value: value
              key: key
            state: INCIDENT_STATE_UNSPECIFIED
            closedAt: 2024-01-01T00:00:00Z
            events:
            - operationalEvent:
                systemName: systemName
              id: incident_event_id
              originatorType: ORIGINATOR_TYPE_UNSPECIFIED
              incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
              unassign: "{}"
            - operationalEvent:
                systemName: systemName
              id: incident_event_id
              originatorType: ORIGINATOR_TYPE_UNSPECIFIED
              incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
              unassign: "{}"
            isMuted: false
            status: INCIDENT_STATUS_UNSPECIFIED
      externalDocs:
        url: ""
      properties:
        incidents:
          additionalProperties:
            $ref: "#/components/schemas/Incident"
          description: Map of incident IDs to their corresponding incidents
          type: object
        notFoundIds:
          items:
            description: List of IDs that were not found
            example: "[\"not_found_id_1\",\"not_found_id_2\"]"
            type: string
          type: array
      required:
      - incidents
      - notFoundIds
      title: Batch get incidents response
      type: object
    CloseIncidentsResponse:
      description: Response containing the updated incidents after closing
      example:
        incidents:
        - displayLabels:
            key: displayLabels
          severity: INCIDENT_SEVERITY_UNSPECIFIED
          assignments:
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          contextualLabels:
            key: contextualLabels
          description: incident_description
          lastStateUpdateKey: last_state_update_key
          lastStateUpdateTime: 2024-01-01T00:00:00Z
          duration: duration
          createdAt: 2024-01-01T00:00:00Z
          name: incident_name
          id: incident_id
          metaLabels:
          - value: value
            key: key
          - value: value
            key: key
          state: INCIDENT_STATE_UNSPECIFIED
          closedAt: 2024-01-01T00:00:00Z
          events:
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          isMuted: false
          status: INCIDENT_STATUS_UNSPECIFIED
        - displayLabels:
            key: displayLabels
          severity: INCIDENT_SEVERITY_UNSPECIFIED
          assignments:
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          contextualLabels:
            key: contextualLabels
          description: incident_description
          lastStateUpdateKey: last_state_update_key
          lastStateUpdateTime: 2024-01-01T00:00:00Z
          duration: duration
          createdAt: 2024-01-01T00:00:00Z
          name: incident_name
          id: incident_id
          metaLabels:
          - value: value
            key: key
          - value: value
            key: key
          state: INCIDENT_STATE_UNSPECIFIED
          closedAt: 2024-01-01T00:00:00Z
          events:
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          isMuted: false
          status: INCIDENT_STATUS_UNSPECIFIED
      externalDocs:
        url: ""
      properties:
        incidents:
          items:
            $ref: "#/components/schemas/Incident"
          type: array
      required:
      - incidents
      title: Close incidents response
      type: object
    ColorsByAggregation:
      additionalProperties: false
      properties:
        aggregation:
          $ref: "#/components/schemas/ColorsByAggregation"
      type: object
    ColorsByGroupBy:
      additionalProperties: false
      properties:
        groupBy:
          $ref: "#/components/schemas/ColorsByGroupBy"
      type: object
    ColorsByStack:
      additionalProperties: false
      properties:
        stack:
          $ref: "#/components/schemas/ColorsByStack"
      type: object
    ContextualLabelValueWithCount:
      example:
        contextualLabelValue: contextual_label_value
        count: 10
      externalDocs:
        url: ""
      properties:
        contextualLabelValue:
          example: contextual_label_value
          type: string
        count:
          example: 10
          format: int32
          type: integer
      required:
      - contextualLabelValue
      - count
      title: Contextual label value with count
      type: object
    ContextualLabelValuesWithCount:
      example:
        valuesWithCount:
        - contextualLabelValue: contextual_label_value
          count: 10
        - contextualLabelValue: contextual_label_value
          count: 10
      externalDocs:
        url: ""
      properties:
        valuesWithCount:
          items:
            $ref: "#/components/schemas/ContextualLabelValueWithCount"
          type: array
      required:
      - valuesWithCount
      title: Contextual label values with count
      type: object
    ContextualLabels:
      externalDocs:
        url: ""
      properties:
        fieldName:
          example: field_name
          type: string
        fieldValue:
          example: field_value
          type: string
      required:
      - fieldName
      - fieldValue
      title: Incident contextual labels
      type: object
    DisplayLabelValueWithCount:
      example:
        displayLabelValue: display_label_value
        count: 10
      externalDocs:
        url: ""
      properties:
        count:
          example: 10
          format: int32
          type: integer
        displayLabelValue:
          example: display_label_value
          type: string
      required:
      - count
      - displayLabelValue
      title: Display label value with count
      type: object
    DisplayLabelValuesWithCount:
      example:
        valuesWithCount:
        - displayLabelValue: display_label_value
          count: 10
        - displayLabelValue: display_label_value
          count: 10
      externalDocs:
        url: ""
      properties:
        valuesWithCount:
          items:
            $ref: "#/components/schemas/DisplayLabelValueWithCount"
          type: array
      required:
      - valuesWithCount
      title: Display label values with count
      type: object
    FieldGroup:
      properties:
        name:
          type: string
        value:
          type: string
      type: object
    FilterPathAndValues:
      oneOf:
      - $ref: "#/components/schemas/FilterPathAndValuesMultipleValues"
      - $ref: "#/components/schemas/FilterPathAndValuesFilters"
    FilterPathAndValuesFilters:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        filters:
          $ref: "#/components/schemas/Filters"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
    FilterPathAndValuesMultipleValues:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        multipleValues:
          $ref: "#/components/schemas/MultipleValues"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
    Filters:
      description: This data structure represents a filter
      externalDocs:
        url: ""
      properties:
        operator:
          $ref: "#/components/schemas/v3.FilterOperator"
        pathAndValues:
          items:
            $ref: "#/components/schemas/FilterPathAndValues"
          type: array
      required:
      - pathAndValues
      title: Filters
      type: object
    GetFilterValuesResponse:
      description: Response containing available filter values for incidents
      example:
        filtersValues:
          displayLabels:
            key:
              valuesWithCount:
              - displayLabelValue: display_label_value
                count: 10
              - displayLabelValue: display_label_value
                count: 10
          assigneeWithCount:
          - count: 10
            assignee: assignee
          - count: 10
            assignee: assignee
          metaLabelsOp: FILTER_OPERATOR_OR_OR_UNSPECIFIED
          statusWithCount:
          - count: 10
            status: INCIDENT_STATUS_UNSPECIFIED
          - count: 10
            status: INCIDENT_STATUS_UNSPECIFIED
          severityWithCount:
          - severity: INCIDENT_SEVERITY_UNSPECIFIED
            count: 10
          - severity: INCIDENT_SEVERITY_UNSPECIFIED
            count: 10
          contextualLabels:
            key:
              valuesWithCount:
              - contextualLabelValue: contextual_label_value
                count: 10
              - contextualLabelValue: contextual_label_value
                count: 10
          metaLabelsWithCount:
          - metaLabel:
              value: value
              key: key
            count: 10
          - metaLabel:
              value: value
              key: key
            count: 10
          stateWithCount:
          - count: 10
            state: INCIDENT_STATE_UNSPECIFIED
          - count: 10
            state: INCIDENT_STATE_UNSPECIFIED
      externalDocs:
        url: ""
      properties:
        filtersValues:
          $ref: "#/components/schemas/IncidentQueryFiltersValues"
      required:
      - filtersValues
      title: Get filter values response
      type: object
    GetIncidentByEventIdResponse:
      description: Response containing the requested incident
      example:
        incident:
          displayLabels:
            key: displayLabels
          severity: INCIDENT_SEVERITY_UNSPECIFIED
          assignments:
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          contextualLabels:
            key: contextualLabels
          description: incident_description
          lastStateUpdateKey: last_state_update_key
          lastStateUpdateTime: 2024-01-01T00:00:00Z
          duration: duration
          createdAt: 2024-01-01T00:00:00Z
          name: incident_name
          id: incident_id
          metaLabels:
          - value: value
            key: key
          - value: value
            key: key
          state: INCIDENT_STATE_UNSPECIFIED
          closedAt: 2024-01-01T00:00:00Z
          events:
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          isMuted: false
          status: INCIDENT_STATUS_UNSPECIFIED
      externalDocs:
        url: ""
      properties:
        incident:
          $ref: "#/components/schemas/Incident"
      required:
      - incident
      title: Get incident by event id response
      type: object
    GetIncidentEventsResponse:
      description: Response containing all events associated with the requested incident
      example:
        incidentEvents:
        - operationalEvent:
            systemName: systemName
          id: incident_event_id
          originatorType: ORIGINATOR_TYPE_UNSPECIFIED
          incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
          unassign: "{}"
        - operationalEvent:
            systemName: systemName
          id: incident_event_id
          originatorType: ORIGINATOR_TYPE_UNSPECIFIED
          incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
          unassign: "{}"
      externalDocs:
        url: ""
      properties:
        incidentEvents:
          items:
            $ref: "#/components/schemas/IncidentEvent"
          type: array
      title: Get incident events response
      type: object
    GetIncidentResponse:
      description: Response containing the requested incident
      example:
        incident:
          displayLabels:
            key: displayLabels
          severity: INCIDENT_SEVERITY_UNSPECIFIED
          assignments:
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          contextualLabels:
            key: contextualLabels
          description: incident_description
          lastStateUpdateKey: last_state_update_key
          lastStateUpdateTime: 2024-01-01T00:00:00Z
          duration: duration
          createdAt: 2024-01-01T00:00:00Z
          name: incident_name
          id: incident_id
          metaLabels:
          - value: value
            key: key
          - value: value
            key: key
          state: INCIDENT_STATE_UNSPECIFIED
          closedAt: 2024-01-01T00:00:00Z
          events:
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          isMuted: false
          status: INCIDENT_STATUS_UNSPECIFIED
      externalDocs:
        url: ""
      properties:
        incident:
          $ref: "#/components/schemas/Incident"
      required:
      - incident
      title: Get incident response
      type: object
    GroupByContextualLabel:
      additionalProperties: false
      externalDocs:
        url: ""
      properties:
        contextualLabel:
          description: The contextual label to group by.
          type: string
        orderByDirection:
          $ref: "#/components/schemas/v1.OrderByDirection"
      required:
      - field
      title: Incident group by
      type: object
    GroupByIncidentField:
      additionalProperties: false
      externalDocs:
        url: ""
      properties:
        incidentField:
          $ref: "#/components/schemas/IncidentFields"
        orderByDirection:
          $ref: "#/components/schemas/v1.OrderByDirection"
      required:
      - field
      title: Incident group by
      type: object
    GroupByValues:
      oneOf:
      - $ref: "#/components/schemas/GroupByValuesIncidentField"
      - $ref: "#/components/schemas/GroupByValuesContextualLabels"
    GroupByValuesContextualLabels:
      additionalProperties: false
      properties:
        contextualLabels:
          $ref: "#/components/schemas/ContextualLabels"
      type: object
    GroupByValuesIncidentField:
      additionalProperties: false
      example:
        incidentField:
          status: null
      properties:
        incidentField:
          $ref: "#/components/schemas/IncidentFieldOneOf"
      type: object
    Incident:
      example:
        displayLabels:
          key: displayLabels
        severity: INCIDENT_SEVERITY_UNSPECIFIED
        assignments:
        - assignedBy:
            userId: user_id
          assignedTo:
            userId: user_id
        - assignedBy:
            userId: user_id
          assignedTo:
            userId: user_id
        contextualLabels:
          key: contextualLabels
        description: incident_description
        lastStateUpdateKey: last_state_update_key
        lastStateUpdateTime: 2024-01-01T00:00:00Z
        duration: duration
        createdAt: 2024-01-01T00:00:00Z
        name: incident_name
        id: incident_id
        metaLabels:
        - value: value
          key: key
        - value: value
          key: key
        state: INCIDENT_STATE_UNSPECIFIED
        closedAt: 2024-01-01T00:00:00Z
        events:
        - operationalEvent:
            systemName: systemName
          id: incident_event_id
          originatorType: ORIGINATOR_TYPE_UNSPECIFIED
          incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
          unassign: "{}"
        - operationalEvent:
            systemName: systemName
          id: incident_event_id
          originatorType: ORIGINATOR_TYPE_UNSPECIFIED
          incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
          unassign: "{}"
        isMuted: false
        status: INCIDENT_STATUS_UNSPECIFIED
      externalDocs:
        url: ""
      properties:
        assignments:
          items:
            $ref: "#/components/schemas/Assignment"
          type: array
        closedAt:
          example: 2024-01-01T00:00:00Z
          format: date-time
          type: string
        contextualLabels:
          additionalProperties:
            type: string
          type: object
        createdAt:
          example: 2024-01-01T00:00:00Z
          format: date-time
          type: string
        description:
          example: incident_description
          type: string
        displayLabels:
          additionalProperties:
            type: string
          type: object
        duration:
          type: string
        events:
          items:
            $ref: "#/components/schemas/IncidentEvent"
          type: array
        id:
          example: incident_id
          type: string
        isMuted:
          example: false
          type: boolean
        lastStateUpdateKey:
          example: last_state_update_key
          type: string
        lastStateUpdateTime:
          example: 2024-01-01T00:00:00Z
          format: date-time
          type: string
        metaLabels:
          items:
            $ref: "#/components/schemas/incidents.v1.MetaLabel"
          type: array
        name:
          example: incident_name
          type: string
        severity:
          $ref: "#/components/schemas/IncidentSeverity"
        state:
          $ref: "#/components/schemas/IncidentState"
        status:
          $ref: "#/components/schemas/IncidentStatus"
      required:
      - assignments
      - contextualLabels
      - createdAt
      - displayLabels
      - duration
      - events
      - id
      - lastStateUpdateKey
      - lastStateUpdateTime
      - severity
      - state
      - status
      title: Incident
      type: object
    IncidentAggregation:
      example:
        groupBysValue:
        - incidentField:
            status: null
        - incidentField:
            status: null
        aggAssignmentsCount:
        - count: 10
          assignedTo:
            userId: user_id
        - count: 10
          assignedTo:
            userId: user_id
        lastClosedAt: 2000-01-23T04:56:07.000+00:00
        aggStatusCount:
        - count: 10
          status: INCIDENT_STATUS_UNSPECIFIED
        - count: 10
          status: INCIDENT_STATUS_UNSPECIFIED
        aggSeverityCount:
        - severity: INCIDENT_SEVERITY_UNSPECIFIED
          count: 10
        - severity: INCIDENT_SEVERITY_UNSPECIFIED
          count: 10
        allValuesCount: 0
        listIncidentsId:
        - listIncidentsId
        - listIncidentsId
        aggMetaLabelsCount:
        - metaLabel:
            value: value
            key: key
          count: 10
        - metaLabel:
            value: value
            key: key
          count: 10
        aggStateCount:
        - count: 10
          state: INCIDENT_STATE_UNSPECIFIED
        - count: 10
          state: INCIDENT_STATE_UNSPECIFIED
        firstCreatedAt: 2000-01-23T04:56:07.000+00:00
        lastStateUpdateTime: 2000-01-23T04:56:07.000+00:00
      externalDocs:
        url: ""
      properties:
        aggAssignmentsCount:
          items:
            $ref: "#/components/schemas/IncidentAssignmentCount"
          type: array
        aggMetaLabelsCount:
          items:
            $ref: "#/components/schemas/IncidentMetaLabelsCount"
          type: array
        aggSeverityCount:
          items:
            $ref: "#/components/schemas/IncidentSeverityCount"
          type: array
        aggStateCount:
          items:
            $ref: "#/components/schemas/IncidentStateCount"
          type: array
        aggStatusCount:
          items:
            $ref: "#/components/schemas/IncidentStatusCount"
          type: array
        allValuesCount:
          format: int64
          type: integer
        firstCreatedAt:
          format: date-time
          type: string
        groupBysValue:
          items:
            $ref: "#/components/schemas/GroupByValues"
          type: array
        lastClosedAt:
          format: date-time
          type: string
        lastStateUpdateTime:
          format: date-time
          type: string
        listIncidentsId:
          items:
            type: string
          type: array
      required:
      - aggAssignmentsCount
      - aggMetaLabelsCount
      - aggSeverityCount
      - aggStateCount
      - aggStatusCount
      - allValuesCount
      - firstCreatedAt
      - groupBysValue
      - lastClosedAt
      - lastStateUpdateTime
      - listIncidentsId
      title: Incident aggregation
      type: object
    IncidentAssignmentCount:
      example:
        count: 10
        assignedTo:
          userId: user_id
      externalDocs:
        url: ""
      properties:
        assignedTo:
          $ref: "#/components/schemas/UserDetails"
        count:
          example: 10
          format: int64
          type: integer
      required:
      - assignedTo
      - count
      title: Incident assignment count
      type: object
    IncidentEvent:
      oneOf:
      - $ref: "#/components/schemas/IncidentEventUnassignOperationalEvent"
      - $ref: "#/components/schemas/IncidentEventUpsertStateAdministrativeEvent"
      - $ref: "#/components/schemas/IncidentEventUpsertStateOperationalEvent"
      - $ref: "#/components/schemas/IncidentEventAcknowledgeAdministrativeEvent"
      - $ref: "#/components/schemas/IncidentEventCloseAdministrativeEvent"
      - $ref: "#/components/schemas/IncidentEventSnoozeIndicatorOperationalEvent"
      - $ref: "#/components/schemas/IncidentEventUnassignAdministrativeEvent"
      - $ref: "#/components/schemas/IncidentEventAcknowledgeOperationalEvent"
      - $ref: "#/components/schemas/IncidentEventCloseOperationalEvent"
      - $ref: "#/components/schemas/IncidentEventSnoozeIndicatorAdministrativeEvent"
      - $ref: "#/components/schemas/IncidentEventAssignmentAdministrativeEvent"
      - $ref: "#/components/schemas/IncidentEventAssignmentOperationalEvent"
    IncidentEventAcknowledge:
      properties:
        acknowledgedBy:
          $ref: "#/components/schemas/UserDetails"
      type: object
    IncidentEventAcknowledgeAdministrativeEvent:
      additionalProperties: false
      externalDocs:
        url: ""
      properties:
        acknowledge:
          $ref: "#/components/schemas/IncidentEventAcknowledge"
        administrativeEvent:
          $ref: "#/components/schemas/IncidentEventOriginatorAdministrative"
        id:
          description: The ID of the incident event
          example: incident_event_id
          type: string
        incidentEventType:
          $ref: "#/components/schemas/IncidentEventType"
        originatorType:
          $ref: "#/components/schemas/OriginatorType"
      required:
      - id
      - incidentEventPayload
      - incidentEventType
      - originator
      - originatorType
      title: Incident event
      type: object
    IncidentEventAcknowledgeOperationalEvent:
      additionalProperties: false
      externalDocs:
        url: ""
      properties:
        acknowledge:
          $ref: "#/components/schemas/IncidentEventAcknowledge"
        id:
          description: The ID of the incident event
          example: incident_event_id
          type: string
        incidentEventType:
          $ref: "#/components/schemas/IncidentEventType"
        operationalEvent:
          $ref: "#/components/schemas/IncidentEventOriginatorOperational"
        originatorType:
          $ref: "#/components/schemas/OriginatorType"
      required:
      - id
      - incidentEventPayload
      - incidentEventType
      - originator
      - originatorType
      title: Incident event
      type: object
    IncidentEventAlertType:
      enum:
      - INCIDENT_EVENT_ALERT_TYPE_STANDARD_OR_UNSPECIFIED
      - INCIDENT_EVENT_ALERT_TYPE_METRIC
      - INCIDENT_EVENT_ALERT_TYPE_NEW_VALUE
      - INCIDENT_EVENT_ALERT_TYPE_RATIO
      - INCIDENT_EVENT_ALERT_TYPE_TIME_RELATIVE
      - INCIDENT_EVENT_ALERT_TYPE_UNIQUE_COUNT
      - INCIDENT_EVENT_ALERT_TYPE_TRACING
      - INCIDENT_EVENT_ALERT_TYPE_FLOW
      - INCIDENT_EVENT_ALERT_TYPE_SLO
      type: string
    IncidentEventAssign:
      externalDocs:
        url: ""
      properties:
        assignment:
          $ref: "#/components/schemas/Assignment"
      title: Incident event assignment details
      type: object
    IncidentEventAssignmentAdministrativeEvent:
      additionalProperties: false
      externalDocs:
        url: ""
      properties:
        administrativeEvent:
          $ref: "#/components/schemas/IncidentEventOriginatorAdministrative"
        assignment:
          $ref: "#/components/schemas/IncidentEventAssign"
        id:
          description: The ID of the incident event
          example: incident_event_id
          type: string
        incidentEventType:
          $ref: "#/components/schemas/IncidentEventType"
        originatorType:
          $ref: "#/components/schemas/OriginatorType"
      required:
      - id
      - incidentEventPayload
      - incidentEventType
      - originator
      - originatorType
      title: Incident event
      type: object
    IncidentEventAssignmentOperationalEvent:
      additionalProperties: false
      externalDocs:
        url: ""
      properties:
        assignment:
          $ref: "#/components/schemas/IncidentEventAssign"
        id:
          description: The ID of the incident event
          example: incident_event_id
          type: string
        incidentEventType:
          $ref: "#/components/schemas/IncidentEventType"
        operationalEvent:
          $ref: "#/components/schemas/IncidentEventOriginatorOperational"
        originatorType:
          $ref: "#/components/schemas/OriginatorType"
      required:
      - id
      - incidentEventPayload
      - incidentEventType
      - originator
      - originatorType
      title: Incident event
      type: object
    IncidentEventClose:
      properties:
        closedBy:
          $ref: "#/components/schemas/UserDetails"
      type: object
    IncidentEventCloseAdministrativeEvent:
      additionalProperties: false
      externalDocs:
        url: ""
      properties:
        administrativeEvent:
          $ref: "#/components/schemas/IncidentEventOriginatorAdministrative"
        close:
          $ref: "#/components/schemas/IncidentEventClose"
        id:
          description: The ID of the incident event
          example: incident_event_id
          type: string
        incidentEventType:
          $ref: "#/components/schemas/IncidentEventType"
        originatorType:
          $ref: "#/components/schemas/OriginatorType"
      required:
      - id
      - incidentEventPayload
      - incidentEventType
      - originator
      - originatorType
      title: Incident event
      type: object
    IncidentEventCloseOperationalEvent:
      additionalProperties: false
      externalDocs:
        url: ""
      properties:
        close:
          $ref: "#/components/schemas/IncidentEventClose"
        id:
          description: The ID of the incident event
          example: incident_event_id
          type: string
        incidentEventType:
          $ref: "#/components/schemas/IncidentEventType"
        operationalEvent:
          $ref: "#/components/schemas/IncidentEventOriginatorOperational"
        originatorType:
          $ref: "#/components/schemas/OriginatorType"
      required:
      - id
      - incidentEventPayload
      - incidentEventType
      - originator
      - originatorType
      title: Incident event
      type: object
    IncidentEventExtended:
      example:
        incidentEvent:
          operationalEvent:
            systemName: systemName
          id: incident_event_id
          originatorType: ORIGINATOR_TYPE_UNSPECIFIED
          incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
          unassign: "{}"
        cxEventKey: cxEventKey
        incidentEventExtendedMetadata:
          alertType: INCIDENT_EVENT_ALERT_TYPE_STANDARD_OR_UNSPECIFIED
          incidentState: INCIDENT_STATE_UNSPECIFIED
          alertName: alertName
          alertLabels:
          - value: value
            key: key
          - value: value
            key: key
          incidentSeverity: INCIDENT_SEVERITY_UNSPECIFIED
          alertGroupByFields:
          - alertGroupByFields
          - alertGroupByFields
          alertId: alertId
          isMuted: true
          incidentPermutation:
            key: incidentPermutation
          incidentStatus: INCIDENT_STATUS_UNSPECIFIED
        cxEventTimestamp: 2000-01-23T04:56:07.000+00:00
      externalDocs:
        url: ""
      properties:
        cxEventKey:
          type: string
        cxEventTimestamp:
          format: date-time
          type: string
        incidentEvent:
          $ref: "#/components/schemas/IncidentEvent"
        incidentEventExtendedMetadata:
          $ref: "#/components/schemas/IncidentEventExtendedMetadata"
      required:
      - cxEventKey
      - cxEventTimestamp
      - incidentEvent
      title: Extended incident event
      type: object
    IncidentEventExtendedMetadata:
      example:
        alertType: INCIDENT_EVENT_ALERT_TYPE_STANDARD_OR_UNSPECIFIED
        incidentState: INCIDENT_STATE_UNSPECIFIED
        alertName: alertName
        alertLabels:
        - value: value
          key: key
        - value: value
          key: key
        incidentSeverity: INCIDENT_SEVERITY_UNSPECIFIED
        alertGroupByFields:
        - alertGroupByFields
        - alertGroupByFields
        alertId: alertId
        isMuted: true
        incidentPermutation:
          key: incidentPermutation
        incidentStatus: INCIDENT_STATUS_UNSPECIFIED
      properties:
        alertGroupByFields:
          items:
            type: string
          type: array
        alertId:
          type: string
        alertLabels:
          items:
            $ref: "#/components/schemas/incidents.v1.MetaLabel"
          type: array
        alertName:
          type: string
        alertType:
          $ref: "#/components/schemas/IncidentEventAlertType"
        incidentPermutation:
          additionalProperties:
            type: string
          type: object
        incidentSeverity:
          $ref: "#/components/schemas/IncidentSeverity"
        incidentState:
          $ref: "#/components/schemas/IncidentState"
        incidentStatus:
          $ref: "#/components/schemas/IncidentStatus"
        isMuted:
          type: boolean
      type: object
    IncidentEventOrderByFieldType:
      enum:
      - INCIDENT_EVENT_ORDER_BY_FIELD_TYPE_TIMESTAMP_OR_UNSPECIFIED
      type: string
    IncidentEventOriginatorAdministrative:
      properties:
        userId:
          type: string
      type: object
    IncidentEventOriginatorOperational:
      example:
        systemName: systemName
      properties:
        systemName:
          type: string
      type: object
    IncidentEventSnoozeIndicator:
      externalDocs:
        url: ""
      properties:
        durationMinutes:
          format: int32
          type: integer
        startTime:
          format: date-time
          type: string
        userId:
          type: string
      title: Incident event snooze indicator
      type: object
    IncidentEventSnoozeIndicatorAdministrativeEvent:
      additionalProperties: false
      externalDocs:
        url: ""
      properties:
        administrativeEvent:
          $ref: "#/components/schemas/IncidentEventOriginatorAdministrative"
        id:
          description: The ID of the incident event
          example: incident_event_id
          type: string
        incidentEventType:
          $ref: "#/components/schemas/IncidentEventType"
        originatorType:
          $ref: "#/components/schemas/OriginatorType"
        snoozeIndicator:
          $ref: "#/components/schemas/IncidentEventSnoozeIndicator"
      required:
      - id
      - incidentEventPayload
      - incidentEventType
      - originator
      - originatorType
      title: Incident event
      type: object
    IncidentEventSnoozeIndicatorOperationalEvent:
      additionalProperties: false
      externalDocs:
        url: ""
      properties:
        id:
          description: The ID of the incident event
          example: incident_event_id
          type: string
        incidentEventType:
          $ref: "#/components/schemas/IncidentEventType"
        operationalEvent:
          $ref: "#/components/schemas/IncidentEventOriginatorOperational"
        originatorType:
          $ref: "#/components/schemas/OriginatorType"
        snoozeIndicator:
          $ref: "#/components/schemas/IncidentEventSnoozeIndicator"
      required:
      - id
      - incidentEventPayload
      - incidentEventType
      - originator
      - originatorType
      title: Incident event
      type: object
    IncidentEventType:
      enum:
      - INCIDENT_EVENT_TYPE_UNSPECIFIED
      - INCIDENT_EVENT_TYPE_UPSERT_STATE
      - INCIDENT_EVENT_TYPE_OPEN
      - INCIDENT_EVENT_TYPE_CLOSE
      - INCIDENT_EVENT_TYPE_SNOOZE_INDICATOR
      - INCIDENT_EVENT_TYPE_ASSIGN
      - INCIDENT_EVENT_TYPE_UNASSIGN
      - INCIDENT_EVENT_TYPE_ACKNOWLEDGE
      type: string
    IncidentEventUnassign:
      type: object
    IncidentEventUnassignAdministrativeEvent:
      additionalProperties: false
      externalDocs:
        url: ""
      properties:
        administrativeEvent:
          $ref: "#/components/schemas/IncidentEventOriginatorAdministrative"
        id:
          description: The ID of the incident event
          example: incident_event_id
          type: string
        incidentEventType:
          $ref: "#/components/schemas/IncidentEventType"
        originatorType:
          $ref: "#/components/schemas/OriginatorType"
        unassign:
          type: object
      required:
      - id
      - incidentEventPayload
      - incidentEventType
      - originator
      - originatorType
      title: Incident event
      type: object
    IncidentEventUnassignOperationalEvent:
      additionalProperties: false
      example:
        operationalEvent:
          systemName: systemName
        id: incident_event_id
        originatorType: ORIGINATOR_TYPE_UNSPECIFIED
        incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
        unassign: "{}"
      externalDocs:
        url: ""
      properties:
        id:
          description: The ID of the incident event
          example: incident_event_id
          type: string
        incidentEventType:
          $ref: "#/components/schemas/IncidentEventType"
        operationalEvent:
          $ref: "#/components/schemas/IncidentEventOriginatorOperational"
        originatorType:
          $ref: "#/components/schemas/OriginatorType"
        unassign:
          type: object
      required:
      - id
      - incidentEventPayload
      - incidentEventType
      - originator
      - originatorType
      title: Incident event
      type: object
    IncidentEventUpsertState:
      externalDocs:
        url: ""
      properties:
        isMuted:
          type: boolean
        payload:
          $ref: "#/components/schemas/UpsertIncidentStatePayload"
        stateType:
          $ref: "#/components/schemas/UpsertIncidentStateType"
      required:
      - payload
      - stateType
      title: Incident event upsert state
      type: object
    IncidentEventUpsertStateAdministrativeEvent:
      additionalProperties: false
      externalDocs:
        url: ""
      properties:
        administrativeEvent:
          $ref: "#/components/schemas/IncidentEventOriginatorAdministrative"
        id:
          description: The ID of the incident event
          example: incident_event_id
          type: string
        incidentEventType:
          $ref: "#/components/schemas/IncidentEventType"
        originatorType:
          $ref: "#/components/schemas/OriginatorType"
        upsertState:
          $ref: "#/components/schemas/IncidentEventUpsertState"
      required:
      - id
      - incidentEventPayload
      - incidentEventType
      - originator
      - originatorType
      title: Incident event
      type: object
    IncidentEventUpsertStateOperationalEvent:
      additionalProperties: false
      externalDocs:
        url: ""
      properties:
        id:
          description: The ID of the incident event
          example: incident_event_id
          type: string
        incidentEventType:
          $ref: "#/components/schemas/IncidentEventType"
        operationalEvent:
          $ref: "#/components/schemas/IncidentEventOriginatorOperational"
        originatorType:
          $ref: "#/components/schemas/OriginatorType"
        upsertState:
          $ref: "#/components/schemas/IncidentEventUpsertState"
      required:
      - id
      - incidentEventPayload
      - incidentEventType
      - originator
      - originatorType
      title: Incident event
      type: object
    IncidentFieldOneOf:
      oneOf:
      - $ref: "#/components/schemas/IncidentFieldOneOfStatus"
      - $ref: "#/components/schemas/IncidentFieldOneOfLastStateUpdateTime"
      - $ref: "#/components/schemas/IncidentFieldOneOfApplicationName"
      - $ref: "#/components/schemas/IncidentFieldOneOfDuration"
      - $ref: "#/components/schemas/IncidentFieldOneOfClosedAt"
      - $ref: "#/components/schemas/IncidentFieldOneOfState"
      - $ref: "#/components/schemas/IncidentFieldOneOfSubsystemName"
      - $ref: "#/components/schemas/IncidentFieldOneOfId"
      - $ref: "#/components/schemas/IncidentFieldOneOfSeverity"
      - $ref: "#/components/schemas/IncidentFieldOneOfName"
      - $ref: "#/components/schemas/IncidentFieldOneOfCreatedAt"
    IncidentFieldOneOfApplicationName:
      additionalProperties: false
      properties:
        applicationName:
          type: string
      type: object
    IncidentFieldOneOfClosedAt:
      additionalProperties: false
      properties:
        closedAt:
          format: date-time
          type: string
      type: object
    IncidentFieldOneOfCreatedAt:
      additionalProperties: false
      properties:
        createdAt:
          format: date-time
          type: string
      type: object
    IncidentFieldOneOfDuration:
      additionalProperties: false
      properties:
        duration:
          type: string
      type: object
    IncidentFieldOneOfId:
      additionalProperties: false
      properties:
        id:
          type: string
      type: object
    IncidentFieldOneOfLastStateUpdateTime:
      additionalProperties: false
      properties:
        lastStateUpdateTime:
          format: date-time
          type: string
      type: object
    IncidentFieldOneOfName:
      additionalProperties: false
      properties:
        name:
          type: string
      type: object
    IncidentFieldOneOfSeverity:
      additionalProperties: false
      properties:
        severity:
          $ref: "#/components/schemas/IncidentSeverity"
      type: object
    IncidentFieldOneOfState:
      additionalProperties: false
      properties:
        state:
          $ref: "#/components/schemas/IncidentState"
      type: object
    IncidentFieldOneOfStatus:
      additionalProperties: false
      example:
        status: null
      properties:
        status:
          $ref: "#/components/schemas/IncidentStatus"
      type: object
    IncidentFieldOneOfSubsystemName:
      additionalProperties: false
      properties:
        subsystemName:
          type: string
      type: object
    IncidentFields:
      enum:
      - INCIDENTS_FIELDS_UNSPECIFIED
      - INCIDENTS_FIELDS_ID
      - INCIDENTS_FIELDS_SEVERITY
      - INCIDENTS_FIELDS_NAME
      - INCIDENTS_FIELDS_CREATED_TIME
      - INCIDENTS_FIELDS_CLOSED_TIME
      - INCIDENTS_FIELDS_STATE
      - INCIDENTS_FIELDS_STATUS
      - INCIDENTS_FIELDS_LAST_STATE_UPDATE_TIME
      - INCIDENTS_FIELDS_APPLICATION_NAME
      - INCIDENTS_FIELDS_SUBSYSTEM_NAME
      - INCIDENTS_FIELDS_DURATION
      type: string
    IncidentMetaLabelsCount:
      example:
        metaLabel:
          value: value
          key: key
        count: 10
      externalDocs:
        url: ""
      properties:
        count:
          example: 10
          format: int64
          type: integer
        metaLabel:
          $ref: "#/components/schemas/incidents.v1.MetaLabel"
      required:
      - count
      - metaLabel
      title: Incident meta labels count
      type: object
    IncidentMetaLabelsWithCount:
      example:
        metaLabel:
          value: value
          key: key
        count: 10
      externalDocs:
        url: ""
      properties:
        count:
          example: 10
          format: int32
          type: integer
        metaLabel:
          $ref: "#/components/schemas/incidents.v1.MetaLabel"
      required:
      - count
      - metaLabel
      title: Incident meta labels with count
      type: object
    IncidentQueryFiltersValues:
      example:
        displayLabels:
          key:
            valuesWithCount:
            - displayLabelValue: display_label_value
              count: 10
            - displayLabelValue: display_label_value
              count: 10
        assigneeWithCount:
        - count: 10
          assignee: assignee
        - count: 10
          assignee: assignee
        metaLabelsOp: FILTER_OPERATOR_OR_OR_UNSPECIFIED
        statusWithCount:
        - count: 10
          status: INCIDENT_STATUS_UNSPECIFIED
        - count: 10
          status: INCIDENT_STATUS_UNSPECIFIED
        severityWithCount:
        - severity: INCIDENT_SEVERITY_UNSPECIFIED
          count: 10
        - severity: INCIDENT_SEVERITY_UNSPECIFIED
          count: 10
        contextualLabels:
          key:
            valuesWithCount:
            - contextualLabelValue: contextual_label_value
              count: 10
            - contextualLabelValue: contextual_label_value
              count: 10
        metaLabelsWithCount:
        - metaLabel:
            value: value
            key: key
          count: 10
        - metaLabel:
            value: value
            key: key
          count: 10
        stateWithCount:
        - count: 10
          state: INCIDENT_STATE_UNSPECIFIED
        - count: 10
          state: INCIDENT_STATE_UNSPECIFIED
      externalDocs:
        url: ""
      properties:
        assigneeWithCount:
          items:
            $ref: "#/components/schemas/AssigneeWithCount"
          type: array
        contextualLabels:
          additionalProperties:
            $ref: "#/components/schemas/ContextualLabelValuesWithCount"
          type: object
        displayLabels:
          additionalProperties:
            $ref: "#/components/schemas/DisplayLabelValuesWithCount"
          type: object
        metaLabelsOp:
          $ref: "#/components/schemas/v1.FilterOperator"
        metaLabelsWithCount:
          items:
            $ref: "#/components/schemas/IncidentMetaLabelsWithCount"
          type: array
        severityWithCount:
          items:
            $ref: "#/components/schemas/IncidentSeverityWithCount"
          type: array
        stateWithCount:
          items:
            $ref: "#/components/schemas/IncidentStateWithCount"
          type: array
        statusWithCount:
          items:
            $ref: "#/components/schemas/IncidentStatusWithCount"
          type: array
      required:
      - assigneeWithCount
      - contextualLabels
      - displayLabels
      - metaLabelsOp
      - metaLabelsWithCount
      - severityWithCount
      - stateWithCount
      - statusWithCount
      title: Incident query filter values
      type: object
    IncidentSeverity:
      enum:
      - INCIDENT_SEVERITY_UNSPECIFIED
      - INCIDENT_SEVERITY_INFO
      - INCIDENT_SEVERITY_WARNING
      - INCIDENT_SEVERITY_ERROR
      - INCIDENT_SEVERITY_CRITICAL
      - INCIDENT_SEVERITY_LOW
      type: string
    IncidentSeverityCount:
      example:
        severity: INCIDENT_SEVERITY_UNSPECIFIED
        count: 10
      externalDocs:
        url: ""
      properties:
        count:
          example: 10
          format: int64
          type: integer
        severity:
          $ref: "#/components/schemas/IncidentSeverity"
      required:
      - count
      - severity
      title: Incident severity count
      type: object
    IncidentSeverityWithCount:
      example:
        severity: INCIDENT_SEVERITY_UNSPECIFIED
        count: 10
      externalDocs:
        url: ""
      properties:
        count:
          example: 10
          format: int32
          type: integer
        severity:
          $ref: "#/components/schemas/IncidentSeverity"
      required:
      - count
      - severity
      title: Incident severity with count
      type: object
    IncidentState:
      enum:
      - INCIDENT_STATE_UNSPECIFIED
      - INCIDENT_STATE_TRIGGERED
      - INCIDENT_STATE_RESOLVED
      type: string
    IncidentStateCount:
      example:
        count: 10
        state: INCIDENT_STATE_UNSPECIFIED
      externalDocs:
        url: ""
      properties:
        count:
          example: 10
          format: int64
          type: integer
        state:
          $ref: "#/components/schemas/IncidentState"
      required:
      - count
      - state
      title: Incident state count
      type: object
    IncidentStateWithCount:
      example:
        count: 10
        state: INCIDENT_STATE_UNSPECIFIED
      externalDocs:
        url: ""
      properties:
        count:
          example: 10
          format: int32
          type: integer
        state:
          $ref: "#/components/schemas/IncidentState"
      required:
      - count
      - state
      title: Incident state with count
      type: object
    IncidentStatus:
      enum:
      - INCIDENT_STATUS_UNSPECIFIED
      - INCIDENT_STATUS_TRIGGERED
      - INCIDENT_STATUS_ACKNOWLEDGED
      - INCIDENT_STATUS_RESOLVED
      type: string
    IncidentStatusCount:
      example:
        count: 10
        status: INCIDENT_STATUS_UNSPECIFIED
      externalDocs:
        url: ""
      properties:
        count:
          example: 10
          format: int64
          type: integer
        status:
          $ref: "#/components/schemas/IncidentStatus"
      required:
      - count
      - status
      title: Incident status count
      type: object
    IncidentStatusWithCount:
      example:
        count: 10
        status: INCIDENT_STATUS_UNSPECIFIED
      externalDocs:
        url: ""
      properties:
        count:
          example: 10
          format: int32
          type: integer
        status:
          $ref: "#/components/schemas/IncidentStatus"
      required:
      - count
      - status
      title: Incident status with count
      type: object
    ListIncidentAggregationsResponse:
      description: Response containing aggregated incident data and pagination information
      example:
        pagination:
          totalSize: 100
          nextPageToken: next_page_token
        incidentAggs:
        - groupBysValue:
          - incidentField:
              status: null
          - incidentField:
              status: null
          aggAssignmentsCount:
          - count: 10
            assignedTo:
              userId: user_id
          - count: 10
            assignedTo:
              userId: user_id
          lastClosedAt: 2000-01-23T04:56:07.000+00:00
          aggStatusCount:
          - count: 10
            status: INCIDENT_STATUS_UNSPECIFIED
          - count: 10
            status: INCIDENT_STATUS_UNSPECIFIED
          aggSeverityCount:
          - severity: INCIDENT_SEVERITY_UNSPECIFIED
            count: 10
          - severity: INCIDENT_SEVERITY_UNSPECIFIED
            count: 10
          allValuesCount: 0
          listIncidentsId:
          - listIncidentsId
          - listIncidentsId
          aggMetaLabelsCount:
          - metaLabel:
              value: value
              key: key
            count: 10
          - metaLabel:
              value: value
              key: key
            count: 10
          aggStateCount:
          - count: 10
            state: INCIDENT_STATE_UNSPECIFIED
          - count: 10
            state: INCIDENT_STATE_UNSPECIFIED
          firstCreatedAt: 2000-01-23T04:56:07.000+00:00
          lastStateUpdateTime: 2000-01-23T04:56:07.000+00:00
        - groupBysValue:
          - incidentField:
              status: null
          - incidentField:
              status: null
          aggAssignmentsCount:
          - count: 10
            assignedTo:
              userId: user_id
          - count: 10
            assignedTo:
              userId: user_id
          lastClosedAt: 2000-01-23T04:56:07.000+00:00
          aggStatusCount:
          - count: 10
            status: INCIDENT_STATUS_UNSPECIFIED
          - count: 10
            status: INCIDENT_STATUS_UNSPECIFIED
          aggSeverityCount:
          - severity: INCIDENT_SEVERITY_UNSPECIFIED
            count: 10
          - severity: INCIDENT_SEVERITY_UNSPECIFIED
            count: 10
          allValuesCount: 0
          listIncidentsId:
          - listIncidentsId
          - listIncidentsId
          aggMetaLabelsCount:
          - metaLabel:
              value: value
              key: key
            count: 10
          - metaLabel:
              value: value
              key: key
            count: 10
          aggStateCount:
          - count: 10
            state: INCIDENT_STATE_UNSPECIFIED
          - count: 10
            state: INCIDENT_STATE_UNSPECIFIED
          firstCreatedAt: 2000-01-23T04:56:07.000+00:00
          lastStateUpdateTime: 2000-01-23T04:56:07.000+00:00
      externalDocs:
        url: ""
      properties:
        incidentAggs:
          items:
            $ref: "#/components/schemas/IncidentAggregation"
          type: array
        pagination:
          $ref: "#/components/schemas/v1.PaginationResponse"
      required:
      - incidentAggs
      - pagination
      title: List incident aggregations response
      type: object
    ListIncidentEventsFilterValuesResponse:
      description: A response containing available filter values for incident events
      example:
        filtersValues:
          displayLabels:
            key:
              valuesWithCount:
              - displayLabelValue: display_label_value
                count: 10
              - displayLabelValue: display_label_value
                count: 10
          assigneeWithCount:
          - count: 10
            assignee: assignee
          - count: 10
            assignee: assignee
          metaLabelsOp: FILTER_OPERATOR_OR_OR_UNSPECIFIED
          statusWithCount:
          - count: 10
            status: INCIDENT_STATUS_UNSPECIFIED
          - count: 10
            status: INCIDENT_STATUS_UNSPECIFIED
          severityWithCount:
          - severity: INCIDENT_SEVERITY_UNSPECIFIED
            count: 10
          - severity: INCIDENT_SEVERITY_UNSPECIFIED
            count: 10
          contextualLabels:
            key:
              valuesWithCount:
              - contextualLabelValue: contextual_label_value
                count: 10
              - contextualLabelValue: contextual_label_value
                count: 10
          metaLabelsWithCount:
          - metaLabel:
              value: value
              key: key
            count: 10
          - metaLabel:
              value: value
              key: key
            count: 10
          stateWithCount:
          - count: 10
            state: INCIDENT_STATE_UNSPECIFIED
          - count: 10
            state: INCIDENT_STATE_UNSPECIFIED
      externalDocs:
        url: ""
      properties:
        filtersValues:
          $ref: "#/components/schemas/IncidentQueryFiltersValues"
      title: List incident events filter values response
      type: object
    ListIncidentEventsResponse:
      description: A response containing a list of incident events and pagination
        information
      example:
        pagination:
          totalSize: 100
          nextPageToken: next_page_token
        items:
        - incidentEvent:
            operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          cxEventKey: cxEventKey
          incidentEventExtendedMetadata:
            alertType: INCIDENT_EVENT_ALERT_TYPE_STANDARD_OR_UNSPECIFIED
            incidentState: INCIDENT_STATE_UNSPECIFIED
            alertName: alertName
            alertLabels:
            - value: value
              key: key
            - value: value
              key: key
            incidentSeverity: INCIDENT_SEVERITY_UNSPECIFIED
            alertGroupByFields:
            - alertGroupByFields
            - alertGroupByFields
            alertId: alertId
            isMuted: true
            incidentPermutation:
              key: incidentPermutation
            incidentStatus: INCIDENT_STATUS_UNSPECIFIED
          cxEventTimestamp: 2000-01-23T04:56:07.000+00:00
        - incidentEvent:
            operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          cxEventKey: cxEventKey
          incidentEventExtendedMetadata:
            alertType: INCIDENT_EVENT_ALERT_TYPE_STANDARD_OR_UNSPECIFIED
            incidentState: INCIDENT_STATE_UNSPECIFIED
            alertName: alertName
            alertLabels:
            - value: value
              key: key
            - value: value
              key: key
            incidentSeverity: INCIDENT_SEVERITY_UNSPECIFIED
            alertGroupByFields:
            - alertGroupByFields
            - alertGroupByFields
            alertId: alertId
            isMuted: true
            incidentPermutation:
              key: incidentPermutation
            incidentStatus: INCIDENT_STATUS_UNSPECIFIED
          cxEventTimestamp: 2000-01-23T04:56:07.000+00:00
      externalDocs:
        url: ""
      properties:
        items:
          items:
            $ref: "#/components/schemas/IncidentEventExtended"
          type: array
        pagination:
          $ref: "#/components/schemas/v1.PaginationResponse"
      required:
      - items
      title: List incident events response
      type: object
    ListIncidentEventsTotalCountResponse:
      description: A response containing the total count of matching incident events
        and whether the count limit was reached
      example:
        count: "100"
        reachedLimit: false
      externalDocs:
        url: ""
      properties:
        count:
          description: Total number of incident events matching the filter
          example: "100"
          format: uint64
          type: string
        reachedLimit:
          description: Indicates if the count reached the system limit
          example: false
          type: boolean
      title: List incident events total count response
      type: object
    ListIncidentsResponse:
      description: Response containing a list of incidents and pagination information
      example:
        pagination:
          totalSize: 100
          nextPageToken: next_page_token
        incidents:
        - displayLabels:
            key: displayLabels
          severity: INCIDENT_SEVERITY_UNSPECIFIED
          assignments:
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          contextualLabels:
            key: contextualLabels
          description: incident_description
          lastStateUpdateKey: last_state_update_key
          lastStateUpdateTime: 2024-01-01T00:00:00Z
          duration: duration
          createdAt: 2024-01-01T00:00:00Z
          name: incident_name
          id: incident_id
          metaLabels:
          - value: value
            key: key
          - value: value
            key: key
          state: INCIDENT_STATE_UNSPECIFIED
          closedAt: 2024-01-01T00:00:00Z
          events:
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          isMuted: false
          status: INCIDENT_STATUS_UNSPECIFIED
        - displayLabels:
            key: displayLabels
          severity: INCIDENT_SEVERITY_UNSPECIFIED
          assignments:
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          contextualLabels:
            key: contextualLabels
          description: incident_description
          lastStateUpdateKey: last_state_update_key
          lastStateUpdateTime: 2024-01-01T00:00:00Z
          duration: duration
          createdAt: 2024-01-01T00:00:00Z
          name: incident_name
          id: incident_id
          metaLabels:
          - value: value
            key: key
          - value: value
            key: key
          state: INCIDENT_STATE_UNSPECIFIED
          closedAt: 2024-01-01T00:00:00Z
          events:
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          isMuted: false
          status: INCIDENT_STATUS_UNSPECIFIED
      externalDocs:
        url: ""
      properties:
        incidents:
          items:
            $ref: "#/components/schemas/Incident"
          type: array
        pagination:
          $ref: "#/components/schemas/v1.PaginationResponse"
      required:
      - incidents
      - pagination
      title: List incidents response
      type: object
    MultipleValues:
      properties:
        matcher:
          $ref: "#/components/schemas/events.v3.FilterMatcher"
        values:
          items:
            type: string
          type: array
      type: object
    OrderByContextualLabel:
      additionalProperties: false
      externalDocs:
        url: ""
      properties:
        contextualLabel:
          type: string
        direction:
          $ref: "#/components/schemas/v1.OrderByDirection"
      required:
      - direction
      - field
      title: Incident order by
      type: object
    OrderByIncidentField:
      additionalProperties: false
      externalDocs:
        url: ""
      properties:
        direction:
          $ref: "#/components/schemas/v1.OrderByDirection"
        incidentField:
          $ref: "#/components/schemas/IncidentFields"
      required:
      - direction
      - field
      title: Incident order by
      type: object
    OriginatorType:
      enum:
      - ORIGINATOR_TYPE_UNSPECIFIED
      - ORIGINATOR_TYPE_OPERATIONAL
      - ORIGINATOR_TYPE_ADMINISTRATIVE
      type: string
    ResolveIncidentByEventIdResponse:
      description: Response containing the updated incident after resolution
      example:
        incident:
          displayLabels:
            key: displayLabels
          severity: INCIDENT_SEVERITY_UNSPECIFIED
          assignments:
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          contextualLabels:
            key: contextualLabels
          description: incident_description
          lastStateUpdateKey: last_state_update_key
          lastStateUpdateTime: 2024-01-01T00:00:00Z
          duration: duration
          createdAt: 2024-01-01T00:00:00Z
          name: incident_name
          id: incident_id
          metaLabels:
          - value: value
            key: key
          - value: value
            key: key
          state: INCIDENT_STATE_UNSPECIFIED
          closedAt: 2024-01-01T00:00:00Z
          events:
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          isMuted: false
          status: INCIDENT_STATUS_UNSPECIFIED
      externalDocs:
        url: ""
      properties:
        incident:
          $ref: "#/components/schemas/Incident"
      required:
      - incident
      title: Acknowledge incident by event id response
      type: object
    ResolveIncidentsResponse:
      description: Response containing the updated incidents after resolution
      example:
        incidents:
        - displayLabels:
            key: displayLabels
          severity: INCIDENT_SEVERITY_UNSPECIFIED
          assignments:
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          contextualLabels:
            key: contextualLabels
          description: incident_description
          lastStateUpdateKey: last_state_update_key
          lastStateUpdateTime: 2024-01-01T00:00:00Z
          duration: duration
          createdAt: 2024-01-01T00:00:00Z
          name: incident_name
          id: incident_id
          metaLabels:
          - value: value
            key: key
          - value: value
            key: key
          state: INCIDENT_STATE_UNSPECIFIED
          closedAt: 2024-01-01T00:00:00Z
          events:
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          isMuted: false
          status: INCIDENT_STATUS_UNSPECIFIED
        - displayLabels:
            key: displayLabels
          severity: INCIDENT_SEVERITY_UNSPECIFIED
          assignments:
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          contextualLabels:
            key: contextualLabels
          description: incident_description
          lastStateUpdateKey: last_state_update_key
          lastStateUpdateTime: 2024-01-01T00:00:00Z
          duration: duration
          createdAt: 2024-01-01T00:00:00Z
          name: incident_name
          id: incident_id
          metaLabels:
          - value: value
            key: key
          - value: value
            key: key
          state: INCIDENT_STATE_UNSPECIFIED
          closedAt: 2024-01-01T00:00:00Z
          events:
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          isMuted: false
          status: INCIDENT_STATUS_UNSPECIFIED
      externalDocs:
        url: ""
      properties:
        incidents:
          items:
            $ref: "#/components/schemas/Incident"
          type: array
      required:
      - incidents
      title: Resolve incidents response
      type: object
    UnassignIncidentsResponse:
      description: Response containing the updated incidents after unassignment
      example:
        incidents:
        - displayLabels:
            key: displayLabels
          severity: INCIDENT_SEVERITY_UNSPECIFIED
          assignments:
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          contextualLabels:
            key: contextualLabels
          description: incident_description
          lastStateUpdateKey: last_state_update_key
          lastStateUpdateTime: 2024-01-01T00:00:00Z
          duration: duration
          createdAt: 2024-01-01T00:00:00Z
          name: incident_name
          id: incident_id
          metaLabels:
          - value: value
            key: key
          - value: value
            key: key
          state: INCIDENT_STATE_UNSPECIFIED
          closedAt: 2024-01-01T00:00:00Z
          events:
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          isMuted: false
          status: INCIDENT_STATUS_UNSPECIFIED
        - displayLabels:
            key: displayLabels
          severity: INCIDENT_SEVERITY_UNSPECIFIED
          assignments:
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          - assignedBy:
              userId: user_id
            assignedTo:
              userId: user_id
          contextualLabels:
            key: contextualLabels
          description: incident_description
          lastStateUpdateKey: last_state_update_key
          lastStateUpdateTime: 2024-01-01T00:00:00Z
          duration: duration
          createdAt: 2024-01-01T00:00:00Z
          name: incident_name
          id: incident_id
          metaLabels:
          - value: value
            key: key
          - value: value
            key: key
          state: INCIDENT_STATE_UNSPECIFIED
          closedAt: 2024-01-01T00:00:00Z
          events:
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          - operationalEvent:
              systemName: systemName
            id: incident_event_id
            originatorType: ORIGINATOR_TYPE_UNSPECIFIED
            incidentEventType: INCIDENT_EVENT_TYPE_UNSPECIFIED
            unassign: "{}"
          isMuted: false
          status: INCIDENT_STATUS_UNSPECIFIED
      externalDocs:
        url: ""
      properties:
        incidents:
          items:
            $ref: "#/components/schemas/Incident"
          type: array
      required:
      - incidents
      title: Unassign incidents response
      type: object
    UpsertIncidentStatePayload:
      properties:
        cxEventKey:
          type: string
      type: object
    UpsertIncidentStateType:
      enum:
      - UPSERT_INCIDENT_STATE_TYPE_UNSPECIFIED
      - UPSERT_INCIDENT_STATE_TYPE_TRIGGERED
      - UPSERT_INCIDENT_STATE_TYPE_RESOLVED
      type: string
    UserDetails:
      example:
        userId: user_id
      externalDocs:
        url: ""
      properties:
        userId:
          example: user_id
          type: string
      required:
      - userId
      title: User details
      type: object
    YAxisViewByCategory:
      additionalProperties: false
      properties:
        category:
          $ref: "#/components/schemas/YAxisViewByCategory"
      type: object
    YAxisViewByValue:
      additionalProperties: false
      properties:
        value:
          $ref: "#/components/schemas/YAxisViewByValue"
      type: object
    common.Group:
      properties:
        field:
          $ref: "#/components/schemas/FieldGroup"
        groups:
          items:
            $ref: "#/components/schemas/common.Group"
          type: array
        value:
          format: double
          type: number
      type: object
    events.v3.FilterMatcher:
      enum:
      - FILTER_MATCHER_TEXT_OR_UNSPECIFIED
      - FILTER_MATCHER_REGEXP
      type: string
    incidents.v1.MetaLabel:
      example:
        value: value
        key: key
      externalDocs:
        url: ""
      properties:
        key:
          example: key
          type: string
        value:
          example: value
          type: string
      title: Incident meta label
      type: object
    v1.FilterOperator:
      enum:
      - FILTER_OPERATOR_OR_OR_UNSPECIFIED
      - FILTER_OPERATOR_AND
      type: string
    v1.OrderByDirection:
      enum:
      - ORDER_BY_DIRECTION_UNSPECIFIED
      - ORDER_BY_DIRECTION_ASC
      - ORDER_BY_DIRECTION_DESC
      type: string
    v1.PaginationResponse:
      description: Pagination information for list responses
      example:
        totalSize: 100
        nextPageToken: next_page_token
      externalDocs:
        url: ""
      properties:
        nextPageToken:
          description: Token for the next page of results
          example: next_page_token
          type: string
        totalSize:
          description: Total number of items available
          example: 100
          format: int64
          type: integer
      required:
      - totalSize
      title: Pagination response
      type: object
    v3.FilterOperator:
      enum:
      - FILTER_OPERATOR_AND_OR_UNSPECIFIED
      - FILTER_OPERATOR_OR
      type: string
    Incident_meta_label:
      externalDocs:
        url: ""
      properties:
        key:
          example: key
          type: string
        value:
          example: value
          type: string
      title: Incident meta label
      type: object
    Incident_query_filter:
      description: Filter configuration for incidents
      externalDocs:
        url: ""
      properties:
        applicationName:
          items:
            description: Filter by application names
            type: string
          type: array
        assignee:
          items:
            description: Filter by assignee
            type: string
          type: array
        contextualLabels:
          additionalProperties: {}
          description: Filter by contextual labels
          type: object
        createdAtRange: {}
        displayLabels:
          additionalProperties: {}
          description: Filter by display labels
          type: object
        endTime:
          deprecated: true
          description: "Filters all incidents that were open in the given timeframe\
            \ end time (deprecated, use incident_open_range instead)"
          format: date-time
          type: string
        incidentDurationRange: {}
        isMuted:
          description: Indicates if the incident is muted
          type: boolean
        metaLabels:
          items:
            $ref: "#/components/schemas/Incident_meta_label"
          type: array
        metaLabelsOp:
          $ref: "#/components/schemas/v1.FilterOperator"
        searchQuery: {}
        severity:
          items:
            $ref: "#/components/schemas/IncidentSeverity"
          type: array
        startTime:
          deprecated: true
          description: "Filters all incidents that were open in the given timeframe\
            \ start time (deprecated, use incident_open_range instead)"
          format: date-time
          type: string
        state:
          items:
            $ref: "#/components/schemas/IncidentState"
          type: array
        status:
          items:
            $ref: "#/components/schemas/IncidentStatus"
          type: array
        subsystemName:
          items:
            description: Filter by subsystem names
            type: string
          type: array
      title: Incident query filter
      type: object
    Pagination_request:
      description: Pagination parameters for list requests
      externalDocs:
        url: ""
      properties:
        pageSize:
          description: Number of items to return per page
          example: 10
          format: int64
          type: integer
        pageToken:
          description: Token for the next page of results
          example: next_page_token
          type: string
      required:
      - pageSize
      title: Pagination request
      type: object
    IncidentsService_ListIncidents_order_bys_parameter_inner:
      oneOf:
      - $ref: "#/components/schemas/OrderByContextualLabel"
      - $ref: "#/components/schemas/OrderByIncidentField"
    IncidentsService_ListIncidentAggregations_group_bys_parameter_inner:
      oneOf:
      - $ref: "#/components/schemas/GroupByContextualLabel"
      - $ref: "#/components/schemas/GroupByIncidentField"
    User_details:
      externalDocs:
        url: ""
      properties:
        userId:
          example: user_id
          type: string
      required:
      - userId
      title: User details
      type: object
    Incident_event_query_filter:
      description: Filter configuration for incident events
      externalDocs:
        url: ""
      properties:
        contextualLabels:
          additionalProperties: {}
          description: The contextual labels of the incident
          type: object
        displayLabels:
          additionalProperties: {}
          description: The display labels of the incident
          type: object
        isMuted:
          description: Indicates if the incident is muted
          type: boolean
        labels: {}
        name:
          description: The name of the incident
          type: string
        severity:
          items:
            $ref: "#/components/schemas/IncidentSeverity"
          type: array
        status:
          items:
            $ref: "#/components/schemas/IncidentStatus"
          type: array
        timestamp: {}
      title: Incident event query filter
      type: object
    List_incident_events_order_by_request:
      externalDocs:
        url: ""
      properties:
        direction:
          $ref: "#/components/schemas/v1.OrderByDirection"
        field:
          $ref: "#/components/schemas/IncidentEventOrderByFieldType"
      title: List incident events order by request
      type: object
  securitySchemes:
    apiKeyAuth:
      description: API key authentication
      in: header
      name: Authorization
      type: apiKey
