/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// GroupByValues - struct for GroupByValues
type GroupByValues struct {
	GroupByValuesContextualLabels *GroupByValuesContextualLabels
	GroupByValuesIncidentField *GroupByValuesIncidentField
}

// GroupByValuesContextualLabelsAsGroupByValues is a convenience function that returns GroupByValuesContextualLabels wrapped in GroupByValues
func GroupByValuesContextualLabelsAsGroupByValues(v *GroupByValuesContextualLabels) GroupByValues {
	return GroupByValues{
		GroupByValuesContextualLabels: v,
	}
}

// GroupByValuesIncidentFieldAsGroupByValues is a convenience function that returns GroupByValuesIncidentField wrapped in GroupByValues
func GroupByValuesIncidentFieldAsGroupByValues(v *GroupByValuesIncidentField) GroupByValues {
	return GroupByValues{
		GroupByValuesIncidentField: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GroupByValues) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GroupByValuesContextualLabels
	err = newStrictDecoder(data).Decode(&dst.GroupByValuesContextualLabels)
	if err == nil {
		jsonGroupByValuesContextualLabels, _ := json.Marshal(dst.GroupByValuesContextualLabels)
		if string(jsonGroupByValuesContextualLabels) == "{}" { // empty struct
			dst.GroupByValuesContextualLabels = nil
		} else {
			if err = validator.Validate(dst.GroupByValuesContextualLabels); err != nil {
				dst.GroupByValuesContextualLabels = nil
			} else {
				match++
			}
		}
	} else {
		dst.GroupByValuesContextualLabels = nil
	}

	// try to unmarshal data into GroupByValuesIncidentField
	err = newStrictDecoder(data).Decode(&dst.GroupByValuesIncidentField)
	if err == nil {
		jsonGroupByValuesIncidentField, _ := json.Marshal(dst.GroupByValuesIncidentField)
		if string(jsonGroupByValuesIncidentField) == "{}" { // empty struct
			dst.GroupByValuesIncidentField = nil
		} else {
			if err = validator.Validate(dst.GroupByValuesIncidentField); err != nil {
				dst.GroupByValuesIncidentField = nil
			} else {
				match++
			}
		}
	} else {
		dst.GroupByValuesIncidentField = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GroupByValuesContextualLabels = nil
		dst.GroupByValuesIncidentField = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GroupByValues)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GroupByValues)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GroupByValues) MarshalJSON() ([]byte, error) {
	if src.GroupByValuesContextualLabels != nil {
		return json.Marshal(&src.GroupByValuesContextualLabels)
	}

	if src.GroupByValuesIncidentField != nil {
		return json.Marshal(&src.GroupByValuesIncidentField)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GroupByValues) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GroupByValuesContextualLabels != nil {
		return obj.GroupByValuesContextualLabels
	}

	if obj.GroupByValuesIncidentField != nil {
		return obj.GroupByValuesIncidentField
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GroupByValues) GetActualInstanceValue() (interface{}) {
	if obj.GroupByValuesContextualLabels != nil {
		return *obj.GroupByValuesContextualLabels
	}

	if obj.GroupByValuesIncidentField != nil {
		return *obj.GroupByValuesIncidentField
	}

	// all schemas are nil
	return nil
}

type NullableGroupByValues struct {
	value *GroupByValues
	isSet bool
}

func (v NullableGroupByValues) Get() *GroupByValues {
	return v.value
}

func (v *NullableGroupByValues) Set(val *GroupByValues) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupByValues) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupByValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupByValues(val *GroupByValues) *NullableGroupByValues {
	return &NullableGroupByValues{value: val, isSet: true}
}

func (v NullableGroupByValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupByValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


