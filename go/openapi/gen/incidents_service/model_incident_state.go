/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"fmt"
)

// IncidentState the model 'IncidentState'
type IncidentState string

// List of IncidentState
const (
	INCIDENTSTATE_INCIDENT_STATE_UNSPECIFIED IncidentState = "INCIDENT_STATE_UNSPECIFIED"
	INCIDENTSTATE_INCIDENT_STATE_TRIGGERED IncidentState = "INCIDENT_STATE_TRIGGERED"
	INCIDENTSTATE_INCIDENT_STATE_RESOLVED IncidentState = "INCIDENT_STATE_RESOLVED"
)

// All allowed values of IncidentState enum
var AllowedIncidentStateEnumValues = []IncidentState{
	"INCIDENT_STATE_UNSPECIFIED",
	"INCIDENT_STATE_TRIGGERED",
	"INCIDENT_STATE_RESOLVED",
}

func (v *IncidentState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IncidentState(value)
	for _, existing := range AllowedIncidentStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IncidentState", value)
}

// NewIncidentStateFromValue returns a pointer to a valid IncidentState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIncidentStateFromValue(v string) (*IncidentState, error) {
	ev := IncidentState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IncidentState: valid values are %v", v, AllowedIncidentStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IncidentState) IsValid() bool {
	for _, existing := range AllowedIncidentStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IncidentState value
func (v IncidentState) Ptr() *IncidentState {
	return &v
}

type NullableIncidentState struct {
	value *IncidentState
	isSet bool
}

func (v NullableIncidentState) Get() *IncidentState {
	return v.value
}

func (v *NullableIncidentState) Set(val *IncidentState) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentState) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentState(val *IncidentState) *NullableIncidentState {
	return &NullableIncidentState{value: val, isSet: true}
}

func (v NullableIncidentState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

