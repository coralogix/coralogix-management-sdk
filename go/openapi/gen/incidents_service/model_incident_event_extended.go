/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the IncidentEventExtended type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncidentEventExtended{}

// IncidentEventExtended struct for IncidentEventExtended
type IncidentEventExtended struct {
	CxEventKey string `json:"cxEventKey"`
	CxEventTimestamp time.Time `json:"cxEventTimestamp"`
	IncidentEvent IncidentEvent `json:"incidentEvent"`
	IncidentEventExtendedMetadata *IncidentEventExtendedMetadata `json:"incidentEventExtendedMetadata,omitempty"`
}

type _IncidentEventExtended IncidentEventExtended

// NewIncidentEventExtended instantiates a new IncidentEventExtended object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentEventExtended(cxEventKey string, cxEventTimestamp time.Time, incidentEvent IncidentEvent) *IncidentEventExtended {
	this := IncidentEventExtended{}
	this.CxEventKey = cxEventKey
	this.CxEventTimestamp = cxEventTimestamp
	this.IncidentEvent = incidentEvent
	return &this
}

// NewIncidentEventExtendedWithDefaults instantiates a new IncidentEventExtended object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentEventExtendedWithDefaults() *IncidentEventExtended {
	this := IncidentEventExtended{}
	return &this
}

// GetCxEventKey returns the CxEventKey field value
func (o *IncidentEventExtended) GetCxEventKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CxEventKey
}

// GetCxEventKeyOk returns a tuple with the CxEventKey field value
// and a boolean to check if the value has been set.
func (o *IncidentEventExtended) GetCxEventKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CxEventKey, true
}

// SetCxEventKey sets field value
func (o *IncidentEventExtended) SetCxEventKey(v string) {
	o.CxEventKey = v
}

// GetCxEventTimestamp returns the CxEventTimestamp field value
func (o *IncidentEventExtended) GetCxEventTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CxEventTimestamp
}

// GetCxEventTimestampOk returns a tuple with the CxEventTimestamp field value
// and a boolean to check if the value has been set.
func (o *IncidentEventExtended) GetCxEventTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CxEventTimestamp, true
}

// SetCxEventTimestamp sets field value
func (o *IncidentEventExtended) SetCxEventTimestamp(v time.Time) {
	o.CxEventTimestamp = v
}

// GetIncidentEvent returns the IncidentEvent field value
func (o *IncidentEventExtended) GetIncidentEvent() IncidentEvent {
	if o == nil {
		var ret IncidentEvent
		return ret
	}

	return o.IncidentEvent
}

// GetIncidentEventOk returns a tuple with the IncidentEvent field value
// and a boolean to check if the value has been set.
func (o *IncidentEventExtended) GetIncidentEventOk() (*IncidentEvent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncidentEvent, true
}

// SetIncidentEvent sets field value
func (o *IncidentEventExtended) SetIncidentEvent(v IncidentEvent) {
	o.IncidentEvent = v
}

// GetIncidentEventExtendedMetadata returns the IncidentEventExtendedMetadata field value if set, zero value otherwise.
func (o *IncidentEventExtended) GetIncidentEventExtendedMetadata() IncidentEventExtendedMetadata {
	if o == nil || IsNil(o.IncidentEventExtendedMetadata) {
		var ret IncidentEventExtendedMetadata
		return ret
	}
	return *o.IncidentEventExtendedMetadata
}

// GetIncidentEventExtendedMetadataOk returns a tuple with the IncidentEventExtendedMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentEventExtended) GetIncidentEventExtendedMetadataOk() (*IncidentEventExtendedMetadata, bool) {
	if o == nil || IsNil(o.IncidentEventExtendedMetadata) {
		return nil, false
	}
	return o.IncidentEventExtendedMetadata, true
}

// HasIncidentEventExtendedMetadata returns a boolean if a field has been set.
func (o *IncidentEventExtended) HasIncidentEventExtendedMetadata() bool {
	if o != nil && !IsNil(o.IncidentEventExtendedMetadata) {
		return true
	}

	return false
}

// SetIncidentEventExtendedMetadata gets a reference to the given IncidentEventExtendedMetadata and assigns it to the IncidentEventExtendedMetadata field.
func (o *IncidentEventExtended) SetIncidentEventExtendedMetadata(v IncidentEventExtendedMetadata) {
	o.IncidentEventExtendedMetadata = &v
}

func (o IncidentEventExtended) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncidentEventExtended) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cxEventKey"] = o.CxEventKey
	toSerialize["cxEventTimestamp"] = o.CxEventTimestamp
	toSerialize["incidentEvent"] = o.IncidentEvent
	if !IsNil(o.IncidentEventExtendedMetadata) {
		toSerialize["incidentEventExtendedMetadata"] = o.IncidentEventExtendedMetadata
	}
	return toSerialize, nil
}

func (o *IncidentEventExtended) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cxEventKey",
		"cxEventTimestamp",
		"incidentEvent",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIncidentEventExtended := _IncidentEventExtended{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIncidentEventExtended)

	if err != nil {
		return err
	}

	*o = IncidentEventExtended(varIncidentEventExtended)

	return err
}

type NullableIncidentEventExtended struct {
	value *IncidentEventExtended
	isSet bool
}

func (v NullableIncidentEventExtended) Get() *IncidentEventExtended {
	return v.value
}

func (v *NullableIncidentEventExtended) Set(val *IncidentEventExtended) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentEventExtended) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentEventExtended) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentEventExtended(val *IncidentEventExtended) *NullableIncidentEventExtended {
	return &NullableIncidentEventExtended{value: val, isSet: true}
}

func (v NullableIncidentEventExtended) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentEventExtended) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


