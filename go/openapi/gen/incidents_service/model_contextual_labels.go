/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContextualLabels type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContextualLabels{}

// ContextualLabels struct for ContextualLabels
type ContextualLabels struct {
	FieldName string `json:"fieldName"`
	FieldValue string `json:"fieldValue"`
}

type _ContextualLabels ContextualLabels

// NewContextualLabels instantiates a new ContextualLabels object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContextualLabels(fieldName string, fieldValue string) *ContextualLabels {
	this := ContextualLabels{}
	this.FieldName = fieldName
	this.FieldValue = fieldValue
	return &this
}

// NewContextualLabelsWithDefaults instantiates a new ContextualLabels object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContextualLabelsWithDefaults() *ContextualLabels {
	this := ContextualLabels{}
	return &this
}

// GetFieldName returns the FieldName field value
func (o *ContextualLabels) GetFieldName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value
// and a boolean to check if the value has been set.
func (o *ContextualLabels) GetFieldNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldName, true
}

// SetFieldName sets field value
func (o *ContextualLabels) SetFieldName(v string) {
	o.FieldName = v
}

// GetFieldValue returns the FieldValue field value
func (o *ContextualLabels) GetFieldValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldValue
}

// GetFieldValueOk returns a tuple with the FieldValue field value
// and a boolean to check if the value has been set.
func (o *ContextualLabels) GetFieldValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldValue, true
}

// SetFieldValue sets field value
func (o *ContextualLabels) SetFieldValue(v string) {
	o.FieldValue = v
}

func (o ContextualLabels) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContextualLabels) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fieldName"] = o.FieldName
	toSerialize["fieldValue"] = o.FieldValue
	return toSerialize, nil
}

func (o *ContextualLabels) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fieldName",
		"fieldValue",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContextualLabels := _ContextualLabels{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContextualLabels)

	if err != nil {
		return err
	}

	*o = ContextualLabels(varContextualLabels)

	return err
}

type NullableContextualLabels struct {
	value *ContextualLabels
	isSet bool
}

func (v NullableContextualLabels) Get() *ContextualLabels {
	return v.value
}

func (v *NullableContextualLabels) Set(val *ContextualLabels) {
	v.value = val
	v.isSet = true
}

func (v NullableContextualLabels) IsSet() bool {
	return v.isSet
}

func (v *NullableContextualLabels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContextualLabels(val *ContextualLabels) *NullableContextualLabels {
	return &NullableContextualLabels{value: val, isSet: true}
}

func (v NullableContextualLabels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContextualLabels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


