/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"fmt"
)

// IncidentEventType the model 'IncidentEventType'
type IncidentEventType string

// List of IncidentEventType
const (
	INCIDENTEVENTTYPE_INCIDENT_EVENT_TYPE_UNSPECIFIED IncidentEventType = "INCIDENT_EVENT_TYPE_UNSPECIFIED"
	INCIDENTEVENTTYPE_INCIDENT_EVENT_TYPE_UPSERT_STATE IncidentEventType = "INCIDENT_EVENT_TYPE_UPSERT_STATE"
	INCIDENTEVENTTYPE_INCIDENT_EVENT_TYPE_OPEN IncidentEventType = "INCIDENT_EVENT_TYPE_OPEN"
	INCIDENTEVENTTYPE_INCIDENT_EVENT_TYPE_CLOSE IncidentEventType = "INCIDENT_EVENT_TYPE_CLOSE"
	INCIDENTEVENTTYPE_INCIDENT_EVENT_TYPE_SNOOZE_INDICATOR IncidentEventType = "INCIDENT_EVENT_TYPE_SNOOZE_INDICATOR"
	INCIDENTEVENTTYPE_INCIDENT_EVENT_TYPE_ASSIGN IncidentEventType = "INCIDENT_EVENT_TYPE_ASSIGN"
	INCIDENTEVENTTYPE_INCIDENT_EVENT_TYPE_UNASSIGN IncidentEventType = "INCIDENT_EVENT_TYPE_UNASSIGN"
	INCIDENTEVENTTYPE_INCIDENT_EVENT_TYPE_ACKNOWLEDGE IncidentEventType = "INCIDENT_EVENT_TYPE_ACKNOWLEDGE"
)

// All allowed values of IncidentEventType enum
var AllowedIncidentEventTypeEnumValues = []IncidentEventType{
	"INCIDENT_EVENT_TYPE_UNSPECIFIED",
	"INCIDENT_EVENT_TYPE_UPSERT_STATE",
	"INCIDENT_EVENT_TYPE_OPEN",
	"INCIDENT_EVENT_TYPE_CLOSE",
	"INCIDENT_EVENT_TYPE_SNOOZE_INDICATOR",
	"INCIDENT_EVENT_TYPE_ASSIGN",
	"INCIDENT_EVENT_TYPE_UNASSIGN",
	"INCIDENT_EVENT_TYPE_ACKNOWLEDGE",
}

func (v *IncidentEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IncidentEventType(value)
	for _, existing := range AllowedIncidentEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IncidentEventType", value)
}

// NewIncidentEventTypeFromValue returns a pointer to a valid IncidentEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIncidentEventTypeFromValue(v string) (*IncidentEventType, error) {
	ev := IncidentEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IncidentEventType: valid values are %v", v, AllowedIncidentEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IncidentEventType) IsValid() bool {
	for _, existing := range AllowedIncidentEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IncidentEventType value
func (v IncidentEventType) Ptr() *IncidentEventType {
	return &v
}

type NullableIncidentEventType struct {
	value *IncidentEventType
	isSet bool
}

func (v NullableIncidentEventType) Get() *IncidentEventType {
	return v.value
}

func (v *NullableIncidentEventType) Set(val *IncidentEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentEventType(val *IncidentEventType) *NullableIncidentEventType {
	return &NullableIncidentEventType{value: val, isSet: true}
}

func (v NullableIncidentEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

