/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"fmt"
)

// IncidentSeverity the model 'IncidentSeverity'
type IncidentSeverity string

// List of IncidentSeverity
const (
	INCIDENTSEVERITY_INCIDENT_SEVERITY_UNSPECIFIED IncidentSeverity = "INCIDENT_SEVERITY_UNSPECIFIED"
	INCIDENTSEVERITY_INCIDENT_SEVERITY_INFO IncidentSeverity = "INCIDENT_SEVERITY_INFO"
	INCIDENTSEVERITY_INCIDENT_SEVERITY_WARNING IncidentSeverity = "INCIDENT_SEVERITY_WARNING"
	INCIDENTSEVERITY_INCIDENT_SEVERITY_ERROR IncidentSeverity = "INCIDENT_SEVERITY_ERROR"
	INCIDENTSEVERITY_INCIDENT_SEVERITY_CRITICAL IncidentSeverity = "INCIDENT_SEVERITY_CRITICAL"
	INCIDENTSEVERITY_INCIDENT_SEVERITY_LOW IncidentSeverity = "INCIDENT_SEVERITY_LOW"
)

// All allowed values of IncidentSeverity enum
var AllowedIncidentSeverityEnumValues = []IncidentSeverity{
	"INCIDENT_SEVERITY_UNSPECIFIED",
	"INCIDENT_SEVERITY_INFO",
	"INCIDENT_SEVERITY_WARNING",
	"INCIDENT_SEVERITY_ERROR",
	"INCIDENT_SEVERITY_CRITICAL",
	"INCIDENT_SEVERITY_LOW",
}

func (v *IncidentSeverity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IncidentSeverity(value)
	for _, existing := range AllowedIncidentSeverityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IncidentSeverity", value)
}

// NewIncidentSeverityFromValue returns a pointer to a valid IncidentSeverity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIncidentSeverityFromValue(v string) (*IncidentSeverity, error) {
	ev := IncidentSeverity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IncidentSeverity: valid values are %v", v, AllowedIncidentSeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IncidentSeverity) IsValid() bool {
	for _, existing := range AllowedIncidentSeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IncidentSeverity value
func (v IncidentSeverity) Ptr() *IncidentSeverity {
	return &v
}

type NullableIncidentSeverity struct {
	value *IncidentSeverity
	isSet bool
}

func (v NullableIncidentSeverity) Get() *IncidentSeverity {
	return v.value
}

func (v *NullableIncidentSeverity) Set(val *IncidentSeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentSeverity(val *IncidentSeverity) *NullableIncidentSeverity {
	return &NullableIncidentSeverity{value: val, isSet: true}
}

func (v NullableIncidentSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

