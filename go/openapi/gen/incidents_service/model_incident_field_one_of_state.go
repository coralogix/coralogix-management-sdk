/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
)

// checks if the IncidentFieldOneOfState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncidentFieldOneOfState{}

// IncidentFieldOneOfState struct for IncidentFieldOneOfState
type IncidentFieldOneOfState struct {
	State *IncidentState `json:"state,omitempty"`
}

// NewIncidentFieldOneOfState instantiates a new IncidentFieldOneOfState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentFieldOneOfState() *IncidentFieldOneOfState {
	this := IncidentFieldOneOfState{}
	return &this
}

// NewIncidentFieldOneOfStateWithDefaults instantiates a new IncidentFieldOneOfState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentFieldOneOfStateWithDefaults() *IncidentFieldOneOfState {
	this := IncidentFieldOneOfState{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *IncidentFieldOneOfState) GetState() IncidentState {
	if o == nil || IsNil(o.State) {
		var ret IncidentState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFieldOneOfState) GetStateOk() (*IncidentState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *IncidentFieldOneOfState) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given IncidentState and assigns it to the State field.
func (o *IncidentFieldOneOfState) SetState(v IncidentState) {
	o.State = &v
}

func (o IncidentFieldOneOfState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncidentFieldOneOfState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableIncidentFieldOneOfState struct {
	value *IncidentFieldOneOfState
	isSet bool
}

func (v NullableIncidentFieldOneOfState) Get() *IncidentFieldOneOfState {
	return v.value
}

func (v *NullableIncidentFieldOneOfState) Set(val *IncidentFieldOneOfState) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentFieldOneOfState) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentFieldOneOfState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentFieldOneOfState(val *IncidentFieldOneOfState) *NullableIncidentFieldOneOfState {
	return &NullableIncidentFieldOneOfState{value: val, isSet: true}
}

func (v NullableIncidentFieldOneOfState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentFieldOneOfState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


