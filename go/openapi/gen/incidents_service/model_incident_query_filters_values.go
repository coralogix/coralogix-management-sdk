/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IncidentQueryFiltersValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncidentQueryFiltersValues{}

// IncidentQueryFiltersValues struct for IncidentQueryFiltersValues
type IncidentQueryFiltersValues struct {
	AssigneeWithCount []AssigneeWithCount `json:"assigneeWithCount"`
	ContextualLabels map[string]ContextualLabelValuesWithCount `json:"contextualLabels"`
	DisplayLabels map[string]DisplayLabelValuesWithCount `json:"displayLabels"`
	MetaLabelsOp V1FilterOperator `json:"metaLabelsOp"`
	MetaLabelsWithCount []IncidentMetaLabelsWithCount `json:"metaLabelsWithCount"`
	SeverityWithCount []IncidentSeverityWithCount `json:"severityWithCount"`
	StateWithCount []IncidentStateWithCount `json:"stateWithCount"`
	StatusWithCount []IncidentStatusWithCount `json:"statusWithCount"`
}

type _IncidentQueryFiltersValues IncidentQueryFiltersValues

// NewIncidentQueryFiltersValues instantiates a new IncidentQueryFiltersValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentQueryFiltersValues(assigneeWithCount []AssigneeWithCount, contextualLabels map[string]ContextualLabelValuesWithCount, displayLabels map[string]DisplayLabelValuesWithCount, metaLabelsOp V1FilterOperator, metaLabelsWithCount []IncidentMetaLabelsWithCount, severityWithCount []IncidentSeverityWithCount, stateWithCount []IncidentStateWithCount, statusWithCount []IncidentStatusWithCount) *IncidentQueryFiltersValues {
	this := IncidentQueryFiltersValues{}
	this.AssigneeWithCount = assigneeWithCount
	this.ContextualLabels = contextualLabels
	this.DisplayLabels = displayLabels
	this.MetaLabelsOp = metaLabelsOp
	this.MetaLabelsWithCount = metaLabelsWithCount
	this.SeverityWithCount = severityWithCount
	this.StateWithCount = stateWithCount
	this.StatusWithCount = statusWithCount
	return &this
}

// NewIncidentQueryFiltersValuesWithDefaults instantiates a new IncidentQueryFiltersValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentQueryFiltersValuesWithDefaults() *IncidentQueryFiltersValues {
	this := IncidentQueryFiltersValues{}
	return &this
}

// GetAssigneeWithCount returns the AssigneeWithCount field value
func (o *IncidentQueryFiltersValues) GetAssigneeWithCount() []AssigneeWithCount {
	if o == nil {
		var ret []AssigneeWithCount
		return ret
	}

	return o.AssigneeWithCount
}

// GetAssigneeWithCountOk returns a tuple with the AssigneeWithCount field value
// and a boolean to check if the value has been set.
func (o *IncidentQueryFiltersValues) GetAssigneeWithCountOk() ([]AssigneeWithCount, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssigneeWithCount, true
}

// SetAssigneeWithCount sets field value
func (o *IncidentQueryFiltersValues) SetAssigneeWithCount(v []AssigneeWithCount) {
	o.AssigneeWithCount = v
}

// GetContextualLabels returns the ContextualLabels field value
func (o *IncidentQueryFiltersValues) GetContextualLabels() map[string]ContextualLabelValuesWithCount {
	if o == nil {
		var ret map[string]ContextualLabelValuesWithCount
		return ret
	}

	return o.ContextualLabels
}

// GetContextualLabelsOk returns a tuple with the ContextualLabels field value
// and a boolean to check if the value has been set.
func (o *IncidentQueryFiltersValues) GetContextualLabelsOk() (*map[string]ContextualLabelValuesWithCount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContextualLabels, true
}

// SetContextualLabels sets field value
func (o *IncidentQueryFiltersValues) SetContextualLabels(v map[string]ContextualLabelValuesWithCount) {
	o.ContextualLabels = v
}

// GetDisplayLabels returns the DisplayLabels field value
func (o *IncidentQueryFiltersValues) GetDisplayLabels() map[string]DisplayLabelValuesWithCount {
	if o == nil {
		var ret map[string]DisplayLabelValuesWithCount
		return ret
	}

	return o.DisplayLabels
}

// GetDisplayLabelsOk returns a tuple with the DisplayLabels field value
// and a boolean to check if the value has been set.
func (o *IncidentQueryFiltersValues) GetDisplayLabelsOk() (*map[string]DisplayLabelValuesWithCount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayLabels, true
}

// SetDisplayLabels sets field value
func (o *IncidentQueryFiltersValues) SetDisplayLabels(v map[string]DisplayLabelValuesWithCount) {
	o.DisplayLabels = v
}

// GetMetaLabelsOp returns the MetaLabelsOp field value
func (o *IncidentQueryFiltersValues) GetMetaLabelsOp() V1FilterOperator {
	if o == nil {
		var ret V1FilterOperator
		return ret
	}

	return o.MetaLabelsOp
}

// GetMetaLabelsOpOk returns a tuple with the MetaLabelsOp field value
// and a boolean to check if the value has been set.
func (o *IncidentQueryFiltersValues) GetMetaLabelsOpOk() (*V1FilterOperator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetaLabelsOp, true
}

// SetMetaLabelsOp sets field value
func (o *IncidentQueryFiltersValues) SetMetaLabelsOp(v V1FilterOperator) {
	o.MetaLabelsOp = v
}

// GetMetaLabelsWithCount returns the MetaLabelsWithCount field value
func (o *IncidentQueryFiltersValues) GetMetaLabelsWithCount() []IncidentMetaLabelsWithCount {
	if o == nil {
		var ret []IncidentMetaLabelsWithCount
		return ret
	}

	return o.MetaLabelsWithCount
}

// GetMetaLabelsWithCountOk returns a tuple with the MetaLabelsWithCount field value
// and a boolean to check if the value has been set.
func (o *IncidentQueryFiltersValues) GetMetaLabelsWithCountOk() ([]IncidentMetaLabelsWithCount, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetaLabelsWithCount, true
}

// SetMetaLabelsWithCount sets field value
func (o *IncidentQueryFiltersValues) SetMetaLabelsWithCount(v []IncidentMetaLabelsWithCount) {
	o.MetaLabelsWithCount = v
}

// GetSeverityWithCount returns the SeverityWithCount field value
func (o *IncidentQueryFiltersValues) GetSeverityWithCount() []IncidentSeverityWithCount {
	if o == nil {
		var ret []IncidentSeverityWithCount
		return ret
	}

	return o.SeverityWithCount
}

// GetSeverityWithCountOk returns a tuple with the SeverityWithCount field value
// and a boolean to check if the value has been set.
func (o *IncidentQueryFiltersValues) GetSeverityWithCountOk() ([]IncidentSeverityWithCount, bool) {
	if o == nil {
		return nil, false
	}
	return o.SeverityWithCount, true
}

// SetSeverityWithCount sets field value
func (o *IncidentQueryFiltersValues) SetSeverityWithCount(v []IncidentSeverityWithCount) {
	o.SeverityWithCount = v
}

// GetStateWithCount returns the StateWithCount field value
func (o *IncidentQueryFiltersValues) GetStateWithCount() []IncidentStateWithCount {
	if o == nil {
		var ret []IncidentStateWithCount
		return ret
	}

	return o.StateWithCount
}

// GetStateWithCountOk returns a tuple with the StateWithCount field value
// and a boolean to check if the value has been set.
func (o *IncidentQueryFiltersValues) GetStateWithCountOk() ([]IncidentStateWithCount, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateWithCount, true
}

// SetStateWithCount sets field value
func (o *IncidentQueryFiltersValues) SetStateWithCount(v []IncidentStateWithCount) {
	o.StateWithCount = v
}

// GetStatusWithCount returns the StatusWithCount field value
func (o *IncidentQueryFiltersValues) GetStatusWithCount() []IncidentStatusWithCount {
	if o == nil {
		var ret []IncidentStatusWithCount
		return ret
	}

	return o.StatusWithCount
}

// GetStatusWithCountOk returns a tuple with the StatusWithCount field value
// and a boolean to check if the value has been set.
func (o *IncidentQueryFiltersValues) GetStatusWithCountOk() ([]IncidentStatusWithCount, bool) {
	if o == nil {
		return nil, false
	}
	return o.StatusWithCount, true
}

// SetStatusWithCount sets field value
func (o *IncidentQueryFiltersValues) SetStatusWithCount(v []IncidentStatusWithCount) {
	o.StatusWithCount = v
}

func (o IncidentQueryFiltersValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncidentQueryFiltersValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assigneeWithCount"] = o.AssigneeWithCount
	toSerialize["contextualLabels"] = o.ContextualLabels
	toSerialize["displayLabels"] = o.DisplayLabels
	toSerialize["metaLabelsOp"] = o.MetaLabelsOp
	toSerialize["metaLabelsWithCount"] = o.MetaLabelsWithCount
	toSerialize["severityWithCount"] = o.SeverityWithCount
	toSerialize["stateWithCount"] = o.StateWithCount
	toSerialize["statusWithCount"] = o.StatusWithCount
	return toSerialize, nil
}

func (o *IncidentQueryFiltersValues) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assigneeWithCount",
		"contextualLabels",
		"displayLabels",
		"metaLabelsOp",
		"metaLabelsWithCount",
		"severityWithCount",
		"stateWithCount",
		"statusWithCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIncidentQueryFiltersValues := _IncidentQueryFiltersValues{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIncidentQueryFiltersValues)

	if err != nil {
		return err
	}

	*o = IncidentQueryFiltersValues(varIncidentQueryFiltersValues)

	return err
}

type NullableIncidentQueryFiltersValues struct {
	value *IncidentQueryFiltersValues
	isSet bool
}

func (v NullableIncidentQueryFiltersValues) Get() *IncidentQueryFiltersValues {
	return v.value
}

func (v *NullableIncidentQueryFiltersValues) Set(val *IncidentQueryFiltersValues) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentQueryFiltersValues) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentQueryFiltersValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentQueryFiltersValues(val *IncidentQueryFiltersValues) *NullableIncidentQueryFiltersValues {
	return &NullableIncidentQueryFiltersValues{value: val, isSet: true}
}

func (v NullableIncidentQueryFiltersValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentQueryFiltersValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


