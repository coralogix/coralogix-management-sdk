/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package incidents_service

import (
	"encoding/json"
)

// checks if the IncidentEventQueryFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncidentEventQueryFilter{}

// IncidentEventQueryFilter Filter configuration for incident events
type IncidentEventQueryFilter struct {
	// The contextual labels of the incident
	ContextualLabels map[string]interface{} `json:"contextualLabels,omitempty"`
	// The display labels of the incident
	DisplayLabels map[string]interface{} `json:"displayLabels,omitempty"`
	// Indicates if the incident is muted
	IsMuted *bool `json:"isMuted,omitempty"`
	Labels interface{} `json:"labels,omitempty"`
	// The name of the incident
	Name *string `json:"name,omitempty"`
	Severity []string `json:"severity,omitempty"`
	Status []string `json:"status,omitempty"`
	Timestamp interface{} `json:"timestamp,omitempty"`
}

// NewIncidentEventQueryFilter instantiates a new IncidentEventQueryFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentEventQueryFilter() *IncidentEventQueryFilter {
	this := IncidentEventQueryFilter{}
	return &this
}

// NewIncidentEventQueryFilterWithDefaults instantiates a new IncidentEventQueryFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentEventQueryFilterWithDefaults() *IncidentEventQueryFilter {
	this := IncidentEventQueryFilter{}
	return &this
}

// GetContextualLabels returns the ContextualLabels field value if set, zero value otherwise.
func (o *IncidentEventQueryFilter) GetContextualLabels() map[string]interface{} {
	if o == nil || IsNil(o.ContextualLabels) {
		var ret map[string]interface{}
		return ret
	}
	return o.ContextualLabels
}

// GetContextualLabelsOk returns a tuple with the ContextualLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentEventQueryFilter) GetContextualLabelsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ContextualLabels) {
		return map[string]interface{}{}, false
	}
	return o.ContextualLabels, true
}

// HasContextualLabels returns a boolean if a field has been set.
func (o *IncidentEventQueryFilter) HasContextualLabels() bool {
	if o != nil && !IsNil(o.ContextualLabels) {
		return true
	}

	return false
}

// SetContextualLabels gets a reference to the given map[string]interface{} and assigns it to the ContextualLabels field.
func (o *IncidentEventQueryFilter) SetContextualLabels(v map[string]interface{}) {
	o.ContextualLabels = v
}

// GetDisplayLabels returns the DisplayLabels field value if set, zero value otherwise.
func (o *IncidentEventQueryFilter) GetDisplayLabels() map[string]interface{} {
	if o == nil || IsNil(o.DisplayLabels) {
		var ret map[string]interface{}
		return ret
	}
	return o.DisplayLabels
}

// GetDisplayLabelsOk returns a tuple with the DisplayLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentEventQueryFilter) GetDisplayLabelsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DisplayLabels) {
		return map[string]interface{}{}, false
	}
	return o.DisplayLabels, true
}

// HasDisplayLabels returns a boolean if a field has been set.
func (o *IncidentEventQueryFilter) HasDisplayLabels() bool {
	if o != nil && !IsNil(o.DisplayLabels) {
		return true
	}

	return false
}

// SetDisplayLabels gets a reference to the given map[string]interface{} and assigns it to the DisplayLabels field.
func (o *IncidentEventQueryFilter) SetDisplayLabels(v map[string]interface{}) {
	o.DisplayLabels = v
}

// GetIsMuted returns the IsMuted field value if set, zero value otherwise.
func (o *IncidentEventQueryFilter) GetIsMuted() bool {
	if o == nil || IsNil(o.IsMuted) {
		var ret bool
		return ret
	}
	return *o.IsMuted
}

// GetIsMutedOk returns a tuple with the IsMuted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentEventQueryFilter) GetIsMutedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMuted) {
		return nil, false
	}
	return o.IsMuted, true
}

// HasIsMuted returns a boolean if a field has been set.
func (o *IncidentEventQueryFilter) HasIsMuted() bool {
	if o != nil && !IsNil(o.IsMuted) {
		return true
	}

	return false
}

// SetIsMuted gets a reference to the given bool and assigns it to the IsMuted field.
func (o *IncidentEventQueryFilter) SetIsMuted(v bool) {
	o.IsMuted = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncidentEventQueryFilter) GetLabels() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncidentEventQueryFilter) GetLabelsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return &o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *IncidentEventQueryFilter) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given interface{} and assigns it to the Labels field.
func (o *IncidentEventQueryFilter) SetLabels(v interface{}) {
	o.Labels = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IncidentEventQueryFilter) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentEventQueryFilter) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IncidentEventQueryFilter) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IncidentEventQueryFilter) SetName(v string) {
	o.Name = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *IncidentEventQueryFilter) GetSeverity() []string {
	if o == nil || IsNil(o.Severity) {
		var ret []string
		return ret
	}
	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentEventQueryFilter) GetSeverityOk() ([]string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *IncidentEventQueryFilter) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given []string and assigns it to the Severity field.
func (o *IncidentEventQueryFilter) SetSeverity(v []string) {
	o.Severity = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *IncidentEventQueryFilter) GetStatus() []string {
	if o == nil || IsNil(o.Status) {
		var ret []string
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentEventQueryFilter) GetStatusOk() ([]string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *IncidentEventQueryFilter) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given []string and assigns it to the Status field.
func (o *IncidentEventQueryFilter) SetStatus(v []string) {
	o.Status = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncidentEventQueryFilter) GetTimestamp() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncidentEventQueryFilter) GetTimestampOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return &o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *IncidentEventQueryFilter) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given interface{} and assigns it to the Timestamp field.
func (o *IncidentEventQueryFilter) SetTimestamp(v interface{}) {
	o.Timestamp = v
}

func (o IncidentEventQueryFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncidentEventQueryFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContextualLabels) {
		toSerialize["contextualLabels"] = o.ContextualLabels
	}
	if !IsNil(o.DisplayLabels) {
		toSerialize["displayLabels"] = o.DisplayLabels
	}
	if !IsNil(o.IsMuted) {
		toSerialize["isMuted"] = o.IsMuted
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableIncidentEventQueryFilter struct {
	value *IncidentEventQueryFilter
	isSet bool
}

func (v NullableIncidentEventQueryFilter) Get() *IncidentEventQueryFilter {
	return v.value
}

func (v *NullableIncidentEventQueryFilter) Set(val *IncidentEventQueryFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentEventQueryFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentEventQueryFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentEventQueryFilter(val *IncidentEventQueryFilter) *NullableIncidentEventQueryFilter {
	return &NullableIncidentEventQueryFilter{value: val, isSet: true}
}

func (v NullableIncidentEventQueryFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentEventQueryFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


