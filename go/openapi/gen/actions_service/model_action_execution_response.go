/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actions_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ActionExecutionResponse - struct for ActionExecutionResponse
type ActionExecutionResponse struct {
	ActionExecutionResponseOneOf *ActionExecutionResponseOneOf
	ActionExecutionResponseOneOf1 *ActionExecutionResponseOneOf1
	ActionExecutionResponseOneOf2 *ActionExecutionResponseOneOf2
}

// ActionExecutionResponseOneOfAsActionExecutionResponse is a convenience function that returns ActionExecutionResponseOneOf wrapped in ActionExecutionResponse
func ActionExecutionResponseOneOfAsActionExecutionResponse(v *ActionExecutionResponseOneOf) ActionExecutionResponse {
	return ActionExecutionResponse{
		ActionExecutionResponseOneOf: v,
	}
}

// ActionExecutionResponseOneOf1AsActionExecutionResponse is a convenience function that returns ActionExecutionResponseOneOf1 wrapped in ActionExecutionResponse
func ActionExecutionResponseOneOf1AsActionExecutionResponse(v *ActionExecutionResponseOneOf1) ActionExecutionResponse {
	return ActionExecutionResponse{
		ActionExecutionResponseOneOf1: v,
	}
}

// ActionExecutionResponseOneOf2AsActionExecutionResponse is a convenience function that returns ActionExecutionResponseOneOf2 wrapped in ActionExecutionResponse
func ActionExecutionResponseOneOf2AsActionExecutionResponse(v *ActionExecutionResponseOneOf2) ActionExecutionResponse {
	return ActionExecutionResponse{
		ActionExecutionResponseOneOf2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ActionExecutionResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ActionExecutionResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.ActionExecutionResponseOneOf)
	if err == nil {
		jsonActionExecutionResponseOneOf, _ := json.Marshal(dst.ActionExecutionResponseOneOf)
		if string(jsonActionExecutionResponseOneOf) == "{}" { // empty struct
			dst.ActionExecutionResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.ActionExecutionResponseOneOf); err != nil {
				dst.ActionExecutionResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.ActionExecutionResponseOneOf = nil
	}

	// try to unmarshal data into ActionExecutionResponseOneOf1
	err = newStrictDecoder(data).Decode(&dst.ActionExecutionResponseOneOf1)
	if err == nil {
		jsonActionExecutionResponseOneOf1, _ := json.Marshal(dst.ActionExecutionResponseOneOf1)
		if string(jsonActionExecutionResponseOneOf1) == "{}" { // empty struct
			dst.ActionExecutionResponseOneOf1 = nil
		} else {
			if err = validator.Validate(dst.ActionExecutionResponseOneOf1); err != nil {
				dst.ActionExecutionResponseOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ActionExecutionResponseOneOf1 = nil
	}

	// try to unmarshal data into ActionExecutionResponseOneOf2
	err = newStrictDecoder(data).Decode(&dst.ActionExecutionResponseOneOf2)
	if err == nil {
		jsonActionExecutionResponseOneOf2, _ := json.Marshal(dst.ActionExecutionResponseOneOf2)
		if string(jsonActionExecutionResponseOneOf2) == "{}" { // empty struct
			dst.ActionExecutionResponseOneOf2 = nil
		} else {
			if err = validator.Validate(dst.ActionExecutionResponseOneOf2); err != nil {
				dst.ActionExecutionResponseOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ActionExecutionResponseOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ActionExecutionResponseOneOf = nil
		dst.ActionExecutionResponseOneOf1 = nil
		dst.ActionExecutionResponseOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ActionExecutionResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ActionExecutionResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ActionExecutionResponse) MarshalJSON() ([]byte, error) {
	if src.ActionExecutionResponseOneOf != nil {
		return json.Marshal(&src.ActionExecutionResponseOneOf)
	}

	if src.ActionExecutionResponseOneOf1 != nil {
		return json.Marshal(&src.ActionExecutionResponseOneOf1)
	}

	if src.ActionExecutionResponseOneOf2 != nil {
		return json.Marshal(&src.ActionExecutionResponseOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ActionExecutionResponse) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ActionExecutionResponseOneOf != nil {
		return obj.ActionExecutionResponseOneOf
	}

	if obj.ActionExecutionResponseOneOf1 != nil {
		return obj.ActionExecutionResponseOneOf1
	}

	if obj.ActionExecutionResponseOneOf2 != nil {
		return obj.ActionExecutionResponseOneOf2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ActionExecutionResponse) GetActualInstanceValue() (interface{}) {
	if obj.ActionExecutionResponseOneOf != nil {
		return *obj.ActionExecutionResponseOneOf
	}

	if obj.ActionExecutionResponseOneOf1 != nil {
		return *obj.ActionExecutionResponseOneOf1
	}

	if obj.ActionExecutionResponseOneOf2 != nil {
		return *obj.ActionExecutionResponseOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableActionExecutionResponse struct {
	value *ActionExecutionResponse
	isSet bool
}

func (v NullableActionExecutionResponse) Get() *ActionExecutionResponse {
	return v.value
}

func (v *NullableActionExecutionResponse) Set(val *ActionExecutionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableActionExecutionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableActionExecutionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionExecutionResponse(val *ActionExecutionResponse) *NullableActionExecutionResponse {
	return &NullableActionExecutionResponse{value: val, isSet: true}
}

func (v NullableActionExecutionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionExecutionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


