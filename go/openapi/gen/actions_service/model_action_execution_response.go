/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actions_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ActionExecutionResponse - struct for ActionExecutionResponse
type ActionExecutionResponse struct {
	ActionExecutionResponseCreate *ActionExecutionResponseCreate
	ActionExecutionResponseDelete *ActionExecutionResponseDelete
	ActionExecutionResponseReplace *ActionExecutionResponseReplace
}

// ActionExecutionResponseCreateAsActionExecutionResponse is a convenience function that returns ActionExecutionResponseCreate wrapped in ActionExecutionResponse
func ActionExecutionResponseCreateAsActionExecutionResponse(v *ActionExecutionResponseCreate) ActionExecutionResponse {
	return ActionExecutionResponse{
		ActionExecutionResponseCreate: v,
	}
}

// ActionExecutionResponseDeleteAsActionExecutionResponse is a convenience function that returns ActionExecutionResponseDelete wrapped in ActionExecutionResponse
func ActionExecutionResponseDeleteAsActionExecutionResponse(v *ActionExecutionResponseDelete) ActionExecutionResponse {
	return ActionExecutionResponse{
		ActionExecutionResponseDelete: v,
	}
}

// ActionExecutionResponseReplaceAsActionExecutionResponse is a convenience function that returns ActionExecutionResponseReplace wrapped in ActionExecutionResponse
func ActionExecutionResponseReplaceAsActionExecutionResponse(v *ActionExecutionResponseReplace) ActionExecutionResponse {
	return ActionExecutionResponse{
		ActionExecutionResponseReplace: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ActionExecutionResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ActionExecutionResponseCreate
	err = newStrictDecoder(data).Decode(&dst.ActionExecutionResponseCreate)
	if err == nil {
		jsonActionExecutionResponseCreate, _ := json.Marshal(dst.ActionExecutionResponseCreate)
		if string(jsonActionExecutionResponseCreate) == "{}" { // empty struct
			dst.ActionExecutionResponseCreate = nil
		} else {
			if err = validator.Validate(dst.ActionExecutionResponseCreate); err != nil {
				dst.ActionExecutionResponseCreate = nil
			} else {
				match++
			}
		}
	} else {
		dst.ActionExecutionResponseCreate = nil
	}

	// try to unmarshal data into ActionExecutionResponseDelete
	err = newStrictDecoder(data).Decode(&dst.ActionExecutionResponseDelete)
	if err == nil {
		jsonActionExecutionResponseDelete, _ := json.Marshal(dst.ActionExecutionResponseDelete)
		if string(jsonActionExecutionResponseDelete) == "{}" { // empty struct
			dst.ActionExecutionResponseDelete = nil
		} else {
			if err = validator.Validate(dst.ActionExecutionResponseDelete); err != nil {
				dst.ActionExecutionResponseDelete = nil
			} else {
				match++
			}
		}
	} else {
		dst.ActionExecutionResponseDelete = nil
	}

	// try to unmarshal data into ActionExecutionResponseReplace
	err = newStrictDecoder(data).Decode(&dst.ActionExecutionResponseReplace)
	if err == nil {
		jsonActionExecutionResponseReplace, _ := json.Marshal(dst.ActionExecutionResponseReplace)
		if string(jsonActionExecutionResponseReplace) == "{}" { // empty struct
			dst.ActionExecutionResponseReplace = nil
		} else {
			if err = validator.Validate(dst.ActionExecutionResponseReplace); err != nil {
				dst.ActionExecutionResponseReplace = nil
			} else {
				match++
			}
		}
	} else {
		dst.ActionExecutionResponseReplace = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ActionExecutionResponseCreate = nil
		dst.ActionExecutionResponseDelete = nil
		dst.ActionExecutionResponseReplace = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ActionExecutionResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ActionExecutionResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ActionExecutionResponse) MarshalJSON() ([]byte, error) {
	if src.ActionExecutionResponseCreate != nil {
		return json.Marshal(&src.ActionExecutionResponseCreate)
	}

	if src.ActionExecutionResponseDelete != nil {
		return json.Marshal(&src.ActionExecutionResponseDelete)
	}

	if src.ActionExecutionResponseReplace != nil {
		return json.Marshal(&src.ActionExecutionResponseReplace)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ActionExecutionResponse) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ActionExecutionResponseCreate != nil {
		return obj.ActionExecutionResponseCreate
	}

	if obj.ActionExecutionResponseDelete != nil {
		return obj.ActionExecutionResponseDelete
	}

	if obj.ActionExecutionResponseReplace != nil {
		return obj.ActionExecutionResponseReplace
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ActionExecutionResponse) GetActualInstanceValue() (interface{}) {
	if obj.ActionExecutionResponseCreate != nil {
		return *obj.ActionExecutionResponseCreate
	}

	if obj.ActionExecutionResponseDelete != nil {
		return *obj.ActionExecutionResponseDelete
	}

	if obj.ActionExecutionResponseReplace != nil {
		return *obj.ActionExecutionResponseReplace
	}

	// all schemas are nil
	return nil
}

type NullableActionExecutionResponse struct {
	value *ActionExecutionResponse
	isSet bool
}

func (v NullableActionExecutionResponse) Get() *ActionExecutionResponse {
	return v.value
}

func (v *NullableActionExecutionResponse) Set(val *ActionExecutionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableActionExecutionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableActionExecutionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionExecutionResponse(val *ActionExecutionResponse) *NullableActionExecutionResponse {
	return &NullableActionExecutionResponse{value: val, isSet: true}
}

func (v NullableActionExecutionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionExecutionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


