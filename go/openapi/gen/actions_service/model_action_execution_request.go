/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actions_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ActionExecutionRequest - struct for ActionExecutionRequest
type ActionExecutionRequest struct {
	ActionExecutionRequestOneOf *ActionExecutionRequestOneOf
	ActionExecutionRequestOneOf1 *ActionExecutionRequestOneOf1
	ActionExecutionRequestOneOf2 *ActionExecutionRequestOneOf2
}

// ActionExecutionRequestOneOfAsActionExecutionRequest is a convenience function that returns ActionExecutionRequestOneOf wrapped in ActionExecutionRequest
func ActionExecutionRequestOneOfAsActionExecutionRequest(v *ActionExecutionRequestOneOf) ActionExecutionRequest {
	return ActionExecutionRequest{
		ActionExecutionRequestOneOf: v,
	}
}

// ActionExecutionRequestOneOf1AsActionExecutionRequest is a convenience function that returns ActionExecutionRequestOneOf1 wrapped in ActionExecutionRequest
func ActionExecutionRequestOneOf1AsActionExecutionRequest(v *ActionExecutionRequestOneOf1) ActionExecutionRequest {
	return ActionExecutionRequest{
		ActionExecutionRequestOneOf1: v,
	}
}

// ActionExecutionRequestOneOf2AsActionExecutionRequest is a convenience function that returns ActionExecutionRequestOneOf2 wrapped in ActionExecutionRequest
func ActionExecutionRequestOneOf2AsActionExecutionRequest(v *ActionExecutionRequestOneOf2) ActionExecutionRequest {
	return ActionExecutionRequest{
		ActionExecutionRequestOneOf2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ActionExecutionRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ActionExecutionRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.ActionExecutionRequestOneOf)
	if err == nil {
		jsonActionExecutionRequestOneOf, _ := json.Marshal(dst.ActionExecutionRequestOneOf)
		if string(jsonActionExecutionRequestOneOf) == "{}" { // empty struct
			dst.ActionExecutionRequestOneOf = nil
		} else {
			if err = validator.Validate(dst.ActionExecutionRequestOneOf); err != nil {
				dst.ActionExecutionRequestOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.ActionExecutionRequestOneOf = nil
	}

	// try to unmarshal data into ActionExecutionRequestOneOf1
	err = newStrictDecoder(data).Decode(&dst.ActionExecutionRequestOneOf1)
	if err == nil {
		jsonActionExecutionRequestOneOf1, _ := json.Marshal(dst.ActionExecutionRequestOneOf1)
		if string(jsonActionExecutionRequestOneOf1) == "{}" { // empty struct
			dst.ActionExecutionRequestOneOf1 = nil
		} else {
			if err = validator.Validate(dst.ActionExecutionRequestOneOf1); err != nil {
				dst.ActionExecutionRequestOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ActionExecutionRequestOneOf1 = nil
	}

	// try to unmarshal data into ActionExecutionRequestOneOf2
	err = newStrictDecoder(data).Decode(&dst.ActionExecutionRequestOneOf2)
	if err == nil {
		jsonActionExecutionRequestOneOf2, _ := json.Marshal(dst.ActionExecutionRequestOneOf2)
		if string(jsonActionExecutionRequestOneOf2) == "{}" { // empty struct
			dst.ActionExecutionRequestOneOf2 = nil
		} else {
			if err = validator.Validate(dst.ActionExecutionRequestOneOf2); err != nil {
				dst.ActionExecutionRequestOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ActionExecutionRequestOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ActionExecutionRequestOneOf = nil
		dst.ActionExecutionRequestOneOf1 = nil
		dst.ActionExecutionRequestOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ActionExecutionRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ActionExecutionRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ActionExecutionRequest) MarshalJSON() ([]byte, error) {
	if src.ActionExecutionRequestOneOf != nil {
		return json.Marshal(&src.ActionExecutionRequestOneOf)
	}

	if src.ActionExecutionRequestOneOf1 != nil {
		return json.Marshal(&src.ActionExecutionRequestOneOf1)
	}

	if src.ActionExecutionRequestOneOf2 != nil {
		return json.Marshal(&src.ActionExecutionRequestOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ActionExecutionRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ActionExecutionRequestOneOf != nil {
		return obj.ActionExecutionRequestOneOf
	}

	if obj.ActionExecutionRequestOneOf1 != nil {
		return obj.ActionExecutionRequestOneOf1
	}

	if obj.ActionExecutionRequestOneOf2 != nil {
		return obj.ActionExecutionRequestOneOf2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ActionExecutionRequest) GetActualInstanceValue() (interface{}) {
	if obj.ActionExecutionRequestOneOf != nil {
		return *obj.ActionExecutionRequestOneOf
	}

	if obj.ActionExecutionRequestOneOf1 != nil {
		return *obj.ActionExecutionRequestOneOf1
	}

	if obj.ActionExecutionRequestOneOf2 != nil {
		return *obj.ActionExecutionRequestOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableActionExecutionRequest struct {
	value *ActionExecutionRequest
	isSet bool
}

func (v NullableActionExecutionRequest) Get() *ActionExecutionRequest {
	return v.value
}

func (v *NullableActionExecutionRequest) Set(val *ActionExecutionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableActionExecutionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableActionExecutionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionExecutionRequest(val *ActionExecutionRequest) *NullableActionExecutionRequest {
	return &NullableActionExecutionRequest{value: val, isSet: true}
}

func (v NullableActionExecutionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionExecutionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


