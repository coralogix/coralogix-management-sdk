/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actions_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ActionExecutionRequest - struct for ActionExecutionRequest
type ActionExecutionRequest struct {
	ActionExecutionRequestCreate *ActionExecutionRequestCreate
	ActionExecutionRequestDelete *ActionExecutionRequestDelete
	ActionExecutionRequestReplace *ActionExecutionRequestReplace
}

// ActionExecutionRequestCreateAsActionExecutionRequest is a convenience function that returns ActionExecutionRequestCreate wrapped in ActionExecutionRequest
func ActionExecutionRequestCreateAsActionExecutionRequest(v *ActionExecutionRequestCreate) ActionExecutionRequest {
	return ActionExecutionRequest{
		ActionExecutionRequestCreate: v,
	}
}

// ActionExecutionRequestDeleteAsActionExecutionRequest is a convenience function that returns ActionExecutionRequestDelete wrapped in ActionExecutionRequest
func ActionExecutionRequestDeleteAsActionExecutionRequest(v *ActionExecutionRequestDelete) ActionExecutionRequest {
	return ActionExecutionRequest{
		ActionExecutionRequestDelete: v,
	}
}

// ActionExecutionRequestReplaceAsActionExecutionRequest is a convenience function that returns ActionExecutionRequestReplace wrapped in ActionExecutionRequest
func ActionExecutionRequestReplaceAsActionExecutionRequest(v *ActionExecutionRequestReplace) ActionExecutionRequest {
	return ActionExecutionRequest{
		ActionExecutionRequestReplace: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ActionExecutionRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ActionExecutionRequestCreate
	err = newStrictDecoder(data).Decode(&dst.ActionExecutionRequestCreate)
	if err == nil {
		jsonActionExecutionRequestCreate, _ := json.Marshal(dst.ActionExecutionRequestCreate)
		if string(jsonActionExecutionRequestCreate) == "{}" { // empty struct
			dst.ActionExecutionRequestCreate = nil
		} else {
			if err = validator.Validate(dst.ActionExecutionRequestCreate); err != nil {
				dst.ActionExecutionRequestCreate = nil
			} else {
				match++
			}
		}
	} else {
		dst.ActionExecutionRequestCreate = nil
	}

	// try to unmarshal data into ActionExecutionRequestDelete
	err = newStrictDecoder(data).Decode(&dst.ActionExecutionRequestDelete)
	if err == nil {
		jsonActionExecutionRequestDelete, _ := json.Marshal(dst.ActionExecutionRequestDelete)
		if string(jsonActionExecutionRequestDelete) == "{}" { // empty struct
			dst.ActionExecutionRequestDelete = nil
		} else {
			if err = validator.Validate(dst.ActionExecutionRequestDelete); err != nil {
				dst.ActionExecutionRequestDelete = nil
			} else {
				match++
			}
		}
	} else {
		dst.ActionExecutionRequestDelete = nil
	}

	// try to unmarshal data into ActionExecutionRequestReplace
	err = newStrictDecoder(data).Decode(&dst.ActionExecutionRequestReplace)
	if err == nil {
		jsonActionExecutionRequestReplace, _ := json.Marshal(dst.ActionExecutionRequestReplace)
		if string(jsonActionExecutionRequestReplace) == "{}" { // empty struct
			dst.ActionExecutionRequestReplace = nil
		} else {
			if err = validator.Validate(dst.ActionExecutionRequestReplace); err != nil {
				dst.ActionExecutionRequestReplace = nil
			} else {
				match++
			}
		}
	} else {
		dst.ActionExecutionRequestReplace = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ActionExecutionRequestCreate = nil
		dst.ActionExecutionRequestDelete = nil
		dst.ActionExecutionRequestReplace = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ActionExecutionRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ActionExecutionRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ActionExecutionRequest) MarshalJSON() ([]byte, error) {
	if src.ActionExecutionRequestCreate != nil {
		return json.Marshal(&src.ActionExecutionRequestCreate)
	}

	if src.ActionExecutionRequestDelete != nil {
		return json.Marshal(&src.ActionExecutionRequestDelete)
	}

	if src.ActionExecutionRequestReplace != nil {
		return json.Marshal(&src.ActionExecutionRequestReplace)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ActionExecutionRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ActionExecutionRequestCreate != nil {
		return obj.ActionExecutionRequestCreate
	}

	if obj.ActionExecutionRequestDelete != nil {
		return obj.ActionExecutionRequestDelete
	}

	if obj.ActionExecutionRequestReplace != nil {
		return obj.ActionExecutionRequestReplace
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ActionExecutionRequest) GetActualInstanceValue() (interface{}) {
	if obj.ActionExecutionRequestCreate != nil {
		return *obj.ActionExecutionRequestCreate
	}

	if obj.ActionExecutionRequestDelete != nil {
		return *obj.ActionExecutionRequestDelete
	}

	if obj.ActionExecutionRequestReplace != nil {
		return *obj.ActionExecutionRequestReplace
	}

	// all schemas are nil
	return nil
}

type NullableActionExecutionRequest struct {
	value *ActionExecutionRequest
	isSet bool
}

func (v NullableActionExecutionRequest) Get() *ActionExecutionRequest {
	return v.value
}

func (v *NullableActionExecutionRequest) Set(val *ActionExecutionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableActionExecutionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableActionExecutionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionExecutionRequest(val *ActionExecutionRequest) *NullableActionExecutionRequest {
	return &NullableActionExecutionRequest{value: val, isSet: true}
}

func (v NullableActionExecutionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionExecutionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


