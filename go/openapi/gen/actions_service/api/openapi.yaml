openapi: 3.0.0
info:
  title: ""
  version: 1.0.0
servers:
- url: /
paths:
  /v2/actions:
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: ActionsService_ListActions
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListActionsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: List Actions
      tags:
      - Actions Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v2/actions';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v2/actions"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.coralogix.com/mgmt/openapi/v2/actions \
            --header 'Authorization: Bearer <API_KEY>'
    post:
      description: No description available
      externalDocs:
        url: ""
      operationId: ActionsService_CreateAction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActionsService_CreateAction_request"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateActionResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Create Action
      tags:
      - Actions Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v2/actions';

          let options = {
            method: 'POST',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"applicationNames":["string"],"isPrivate":true,"name":"string","sourceType":"SOURCE_TYPE_UNSPECIFIED","subsystemNames":["string"],"url":"string"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v2/actions"

          payload = {
              "applicationNames": ["string"],
              "isPrivate": True,
              "name": "string",
              "sourceType": "SOURCE_TYPE_UNSPECIFIED",
              "subsystemNames": ["string"],
              "url": "string"
          }
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/v2/actions \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"applicationNames":["string"],"isPrivate":true,"name":"string","sourceType":"SOURCE_TYPE_UNSPECIFIED","subsystemNames":["string"],"url":"string"}'
    put:
      description: No description available
      externalDocs:
        url: ""
      operationId: ActionsService_ReplaceAction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActionsService_ReplaceAction_request"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplaceActionResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Replace Action
      tags:
      - Actions Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v2/actions';

          let options = {
            method: 'PUT',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"action":{"applicationNames":["string"],"createdBy":"string","id":"string","isHidden":true,"isPrivate":true,"name":"string","sourceType":"SOURCE_TYPE_UNSPECIFIED","subsystemNames":["string"],"url":"string"}}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v2/actions"

          payload = {"action": {
                  "applicationNames": ["string"],
                  "createdBy": "string",
                  "id": "string",
                  "isHidden": True,
                  "isPrivate": True,
                  "name": "string",
                  "sourceType": "SOURCE_TYPE_UNSPECIFIED",
                  "subsystemNames": ["string"],
                  "url": "string"
              }}
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("PUT", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://api.coralogix.com/mgmt/openapi/v2/actions \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"action":{"applicationNames":["string"],"createdBy":"string","id":"string","isHidden":true,"isPrivate":true,"name":"string","sourceType":"SOURCE_TYPE_UNSPECIFIED","subsystemNames":["string"],"url":"string"}}'
  /v2/actions/actions:atomicBatchExecute:
    post:
      description: No description available
      externalDocs:
        url: ""
      operationId: ActionsService_AtomicBatchExecuteActions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActionsService_AtomicBatchExecuteActions_request"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AtomicBatchExecuteActionsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Atomic Batch Execute Actions
      tags:
      - Actions Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v2/actions/actions:atomicBatchExecute';

          let options = {
            method: 'POST',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"requests":[{"delete":{"id":"string"}}]}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v2/actions/actions:atomicBatchExecute"

          payload = {"requests": [{"delete": {"id": "string"}}]}
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/v2/actions/actions:atomicBatchExecute \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"requests":[{"delete":{"id":"string"}}]}'
  /v2/actions/actions:order:
    post:
      description: No description available
      externalDocs:
        url: ""
      operationId: ActionsService_OrderActions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActionsService_OrderActions_request"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderActionsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Order Actions
      tags:
      - Actions Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v2/actions/actions:order';

          let options = {
            method: 'POST',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"privateActionsOrder":{"property1":0,"property2":0},"sharedActionsOrder":{"property1":0,"property2":0}}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v2/actions/actions:order"

          payload = {
              "privateActionsOrder": {
                  "property1": 0,
                  "property2": 0
              },
              "sharedActionsOrder": {
                  "property1": 0,
                  "property2": 0
              }
          }
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/v2/actions/actions:order \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"privateActionsOrder":{"property1":0,"property2":0},"sharedActionsOrder":{"property1":0,"property2":0}}'
  /v2/actions/{id}:
    delete:
      description: No description available
      externalDocs:
        url: ""
      operationId: ActionsService_DeleteAction
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteActionResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete Action
      tags:
      - Actions Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D';

          let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("DELETE", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D \
            --header 'Authorization: Bearer <API_KEY>'
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: ActionsService_GetAction
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetActionResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get Action
      tags:
      - Actions Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D \
            --header 'Authorization: Bearer <API_KEY>'
components:
  schemas:
    ActionExecutionRequest:
      oneOf:
      - $ref: "#/components/schemas/ActionExecutionRequestDelete"
      - $ref: "#/components/schemas/ActionExecutionRequestCreate"
      - $ref: "#/components/schemas/ActionExecutionRequestReplace"
    ActionExecutionRequestCreate:
      additionalProperties: false
      properties:
        create:
          $ref: "#/components/schemas/CreateActionRequest"
      type: object
    ActionExecutionRequestDelete:
      additionalProperties: false
      properties:
        delete:
          $ref: "#/components/schemas/DeleteActionRequest"
      type: object
    ActionExecutionRequestReplace:
      additionalProperties: false
      properties:
        replace:
          $ref: "#/components/schemas/ReplaceActionRequest"
      type: object
    ActionExecutionResponse:
      oneOf:
      - $ref: "#/components/schemas/ActionExecutionResponseCreate"
      - $ref: "#/components/schemas/ActionExecutionResponseReplace"
      - $ref: "#/components/schemas/ActionExecutionResponseDelete"
    ActionExecutionResponseCreate:
      additionalProperties: false
      example:
        create:
          action:
            createdBy: createdBy
            sourceType: SOURCE_TYPE_UNSPECIFIED
            subsystemNames:
            - subsystemNames
            - subsystemNames
            name: name
            applicationNames:
            - applicationNames
            - applicationNames
            id: id
            isPrivate: true
            url: url
            isHidden: true
      properties:
        create:
          $ref: "#/components/schemas/CreateActionResponse"
      type: object
    ActionExecutionResponseDelete:
      additionalProperties: false
      properties:
        delete:
          type: object
      type: object
    ActionExecutionResponseReplace:
      additionalProperties: false
      properties:
        replace:
          $ref: "#/components/schemas/ReplaceActionResponse"
      type: object
    AtomicBatchExecuteActionsResponse:
      example:
        matchingResponses:
        - create:
            action:
              createdBy: createdBy
              sourceType: SOURCE_TYPE_UNSPECIFIED
              subsystemNames:
              - subsystemNames
              - subsystemNames
              name: name
              applicationNames:
              - applicationNames
              - applicationNames
              id: id
              isPrivate: true
              url: url
              isHidden: true
        - create:
            action:
              createdBy: createdBy
              sourceType: SOURCE_TYPE_UNSPECIFIED
              subsystemNames:
              - subsystemNames
              - subsystemNames
              name: name
              applicationNames:
              - applicationNames
              - applicationNames
              id: id
              isPrivate: true
              url: url
              isHidden: true
      properties:
        matchingResponses:
          items:
            $ref: "#/components/schemas/ActionExecutionResponse"
          type: array
      type: object
    ColorsByAggregation:
      additionalProperties: false
      properties:
        aggregation:
          $ref: "#/components/schemas/ColorsByAggregation"
      type: object
    ColorsByGroupBy:
      additionalProperties: false
      properties:
        groupBy:
          $ref: "#/components/schemas/ColorsByGroupBy"
      type: object
    ColorsByStack:
      additionalProperties: false
      properties:
        stack:
          $ref: "#/components/schemas/ColorsByStack"
      type: object
    CreateActionRequest:
      properties:
        applicationNames:
          items:
            type: string
          type: array
        isPrivate:
          type: boolean
        name:
          type: string
        sourceType:
          $ref: "#/components/schemas/v2.SourceType"
        subsystemNames:
          items:
            type: string
          type: array
        url:
          type: string
      type: object
    CreateActionResponse:
      example:
        action:
          createdBy: createdBy
          sourceType: SOURCE_TYPE_UNSPECIFIED
          subsystemNames:
          - subsystemNames
          - subsystemNames
          name: name
          applicationNames:
          - applicationNames
          - applicationNames
          id: id
          isPrivate: true
          url: url
          isHidden: true
      properties:
        action:
          $ref: "#/components/schemas/v2.Action"
      type: object
    DeleteActionRequest:
      properties:
        id:
          type: string
      type: object
    DeleteActionResponse:
      type: object
    FieldGroup:
      properties:
        name:
          type: string
        value:
          type: string
      type: object
    FilterPathAndValues:
      oneOf:
      - $ref: "#/components/schemas/FilterPathAndValuesMultipleValues"
      - $ref: "#/components/schemas/FilterPathAndValuesFilters"
    FilterPathAndValuesFilters:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        filters:
          $ref: "#/components/schemas/Filters"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
    FilterPathAndValuesMultipleValues:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        multipleValues:
          $ref: "#/components/schemas/MultipleValues"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
    Filters:
      description: This data structure represents a filter
      externalDocs:
        url: ""
      properties:
        operator:
          $ref: "#/components/schemas/v3.FilterOperator"
        pathAndValues:
          items:
            $ref: "#/components/schemas/FilterPathAndValues"
          type: array
      required:
      - pathAndValues
      title: Filters
      type: object
    GetActionResponse:
      example:
        action:
          createdBy: createdBy
          sourceType: SOURCE_TYPE_UNSPECIFIED
          subsystemNames:
          - subsystemNames
          - subsystemNames
          name: name
          applicationNames:
          - applicationNames
          - applicationNames
          id: id
          isPrivate: true
          url: url
          isHidden: true
      properties:
        action:
          $ref: "#/components/schemas/v2.Action"
      type: object
    ListActionsResponse:
      example:
        actions:
        - createdBy: createdBy
          sourceType: SOURCE_TYPE_UNSPECIFIED
          subsystemNames:
          - subsystemNames
          - subsystemNames
          name: name
          applicationNames:
          - applicationNames
          - applicationNames
          id: id
          isPrivate: true
          url: url
          isHidden: true
        - createdBy: createdBy
          sourceType: SOURCE_TYPE_UNSPECIFIED
          subsystemNames:
          - subsystemNames
          - subsystemNames
          name: name
          applicationNames:
          - applicationNames
          - applicationNames
          id: id
          isPrivate: true
          url: url
          isHidden: true
      properties:
        actions:
          items:
            $ref: "#/components/schemas/v2.Action"
          type: array
      type: object
    MultipleValues:
      properties:
        matcher:
          $ref: "#/components/schemas/events.v3.FilterMatcher"
        values:
          items:
            type: string
          type: array
      type: object
    OrderActionsResponse:
      type: object
    ReplaceActionRequest:
      properties:
        action:
          $ref: "#/components/schemas/v2.Action"
      type: object
    ReplaceActionResponse:
      example:
        action:
          createdBy: createdBy
          sourceType: SOURCE_TYPE_UNSPECIFIED
          subsystemNames:
          - subsystemNames
          - subsystemNames
          name: name
          applicationNames:
          - applicationNames
          - applicationNames
          id: id
          isPrivate: true
          url: url
          isHidden: true
      properties:
        action:
          $ref: "#/components/schemas/v2.Action"
      type: object
    common.Group:
      properties:
        field:
          $ref: "#/components/schemas/FieldGroup"
        groups:
          items:
            $ref: "#/components/schemas/common.Group"
          type: array
        value:
          format: double
          type: number
      type: object
    events.v3.FilterMatcher:
      enum:
      - FILTER_MATCHER_TEXT_OR_UNSPECIFIED
      - FILTER_MATCHER_REGEXP
      type: string
    v2.Action:
      example:
        createdBy: createdBy
        sourceType: SOURCE_TYPE_UNSPECIFIED
        subsystemNames:
        - subsystemNames
        - subsystemNames
        name: name
        applicationNames:
        - applicationNames
        - applicationNames
        id: id
        isPrivate: true
        url: url
        isHidden: true
      properties:
        applicationNames:
          items:
            type: string
          type: array
        createdBy:
          type: string
        id:
          type: string
        isHidden:
          type: boolean
        isPrivate:
          type: boolean
        name:
          type: string
        sourceType:
          $ref: "#/components/schemas/v2.SourceType"
        subsystemNames:
          items:
            type: string
          type: array
        url:
          type: string
      type: object
    v2.SourceType:
      enum:
      - SOURCE_TYPE_UNSPECIFIED
      - SOURCE_TYPE_LOG
      - SOURCE_TYPE_DATA_MAP
      type: string
    v3.FilterOperator:
      enum:
      - FILTER_OPERATOR_AND_OR_UNSPECIFIED
      - FILTER_OPERATOR_OR
      type: string
    ActionsService_ReplaceAction_request:
      additionalProperties: false
      properties:
        action:
          $ref: "#/components/schemas/v2.Action"
      type: object
    ActionsService_CreateAction_request:
      additionalProperties: false
      properties:
        applicationNames:
          items:
            type: string
          type: array
        isPrivate:
          type: boolean
        name:
          type: string
        sourceType:
          $ref: "#/components/schemas/v2.SourceType"
        subsystemNames:
          items:
            type: string
          type: array
        url:
          type: string
      type: object
    ActionsService_AtomicBatchExecuteActions_request:
      additionalProperties: false
      properties:
        requests:
          items:
            $ref: "#/components/schemas/ActionExecutionRequest"
          type: array
      type: object
    ActionsService_OrderActions_request:
      additionalProperties: false
      properties:
        privateActionsOrder:
          additionalProperties:
            format: int64
            type: integer
          type: object
        sharedActionsOrder:
          additionalProperties:
            format: int64
            type: integer
          type: object
      type: object
  securitySchemes:
    apiKeyAuth:
      description: API key authentication
      in: header
      name: Authorization
      type: apiKey
