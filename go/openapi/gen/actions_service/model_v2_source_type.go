/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actions_service

import (
	"encoding/json"
	"fmt"
)

// V2SourceType the model 'V2SourceType'
type V2SourceType string

// List of v2.SourceType
const (
	V2SOURCETYPE_SOURCE_TYPE_UNSPECIFIED V2SourceType = "SOURCE_TYPE_UNSPECIFIED"
	V2SOURCETYPE_SOURCE_TYPE_LOG V2SourceType = "SOURCE_TYPE_LOG"
	V2SOURCETYPE_SOURCE_TYPE_DATA_MAP V2SourceType = "SOURCE_TYPE_DATA_MAP"
)

// All allowed values of V2SourceType enum
var AllowedV2SourceTypeEnumValues = []V2SourceType{
	"SOURCE_TYPE_UNSPECIFIED",
	"SOURCE_TYPE_LOG",
	"SOURCE_TYPE_DATA_MAP",
}

func (v *V2SourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V2SourceType(value)
	for _, existing := range AllowedV2SourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V2SourceType", value)
}

// NewV2SourceTypeFromValue returns a pointer to a valid V2SourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV2SourceTypeFromValue(v string) (*V2SourceType, error) {
	ev := V2SourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V2SourceType: valid values are %v", v, AllowedV2SourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V2SourceType) IsValid() bool {
	for _, existing := range AllowedV2SourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v2.SourceType value
func (v V2SourceType) Ptr() *V2SourceType {
	return &v
}

type NullableV2SourceType struct {
	value *V2SourceType
	isSet bool
}

func (v NullableV2SourceType) Get() *V2SourceType {
	return v.value
}

func (v *NullableV2SourceType) Set(val *V2SourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableV2SourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableV2SourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2SourceType(val *V2SourceType) *NullableV2SourceType {
	return &NullableV2SourceType{value: val, isSet: true}
}

func (v NullableV2SourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2SourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

