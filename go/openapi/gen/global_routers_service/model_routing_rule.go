/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package global_routers_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RoutingRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutingRule{}

// RoutingRule Defines routing rule for notifications
type RoutingRule struct {
	Condition string `json:"condition"`
	CustomDetails *map[string]string `json:"customDetails,omitempty"`
	EntityType *NotificationCenterEntityType `json:"entityType,omitempty"`
	Name *string `json:"name,omitempty"`
	Targets []RoutingTarget `json:"targets"`
}

type _RoutingRule RoutingRule

// NewRoutingRule instantiates a new RoutingRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingRule(condition string, targets []RoutingTarget) *RoutingRule {
	this := RoutingRule{}
	this.Condition = condition
	this.Targets = targets
	return &this
}

// NewRoutingRuleWithDefaults instantiates a new RoutingRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingRuleWithDefaults() *RoutingRule {
	this := RoutingRule{}
	return &this
}

// GetCondition returns the Condition field value
func (o *RoutingRule) GetCondition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value
// and a boolean to check if the value has been set.
func (o *RoutingRule) GetConditionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Condition, true
}

// SetCondition sets field value
func (o *RoutingRule) SetCondition(v string) {
	o.Condition = v
}

// GetCustomDetails returns the CustomDetails field value if set, zero value otherwise.
func (o *RoutingRule) GetCustomDetails() map[string]string {
	if o == nil || IsNil(o.CustomDetails) {
		var ret map[string]string
		return ret
	}
	return *o.CustomDetails
}

// GetCustomDetailsOk returns a tuple with the CustomDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingRule) GetCustomDetailsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.CustomDetails) {
		return nil, false
	}
	return o.CustomDetails, true
}

// HasCustomDetails returns a boolean if a field has been set.
func (o *RoutingRule) HasCustomDetails() bool {
	if o != nil && !IsNil(o.CustomDetails) {
		return true
	}

	return false
}

// SetCustomDetails gets a reference to the given map[string]string and assigns it to the CustomDetails field.
func (o *RoutingRule) SetCustomDetails(v map[string]string) {
	o.CustomDetails = &v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *RoutingRule) GetEntityType() NotificationCenterEntityType {
	if o == nil || IsNil(o.EntityType) {
		var ret NotificationCenterEntityType
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingRule) GetEntityTypeOk() (*NotificationCenterEntityType, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *RoutingRule) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given NotificationCenterEntityType and assigns it to the EntityType field.
func (o *RoutingRule) SetEntityType(v NotificationCenterEntityType) {
	o.EntityType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RoutingRule) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingRule) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RoutingRule) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RoutingRule) SetName(v string) {
	o.Name = &v
}

// GetTargets returns the Targets field value
func (o *RoutingRule) GetTargets() []RoutingTarget {
	if o == nil {
		var ret []RoutingTarget
		return ret
	}

	return o.Targets
}

// GetTargetsOk returns a tuple with the Targets field value
// and a boolean to check if the value has been set.
func (o *RoutingRule) GetTargetsOk() ([]RoutingTarget, bool) {
	if o == nil {
		return nil, false
	}
	return o.Targets, true
}

// SetTargets sets field value
func (o *RoutingRule) SetTargets(v []RoutingTarget) {
	o.Targets = v
}

func (o RoutingRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutingRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["condition"] = o.Condition
	if !IsNil(o.CustomDetails) {
		toSerialize["customDetails"] = o.CustomDetails
	}
	if !IsNil(o.EntityType) {
		toSerialize["entityType"] = o.EntityType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["targets"] = o.Targets
	return toSerialize, nil
}

func (o *RoutingRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"condition",
		"targets",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoutingRule := _RoutingRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoutingRule)

	if err != nil {
		return err
	}

	*o = RoutingRule(varRoutingRule)

	return err
}

type NullableRoutingRule struct {
	value *RoutingRule
	isSet bool
}

func (v NullableRoutingRule) Get() *RoutingRule {
	return v.value
}

func (v *NullableRoutingRule) Set(val *RoutingRule) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingRule) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingRule(val *RoutingRule) *NullableRoutingRule {
	return &NullableRoutingRule{value: val, isSet: true}
}

func (v NullableRoutingRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


