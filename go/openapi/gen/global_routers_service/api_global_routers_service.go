/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package global_routers_service

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// GlobalRoutersServiceAPIService GlobalRoutersServiceAPI service
type GlobalRoutersServiceAPIService service

type ApiGlobalRoutersServiceBatchGetGlobalRoutersRequest struct {
	ctx context.Context
	ApiService *GlobalRoutersServiceAPIService
	globalRouterIds *[]string
}

func (r ApiGlobalRoutersServiceBatchGetGlobalRoutersRequest) GlobalRouterIds(globalRouterIds []string) ApiGlobalRoutersServiceBatchGetGlobalRoutersRequest {
	r.globalRouterIds = &globalRouterIds
	return r
}

func (r ApiGlobalRoutersServiceBatchGetGlobalRoutersRequest) Execute() (*BatchGetGlobalRoutersResponse, *http.Response, error) {
	return r.ApiService.GlobalRoutersServiceBatchGetGlobalRoutersExecute(r)
}

/*
GlobalRoutersServiceBatchGetGlobalRouters Batch Get Global Routers

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGlobalRoutersServiceBatchGetGlobalRoutersRequest
*/
func (a *GlobalRoutersServiceAPIService) GlobalRoutersServiceBatchGetGlobalRouters(ctx context.Context) ApiGlobalRoutersServiceBatchGetGlobalRoutersRequest {
	return ApiGlobalRoutersServiceBatchGetGlobalRoutersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchGetGlobalRoutersResponse
func (a *GlobalRoutersServiceAPIService) GlobalRoutersServiceBatchGetGlobalRoutersExecute(r ApiGlobalRoutersServiceBatchGetGlobalRoutersRequest) (*BatchGetGlobalRoutersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchGetGlobalRoutersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlobalRoutersServiceAPIService.GlobalRoutersServiceBatchGetGlobalRouters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notifications/notification-center/v1/routers:batchGetSummaries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.globalRouterIds != nil {
		t := *r.globalRouterIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "global_router_ids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "global_router_ids", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGlobalRoutersServiceCreateGlobalRouterRequest struct {
	ctx context.Context
	ApiService *GlobalRoutersServiceAPIService
	globalRouter *GlobalRouter
}

func (r ApiGlobalRoutersServiceCreateGlobalRouterRequest) GlobalRouter(globalRouter GlobalRouter) ApiGlobalRoutersServiceCreateGlobalRouterRequest {
	r.globalRouter = &globalRouter
	return r
}

func (r ApiGlobalRoutersServiceCreateGlobalRouterRequest) Execute() (*CreateGlobalRouterResponse, *http.Response, error) {
	return r.ApiService.GlobalRoutersServiceCreateGlobalRouterExecute(r)
}

/*
GlobalRoutersServiceCreateGlobalRouter Create Global Router

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGlobalRoutersServiceCreateGlobalRouterRequest
*/
func (a *GlobalRoutersServiceAPIService) GlobalRoutersServiceCreateGlobalRouter(ctx context.Context) ApiGlobalRoutersServiceCreateGlobalRouterRequest {
	return ApiGlobalRoutersServiceCreateGlobalRouterRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateGlobalRouterResponse
func (a *GlobalRoutersServiceAPIService) GlobalRoutersServiceCreateGlobalRouterExecute(r ApiGlobalRoutersServiceCreateGlobalRouterRequest) (*CreateGlobalRouterResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateGlobalRouterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlobalRoutersServiceAPIService.GlobalRoutersServiceCreateGlobalRouter")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notifications/notification-center/v1/routers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.globalRouter
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGlobalRoutersServiceDeleteGlobalRouterRequest struct {
	ctx context.Context
	ApiService *GlobalRoutersServiceAPIService
	id string
}

func (r ApiGlobalRoutersServiceDeleteGlobalRouterRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GlobalRoutersServiceDeleteGlobalRouterExecute(r)
}

/*
GlobalRoutersServiceDeleteGlobalRouter Delete Global Router

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiGlobalRoutersServiceDeleteGlobalRouterRequest
*/
func (a *GlobalRoutersServiceAPIService) GlobalRoutersServiceDeleteGlobalRouter(ctx context.Context, id string) ApiGlobalRoutersServiceDeleteGlobalRouterRequest {
	return ApiGlobalRoutersServiceDeleteGlobalRouterRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *GlobalRoutersServiceAPIService) GlobalRoutersServiceDeleteGlobalRouterExecute(r ApiGlobalRoutersServiceDeleteGlobalRouterRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlobalRoutersServiceAPIService.GlobalRoutersServiceDeleteGlobalRouter")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notifications/notification-center/v1/routers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGlobalRoutersServiceGetGlobalRouterRequest struct {
	ctx context.Context
	ApiService *GlobalRoutersServiceAPIService
	id string
}

func (r ApiGlobalRoutersServiceGetGlobalRouterRequest) Execute() (*GetGlobalRouterResponse, *http.Response, error) {
	return r.ApiService.GlobalRoutersServiceGetGlobalRouterExecute(r)
}

/*
GlobalRoutersServiceGetGlobalRouter Get Global Router

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiGlobalRoutersServiceGetGlobalRouterRequest
*/
func (a *GlobalRoutersServiceAPIService) GlobalRoutersServiceGetGlobalRouter(ctx context.Context, id string) ApiGlobalRoutersServiceGetGlobalRouterRequest {
	return ApiGlobalRoutersServiceGetGlobalRouterRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetGlobalRouterResponse
func (a *GlobalRoutersServiceAPIService) GlobalRoutersServiceGetGlobalRouterExecute(r ApiGlobalRoutersServiceGetGlobalRouterRequest) (*GetGlobalRouterResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetGlobalRouterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlobalRoutersServiceAPIService.GlobalRoutersServiceGetGlobalRouter")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notifications/notification-center/v1/routers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGlobalRoutersServiceListGlobalRoutersRequest struct {
	ctx context.Context
	ApiService *GlobalRoutersServiceAPIService
	entityType *string
	sourceEntityLabels *map[string]GlobalRoutersServiceListGlobalRoutersSourceEntityLabelsParameterValue
}

func (r ApiGlobalRoutersServiceListGlobalRoutersRequest) EntityType(entityType string) ApiGlobalRoutersServiceListGlobalRoutersRequest {
	r.entityType = &entityType
	return r
}

func (r ApiGlobalRoutersServiceListGlobalRoutersRequest) SourceEntityLabels(sourceEntityLabels map[string]GlobalRoutersServiceListGlobalRoutersSourceEntityLabelsParameterValue) ApiGlobalRoutersServiceListGlobalRoutersRequest {
	r.sourceEntityLabels = &sourceEntityLabels
	return r
}

func (r ApiGlobalRoutersServiceListGlobalRoutersRequest) Execute() (*ListGlobalRoutersResponse, *http.Response, error) {
	return r.ApiService.GlobalRoutersServiceListGlobalRoutersExecute(r)
}

/*
GlobalRoutersServiceListGlobalRouters List Global Routers

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGlobalRoutersServiceListGlobalRoutersRequest
*/
func (a *GlobalRoutersServiceAPIService) GlobalRoutersServiceListGlobalRouters(ctx context.Context) ApiGlobalRoutersServiceListGlobalRoutersRequest {
	return ApiGlobalRoutersServiceListGlobalRoutersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListGlobalRoutersResponse
func (a *GlobalRoutersServiceAPIService) GlobalRoutersServiceListGlobalRoutersExecute(r ApiGlobalRoutersServiceListGlobalRoutersRequest) (*ListGlobalRoutersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListGlobalRoutersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlobalRoutersServiceAPIService.GlobalRoutersServiceListGlobalRouters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notifications/notification-center/v1/routers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.entityType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "entity_type", r.entityType, "form", "")
	}
	if r.sourceEntityLabels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "source_entity_labels", r.sourceEntityLabels, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGlobalRoutersServiceReplaceGlobalRouterRequest struct {
	ctx context.Context
	ApiService *GlobalRoutersServiceAPIService
	globalRouter *GlobalRouter
}

func (r ApiGlobalRoutersServiceReplaceGlobalRouterRequest) GlobalRouter(globalRouter GlobalRouter) ApiGlobalRoutersServiceReplaceGlobalRouterRequest {
	r.globalRouter = &globalRouter
	return r
}

func (r ApiGlobalRoutersServiceReplaceGlobalRouterRequest) Execute() (*ReplaceGlobalRouterResponse, *http.Response, error) {
	return r.ApiService.GlobalRoutersServiceReplaceGlobalRouterExecute(r)
}

/*
GlobalRoutersServiceReplaceGlobalRouter Replace Global Router

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGlobalRoutersServiceReplaceGlobalRouterRequest
*/
func (a *GlobalRoutersServiceAPIService) GlobalRoutersServiceReplaceGlobalRouter(ctx context.Context) ApiGlobalRoutersServiceReplaceGlobalRouterRequest {
	return ApiGlobalRoutersServiceReplaceGlobalRouterRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ReplaceGlobalRouterResponse
func (a *GlobalRoutersServiceAPIService) GlobalRoutersServiceReplaceGlobalRouterExecute(r ApiGlobalRoutersServiceReplaceGlobalRouterRequest) (*ReplaceGlobalRouterResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReplaceGlobalRouterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlobalRoutersServiceAPIService.GlobalRoutersServiceReplaceGlobalRouter")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notifications/notification-center/v1/routers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.globalRouter
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
