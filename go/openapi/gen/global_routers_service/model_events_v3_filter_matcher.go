/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package global_routers_service

import (
	"encoding/json"
	"fmt"
)

// EventsV3FilterMatcher the model 'EventsV3FilterMatcher'
type EventsV3FilterMatcher string

// List of events.v3.FilterMatcher
const (
	EVENTSV3FILTERMATCHER_FILTER_MATCHER_TEXT_OR_UNSPECIFIED EventsV3FilterMatcher = "FILTER_MATCHER_TEXT_OR_UNSPECIFIED"
	EVENTSV3FILTERMATCHER_FILTER_MATCHER_REGEXP EventsV3FilterMatcher = "FILTER_MATCHER_REGEXP"
)

// All allowed values of EventsV3FilterMatcher enum
var AllowedEventsV3FilterMatcherEnumValues = []EventsV3FilterMatcher{
	"FILTER_MATCHER_TEXT_OR_UNSPECIFIED",
	"FILTER_MATCHER_REGEXP",
}

func (v *EventsV3FilterMatcher) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventsV3FilterMatcher(value)
	for _, existing := range AllowedEventsV3FilterMatcherEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventsV3FilterMatcher", value)
}

// NewEventsV3FilterMatcherFromValue returns a pointer to a valid EventsV3FilterMatcher
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventsV3FilterMatcherFromValue(v string) (*EventsV3FilterMatcher, error) {
	ev := EventsV3FilterMatcher(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventsV3FilterMatcher: valid values are %v", v, AllowedEventsV3FilterMatcherEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventsV3FilterMatcher) IsValid() bool {
	for _, existing := range AllowedEventsV3FilterMatcherEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to events.v3.FilterMatcher value
func (v EventsV3FilterMatcher) Ptr() *EventsV3FilterMatcher {
	return &v
}

type NullableEventsV3FilterMatcher struct {
	value *EventsV3FilterMatcher
	isSet bool
}

func (v NullableEventsV3FilterMatcher) Get() *EventsV3FilterMatcher {
	return v.value
}

func (v *NullableEventsV3FilterMatcher) Set(val *EventsV3FilterMatcher) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsV3FilterMatcher) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsV3FilterMatcher) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsV3FilterMatcher(val *EventsV3FilterMatcher) *NullableEventsV3FilterMatcher {
	return &NullableEventsV3FilterMatcher{value: val, isSet: true}
}

func (v NullableEventsV3FilterMatcher) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsV3FilterMatcher) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

