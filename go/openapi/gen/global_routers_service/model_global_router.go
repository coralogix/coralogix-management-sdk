/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package global_routers_service

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the GlobalRouter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalRouter{}

// GlobalRouter Defines a set of pre-configured routing rules for directing notifications
type GlobalRouter struct {
	CreateTime *time.Time `json:"createTime,omitempty"`
	Description *string `json:"description,omitempty"`
	EntityLabelMatcher *map[string]string `json:"entityLabelMatcher,omitempty"`
	EntityLabels *map[string]string `json:"entityLabels,omitempty"`
	EntityType NotificationCenterEntityType `json:"entityType"`
	Fallback []RoutingTarget `json:"fallback,omitempty"`
	Id *string `json:"id,omitempty"`
	Name string `json:"name"`
	Rules []RoutingRule `json:"rules,omitempty"`
	UpdateTime *time.Time `json:"updateTime,omitempty"`
}

type _GlobalRouter GlobalRouter

// NewGlobalRouter instantiates a new GlobalRouter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalRouter(entityType NotificationCenterEntityType, name string) *GlobalRouter {
	this := GlobalRouter{}
	this.EntityType = entityType
	this.Name = name
	return &this
}

// NewGlobalRouterWithDefaults instantiates a new GlobalRouter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalRouterWithDefaults() *GlobalRouter {
	this := GlobalRouter{}
	return &this
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *GlobalRouter) GetCreateTime() time.Time {
	if o == nil || IsNil(o.CreateTime) {
		var ret time.Time
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalRouter) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateTime) {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *GlobalRouter) HasCreateTime() bool {
	if o != nil && !IsNil(o.CreateTime) {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given time.Time and assigns it to the CreateTime field.
func (o *GlobalRouter) SetCreateTime(v time.Time) {
	o.CreateTime = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GlobalRouter) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalRouter) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GlobalRouter) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GlobalRouter) SetDescription(v string) {
	o.Description = &v
}

// GetEntityLabelMatcher returns the EntityLabelMatcher field value if set, zero value otherwise.
func (o *GlobalRouter) GetEntityLabelMatcher() map[string]string {
	if o == nil || IsNil(o.EntityLabelMatcher) {
		var ret map[string]string
		return ret
	}
	return *o.EntityLabelMatcher
}

// GetEntityLabelMatcherOk returns a tuple with the EntityLabelMatcher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalRouter) GetEntityLabelMatcherOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.EntityLabelMatcher) {
		return nil, false
	}
	return o.EntityLabelMatcher, true
}

// HasEntityLabelMatcher returns a boolean if a field has been set.
func (o *GlobalRouter) HasEntityLabelMatcher() bool {
	if o != nil && !IsNil(o.EntityLabelMatcher) {
		return true
	}

	return false
}

// SetEntityLabelMatcher gets a reference to the given map[string]string and assigns it to the EntityLabelMatcher field.
func (o *GlobalRouter) SetEntityLabelMatcher(v map[string]string) {
	o.EntityLabelMatcher = &v
}

// GetEntityLabels returns the EntityLabels field value if set, zero value otherwise.
func (o *GlobalRouter) GetEntityLabels() map[string]string {
	if o == nil || IsNil(o.EntityLabels) {
		var ret map[string]string
		return ret
	}
	return *o.EntityLabels
}

// GetEntityLabelsOk returns a tuple with the EntityLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalRouter) GetEntityLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.EntityLabels) {
		return nil, false
	}
	return o.EntityLabels, true
}

// HasEntityLabels returns a boolean if a field has been set.
func (o *GlobalRouter) HasEntityLabels() bool {
	if o != nil && !IsNil(o.EntityLabels) {
		return true
	}

	return false
}

// SetEntityLabels gets a reference to the given map[string]string and assigns it to the EntityLabels field.
func (o *GlobalRouter) SetEntityLabels(v map[string]string) {
	o.EntityLabels = &v
}

// GetEntityType returns the EntityType field value
func (o *GlobalRouter) GetEntityType() NotificationCenterEntityType {
	if o == nil {
		var ret NotificationCenterEntityType
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *GlobalRouter) GetEntityTypeOk() (*NotificationCenterEntityType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *GlobalRouter) SetEntityType(v NotificationCenterEntityType) {
	o.EntityType = v
}

// GetFallback returns the Fallback field value if set, zero value otherwise.
func (o *GlobalRouter) GetFallback() []RoutingTarget {
	if o == nil || IsNil(o.Fallback) {
		var ret []RoutingTarget
		return ret
	}
	return o.Fallback
}

// GetFallbackOk returns a tuple with the Fallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalRouter) GetFallbackOk() ([]RoutingTarget, bool) {
	if o == nil || IsNil(o.Fallback) {
		return nil, false
	}
	return o.Fallback, true
}

// HasFallback returns a boolean if a field has been set.
func (o *GlobalRouter) HasFallback() bool {
	if o != nil && !IsNil(o.Fallback) {
		return true
	}

	return false
}

// SetFallback gets a reference to the given []RoutingTarget and assigns it to the Fallback field.
func (o *GlobalRouter) SetFallback(v []RoutingTarget) {
	o.Fallback = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GlobalRouter) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalRouter) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GlobalRouter) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GlobalRouter) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *GlobalRouter) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GlobalRouter) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GlobalRouter) SetName(v string) {
	o.Name = v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *GlobalRouter) GetRules() []RoutingRule {
	if o == nil || IsNil(o.Rules) {
		var ret []RoutingRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalRouter) GetRulesOk() ([]RoutingRule, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *GlobalRouter) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []RoutingRule and assigns it to the Rules field.
func (o *GlobalRouter) SetRules(v []RoutingRule) {
	o.Rules = v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *GlobalRouter) GetUpdateTime() time.Time {
	if o == nil || IsNil(o.UpdateTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalRouter) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *GlobalRouter) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given time.Time and assigns it to the UpdateTime field.
func (o *GlobalRouter) SetUpdateTime(v time.Time) {
	o.UpdateTime = &v
}

func (o GlobalRouter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalRouter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreateTime) {
		toSerialize["createTime"] = o.CreateTime
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EntityLabelMatcher) {
		toSerialize["entityLabelMatcher"] = o.EntityLabelMatcher
	}
	if !IsNil(o.EntityLabels) {
		toSerialize["entityLabels"] = o.EntityLabels
	}
	toSerialize["entityType"] = o.EntityType
	if !IsNil(o.Fallback) {
		toSerialize["fallback"] = o.Fallback
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["updateTime"] = o.UpdateTime
	}
	return toSerialize, nil
}

func (o *GlobalRouter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entityType",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGlobalRouter := _GlobalRouter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGlobalRouter)

	if err != nil {
		return err
	}

	*o = GlobalRouter(varGlobalRouter)

	return err
}

type NullableGlobalRouter struct {
	value *GlobalRouter
	isSet bool
}

func (v NullableGlobalRouter) Get() *GlobalRouter {
	return v.value
}

func (v *NullableGlobalRouter) Set(val *GlobalRouter) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalRouter) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalRouter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalRouter(val *GlobalRouter) *NullableGlobalRouter {
	return &NullableGlobalRouter{value: val, isSet: true}
}

func (v NullableGlobalRouter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalRouter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


