/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_testing_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChangelogEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangelogEntry{}

// ChangelogEntry struct for ChangelogEntry
type ChangelogEntry struct {
	DescriptionMd string `json:"descriptionMd"`
	Version string `json:"version"`
}

type _ChangelogEntry ChangelogEntry

// NewChangelogEntry instantiates a new ChangelogEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangelogEntry(descriptionMd string, version string) *ChangelogEntry {
	this := ChangelogEntry{}
	this.DescriptionMd = descriptionMd
	this.Version = version
	return &this
}

// NewChangelogEntryWithDefaults instantiates a new ChangelogEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangelogEntryWithDefaults() *ChangelogEntry {
	this := ChangelogEntry{}
	return &this
}

// GetDescriptionMd returns the DescriptionMd field value
func (o *ChangelogEntry) GetDescriptionMd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DescriptionMd
}

// GetDescriptionMdOk returns a tuple with the DescriptionMd field value
// and a boolean to check if the value has been set.
func (o *ChangelogEntry) GetDescriptionMdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DescriptionMd, true
}

// SetDescriptionMd sets field value
func (o *ChangelogEntry) SetDescriptionMd(v string) {
	o.DescriptionMd = v
}

// GetVersion returns the Version field value
func (o *ChangelogEntry) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ChangelogEntry) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ChangelogEntry) SetVersion(v string) {
	o.Version = v
}

func (o ChangelogEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangelogEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["descriptionMd"] = o.DescriptionMd
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *ChangelogEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"descriptionMd",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangelogEntry := _ChangelogEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChangelogEntry)

	if err != nil {
		return err
	}

	*o = ChangelogEntry(varChangelogEntry)

	return err
}

type NullableChangelogEntry struct {
	value *ChangelogEntry
	isSet bool
}

func (v NullableChangelogEntry) Get() *ChangelogEntry {
	return v.value
}

func (v *NullableChangelogEntry) Set(val *ChangelogEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableChangelogEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableChangelogEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangelogEntry(val *ChangelogEntry) *NullableChangelogEntry {
	return &NullableChangelogEntry{value: val, isSet: true}
}

func (v NullableChangelogEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangelogEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


