openapi: 3.0.0
info:
  title: ""
  version: 1.0.0
servers:
- url: /
paths:
  /integrations/extensions/v1/testing:
    delete:
      description: No description available
      externalDocs:
        url: ""
      operationId: ExtensionTestingService_CleanupTestingRevision
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cleanup_testing_revision_request"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CleanupTestingRevisionResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Cleanup testing extension
      tags:
      - Extension testing service
      x-coralogixPermissions:
      - extensions:UpdateConfig
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/testing';

          let options = {
            method: 'DELETE',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"id":"string"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/testing"

          payload = {"id": "string"}
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("DELETE", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/testing \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"id":"string"}'
    post:
      description: No description available
      externalDocs:
        url: ""
      operationId: ExtensionTestingService_TestExtensionRevision
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Test_extension_revision_request"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestExtensionRevisionResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Test extension revision
      tags:
      - Extension testing service
      x-coralogixPermissions:
      - extensions:UpdateConfig
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/testing';

          let options = {
            method: 'POST',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"cleanupAfterTest":true,"extensionData":{"binaries":[{"data":"string","type":"KIBANA_INDEX_PATTERN"}],"changelog":[{"descriptionMd":"string","version":"string"}],"darkModeImage":"string","deprecation":{"reason":"string","replacementExtensions":["string"]},"description":"Integration with AWS CloudWatch for monitoring and logging","excerpt":"Monitor AWS resources and analyze logs with CloudWatch integration","id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","image":"string","integrationDetails":[{"link":"string","name":"string"}],"integrations":["string"],"isHidden":true,"items":[{"binaries":[{"data":"string","fileName":"string","type":"PREVIEW_IMAGE"}],"data":{},"description":"Less than 60% cocoa","internalId":0,"isMandatory":true,"name":"Low cocoa content","permissionResource":"UNKNOWN","stableId":"string","targetDomain":"ACTION","uniqueId":"string"}],"keywords":["string"],"labels":["string"],"name":"AWS CloudWatch Extension","version":"v1.0.13"}}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/testing"

          payload = {
              "cleanupAfterTest": True,
              "extensionData": {
                  "binaries": [
                      {
                          "data": "string",
                          "type": "KIBANA_INDEX_PATTERN"
                      }
                  ],
                  "changelog": [
                      {
                          "descriptionMd": "string",
                          "version": "string"
                      }
                  ],
                  "darkModeImage": "string",
                  "deprecation": {
                      "reason": "string",
                      "replacementExtensions": ["string"]
                  },
                  "description": "Integration with AWS CloudWatch for monitoring and logging",
                  "excerpt": "Monitor AWS resources and analyze logs with CloudWatch integration",
                  "id": "076f4188-05e0-4ed3-afeb-653ad182ccb7",
                  "image": "string",
                  "integrationDetails": [
                      {
                          "link": "string",
                          "name": "string"
                      }
                  ],
                  "integrations": ["string"],
                  "isHidden": True,
                  "items": [
                      {
                          "binaries": [
                              {
                                  "data": "string",
                                  "fileName": "string",
                                  "type": "PREVIEW_IMAGE"
                              }
                          ],
                          "data": {},
                          "description": "Less than 60% cocoa",
                          "internalId": 0,
                          "isMandatory": True,
                          "name": "Low cocoa content",
                          "permissionResource": "UNKNOWN",
                          "stableId": "string",
                          "targetDomain": "ACTION",
                          "uniqueId": "string"
                      }
                  ],
                  "keywords": ["string"],
                  "labels": ["string"],
                  "name": "AWS CloudWatch Extension",
                  "version": "v1.0.13"
              }
          }
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/testing \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"cleanupAfterTest":true,"extensionData":{"binaries":[{"data":"string","type":"KIBANA_INDEX_PATTERN"}],"changelog":[{"descriptionMd":"string","version":"string"}],"darkModeImage":"string","deprecation":{"reason":"string","replacementExtensions":["string"]},"description":"Integration with AWS CloudWatch for monitoring and logging","excerpt":"Monitor AWS resources and analyze logs with CloudWatch integration","id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","image":"string","integrationDetails":[{"link":"string","name":"string"}],"integrations":["string"],"isHidden":true,"items":[{"binaries":[{"data":"string","fileName":"string","type":"PREVIEW_IMAGE"}],"data":{},"description":"Less than 60% cocoa","internalId":0,"isMandatory":true,"name":"Low cocoa content","permissionResource":"UNKNOWN","stableId":"string","targetDomain":"ACTION","uniqueId":"string"}],"keywords":["string"],"labels":["string"],"name":"AWS CloudWatch Extension","version":"v1.0.13"}}'
  /integrations/extensions/v1/testing/initialize:
    post:
      description: No description available
      externalDocs:
        url: ""
      operationId: ExtensionTestingService_InitializeTestingRevision
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Initialize_testing_revision_request"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitializeTestingRevisionResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Initialize testing revision
      tags:
      - Extension testing service
      x-coralogixPermissions:
      - extensions:UpdateConfig
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/testing/initialize';

          let options = {
            method: 'POST',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"extensionData":{"binaries":[{"data":"string","type":"KIBANA_INDEX_PATTERN"}],"changelog":[{"descriptionMd":"string","version":"string"}],"darkModeImage":"string","deprecation":{"reason":"string","replacementExtensions":["string"]},"description":"Integration with AWS CloudWatch for monitoring and logging","excerpt":"Monitor AWS resources and analyze logs with CloudWatch integration","id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","image":"string","integrationDetails":[{"link":"string","name":"string"}],"integrations":["string"],"isHidden":true,"items":[{"binaries":[{"data":"string","fileName":"string","type":"PREVIEW_IMAGE"}],"data":{},"description":"Less than 60% cocoa","internalId":0,"isMandatory":true,"name":"Low cocoa content","permissionResource":"UNKNOWN","stableId":"string","targetDomain":"ACTION","uniqueId":"string"}],"keywords":["string"],"labels":["string"],"name":"AWS CloudWatch Extension","version":"v1.0.13"}}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/testing/initialize"

          payload = {"extensionData": {
                  "binaries": [
                      {
                          "data": "string",
                          "type": "KIBANA_INDEX_PATTERN"
                      }
                  ],
                  "changelog": [
                      {
                          "descriptionMd": "string",
                          "version": "string"
                      }
                  ],
                  "darkModeImage": "string",
                  "deprecation": {
                      "reason": "string",
                      "replacementExtensions": ["string"]
                  },
                  "description": "Integration with AWS CloudWatch for monitoring and logging",
                  "excerpt": "Monitor AWS resources and analyze logs with CloudWatch integration",
                  "id": "076f4188-05e0-4ed3-afeb-653ad182ccb7",
                  "image": "string",
                  "integrationDetails": [
                      {
                          "link": "string",
                          "name": "string"
                      }
                  ],
                  "integrations": ["string"],
                  "isHidden": True,
                  "items": [
                      {
                          "binaries": [
                              {
                                  "data": "string",
                                  "fileName": "string",
                                  "type": "PREVIEW_IMAGE"
                              }
                          ],
                          "data": {},
                          "description": "Less than 60% cocoa",
                          "internalId": 0,
                          "isMandatory": True,
                          "name": "Low cocoa content",
                          "permissionResource": "UNKNOWN",
                          "stableId": "string",
                          "targetDomain": "ACTION",
                          "uniqueId": "string"
                      }
                  ],
                  "keywords": ["string"],
                  "labels": ["string"],
                  "name": "AWS CloudWatch Extension",
                  "version": "v1.0.13"
              }}
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/testing/initialize \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"extensionData":{"binaries":[{"data":"string","type":"KIBANA_INDEX_PATTERN"}],"changelog":[{"descriptionMd":"string","version":"string"}],"darkModeImage":"string","deprecation":{"reason":"string","replacementExtensions":["string"]},"description":"Integration with AWS CloudWatch for monitoring and logging","excerpt":"Monitor AWS resources and analyze logs with CloudWatch integration","id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","image":"string","integrationDetails":[{"link":"string","name":"string"}],"integrations":["string"],"isHidden":true,"items":[{"binaries":[{"data":"string","fileName":"string","type":"PREVIEW_IMAGE"}],"data":{},"description":"Less than 60% cocoa","internalId":0,"isMandatory":true,"name":"Low cocoa content","permissionResource":"UNKNOWN","stableId":"string","targetDomain":"ACTION","uniqueId":"string"}],"keywords":["string"],"labels":["string"],"name":"AWS CloudWatch Extension","version":"v1.0.13"}}'
components:
  schemas:
    ChangelogEntry:
      externalDocs:
        url: ""
      properties:
        descriptionMd:
          type: string
        version:
          type: string
      required:
      - descriptionMd
      - version
      title: Changelog entry
      type: object
    CleanupTestingRevisionResponse:
      externalDocs:
        url: ""
      title: Cleanup testing revision response
      type: object
    ColorsByAggregation:
      additionalProperties: false
      properties:
        aggregation:
          $ref: "#/components/schemas/ColorsByAggregation"
      type: object
    ColorsByGroupBy:
      additionalProperties: false
      properties:
        groupBy:
          $ref: "#/components/schemas/ColorsByGroupBy"
      type: object
    ColorsByStack:
      additionalProperties: false
      properties:
        stack:
          $ref: "#/components/schemas/ColorsByStack"
      type: object
    Deprecation:
      externalDocs:
        url: ""
      properties:
        reason:
          type: string
        replacementExtensions:
          items:
            type: string
          type: array
      required:
      - reason
      title: Deprecation
      type: object
    ExtensionBinary:
      externalDocs:
        url: ""
      properties:
        data:
          type: string
        type:
          $ref: "#/components/schemas/ExtensionBinary.BinaryType"
      required:
      - data
      - type
      title: Extension binary
      type: object
    ExtensionBinary.BinaryType:
      enum:
      - KIBANA_INDEX_PATTERN
      type: string
    ExtensionData:
      description: Extension details for ingestion
      externalDocs:
        url: ""
      properties:
        binaries:
          items:
            $ref: "#/components/schemas/ExtensionBinary"
          type: array
        changelog:
          items:
            $ref: "#/components/schemas/ChangelogEntry"
          type: array
        darkModeImage:
          type: string
        deprecation:
          $ref: "#/components/schemas/Deprecation"
        description:
          example: Integration with AWS CloudWatch for monitoring and logging
          type: string
        excerpt:
          example: Monitor AWS resources and analyze logs with CloudWatch integration
          type: string
        id:
          example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
          type: string
        image:
          type: string
        integrationDetails:
          items:
            $ref: "#/components/schemas/IntegrationDetail"
          type: array
        integrations:
          items:
            type: string
          type: array
        isHidden:
          type: boolean
        items:
          items:
            $ref: "#/components/schemas/ExtensionItemData"
          type: array
        keywords:
          items:
            type: string
          type: array
        labels:
          items:
            type: string
          type: array
        name:
          example: AWS CloudWatch Extension
          type: string
        version:
          example: v1.0.13
          type: string
      required:
      - id
      - image
      - name
      - version
      title: Extension data
      type: object
    ExtensionItemBinary:
      externalDocs:
        url: ""
      properties:
        data:
          type: string
        fileName:
          type: string
        type:
          $ref: "#/components/schemas/ExtensionItemBinary.BinaryType"
      required:
      - data
      - fileName
      - type
      title: Extension item binary
      type: object
    ExtensionItemBinary.BinaryType:
      enum:
      - PREVIEW_IMAGE
      - KIBANA_DASHBOARD_DEFINITION
      - GRAFANA_DASHBOARD_DEFINITION
      - ENRICHMENT_CSV
      - CX_CUSTOM_DASHBOARD_DEFINITION
      type: string
    ExtensionItemData:
      externalDocs:
        url: ""
      properties:
        binaries:
          items:
            $ref: "#/components/schemas/ExtensionItemBinary"
          type: array
        data:
          type: object
        description:
          example: Less than 60% cocoa
          type: string
        internalId:
          format: int32
          type: integer
        isMandatory:
          type: boolean
        name:
          example: Low cocoa content
          type: string
        permissionResource:
          $ref: "#/components/schemas/PermissionResource"
        stableId:
          type: string
        targetDomain:
          $ref: "#/components/schemas/TargetDomain"
        uniqueId:
          type: string
      required:
      - data
      - name
      - targetDomain
      title: Extension item data
      type: object
    FieldGroup:
      properties:
        name:
          type: string
        value:
          type: string
      type: object
    FilterPathAndValues:
      oneOf:
      - $ref: "#/components/schemas/FilterPathAndValuesMultipleValues"
      - $ref: "#/components/schemas/FilterPathAndValuesFilters"
    FilterPathAndValuesFilters:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        filters:
          $ref: "#/components/schemas/Filters"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
    FilterPathAndValuesMultipleValues:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        multipleValues:
          $ref: "#/components/schemas/MultipleValues"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
    Filters:
      description: This data structure represents a filter
      externalDocs:
        url: ""
      properties:
        operator:
          $ref: "#/components/schemas/v3.FilterOperator"
        pathAndValues:
          items:
            $ref: "#/components/schemas/FilterPathAndValues"
          type: array
      required:
      - pathAndValues
      title: Filters
      type: object
    InitializeTestingRevisionResponse:
      externalDocs:
        url: ""
      title: Initialize testing revision response
      type: object
    IntegrationDetail:
      externalDocs:
        url: ""
      properties:
        link:
          type: string
        name:
          type: string
      required:
      - link
      - name
      title: Integration detail
      type: object
    MultipleValues:
      properties:
        matcher:
          $ref: "#/components/schemas/events.v3.FilterMatcher"
        values:
          items:
            type: string
          type: array
      type: object
    PermissionResource:
      enum:
      - UNKNOWN
      - ACTION
      - ALERT
      - CUSTOM_ENRICHMENT
      - GEO_ENRICHMENT
      - SECURITY_ENRICHMENT
      - RESOURCE_CLOUD_METADATA_ENRICHMENT
      - GRAFANA_DASHBOARD
      - KIBANA_DASHBOARD
      - PARSING_RULE
      - SAVED_VIEW
      - CX_CUSTOM_DASHBOARD
      - METRICS_RULE_GROUP
      - SPAN_EVENTS_TO_METRICS
      - LOGS_EVENTS_TO_METRICS
      type: string
    TargetDomain:
      enum:
      - ACTION
      - ALERT
      - ENRICHMENT
      - GRAFANA_DASHBOARD
      - KIBANA_DASHBOARD
      - PARSING_RULE
      - SAVED_VIEW
      - CX_CUSTOM_DASHBOARD
      - METRICS_RULE_GROUP
      - EVENTS_TO_METRICS
      - ALERT_V3
      type: string
    TestExtensionRevisionResponse:
      externalDocs:
        url: ""
      title: Test extension revision response
      type: object
    YAxisViewByCategory:
      additionalProperties: false
      properties:
        category:
          $ref: "#/components/schemas/YAxisViewByCategory"
      type: object
    YAxisViewByValue:
      additionalProperties: false
      properties:
        value:
          $ref: "#/components/schemas/YAxisViewByValue"
      type: object
    common.Group:
      properties:
        field:
          $ref: "#/components/schemas/FieldGroup"
        groups:
          items:
            $ref: "#/components/schemas/common.Group"
          type: array
        value:
          format: double
          type: number
      type: object
    events.v3.FilterMatcher:
      enum:
      - FILTER_MATCHER_TEXT_OR_UNSPECIFIED
      - FILTER_MATCHER_REGEXP
      type: string
    v3.FilterOperator:
      enum:
      - FILTER_OPERATOR_AND_OR_UNSPECIFIED
      - FILTER_OPERATOR_OR
      type: string
    Test_extension_revision_request:
      additionalProperties: false
      properties:
        cleanupAfterTest:
          type: boolean
        extensionData:
          $ref: "#/components/schemas/ExtensionData"
      required:
      - extensionData
      title: Test extension revision request
      type: object
    Cleanup_testing_revision_request:
      additionalProperties: false
      properties:
        id:
          type: string
      required:
      - id
      title: Cleanup testing revision request
      type: object
    Initialize_testing_revision_request:
      additionalProperties: false
      properties:
        extensionData:
          $ref: "#/components/schemas/ExtensionData"
      required:
      - extensionData
      title: Initialize testing revision request
      type: object
  securitySchemes:
    apiKeyAuth:
      description: API key authentication
      in: header
      name: Authorization
      type: apiKey
