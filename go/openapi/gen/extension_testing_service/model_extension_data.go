/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_testing_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExtensionData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionData{}

// ExtensionData Extension details for ingestion
type ExtensionData struct {
	Binaries []ExtensionBinary `json:"binaries,omitempty"`
	Changelog []ChangelogEntry `json:"changelog,omitempty"`
	DarkModeImage *string `json:"darkModeImage,omitempty"`
	Deprecation *Deprecation `json:"deprecation,omitempty"`
	Description *string `json:"description,omitempty"`
	Excerpt *string `json:"excerpt,omitempty"`
	Id string `json:"id"`
	Image string `json:"image"`
	IntegrationDetails []IntegrationDetail `json:"integrationDetails,omitempty"`
	Integrations []string `json:"integrations,omitempty"`
	IsHidden *bool `json:"isHidden,omitempty"`
	Items []ExtensionItemData `json:"items,omitempty"`
	Keywords []string `json:"keywords,omitempty"`
	Labels []string `json:"labels,omitempty"`
	Name string `json:"name"`
	Version string `json:"version"`
}

type _ExtensionData ExtensionData

// NewExtensionData instantiates a new ExtensionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionData(id string, image string, name string, version string) *ExtensionData {
	this := ExtensionData{}
	this.Id = id
	this.Image = image
	this.Name = name
	this.Version = version
	return &this
}

// NewExtensionDataWithDefaults instantiates a new ExtensionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionDataWithDefaults() *ExtensionData {
	this := ExtensionData{}
	return &this
}

// GetBinaries returns the Binaries field value if set, zero value otherwise.
func (o *ExtensionData) GetBinaries() []ExtensionBinary {
	if o == nil || IsNil(o.Binaries) {
		var ret []ExtensionBinary
		return ret
	}
	return o.Binaries
}

// GetBinariesOk returns a tuple with the Binaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionData) GetBinariesOk() ([]ExtensionBinary, bool) {
	if o == nil || IsNil(o.Binaries) {
		return nil, false
	}
	return o.Binaries, true
}

// HasBinaries returns a boolean if a field has been set.
func (o *ExtensionData) HasBinaries() bool {
	if o != nil && !IsNil(o.Binaries) {
		return true
	}

	return false
}

// SetBinaries gets a reference to the given []ExtensionBinary and assigns it to the Binaries field.
func (o *ExtensionData) SetBinaries(v []ExtensionBinary) {
	o.Binaries = v
}

// GetChangelog returns the Changelog field value if set, zero value otherwise.
func (o *ExtensionData) GetChangelog() []ChangelogEntry {
	if o == nil || IsNil(o.Changelog) {
		var ret []ChangelogEntry
		return ret
	}
	return o.Changelog
}

// GetChangelogOk returns a tuple with the Changelog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionData) GetChangelogOk() ([]ChangelogEntry, bool) {
	if o == nil || IsNil(o.Changelog) {
		return nil, false
	}
	return o.Changelog, true
}

// HasChangelog returns a boolean if a field has been set.
func (o *ExtensionData) HasChangelog() bool {
	if o != nil && !IsNil(o.Changelog) {
		return true
	}

	return false
}

// SetChangelog gets a reference to the given []ChangelogEntry and assigns it to the Changelog field.
func (o *ExtensionData) SetChangelog(v []ChangelogEntry) {
	o.Changelog = v
}

// GetDarkModeImage returns the DarkModeImage field value if set, zero value otherwise.
func (o *ExtensionData) GetDarkModeImage() string {
	if o == nil || IsNil(o.DarkModeImage) {
		var ret string
		return ret
	}
	return *o.DarkModeImage
}

// GetDarkModeImageOk returns a tuple with the DarkModeImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionData) GetDarkModeImageOk() (*string, bool) {
	if o == nil || IsNil(o.DarkModeImage) {
		return nil, false
	}
	return o.DarkModeImage, true
}

// HasDarkModeImage returns a boolean if a field has been set.
func (o *ExtensionData) HasDarkModeImage() bool {
	if o != nil && !IsNil(o.DarkModeImage) {
		return true
	}

	return false
}

// SetDarkModeImage gets a reference to the given string and assigns it to the DarkModeImage field.
func (o *ExtensionData) SetDarkModeImage(v string) {
	o.DarkModeImage = &v
}

// GetDeprecation returns the Deprecation field value if set, zero value otherwise.
func (o *ExtensionData) GetDeprecation() Deprecation {
	if o == nil || IsNil(o.Deprecation) {
		var ret Deprecation
		return ret
	}
	return *o.Deprecation
}

// GetDeprecationOk returns a tuple with the Deprecation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionData) GetDeprecationOk() (*Deprecation, bool) {
	if o == nil || IsNil(o.Deprecation) {
		return nil, false
	}
	return o.Deprecation, true
}

// HasDeprecation returns a boolean if a field has been set.
func (o *ExtensionData) HasDeprecation() bool {
	if o != nil && !IsNil(o.Deprecation) {
		return true
	}

	return false
}

// SetDeprecation gets a reference to the given Deprecation and assigns it to the Deprecation field.
func (o *ExtensionData) SetDeprecation(v Deprecation) {
	o.Deprecation = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ExtensionData) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionData) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ExtensionData) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ExtensionData) SetDescription(v string) {
	o.Description = &v
}

// GetExcerpt returns the Excerpt field value if set, zero value otherwise.
func (o *ExtensionData) GetExcerpt() string {
	if o == nil || IsNil(o.Excerpt) {
		var ret string
		return ret
	}
	return *o.Excerpt
}

// GetExcerptOk returns a tuple with the Excerpt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionData) GetExcerptOk() (*string, bool) {
	if o == nil || IsNil(o.Excerpt) {
		return nil, false
	}
	return o.Excerpt, true
}

// HasExcerpt returns a boolean if a field has been set.
func (o *ExtensionData) HasExcerpt() bool {
	if o != nil && !IsNil(o.Excerpt) {
		return true
	}

	return false
}

// SetExcerpt gets a reference to the given string and assigns it to the Excerpt field.
func (o *ExtensionData) SetExcerpt(v string) {
	o.Excerpt = &v
}

// GetId returns the Id field value
func (o *ExtensionData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ExtensionData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ExtensionData) SetId(v string) {
	o.Id = v
}

// GetImage returns the Image field value
func (o *ExtensionData) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *ExtensionData) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *ExtensionData) SetImage(v string) {
	o.Image = v
}

// GetIntegrationDetails returns the IntegrationDetails field value if set, zero value otherwise.
func (o *ExtensionData) GetIntegrationDetails() []IntegrationDetail {
	if o == nil || IsNil(o.IntegrationDetails) {
		var ret []IntegrationDetail
		return ret
	}
	return o.IntegrationDetails
}

// GetIntegrationDetailsOk returns a tuple with the IntegrationDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionData) GetIntegrationDetailsOk() ([]IntegrationDetail, bool) {
	if o == nil || IsNil(o.IntegrationDetails) {
		return nil, false
	}
	return o.IntegrationDetails, true
}

// HasIntegrationDetails returns a boolean if a field has been set.
func (o *ExtensionData) HasIntegrationDetails() bool {
	if o != nil && !IsNil(o.IntegrationDetails) {
		return true
	}

	return false
}

// SetIntegrationDetails gets a reference to the given []IntegrationDetail and assigns it to the IntegrationDetails field.
func (o *ExtensionData) SetIntegrationDetails(v []IntegrationDetail) {
	o.IntegrationDetails = v
}

// GetIntegrations returns the Integrations field value if set, zero value otherwise.
func (o *ExtensionData) GetIntegrations() []string {
	if o == nil || IsNil(o.Integrations) {
		var ret []string
		return ret
	}
	return o.Integrations
}

// GetIntegrationsOk returns a tuple with the Integrations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionData) GetIntegrationsOk() ([]string, bool) {
	if o == nil || IsNil(o.Integrations) {
		return nil, false
	}
	return o.Integrations, true
}

// HasIntegrations returns a boolean if a field has been set.
func (o *ExtensionData) HasIntegrations() bool {
	if o != nil && !IsNil(o.Integrations) {
		return true
	}

	return false
}

// SetIntegrations gets a reference to the given []string and assigns it to the Integrations field.
func (o *ExtensionData) SetIntegrations(v []string) {
	o.Integrations = v
}

// GetIsHidden returns the IsHidden field value if set, zero value otherwise.
func (o *ExtensionData) GetIsHidden() bool {
	if o == nil || IsNil(o.IsHidden) {
		var ret bool
		return ret
	}
	return *o.IsHidden
}

// GetIsHiddenOk returns a tuple with the IsHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionData) GetIsHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHidden) {
		return nil, false
	}
	return o.IsHidden, true
}

// HasIsHidden returns a boolean if a field has been set.
func (o *ExtensionData) HasIsHidden() bool {
	if o != nil && !IsNil(o.IsHidden) {
		return true
	}

	return false
}

// SetIsHidden gets a reference to the given bool and assigns it to the IsHidden field.
func (o *ExtensionData) SetIsHidden(v bool) {
	o.IsHidden = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *ExtensionData) GetItems() []ExtensionItemData {
	if o == nil || IsNil(o.Items) {
		var ret []ExtensionItemData
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionData) GetItemsOk() ([]ExtensionItemData, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ExtensionData) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []ExtensionItemData and assigns it to the Items field.
func (o *ExtensionData) SetItems(v []ExtensionItemData) {
	o.Items = v
}

// GetKeywords returns the Keywords field value if set, zero value otherwise.
func (o *ExtensionData) GetKeywords() []string {
	if o == nil || IsNil(o.Keywords) {
		var ret []string
		return ret
	}
	return o.Keywords
}

// GetKeywordsOk returns a tuple with the Keywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionData) GetKeywordsOk() ([]string, bool) {
	if o == nil || IsNil(o.Keywords) {
		return nil, false
	}
	return o.Keywords, true
}

// HasKeywords returns a boolean if a field has been set.
func (o *ExtensionData) HasKeywords() bool {
	if o != nil && !IsNil(o.Keywords) {
		return true
	}

	return false
}

// SetKeywords gets a reference to the given []string and assigns it to the Keywords field.
func (o *ExtensionData) SetKeywords(v []string) {
	o.Keywords = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ExtensionData) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionData) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ExtensionData) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *ExtensionData) SetLabels(v []string) {
	o.Labels = v
}

// GetName returns the Name field value
func (o *ExtensionData) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ExtensionData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ExtensionData) SetName(v string) {
	o.Name = v
}

// GetVersion returns the Version field value
func (o *ExtensionData) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ExtensionData) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ExtensionData) SetVersion(v string) {
	o.Version = v
}

func (o ExtensionData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Binaries) {
		toSerialize["binaries"] = o.Binaries
	}
	if !IsNil(o.Changelog) {
		toSerialize["changelog"] = o.Changelog
	}
	if !IsNil(o.DarkModeImage) {
		toSerialize["darkModeImage"] = o.DarkModeImage
	}
	if !IsNil(o.Deprecation) {
		toSerialize["deprecation"] = o.Deprecation
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Excerpt) {
		toSerialize["excerpt"] = o.Excerpt
	}
	toSerialize["id"] = o.Id
	toSerialize["image"] = o.Image
	if !IsNil(o.IntegrationDetails) {
		toSerialize["integrationDetails"] = o.IntegrationDetails
	}
	if !IsNil(o.Integrations) {
		toSerialize["integrations"] = o.Integrations
	}
	if !IsNil(o.IsHidden) {
		toSerialize["isHidden"] = o.IsHidden
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.Keywords) {
		toSerialize["keywords"] = o.Keywords
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["name"] = o.Name
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *ExtensionData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"image",
		"name",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtensionData := _ExtensionData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExtensionData)

	if err != nil {
		return err
	}

	*o = ExtensionData(varExtensionData)

	return err
}

type NullableExtensionData struct {
	value *ExtensionData
	isSet bool
}

func (v NullableExtensionData) Get() *ExtensionData {
	return v.value
}

func (v *NullableExtensionData) Set(val *ExtensionData) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionData) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionData(val *ExtensionData) *NullableExtensionData {
	return &NullableExtensionData{value: val, isSet: true}
}

func (v NullableExtensionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


