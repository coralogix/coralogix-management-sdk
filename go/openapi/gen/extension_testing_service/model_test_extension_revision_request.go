/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_testing_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TestExtensionRevisionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestExtensionRevisionRequest{}

// TestExtensionRevisionRequest struct for TestExtensionRevisionRequest
type TestExtensionRevisionRequest struct {
	CleanupAfterTest *bool `json:"cleanupAfterTest,omitempty"`
	ExtensionData ExtensionData `json:"extensionData"`
}

type _TestExtensionRevisionRequest TestExtensionRevisionRequest

// NewTestExtensionRevisionRequest instantiates a new TestExtensionRevisionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestExtensionRevisionRequest(extensionData ExtensionData) *TestExtensionRevisionRequest {
	this := TestExtensionRevisionRequest{}
	this.ExtensionData = extensionData
	return &this
}

// NewTestExtensionRevisionRequestWithDefaults instantiates a new TestExtensionRevisionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestExtensionRevisionRequestWithDefaults() *TestExtensionRevisionRequest {
	this := TestExtensionRevisionRequest{}
	return &this
}

// GetCleanupAfterTest returns the CleanupAfterTest field value if set, zero value otherwise.
func (o *TestExtensionRevisionRequest) GetCleanupAfterTest() bool {
	if o == nil || IsNil(o.CleanupAfterTest) {
		var ret bool
		return ret
	}
	return *o.CleanupAfterTest
}

// GetCleanupAfterTestOk returns a tuple with the CleanupAfterTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestExtensionRevisionRequest) GetCleanupAfterTestOk() (*bool, bool) {
	if o == nil || IsNil(o.CleanupAfterTest) {
		return nil, false
	}
	return o.CleanupAfterTest, true
}

// HasCleanupAfterTest returns a boolean if a field has been set.
func (o *TestExtensionRevisionRequest) HasCleanupAfterTest() bool {
	if o != nil && !IsNil(o.CleanupAfterTest) {
		return true
	}

	return false
}

// SetCleanupAfterTest gets a reference to the given bool and assigns it to the CleanupAfterTest field.
func (o *TestExtensionRevisionRequest) SetCleanupAfterTest(v bool) {
	o.CleanupAfterTest = &v
}

// GetExtensionData returns the ExtensionData field value
func (o *TestExtensionRevisionRequest) GetExtensionData() ExtensionData {
	if o == nil {
		var ret ExtensionData
		return ret
	}

	return o.ExtensionData
}

// GetExtensionDataOk returns a tuple with the ExtensionData field value
// and a boolean to check if the value has been set.
func (o *TestExtensionRevisionRequest) GetExtensionDataOk() (*ExtensionData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExtensionData, true
}

// SetExtensionData sets field value
func (o *TestExtensionRevisionRequest) SetExtensionData(v ExtensionData) {
	o.ExtensionData = v
}

func (o TestExtensionRevisionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestExtensionRevisionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CleanupAfterTest) {
		toSerialize["cleanupAfterTest"] = o.CleanupAfterTest
	}
	toSerialize["extensionData"] = o.ExtensionData
	return toSerialize, nil
}

func (o *TestExtensionRevisionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"extensionData",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestExtensionRevisionRequest := _TestExtensionRevisionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestExtensionRevisionRequest)

	if err != nil {
		return err
	}

	*o = TestExtensionRevisionRequest(varTestExtensionRevisionRequest)

	return err
}

type NullableTestExtensionRevisionRequest struct {
	value *TestExtensionRevisionRequest
	isSet bool
}

func (v NullableTestExtensionRevisionRequest) Get() *TestExtensionRevisionRequest {
	return v.value
}

func (v *NullableTestExtensionRevisionRequest) Set(val *TestExtensionRevisionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTestExtensionRevisionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTestExtensionRevisionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestExtensionRevisionRequest(val *TestExtensionRevisionRequest) *NullableTestExtensionRevisionRequest {
	return &NullableTestExtensionRevisionRequest{value: val, isSet: true}
}

func (v NullableTestExtensionRevisionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestExtensionRevisionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


