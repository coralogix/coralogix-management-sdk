/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_testing_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// FilterPathAndValues - struct for FilterPathAndValues
type FilterPathAndValues struct {
	FilterPathAndValues1 *FilterPathAndValues1
	FilterPathAndValues2 *FilterPathAndValues2
}

// FilterPathAndValues1AsFilterPathAndValues is a convenience function that returns FilterPathAndValues1 wrapped in FilterPathAndValues
func FilterPathAndValues1AsFilterPathAndValues(v *FilterPathAndValues1) FilterPathAndValues {
	return FilterPathAndValues{
		FilterPathAndValues1: v,
	}
}

// FilterPathAndValues2AsFilterPathAndValues is a convenience function that returns FilterPathAndValues2 wrapped in FilterPathAndValues
func FilterPathAndValues2AsFilterPathAndValues(v *FilterPathAndValues2) FilterPathAndValues {
	return FilterPathAndValues{
		FilterPathAndValues2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FilterPathAndValues) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FilterPathAndValues1
	err = newStrictDecoder(data).Decode(&dst.FilterPathAndValues1)
	if err == nil {
		jsonFilterPathAndValues1, _ := json.Marshal(dst.FilterPathAndValues1)
		if string(jsonFilterPathAndValues1) == "{}" { // empty struct
			dst.FilterPathAndValues1 = nil
		} else {
			if err = validator.Validate(dst.FilterPathAndValues1); err != nil {
				dst.FilterPathAndValues1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.FilterPathAndValues1 = nil
	}

	// try to unmarshal data into FilterPathAndValues2
	err = newStrictDecoder(data).Decode(&dst.FilterPathAndValues2)
	if err == nil {
		jsonFilterPathAndValues2, _ := json.Marshal(dst.FilterPathAndValues2)
		if string(jsonFilterPathAndValues2) == "{}" { // empty struct
			dst.FilterPathAndValues2 = nil
		} else {
			if err = validator.Validate(dst.FilterPathAndValues2); err != nil {
				dst.FilterPathAndValues2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.FilterPathAndValues2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FilterPathAndValues1 = nil
		dst.FilterPathAndValues2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FilterPathAndValues)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FilterPathAndValues)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FilterPathAndValues) MarshalJSON() ([]byte, error) {
	if src.FilterPathAndValues1 != nil {
		return json.Marshal(&src.FilterPathAndValues1)
	}

	if src.FilterPathAndValues2 != nil {
		return json.Marshal(&src.FilterPathAndValues2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FilterPathAndValues) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FilterPathAndValues1 != nil {
		return obj.FilterPathAndValues1
	}

	if obj.FilterPathAndValues2 != nil {
		return obj.FilterPathAndValues2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj FilterPathAndValues) GetActualInstanceValue() (interface{}) {
	if obj.FilterPathAndValues1 != nil {
		return *obj.FilterPathAndValues1
	}

	if obj.FilterPathAndValues2 != nil {
		return *obj.FilterPathAndValues2
	}

	// all schemas are nil
	return nil
}

type NullableFilterPathAndValues struct {
	value *FilterPathAndValues
	isSet bool
}

func (v NullableFilterPathAndValues) Get() *FilterPathAndValues {
	return v.value
}

func (v *NullableFilterPathAndValues) Set(val *FilterPathAndValues) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterPathAndValues) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterPathAndValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterPathAndValues(val *FilterPathAndValues) *NullableFilterPathAndValues {
	return &NullableFilterPathAndValues{value: val, isSet: true}
}

func (v NullableFilterPathAndValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterPathAndValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


