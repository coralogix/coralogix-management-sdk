/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_testing_service

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// ExtensionTestingServiceAPIService ExtensionTestingServiceAPI service
type ExtensionTestingServiceAPIService service

type ApiExtensionTestingServiceCleanupTestingRevisionRequest struct {
	ctx context.Context
	ApiService *ExtensionTestingServiceAPIService
	cleanupTestingRevisionRequest *CleanupTestingRevisionRequest
}

func (r ApiExtensionTestingServiceCleanupTestingRevisionRequest) CleanupTestingRevisionRequest(cleanupTestingRevisionRequest CleanupTestingRevisionRequest) ApiExtensionTestingServiceCleanupTestingRevisionRequest {
	r.cleanupTestingRevisionRequest = &cleanupTestingRevisionRequest
	return r
}

func (r ApiExtensionTestingServiceCleanupTestingRevisionRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ExtensionTestingServiceCleanupTestingRevisionExecute(r)
}

/*
ExtensionTestingServiceCleanupTestingRevision Cleanup testing extension

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtensionTestingServiceCleanupTestingRevisionRequest
*/
func (a *ExtensionTestingServiceAPIService) ExtensionTestingServiceCleanupTestingRevision(ctx context.Context) ApiExtensionTestingServiceCleanupTestingRevisionRequest {
	return ApiExtensionTestingServiceCleanupTestingRevisionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ExtensionTestingServiceAPIService) ExtensionTestingServiceCleanupTestingRevisionExecute(r ApiExtensionTestingServiceCleanupTestingRevisionRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtensionTestingServiceAPIService.ExtensionTestingServiceCleanupTestingRevision")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/extensions/v1/testing"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cleanupTestingRevisionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtensionTestingServiceInitializeTestingRevisionRequest struct {
	ctx context.Context
	ApiService *ExtensionTestingServiceAPIService
	initializeTestingRevisionRequest *InitializeTestingRevisionRequest
}

func (r ApiExtensionTestingServiceInitializeTestingRevisionRequest) InitializeTestingRevisionRequest(initializeTestingRevisionRequest InitializeTestingRevisionRequest) ApiExtensionTestingServiceInitializeTestingRevisionRequest {
	r.initializeTestingRevisionRequest = &initializeTestingRevisionRequest
	return r
}

func (r ApiExtensionTestingServiceInitializeTestingRevisionRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ExtensionTestingServiceInitializeTestingRevisionExecute(r)
}

/*
ExtensionTestingServiceInitializeTestingRevision Initialize testing revision

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtensionTestingServiceInitializeTestingRevisionRequest
*/
func (a *ExtensionTestingServiceAPIService) ExtensionTestingServiceInitializeTestingRevision(ctx context.Context) ApiExtensionTestingServiceInitializeTestingRevisionRequest {
	return ApiExtensionTestingServiceInitializeTestingRevisionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ExtensionTestingServiceAPIService) ExtensionTestingServiceInitializeTestingRevisionExecute(r ApiExtensionTestingServiceInitializeTestingRevisionRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtensionTestingServiceAPIService.ExtensionTestingServiceInitializeTestingRevision")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/extensions/v1/testing/initialize"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.initializeTestingRevisionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtensionTestingServiceTestExtensionRevisionRequest struct {
	ctx context.Context
	ApiService *ExtensionTestingServiceAPIService
	testExtensionRevisionRequest *TestExtensionRevisionRequest
}

func (r ApiExtensionTestingServiceTestExtensionRevisionRequest) TestExtensionRevisionRequest(testExtensionRevisionRequest TestExtensionRevisionRequest) ApiExtensionTestingServiceTestExtensionRevisionRequest {
	r.testExtensionRevisionRequest = &testExtensionRevisionRequest
	return r
}

func (r ApiExtensionTestingServiceTestExtensionRevisionRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ExtensionTestingServiceTestExtensionRevisionExecute(r)
}

/*
ExtensionTestingServiceTestExtensionRevision Test extension revision

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtensionTestingServiceTestExtensionRevisionRequest
*/
func (a *ExtensionTestingServiceAPIService) ExtensionTestingServiceTestExtensionRevision(ctx context.Context) ApiExtensionTestingServiceTestExtensionRevisionRequest {
	return ApiExtensionTestingServiceTestExtensionRevisionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ExtensionTestingServiceAPIService) ExtensionTestingServiceTestExtensionRevisionExecute(r ApiExtensionTestingServiceTestExtensionRevisionRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtensionTestingServiceAPIService.ExtensionTestingServiceTestExtensionRevision")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/extensions/v1/testing"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.testExtensionRevisionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
