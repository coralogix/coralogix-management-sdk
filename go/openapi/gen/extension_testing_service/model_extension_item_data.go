/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_testing_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExtensionItemData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionItemData{}

// ExtensionItemData struct for ExtensionItemData
type ExtensionItemData struct {
	Binaries []ExtensionItemBinary `json:"binaries,omitempty"`
	Data map[string]interface{} `json:"data"`
	Description *string `json:"description,omitempty"`
	InternalId *int32 `json:"internalId,omitempty"`
	IsMandatory *bool `json:"isMandatory,omitempty"`
	Name string `json:"name"`
	PermissionResource *PermissionResource `json:"permissionResource,omitempty"`
	StableId *string `json:"stableId,omitempty"`
	TargetDomain TargetDomain `json:"targetDomain"`
	UniqueId *string `json:"uniqueId,omitempty"`
}

type _ExtensionItemData ExtensionItemData

// NewExtensionItemData instantiates a new ExtensionItemData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionItemData(data map[string]interface{}, name string, targetDomain TargetDomain) *ExtensionItemData {
	this := ExtensionItemData{}
	this.Data = data
	this.Name = name
	this.TargetDomain = targetDomain
	return &this
}

// NewExtensionItemDataWithDefaults instantiates a new ExtensionItemData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionItemDataWithDefaults() *ExtensionItemData {
	this := ExtensionItemData{}
	return &this
}

// GetBinaries returns the Binaries field value if set, zero value otherwise.
func (o *ExtensionItemData) GetBinaries() []ExtensionItemBinary {
	if o == nil || IsNil(o.Binaries) {
		var ret []ExtensionItemBinary
		return ret
	}
	return o.Binaries
}

// GetBinariesOk returns a tuple with the Binaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionItemData) GetBinariesOk() ([]ExtensionItemBinary, bool) {
	if o == nil || IsNil(o.Binaries) {
		return nil, false
	}
	return o.Binaries, true
}

// HasBinaries returns a boolean if a field has been set.
func (o *ExtensionItemData) HasBinaries() bool {
	if o != nil && !IsNil(o.Binaries) {
		return true
	}

	return false
}

// SetBinaries gets a reference to the given []ExtensionItemBinary and assigns it to the Binaries field.
func (o *ExtensionItemData) SetBinaries(v []ExtensionItemBinary) {
	o.Binaries = v
}

// GetData returns the Data field value
func (o *ExtensionItemData) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ExtensionItemData) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ExtensionItemData) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ExtensionItemData) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionItemData) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ExtensionItemData) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ExtensionItemData) SetDescription(v string) {
	o.Description = &v
}

// GetInternalId returns the InternalId field value if set, zero value otherwise.
func (o *ExtensionItemData) GetInternalId() int32 {
	if o == nil || IsNil(o.InternalId) {
		var ret int32
		return ret
	}
	return *o.InternalId
}

// GetInternalIdOk returns a tuple with the InternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionItemData) GetInternalIdOk() (*int32, bool) {
	if o == nil || IsNil(o.InternalId) {
		return nil, false
	}
	return o.InternalId, true
}

// HasInternalId returns a boolean if a field has been set.
func (o *ExtensionItemData) HasInternalId() bool {
	if o != nil && !IsNil(o.InternalId) {
		return true
	}

	return false
}

// SetInternalId gets a reference to the given int32 and assigns it to the InternalId field.
func (o *ExtensionItemData) SetInternalId(v int32) {
	o.InternalId = &v
}

// GetIsMandatory returns the IsMandatory field value if set, zero value otherwise.
func (o *ExtensionItemData) GetIsMandatory() bool {
	if o == nil || IsNil(o.IsMandatory) {
		var ret bool
		return ret
	}
	return *o.IsMandatory
}

// GetIsMandatoryOk returns a tuple with the IsMandatory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionItemData) GetIsMandatoryOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMandatory) {
		return nil, false
	}
	return o.IsMandatory, true
}

// HasIsMandatory returns a boolean if a field has been set.
func (o *ExtensionItemData) HasIsMandatory() bool {
	if o != nil && !IsNil(o.IsMandatory) {
		return true
	}

	return false
}

// SetIsMandatory gets a reference to the given bool and assigns it to the IsMandatory field.
func (o *ExtensionItemData) SetIsMandatory(v bool) {
	o.IsMandatory = &v
}

// GetName returns the Name field value
func (o *ExtensionItemData) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ExtensionItemData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ExtensionItemData) SetName(v string) {
	o.Name = v
}

// GetPermissionResource returns the PermissionResource field value if set, zero value otherwise.
func (o *ExtensionItemData) GetPermissionResource() PermissionResource {
	if o == nil || IsNil(o.PermissionResource) {
		var ret PermissionResource
		return ret
	}
	return *o.PermissionResource
}

// GetPermissionResourceOk returns a tuple with the PermissionResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionItemData) GetPermissionResourceOk() (*PermissionResource, bool) {
	if o == nil || IsNil(o.PermissionResource) {
		return nil, false
	}
	return o.PermissionResource, true
}

// HasPermissionResource returns a boolean if a field has been set.
func (o *ExtensionItemData) HasPermissionResource() bool {
	if o != nil && !IsNil(o.PermissionResource) {
		return true
	}

	return false
}

// SetPermissionResource gets a reference to the given PermissionResource and assigns it to the PermissionResource field.
func (o *ExtensionItemData) SetPermissionResource(v PermissionResource) {
	o.PermissionResource = &v
}

// GetStableId returns the StableId field value if set, zero value otherwise.
func (o *ExtensionItemData) GetStableId() string {
	if o == nil || IsNil(o.StableId) {
		var ret string
		return ret
	}
	return *o.StableId
}

// GetStableIdOk returns a tuple with the StableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionItemData) GetStableIdOk() (*string, bool) {
	if o == nil || IsNil(o.StableId) {
		return nil, false
	}
	return o.StableId, true
}

// HasStableId returns a boolean if a field has been set.
func (o *ExtensionItemData) HasStableId() bool {
	if o != nil && !IsNil(o.StableId) {
		return true
	}

	return false
}

// SetStableId gets a reference to the given string and assigns it to the StableId field.
func (o *ExtensionItemData) SetStableId(v string) {
	o.StableId = &v
}

// GetTargetDomain returns the TargetDomain field value
func (o *ExtensionItemData) GetTargetDomain() TargetDomain {
	if o == nil {
		var ret TargetDomain
		return ret
	}

	return o.TargetDomain
}

// GetTargetDomainOk returns a tuple with the TargetDomain field value
// and a boolean to check if the value has been set.
func (o *ExtensionItemData) GetTargetDomainOk() (*TargetDomain, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetDomain, true
}

// SetTargetDomain sets field value
func (o *ExtensionItemData) SetTargetDomain(v TargetDomain) {
	o.TargetDomain = v
}

// GetUniqueId returns the UniqueId field value if set, zero value otherwise.
func (o *ExtensionItemData) GetUniqueId() string {
	if o == nil || IsNil(o.UniqueId) {
		var ret string
		return ret
	}
	return *o.UniqueId
}

// GetUniqueIdOk returns a tuple with the UniqueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionItemData) GetUniqueIdOk() (*string, bool) {
	if o == nil || IsNil(o.UniqueId) {
		return nil, false
	}
	return o.UniqueId, true
}

// HasUniqueId returns a boolean if a field has been set.
func (o *ExtensionItemData) HasUniqueId() bool {
	if o != nil && !IsNil(o.UniqueId) {
		return true
	}

	return false
}

// SetUniqueId gets a reference to the given string and assigns it to the UniqueId field.
func (o *ExtensionItemData) SetUniqueId(v string) {
	o.UniqueId = &v
}

func (o ExtensionItemData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionItemData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Binaries) {
		toSerialize["binaries"] = o.Binaries
	}
	toSerialize["data"] = o.Data
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.InternalId) {
		toSerialize["internalId"] = o.InternalId
	}
	if !IsNil(o.IsMandatory) {
		toSerialize["isMandatory"] = o.IsMandatory
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.PermissionResource) {
		toSerialize["permissionResource"] = o.PermissionResource
	}
	if !IsNil(o.StableId) {
		toSerialize["stableId"] = o.StableId
	}
	toSerialize["targetDomain"] = o.TargetDomain
	if !IsNil(o.UniqueId) {
		toSerialize["uniqueId"] = o.UniqueId
	}
	return toSerialize, nil
}

func (o *ExtensionItemData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"name",
		"targetDomain",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtensionItemData := _ExtensionItemData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExtensionItemData)

	if err != nil {
		return err
	}

	*o = ExtensionItemData(varExtensionItemData)

	return err
}

type NullableExtensionItemData struct {
	value *ExtensionItemData
	isSet bool
}

func (v NullableExtensionItemData) Get() *ExtensionItemData {
	return v.value
}

func (v *NullableExtensionItemData) Set(val *ExtensionItemData) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionItemData) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionItemData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionItemData(val *ExtensionItemData) *NullableExtensionItemData {
	return &NullableExtensionItemData{value: val, isSet: true}
}

func (v NullableExtensionItemData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionItemData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


