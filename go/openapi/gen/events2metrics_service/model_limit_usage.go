/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
)

// checks if the LimitUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LimitUsage{}

// LimitUsage struct for LimitUsage
type LimitUsage struct {
	Limit *int32 `json:"limit,omitempty"`
	Used *int32 `json:"used,omitempty"`
}

// NewLimitUsage instantiates a new LimitUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLimitUsage() *LimitUsage {
	this := LimitUsage{}
	return &this
}

// NewLimitUsageWithDefaults instantiates a new LimitUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLimitUsageWithDefaults() *LimitUsage {
	this := LimitUsage{}
	return &this
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *LimitUsage) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LimitUsage) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *LimitUsage) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *LimitUsage) SetLimit(v int32) {
	o.Limit = &v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *LimitUsage) GetUsed() int32 {
	if o == nil || IsNil(o.Used) {
		var ret int32
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LimitUsage) GetUsedOk() (*int32, bool) {
	if o == nil || IsNil(o.Used) {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *LimitUsage) HasUsed() bool {
	if o != nil && !IsNil(o.Used) {
		return true
	}

	return false
}

// SetUsed gets a reference to the given int32 and assigns it to the Used field.
func (o *LimitUsage) SetUsed(v int32) {
	o.Used = &v
}

func (o LimitUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LimitUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Used) {
		toSerialize["used"] = o.Used
	}
	return toSerialize, nil
}

type NullableLimitUsage struct {
	value *LimitUsage
	isSet bool
}

func (v NullableLimitUsage) Get() *LimitUsage {
	return v.value
}

func (v *NullableLimitUsage) Set(val *LimitUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableLimitUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableLimitUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLimitUsage(val *LimitUsage) *NullableLimitUsage {
	return &NullableLimitUsage{value: val, isSet: true}
}

func (v NullableLimitUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLimitUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


