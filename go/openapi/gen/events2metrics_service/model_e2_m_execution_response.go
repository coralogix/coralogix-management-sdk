/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// E2MExecutionResponse - struct for E2MExecutionResponse
type E2MExecutionResponse struct {
	E2MExecutionResponseCreated *E2MExecutionResponseCreated
	E2MExecutionResponseDeleted *E2MExecutionResponseDeleted
	E2MExecutionResponseReplaced *E2MExecutionResponseReplaced
}

// E2MExecutionResponseCreatedAsE2MExecutionResponse is a convenience function that returns E2MExecutionResponseCreated wrapped in E2MExecutionResponse
func E2MExecutionResponseCreatedAsE2MExecutionResponse(v *E2MExecutionResponseCreated) E2MExecutionResponse {
	return E2MExecutionResponse{
		E2MExecutionResponseCreated: v,
	}
}

// E2MExecutionResponseDeletedAsE2MExecutionResponse is a convenience function that returns E2MExecutionResponseDeleted wrapped in E2MExecutionResponse
func E2MExecutionResponseDeletedAsE2MExecutionResponse(v *E2MExecutionResponseDeleted) E2MExecutionResponse {
	return E2MExecutionResponse{
		E2MExecutionResponseDeleted: v,
	}
}

// E2MExecutionResponseReplacedAsE2MExecutionResponse is a convenience function that returns E2MExecutionResponseReplaced wrapped in E2MExecutionResponse
func E2MExecutionResponseReplacedAsE2MExecutionResponse(v *E2MExecutionResponseReplaced) E2MExecutionResponse {
	return E2MExecutionResponse{
		E2MExecutionResponseReplaced: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *E2MExecutionResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into E2MExecutionResponseCreated
	err = newStrictDecoder(data).Decode(&dst.E2MExecutionResponseCreated)
	if err == nil {
		jsonE2MExecutionResponseCreated, _ := json.Marshal(dst.E2MExecutionResponseCreated)
		if string(jsonE2MExecutionResponseCreated) == "{}" { // empty struct
			dst.E2MExecutionResponseCreated = nil
		} else {
			if err = validator.Validate(dst.E2MExecutionResponseCreated); err != nil {
				dst.E2MExecutionResponseCreated = nil
			} else {
				match++
			}
		}
	} else {
		dst.E2MExecutionResponseCreated = nil
	}

	// try to unmarshal data into E2MExecutionResponseDeleted
	err = newStrictDecoder(data).Decode(&dst.E2MExecutionResponseDeleted)
	if err == nil {
		jsonE2MExecutionResponseDeleted, _ := json.Marshal(dst.E2MExecutionResponseDeleted)
		if string(jsonE2MExecutionResponseDeleted) == "{}" { // empty struct
			dst.E2MExecutionResponseDeleted = nil
		} else {
			if err = validator.Validate(dst.E2MExecutionResponseDeleted); err != nil {
				dst.E2MExecutionResponseDeleted = nil
			} else {
				match++
			}
		}
	} else {
		dst.E2MExecutionResponseDeleted = nil
	}

	// try to unmarshal data into E2MExecutionResponseReplaced
	err = newStrictDecoder(data).Decode(&dst.E2MExecutionResponseReplaced)
	if err == nil {
		jsonE2MExecutionResponseReplaced, _ := json.Marshal(dst.E2MExecutionResponseReplaced)
		if string(jsonE2MExecutionResponseReplaced) == "{}" { // empty struct
			dst.E2MExecutionResponseReplaced = nil
		} else {
			if err = validator.Validate(dst.E2MExecutionResponseReplaced); err != nil {
				dst.E2MExecutionResponseReplaced = nil
			} else {
				match++
			}
		}
	} else {
		dst.E2MExecutionResponseReplaced = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.E2MExecutionResponseCreated = nil
		dst.E2MExecutionResponseDeleted = nil
		dst.E2MExecutionResponseReplaced = nil

		return fmt.Errorf("data matches more than one schema in oneOf(E2MExecutionResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(E2MExecutionResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src E2MExecutionResponse) MarshalJSON() ([]byte, error) {
	if src.E2MExecutionResponseCreated != nil {
		return json.Marshal(&src.E2MExecutionResponseCreated)
	}

	if src.E2MExecutionResponseDeleted != nil {
		return json.Marshal(&src.E2MExecutionResponseDeleted)
	}

	if src.E2MExecutionResponseReplaced != nil {
		return json.Marshal(&src.E2MExecutionResponseReplaced)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *E2MExecutionResponse) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.E2MExecutionResponseCreated != nil {
		return obj.E2MExecutionResponseCreated
	}

	if obj.E2MExecutionResponseDeleted != nil {
		return obj.E2MExecutionResponseDeleted
	}

	if obj.E2MExecutionResponseReplaced != nil {
		return obj.E2MExecutionResponseReplaced
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj E2MExecutionResponse) GetActualInstanceValue() (interface{}) {
	if obj.E2MExecutionResponseCreated != nil {
		return *obj.E2MExecutionResponseCreated
	}

	if obj.E2MExecutionResponseDeleted != nil {
		return *obj.E2MExecutionResponseDeleted
	}

	if obj.E2MExecutionResponseReplaced != nil {
		return *obj.E2MExecutionResponseReplaced
	}

	// all schemas are nil
	return nil
}

type NullableE2MExecutionResponse struct {
	value *E2MExecutionResponse
	isSet bool
}

func (v NullableE2MExecutionResponse) Get() *E2MExecutionResponse {
	return v.value
}

func (v *NullableE2MExecutionResponse) Set(val *E2MExecutionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableE2MExecutionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableE2MExecutionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableE2MExecutionResponse(val *E2MExecutionResponse) *NullableE2MExecutionResponse {
	return &NullableE2MExecutionResponse{value: val, isSet: true}
}

func (v NullableE2MExecutionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableE2MExecutionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


