/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// E2MExecutionResponse - struct for E2MExecutionResponse
type E2MExecutionResponse struct {
	E2MExecutionResponseOneOf *E2MExecutionResponseOneOf
	E2MExecutionResponseOneOf1 *E2MExecutionResponseOneOf1
	E2MExecutionResponseOneOf2 *E2MExecutionResponseOneOf2
}

// E2MExecutionResponseOneOfAsE2MExecutionResponse is a convenience function that returns E2MExecutionResponseOneOf wrapped in E2MExecutionResponse
func E2MExecutionResponseOneOfAsE2MExecutionResponse(v *E2MExecutionResponseOneOf) E2MExecutionResponse {
	return E2MExecutionResponse{
		E2MExecutionResponseOneOf: v,
	}
}

// E2MExecutionResponseOneOf1AsE2MExecutionResponse is a convenience function that returns E2MExecutionResponseOneOf1 wrapped in E2MExecutionResponse
func E2MExecutionResponseOneOf1AsE2MExecutionResponse(v *E2MExecutionResponseOneOf1) E2MExecutionResponse {
	return E2MExecutionResponse{
		E2MExecutionResponseOneOf1: v,
	}
}

// E2MExecutionResponseOneOf2AsE2MExecutionResponse is a convenience function that returns E2MExecutionResponseOneOf2 wrapped in E2MExecutionResponse
func E2MExecutionResponseOneOf2AsE2MExecutionResponse(v *E2MExecutionResponseOneOf2) E2MExecutionResponse {
	return E2MExecutionResponse{
		E2MExecutionResponseOneOf2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *E2MExecutionResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into E2MExecutionResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.E2MExecutionResponseOneOf)
	if err == nil {
		jsonE2MExecutionResponseOneOf, _ := json.Marshal(dst.E2MExecutionResponseOneOf)
		if string(jsonE2MExecutionResponseOneOf) == "{}" { // empty struct
			dst.E2MExecutionResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.E2MExecutionResponseOneOf); err != nil {
				dst.E2MExecutionResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.E2MExecutionResponseOneOf = nil
	}

	// try to unmarshal data into E2MExecutionResponseOneOf1
	err = newStrictDecoder(data).Decode(&dst.E2MExecutionResponseOneOf1)
	if err == nil {
		jsonE2MExecutionResponseOneOf1, _ := json.Marshal(dst.E2MExecutionResponseOneOf1)
		if string(jsonE2MExecutionResponseOneOf1) == "{}" { // empty struct
			dst.E2MExecutionResponseOneOf1 = nil
		} else {
			if err = validator.Validate(dst.E2MExecutionResponseOneOf1); err != nil {
				dst.E2MExecutionResponseOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.E2MExecutionResponseOneOf1 = nil
	}

	// try to unmarshal data into E2MExecutionResponseOneOf2
	err = newStrictDecoder(data).Decode(&dst.E2MExecutionResponseOneOf2)
	if err == nil {
		jsonE2MExecutionResponseOneOf2, _ := json.Marshal(dst.E2MExecutionResponseOneOf2)
		if string(jsonE2MExecutionResponseOneOf2) == "{}" { // empty struct
			dst.E2MExecutionResponseOneOf2 = nil
		} else {
			if err = validator.Validate(dst.E2MExecutionResponseOneOf2); err != nil {
				dst.E2MExecutionResponseOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.E2MExecutionResponseOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.E2MExecutionResponseOneOf = nil
		dst.E2MExecutionResponseOneOf1 = nil
		dst.E2MExecutionResponseOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(E2MExecutionResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(E2MExecutionResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src E2MExecutionResponse) MarshalJSON() ([]byte, error) {
	if src.E2MExecutionResponseOneOf != nil {
		return json.Marshal(&src.E2MExecutionResponseOneOf)
	}

	if src.E2MExecutionResponseOneOf1 != nil {
		return json.Marshal(&src.E2MExecutionResponseOneOf1)
	}

	if src.E2MExecutionResponseOneOf2 != nil {
		return json.Marshal(&src.E2MExecutionResponseOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *E2MExecutionResponse) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.E2MExecutionResponseOneOf != nil {
		return obj.E2MExecutionResponseOneOf
	}

	if obj.E2MExecutionResponseOneOf1 != nil {
		return obj.E2MExecutionResponseOneOf1
	}

	if obj.E2MExecutionResponseOneOf2 != nil {
		return obj.E2MExecutionResponseOneOf2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj E2MExecutionResponse) GetActualInstanceValue() (interface{}) {
	if obj.E2MExecutionResponseOneOf != nil {
		return *obj.E2MExecutionResponseOneOf
	}

	if obj.E2MExecutionResponseOneOf1 != nil {
		return *obj.E2MExecutionResponseOneOf1
	}

	if obj.E2MExecutionResponseOneOf2 != nil {
		return *obj.E2MExecutionResponseOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableE2MExecutionResponse struct {
	value *E2MExecutionResponse
	isSet bool
}

func (v NullableE2MExecutionResponse) Get() *E2MExecutionResponse {
	return v.value
}

func (v *NullableE2MExecutionResponse) Set(val *E2MExecutionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableE2MExecutionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableE2MExecutionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableE2MExecutionResponse(val *E2MExecutionResponse) *NullableE2MExecutionResponse {
	return &NullableE2MExecutionResponse{value: val, isSet: true}
}

func (v NullableE2MExecutionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableE2MExecutionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


