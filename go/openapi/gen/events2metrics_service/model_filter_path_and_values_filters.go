/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FilterPathAndValuesFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterPathAndValuesFilters{}

// FilterPathAndValuesFilters This data structure represents a filter path and values
type FilterPathAndValuesFilters struct {
	Filters *Filters `json:"filters,omitempty"`
	Path string `json:"path"`
}

type _FilterPathAndValuesFilters FilterPathAndValuesFilters

// NewFilterPathAndValuesFilters instantiates a new FilterPathAndValuesFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterPathAndValuesFilters(path string) *FilterPathAndValuesFilters {
	this := FilterPathAndValuesFilters{}
	this.Path = path
	return &this
}

// NewFilterPathAndValuesFiltersWithDefaults instantiates a new FilterPathAndValuesFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterPathAndValuesFiltersWithDefaults() *FilterPathAndValuesFilters {
	this := FilterPathAndValuesFilters{}
	return &this
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *FilterPathAndValuesFilters) GetFilters() Filters {
	if o == nil || IsNil(o.Filters) {
		var ret Filters
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterPathAndValuesFilters) GetFiltersOk() (*Filters, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *FilterPathAndValuesFilters) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given Filters and assigns it to the Filters field.
func (o *FilterPathAndValuesFilters) SetFilters(v Filters) {
	o.Filters = &v
}

// GetPath returns the Path field value
func (o *FilterPathAndValuesFilters) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *FilterPathAndValuesFilters) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *FilterPathAndValuesFilters) SetPath(v string) {
	o.Path = v
}

func (o FilterPathAndValuesFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterPathAndValuesFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

func (o *FilterPathAndValuesFilters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFilterPathAndValuesFilters := _FilterPathAndValuesFilters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFilterPathAndValuesFilters)

	if err != nil {
		return err
	}

	*o = FilterPathAndValuesFilters(varFilterPathAndValuesFilters)

	return err
}

type NullableFilterPathAndValuesFilters struct {
	value *FilterPathAndValuesFilters
	isSet bool
}

func (v NullableFilterPathAndValuesFilters) Get() *FilterPathAndValuesFilters {
	return v.value
}

func (v *NullableFilterPathAndValuesFilters) Set(val *FilterPathAndValuesFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterPathAndValuesFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterPathAndValuesFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterPathAndValuesFilters(val *FilterPathAndValuesFilters) *NullableFilterPathAndValuesFilters {
	return &NullableFilterPathAndValuesFilters{value: val, isSet: true}
}

func (v NullableFilterPathAndValuesFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterPathAndValuesFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


