/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
)

// checks if the SpansQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpansQuery{}

// SpansQuery This data structure represents a query for spans.
type SpansQuery struct {
	ActionFilters []string `json:"actionFilters,omitempty"`
	ApplicationnameFilters []string `json:"applicationnameFilters,omitempty"`
	Lucene *string `json:"lucene,omitempty"`
	ServiceFilters []string `json:"serviceFilters,omitempty"`
	SubsystemnameFilters []string `json:"subsystemnameFilters,omitempty"`
}

// NewSpansQuery instantiates a new SpansQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpansQuery() *SpansQuery {
	this := SpansQuery{}
	return &this
}

// NewSpansQueryWithDefaults instantiates a new SpansQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpansQueryWithDefaults() *SpansQuery {
	this := SpansQuery{}
	return &this
}

// GetActionFilters returns the ActionFilters field value if set, zero value otherwise.
func (o *SpansQuery) GetActionFilters() []string {
	if o == nil || IsNil(o.ActionFilters) {
		var ret []string
		return ret
	}
	return o.ActionFilters
}

// GetActionFiltersOk returns a tuple with the ActionFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpansQuery) GetActionFiltersOk() ([]string, bool) {
	if o == nil || IsNil(o.ActionFilters) {
		return nil, false
	}
	return o.ActionFilters, true
}

// HasActionFilters returns a boolean if a field has been set.
func (o *SpansQuery) HasActionFilters() bool {
	if o != nil && !IsNil(o.ActionFilters) {
		return true
	}

	return false
}

// SetActionFilters gets a reference to the given []string and assigns it to the ActionFilters field.
func (o *SpansQuery) SetActionFilters(v []string) {
	o.ActionFilters = v
}

// GetApplicationnameFilters returns the ApplicationnameFilters field value if set, zero value otherwise.
func (o *SpansQuery) GetApplicationnameFilters() []string {
	if o == nil || IsNil(o.ApplicationnameFilters) {
		var ret []string
		return ret
	}
	return o.ApplicationnameFilters
}

// GetApplicationnameFiltersOk returns a tuple with the ApplicationnameFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpansQuery) GetApplicationnameFiltersOk() ([]string, bool) {
	if o == nil || IsNil(o.ApplicationnameFilters) {
		return nil, false
	}
	return o.ApplicationnameFilters, true
}

// HasApplicationnameFilters returns a boolean if a field has been set.
func (o *SpansQuery) HasApplicationnameFilters() bool {
	if o != nil && !IsNil(o.ApplicationnameFilters) {
		return true
	}

	return false
}

// SetApplicationnameFilters gets a reference to the given []string and assigns it to the ApplicationnameFilters field.
func (o *SpansQuery) SetApplicationnameFilters(v []string) {
	o.ApplicationnameFilters = v
}

// GetLucene returns the Lucene field value if set, zero value otherwise.
func (o *SpansQuery) GetLucene() string {
	if o == nil || IsNil(o.Lucene) {
		var ret string
		return ret
	}
	return *o.Lucene
}

// GetLuceneOk returns a tuple with the Lucene field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpansQuery) GetLuceneOk() (*string, bool) {
	if o == nil || IsNil(o.Lucene) {
		return nil, false
	}
	return o.Lucene, true
}

// HasLucene returns a boolean if a field has been set.
func (o *SpansQuery) HasLucene() bool {
	if o != nil && !IsNil(o.Lucene) {
		return true
	}

	return false
}

// SetLucene gets a reference to the given string and assigns it to the Lucene field.
func (o *SpansQuery) SetLucene(v string) {
	o.Lucene = &v
}

// GetServiceFilters returns the ServiceFilters field value if set, zero value otherwise.
func (o *SpansQuery) GetServiceFilters() []string {
	if o == nil || IsNil(o.ServiceFilters) {
		var ret []string
		return ret
	}
	return o.ServiceFilters
}

// GetServiceFiltersOk returns a tuple with the ServiceFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpansQuery) GetServiceFiltersOk() ([]string, bool) {
	if o == nil || IsNil(o.ServiceFilters) {
		return nil, false
	}
	return o.ServiceFilters, true
}

// HasServiceFilters returns a boolean if a field has been set.
func (o *SpansQuery) HasServiceFilters() bool {
	if o != nil && !IsNil(o.ServiceFilters) {
		return true
	}

	return false
}

// SetServiceFilters gets a reference to the given []string and assigns it to the ServiceFilters field.
func (o *SpansQuery) SetServiceFilters(v []string) {
	o.ServiceFilters = v
}

// GetSubsystemnameFilters returns the SubsystemnameFilters field value if set, zero value otherwise.
func (o *SpansQuery) GetSubsystemnameFilters() []string {
	if o == nil || IsNil(o.SubsystemnameFilters) {
		var ret []string
		return ret
	}
	return o.SubsystemnameFilters
}

// GetSubsystemnameFiltersOk returns a tuple with the SubsystemnameFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpansQuery) GetSubsystemnameFiltersOk() ([]string, bool) {
	if o == nil || IsNil(o.SubsystemnameFilters) {
		return nil, false
	}
	return o.SubsystemnameFilters, true
}

// HasSubsystemnameFilters returns a boolean if a field has been set.
func (o *SpansQuery) HasSubsystemnameFilters() bool {
	if o != nil && !IsNil(o.SubsystemnameFilters) {
		return true
	}

	return false
}

// SetSubsystemnameFilters gets a reference to the given []string and assigns it to the SubsystemnameFilters field.
func (o *SpansQuery) SetSubsystemnameFilters(v []string) {
	o.SubsystemnameFilters = v
}

func (o SpansQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpansQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionFilters) {
		toSerialize["actionFilters"] = o.ActionFilters
	}
	if !IsNil(o.ApplicationnameFilters) {
		toSerialize["applicationnameFilters"] = o.ApplicationnameFilters
	}
	if !IsNil(o.Lucene) {
		toSerialize["lucene"] = o.Lucene
	}
	if !IsNil(o.ServiceFilters) {
		toSerialize["serviceFilters"] = o.ServiceFilters
	}
	if !IsNil(o.SubsystemnameFilters) {
		toSerialize["subsystemnameFilters"] = o.SubsystemnameFilters
	}
	return toSerialize, nil
}

type NullableSpansQuery struct {
	value *SpansQuery
	isSet bool
}

func (v NullableSpansQuery) Get() *SpansQuery {
	return v.value
}

func (v *NullableSpansQuery) Set(val *SpansQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableSpansQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableSpansQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpansQuery(val *SpansQuery) *NullableSpansQuery {
	return &NullableSpansQuery{value: val, isSet: true}
}

func (v NullableSpansQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpansQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


