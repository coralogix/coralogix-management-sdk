/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
)

// checks if the E2MAggSamples type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &E2MAggSamples{}

// E2MAggSamples This data structure represents the e2m aggregate samples
type E2MAggSamples struct {
	SampleType *SampleType `json:"sampleType,omitempty"`
}

// NewE2MAggSamples instantiates a new E2MAggSamples object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewE2MAggSamples() *E2MAggSamples {
	this := E2MAggSamples{}
	return &this
}

// NewE2MAggSamplesWithDefaults instantiates a new E2MAggSamples object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewE2MAggSamplesWithDefaults() *E2MAggSamples {
	this := E2MAggSamples{}
	return &this
}

// GetSampleType returns the SampleType field value if set, zero value otherwise.
func (o *E2MAggSamples) GetSampleType() SampleType {
	if o == nil || IsNil(o.SampleType) {
		var ret SampleType
		return ret
	}
	return *o.SampleType
}

// GetSampleTypeOk returns a tuple with the SampleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *E2MAggSamples) GetSampleTypeOk() (*SampleType, bool) {
	if o == nil || IsNil(o.SampleType) {
		return nil, false
	}
	return o.SampleType, true
}

// HasSampleType returns a boolean if a field has been set.
func (o *E2MAggSamples) HasSampleType() bool {
	if o != nil && !IsNil(o.SampleType) {
		return true
	}

	return false
}

// SetSampleType gets a reference to the given SampleType and assigns it to the SampleType field.
func (o *E2MAggSamples) SetSampleType(v SampleType) {
	o.SampleType = &v
}

func (o E2MAggSamples) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o E2MAggSamples) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SampleType) {
		toSerialize["sampleType"] = o.SampleType
	}
	return toSerialize, nil
}

type NullableE2MAggSamples struct {
	value *E2MAggSamples
	isSet bool
}

func (v NullableE2MAggSamples) Get() *E2MAggSamples {
	return v.value
}

func (v *NullableE2MAggSamples) Set(val *E2MAggSamples) {
	v.value = val
	v.isSet = true
}

func (v NullableE2MAggSamples) IsSet() bool {
	return v.isSet
}

func (v *NullableE2MAggSamples) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableE2MAggSamples(val *E2MAggSamples) *NullableE2MAggSamples {
	return &NullableE2MAggSamples{value: val, isSet: true}
}

func (v NullableE2MAggSamples) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableE2MAggSamples) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


