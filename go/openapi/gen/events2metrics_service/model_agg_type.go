/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
	"fmt"
)

// AggType the model 'AggType'
type AggType string

// List of AggType
const (
	AGGTYPE_AGG_TYPE_UNSPECIFIED AggType = "AGG_TYPE_UNSPECIFIED"
	AGGTYPE_AGG_TYPE_MIN AggType = "AGG_TYPE_MIN"
	AGGTYPE_AGG_TYPE_MAX AggType = "AGG_TYPE_MAX"
	AGGTYPE_AGG_TYPE_COUNT AggType = "AGG_TYPE_COUNT"
	AGGTYPE_AGG_TYPE_AVG AggType = "AGG_TYPE_AVG"
	AGGTYPE_AGG_TYPE_SUM AggType = "AGG_TYPE_SUM"
	AGGTYPE_AGG_TYPE_HISTOGRAM AggType = "AGG_TYPE_HISTOGRAM"
	AGGTYPE_AGG_TYPE_SAMPLES AggType = "AGG_TYPE_SAMPLES"
)

// All allowed values of AggType enum
var AllowedAggTypeEnumValues = []AggType{
	"AGG_TYPE_UNSPECIFIED",
	"AGG_TYPE_MIN",
	"AGG_TYPE_MAX",
	"AGG_TYPE_COUNT",
	"AGG_TYPE_AVG",
	"AGG_TYPE_SUM",
	"AGG_TYPE_HISTOGRAM",
	"AGG_TYPE_SAMPLES",
}

func (v *AggType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AggType(value)
	for _, existing := range AllowedAggTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AggType", value)
}

// NewAggTypeFromValue returns a pointer to a valid AggType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAggTypeFromValue(v string) (*AggType, error) {
	ev := AggType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AggType: valid values are %v", v, AllowedAggTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AggType) IsValid() bool {
	for _, existing := range AllowedAggTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AggType value
func (v AggType) Ptr() *AggType {
	return &v
}

type NullableAggType struct {
	value *AggType
	isSet bool
}

func (v NullableAggType) Get() *AggType {
	return v.value
}

func (v *NullableAggType) Set(val *AggType) {
	v.value = val
	v.isSet = true
}

func (v NullableAggType) IsSet() bool {
	return v.isSet
}

func (v *NullableAggType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggType(val *AggType) *NullableAggType {
	return &NullableAggType{value: val, isSet: true}
}

func (v NullableAggType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

