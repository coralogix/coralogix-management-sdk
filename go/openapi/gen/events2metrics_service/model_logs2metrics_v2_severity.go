/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
	"fmt"
)

// Logs2metricsV2Severity the model 'Logs2metricsV2Severity'
type Logs2metricsV2Severity string

// List of logs2metrics.v2.Severity
const (
	LOGS2METRICSV2SEVERITY_SEVERITY_UNSPECIFIED Logs2metricsV2Severity = "SEVERITY_UNSPECIFIED"
	LOGS2METRICSV2SEVERITY_SEVERITY_DEBUG Logs2metricsV2Severity = "SEVERITY_DEBUG"
	LOGS2METRICSV2SEVERITY_SEVERITY_VERBOSE Logs2metricsV2Severity = "SEVERITY_VERBOSE"
	LOGS2METRICSV2SEVERITY_SEVERITY_INFO Logs2metricsV2Severity = "SEVERITY_INFO"
	LOGS2METRICSV2SEVERITY_SEVERITY_WARNING Logs2metricsV2Severity = "SEVERITY_WARNING"
	LOGS2METRICSV2SEVERITY_SEVERITY_ERROR Logs2metricsV2Severity = "SEVERITY_ERROR"
	LOGS2METRICSV2SEVERITY_SEVERITY_CRITICAL Logs2metricsV2Severity = "SEVERITY_CRITICAL"
)

// All allowed values of Logs2metricsV2Severity enum
var AllowedLogs2metricsV2SeverityEnumValues = []Logs2metricsV2Severity{
	"SEVERITY_UNSPECIFIED",
	"SEVERITY_DEBUG",
	"SEVERITY_VERBOSE",
	"SEVERITY_INFO",
	"SEVERITY_WARNING",
	"SEVERITY_ERROR",
	"SEVERITY_CRITICAL",
}

func (v *Logs2metricsV2Severity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Logs2metricsV2Severity(value)
	for _, existing := range AllowedLogs2metricsV2SeverityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Logs2metricsV2Severity", value)
}

// NewLogs2metricsV2SeverityFromValue returns a pointer to a valid Logs2metricsV2Severity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogs2metricsV2SeverityFromValue(v string) (*Logs2metricsV2Severity, error) {
	ev := Logs2metricsV2Severity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Logs2metricsV2Severity: valid values are %v", v, AllowedLogs2metricsV2SeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Logs2metricsV2Severity) IsValid() bool {
	for _, existing := range AllowedLogs2metricsV2SeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to logs2metrics.v2.Severity value
func (v Logs2metricsV2Severity) Ptr() *Logs2metricsV2Severity {
	return &v
}

type NullableLogs2metricsV2Severity struct {
	value *Logs2metricsV2Severity
	isSet bool
}

func (v NullableLogs2metricsV2Severity) Get() *Logs2metricsV2Severity {
	return v.value
}

func (v *NullableLogs2metricsV2Severity) Set(val *Logs2metricsV2Severity) {
	v.value = val
	v.isSet = true
}

func (v NullableLogs2metricsV2Severity) IsSet() bool {
	return v.isSet
}

func (v *NullableLogs2metricsV2Severity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogs2metricsV2Severity(val *Logs2metricsV2Severity) *NullableLogs2metricsV2Severity {
	return &NullableLogs2metricsV2Severity{value: val, isSet: true}
}

func (v NullableLogs2metricsV2Severity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogs2metricsV2Severity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

