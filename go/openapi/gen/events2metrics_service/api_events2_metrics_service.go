/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// Events2MetricsServiceAPIService Events2MetricsServiceAPI service
type Events2MetricsServiceAPIService service

type ApiEvents2MetricServiceAtomicBatchExecuteE2MRequest struct {
	ctx context.Context
	ApiService *Events2MetricsServiceAPIService
	events2MetricServiceAtomicBatchExecuteE2MRequest *Events2MetricServiceAtomicBatchExecuteE2MRequest
}

func (r ApiEvents2MetricServiceAtomicBatchExecuteE2MRequest) Events2MetricServiceAtomicBatchExecuteE2MRequest(events2MetricServiceAtomicBatchExecuteE2MRequest Events2MetricServiceAtomicBatchExecuteE2MRequest) ApiEvents2MetricServiceAtomicBatchExecuteE2MRequest {
	r.events2MetricServiceAtomicBatchExecuteE2MRequest = &events2MetricServiceAtomicBatchExecuteE2MRequest
	return r
}

func (r ApiEvents2MetricServiceAtomicBatchExecuteE2MRequest) Execute() (*AtomicBatchExecuteE2MResponse, *http.Response, error) {
	return r.ApiService.Events2MetricServiceAtomicBatchExecuteE2MExecute(r)
}

/*
Events2MetricServiceAtomicBatchExecuteE2M Atomic Batch Execute E2M

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEvents2MetricServiceAtomicBatchExecuteE2MRequest
*/
func (a *Events2MetricsServiceAPIService) Events2MetricServiceAtomicBatchExecuteE2M(ctx context.Context) ApiEvents2MetricServiceAtomicBatchExecuteE2MRequest {
	return ApiEvents2MetricServiceAtomicBatchExecuteE2MRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AtomicBatchExecuteE2MResponse
func (a *Events2MetricsServiceAPIService) Events2MetricServiceAtomicBatchExecuteE2MExecute(r ApiEvents2MetricServiceAtomicBatchExecuteE2MRequest) (*AtomicBatchExecuteE2MResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AtomicBatchExecuteE2MResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Events2MetricsServiceAPIService.Events2MetricServiceAtomicBatchExecuteE2M")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events2metrics/events2metrics/v2/batch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.events2MetricServiceAtomicBatchExecuteE2MRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEvents2MetricServiceCreateE2MRequest struct {
	ctx context.Context
	ApiService *Events2MetricsServiceAPIService
	events2MetricServiceCreateE2MRequest *Events2MetricServiceCreateE2MRequest
}

func (r ApiEvents2MetricServiceCreateE2MRequest) Events2MetricServiceCreateE2MRequest(events2MetricServiceCreateE2MRequest Events2MetricServiceCreateE2MRequest) ApiEvents2MetricServiceCreateE2MRequest {
	r.events2MetricServiceCreateE2MRequest = &events2MetricServiceCreateE2MRequest
	return r
}

func (r ApiEvents2MetricServiceCreateE2MRequest) Execute() (*CreateE2MResponse, *http.Response, error) {
	return r.ApiService.Events2MetricServiceCreateE2MExecute(r)
}

/*
Events2MetricServiceCreateE2M Create a new E2M

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEvents2MetricServiceCreateE2MRequest
*/
func (a *Events2MetricsServiceAPIService) Events2MetricServiceCreateE2M(ctx context.Context) ApiEvents2MetricServiceCreateE2MRequest {
	return ApiEvents2MetricServiceCreateE2MRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateE2MResponse
func (a *Events2MetricsServiceAPIService) Events2MetricServiceCreateE2MExecute(r ApiEvents2MetricServiceCreateE2MRequest) (*CreateE2MResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateE2MResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Events2MetricsServiceAPIService.Events2MetricServiceCreateE2M")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events2metrics/events2metrics/v2"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.events2MetricServiceCreateE2MRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEvents2MetricServiceDeleteE2MRequest struct {
	ctx context.Context
	ApiService *Events2MetricsServiceAPIService
	id string
}

func (r ApiEvents2MetricServiceDeleteE2MRequest) Execute() (*DeleteE2MResponse, *http.Response, error) {
	return r.ApiService.Events2MetricServiceDeleteE2MExecute(r)
}

/*
Events2MetricServiceDeleteE2M Delete an E2M

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiEvents2MetricServiceDeleteE2MRequest
*/
func (a *Events2MetricsServiceAPIService) Events2MetricServiceDeleteE2M(ctx context.Context, id string) ApiEvents2MetricServiceDeleteE2MRequest {
	return ApiEvents2MetricServiceDeleteE2MRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeleteE2MResponse
func (a *Events2MetricsServiceAPIService) Events2MetricServiceDeleteE2MExecute(r ApiEvents2MetricServiceDeleteE2MRequest) (*DeleteE2MResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteE2MResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Events2MetricsServiceAPIService.Events2MetricServiceDeleteE2M")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events2metrics/events2metrics/v2/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEvents2MetricServiceGetE2MRequest struct {
	ctx context.Context
	ApiService *Events2MetricsServiceAPIService
	id string
}

func (r ApiEvents2MetricServiceGetE2MRequest) Execute() (*GetE2MResponse, *http.Response, error) {
	return r.ApiService.Events2MetricServiceGetE2MExecute(r)
}

/*
Events2MetricServiceGetE2M Get an E2M

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiEvents2MetricServiceGetE2MRequest
*/
func (a *Events2MetricsServiceAPIService) Events2MetricServiceGetE2M(ctx context.Context, id string) ApiEvents2MetricServiceGetE2MRequest {
	return ApiEvents2MetricServiceGetE2MRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetE2MResponse
func (a *Events2MetricsServiceAPIService) Events2MetricServiceGetE2MExecute(r ApiEvents2MetricServiceGetE2MRequest) (*GetE2MResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetE2MResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Events2MetricsServiceAPIService.Events2MetricServiceGetE2M")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events2metrics/events2metrics/v2/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEvents2MetricServiceGetLimitsRequest struct {
	ctx context.Context
	ApiService *Events2MetricsServiceAPIService
}

func (r ApiEvents2MetricServiceGetLimitsRequest) Execute() (*GetLimitsResponse, *http.Response, error) {
	return r.ApiService.Events2MetricServiceGetLimitsExecute(r)
}

/*
Events2MetricServiceGetLimits Get E2M Limits

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEvents2MetricServiceGetLimitsRequest
*/
func (a *Events2MetricsServiceAPIService) Events2MetricServiceGetLimits(ctx context.Context) ApiEvents2MetricServiceGetLimitsRequest {
	return ApiEvents2MetricServiceGetLimitsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetLimitsResponse
func (a *Events2MetricsServiceAPIService) Events2MetricServiceGetLimitsExecute(r ApiEvents2MetricServiceGetLimitsRequest) (*GetLimitsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetLimitsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Events2MetricsServiceAPIService.Events2MetricServiceGetLimits")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events2metrics/events2metrics/v2/limits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEvents2MetricServiceListE2MRequest struct {
	ctx context.Context
	ApiService *Events2MetricsServiceAPIService
}

func (r ApiEvents2MetricServiceListE2MRequest) Execute() (*ListE2MResponse, *http.Response, error) {
	return r.ApiService.Events2MetricServiceListE2MExecute(r)
}

/*
Events2MetricServiceListE2M List E2Ms

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEvents2MetricServiceListE2MRequest
*/
func (a *Events2MetricsServiceAPIService) Events2MetricServiceListE2M(ctx context.Context) ApiEvents2MetricServiceListE2MRequest {
	return ApiEvents2MetricServiceListE2MRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListE2MResponse
func (a *Events2MetricsServiceAPIService) Events2MetricServiceListE2MExecute(r ApiEvents2MetricServiceListE2MRequest) (*ListE2MResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListE2MResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Events2MetricsServiceAPIService.Events2MetricServiceListE2M")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events2metrics/events2metrics/v2"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEvents2MetricServiceListLabelsCardinalityRequest struct {
	ctx context.Context
	ApiService *Events2MetricsServiceAPIService
	spansQuery *SpansQuery
	logsQuery *SpansQuery1
	metricLabels *[]MetricLabel
}

func (r ApiEvents2MetricServiceListLabelsCardinalityRequest) SpansQuery(spansQuery SpansQuery) ApiEvents2MetricServiceListLabelsCardinalityRequest {
	r.spansQuery = &spansQuery
	return r
}

func (r ApiEvents2MetricServiceListLabelsCardinalityRequest) LogsQuery(logsQuery SpansQuery1) ApiEvents2MetricServiceListLabelsCardinalityRequest {
	r.logsQuery = &logsQuery
	return r
}

func (r ApiEvents2MetricServiceListLabelsCardinalityRequest) MetricLabels(metricLabels []MetricLabel) ApiEvents2MetricServiceListLabelsCardinalityRequest {
	r.metricLabels = &metricLabels
	return r
}

func (r ApiEvents2MetricServiceListLabelsCardinalityRequest) Execute() (*ListLabelsCardinalityResponse, *http.Response, error) {
	return r.ApiService.Events2MetricServiceListLabelsCardinalityExecute(r)
}

/*
Events2MetricServiceListLabelsCardinality List E2M Labels Cardinality

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEvents2MetricServiceListLabelsCardinalityRequest
*/
func (a *Events2MetricsServiceAPIService) Events2MetricServiceListLabelsCardinality(ctx context.Context) ApiEvents2MetricServiceListLabelsCardinalityRequest {
	return ApiEvents2MetricServiceListLabelsCardinalityRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListLabelsCardinalityResponse
func (a *Events2MetricsServiceAPIService) Events2MetricServiceListLabelsCardinalityExecute(r ApiEvents2MetricServiceListLabelsCardinalityRequest) (*ListLabelsCardinalityResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListLabelsCardinalityResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Events2MetricsServiceAPIService.Events2MetricServiceListLabelsCardinality")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events2metrics/events2metrics/v2/labels:cardinality"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.spansQuery != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "spans_query", r.spansQuery, "form", "")
	}
	if r.logsQuery != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "logs_query", r.logsQuery, "form", "")
	}
	if r.metricLabels != nil {
		t := *r.metricLabels
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "metric_labels", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "metric_labels", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEvents2MetricServiceReplaceE2MRequest struct {
	ctx context.Context
	ApiService *Events2MetricsServiceAPIService
	events2MetricServiceReplaceE2MRequest *Events2MetricServiceReplaceE2MRequest
}

func (r ApiEvents2MetricServiceReplaceE2MRequest) Events2MetricServiceReplaceE2MRequest(events2MetricServiceReplaceE2MRequest Events2MetricServiceReplaceE2MRequest) ApiEvents2MetricServiceReplaceE2MRequest {
	r.events2MetricServiceReplaceE2MRequest = &events2MetricServiceReplaceE2MRequest
	return r
}

func (r ApiEvents2MetricServiceReplaceE2MRequest) Execute() (*ReplaceE2MResponse, *http.Response, error) {
	return r.ApiService.Events2MetricServiceReplaceE2MExecute(r)
}

/*
Events2MetricServiceReplaceE2M Replace an E2M

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEvents2MetricServiceReplaceE2MRequest
*/
func (a *Events2MetricsServiceAPIService) Events2MetricServiceReplaceE2M(ctx context.Context) ApiEvents2MetricServiceReplaceE2MRequest {
	return ApiEvents2MetricServiceReplaceE2MRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ReplaceE2MResponse
func (a *Events2MetricsServiceAPIService) Events2MetricServiceReplaceE2MExecute(r ApiEvents2MetricServiceReplaceE2MRequest) (*ReplaceE2MResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReplaceE2MResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Events2MetricsServiceAPIService.Events2MetricServiceReplaceE2M")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events2metrics/events2metrics/v2"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.events2MetricServiceReplaceE2MRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
