/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Events2MetricServiceCreateE2MRequest - struct for Events2MetricServiceCreateE2MRequest
type Events2MetricServiceCreateE2MRequest struct {
	E2MCreateParams *E2MCreateParams
	E2MCreateParams1 *E2MCreateParams1
}

// E2MCreateParamsAsEvents2MetricServiceCreateE2MRequest is a convenience function that returns E2MCreateParams wrapped in Events2MetricServiceCreateE2MRequest
func E2MCreateParamsAsEvents2MetricServiceCreateE2MRequest(v *E2MCreateParams) Events2MetricServiceCreateE2MRequest {
	return Events2MetricServiceCreateE2MRequest{
		E2MCreateParams: v,
	}
}

// E2MCreateParams1AsEvents2MetricServiceCreateE2MRequest is a convenience function that returns E2MCreateParams1 wrapped in Events2MetricServiceCreateE2MRequest
func E2MCreateParams1AsEvents2MetricServiceCreateE2MRequest(v *E2MCreateParams1) Events2MetricServiceCreateE2MRequest {
	return Events2MetricServiceCreateE2MRequest{
		E2MCreateParams1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Events2MetricServiceCreateE2MRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into E2MCreateParams
	err = newStrictDecoder(data).Decode(&dst.E2MCreateParams)
	if err == nil {
		jsonE2MCreateParams, _ := json.Marshal(dst.E2MCreateParams)
		if string(jsonE2MCreateParams) == "{}" { // empty struct
			dst.E2MCreateParams = nil
		} else {
			if err = validator.Validate(dst.E2MCreateParams); err != nil {
				dst.E2MCreateParams = nil
			} else {
				match++
			}
		}
	} else {
		dst.E2MCreateParams = nil
	}

	// try to unmarshal data into E2MCreateParams1
	err = newStrictDecoder(data).Decode(&dst.E2MCreateParams1)
	if err == nil {
		jsonE2MCreateParams1, _ := json.Marshal(dst.E2MCreateParams1)
		if string(jsonE2MCreateParams1) == "{}" { // empty struct
			dst.E2MCreateParams1 = nil
		} else {
			if err = validator.Validate(dst.E2MCreateParams1); err != nil {
				dst.E2MCreateParams1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.E2MCreateParams1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.E2MCreateParams = nil
		dst.E2MCreateParams1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Events2MetricServiceCreateE2MRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Events2MetricServiceCreateE2MRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Events2MetricServiceCreateE2MRequest) MarshalJSON() ([]byte, error) {
	if src.E2MCreateParams != nil {
		return json.Marshal(&src.E2MCreateParams)
	}

	if src.E2MCreateParams1 != nil {
		return json.Marshal(&src.E2MCreateParams1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Events2MetricServiceCreateE2MRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.E2MCreateParams != nil {
		return obj.E2MCreateParams
	}

	if obj.E2MCreateParams1 != nil {
		return obj.E2MCreateParams1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Events2MetricServiceCreateE2MRequest) GetActualInstanceValue() (interface{}) {
	if obj.E2MCreateParams != nil {
		return *obj.E2MCreateParams
	}

	if obj.E2MCreateParams1 != nil {
		return *obj.E2MCreateParams1
	}

	// all schemas are nil
	return nil
}

type NullableEvents2MetricServiceCreateE2MRequest struct {
	value *Events2MetricServiceCreateE2MRequest
	isSet bool
}

func (v NullableEvents2MetricServiceCreateE2MRequest) Get() *Events2MetricServiceCreateE2MRequest {
	return v.value
}

func (v *NullableEvents2MetricServiceCreateE2MRequest) Set(val *Events2MetricServiceCreateE2MRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEvents2MetricServiceCreateE2MRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEvents2MetricServiceCreateE2MRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvents2MetricServiceCreateE2MRequest(val *Events2MetricServiceCreateE2MRequest) *NullableEvents2MetricServiceCreateE2MRequest {
	return &NullableEvents2MetricServiceCreateE2MRequest{value: val, isSet: true}
}

func (v NullableEvents2MetricServiceCreateE2MRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvents2MetricServiceCreateE2MRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


