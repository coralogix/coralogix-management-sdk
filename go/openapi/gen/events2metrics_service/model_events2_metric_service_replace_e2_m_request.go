/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Events2MetricServiceReplaceE2MRequest - struct for Events2MetricServiceReplaceE2MRequest
type Events2MetricServiceReplaceE2MRequest struct {
	E2M1 *E2M1
	E2M2 *E2M2
}

// E2M1AsEvents2MetricServiceReplaceE2MRequest is a convenience function that returns E2M1 wrapped in Events2MetricServiceReplaceE2MRequest
func E2M1AsEvents2MetricServiceReplaceE2MRequest(v *E2M1) Events2MetricServiceReplaceE2MRequest {
	return Events2MetricServiceReplaceE2MRequest{
		E2M1: v,
	}
}

// E2M2AsEvents2MetricServiceReplaceE2MRequest is a convenience function that returns E2M2 wrapped in Events2MetricServiceReplaceE2MRequest
func E2M2AsEvents2MetricServiceReplaceE2MRequest(v *E2M2) Events2MetricServiceReplaceE2MRequest {
	return Events2MetricServiceReplaceE2MRequest{
		E2M2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Events2MetricServiceReplaceE2MRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into E2M1
	err = newStrictDecoder(data).Decode(&dst.E2M1)
	if err == nil {
		jsonE2M1, _ := json.Marshal(dst.E2M1)
		if string(jsonE2M1) == "{}" { // empty struct
			dst.E2M1 = nil
		} else {
			if err = validator.Validate(dst.E2M1); err != nil {
				dst.E2M1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.E2M1 = nil
	}

	// try to unmarshal data into E2M2
	err = newStrictDecoder(data).Decode(&dst.E2M2)
	if err == nil {
		jsonE2M2, _ := json.Marshal(dst.E2M2)
		if string(jsonE2M2) == "{}" { // empty struct
			dst.E2M2 = nil
		} else {
			if err = validator.Validate(dst.E2M2); err != nil {
				dst.E2M2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.E2M2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.E2M1 = nil
		dst.E2M2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Events2MetricServiceReplaceE2MRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Events2MetricServiceReplaceE2MRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Events2MetricServiceReplaceE2MRequest) MarshalJSON() ([]byte, error) {
	if src.E2M1 != nil {
		return json.Marshal(&src.E2M1)
	}

	if src.E2M2 != nil {
		return json.Marshal(&src.E2M2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Events2MetricServiceReplaceE2MRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.E2M1 != nil {
		return obj.E2M1
	}

	if obj.E2M2 != nil {
		return obj.E2M2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Events2MetricServiceReplaceE2MRequest) GetActualInstanceValue() (interface{}) {
	if obj.E2M1 != nil {
		return *obj.E2M1
	}

	if obj.E2M2 != nil {
		return *obj.E2M2
	}

	// all schemas are nil
	return nil
}

type NullableEvents2MetricServiceReplaceE2MRequest struct {
	value *Events2MetricServiceReplaceE2MRequest
	isSet bool
}

func (v NullableEvents2MetricServiceReplaceE2MRequest) Get() *Events2MetricServiceReplaceE2MRequest {
	return v.value
}

func (v *NullableEvents2MetricServiceReplaceE2MRequest) Set(val *Events2MetricServiceReplaceE2MRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEvents2MetricServiceReplaceE2MRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEvents2MetricServiceReplaceE2MRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvents2MetricServiceReplaceE2MRequest(val *Events2MetricServiceReplaceE2MRequest) *NullableEvents2MetricServiceReplaceE2MRequest {
	return &NullableEvents2MetricServiceReplaceE2MRequest{value: val, isSet: true}
}

func (v NullableEvents2MetricServiceReplaceE2MRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvents2MetricServiceReplaceE2MRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


