/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
)

// checks if the MultipleValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultipleValues{}

// MultipleValues struct for MultipleValues
type MultipleValues struct {
	Matcher *EventsV3FilterMatcher `json:"matcher,omitempty"`
	Values []string `json:"values,omitempty"`
}

// NewMultipleValues instantiates a new MultipleValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleValues() *MultipleValues {
	this := MultipleValues{}
	return &this
}

// NewMultipleValuesWithDefaults instantiates a new MultipleValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleValuesWithDefaults() *MultipleValues {
	this := MultipleValues{}
	return &this
}

// GetMatcher returns the Matcher field value if set, zero value otherwise.
func (o *MultipleValues) GetMatcher() EventsV3FilterMatcher {
	if o == nil || IsNil(o.Matcher) {
		var ret EventsV3FilterMatcher
		return ret
	}
	return *o.Matcher
}

// GetMatcherOk returns a tuple with the Matcher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipleValues) GetMatcherOk() (*EventsV3FilterMatcher, bool) {
	if o == nil || IsNil(o.Matcher) {
		return nil, false
	}
	return o.Matcher, true
}

// HasMatcher returns a boolean if a field has been set.
func (o *MultipleValues) HasMatcher() bool {
	if o != nil && !IsNil(o.Matcher) {
		return true
	}

	return false
}

// SetMatcher gets a reference to the given EventsV3FilterMatcher and assigns it to the Matcher field.
func (o *MultipleValues) SetMatcher(v EventsV3FilterMatcher) {
	o.Matcher = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *MultipleValues) GetValues() []string {
	if o == nil || IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipleValues) GetValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *MultipleValues) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *MultipleValues) SetValues(v []string) {
	o.Values = v
}

func (o MultipleValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultipleValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Matcher) {
		toSerialize["matcher"] = o.Matcher
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableMultipleValues struct {
	value *MultipleValues
	isSet bool
}

func (v NullableMultipleValues) Get() *MultipleValues {
	return v.value
}

func (v *NullableMultipleValues) Set(val *MultipleValues) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleValues) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleValues(val *MultipleValues) *NullableMultipleValues {
	return &NullableMultipleValues{value: val, isSet: true}
}

func (v NullableMultipleValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


