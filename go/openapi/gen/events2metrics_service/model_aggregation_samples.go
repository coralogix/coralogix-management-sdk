/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
)

// checks if the AggregationSamples type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AggregationSamples{}

// AggregationSamples This data structure represents an aggregation
type AggregationSamples struct {
	AggType *AggType `json:"aggType,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Samples *E2MAggSamples `json:"samples,omitempty"`
	TargetMetricName *string `json:"targetMetricName,omitempty"`
}

// NewAggregationSamples instantiates a new AggregationSamples object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregationSamples() *AggregationSamples {
	this := AggregationSamples{}
	return &this
}

// NewAggregationSamplesWithDefaults instantiates a new AggregationSamples object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregationSamplesWithDefaults() *AggregationSamples {
	this := AggregationSamples{}
	return &this
}

// GetAggType returns the AggType field value if set, zero value otherwise.
func (o *AggregationSamples) GetAggType() AggType {
	if o == nil || IsNil(o.AggType) {
		var ret AggType
		return ret
	}
	return *o.AggType
}

// GetAggTypeOk returns a tuple with the AggType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregationSamples) GetAggTypeOk() (*AggType, bool) {
	if o == nil || IsNil(o.AggType) {
		return nil, false
	}
	return o.AggType, true
}

// HasAggType returns a boolean if a field has been set.
func (o *AggregationSamples) HasAggType() bool {
	if o != nil && !IsNil(o.AggType) {
		return true
	}

	return false
}

// SetAggType gets a reference to the given AggType and assigns it to the AggType field.
func (o *AggregationSamples) SetAggType(v AggType) {
	o.AggType = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AggregationSamples) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregationSamples) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AggregationSamples) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AggregationSamples) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetSamples returns the Samples field value if set, zero value otherwise.
func (o *AggregationSamples) GetSamples() E2MAggSamples {
	if o == nil || IsNil(o.Samples) {
		var ret E2MAggSamples
		return ret
	}
	return *o.Samples
}

// GetSamplesOk returns a tuple with the Samples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregationSamples) GetSamplesOk() (*E2MAggSamples, bool) {
	if o == nil || IsNil(o.Samples) {
		return nil, false
	}
	return o.Samples, true
}

// HasSamples returns a boolean if a field has been set.
func (o *AggregationSamples) HasSamples() bool {
	if o != nil && !IsNil(o.Samples) {
		return true
	}

	return false
}

// SetSamples gets a reference to the given E2MAggSamples and assigns it to the Samples field.
func (o *AggregationSamples) SetSamples(v E2MAggSamples) {
	o.Samples = &v
}

// GetTargetMetricName returns the TargetMetricName field value if set, zero value otherwise.
func (o *AggregationSamples) GetTargetMetricName() string {
	if o == nil || IsNil(o.TargetMetricName) {
		var ret string
		return ret
	}
	return *o.TargetMetricName
}

// GetTargetMetricNameOk returns a tuple with the TargetMetricName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregationSamples) GetTargetMetricNameOk() (*string, bool) {
	if o == nil || IsNil(o.TargetMetricName) {
		return nil, false
	}
	return o.TargetMetricName, true
}

// HasTargetMetricName returns a boolean if a field has been set.
func (o *AggregationSamples) HasTargetMetricName() bool {
	if o != nil && !IsNil(o.TargetMetricName) {
		return true
	}

	return false
}

// SetTargetMetricName gets a reference to the given string and assigns it to the TargetMetricName field.
func (o *AggregationSamples) SetTargetMetricName(v string) {
	o.TargetMetricName = &v
}

func (o AggregationSamples) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AggregationSamples) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AggType) {
		toSerialize["aggType"] = o.AggType
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Samples) {
		toSerialize["samples"] = o.Samples
	}
	if !IsNil(o.TargetMetricName) {
		toSerialize["targetMetricName"] = o.TargetMetricName
	}
	return toSerialize, nil
}

type NullableAggregationSamples struct {
	value *AggregationSamples
	isSet bool
}

func (v NullableAggregationSamples) Get() *AggregationSamples {
	return v.value
}

func (v *NullableAggregationSamples) Set(val *AggregationSamples) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregationSamples) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregationSamples) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregationSamples(val *AggregationSamples) *NullableAggregationSamples {
	return &NullableAggregationSamples{value: val, isSet: true}
}

func (v NullableAggregationSamples) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregationSamples) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


