/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
	"fmt"
)

// E2MType the model 'E2MType'
type E2MType string

// List of E2MType
const (
	E2MTYPE_E2_M_TYPE_UNSPECIFIED E2MType = "E2M_TYPE_UNSPECIFIED"
	E2MTYPE_E2_M_TYPE_LOGS2_METRICS E2MType = "E2M_TYPE_LOGS2METRICS"
	E2MTYPE_E2_M_TYPE_SPANS2_METRICS E2MType = "E2M_TYPE_SPANS2METRICS"
)

// All allowed values of E2MType enum
var AllowedE2MTypeEnumValues = []E2MType{
	"E2M_TYPE_UNSPECIFIED",
	"E2M_TYPE_LOGS2METRICS",
	"E2M_TYPE_SPANS2METRICS",
}

func (v *E2MType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := E2MType(value)
	for _, existing := range AllowedE2MTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid E2MType", value)
}

// NewE2MTypeFromValue returns a pointer to a valid E2MType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewE2MTypeFromValue(v string) (*E2MType, error) {
	ev := E2MType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for E2MType: valid values are %v", v, AllowedE2MTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v E2MType) IsValid() bool {
	for _, existing := range AllowedE2MTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to E2MType value
func (v E2MType) Ptr() *E2MType {
	return &v
}

type NullableE2MType struct {
	value *E2MType
	isSet bool
}

func (v NullableE2MType) Get() *E2MType {
	return v.value
}

func (v *NullableE2MType) Set(val *E2MType) {
	v.value = val
	v.isSet = true
}

func (v NullableE2MType) IsSet() bool {
	return v.isSet
}

func (v *NullableE2MType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableE2MType(val *E2MType) *NullableE2MType {
	return &NullableE2MType{value: val, isSet: true}
}

func (v NullableE2MType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableE2MType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

