/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the E2MCreateParamsSpansQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &E2MCreateParamsSpansQuery{}

// E2MCreateParamsSpansQuery This data structure is used to create a new event to metric definition
type E2MCreateParamsSpansQuery struct {
	Description *string `json:"description,omitempty"`
	MetricFields []V2MetricField `json:"metricFields,omitempty"`
	MetricLabels []MetricLabel `json:"metricLabels,omitempty"`
	Name string `json:"name"`
	PermutationsLimit *int32 `json:"permutationsLimit,omitempty"`
	SpansQuery *V2SpansQuery `json:"spansQuery,omitempty"`
	Type *E2MType `json:"type,omitempty"`
}

type _E2MCreateParamsSpansQuery E2MCreateParamsSpansQuery

// NewE2MCreateParamsSpansQuery instantiates a new E2MCreateParamsSpansQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewE2MCreateParamsSpansQuery(name string) *E2MCreateParamsSpansQuery {
	this := E2MCreateParamsSpansQuery{}
	this.Name = name
	return &this
}

// NewE2MCreateParamsSpansQueryWithDefaults instantiates a new E2MCreateParamsSpansQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewE2MCreateParamsSpansQueryWithDefaults() *E2MCreateParamsSpansQuery {
	this := E2MCreateParamsSpansQuery{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *E2MCreateParamsSpansQuery) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *E2MCreateParamsSpansQuery) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *E2MCreateParamsSpansQuery) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *E2MCreateParamsSpansQuery) SetDescription(v string) {
	o.Description = &v
}

// GetMetricFields returns the MetricFields field value if set, zero value otherwise.
func (o *E2MCreateParamsSpansQuery) GetMetricFields() []V2MetricField {
	if o == nil || IsNil(o.MetricFields) {
		var ret []V2MetricField
		return ret
	}
	return o.MetricFields
}

// GetMetricFieldsOk returns a tuple with the MetricFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *E2MCreateParamsSpansQuery) GetMetricFieldsOk() ([]V2MetricField, bool) {
	if o == nil || IsNil(o.MetricFields) {
		return nil, false
	}
	return o.MetricFields, true
}

// HasMetricFields returns a boolean if a field has been set.
func (o *E2MCreateParamsSpansQuery) HasMetricFields() bool {
	if o != nil && !IsNil(o.MetricFields) {
		return true
	}

	return false
}

// SetMetricFields gets a reference to the given []V2MetricField and assigns it to the MetricFields field.
func (o *E2MCreateParamsSpansQuery) SetMetricFields(v []V2MetricField) {
	o.MetricFields = v
}

// GetMetricLabels returns the MetricLabels field value if set, zero value otherwise.
func (o *E2MCreateParamsSpansQuery) GetMetricLabels() []MetricLabel {
	if o == nil || IsNil(o.MetricLabels) {
		var ret []MetricLabel
		return ret
	}
	return o.MetricLabels
}

// GetMetricLabelsOk returns a tuple with the MetricLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *E2MCreateParamsSpansQuery) GetMetricLabelsOk() ([]MetricLabel, bool) {
	if o == nil || IsNil(o.MetricLabels) {
		return nil, false
	}
	return o.MetricLabels, true
}

// HasMetricLabels returns a boolean if a field has been set.
func (o *E2MCreateParamsSpansQuery) HasMetricLabels() bool {
	if o != nil && !IsNil(o.MetricLabels) {
		return true
	}

	return false
}

// SetMetricLabels gets a reference to the given []MetricLabel and assigns it to the MetricLabels field.
func (o *E2MCreateParamsSpansQuery) SetMetricLabels(v []MetricLabel) {
	o.MetricLabels = v
}

// GetName returns the Name field value
func (o *E2MCreateParamsSpansQuery) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *E2MCreateParamsSpansQuery) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *E2MCreateParamsSpansQuery) SetName(v string) {
	o.Name = v
}

// GetPermutationsLimit returns the PermutationsLimit field value if set, zero value otherwise.
func (o *E2MCreateParamsSpansQuery) GetPermutationsLimit() int32 {
	if o == nil || IsNil(o.PermutationsLimit) {
		var ret int32
		return ret
	}
	return *o.PermutationsLimit
}

// GetPermutationsLimitOk returns a tuple with the PermutationsLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *E2MCreateParamsSpansQuery) GetPermutationsLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.PermutationsLimit) {
		return nil, false
	}
	return o.PermutationsLimit, true
}

// HasPermutationsLimit returns a boolean if a field has been set.
func (o *E2MCreateParamsSpansQuery) HasPermutationsLimit() bool {
	if o != nil && !IsNil(o.PermutationsLimit) {
		return true
	}

	return false
}

// SetPermutationsLimit gets a reference to the given int32 and assigns it to the PermutationsLimit field.
func (o *E2MCreateParamsSpansQuery) SetPermutationsLimit(v int32) {
	o.PermutationsLimit = &v
}

// GetSpansQuery returns the SpansQuery field value if set, zero value otherwise.
func (o *E2MCreateParamsSpansQuery) GetSpansQuery() V2SpansQuery {
	if o == nil || IsNil(o.SpansQuery) {
		var ret V2SpansQuery
		return ret
	}
	return *o.SpansQuery
}

// GetSpansQueryOk returns a tuple with the SpansQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *E2MCreateParamsSpansQuery) GetSpansQueryOk() (*V2SpansQuery, bool) {
	if o == nil || IsNil(o.SpansQuery) {
		return nil, false
	}
	return o.SpansQuery, true
}

// HasSpansQuery returns a boolean if a field has been set.
func (o *E2MCreateParamsSpansQuery) HasSpansQuery() bool {
	if o != nil && !IsNil(o.SpansQuery) {
		return true
	}

	return false
}

// SetSpansQuery gets a reference to the given V2SpansQuery and assigns it to the SpansQuery field.
func (o *E2MCreateParamsSpansQuery) SetSpansQuery(v V2SpansQuery) {
	o.SpansQuery = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *E2MCreateParamsSpansQuery) GetType() E2MType {
	if o == nil || IsNil(o.Type) {
		var ret E2MType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *E2MCreateParamsSpansQuery) GetTypeOk() (*E2MType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *E2MCreateParamsSpansQuery) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given E2MType and assigns it to the Type field.
func (o *E2MCreateParamsSpansQuery) SetType(v E2MType) {
	o.Type = &v
}

func (o E2MCreateParamsSpansQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o E2MCreateParamsSpansQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.MetricFields) {
		toSerialize["metricFields"] = o.MetricFields
	}
	if !IsNil(o.MetricLabels) {
		toSerialize["metricLabels"] = o.MetricLabels
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.PermutationsLimit) {
		toSerialize["permutationsLimit"] = o.PermutationsLimit
	}
	if !IsNil(o.SpansQuery) {
		toSerialize["spansQuery"] = o.SpansQuery
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

func (o *E2MCreateParamsSpansQuery) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varE2MCreateParamsSpansQuery := _E2MCreateParamsSpansQuery{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varE2MCreateParamsSpansQuery)

	if err != nil {
		return err
	}

	*o = E2MCreateParamsSpansQuery(varE2MCreateParamsSpansQuery)

	return err
}

type NullableE2MCreateParamsSpansQuery struct {
	value *E2MCreateParamsSpansQuery
	isSet bool
}

func (v NullableE2MCreateParamsSpansQuery) Get() *E2MCreateParamsSpansQuery {
	return v.value
}

func (v *NullableE2MCreateParamsSpansQuery) Set(val *E2MCreateParamsSpansQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableE2MCreateParamsSpansQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableE2MCreateParamsSpansQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableE2MCreateParamsSpansQuery(val *E2MCreateParamsSpansQuery) *NullableE2MCreateParamsSpansQuery {
	return &NullableE2MCreateParamsSpansQuery{value: val, isSet: true}
}

func (v NullableE2MCreateParamsSpansQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableE2MCreateParamsSpansQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


