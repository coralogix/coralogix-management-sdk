/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the E2MPermutations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &E2MPermutations{}

// E2MPermutations This data structure represents the limit of events2metrics permutations and if the limit was exceeded
type E2MPermutations struct {
	HasExceededLimit bool `json:"hasExceededLimit"`
	Limit int32 `json:"limit"`
}

type _E2MPermutations E2MPermutations

// NewE2MPermutations instantiates a new E2MPermutations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewE2MPermutations(hasExceededLimit bool, limit int32) *E2MPermutations {
	this := E2MPermutations{}
	this.HasExceededLimit = hasExceededLimit
	this.Limit = limit
	return &this
}

// NewE2MPermutationsWithDefaults instantiates a new E2MPermutations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewE2MPermutationsWithDefaults() *E2MPermutations {
	this := E2MPermutations{}
	return &this
}

// GetHasExceededLimit returns the HasExceededLimit field value
func (o *E2MPermutations) GetHasExceededLimit() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasExceededLimit
}

// GetHasExceededLimitOk returns a tuple with the HasExceededLimit field value
// and a boolean to check if the value has been set.
func (o *E2MPermutations) GetHasExceededLimitOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasExceededLimit, true
}

// SetHasExceededLimit sets field value
func (o *E2MPermutations) SetHasExceededLimit(v bool) {
	o.HasExceededLimit = v
}

// GetLimit returns the Limit field value
func (o *E2MPermutations) GetLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *E2MPermutations) GetLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *E2MPermutations) SetLimit(v int32) {
	o.Limit = v
}

func (o E2MPermutations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o E2MPermutations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hasExceededLimit"] = o.HasExceededLimit
	toSerialize["limit"] = o.Limit
	return toSerialize, nil
}

func (o *E2MPermutations) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hasExceededLimit",
		"limit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varE2MPermutations := _E2MPermutations{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varE2MPermutations)

	if err != nil {
		return err
	}

	*o = E2MPermutations(varE2MPermutations)

	return err
}

type NullableE2MPermutations struct {
	value *E2MPermutations
	isSet bool
}

func (v NullableE2MPermutations) Get() *E2MPermutations {
	return v.value
}

func (v *NullableE2MPermutations) Set(val *E2MPermutations) {
	v.value = val
	v.isSet = true
}

func (v NullableE2MPermutations) IsSet() bool {
	return v.isSet
}

func (v *NullableE2MPermutations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableE2MPermutations(val *E2MPermutations) *NullableE2MPermutations {
	return &NullableE2MPermutations{value: val, isSet: true}
}

func (v NullableE2MPermutations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableE2MPermutations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


