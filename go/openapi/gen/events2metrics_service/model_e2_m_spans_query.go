/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the E2MSpansQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &E2MSpansQuery{}

// E2MSpansQuery This data structure represents an Event to Metrics (E2M) object.
type E2MSpansQuery struct {
	CreateTime *string `json:"createTime,omitempty"`
	Description *string `json:"description,omitempty"`
	Id *string `json:"id,omitempty" validate:"regexp=^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"`
	IsInternal *bool `json:"isInternal,omitempty"`
	MetricFields []V2MetricField `json:"metricFields,omitempty"`
	MetricLabels []MetricLabel `json:"metricLabels,omitempty"`
	Name string `json:"name"`
	Permutations *E2MPermutations `json:"permutations,omitempty"`
	SpansQuery *V2SpansQuery `json:"spansQuery,omitempty"`
	Type E2MType `json:"type"`
	UpdateTime *string `json:"updateTime,omitempty"`
}

type _E2MSpansQuery E2MSpansQuery

// NewE2MSpansQuery instantiates a new E2MSpansQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewE2MSpansQuery(name string, type_ E2MType) *E2MSpansQuery {
	this := E2MSpansQuery{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewE2MSpansQueryWithDefaults instantiates a new E2MSpansQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewE2MSpansQueryWithDefaults() *E2MSpansQuery {
	this := E2MSpansQuery{}
	return &this
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *E2MSpansQuery) GetCreateTime() string {
	if o == nil || IsNil(o.CreateTime) {
		var ret string
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *E2MSpansQuery) GetCreateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreateTime) {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *E2MSpansQuery) HasCreateTime() bool {
	if o != nil && !IsNil(o.CreateTime) {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given string and assigns it to the CreateTime field.
func (o *E2MSpansQuery) SetCreateTime(v string) {
	o.CreateTime = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *E2MSpansQuery) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *E2MSpansQuery) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *E2MSpansQuery) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *E2MSpansQuery) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *E2MSpansQuery) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *E2MSpansQuery) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *E2MSpansQuery) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *E2MSpansQuery) SetId(v string) {
	o.Id = &v
}

// GetIsInternal returns the IsInternal field value if set, zero value otherwise.
func (o *E2MSpansQuery) GetIsInternal() bool {
	if o == nil || IsNil(o.IsInternal) {
		var ret bool
		return ret
	}
	return *o.IsInternal
}

// GetIsInternalOk returns a tuple with the IsInternal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *E2MSpansQuery) GetIsInternalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInternal) {
		return nil, false
	}
	return o.IsInternal, true
}

// HasIsInternal returns a boolean if a field has been set.
func (o *E2MSpansQuery) HasIsInternal() bool {
	if o != nil && !IsNil(o.IsInternal) {
		return true
	}

	return false
}

// SetIsInternal gets a reference to the given bool and assigns it to the IsInternal field.
func (o *E2MSpansQuery) SetIsInternal(v bool) {
	o.IsInternal = &v
}

// GetMetricFields returns the MetricFields field value if set, zero value otherwise.
func (o *E2MSpansQuery) GetMetricFields() []V2MetricField {
	if o == nil || IsNil(o.MetricFields) {
		var ret []V2MetricField
		return ret
	}
	return o.MetricFields
}

// GetMetricFieldsOk returns a tuple with the MetricFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *E2MSpansQuery) GetMetricFieldsOk() ([]V2MetricField, bool) {
	if o == nil || IsNil(o.MetricFields) {
		return nil, false
	}
	return o.MetricFields, true
}

// HasMetricFields returns a boolean if a field has been set.
func (o *E2MSpansQuery) HasMetricFields() bool {
	if o != nil && !IsNil(o.MetricFields) {
		return true
	}

	return false
}

// SetMetricFields gets a reference to the given []V2MetricField and assigns it to the MetricFields field.
func (o *E2MSpansQuery) SetMetricFields(v []V2MetricField) {
	o.MetricFields = v
}

// GetMetricLabels returns the MetricLabels field value if set, zero value otherwise.
func (o *E2MSpansQuery) GetMetricLabels() []MetricLabel {
	if o == nil || IsNil(o.MetricLabels) {
		var ret []MetricLabel
		return ret
	}
	return o.MetricLabels
}

// GetMetricLabelsOk returns a tuple with the MetricLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *E2MSpansQuery) GetMetricLabelsOk() ([]MetricLabel, bool) {
	if o == nil || IsNil(o.MetricLabels) {
		return nil, false
	}
	return o.MetricLabels, true
}

// HasMetricLabels returns a boolean if a field has been set.
func (o *E2MSpansQuery) HasMetricLabels() bool {
	if o != nil && !IsNil(o.MetricLabels) {
		return true
	}

	return false
}

// SetMetricLabels gets a reference to the given []MetricLabel and assigns it to the MetricLabels field.
func (o *E2MSpansQuery) SetMetricLabels(v []MetricLabel) {
	o.MetricLabels = v
}

// GetName returns the Name field value
func (o *E2MSpansQuery) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *E2MSpansQuery) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *E2MSpansQuery) SetName(v string) {
	o.Name = v
}

// GetPermutations returns the Permutations field value if set, zero value otherwise.
func (o *E2MSpansQuery) GetPermutations() E2MPermutations {
	if o == nil || IsNil(o.Permutations) {
		var ret E2MPermutations
		return ret
	}
	return *o.Permutations
}

// GetPermutationsOk returns a tuple with the Permutations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *E2MSpansQuery) GetPermutationsOk() (*E2MPermutations, bool) {
	if o == nil || IsNil(o.Permutations) {
		return nil, false
	}
	return o.Permutations, true
}

// HasPermutations returns a boolean if a field has been set.
func (o *E2MSpansQuery) HasPermutations() bool {
	if o != nil && !IsNil(o.Permutations) {
		return true
	}

	return false
}

// SetPermutations gets a reference to the given E2MPermutations and assigns it to the Permutations field.
func (o *E2MSpansQuery) SetPermutations(v E2MPermutations) {
	o.Permutations = &v
}

// GetSpansQuery returns the SpansQuery field value if set, zero value otherwise.
func (o *E2MSpansQuery) GetSpansQuery() V2SpansQuery {
	if o == nil || IsNil(o.SpansQuery) {
		var ret V2SpansQuery
		return ret
	}
	return *o.SpansQuery
}

// GetSpansQueryOk returns a tuple with the SpansQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *E2MSpansQuery) GetSpansQueryOk() (*V2SpansQuery, bool) {
	if o == nil || IsNil(o.SpansQuery) {
		return nil, false
	}
	return o.SpansQuery, true
}

// HasSpansQuery returns a boolean if a field has been set.
func (o *E2MSpansQuery) HasSpansQuery() bool {
	if o != nil && !IsNil(o.SpansQuery) {
		return true
	}

	return false
}

// SetSpansQuery gets a reference to the given V2SpansQuery and assigns it to the SpansQuery field.
func (o *E2MSpansQuery) SetSpansQuery(v V2SpansQuery) {
	o.SpansQuery = &v
}

// GetType returns the Type field value
func (o *E2MSpansQuery) GetType() E2MType {
	if o == nil {
		var ret E2MType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *E2MSpansQuery) GetTypeOk() (*E2MType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *E2MSpansQuery) SetType(v E2MType) {
	o.Type = v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *E2MSpansQuery) GetUpdateTime() string {
	if o == nil || IsNil(o.UpdateTime) {
		var ret string
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *E2MSpansQuery) GetUpdateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *E2MSpansQuery) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given string and assigns it to the UpdateTime field.
func (o *E2MSpansQuery) SetUpdateTime(v string) {
	o.UpdateTime = &v
}

func (o E2MSpansQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o E2MSpansQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreateTime) {
		toSerialize["createTime"] = o.CreateTime
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsInternal) {
		toSerialize["isInternal"] = o.IsInternal
	}
	if !IsNil(o.MetricFields) {
		toSerialize["metricFields"] = o.MetricFields
	}
	if !IsNil(o.MetricLabels) {
		toSerialize["metricLabels"] = o.MetricLabels
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Permutations) {
		toSerialize["permutations"] = o.Permutations
	}
	if !IsNil(o.SpansQuery) {
		toSerialize["spansQuery"] = o.SpansQuery
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.UpdateTime) {
		toSerialize["updateTime"] = o.UpdateTime
	}
	return toSerialize, nil
}

func (o *E2MSpansQuery) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varE2MSpansQuery := _E2MSpansQuery{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varE2MSpansQuery)

	if err != nil {
		return err
	}

	*o = E2MSpansQuery(varE2MSpansQuery)

	return err
}

type NullableE2MSpansQuery struct {
	value *E2MSpansQuery
	isSet bool
}

func (v NullableE2MSpansQuery) Get() *E2MSpansQuery {
	return v.value
}

func (v *NullableE2MSpansQuery) Set(val *E2MSpansQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableE2MSpansQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableE2MSpansQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableE2MSpansQuery(val *E2MSpansQuery) *NullableE2MSpansQuery {
	return &NullableE2MSpansQuery{value: val, isSet: true}
}

func (v NullableE2MSpansQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableE2MSpansQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


