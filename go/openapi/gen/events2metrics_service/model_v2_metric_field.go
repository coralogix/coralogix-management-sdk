/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V2MetricField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V2MetricField{}

// V2MetricField This data structure represents a metric field
type V2MetricField struct {
	Aggregations []V2Aggregation `json:"aggregations"`
	SourceField string `json:"sourceField"`
	TargetBaseMetricName string `json:"targetBaseMetricName" validate:"regexp=^[\\\\w\\/-]+$"`
}

type _V2MetricField V2MetricField

// NewV2MetricField instantiates a new V2MetricField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2MetricField(aggregations []V2Aggregation, sourceField string, targetBaseMetricName string) *V2MetricField {
	this := V2MetricField{}
	this.Aggregations = aggregations
	this.SourceField = sourceField
	this.TargetBaseMetricName = targetBaseMetricName
	return &this
}

// NewV2MetricFieldWithDefaults instantiates a new V2MetricField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2MetricFieldWithDefaults() *V2MetricField {
	this := V2MetricField{}
	return &this
}

// GetAggregations returns the Aggregations field value
func (o *V2MetricField) GetAggregations() []V2Aggregation {
	if o == nil {
		var ret []V2Aggregation
		return ret
	}

	return o.Aggregations
}

// GetAggregationsOk returns a tuple with the Aggregations field value
// and a boolean to check if the value has been set.
func (o *V2MetricField) GetAggregationsOk() ([]V2Aggregation, bool) {
	if o == nil {
		return nil, false
	}
	return o.Aggregations, true
}

// SetAggregations sets field value
func (o *V2MetricField) SetAggregations(v []V2Aggregation) {
	o.Aggregations = v
}

// GetSourceField returns the SourceField field value
func (o *V2MetricField) GetSourceField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceField
}

// GetSourceFieldOk returns a tuple with the SourceField field value
// and a boolean to check if the value has been set.
func (o *V2MetricField) GetSourceFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceField, true
}

// SetSourceField sets field value
func (o *V2MetricField) SetSourceField(v string) {
	o.SourceField = v
}

// GetTargetBaseMetricName returns the TargetBaseMetricName field value
func (o *V2MetricField) GetTargetBaseMetricName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetBaseMetricName
}

// GetTargetBaseMetricNameOk returns a tuple with the TargetBaseMetricName field value
// and a boolean to check if the value has been set.
func (o *V2MetricField) GetTargetBaseMetricNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetBaseMetricName, true
}

// SetTargetBaseMetricName sets field value
func (o *V2MetricField) SetTargetBaseMetricName(v string) {
	o.TargetBaseMetricName = v
}

func (o V2MetricField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V2MetricField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["aggregations"] = o.Aggregations
	toSerialize["sourceField"] = o.SourceField
	toSerialize["targetBaseMetricName"] = o.TargetBaseMetricName
	return toSerialize, nil
}

func (o *V2MetricField) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aggregations",
		"sourceField",
		"targetBaseMetricName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV2MetricField := _V2MetricField{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV2MetricField)

	if err != nil {
		return err
	}

	*o = V2MetricField(varV2MetricField)

	return err
}

type NullableV2MetricField struct {
	value *V2MetricField
	isSet bool
}

func (v NullableV2MetricField) Get() *V2MetricField {
	return v.value
}

func (v *NullableV2MetricField) Set(val *V2MetricField) {
	v.value = val
	v.isSet = true
}

func (v NullableV2MetricField) IsSet() bool {
	return v.isSet
}

func (v *NullableV2MetricField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2MetricField(val *V2MetricField) *NullableV2MetricField {
	return &NullableV2MetricField{value: val, isSet: true}
}

func (v NullableV2MetricField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2MetricField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


