/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// E2MExecutionRequest - struct for E2MExecutionRequest
type E2MExecutionRequest struct {
	E2MExecutionRequestOneOf *E2MExecutionRequestOneOf
	E2MExecutionRequestOneOf1 *E2MExecutionRequestOneOf1
	E2MExecutionRequestOneOf2 *E2MExecutionRequestOneOf2
}

// E2MExecutionRequestOneOfAsE2MExecutionRequest is a convenience function that returns E2MExecutionRequestOneOf wrapped in E2MExecutionRequest
func E2MExecutionRequestOneOfAsE2MExecutionRequest(v *E2MExecutionRequestOneOf) E2MExecutionRequest {
	return E2MExecutionRequest{
		E2MExecutionRequestOneOf: v,
	}
}

// E2MExecutionRequestOneOf1AsE2MExecutionRequest is a convenience function that returns E2MExecutionRequestOneOf1 wrapped in E2MExecutionRequest
func E2MExecutionRequestOneOf1AsE2MExecutionRequest(v *E2MExecutionRequestOneOf1) E2MExecutionRequest {
	return E2MExecutionRequest{
		E2MExecutionRequestOneOf1: v,
	}
}

// E2MExecutionRequestOneOf2AsE2MExecutionRequest is a convenience function that returns E2MExecutionRequestOneOf2 wrapped in E2MExecutionRequest
func E2MExecutionRequestOneOf2AsE2MExecutionRequest(v *E2MExecutionRequestOneOf2) E2MExecutionRequest {
	return E2MExecutionRequest{
		E2MExecutionRequestOneOf2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *E2MExecutionRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into E2MExecutionRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.E2MExecutionRequestOneOf)
	if err == nil {
		jsonE2MExecutionRequestOneOf, _ := json.Marshal(dst.E2MExecutionRequestOneOf)
		if string(jsonE2MExecutionRequestOneOf) == "{}" { // empty struct
			dst.E2MExecutionRequestOneOf = nil
		} else {
			if err = validator.Validate(dst.E2MExecutionRequestOneOf); err != nil {
				dst.E2MExecutionRequestOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.E2MExecutionRequestOneOf = nil
	}

	// try to unmarshal data into E2MExecutionRequestOneOf1
	err = newStrictDecoder(data).Decode(&dst.E2MExecutionRequestOneOf1)
	if err == nil {
		jsonE2MExecutionRequestOneOf1, _ := json.Marshal(dst.E2MExecutionRequestOneOf1)
		if string(jsonE2MExecutionRequestOneOf1) == "{}" { // empty struct
			dst.E2MExecutionRequestOneOf1 = nil
		} else {
			if err = validator.Validate(dst.E2MExecutionRequestOneOf1); err != nil {
				dst.E2MExecutionRequestOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.E2MExecutionRequestOneOf1 = nil
	}

	// try to unmarshal data into E2MExecutionRequestOneOf2
	err = newStrictDecoder(data).Decode(&dst.E2MExecutionRequestOneOf2)
	if err == nil {
		jsonE2MExecutionRequestOneOf2, _ := json.Marshal(dst.E2MExecutionRequestOneOf2)
		if string(jsonE2MExecutionRequestOneOf2) == "{}" { // empty struct
			dst.E2MExecutionRequestOneOf2 = nil
		} else {
			if err = validator.Validate(dst.E2MExecutionRequestOneOf2); err != nil {
				dst.E2MExecutionRequestOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.E2MExecutionRequestOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.E2MExecutionRequestOneOf = nil
		dst.E2MExecutionRequestOneOf1 = nil
		dst.E2MExecutionRequestOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(E2MExecutionRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(E2MExecutionRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src E2MExecutionRequest) MarshalJSON() ([]byte, error) {
	if src.E2MExecutionRequestOneOf != nil {
		return json.Marshal(&src.E2MExecutionRequestOneOf)
	}

	if src.E2MExecutionRequestOneOf1 != nil {
		return json.Marshal(&src.E2MExecutionRequestOneOf1)
	}

	if src.E2MExecutionRequestOneOf2 != nil {
		return json.Marshal(&src.E2MExecutionRequestOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *E2MExecutionRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.E2MExecutionRequestOneOf != nil {
		return obj.E2MExecutionRequestOneOf
	}

	if obj.E2MExecutionRequestOneOf1 != nil {
		return obj.E2MExecutionRequestOneOf1
	}

	if obj.E2MExecutionRequestOneOf2 != nil {
		return obj.E2MExecutionRequestOneOf2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj E2MExecutionRequest) GetActualInstanceValue() (interface{}) {
	if obj.E2MExecutionRequestOneOf != nil {
		return *obj.E2MExecutionRequestOneOf
	}

	if obj.E2MExecutionRequestOneOf1 != nil {
		return *obj.E2MExecutionRequestOneOf1
	}

	if obj.E2MExecutionRequestOneOf2 != nil {
		return *obj.E2MExecutionRequestOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableE2MExecutionRequest struct {
	value *E2MExecutionRequest
	isSet bool
}

func (v NullableE2MExecutionRequest) Get() *E2MExecutionRequest {
	return v.value
}

func (v *NullableE2MExecutionRequest) Set(val *E2MExecutionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableE2MExecutionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableE2MExecutionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableE2MExecutionRequest(val *E2MExecutionRequest) *NullableE2MExecutionRequest {
	return &NullableE2MExecutionRequest{value: val, isSet: true}
}

func (v NullableE2MExecutionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableE2MExecutionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


