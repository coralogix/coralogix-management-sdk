/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// E2M - struct for E2M
type E2M struct {
	E2MLogsQuery *E2MLogsQuery
	E2MSpansQuery *E2MSpansQuery
}

// E2MLogsQueryAsE2M is a convenience function that returns E2MLogsQuery wrapped in E2M
func E2MLogsQueryAsE2M(v *E2MLogsQuery) E2M {
	return E2M{
		E2MLogsQuery: v,
	}
}

// E2MSpansQueryAsE2M is a convenience function that returns E2MSpansQuery wrapped in E2M
func E2MSpansQueryAsE2M(v *E2MSpansQuery) E2M {
	return E2M{
		E2MSpansQuery: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *E2M) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into E2MLogsQuery
	err = newStrictDecoder(data).Decode(&dst.E2MLogsQuery)
	if err == nil {
		jsonE2MLogsQuery, _ := json.Marshal(dst.E2MLogsQuery)
		if string(jsonE2MLogsQuery) == "{}" { // empty struct
			dst.E2MLogsQuery = nil
		} else {
			if err = validator.Validate(dst.E2MLogsQuery); err != nil {
				dst.E2MLogsQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.E2MLogsQuery = nil
	}

	// try to unmarshal data into E2MSpansQuery
	err = newStrictDecoder(data).Decode(&dst.E2MSpansQuery)
	if err == nil {
		jsonE2MSpansQuery, _ := json.Marshal(dst.E2MSpansQuery)
		if string(jsonE2MSpansQuery) == "{}" { // empty struct
			dst.E2MSpansQuery = nil
		} else {
			if err = validator.Validate(dst.E2MSpansQuery); err != nil {
				dst.E2MSpansQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.E2MSpansQuery = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.E2MLogsQuery = nil
		dst.E2MSpansQuery = nil

		return fmt.Errorf("data matches more than one schema in oneOf(E2M)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(E2M)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src E2M) MarshalJSON() ([]byte, error) {
	if src.E2MLogsQuery != nil {
		return json.Marshal(&src.E2MLogsQuery)
	}

	if src.E2MSpansQuery != nil {
		return json.Marshal(&src.E2MSpansQuery)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *E2M) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.E2MLogsQuery != nil {
		return obj.E2MLogsQuery
	}

	if obj.E2MSpansQuery != nil {
		return obj.E2MSpansQuery
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj E2M) GetActualInstanceValue() (interface{}) {
	if obj.E2MLogsQuery != nil {
		return *obj.E2MLogsQuery
	}

	if obj.E2MSpansQuery != nil {
		return *obj.E2MSpansQuery
	}

	// all schemas are nil
	return nil
}

type NullableE2M struct {
	value *E2M
	isSet bool
}

func (v NullableE2M) Get() *E2M {
	return v.value
}

func (v *NullableE2M) Set(val *E2M) {
	v.value = val
	v.isSet = true
}

func (v NullableE2M) IsSet() bool {
	return v.isSet
}

func (v *NullableE2M) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableE2M(val *E2M) *NullableE2M {
	return &NullableE2M{value: val, isSet: true}
}

func (v NullableE2M) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableE2M) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


