/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// V2Aggregation - struct for V2Aggregation
type V2Aggregation struct {
	Aggregation *Aggregation
	Aggregation1 *Aggregation1
}

// AggregationAsV2Aggregation is a convenience function that returns Aggregation wrapped in V2Aggregation
func AggregationAsV2Aggregation(v *Aggregation) V2Aggregation {
	return V2Aggregation{
		Aggregation: v,
	}
}

// Aggregation1AsV2Aggregation is a convenience function that returns Aggregation1 wrapped in V2Aggregation
func Aggregation1AsV2Aggregation(v *Aggregation1) V2Aggregation {
	return V2Aggregation{
		Aggregation1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *V2Aggregation) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Aggregation
	err = newStrictDecoder(data).Decode(&dst.Aggregation)
	if err == nil {
		jsonAggregation, _ := json.Marshal(dst.Aggregation)
		if string(jsonAggregation) == "{}" { // empty struct
			dst.Aggregation = nil
		} else {
			if err = validator.Validate(dst.Aggregation); err != nil {
				dst.Aggregation = nil
			} else {
				match++
			}
		}
	} else {
		dst.Aggregation = nil
	}

	// try to unmarshal data into Aggregation1
	err = newStrictDecoder(data).Decode(&dst.Aggregation1)
	if err == nil {
		jsonAggregation1, _ := json.Marshal(dst.Aggregation1)
		if string(jsonAggregation1) == "{}" { // empty struct
			dst.Aggregation1 = nil
		} else {
			if err = validator.Validate(dst.Aggregation1); err != nil {
				dst.Aggregation1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Aggregation1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Aggregation = nil
		dst.Aggregation1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(V2Aggregation)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(V2Aggregation)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src V2Aggregation) MarshalJSON() ([]byte, error) {
	if src.Aggregation != nil {
		return json.Marshal(&src.Aggregation)
	}

	if src.Aggregation1 != nil {
		return json.Marshal(&src.Aggregation1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *V2Aggregation) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Aggregation != nil {
		return obj.Aggregation
	}

	if obj.Aggregation1 != nil {
		return obj.Aggregation1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj V2Aggregation) GetActualInstanceValue() (interface{}) {
	if obj.Aggregation != nil {
		return *obj.Aggregation
	}

	if obj.Aggregation1 != nil {
		return *obj.Aggregation1
	}

	// all schemas are nil
	return nil
}

type NullableV2Aggregation struct {
	value *V2Aggregation
	isSet bool
}

func (v NullableV2Aggregation) Get() *V2Aggregation {
	return v.value
}

func (v *NullableV2Aggregation) Set(val *V2Aggregation) {
	v.value = val
	v.isSet = true
}

func (v NullableV2Aggregation) IsSet() bool {
	return v.isSet
}

func (v *NullableV2Aggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2Aggregation(val *V2Aggregation) *NullableV2Aggregation {
	return &NullableV2Aggregation{value: val, isSet: true}
}

func (v NullableV2Aggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2Aggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


