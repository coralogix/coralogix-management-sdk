/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListE2MResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListE2MResponse{}

// ListE2MResponse This is the response obtained when listing all event to metric definitions
type ListE2MResponse struct {
	E2m []E2M `json:"e2m"`
}

type _ListE2MResponse ListE2MResponse

// NewListE2MResponse instantiates a new ListE2MResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListE2MResponse(e2m []E2M) *ListE2MResponse {
	this := ListE2MResponse{}
	this.E2m = e2m
	return &this
}

// NewListE2MResponseWithDefaults instantiates a new ListE2MResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListE2MResponseWithDefaults() *ListE2MResponse {
	this := ListE2MResponse{}
	return &this
}

// GetE2m returns the E2m field value
func (o *ListE2MResponse) GetE2m() []E2M {
	if o == nil {
		var ret []E2M
		return ret
	}

	return o.E2m
}

// GetE2mOk returns a tuple with the E2m field value
// and a boolean to check if the value has been set.
func (o *ListE2MResponse) GetE2mOk() ([]E2M, bool) {
	if o == nil {
		return nil, false
	}
	return o.E2m, true
}

// SetE2m sets field value
func (o *ListE2MResponse) SetE2m(v []E2M) {
	o.E2m = v
}

func (o ListE2MResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListE2MResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["e2m"] = o.E2m
	return toSerialize, nil
}

func (o *ListE2MResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"e2m",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListE2MResponse := _ListE2MResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListE2MResponse)

	if err != nil {
		return err
	}

	*o = ListE2MResponse(varListE2MResponse)

	return err
}

type NullableListE2MResponse struct {
	value *ListE2MResponse
	isSet bool
}

func (v NullableListE2MResponse) Get() *ListE2MResponse {
	return v.value
}

func (v *NullableListE2MResponse) Set(val *ListE2MResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListE2MResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListE2MResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListE2MResponse(val *ListE2MResponse) *NullableListE2MResponse {
	return &NullableListE2MResponse{value: val, isSet: true}
}

func (v NullableListE2MResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListE2MResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


