/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events2metrics_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MetricLabel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricLabel{}

// MetricLabel This data structure represents a metric label
type MetricLabel struct {
	SourceField string `json:"sourceField"`
	TargetLabel string `json:"targetLabel" validate:"regexp=^[\\\\w\\/-]+$"`
}

type _MetricLabel MetricLabel

// NewMetricLabel instantiates a new MetricLabel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricLabel(sourceField string, targetLabel string) *MetricLabel {
	this := MetricLabel{}
	this.SourceField = sourceField
	this.TargetLabel = targetLabel
	return &this
}

// NewMetricLabelWithDefaults instantiates a new MetricLabel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricLabelWithDefaults() *MetricLabel {
	this := MetricLabel{}
	return &this
}

// GetSourceField returns the SourceField field value
func (o *MetricLabel) GetSourceField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceField
}

// GetSourceFieldOk returns a tuple with the SourceField field value
// and a boolean to check if the value has been set.
func (o *MetricLabel) GetSourceFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceField, true
}

// SetSourceField sets field value
func (o *MetricLabel) SetSourceField(v string) {
	o.SourceField = v
}

// GetTargetLabel returns the TargetLabel field value
func (o *MetricLabel) GetTargetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetLabel
}

// GetTargetLabelOk returns a tuple with the TargetLabel field value
// and a boolean to check if the value has been set.
func (o *MetricLabel) GetTargetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetLabel, true
}

// SetTargetLabel sets field value
func (o *MetricLabel) SetTargetLabel(v string) {
	o.TargetLabel = v
}

func (o MetricLabel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricLabel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sourceField"] = o.SourceField
	toSerialize["targetLabel"] = o.TargetLabel
	return toSerialize, nil
}

func (o *MetricLabel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sourceField",
		"targetLabel",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetricLabel := _MetricLabel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetricLabel)

	if err != nil {
		return err
	}

	*o = MetricLabel(varMetricLabel)

	return err
}

type NullableMetricLabel struct {
	value *MetricLabel
	isSet bool
}

func (v NullableMetricLabel) Get() *MetricLabel {
	return v.value
}

func (v *NullableMetricLabel) Set(val *MetricLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricLabel(val *MetricLabel) *NullableMetricLabel {
	return &NullableMetricLabel{value: val, isSet: true}
}

func (v NullableMetricLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


