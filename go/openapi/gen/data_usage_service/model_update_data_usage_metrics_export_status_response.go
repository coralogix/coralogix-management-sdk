/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_usage_service

import (
	"encoding/json"
)

// checks if the UpdateDataUsageMetricsExportStatusResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDataUsageMetricsExportStatusResponse{}

// UpdateDataUsageMetricsExportStatusResponse This data structure is used to return data usage metrics export status.
type UpdateDataUsageMetricsExportStatusResponse struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// NewUpdateDataUsageMetricsExportStatusResponse instantiates a new UpdateDataUsageMetricsExportStatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDataUsageMetricsExportStatusResponse() *UpdateDataUsageMetricsExportStatusResponse {
	this := UpdateDataUsageMetricsExportStatusResponse{}
	return &this
}

// NewUpdateDataUsageMetricsExportStatusResponseWithDefaults instantiates a new UpdateDataUsageMetricsExportStatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDataUsageMetricsExportStatusResponseWithDefaults() *UpdateDataUsageMetricsExportStatusResponse {
	this := UpdateDataUsageMetricsExportStatusResponse{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UpdateDataUsageMetricsExportStatusResponse) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDataUsageMetricsExportStatusResponse) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UpdateDataUsageMetricsExportStatusResponse) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UpdateDataUsageMetricsExportStatusResponse) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o UpdateDataUsageMetricsExportStatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDataUsageMetricsExportStatusResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableUpdateDataUsageMetricsExportStatusResponse struct {
	value *UpdateDataUsageMetricsExportStatusResponse
	isSet bool
}

func (v NullableUpdateDataUsageMetricsExportStatusResponse) Get() *UpdateDataUsageMetricsExportStatusResponse {
	return v.value
}

func (v *NullableUpdateDataUsageMetricsExportStatusResponse) Set(val *UpdateDataUsageMetricsExportStatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDataUsageMetricsExportStatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDataUsageMetricsExportStatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDataUsageMetricsExportStatusResponse(val *UpdateDataUsageMetricsExportStatusResponse) *NullableUpdateDataUsageMetricsExportStatusResponse {
	return &NullableUpdateDataUsageMetricsExportStatusResponse{value: val, isSet: true}
}

func (v NullableUpdateDataUsageMetricsExportStatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDataUsageMetricsExportStatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


