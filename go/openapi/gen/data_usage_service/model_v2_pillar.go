/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_usage_service

import (
	"encoding/json"
	"fmt"
)

// V2Pillar the model 'V2Pillar'
type V2Pillar string

// List of v2.Pillar
const (
	V2PILLAR_PILLAR_UNSPECIFIED V2Pillar = "PILLAR_UNSPECIFIED"
	V2PILLAR_PILLAR_METRICS V2Pillar = "PILLAR_METRICS"
	V2PILLAR_PILLAR_LOGS V2Pillar = "PILLAR_LOGS"
	V2PILLAR_PILLAR_SPANS V2Pillar = "PILLAR_SPANS"
	V2PILLAR_PILLAR_BINARY V2Pillar = "PILLAR_BINARY"
	V2PILLAR_PILLAR_PROFILES V2Pillar = "PILLAR_PROFILES"
)

// All allowed values of V2Pillar enum
var AllowedV2PillarEnumValues = []V2Pillar{
	"PILLAR_UNSPECIFIED",
	"PILLAR_METRICS",
	"PILLAR_LOGS",
	"PILLAR_SPANS",
	"PILLAR_BINARY",
	"PILLAR_PROFILES",
}

func (v *V2Pillar) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V2Pillar(value)
	for _, existing := range AllowedV2PillarEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V2Pillar", value)
}

// NewV2PillarFromValue returns a pointer to a valid V2Pillar
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV2PillarFromValue(v string) (*V2Pillar, error) {
	ev := V2Pillar(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V2Pillar: valid values are %v", v, AllowedV2PillarEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V2Pillar) IsValid() bool {
	for _, existing := range AllowedV2PillarEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v2.Pillar value
func (v V2Pillar) Ptr() *V2Pillar {
	return &v
}

type NullableV2Pillar struct {
	value *V2Pillar
	isSet bool
}

func (v NullableV2Pillar) Get() *V2Pillar {
	return v.value
}

func (v *NullableV2Pillar) Set(val *V2Pillar) {
	v.value = val
	v.isSet = true
}

func (v NullableV2Pillar) IsSet() bool {
	return v.isSet
}

func (v *NullableV2Pillar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2Pillar(val *V2Pillar) *NullableV2Pillar {
	return &NullableV2Pillar{value: val, isSet: true}
}

func (v NullableV2Pillar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2Pillar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

