/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_usage_service

import (
	"encoding/json"
	"fmt"
)

// DatausageV2Severity the model 'DatausageV2Severity'
type DatausageV2Severity string

// List of datausage.v2.Severity
const (
	DATAUSAGEV2SEVERITY_SEVERITY_UNSPECIFIED DatausageV2Severity = "SEVERITY_UNSPECIFIED"
	DATAUSAGEV2SEVERITY_SEVERITY_DEBUG DatausageV2Severity = "SEVERITY_DEBUG"
	DATAUSAGEV2SEVERITY_SEVERITY_VERBOSE DatausageV2Severity = "SEVERITY_VERBOSE"
	DATAUSAGEV2SEVERITY_SEVERITY_INFO DatausageV2Severity = "SEVERITY_INFO"
	DATAUSAGEV2SEVERITY_SEVERITY_WARNING DatausageV2Severity = "SEVERITY_WARNING"
	DATAUSAGEV2SEVERITY_SEVERITY_ERROR DatausageV2Severity = "SEVERITY_ERROR"
	DATAUSAGEV2SEVERITY_SEVERITY_CRITICAL DatausageV2Severity = "SEVERITY_CRITICAL"
)

// All allowed values of DatausageV2Severity enum
var AllowedDatausageV2SeverityEnumValues = []DatausageV2Severity{
	"SEVERITY_UNSPECIFIED",
	"SEVERITY_DEBUG",
	"SEVERITY_VERBOSE",
	"SEVERITY_INFO",
	"SEVERITY_WARNING",
	"SEVERITY_ERROR",
	"SEVERITY_CRITICAL",
}

func (v *DatausageV2Severity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DatausageV2Severity(value)
	for _, existing := range AllowedDatausageV2SeverityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DatausageV2Severity", value)
}

// NewDatausageV2SeverityFromValue returns a pointer to a valid DatausageV2Severity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDatausageV2SeverityFromValue(v string) (*DatausageV2Severity, error) {
	ev := DatausageV2Severity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DatausageV2Severity: valid values are %v", v, AllowedDatausageV2SeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DatausageV2Severity) IsValid() bool {
	for _, existing := range AllowedDatausageV2SeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to datausage.v2.Severity value
func (v DatausageV2Severity) Ptr() *DatausageV2Severity {
	return &v
}

type NullableDatausageV2Severity struct {
	value *DatausageV2Severity
	isSet bool
}

func (v NullableDatausageV2Severity) Get() *DatausageV2Severity {
	return v.value
}

func (v *NullableDatausageV2Severity) Set(val *DatausageV2Severity) {
	v.value = val
	v.isSet = true
}

func (v NullableDatausageV2Severity) IsSet() bool {
	return v.isSet
}

func (v *NullableDatausageV2Severity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatausageV2Severity(val *DatausageV2Severity) *NullableDatausageV2Severity {
	return &NullableDatausageV2Severity{value: val, isSet: true}
}

func (v NullableDatausageV2Severity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatausageV2Severity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

