/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_usage_service

import (
	"encoding/json"
	"fmt"
)

// V2TcoTier the model 'V2TcoTier'
type V2TcoTier string

// List of v2.TcoTier
const (
	V2TCOTIER_TCO_TIER_UNSPECIFIED V2TcoTier = "TCO_TIER_UNSPECIFIED"
	V2TCOTIER_TCO_TIER_LOW V2TcoTier = "TCO_TIER_LOW"
	V2TCOTIER_TCO_TIER_MEDIUM V2TcoTier = "TCO_TIER_MEDIUM"
	V2TCOTIER_TCO_TIER_HIGH V2TcoTier = "TCO_TIER_HIGH"
	V2TCOTIER_TCO_TIER_BLOCKED V2TcoTier = "TCO_TIER_BLOCKED"
)

// All allowed values of V2TcoTier enum
var AllowedV2TcoTierEnumValues = []V2TcoTier{
	"TCO_TIER_UNSPECIFIED",
	"TCO_TIER_LOW",
	"TCO_TIER_MEDIUM",
	"TCO_TIER_HIGH",
	"TCO_TIER_BLOCKED",
}

func (v *V2TcoTier) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V2TcoTier(value)
	for _, existing := range AllowedV2TcoTierEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V2TcoTier", value)
}

// NewV2TcoTierFromValue returns a pointer to a valid V2TcoTier
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV2TcoTierFromValue(v string) (*V2TcoTier, error) {
	ev := V2TcoTier(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V2TcoTier: valid values are %v", v, AllowedV2TcoTierEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V2TcoTier) IsValid() bool {
	for _, existing := range AllowedV2TcoTierEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v2.TcoTier value
func (v V2TcoTier) Ptr() *V2TcoTier {
	return &v
}

type NullableV2TcoTier struct {
	value *V2TcoTier
	isSet bool
}

func (v NullableV2TcoTier) Get() *V2TcoTier {
	return v.value
}

func (v *NullableV2TcoTier) Set(val *V2TcoTier) {
	v.value = val
	v.isSet = true
}

func (v NullableV2TcoTier) IsSet() bool {
	return v.isSet
}

func (v *NullableV2TcoTier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2TcoTier(val *V2TcoTier) *NullableV2TcoTier {
	return &NullableV2TcoTier{value: val, isSet: true}
}

func (v NullableV2TcoTier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2TcoTier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

