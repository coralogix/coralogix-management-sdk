openapi: 3.0.0
info:
  title: ""
  version: 1.0.0
servers:
- url: /
paths:
  /dataplans/data-usage/v2:
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: DataUsageService_GetDataUsage
      parameters:
      - explode: true
        in: query
        name: date_range
        required: false
        schema:
          $ref: "#/components/schemas/Date_Range"
        style: form
      - explode: true
        in: query
        name: resolution
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: aggregate
        required: false
        schema:
          items:
            enum:
            - AGGREGATE_BY_UNSPECIFIED
            - AGGREGATE_BY_APPLICATION
            - AGGREGATE_BY_SUBSYSTEM
            - AGGREGATE_BY_PILLAR
            - AGGREGATE_BY_PRIORITY
            - AGGREGATE_BY_POLICY_NAME
            - AGGREGATE_BY_SEVERITY
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: dimension_filters
        required: false
        schema:
          items:
            $ref: "#/components/schemas/DataUsageService_GetDataUsage_dimension_filters_parameter_inner"
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDataUsageResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get Data Usage
      tags:
      - Data Usage Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2?date_range=SOME_OBJECT_VALUE&resolution=SOME_STRING_VALUE&aggregate=SOME_ARRAY_VALUE&dimension_filters=SOME_ARRAY_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2"

          querystring = {"date_range":"SOME_OBJECT_VALUE","resolution":"SOME_STRING_VALUE","aggregate":"SOME_ARRAY_VALUE","dimension_filters":"SOME_ARRAY_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2?date_range=SOME_OBJECT_VALUE&resolution=SOME_STRING_VALUE&aggregate=SOME_ARRAY_VALUE&dimension_filters=SOME_ARRAY_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
  /dataplans/data-usage/v2/daily:evaluation-tokens:
    post:
      description: No description available
      externalDocs:
        url: ""
      operationId: DataUsageService_GetDailyUsageEvaluationTokens
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataUsageService_GetDailyUsageEvaluationTokens_request"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDailyUsageEvaluationTokensResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get Daily Usage Evaluation Tokens
      tags:
      - Data Usage Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/daily:evaluation-tokens';

          let options = {
            method: 'POST',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"range":"RANGE_UNSPECIFIED"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/daily:evaluation-tokens"

          payload = {"range": "RANGE_UNSPECIFIED"}
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/daily:evaluation-tokens \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"range":"RANGE_UNSPECIFIED"}'
  /dataplans/data-usage/v2/daily:processed-gbs:
    post:
      description: No description available
      externalDocs:
        url: ""
      operationId: DataUsageService_GetDailyUsageProcessedGbs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataUsageService_GetDailyUsageEvaluationTokens_request"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDailyUsageProcessedGbsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get Daily Usage Processed GBs
      tags:
      - Data Usage Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/daily:processed-gbs';

          let options = {
            method: 'POST',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"range":"RANGE_UNSPECIFIED"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/daily:processed-gbs"

          payload = {"range": "RANGE_UNSPECIFIED"}
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/daily:processed-gbs \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"range":"RANGE_UNSPECIFIED"}'
  /dataplans/data-usage/v2/daily:units:
    post:
      description: No description available
      externalDocs:
        url: ""
      operationId: DataUsageService_GetDailyUsageUnits
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataUsageService_GetDailyUsageEvaluationTokens_request"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDailyUsageUnitsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get Daily Usage Units
      tags:
      - Data Usage Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/daily:units';

          let options = {
            method: 'POST',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"range":"RANGE_UNSPECIFIED"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/daily:units"

          payload = {"range": "RANGE_UNSPECIFIED"}
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/daily:units \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"range":"RANGE_UNSPECIFIED"}'
  /dataplans/data-usage/v2/export-status:
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: DataUsageService_GetDataUsageMetricsExportStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDataUsageMetricsExportStatusResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get Data Usage Metrics Export Status
      tags:
      - Data Usage Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/export-status';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/export-status"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/export-status \
            --header 'Authorization: Bearer <API_KEY>'
    post:
      description: No description available
      externalDocs:
        url: ""
      operationId: DataUsageService_UpdateDataUsageMetricsExportStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Update_Data_Usage_Metrics_Export_Status_Request"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateDataUsageMetricsExportStatusResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Update Data Usage Metrics Export Status
      tags:
      - Data Usage Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/export-status';

          let options = {
            method: 'POST',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"enabled":true}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/export-status"

          payload = {"enabled": True}
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/export-status \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"enabled":true}'
  /dataplans/data-usage/v2/logs:count:
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: DataUsageService_GetLogsCount
      parameters:
      - explode: true
        in: query
        name: date_range
        required: false
        schema:
          $ref: "#/components/schemas/Date_Range"
        style: form
      - explode: true
        in: query
        name: resolution
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: filters
        required: false
        schema:
          $ref: "#/components/schemas/Scopes_Filter"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLogsCountResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get Logs Count
      tags:
      - Data Usage Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/logs:count?date_range=SOME_OBJECT_VALUE&resolution=SOME_STRING_VALUE&filters=SOME_OBJECT_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/logs:count"

          querystring = {"date_range":"SOME_OBJECT_VALUE","resolution":"SOME_STRING_VALUE","filters":"SOME_OBJECT_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/logs:count?date_range=SOME_OBJECT_VALUE&resolution=SOME_STRING_VALUE&filters=SOME_OBJECT_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
  /dataplans/data-usage/v2/spans:count:
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: DataUsageService_GetSpansCount
      parameters:
      - explode: true
        in: query
        name: date_range
        required: false
        schema:
          $ref: "#/components/schemas/Date_Range"
        style: form
      - explode: true
        in: query
        name: resolution
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: filters
        required: false
        schema:
          $ref: "#/components/schemas/Scopes_Filter"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSpansCountResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get Spans Count
      tags:
      - Data Usage Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/spans:count?date_range=SOME_OBJECT_VALUE&resolution=SOME_STRING_VALUE&filters=SOME_OBJECT_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/spans:count"

          querystring = {"date_range":"SOME_OBJECT_VALUE","resolution":"SOME_STRING_VALUE","filters":"SOME_OBJECT_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/spans:count?date_range=SOME_OBJECT_VALUE&resolution=SOME_STRING_VALUE&filters=SOME_OBJECT_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
components:
  schemas:
    DataUsageEntry:
      description: This data structure represents a data usage entry.
      example:
        sizeGb: 0.8008282
        units: 6.0274563
        dimensions:
        - pillar: PILLAR_UNSPECIFIED
        - pillar: PILLAR_UNSPECIFIED
        timestamp: 2000-01-23T04:56:07.000+00:00
      externalDocs:
        description: Find out more about data usage.
        url: https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
      properties:
        dimensions:
          items:
            $ref: "#/components/schemas/Dimension"
          type: array
        sizeGb:
          format: float
          type: number
        timestamp:
          format: date-time
          type: string
        units:
          format: float
          type: number
      title: Data Usage Entry
      type: object
    DetailedDailyEvaluationTokens:
      example:
        evaluations:
        - evaluationTokens:
            value: 0.8008282
          evaluatorName: evaluatorName
        - evaluationTokens:
            value: 0.8008282
          evaluatorName: evaluatorName
        statsDate: 2000-01-23T04:56:07.000+00:00
        totalTokens:
          value: 0.8008282
      properties:
        evaluations:
          items:
            $ref: "#/components/schemas/Evaluation"
          type: array
        statsDate:
          format: date-time
          type: string
        totalTokens:
          $ref: "#/components/schemas/Token"
      type: object
    DetailedDailyProcessedGbs:
      example:
        blockedMetricsGbs:
          value: 0.8008282
        highMetricsGbs:
          value: 0.8008282
        totalGbs:
          value: 0.8008282
        statsDate: 2000-01-23T04:56:07.000+00:00
        highLogsGbs:
          value: 0.8008282
        highTracingGbs:
          value: 0.8008282
        lowSessionRecordingGbs:
          value: 0.8008282
        lowLogsGbs:
          value: 0.8008282
        cpuProfilesGbs:
          value: 0.8008282
        mediumLogsGbs:
          value: 0.8008282
        blockedGbs:
          value: 0.8008282
        lowTracingGbs:
          value: 0.8008282
        mediumTracingGbs:
          value: 0.8008282
      properties:
        blockedGbs:
          $ref: "#/components/schemas/v2.GB"
        blockedMetricsGbs:
          $ref: "#/components/schemas/v2.GB"
        cpuProfilesGbs:
          $ref: "#/components/schemas/v2.GB"
        highLogsGbs:
          $ref: "#/components/schemas/v2.GB"
        highMetricsGbs:
          $ref: "#/components/schemas/v2.GB"
        highTracingGbs:
          $ref: "#/components/schemas/v2.GB"
        lowLogsGbs:
          $ref: "#/components/schemas/v2.GB"
        lowSessionRecordingGbs:
          $ref: "#/components/schemas/v2.GB"
        lowTracingGbs:
          $ref: "#/components/schemas/v2.GB"
        mediumLogsGbs:
          $ref: "#/components/schemas/v2.GB"
        mediumTracingGbs:
          $ref: "#/components/schemas/v2.GB"
        statsDate:
          format: date-time
          type: string
        totalGbs:
          $ref: "#/components/schemas/v2.GB"
      type: object
    DetailedDailyUnits:
      example:
        statsDate: 2000-01-23T04:56:07.000+00:00
        blockedUnits:
          value: 0.8008282
        highMetricsUnits:
          value: 0.8008282
        totalUnits:
          value: 0.8008282
        evaluationUnits:
          value: 0.8008282
        highLogsUnits:
          value: 0.8008282
        lowTracingUnits:
          value: 0.8008282
        mediumLogsUnits:
          value: 0.8008282
        blockedMetricsUnits:
          value: 0.8008282
        cpuProfilesUnits:
          value: 0.8008282
        highTracingUnits:
          value: 0.8008282
        lowLogsUnits:
          value: 0.8008282
        mediumTracingUnits:
          value: 0.8008282
        lowSessionRecordingUnits:
          value: 0.8008282
      properties:
        blockedMetricsUnits:
          $ref: "#/components/schemas/v2.Unit"
        blockedUnits:
          $ref: "#/components/schemas/v2.Unit"
        cpuProfilesUnits:
          $ref: "#/components/schemas/v2.Unit"
        evaluationUnits:
          $ref: "#/components/schemas/v2.Unit"
        highLogsUnits:
          $ref: "#/components/schemas/v2.Unit"
        highMetricsUnits:
          $ref: "#/components/schemas/v2.Unit"
        highTracingUnits:
          $ref: "#/components/schemas/v2.Unit"
        lowLogsUnits:
          $ref: "#/components/schemas/v2.Unit"
        lowSessionRecordingUnits:
          $ref: "#/components/schemas/v2.Unit"
        lowTracingUnits:
          $ref: "#/components/schemas/v2.Unit"
        mediumLogsUnits:
          $ref: "#/components/schemas/v2.Unit"
        mediumTracingUnits:
          $ref: "#/components/schemas/v2.Unit"
        statsDate:
          format: date-time
          type: string
        totalUnits:
          $ref: "#/components/schemas/v2.Unit"
      type: object
    Dimension:
      oneOf:
      - $ref: "#/components/schemas/Dimension_oneOf"
      - $ref: "#/components/schemas/Dimension_oneOf_1"
      - $ref: "#/components/schemas/Dimension_oneOf_2"
      - $ref: "#/components/schemas/Dimension_oneOf_3"
      - $ref: "#/components/schemas/Dimension_oneOf_4"
    Evaluation:
      example:
        evaluationTokens:
          value: 0.8008282
        evaluatorName: evaluatorName
      properties:
        evaluationTokens:
          $ref: "#/components/schemas/Token"
        evaluatorName:
          type: string
      type: object
    FieldGroup:
      properties:
        name:
          type: string
        value:
          type: string
      type: object
    FilterPathAndValues:
      oneOf:
      - $ref: "#/components/schemas/FilterPathAndValues_1"
      - $ref: "#/components/schemas/FilterPathAndValues_2"
    Filters:
      description: This data structure represents a filter
      externalDocs:
        url: ""
      properties:
        operator:
          $ref: "#/components/schemas/v3.FilterOperator"
        pathAndValues:
          items:
            $ref: "#/components/schemas/FilterPathAndValues"
          type: array
      required:
      - pathAndValues
      title: Filters
      type: object
    GenericDimension:
      description: This data structure represents a generic dimension.
      externalDocs:
        description: Find out more about data usage.
        url: https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
      properties:
        key:
          example: key
          type: string
        value:
          example: value
          type: string
      title: Generic Dimension
      type: object
    GetDailyUsageEvaluationTokensResponse:
      example:
        tokens:
        - evaluations:
          - evaluationTokens:
              value: 0.8008282
            evaluatorName: evaluatorName
          - evaluationTokens:
              value: 0.8008282
            evaluatorName: evaluatorName
          statsDate: 2000-01-23T04:56:07.000+00:00
          totalTokens:
            value: 0.8008282
        - evaluations:
          - evaluationTokens:
              value: 0.8008282
            evaluatorName: evaluatorName
          - evaluationTokens:
              value: 0.8008282
            evaluatorName: evaluatorName
          statsDate: 2000-01-23T04:56:07.000+00:00
          totalTokens:
            value: 0.8008282
      properties:
        tokens:
          items:
            $ref: "#/components/schemas/DetailedDailyEvaluationTokens"
          type: array
      type: object
    GetDailyUsageProcessedGbsResponse:
      example:
        gbs:
        - blockedMetricsGbs:
            value: 0.8008282
          highMetricsGbs:
            value: 0.8008282
          totalGbs:
            value: 0.8008282
          statsDate: 2000-01-23T04:56:07.000+00:00
          highLogsGbs:
            value: 0.8008282
          highTracingGbs:
            value: 0.8008282
          lowSessionRecordingGbs:
            value: 0.8008282
          lowLogsGbs:
            value: 0.8008282
          cpuProfilesGbs:
            value: 0.8008282
          mediumLogsGbs:
            value: 0.8008282
          blockedGbs:
            value: 0.8008282
          lowTracingGbs:
            value: 0.8008282
          mediumTracingGbs:
            value: 0.8008282
        - blockedMetricsGbs:
            value: 0.8008282
          highMetricsGbs:
            value: 0.8008282
          totalGbs:
            value: 0.8008282
          statsDate: 2000-01-23T04:56:07.000+00:00
          highLogsGbs:
            value: 0.8008282
          highTracingGbs:
            value: 0.8008282
          lowSessionRecordingGbs:
            value: 0.8008282
          lowLogsGbs:
            value: 0.8008282
          cpuProfilesGbs:
            value: 0.8008282
          mediumLogsGbs:
            value: 0.8008282
          blockedGbs:
            value: 0.8008282
          lowTracingGbs:
            value: 0.8008282
          mediumTracingGbs:
            value: 0.8008282
      properties:
        gbs:
          items:
            $ref: "#/components/schemas/DetailedDailyProcessedGbs"
          type: array
      type: object
    GetDailyUsageUnitsResponse:
      example:
        units:
        - statsDate: 2000-01-23T04:56:07.000+00:00
          blockedUnits:
            value: 0.8008282
          highMetricsUnits:
            value: 0.8008282
          totalUnits:
            value: 0.8008282
          evaluationUnits:
            value: 0.8008282
          highLogsUnits:
            value: 0.8008282
          lowTracingUnits:
            value: 0.8008282
          mediumLogsUnits:
            value: 0.8008282
          blockedMetricsUnits:
            value: 0.8008282
          cpuProfilesUnits:
            value: 0.8008282
          highTracingUnits:
            value: 0.8008282
          lowLogsUnits:
            value: 0.8008282
          mediumTracingUnits:
            value: 0.8008282
          lowSessionRecordingUnits:
            value: 0.8008282
        - statsDate: 2000-01-23T04:56:07.000+00:00
          blockedUnits:
            value: 0.8008282
          highMetricsUnits:
            value: 0.8008282
          totalUnits:
            value: 0.8008282
          evaluationUnits:
            value: 0.8008282
          highLogsUnits:
            value: 0.8008282
          lowTracingUnits:
            value: 0.8008282
          mediumLogsUnits:
            value: 0.8008282
          blockedMetricsUnits:
            value: 0.8008282
          cpuProfilesUnits:
            value: 0.8008282
          highTracingUnits:
            value: 0.8008282
          lowLogsUnits:
            value: 0.8008282
          mediumTracingUnits:
            value: 0.8008282
          lowSessionRecordingUnits:
            value: 0.8008282
      properties:
        units:
          items:
            $ref: "#/components/schemas/DetailedDailyUnits"
          type: array
      type: object
    GetDataUsageMetricsExportStatusResponse:
      description: This data structure is used to return data usage metrics export
        status.
      example:
        enabled: true
      externalDocs:
        description: Find out more about data usage.
        url: https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
      properties:
        enabled:
          example: true
          type: boolean
      title: Get Data Usage Metrics Export Status Response
      type: object
    GetDataUsageResponse:
      description: This data structure is used to return data usage.
      example:
        entries:
        - sizeGb: 0.8008282
          units: 6.0274563
          dimensions:
          - pillar: PILLAR_UNSPECIFIED
          - pillar: PILLAR_UNSPECIFIED
          timestamp: 2000-01-23T04:56:07.000+00:00
        - sizeGb: 0.8008282
          units: 6.0274563
          dimensions:
          - pillar: PILLAR_UNSPECIFIED
          - pillar: PILLAR_UNSPECIFIED
          timestamp: 2000-01-23T04:56:07.000+00:00
      externalDocs:
        description: Find out more about data usage.
        url: https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
      properties:
        entries:
          items:
            $ref: "#/components/schemas/DataUsageEntry"
          type: array
      title: Get Data Usage Response
      type: object
    GetLogsCountResponse:
      description: This data structure is used to return logs count.
      example:
        logsCount:
        - severity: SEVERITY_UNSPECIFIED
          logsCount: "100"
          priority: PRIORITY_UNSPECIFIED
          timestamp: 2000-01-23T04:56:07.000+00:00
        - severity: SEVERITY_UNSPECIFIED
          logsCount: "100"
          priority: PRIORITY_UNSPECIFIED
          timestamp: 2000-01-23T04:56:07.000+00:00
      externalDocs:
        description: Find out more about data usage.
        url: https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
      properties:
        logsCount:
          items:
            $ref: "#/components/schemas/LogsCount"
          type: array
      title: Get Logs Count Response
      type: object
    GetSpansCountResponse:
      description: This data structure is used to return spans count.
      example:
        spansCount:
        - errorSpanCount: "10"
          mediumErrorSpanCount: "20"
          lowSuccessSpanCount: "50"
          mediumSuccessSpanCount: "200"
          successSpanCount: "100"
          lowErrorSpanCount: "5"
          timestamp: 2021-01-01T00:00:00Z
        - errorSpanCount: "10"
          mediumErrorSpanCount: "20"
          lowSuccessSpanCount: "50"
          mediumSuccessSpanCount: "200"
          successSpanCount: "100"
          lowErrorSpanCount: "5"
          timestamp: 2021-01-01T00:00:00Z
      externalDocs:
        description: Find out more about data usage.
        url: https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
      properties:
        spansCount:
          items:
            $ref: "#/components/schemas/SpansCount"
          type: array
      title: Get Spans Count Response
      type: object
    LogsCount:
      description: This data structure represents a logs count.
      example:
        severity: SEVERITY_UNSPECIFIED
        logsCount: "100"
        priority: PRIORITY_UNSPECIFIED
        timestamp: 2000-01-23T04:56:07.000+00:00
      externalDocs:
        description: Find out more about data usage.
        url: https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
      properties:
        logsCount:
          example: "100"
          format: int64
          type: string
        priority:
          $ref: "#/components/schemas/v2.Priority"
        severity:
          $ref: "#/components/schemas/datausage.v2.Severity"
        timestamp:
          format: date-time
          type: string
      title: Logs Count
      type: object
    MultipleValues:
      properties:
        matcher:
          $ref: "#/components/schemas/events.v3.FilterMatcher"
        values:
          items:
            type: string
          type: array
      type: object
    SpansCount:
      description: This data structure represents a spans count.
      example:
        errorSpanCount: "10"
        mediumErrorSpanCount: "20"
        lowSuccessSpanCount: "50"
        mediumSuccessSpanCount: "200"
        successSpanCount: "100"
        lowErrorSpanCount: "5"
        timestamp: 2021-01-01T00:00:00Z
      externalDocs:
        description: Find out more about data usage.
        url: https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
      properties:
        errorSpanCount:
          example: "10"
          format: int64
          type: string
        lowErrorSpanCount:
          example: "5"
          format: int64
          type: string
        lowSuccessSpanCount:
          example: "50"
          format: int64
          type: string
        mediumErrorSpanCount:
          example: "20"
          format: int64
          type: string
        mediumSuccessSpanCount:
          example: "200"
          format: int64
          type: string
        successSpanCount:
          example: "100"
          format: int64
          type: string
        timestamp:
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
      title: Spans Count
      type: object
    Token:
      example:
        value: 0.8008282
      properties:
        value:
          format: float
          type: number
      type: object
    UpdateDataUsageMetricsExportStatusResponse:
      description: This data structure is used to return data usage metrics export
        status.
      example:
        enabled: true
      externalDocs:
        description: Find out more about data usage.
        url: https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
      properties:
        enabled:
          example: true
          type: boolean
      title: Update Data Usage Metrics Export Status Response
      type: object
    common.Group:
      properties:
        field:
          $ref: "#/components/schemas/FieldGroup"
        groups:
          items:
            $ref: "#/components/schemas/common.Group"
          type: array
        value:
          format: double
          type: number
      type: object
    datausage.v2.Severity:
      enum:
      - SEVERITY_UNSPECIFIED
      - SEVERITY_DEBUG
      - SEVERITY_VERBOSE
      - SEVERITY_INFO
      - SEVERITY_WARNING
      - SEVERITY_ERROR
      - SEVERITY_CRITICAL
      type: string
    events.v3.FilterMatcher:
      enum:
      - FILTER_MATCHER_TEXT_OR_UNSPECIFIED
      - FILTER_MATCHER_REGEXP
      type: string
    v2.DateRange:
      description: This data structure represents a date range.
      externalDocs:
        description: Find out more about data usage.
        url: https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
      properties:
        fromDate:
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        toDate:
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
      title: Date Range
      type: object
    v2.GB:
      example:
        value: 0.8008282
      properties:
        value:
          format: float
          type: number
      type: object
    v2.Pillar:
      enum:
      - PILLAR_UNSPECIFIED
      - PILLAR_METRICS
      - PILLAR_LOGS
      - PILLAR_SPANS
      - PILLAR_BINARY
      - PILLAR_PROFILES
      type: string
    v2.Priority:
      enum:
      - PRIORITY_UNSPECIFIED
      - PRIORITY_LOW
      - PRIORITY_MEDIUM
      - PRIORITY_HIGH
      - PRIORITY_BLOCKED
      type: string
    v2.Range:
      enum:
      - RANGE_UNSPECIFIED
      - RANGE_CURRENT_MONTH
      - RANGE_LAST_30_DAYS
      - RANGE_LAST_90_DAYS
      - RANGE_LAST_WEEK
      type: string
    v2.TcoTier:
      enum:
      - TCO_TIER_UNSPECIFIED
      - TCO_TIER_LOW
      - TCO_TIER_MEDIUM
      - TCO_TIER_HIGH
      - TCO_TIER_BLOCKED
      type: string
    v2.Unit:
      example:
        value: 0.8008282
      properties:
        value:
          format: float
          type: number
      type: object
    v3.FilterOperator:
      enum:
      - FILTER_OPERATOR_AND_OR_UNSPECIFIED
      - FILTER_OPERATOR_OR
      type: string
    Date_Range:
      description: This data structure represents a date range.
      externalDocs:
        description: Find out more about data usage.
        url: https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
      properties:
        fromDate:
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        toDate:
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
      title: Date Range
      type: object
    DataUsageService_GetDataUsage_dimension_filters_parameter_inner_oneOf:
      additionalProperties: false
      properties:
        pillar:
          enum:
          - PILLAR_UNSPECIFIED
          - PILLAR_METRICS
          - PILLAR_LOGS
          - PILLAR_SPANS
          - PILLAR_BINARY
          - PILLAR_PROFILES
          type: string
      type: object
    Generic_Dimension:
      description: This data structure represents a generic dimension.
      externalDocs:
        description: Find out more about data usage.
        url: https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
      properties:
        key:
          example: key
          type: string
        value:
          example: value
          type: string
      title: Generic Dimension
      type: object
    DataUsageService_GetDataUsage_dimension_filters_parameter_inner_oneOf_1:
      additionalProperties: false
      properties:
        genericDimension:
          $ref: "#/components/schemas/Generic_Dimension"
      type: object
    DataUsageService_GetDataUsage_dimension_filters_parameter_inner_oneOf_2:
      additionalProperties: false
      properties:
        tier:
          deprecated: true
          enum:
          - TCO_TIER_UNSPECIFIED
          - TCO_TIER_LOW
          - TCO_TIER_MEDIUM
          - TCO_TIER_HIGH
          - TCO_TIER_BLOCKED
          type: string
      type: object
    DataUsageService_GetDataUsage_dimension_filters_parameter_inner_oneOf_3:
      additionalProperties: false
      properties:
        severity:
          enum:
          - SEVERITY_UNSPECIFIED
          - SEVERITY_DEBUG
          - SEVERITY_VERBOSE
          - SEVERITY_INFO
          - SEVERITY_WARNING
          - SEVERITY_ERROR
          - SEVERITY_CRITICAL
          type: string
      type: object
    DataUsageService_GetDataUsage_dimension_filters_parameter_inner_oneOf_4:
      additionalProperties: false
      properties:
        priority:
          enum:
          - PRIORITY_UNSPECIFIED
          - PRIORITY_LOW
          - PRIORITY_MEDIUM
          - PRIORITY_HIGH
          - PRIORITY_BLOCKED
          type: string
      type: object
    DataUsageService_GetDataUsage_dimension_filters_parameter_inner:
      oneOf:
      - $ref: "#/components/schemas/DataUsageService_GetDataUsage_dimension_filters_parameter_inner_oneOf"
      - $ref: "#/components/schemas/DataUsageService_GetDataUsage_dimension_filters_parameter_inner_oneOf_1"
      - $ref: "#/components/schemas/DataUsageService_GetDataUsage_dimension_filters_parameter_inner_oneOf_2"
      - $ref: "#/components/schemas/DataUsageService_GetDataUsage_dimension_filters_parameter_inner_oneOf_3"
      - $ref: "#/components/schemas/DataUsageService_GetDataUsage_dimension_filters_parameter_inner_oneOf_4"
    DataUsageService_GetDailyUsageEvaluationTokens_request_oneOf:
      additionalProperties: false
      properties:
        range:
          $ref: "#/components/schemas/v2.Range"
      type: object
    DataUsageService_GetDailyUsageEvaluationTokens_request_oneOf_1:
      additionalProperties: false
      properties:
        dateRange:
          $ref: "#/components/schemas/v2.DateRange"
      type: object
    DataUsageService_GetDailyUsageEvaluationTokens_request:
      oneOf:
      - $ref: "#/components/schemas/DataUsageService_GetDailyUsageEvaluationTokens_request_oneOf"
      - $ref: "#/components/schemas/DataUsageService_GetDailyUsageEvaluationTokens_request_oneOf_1"
      type: object
    Update_Data_Usage_Metrics_Export_Status_Request:
      additionalProperties: false
      description: This data structure is used to update data usage metrics export
        status.
      properties:
        enabled:
          example: true
          type: boolean
      title: Update Data Usage Metrics Export Status Request
      type: object
    Scopes_Filter:
      description: This data structure represents a filter for scopes.
      externalDocs:
        description: Find out more about data usage.
        url: https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
      properties:
        application:
          items:
            example: application1
            type: string
          type: array
        subsystem:
          items:
            example: subsystem1
            type: string
          type: array
      title: Scopes Filter
      type: object
    Dimension_oneOf:
      additionalProperties: false
      example:
        pillar: PILLAR_UNSPECIFIED
      properties:
        pillar:
          $ref: "#/components/schemas/v2.Pillar"
      type: object
    Dimension_oneOf_1:
      additionalProperties: false
      properties:
        genericDimension:
          $ref: "#/components/schemas/GenericDimension"
      type: object
    Dimension_oneOf_2:
      additionalProperties: false
      properties:
        tier:
          $ref: "#/components/schemas/v2.TcoTier"
      type: object
    Dimension_oneOf_3:
      additionalProperties: false
      properties:
        severity:
          $ref: "#/components/schemas/datausage.v2.Severity"
      type: object
    Dimension_oneOf_4:
      additionalProperties: false
      properties:
        priority:
          $ref: "#/components/schemas/v2.Priority"
      type: object
    FilterPathAndValues_1:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        multipleValues:
          $ref: "#/components/schemas/MultipleValues"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
    FilterPathAndValues_2:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        filters:
          $ref: "#/components/schemas/Filters"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
  securitySchemes:
    apiKeyAuth:
      description: API key authentication
      in: header
      name: Authorization
      type: apiKey
