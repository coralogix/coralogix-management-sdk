/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_usage_service

import (
	"encoding/json"
	"fmt"
)

// V2Range the model 'V2Range'
type V2Range string

// List of v2.Range
const (
	V2RANGE_RANGE_UNSPECIFIED V2Range = "RANGE_UNSPECIFIED"
	V2RANGE_RANGE_CURRENT_MONTH V2Range = "RANGE_CURRENT_MONTH"
	V2RANGE_RANGE_LAST_30_DAYS V2Range = "RANGE_LAST_30_DAYS"
	V2RANGE_RANGE_LAST_90_DAYS V2Range = "RANGE_LAST_90_DAYS"
	V2RANGE_RANGE_LAST_WEEK V2Range = "RANGE_LAST_WEEK"
)

// All allowed values of V2Range enum
var AllowedV2RangeEnumValues = []V2Range{
	"RANGE_UNSPECIFIED",
	"RANGE_CURRENT_MONTH",
	"RANGE_LAST_30_DAYS",
	"RANGE_LAST_90_DAYS",
	"RANGE_LAST_WEEK",
}

func (v *V2Range) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V2Range(value)
	for _, existing := range AllowedV2RangeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V2Range", value)
}

// NewV2RangeFromValue returns a pointer to a valid V2Range
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV2RangeFromValue(v string) (*V2Range, error) {
	ev := V2Range(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V2Range: valid values are %v", v, AllowedV2RangeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V2Range) IsValid() bool {
	for _, existing := range AllowedV2RangeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v2.Range value
func (v V2Range) Ptr() *V2Range {
	return &v
}

type NullableV2Range struct {
	value *V2Range
	isSet bool
}

func (v NullableV2Range) Get() *V2Range {
	return v.value
}

func (v *NullableV2Range) Set(val *V2Range) {
	v.value = val
	v.isSet = true
}

func (v NullableV2Range) IsSet() bool {
	return v.isSet
}

func (v *NullableV2Range) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2Range(val *V2Range) *NullableV2Range {
	return &NullableV2Range{value: val, isSet: true}
}

func (v NullableV2Range) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2Range) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

