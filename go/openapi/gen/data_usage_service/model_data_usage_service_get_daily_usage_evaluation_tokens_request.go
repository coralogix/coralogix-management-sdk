/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_usage_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DataUsageServiceGetDailyUsageEvaluationTokensRequest - struct for DataUsageServiceGetDailyUsageEvaluationTokensRequest
type DataUsageServiceGetDailyUsageEvaluationTokensRequest struct {
	GetDailyUsageEvaluationTokensRequestDateRange *GetDailyUsageEvaluationTokensRequestDateRange
	GetDailyUsageEvaluationTokensRequestRange *GetDailyUsageEvaluationTokensRequestRange
}

// GetDailyUsageEvaluationTokensRequestDateRangeAsDataUsageServiceGetDailyUsageEvaluationTokensRequest is a convenience function that returns GetDailyUsageEvaluationTokensRequestDateRange wrapped in DataUsageServiceGetDailyUsageEvaluationTokensRequest
func GetDailyUsageEvaluationTokensRequestDateRangeAsDataUsageServiceGetDailyUsageEvaluationTokensRequest(v *GetDailyUsageEvaluationTokensRequestDateRange) DataUsageServiceGetDailyUsageEvaluationTokensRequest {
	return DataUsageServiceGetDailyUsageEvaluationTokensRequest{
		GetDailyUsageEvaluationTokensRequestDateRange: v,
	}
}

// GetDailyUsageEvaluationTokensRequestRangeAsDataUsageServiceGetDailyUsageEvaluationTokensRequest is a convenience function that returns GetDailyUsageEvaluationTokensRequestRange wrapped in DataUsageServiceGetDailyUsageEvaluationTokensRequest
func GetDailyUsageEvaluationTokensRequestRangeAsDataUsageServiceGetDailyUsageEvaluationTokensRequest(v *GetDailyUsageEvaluationTokensRequestRange) DataUsageServiceGetDailyUsageEvaluationTokensRequest {
	return DataUsageServiceGetDailyUsageEvaluationTokensRequest{
		GetDailyUsageEvaluationTokensRequestRange: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DataUsageServiceGetDailyUsageEvaluationTokensRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetDailyUsageEvaluationTokensRequestDateRange
	err = newStrictDecoder(data).Decode(&dst.GetDailyUsageEvaluationTokensRequestDateRange)
	if err == nil {
		jsonGetDailyUsageEvaluationTokensRequestDateRange, _ := json.Marshal(dst.GetDailyUsageEvaluationTokensRequestDateRange)
		if string(jsonGetDailyUsageEvaluationTokensRequestDateRange) == "{}" { // empty struct
			dst.GetDailyUsageEvaluationTokensRequestDateRange = nil
		} else {
			if err = validator.Validate(dst.GetDailyUsageEvaluationTokensRequestDateRange); err != nil {
				dst.GetDailyUsageEvaluationTokensRequestDateRange = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetDailyUsageEvaluationTokensRequestDateRange = nil
	}

	// try to unmarshal data into GetDailyUsageEvaluationTokensRequestRange
	err = newStrictDecoder(data).Decode(&dst.GetDailyUsageEvaluationTokensRequestRange)
	if err == nil {
		jsonGetDailyUsageEvaluationTokensRequestRange, _ := json.Marshal(dst.GetDailyUsageEvaluationTokensRequestRange)
		if string(jsonGetDailyUsageEvaluationTokensRequestRange) == "{}" { // empty struct
			dst.GetDailyUsageEvaluationTokensRequestRange = nil
		} else {
			if err = validator.Validate(dst.GetDailyUsageEvaluationTokensRequestRange); err != nil {
				dst.GetDailyUsageEvaluationTokensRequestRange = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetDailyUsageEvaluationTokensRequestRange = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetDailyUsageEvaluationTokensRequestDateRange = nil
		dst.GetDailyUsageEvaluationTokensRequestRange = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DataUsageServiceGetDailyUsageEvaluationTokensRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DataUsageServiceGetDailyUsageEvaluationTokensRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DataUsageServiceGetDailyUsageEvaluationTokensRequest) MarshalJSON() ([]byte, error) {
	if src.GetDailyUsageEvaluationTokensRequestDateRange != nil {
		return json.Marshal(&src.GetDailyUsageEvaluationTokensRequestDateRange)
	}

	if src.GetDailyUsageEvaluationTokensRequestRange != nil {
		return json.Marshal(&src.GetDailyUsageEvaluationTokensRequestRange)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DataUsageServiceGetDailyUsageEvaluationTokensRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GetDailyUsageEvaluationTokensRequestDateRange != nil {
		return obj.GetDailyUsageEvaluationTokensRequestDateRange
	}

	if obj.GetDailyUsageEvaluationTokensRequestRange != nil {
		return obj.GetDailyUsageEvaluationTokensRequestRange
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DataUsageServiceGetDailyUsageEvaluationTokensRequest) GetActualInstanceValue() (interface{}) {
	if obj.GetDailyUsageEvaluationTokensRequestDateRange != nil {
		return *obj.GetDailyUsageEvaluationTokensRequestDateRange
	}

	if obj.GetDailyUsageEvaluationTokensRequestRange != nil {
		return *obj.GetDailyUsageEvaluationTokensRequestRange
	}

	// all schemas are nil
	return nil
}

type NullableDataUsageServiceGetDailyUsageEvaluationTokensRequest struct {
	value *DataUsageServiceGetDailyUsageEvaluationTokensRequest
	isSet bool
}

func (v NullableDataUsageServiceGetDailyUsageEvaluationTokensRequest) Get() *DataUsageServiceGetDailyUsageEvaluationTokensRequest {
	return v.value
}

func (v *NullableDataUsageServiceGetDailyUsageEvaluationTokensRequest) Set(val *DataUsageServiceGetDailyUsageEvaluationTokensRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDataUsageServiceGetDailyUsageEvaluationTokensRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDataUsageServiceGetDailyUsageEvaluationTokensRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataUsageServiceGetDailyUsageEvaluationTokensRequest(val *DataUsageServiceGetDailyUsageEvaluationTokensRequest) *NullableDataUsageServiceGetDailyUsageEvaluationTokensRequest {
	return &NullableDataUsageServiceGetDailyUsageEvaluationTokensRequest{value: val, isSet: true}
}

func (v NullableDataUsageServiceGetDailyUsageEvaluationTokensRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataUsageServiceGetDailyUsageEvaluationTokensRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


