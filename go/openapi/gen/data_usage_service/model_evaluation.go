/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_usage_service

import (
	"encoding/json"
)

// checks if the Evaluation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Evaluation{}

// Evaluation struct for Evaluation
type Evaluation struct {
	EvaluationTokens *Token `json:"evaluationTokens,omitempty"`
	EvaluatorName *string `json:"evaluatorName,omitempty"`
}

// NewEvaluation instantiates a new Evaluation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvaluation() *Evaluation {
	this := Evaluation{}
	return &this
}

// NewEvaluationWithDefaults instantiates a new Evaluation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvaluationWithDefaults() *Evaluation {
	this := Evaluation{}
	return &this
}

// GetEvaluationTokens returns the EvaluationTokens field value if set, zero value otherwise.
func (o *Evaluation) GetEvaluationTokens() Token {
	if o == nil || IsNil(o.EvaluationTokens) {
		var ret Token
		return ret
	}
	return *o.EvaluationTokens
}

// GetEvaluationTokensOk returns a tuple with the EvaluationTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evaluation) GetEvaluationTokensOk() (*Token, bool) {
	if o == nil || IsNil(o.EvaluationTokens) {
		return nil, false
	}
	return o.EvaluationTokens, true
}

// HasEvaluationTokens returns a boolean if a field has been set.
func (o *Evaluation) HasEvaluationTokens() bool {
	if o != nil && !IsNil(o.EvaluationTokens) {
		return true
	}

	return false
}

// SetEvaluationTokens gets a reference to the given Token and assigns it to the EvaluationTokens field.
func (o *Evaluation) SetEvaluationTokens(v Token) {
	o.EvaluationTokens = &v
}

// GetEvaluatorName returns the EvaluatorName field value if set, zero value otherwise.
func (o *Evaluation) GetEvaluatorName() string {
	if o == nil || IsNil(o.EvaluatorName) {
		var ret string
		return ret
	}
	return *o.EvaluatorName
}

// GetEvaluatorNameOk returns a tuple with the EvaluatorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evaluation) GetEvaluatorNameOk() (*string, bool) {
	if o == nil || IsNil(o.EvaluatorName) {
		return nil, false
	}
	return o.EvaluatorName, true
}

// HasEvaluatorName returns a boolean if a field has been set.
func (o *Evaluation) HasEvaluatorName() bool {
	if o != nil && !IsNil(o.EvaluatorName) {
		return true
	}

	return false
}

// SetEvaluatorName gets a reference to the given string and assigns it to the EvaluatorName field.
func (o *Evaluation) SetEvaluatorName(v string) {
	o.EvaluatorName = &v
}

func (o Evaluation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Evaluation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EvaluationTokens) {
		toSerialize["evaluationTokens"] = o.EvaluationTokens
	}
	if !IsNil(o.EvaluatorName) {
		toSerialize["evaluatorName"] = o.EvaluatorName
	}
	return toSerialize, nil
}

type NullableEvaluation struct {
	value *Evaluation
	isSet bool
}

func (v NullableEvaluation) Get() *Evaluation {
	return v.value
}

func (v *NullableEvaluation) Set(val *Evaluation) {
	v.value = val
	v.isSet = true
}

func (v NullableEvaluation) IsSet() bool {
	return v.isSet
}

func (v *NullableEvaluation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvaluation(val *Evaluation) *NullableEvaluation {
	return &NullableEvaluation{value: val, isSet: true}
}

func (v NullableEvaluation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvaluation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


