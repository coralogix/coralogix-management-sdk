/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_usage_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DataUsageServiceGetDailyUsageProcessedGbsRequest - struct for DataUsageServiceGetDailyUsageProcessedGbsRequest
type DataUsageServiceGetDailyUsageProcessedGbsRequest struct {
	GetDailyUsageProcessedGbsRequestDateRange *GetDailyUsageProcessedGbsRequestDateRange
	GetDailyUsageProcessedGbsRequestRange *GetDailyUsageProcessedGbsRequestRange
}

// GetDailyUsageProcessedGbsRequestDateRangeAsDataUsageServiceGetDailyUsageProcessedGbsRequest is a convenience function that returns GetDailyUsageProcessedGbsRequestDateRange wrapped in DataUsageServiceGetDailyUsageProcessedGbsRequest
func GetDailyUsageProcessedGbsRequestDateRangeAsDataUsageServiceGetDailyUsageProcessedGbsRequest(v *GetDailyUsageProcessedGbsRequestDateRange) DataUsageServiceGetDailyUsageProcessedGbsRequest {
	return DataUsageServiceGetDailyUsageProcessedGbsRequest{
		GetDailyUsageProcessedGbsRequestDateRange: v,
	}
}

// GetDailyUsageProcessedGbsRequestRangeAsDataUsageServiceGetDailyUsageProcessedGbsRequest is a convenience function that returns GetDailyUsageProcessedGbsRequestRange wrapped in DataUsageServiceGetDailyUsageProcessedGbsRequest
func GetDailyUsageProcessedGbsRequestRangeAsDataUsageServiceGetDailyUsageProcessedGbsRequest(v *GetDailyUsageProcessedGbsRequestRange) DataUsageServiceGetDailyUsageProcessedGbsRequest {
	return DataUsageServiceGetDailyUsageProcessedGbsRequest{
		GetDailyUsageProcessedGbsRequestRange: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DataUsageServiceGetDailyUsageProcessedGbsRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetDailyUsageProcessedGbsRequestDateRange
	err = newStrictDecoder(data).Decode(&dst.GetDailyUsageProcessedGbsRequestDateRange)
	if err == nil {
		jsonGetDailyUsageProcessedGbsRequestDateRange, _ := json.Marshal(dst.GetDailyUsageProcessedGbsRequestDateRange)
		if string(jsonGetDailyUsageProcessedGbsRequestDateRange) == "{}" { // empty struct
			dst.GetDailyUsageProcessedGbsRequestDateRange = nil
		} else {
			if err = validator.Validate(dst.GetDailyUsageProcessedGbsRequestDateRange); err != nil {
				dst.GetDailyUsageProcessedGbsRequestDateRange = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetDailyUsageProcessedGbsRequestDateRange = nil
	}

	// try to unmarshal data into GetDailyUsageProcessedGbsRequestRange
	err = newStrictDecoder(data).Decode(&dst.GetDailyUsageProcessedGbsRequestRange)
	if err == nil {
		jsonGetDailyUsageProcessedGbsRequestRange, _ := json.Marshal(dst.GetDailyUsageProcessedGbsRequestRange)
		if string(jsonGetDailyUsageProcessedGbsRequestRange) == "{}" { // empty struct
			dst.GetDailyUsageProcessedGbsRequestRange = nil
		} else {
			if err = validator.Validate(dst.GetDailyUsageProcessedGbsRequestRange); err != nil {
				dst.GetDailyUsageProcessedGbsRequestRange = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetDailyUsageProcessedGbsRequestRange = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetDailyUsageProcessedGbsRequestDateRange = nil
		dst.GetDailyUsageProcessedGbsRequestRange = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DataUsageServiceGetDailyUsageProcessedGbsRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DataUsageServiceGetDailyUsageProcessedGbsRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DataUsageServiceGetDailyUsageProcessedGbsRequest) MarshalJSON() ([]byte, error) {
	if src.GetDailyUsageProcessedGbsRequestDateRange != nil {
		return json.Marshal(&src.GetDailyUsageProcessedGbsRequestDateRange)
	}

	if src.GetDailyUsageProcessedGbsRequestRange != nil {
		return json.Marshal(&src.GetDailyUsageProcessedGbsRequestRange)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DataUsageServiceGetDailyUsageProcessedGbsRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GetDailyUsageProcessedGbsRequestDateRange != nil {
		return obj.GetDailyUsageProcessedGbsRequestDateRange
	}

	if obj.GetDailyUsageProcessedGbsRequestRange != nil {
		return obj.GetDailyUsageProcessedGbsRequestRange
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DataUsageServiceGetDailyUsageProcessedGbsRequest) GetActualInstanceValue() (interface{}) {
	if obj.GetDailyUsageProcessedGbsRequestDateRange != nil {
		return *obj.GetDailyUsageProcessedGbsRequestDateRange
	}

	if obj.GetDailyUsageProcessedGbsRequestRange != nil {
		return *obj.GetDailyUsageProcessedGbsRequestRange
	}

	// all schemas are nil
	return nil
}

type NullableDataUsageServiceGetDailyUsageProcessedGbsRequest struct {
	value *DataUsageServiceGetDailyUsageProcessedGbsRequest
	isSet bool
}

func (v NullableDataUsageServiceGetDailyUsageProcessedGbsRequest) Get() *DataUsageServiceGetDailyUsageProcessedGbsRequest {
	return v.value
}

func (v *NullableDataUsageServiceGetDailyUsageProcessedGbsRequest) Set(val *DataUsageServiceGetDailyUsageProcessedGbsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDataUsageServiceGetDailyUsageProcessedGbsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDataUsageServiceGetDailyUsageProcessedGbsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataUsageServiceGetDailyUsageProcessedGbsRequest(val *DataUsageServiceGetDailyUsageProcessedGbsRequest) *NullableDataUsageServiceGetDailyUsageProcessedGbsRequest {
	return &NullableDataUsageServiceGetDailyUsageProcessedGbsRequest{value: val, isSet: true}
}

func (v NullableDataUsageServiceGetDailyUsageProcessedGbsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataUsageServiceGetDailyUsageProcessedGbsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


