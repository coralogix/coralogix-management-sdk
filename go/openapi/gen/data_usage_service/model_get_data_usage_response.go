/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_usage_service

import (
	"encoding/json"
)

// checks if the GetDataUsageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetDataUsageResponse{}

// GetDataUsageResponse This data structure is used to return data usage.
type GetDataUsageResponse struct {
	Entries []DataUsageEntry `json:"entries,omitempty"`
}

// NewGetDataUsageResponse instantiates a new GetDataUsageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetDataUsageResponse() *GetDataUsageResponse {
	this := GetDataUsageResponse{}
	return &this
}

// NewGetDataUsageResponseWithDefaults instantiates a new GetDataUsageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetDataUsageResponseWithDefaults() *GetDataUsageResponse {
	this := GetDataUsageResponse{}
	return &this
}

// GetEntries returns the Entries field value if set, zero value otherwise.
func (o *GetDataUsageResponse) GetEntries() []DataUsageEntry {
	if o == nil || IsNil(o.Entries) {
		var ret []DataUsageEntry
		return ret
	}
	return o.Entries
}

// GetEntriesOk returns a tuple with the Entries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetDataUsageResponse) GetEntriesOk() ([]DataUsageEntry, bool) {
	if o == nil || IsNil(o.Entries) {
		return nil, false
	}
	return o.Entries, true
}

// HasEntries returns a boolean if a field has been set.
func (o *GetDataUsageResponse) HasEntries() bool {
	if o != nil && !IsNil(o.Entries) {
		return true
	}

	return false
}

// SetEntries gets a reference to the given []DataUsageEntry and assigns it to the Entries field.
func (o *GetDataUsageResponse) SetEntries(v []DataUsageEntry) {
	o.Entries = v
}

func (o GetDataUsageResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetDataUsageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Entries) {
		toSerialize["entries"] = o.Entries
	}
	return toSerialize, nil
}

type NullableGetDataUsageResponse struct {
	value *GetDataUsageResponse
	isSet bool
}

func (v NullableGetDataUsageResponse) Get() *GetDataUsageResponse {
	return v.value
}

func (v *NullableGetDataUsageResponse) Set(val *GetDataUsageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDataUsageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDataUsageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDataUsageResponse(val *GetDataUsageResponse) *NullableGetDataUsageResponse {
	return &NullableGetDataUsageResponse{value: val, isSet: true}
}

func (v NullableGetDataUsageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDataUsageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


