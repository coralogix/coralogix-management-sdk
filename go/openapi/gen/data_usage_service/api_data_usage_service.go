/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_usage_service

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// DataUsageServiceAPIService DataUsageServiceAPI service
type DataUsageServiceAPIService service

type ApiDataUsageServiceGetDailyUsageEvaluationTokensRequest struct {
	ctx context.Context
	ApiService *DataUsageServiceAPIService
	dataUsageServiceGetDailyUsageEvaluationTokensRequest *DataUsageServiceGetDailyUsageEvaluationTokensRequest
}

func (r ApiDataUsageServiceGetDailyUsageEvaluationTokensRequest) DataUsageServiceGetDailyUsageEvaluationTokensRequest(dataUsageServiceGetDailyUsageEvaluationTokensRequest DataUsageServiceGetDailyUsageEvaluationTokensRequest) ApiDataUsageServiceGetDailyUsageEvaluationTokensRequest {
	r.dataUsageServiceGetDailyUsageEvaluationTokensRequest = &dataUsageServiceGetDailyUsageEvaluationTokensRequest
	return r
}

func (r ApiDataUsageServiceGetDailyUsageEvaluationTokensRequest) Execute() (*GetDailyUsageEvaluationTokensResponse, *http.Response, error) {
	return r.ApiService.DataUsageServiceGetDailyUsageEvaluationTokensExecute(r)
}

/*
DataUsageServiceGetDailyUsageEvaluationTokens Get Daily Usage Evaluation Tokens

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataUsageServiceGetDailyUsageEvaluationTokensRequest
*/
func (a *DataUsageServiceAPIService) DataUsageServiceGetDailyUsageEvaluationTokens(ctx context.Context) ApiDataUsageServiceGetDailyUsageEvaluationTokensRequest {
	return ApiDataUsageServiceGetDailyUsageEvaluationTokensRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetDailyUsageEvaluationTokensResponse
func (a *DataUsageServiceAPIService) DataUsageServiceGetDailyUsageEvaluationTokensExecute(r ApiDataUsageServiceGetDailyUsageEvaluationTokensRequest) (*GetDailyUsageEvaluationTokensResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetDailyUsageEvaluationTokensResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataUsageServiceAPIService.DataUsageServiceGetDailyUsageEvaluationTokens")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dataplans/data-usage/v2/daily:evaluation-tokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dataUsageServiceGetDailyUsageEvaluationTokensRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataUsageServiceGetDailyUsageProcessedGbsRequest struct {
	ctx context.Context
	ApiService *DataUsageServiceAPIService
	dataUsageServiceGetDailyUsageEvaluationTokensRequest *DataUsageServiceGetDailyUsageEvaluationTokensRequest
}

func (r ApiDataUsageServiceGetDailyUsageProcessedGbsRequest) DataUsageServiceGetDailyUsageEvaluationTokensRequest(dataUsageServiceGetDailyUsageEvaluationTokensRequest DataUsageServiceGetDailyUsageEvaluationTokensRequest) ApiDataUsageServiceGetDailyUsageProcessedGbsRequest {
	r.dataUsageServiceGetDailyUsageEvaluationTokensRequest = &dataUsageServiceGetDailyUsageEvaluationTokensRequest
	return r
}

func (r ApiDataUsageServiceGetDailyUsageProcessedGbsRequest) Execute() (*GetDailyUsageProcessedGbsResponse, *http.Response, error) {
	return r.ApiService.DataUsageServiceGetDailyUsageProcessedGbsExecute(r)
}

/*
DataUsageServiceGetDailyUsageProcessedGbs Get Daily Usage Processed GBs

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataUsageServiceGetDailyUsageProcessedGbsRequest
*/
func (a *DataUsageServiceAPIService) DataUsageServiceGetDailyUsageProcessedGbs(ctx context.Context) ApiDataUsageServiceGetDailyUsageProcessedGbsRequest {
	return ApiDataUsageServiceGetDailyUsageProcessedGbsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetDailyUsageProcessedGbsResponse
func (a *DataUsageServiceAPIService) DataUsageServiceGetDailyUsageProcessedGbsExecute(r ApiDataUsageServiceGetDailyUsageProcessedGbsRequest) (*GetDailyUsageProcessedGbsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetDailyUsageProcessedGbsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataUsageServiceAPIService.DataUsageServiceGetDailyUsageProcessedGbs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dataplans/data-usage/v2/daily:processed-gbs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dataUsageServiceGetDailyUsageEvaluationTokensRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataUsageServiceGetDailyUsageUnitsRequest struct {
	ctx context.Context
	ApiService *DataUsageServiceAPIService
	dataUsageServiceGetDailyUsageEvaluationTokensRequest *DataUsageServiceGetDailyUsageEvaluationTokensRequest
}

func (r ApiDataUsageServiceGetDailyUsageUnitsRequest) DataUsageServiceGetDailyUsageEvaluationTokensRequest(dataUsageServiceGetDailyUsageEvaluationTokensRequest DataUsageServiceGetDailyUsageEvaluationTokensRequest) ApiDataUsageServiceGetDailyUsageUnitsRequest {
	r.dataUsageServiceGetDailyUsageEvaluationTokensRequest = &dataUsageServiceGetDailyUsageEvaluationTokensRequest
	return r
}

func (r ApiDataUsageServiceGetDailyUsageUnitsRequest) Execute() (*GetDailyUsageUnitsResponse, *http.Response, error) {
	return r.ApiService.DataUsageServiceGetDailyUsageUnitsExecute(r)
}

/*
DataUsageServiceGetDailyUsageUnits Get Daily Usage Units

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataUsageServiceGetDailyUsageUnitsRequest
*/
func (a *DataUsageServiceAPIService) DataUsageServiceGetDailyUsageUnits(ctx context.Context) ApiDataUsageServiceGetDailyUsageUnitsRequest {
	return ApiDataUsageServiceGetDailyUsageUnitsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetDailyUsageUnitsResponse
func (a *DataUsageServiceAPIService) DataUsageServiceGetDailyUsageUnitsExecute(r ApiDataUsageServiceGetDailyUsageUnitsRequest) (*GetDailyUsageUnitsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetDailyUsageUnitsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataUsageServiceAPIService.DataUsageServiceGetDailyUsageUnits")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dataplans/data-usage/v2/daily:units"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dataUsageServiceGetDailyUsageEvaluationTokensRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataUsageServiceGetDataUsageRequest struct {
	ctx context.Context
	ApiService *DataUsageServiceAPIService
	dateRange *DateRange
	resolution *string
	aggregate *[]string
	dimensionFilters *[]DataUsageServiceGetDataUsageDimensionFiltersParameterInner
}

func (r ApiDataUsageServiceGetDataUsageRequest) DateRange(dateRange DateRange) ApiDataUsageServiceGetDataUsageRequest {
	r.dateRange = &dateRange
	return r
}

func (r ApiDataUsageServiceGetDataUsageRequest) Resolution(resolution string) ApiDataUsageServiceGetDataUsageRequest {
	r.resolution = &resolution
	return r
}

func (r ApiDataUsageServiceGetDataUsageRequest) Aggregate(aggregate []string) ApiDataUsageServiceGetDataUsageRequest {
	r.aggregate = &aggregate
	return r
}

func (r ApiDataUsageServiceGetDataUsageRequest) DimensionFilters(dimensionFilters []DataUsageServiceGetDataUsageDimensionFiltersParameterInner) ApiDataUsageServiceGetDataUsageRequest {
	r.dimensionFilters = &dimensionFilters
	return r
}

func (r ApiDataUsageServiceGetDataUsageRequest) Execute() (*GetDataUsageResponse, *http.Response, error) {
	return r.ApiService.DataUsageServiceGetDataUsageExecute(r)
}

/*
DataUsageServiceGetDataUsage Get Data Usage

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataUsageServiceGetDataUsageRequest
*/
func (a *DataUsageServiceAPIService) DataUsageServiceGetDataUsage(ctx context.Context) ApiDataUsageServiceGetDataUsageRequest {
	return ApiDataUsageServiceGetDataUsageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetDataUsageResponse
func (a *DataUsageServiceAPIService) DataUsageServiceGetDataUsageExecute(r ApiDataUsageServiceGetDataUsageRequest) (*GetDataUsageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetDataUsageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataUsageServiceAPIService.DataUsageServiceGetDataUsage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dataplans/data-usage/v2"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.dateRange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_range", r.dateRange, "form", "")
	}
	if r.resolution != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resolution", r.resolution, "form", "")
	}
	if r.aggregate != nil {
		t := *r.aggregate
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "aggregate", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "aggregate", t, "form", "multi")
		}
	}
	if r.dimensionFilters != nil {
		t := *r.dimensionFilters
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension_filters", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension_filters", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataUsageServiceGetDataUsageMetricsExportStatusRequest struct {
	ctx context.Context
	ApiService *DataUsageServiceAPIService
}

func (r ApiDataUsageServiceGetDataUsageMetricsExportStatusRequest) Execute() (*GetDataUsageMetricsExportStatusResponse, *http.Response, error) {
	return r.ApiService.DataUsageServiceGetDataUsageMetricsExportStatusExecute(r)
}

/*
DataUsageServiceGetDataUsageMetricsExportStatus Get Data Usage Metrics Export Status

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataUsageServiceGetDataUsageMetricsExportStatusRequest
*/
func (a *DataUsageServiceAPIService) DataUsageServiceGetDataUsageMetricsExportStatus(ctx context.Context) ApiDataUsageServiceGetDataUsageMetricsExportStatusRequest {
	return ApiDataUsageServiceGetDataUsageMetricsExportStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetDataUsageMetricsExportStatusResponse
func (a *DataUsageServiceAPIService) DataUsageServiceGetDataUsageMetricsExportStatusExecute(r ApiDataUsageServiceGetDataUsageMetricsExportStatusRequest) (*GetDataUsageMetricsExportStatusResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetDataUsageMetricsExportStatusResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataUsageServiceAPIService.DataUsageServiceGetDataUsageMetricsExportStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dataplans/data-usage/v2/export-status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataUsageServiceGetLogsCountRequest struct {
	ctx context.Context
	ApiService *DataUsageServiceAPIService
	dateRange *DateRange
	resolution *string
	filters *ScopesFilter
}

func (r ApiDataUsageServiceGetLogsCountRequest) DateRange(dateRange DateRange) ApiDataUsageServiceGetLogsCountRequest {
	r.dateRange = &dateRange
	return r
}

func (r ApiDataUsageServiceGetLogsCountRequest) Resolution(resolution string) ApiDataUsageServiceGetLogsCountRequest {
	r.resolution = &resolution
	return r
}

func (r ApiDataUsageServiceGetLogsCountRequest) Filters(filters ScopesFilter) ApiDataUsageServiceGetLogsCountRequest {
	r.filters = &filters
	return r
}

func (r ApiDataUsageServiceGetLogsCountRequest) Execute() (*GetLogsCountResponse, *http.Response, error) {
	return r.ApiService.DataUsageServiceGetLogsCountExecute(r)
}

/*
DataUsageServiceGetLogsCount Get Logs Count

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataUsageServiceGetLogsCountRequest
*/
func (a *DataUsageServiceAPIService) DataUsageServiceGetLogsCount(ctx context.Context) ApiDataUsageServiceGetLogsCountRequest {
	return ApiDataUsageServiceGetLogsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetLogsCountResponse
func (a *DataUsageServiceAPIService) DataUsageServiceGetLogsCountExecute(r ApiDataUsageServiceGetLogsCountRequest) (*GetLogsCountResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetLogsCountResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataUsageServiceAPIService.DataUsageServiceGetLogsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dataplans/data-usage/v2/logs:count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.dateRange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_range", r.dateRange, "form", "")
	}
	if r.resolution != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resolution", r.resolution, "form", "")
	}
	if r.filters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataUsageServiceGetSpansCountRequest struct {
	ctx context.Context
	ApiService *DataUsageServiceAPIService
	dateRange *DateRange
	resolution *string
	filters *ScopesFilter
}

func (r ApiDataUsageServiceGetSpansCountRequest) DateRange(dateRange DateRange) ApiDataUsageServiceGetSpansCountRequest {
	r.dateRange = &dateRange
	return r
}

func (r ApiDataUsageServiceGetSpansCountRequest) Resolution(resolution string) ApiDataUsageServiceGetSpansCountRequest {
	r.resolution = &resolution
	return r
}

func (r ApiDataUsageServiceGetSpansCountRequest) Filters(filters ScopesFilter) ApiDataUsageServiceGetSpansCountRequest {
	r.filters = &filters
	return r
}

func (r ApiDataUsageServiceGetSpansCountRequest) Execute() (*GetSpansCountResponse, *http.Response, error) {
	return r.ApiService.DataUsageServiceGetSpansCountExecute(r)
}

/*
DataUsageServiceGetSpansCount Get Spans Count

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataUsageServiceGetSpansCountRequest
*/
func (a *DataUsageServiceAPIService) DataUsageServiceGetSpansCount(ctx context.Context) ApiDataUsageServiceGetSpansCountRequest {
	return ApiDataUsageServiceGetSpansCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetSpansCountResponse
func (a *DataUsageServiceAPIService) DataUsageServiceGetSpansCountExecute(r ApiDataUsageServiceGetSpansCountRequest) (*GetSpansCountResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetSpansCountResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataUsageServiceAPIService.DataUsageServiceGetSpansCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dataplans/data-usage/v2/spans:count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.dateRange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_range", r.dateRange, "form", "")
	}
	if r.resolution != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resolution", r.resolution, "form", "")
	}
	if r.filters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataUsageServiceUpdateDataUsageMetricsExportStatusRequest struct {
	ctx context.Context
	ApiService *DataUsageServiceAPIService
	updateDataUsageMetricsExportStatusRequest *UpdateDataUsageMetricsExportStatusRequest
}

func (r ApiDataUsageServiceUpdateDataUsageMetricsExportStatusRequest) UpdateDataUsageMetricsExportStatusRequest(updateDataUsageMetricsExportStatusRequest UpdateDataUsageMetricsExportStatusRequest) ApiDataUsageServiceUpdateDataUsageMetricsExportStatusRequest {
	r.updateDataUsageMetricsExportStatusRequest = &updateDataUsageMetricsExportStatusRequest
	return r
}

func (r ApiDataUsageServiceUpdateDataUsageMetricsExportStatusRequest) Execute() (*UpdateDataUsageMetricsExportStatusResponse, *http.Response, error) {
	return r.ApiService.DataUsageServiceUpdateDataUsageMetricsExportStatusExecute(r)
}

/*
DataUsageServiceUpdateDataUsageMetricsExportStatus Update Data Usage Metrics Export Status

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataUsageServiceUpdateDataUsageMetricsExportStatusRequest
*/
func (a *DataUsageServiceAPIService) DataUsageServiceUpdateDataUsageMetricsExportStatus(ctx context.Context) ApiDataUsageServiceUpdateDataUsageMetricsExportStatusRequest {
	return ApiDataUsageServiceUpdateDataUsageMetricsExportStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UpdateDataUsageMetricsExportStatusResponse
func (a *DataUsageServiceAPIService) DataUsageServiceUpdateDataUsageMetricsExportStatusExecute(r ApiDataUsageServiceUpdateDataUsageMetricsExportStatusRequest) (*UpdateDataUsageMetricsExportStatusResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateDataUsageMetricsExportStatusResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataUsageServiceAPIService.DataUsageServiceUpdateDataUsageMetricsExportStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dataplans/data-usage/v2/export-status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateDataUsageMetricsExportStatusRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
