/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_usage_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DataUsageServiceGetDailyUsageUnitsRequest - struct for DataUsageServiceGetDailyUsageUnitsRequest
type DataUsageServiceGetDailyUsageUnitsRequest struct {
	GetDailyUsageUnitsRequestDateRange *GetDailyUsageUnitsRequestDateRange
	GetDailyUsageUnitsRequestRange *GetDailyUsageUnitsRequestRange
}

// GetDailyUsageUnitsRequestDateRangeAsDataUsageServiceGetDailyUsageUnitsRequest is a convenience function that returns GetDailyUsageUnitsRequestDateRange wrapped in DataUsageServiceGetDailyUsageUnitsRequest
func GetDailyUsageUnitsRequestDateRangeAsDataUsageServiceGetDailyUsageUnitsRequest(v *GetDailyUsageUnitsRequestDateRange) DataUsageServiceGetDailyUsageUnitsRequest {
	return DataUsageServiceGetDailyUsageUnitsRequest{
		GetDailyUsageUnitsRequestDateRange: v,
	}
}

// GetDailyUsageUnitsRequestRangeAsDataUsageServiceGetDailyUsageUnitsRequest is a convenience function that returns GetDailyUsageUnitsRequestRange wrapped in DataUsageServiceGetDailyUsageUnitsRequest
func GetDailyUsageUnitsRequestRangeAsDataUsageServiceGetDailyUsageUnitsRequest(v *GetDailyUsageUnitsRequestRange) DataUsageServiceGetDailyUsageUnitsRequest {
	return DataUsageServiceGetDailyUsageUnitsRequest{
		GetDailyUsageUnitsRequestRange: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DataUsageServiceGetDailyUsageUnitsRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetDailyUsageUnitsRequestDateRange
	err = newStrictDecoder(data).Decode(&dst.GetDailyUsageUnitsRequestDateRange)
	if err == nil {
		jsonGetDailyUsageUnitsRequestDateRange, _ := json.Marshal(dst.GetDailyUsageUnitsRequestDateRange)
		if string(jsonGetDailyUsageUnitsRequestDateRange) == "{}" { // empty struct
			dst.GetDailyUsageUnitsRequestDateRange = nil
		} else {
			if err = validator.Validate(dst.GetDailyUsageUnitsRequestDateRange); err != nil {
				dst.GetDailyUsageUnitsRequestDateRange = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetDailyUsageUnitsRequestDateRange = nil
	}

	// try to unmarshal data into GetDailyUsageUnitsRequestRange
	err = newStrictDecoder(data).Decode(&dst.GetDailyUsageUnitsRequestRange)
	if err == nil {
		jsonGetDailyUsageUnitsRequestRange, _ := json.Marshal(dst.GetDailyUsageUnitsRequestRange)
		if string(jsonGetDailyUsageUnitsRequestRange) == "{}" { // empty struct
			dst.GetDailyUsageUnitsRequestRange = nil
		} else {
			if err = validator.Validate(dst.GetDailyUsageUnitsRequestRange); err != nil {
				dst.GetDailyUsageUnitsRequestRange = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetDailyUsageUnitsRequestRange = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetDailyUsageUnitsRequestDateRange = nil
		dst.GetDailyUsageUnitsRequestRange = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DataUsageServiceGetDailyUsageUnitsRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DataUsageServiceGetDailyUsageUnitsRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DataUsageServiceGetDailyUsageUnitsRequest) MarshalJSON() ([]byte, error) {
	if src.GetDailyUsageUnitsRequestDateRange != nil {
		return json.Marshal(&src.GetDailyUsageUnitsRequestDateRange)
	}

	if src.GetDailyUsageUnitsRequestRange != nil {
		return json.Marshal(&src.GetDailyUsageUnitsRequestRange)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DataUsageServiceGetDailyUsageUnitsRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GetDailyUsageUnitsRequestDateRange != nil {
		return obj.GetDailyUsageUnitsRequestDateRange
	}

	if obj.GetDailyUsageUnitsRequestRange != nil {
		return obj.GetDailyUsageUnitsRequestRange
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DataUsageServiceGetDailyUsageUnitsRequest) GetActualInstanceValue() (interface{}) {
	if obj.GetDailyUsageUnitsRequestDateRange != nil {
		return *obj.GetDailyUsageUnitsRequestDateRange
	}

	if obj.GetDailyUsageUnitsRequestRange != nil {
		return *obj.GetDailyUsageUnitsRequestRange
	}

	// all schemas are nil
	return nil
}

type NullableDataUsageServiceGetDailyUsageUnitsRequest struct {
	value *DataUsageServiceGetDailyUsageUnitsRequest
	isSet bool
}

func (v NullableDataUsageServiceGetDailyUsageUnitsRequest) Get() *DataUsageServiceGetDailyUsageUnitsRequest {
	return v.value
}

func (v *NullableDataUsageServiceGetDailyUsageUnitsRequest) Set(val *DataUsageServiceGetDailyUsageUnitsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDataUsageServiceGetDailyUsageUnitsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDataUsageServiceGetDailyUsageUnitsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataUsageServiceGetDailyUsageUnitsRequest(val *DataUsageServiceGetDailyUsageUnitsRequest) *NullableDataUsageServiceGetDailyUsageUnitsRequest {
	return &NullableDataUsageServiceGetDailyUsageUnitsRequest{value: val, isSet: true}
}

func (v NullableDataUsageServiceGetDailyUsageUnitsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataUsageServiceGetDailyUsageUnitsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


