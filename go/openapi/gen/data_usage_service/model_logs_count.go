/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_usage_service

import (
	"encoding/json"
	"time"
)

// checks if the LogsCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogsCount{}

// LogsCount This data structure represents a logs count.
type LogsCount struct {
	LogsCount *string `json:"logsCount,omitempty"`
	Priority *V2Priority `json:"priority,omitempty"`
	Severity *DatausageV2Severity `json:"severity,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// NewLogsCount instantiates a new LogsCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsCount() *LogsCount {
	this := LogsCount{}
	return &this
}

// NewLogsCountWithDefaults instantiates a new LogsCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsCountWithDefaults() *LogsCount {
	this := LogsCount{}
	return &this
}

// GetLogsCount returns the LogsCount field value if set, zero value otherwise.
func (o *LogsCount) GetLogsCount() string {
	if o == nil || IsNil(o.LogsCount) {
		var ret string
		return ret
	}
	return *o.LogsCount
}

// GetLogsCountOk returns a tuple with the LogsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsCount) GetLogsCountOk() (*string, bool) {
	if o == nil || IsNil(o.LogsCount) {
		return nil, false
	}
	return o.LogsCount, true
}

// HasLogsCount returns a boolean if a field has been set.
func (o *LogsCount) HasLogsCount() bool {
	if o != nil && !IsNil(o.LogsCount) {
		return true
	}

	return false
}

// SetLogsCount gets a reference to the given string and assigns it to the LogsCount field.
func (o *LogsCount) SetLogsCount(v string) {
	o.LogsCount = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *LogsCount) GetPriority() V2Priority {
	if o == nil || IsNil(o.Priority) {
		var ret V2Priority
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsCount) GetPriorityOk() (*V2Priority, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *LogsCount) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given V2Priority and assigns it to the Priority field.
func (o *LogsCount) SetPriority(v V2Priority) {
	o.Priority = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *LogsCount) GetSeverity() DatausageV2Severity {
	if o == nil || IsNil(o.Severity) {
		var ret DatausageV2Severity
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsCount) GetSeverityOk() (*DatausageV2Severity, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *LogsCount) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given DatausageV2Severity and assigns it to the Severity field.
func (o *LogsCount) SetSeverity(v DatausageV2Severity) {
	o.Severity = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *LogsCount) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsCount) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *LogsCount) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *LogsCount) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o LogsCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogsCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LogsCount) {
		toSerialize["logsCount"] = o.LogsCount
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableLogsCount struct {
	value *LogsCount
	isSet bool
}

func (v NullableLogsCount) Get() *LogsCount {
	return v.value
}

func (v *NullableLogsCount) Set(val *LogsCount) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsCount) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsCount(val *LogsCount) *NullableLogsCount {
	return &NullableLogsCount{value: val, isSet: true}
}

func (v NullableLogsCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


