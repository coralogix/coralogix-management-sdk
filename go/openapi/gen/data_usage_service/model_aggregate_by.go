/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_usage_service

import (
	"encoding/json"
	"fmt"
)

// AggregateBy the model 'AggregateBy'
type AggregateBy string

// List of AggregateBy
const (
	AGGREGATEBY_AGGREGATE_BY_UNSPECIFIED AggregateBy = "AGGREGATE_BY_UNSPECIFIED"
	AGGREGATEBY_AGGREGATE_BY_APPLICATION AggregateBy = "AGGREGATE_BY_APPLICATION"
	AGGREGATEBY_AGGREGATE_BY_SUBSYSTEM AggregateBy = "AGGREGATE_BY_SUBSYSTEM"
	AGGREGATEBY_AGGREGATE_BY_PILLAR AggregateBy = "AGGREGATE_BY_PILLAR"
	AGGREGATEBY_AGGREGATE_BY_PRIORITY AggregateBy = "AGGREGATE_BY_PRIORITY"
	AGGREGATEBY_AGGREGATE_BY_POLICY_NAME AggregateBy = "AGGREGATE_BY_POLICY_NAME"
	AGGREGATEBY_AGGREGATE_BY_SEVERITY AggregateBy = "AGGREGATE_BY_SEVERITY"
)

// All allowed values of AggregateBy enum
var AllowedAggregateByEnumValues = []AggregateBy{
	"AGGREGATE_BY_UNSPECIFIED",
	"AGGREGATE_BY_APPLICATION",
	"AGGREGATE_BY_SUBSYSTEM",
	"AGGREGATE_BY_PILLAR",
	"AGGREGATE_BY_PRIORITY",
	"AGGREGATE_BY_POLICY_NAME",
	"AGGREGATE_BY_SEVERITY",
}

func (v *AggregateBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AggregateBy(value)
	for _, existing := range AllowedAggregateByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AggregateBy", value)
}

// NewAggregateByFromValue returns a pointer to a valid AggregateBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAggregateByFromValue(v string) (*AggregateBy, error) {
	ev := AggregateBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AggregateBy: valid values are %v", v, AllowedAggregateByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AggregateBy) IsValid() bool {
	for _, existing := range AllowedAggregateByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AggregateBy value
func (v AggregateBy) Ptr() *AggregateBy {
	return &v
}

type NullableAggregateBy struct {
	value *AggregateBy
	isSet bool
}

func (v NullableAggregateBy) Get() *AggregateBy {
	return v.value
}

func (v *NullableAggregateBy) Set(val *AggregateBy) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregateBy) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregateBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregateBy(val *AggregateBy) *NullableAggregateBy {
	return &NullableAggregateBy{value: val, isSet: true}
}

func (v NullableAggregateBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregateBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

