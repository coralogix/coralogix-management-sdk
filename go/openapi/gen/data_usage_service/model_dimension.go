/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_usage_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Dimension - struct for Dimension
type Dimension struct {
	DimensionOneOf *DimensionOneOf
	DimensionOneOf1 *DimensionOneOf1
	DimensionOneOf2 *DimensionOneOf2
	DimensionOneOf3 *DimensionOneOf3
	DimensionOneOf4 *DimensionOneOf4
}

// DimensionOneOfAsDimension is a convenience function that returns DimensionOneOf wrapped in Dimension
func DimensionOneOfAsDimension(v *DimensionOneOf) Dimension {
	return Dimension{
		DimensionOneOf: v,
	}
}

// DimensionOneOf1AsDimension is a convenience function that returns DimensionOneOf1 wrapped in Dimension
func DimensionOneOf1AsDimension(v *DimensionOneOf1) Dimension {
	return Dimension{
		DimensionOneOf1: v,
	}
}

// DimensionOneOf2AsDimension is a convenience function that returns DimensionOneOf2 wrapped in Dimension
func DimensionOneOf2AsDimension(v *DimensionOneOf2) Dimension {
	return Dimension{
		DimensionOneOf2: v,
	}
}

// DimensionOneOf3AsDimension is a convenience function that returns DimensionOneOf3 wrapped in Dimension
func DimensionOneOf3AsDimension(v *DimensionOneOf3) Dimension {
	return Dimension{
		DimensionOneOf3: v,
	}
}

// DimensionOneOf4AsDimension is a convenience function that returns DimensionOneOf4 wrapped in Dimension
func DimensionOneOf4AsDimension(v *DimensionOneOf4) Dimension {
	return Dimension{
		DimensionOneOf4: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Dimension) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DimensionOneOf
	err = newStrictDecoder(data).Decode(&dst.DimensionOneOf)
	if err == nil {
		jsonDimensionOneOf, _ := json.Marshal(dst.DimensionOneOf)
		if string(jsonDimensionOneOf) == "{}" { // empty struct
			dst.DimensionOneOf = nil
		} else {
			if err = validator.Validate(dst.DimensionOneOf); err != nil {
				dst.DimensionOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.DimensionOneOf = nil
	}

	// try to unmarshal data into DimensionOneOf1
	err = newStrictDecoder(data).Decode(&dst.DimensionOneOf1)
	if err == nil {
		jsonDimensionOneOf1, _ := json.Marshal(dst.DimensionOneOf1)
		if string(jsonDimensionOneOf1) == "{}" { // empty struct
			dst.DimensionOneOf1 = nil
		} else {
			if err = validator.Validate(dst.DimensionOneOf1); err != nil {
				dst.DimensionOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.DimensionOneOf1 = nil
	}

	// try to unmarshal data into DimensionOneOf2
	err = newStrictDecoder(data).Decode(&dst.DimensionOneOf2)
	if err == nil {
		jsonDimensionOneOf2, _ := json.Marshal(dst.DimensionOneOf2)
		if string(jsonDimensionOneOf2) == "{}" { // empty struct
			dst.DimensionOneOf2 = nil
		} else {
			if err = validator.Validate(dst.DimensionOneOf2); err != nil {
				dst.DimensionOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.DimensionOneOf2 = nil
	}

	// try to unmarshal data into DimensionOneOf3
	err = newStrictDecoder(data).Decode(&dst.DimensionOneOf3)
	if err == nil {
		jsonDimensionOneOf3, _ := json.Marshal(dst.DimensionOneOf3)
		if string(jsonDimensionOneOf3) == "{}" { // empty struct
			dst.DimensionOneOf3 = nil
		} else {
			if err = validator.Validate(dst.DimensionOneOf3); err != nil {
				dst.DimensionOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.DimensionOneOf3 = nil
	}

	// try to unmarshal data into DimensionOneOf4
	err = newStrictDecoder(data).Decode(&dst.DimensionOneOf4)
	if err == nil {
		jsonDimensionOneOf4, _ := json.Marshal(dst.DimensionOneOf4)
		if string(jsonDimensionOneOf4) == "{}" { // empty struct
			dst.DimensionOneOf4 = nil
		} else {
			if err = validator.Validate(dst.DimensionOneOf4); err != nil {
				dst.DimensionOneOf4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.DimensionOneOf4 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DimensionOneOf = nil
		dst.DimensionOneOf1 = nil
		dst.DimensionOneOf2 = nil
		dst.DimensionOneOf3 = nil
		dst.DimensionOneOf4 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Dimension)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Dimension)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Dimension) MarshalJSON() ([]byte, error) {
	if src.DimensionOneOf != nil {
		return json.Marshal(&src.DimensionOneOf)
	}

	if src.DimensionOneOf1 != nil {
		return json.Marshal(&src.DimensionOneOf1)
	}

	if src.DimensionOneOf2 != nil {
		return json.Marshal(&src.DimensionOneOf2)
	}

	if src.DimensionOneOf3 != nil {
		return json.Marshal(&src.DimensionOneOf3)
	}

	if src.DimensionOneOf4 != nil {
		return json.Marshal(&src.DimensionOneOf4)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Dimension) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DimensionOneOf != nil {
		return obj.DimensionOneOf
	}

	if obj.DimensionOneOf1 != nil {
		return obj.DimensionOneOf1
	}

	if obj.DimensionOneOf2 != nil {
		return obj.DimensionOneOf2
	}

	if obj.DimensionOneOf3 != nil {
		return obj.DimensionOneOf3
	}

	if obj.DimensionOneOf4 != nil {
		return obj.DimensionOneOf4
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Dimension) GetActualInstanceValue() (interface{}) {
	if obj.DimensionOneOf != nil {
		return *obj.DimensionOneOf
	}

	if obj.DimensionOneOf1 != nil {
		return *obj.DimensionOneOf1
	}

	if obj.DimensionOneOf2 != nil {
		return *obj.DimensionOneOf2
	}

	if obj.DimensionOneOf3 != nil {
		return *obj.DimensionOneOf3
	}

	if obj.DimensionOneOf4 != nil {
		return *obj.DimensionOneOf4
	}

	// all schemas are nil
	return nil
}

type NullableDimension struct {
	value *Dimension
	isSet bool
}

func (v NullableDimension) Get() *Dimension {
	return v.value
}

func (v *NullableDimension) Set(val *Dimension) {
	v.value = val
	v.isSet = true
}

func (v NullableDimension) IsSet() bool {
	return v.isSet
}

func (v *NullableDimension) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDimension(val *Dimension) *NullableDimension {
	return &NullableDimension{value: val, isSet: true}
}

func (v NullableDimension) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDimension) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


