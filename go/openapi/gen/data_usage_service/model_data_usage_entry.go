/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_usage_service

import (
	"encoding/json"
	"time"
)

// checks if the DataUsageEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataUsageEntry{}

// DataUsageEntry This data structure represents a data usage entry.
type DataUsageEntry struct {
	Dimensions []Dimension `json:"dimensions,omitempty"`
	SizeGb *float32 `json:"sizeGb,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
	Units *float32 `json:"units,omitempty"`
}

// NewDataUsageEntry instantiates a new DataUsageEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataUsageEntry() *DataUsageEntry {
	this := DataUsageEntry{}
	return &this
}

// NewDataUsageEntryWithDefaults instantiates a new DataUsageEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataUsageEntryWithDefaults() *DataUsageEntry {
	this := DataUsageEntry{}
	return &this
}

// GetDimensions returns the Dimensions field value if set, zero value otherwise.
func (o *DataUsageEntry) GetDimensions() []Dimension {
	if o == nil || IsNil(o.Dimensions) {
		var ret []Dimension
		return ret
	}
	return o.Dimensions
}

// GetDimensionsOk returns a tuple with the Dimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataUsageEntry) GetDimensionsOk() ([]Dimension, bool) {
	if o == nil || IsNil(o.Dimensions) {
		return nil, false
	}
	return o.Dimensions, true
}

// HasDimensions returns a boolean if a field has been set.
func (o *DataUsageEntry) HasDimensions() bool {
	if o != nil && !IsNil(o.Dimensions) {
		return true
	}

	return false
}

// SetDimensions gets a reference to the given []Dimension and assigns it to the Dimensions field.
func (o *DataUsageEntry) SetDimensions(v []Dimension) {
	o.Dimensions = v
}

// GetSizeGb returns the SizeGb field value if set, zero value otherwise.
func (o *DataUsageEntry) GetSizeGb() float32 {
	if o == nil || IsNil(o.SizeGb) {
		var ret float32
		return ret
	}
	return *o.SizeGb
}

// GetSizeGbOk returns a tuple with the SizeGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataUsageEntry) GetSizeGbOk() (*float32, bool) {
	if o == nil || IsNil(o.SizeGb) {
		return nil, false
	}
	return o.SizeGb, true
}

// HasSizeGb returns a boolean if a field has been set.
func (o *DataUsageEntry) HasSizeGb() bool {
	if o != nil && !IsNil(o.SizeGb) {
		return true
	}

	return false
}

// SetSizeGb gets a reference to the given float32 and assigns it to the SizeGb field.
func (o *DataUsageEntry) SetSizeGb(v float32) {
	o.SizeGb = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *DataUsageEntry) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataUsageEntry) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *DataUsageEntry) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *DataUsageEntry) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *DataUsageEntry) GetUnits() float32 {
	if o == nil || IsNil(o.Units) {
		var ret float32
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataUsageEntry) GetUnitsOk() (*float32, bool) {
	if o == nil || IsNil(o.Units) {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *DataUsageEntry) HasUnits() bool {
	if o != nil && !IsNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given float32 and assigns it to the Units field.
func (o *DataUsageEntry) SetUnits(v float32) {
	o.Units = &v
}

func (o DataUsageEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataUsageEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dimensions) {
		toSerialize["dimensions"] = o.Dimensions
	}
	if !IsNil(o.SizeGb) {
		toSerialize["sizeGb"] = o.SizeGb
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Units) {
		toSerialize["units"] = o.Units
	}
	return toSerialize, nil
}

type NullableDataUsageEntry struct {
	value *DataUsageEntry
	isSet bool
}

func (v NullableDataUsageEntry) Get() *DataUsageEntry {
	return v.value
}

func (v *NullableDataUsageEntry) Set(val *DataUsageEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableDataUsageEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableDataUsageEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataUsageEntry(val *DataUsageEntry) *NullableDataUsageEntry {
	return &NullableDataUsageEntry{value: val, isSet: true}
}

func (v NullableDataUsageEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataUsageEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


