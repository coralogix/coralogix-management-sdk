/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_usage_service

import (
	"encoding/json"
	"fmt"
)

// V2Priority the model 'V2Priority'
type V2Priority string

// List of v2.Priority
const (
	V2PRIORITY_PRIORITY_UNSPECIFIED V2Priority = "PRIORITY_UNSPECIFIED"
	V2PRIORITY_PRIORITY_LOW V2Priority = "PRIORITY_LOW"
	V2PRIORITY_PRIORITY_MEDIUM V2Priority = "PRIORITY_MEDIUM"
	V2PRIORITY_PRIORITY_HIGH V2Priority = "PRIORITY_HIGH"
	V2PRIORITY_PRIORITY_BLOCKED V2Priority = "PRIORITY_BLOCKED"
)

// All allowed values of V2Priority enum
var AllowedV2PriorityEnumValues = []V2Priority{
	"PRIORITY_UNSPECIFIED",
	"PRIORITY_LOW",
	"PRIORITY_MEDIUM",
	"PRIORITY_HIGH",
	"PRIORITY_BLOCKED",
}

func (v *V2Priority) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V2Priority(value)
	for _, existing := range AllowedV2PriorityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V2Priority", value)
}

// NewV2PriorityFromValue returns a pointer to a valid V2Priority
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV2PriorityFromValue(v string) (*V2Priority, error) {
	ev := V2Priority(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V2Priority: valid values are %v", v, AllowedV2PriorityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V2Priority) IsValid() bool {
	for _, existing := range AllowedV2PriorityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v2.Priority value
func (v V2Priority) Ptr() *V2Priority {
	return &v
}

type NullableV2Priority struct {
	value *V2Priority
	isSet bool
}

func (v NullableV2Priority) Get() *V2Priority {
	return v.value
}

func (v *NullableV2Priority) Set(val *V2Priority) {
	v.value = val
	v.isSet = true
}

func (v NullableV2Priority) IsSet() bool {
	return v.isSet
}

func (v *NullableV2Priority) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2Priority(val *V2Priority) *NullableV2Priority {
	return &NullableV2Priority{value: val, isSet: true}
}

func (v NullableV2Priority) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2Priority) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

