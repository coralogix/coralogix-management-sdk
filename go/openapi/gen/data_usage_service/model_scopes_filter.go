/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_usage_service

import (
	"encoding/json"
)

// checks if the ScopesFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScopesFilter{}

// ScopesFilter This data structure represents a filter for scopes.
type ScopesFilter struct {
	Application []string `json:"application,omitempty"`
	Subsystem []string `json:"subsystem,omitempty"`
}

// NewScopesFilter instantiates a new ScopesFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopesFilter() *ScopesFilter {
	this := ScopesFilter{}
	return &this
}

// NewScopesFilterWithDefaults instantiates a new ScopesFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopesFilterWithDefaults() *ScopesFilter {
	this := ScopesFilter{}
	return &this
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *ScopesFilter) GetApplication() []string {
	if o == nil || IsNil(o.Application) {
		var ret []string
		return ret
	}
	return o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopesFilter) GetApplicationOk() ([]string, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *ScopesFilter) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given []string and assigns it to the Application field.
func (o *ScopesFilter) SetApplication(v []string) {
	o.Application = v
}

// GetSubsystem returns the Subsystem field value if set, zero value otherwise.
func (o *ScopesFilter) GetSubsystem() []string {
	if o == nil || IsNil(o.Subsystem) {
		var ret []string
		return ret
	}
	return o.Subsystem
}

// GetSubsystemOk returns a tuple with the Subsystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopesFilter) GetSubsystemOk() ([]string, bool) {
	if o == nil || IsNil(o.Subsystem) {
		return nil, false
	}
	return o.Subsystem, true
}

// HasSubsystem returns a boolean if a field has been set.
func (o *ScopesFilter) HasSubsystem() bool {
	if o != nil && !IsNil(o.Subsystem) {
		return true
	}

	return false
}

// SetSubsystem gets a reference to the given []string and assigns it to the Subsystem field.
func (o *ScopesFilter) SetSubsystem(v []string) {
	o.Subsystem = v
}

func (o ScopesFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScopesFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !IsNil(o.Subsystem) {
		toSerialize["subsystem"] = o.Subsystem
	}
	return toSerialize, nil
}

type NullableScopesFilter struct {
	value *ScopesFilter
	isSet bool
}

func (v NullableScopesFilter) Get() *ScopesFilter {
	return v.value
}

func (v *NullableScopesFilter) Set(val *ScopesFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableScopesFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableScopesFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopesFilter(val *ScopesFilter) *NullableScopesFilter {
	return &NullableScopesFilter{value: val, isSet: true}
}

func (v NullableScopesFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopesFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


