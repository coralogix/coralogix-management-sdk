openapi: 3.0.0
info:
  title: ""
  version: 1.0.0
servers:
- url: /
paths:
  /dashboards/dashboards/v1/folders:
    get:
      description: |-
        List all dashboard folders accessible.

        Requires the following permissions:
        - `team-dashboards:Read`
      externalDocs:
        url: ""
      operationId: DashboardFoldersService_ListDashboardFolders
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDashboardFoldersResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: List dashboard folders
      tags:
      - Dashboard folders service
      x-coralogixPermissions:
      - team-dashboards:Read
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders \
            --header 'Authorization: Bearer <API_KEY>'
    post:
      description: No description available
      externalDocs:
        url: ""
      operationId: DashboardFoldersService_CreateDashboardFolder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Create_dashboard_folder_request_data_structure"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDashboardFolderResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Create a dashboard folder
      tags:
      - Dashboard folders service
      x-coralogixPermissions:
      - team-dashboards:Update
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders';

          let options = {
            method: 'POST',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"folder":{"id":"string","name":"string","parentId":"string"},"requestId":"string"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders"

          payload = {
              "folder": {
                  "id": "string",
                  "name": "string",
                  "parentId": "string"
              },
              "requestId": "string"
          }
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"folder":{"id":"string","name":"string","parentId":"string"},"requestId":"string"}'
    put:
      description: No description available
      externalDocs:
        url: ""
      operationId: DashboardFoldersService_ReplaceDashboardFolder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Replace_dashboard_folder_request_data_structure"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplaceDashboardFolderResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Replace a dashboard folder
      tags:
      - Dashboard folders service
      x-coralogixPermissions:
      - team-dashboards:Update
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders';

          let options = {
            method: 'PUT',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"folder":{"id":"string","name":"string","parentId":"string"},"requestId":"string"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders"

          payload = {
              "folder": {
                  "id": "string",
                  "name": "string",
                  "parentId": "string"
              },
              "requestId": "string"
          }
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("PUT", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"folder":{"id":"string","name":"string","parentId":"string"},"requestId":"string"}'
  /dashboards/dashboards/v1/folders/{folder_id}:
    delete:
      description: No description available
      externalDocs:
        url: ""
      operationId: DashboardFoldersService_DeleteDashboardFolder
      parameters:
      - explode: false
        in: path
        name: folder_id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: request_id
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteDashboardFolderResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete a dashboard folder
      tags:
      - Dashboard folders service
      x-coralogixPermissions:
      - team-dashboards:Update
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders/%7Bfolder_id%7D?request_id=SOME_STRING_VALUE';

          let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders/%7Bfolder_id%7D"

          querystring = {"request_id":"SOME_STRING_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("DELETE", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders/%7Bfolder_id%7D?request_id=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
    get:
      description: |-
        Returns a dashboard folder data.

        Requires the following permissions:
        - `team-dashboards:Read`
      externalDocs:
        url: ""
      operationId: DashboardFoldersService_GetDashboardFolder
      parameters:
      - explode: false
        in: path
        name: folder_id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: request_id
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDashboardFolderResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get a dashboard folder
      tags:
      - Dashboard folders service
      x-coralogixPermissions:
      - team-dashboards:Read
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders/%7Bfolder_id%7D?request_id=SOME_STRING_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders/%7Bfolder_id%7D"

          querystring = {"request_id":"SOME_STRING_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders/%7Bfolder_id%7D?request_id=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
components:
  schemas:
    ColorsByAggregation:
      additionalProperties: false
      properties:
        aggregation:
          $ref: "#/components/schemas/ColorsByAggregation"
      type: object
    ColorsByGroupBy:
      additionalProperties: false
      properties:
        groupBy:
          $ref: "#/components/schemas/ColorsByGroupBy"
      type: object
    ColorsByStack:
      additionalProperties: false
      properties:
        stack:
          $ref: "#/components/schemas/ColorsByStack"
      type: object
    CreateDashboardFolderResponse:
      example:
        folderId: folderId
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
      properties:
        folderId:
          type: string
      title: Create dashboard folder response data structure
      type: object
    DashboardFolder:
      example:
        name: name
        id: id
        parentId: parentId
      properties:
        id:
          type: string
        name:
          type: string
        parentId:
          type: string
      type: object
    DeleteDashboardFolderResponse:
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
      title: Delete dashboard folder response data structure
      type: object
    FieldGroup:
      properties:
        name:
          type: string
        value:
          type: string
      type: object
    FilterPathAndValues:
      oneOf:
      - $ref: "#/components/schemas/FilterPathAndValuesMultipleValues"
      - $ref: "#/components/schemas/FilterPathAndValuesFilters"
    FilterPathAndValuesFilters:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        filters:
          $ref: "#/components/schemas/Filters"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
    FilterPathAndValuesMultipleValues:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        multipleValues:
          $ref: "#/components/schemas/MultipleValues"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
    Filters:
      description: This data structure represents a filter
      externalDocs:
        url: ""
      properties:
        operator:
          $ref: "#/components/schemas/v3.FilterOperator"
        pathAndValues:
          items:
            $ref: "#/components/schemas/FilterPathAndValues"
          type: array
      required:
      - pathAndValues
      title: Filters
      type: object
    GetDashboardFolderResponse:
      example:
        folder:
          name: name
          id: id
          parentId: parentId
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
      properties:
        folder:
          $ref: "#/components/schemas/DashboardFolder"
      title: Get dashboard folder response data structure
      type: object
    ListDashboardFoldersResponse:
      example:
        folder:
        - name: name
          id: id
          parentId: parentId
        - name: name
          id: id
          parentId: parentId
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
      properties:
        folder:
          items:
            $ref: "#/components/schemas/DashboardFolder"
          type: array
      title: List dashboard folders response data structure
      type: object
    MultipleValues:
      properties:
        matcher:
          $ref: "#/components/schemas/events.v3.FilterMatcher"
        values:
          items:
            type: string
          type: array
      type: object
    ReplaceDashboardFolderResponse:
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
      title: Replace dashboard folder response data structure
      type: object
    YAxisViewByCategory:
      additionalProperties: false
      properties:
        category:
          $ref: "#/components/schemas/YAxisViewByCategory"
      type: object
    YAxisViewByValue:
      additionalProperties: false
      properties:
        value:
          $ref: "#/components/schemas/YAxisViewByValue"
      type: object
    common.Group:
      properties:
        field:
          $ref: "#/components/schemas/FieldGroup"
        groups:
          items:
            $ref: "#/components/schemas/common.Group"
          type: array
        value:
          format: double
          type: number
      type: object
    events.v3.FilterMatcher:
      enum:
      - FILTER_MATCHER_TEXT_OR_UNSPECIFIED
      - FILTER_MATCHER_REGEXP
      type: string
    v3.FilterOperator:
      enum:
      - FILTER_OPERATOR_AND_OR_UNSPECIFIED
      - FILTER_OPERATOR_OR
      type: string
    Replace_dashboard_folder_request_data_structure:
      additionalProperties: false
      properties:
        folder:
          $ref: "#/components/schemas/DashboardFolder"
        requestId:
          type: string
      title: Replace dashboard folder request data structure
      type: object
    Create_dashboard_folder_request_data_structure:
      additionalProperties: false
      properties:
        folder:
          $ref: "#/components/schemas/DashboardFolder"
        requestId:
          type: string
      title: Create dashboard folder request data structure
      type: object
  securitySchemes:
    apiKeyAuth:
      description: API key authentication
      in: header
      name: Authorization
      type: apiKey
