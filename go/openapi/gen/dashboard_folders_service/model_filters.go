/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_folders_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Filters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Filters{}

// Filters This data structure represents a filter
type Filters struct {
	Operator *V3FilterOperator `json:"operator,omitempty"`
	PathAndValues []FilterPathAndValues `json:"pathAndValues"`
}

type _Filters Filters

// NewFilters instantiates a new Filters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilters(pathAndValues []FilterPathAndValues) *Filters {
	this := Filters{}
	this.PathAndValues = pathAndValues
	return &this
}

// NewFiltersWithDefaults instantiates a new Filters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiltersWithDefaults() *Filters {
	this := Filters{}
	return &this
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *Filters) GetOperator() V3FilterOperator {
	if o == nil || IsNil(o.Operator) {
		var ret V3FilterOperator
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filters) GetOperatorOk() (*V3FilterOperator, bool) {
	if o == nil || IsNil(o.Operator) {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *Filters) HasOperator() bool {
	if o != nil && !IsNil(o.Operator) {
		return true
	}

	return false
}

// SetOperator gets a reference to the given V3FilterOperator and assigns it to the Operator field.
func (o *Filters) SetOperator(v V3FilterOperator) {
	o.Operator = &v
}

// GetPathAndValues returns the PathAndValues field value
func (o *Filters) GetPathAndValues() []FilterPathAndValues {
	if o == nil {
		var ret []FilterPathAndValues
		return ret
	}

	return o.PathAndValues
}

// GetPathAndValuesOk returns a tuple with the PathAndValues field value
// and a boolean to check if the value has been set.
func (o *Filters) GetPathAndValuesOk() ([]FilterPathAndValues, bool) {
	if o == nil {
		return nil, false
	}
	return o.PathAndValues, true
}

// SetPathAndValues sets field value
func (o *Filters) SetPathAndValues(v []FilterPathAndValues) {
	o.PathAndValues = v
}

func (o Filters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Filters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Operator) {
		toSerialize["operator"] = o.Operator
	}
	toSerialize["pathAndValues"] = o.PathAndValues
	return toSerialize, nil
}

func (o *Filters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pathAndValues",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFilters := _Filters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFilters)

	if err != nil {
		return err
	}

	*o = Filters(varFilters)

	return err
}

type NullableFilters struct {
	value *Filters
	isSet bool
}

func (v NullableFilters) Get() *Filters {
	return v.value
}

func (v *NullableFilters) Set(val *Filters) {
	v.value = val
	v.isSet = true
}

func (v NullableFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilters(val *Filters) *NullableFilters {
	return &NullableFilters{value: val, isSet: true}
}

func (v NullableFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


