/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_folders_service

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DashboardFoldersServiceAPIService DashboardFoldersServiceAPI service
type DashboardFoldersServiceAPIService service

type ApiDashboardFoldersServiceCreateDashboardFolderRequest struct {
	ctx context.Context
	ApiService *DashboardFoldersServiceAPIService
	createDashboardFolderRequestDataStructure *CreateDashboardFolderRequestDataStructure
}

func (r ApiDashboardFoldersServiceCreateDashboardFolderRequest) CreateDashboardFolderRequestDataStructure(createDashboardFolderRequestDataStructure CreateDashboardFolderRequestDataStructure) ApiDashboardFoldersServiceCreateDashboardFolderRequest {
	r.createDashboardFolderRequestDataStructure = &createDashboardFolderRequestDataStructure
	return r
}

func (r ApiDashboardFoldersServiceCreateDashboardFolderRequest) Execute() (*CreateDashboardFolderResponse, *http.Response, error) {
	return r.ApiService.DashboardFoldersServiceCreateDashboardFolderExecute(r)
}

/*
DashboardFoldersServiceCreateDashboardFolder Create a dashboard folder

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDashboardFoldersServiceCreateDashboardFolderRequest
*/
func (a *DashboardFoldersServiceAPIService) DashboardFoldersServiceCreateDashboardFolder(ctx context.Context) ApiDashboardFoldersServiceCreateDashboardFolderRequest {
	return ApiDashboardFoldersServiceCreateDashboardFolderRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateDashboardFolderResponse
func (a *DashboardFoldersServiceAPIService) DashboardFoldersServiceCreateDashboardFolderExecute(r ApiDashboardFoldersServiceCreateDashboardFolderRequest) (*CreateDashboardFolderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateDashboardFolderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardFoldersServiceAPIService.DashboardFoldersServiceCreateDashboardFolder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dashboards/dashboards/v1/folders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createDashboardFolderRequestDataStructure
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDashboardFoldersServiceDeleteDashboardFolderRequest struct {
	ctx context.Context
	ApiService *DashboardFoldersServiceAPIService
	folderId string
	requestId *string
}

func (r ApiDashboardFoldersServiceDeleteDashboardFolderRequest) RequestId(requestId string) ApiDashboardFoldersServiceDeleteDashboardFolderRequest {
	r.requestId = &requestId
	return r
}

func (r ApiDashboardFoldersServiceDeleteDashboardFolderRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DashboardFoldersServiceDeleteDashboardFolderExecute(r)
}

/*
DashboardFoldersServiceDeleteDashboardFolder Delete a dashboard folder

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param folderId
 @return ApiDashboardFoldersServiceDeleteDashboardFolderRequest
*/
func (a *DashboardFoldersServiceAPIService) DashboardFoldersServiceDeleteDashboardFolder(ctx context.Context, folderId string) ApiDashboardFoldersServiceDeleteDashboardFolderRequest {
	return ApiDashboardFoldersServiceDeleteDashboardFolderRequest{
		ApiService: a,
		ctx: ctx,
		folderId: folderId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DashboardFoldersServiceAPIService) DashboardFoldersServiceDeleteDashboardFolderExecute(r ApiDashboardFoldersServiceDeleteDashboardFolderRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardFoldersServiceAPIService.DashboardFoldersServiceDeleteDashboardFolder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dashboards/dashboards/v1/folders/{folder_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"folder_id"+"}", url.PathEscape(parameterValueToString(r.folderId, "folderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.requestId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "request_id", r.requestId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDashboardFoldersServiceGetDashboardFolderRequest struct {
	ctx context.Context
	ApiService *DashboardFoldersServiceAPIService
	folderId string
	requestId *string
}

func (r ApiDashboardFoldersServiceGetDashboardFolderRequest) RequestId(requestId string) ApiDashboardFoldersServiceGetDashboardFolderRequest {
	r.requestId = &requestId
	return r
}

func (r ApiDashboardFoldersServiceGetDashboardFolderRequest) Execute() (*GetDashboardFolderResponse, *http.Response, error) {
	return r.ApiService.DashboardFoldersServiceGetDashboardFolderExecute(r)
}

/*
DashboardFoldersServiceGetDashboardFolder Get a dashboard folder

Returns a dashboard folder data.

Requires the following permissions:
- `team-dashboards:Read`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param folderId
 @return ApiDashboardFoldersServiceGetDashboardFolderRequest
*/
func (a *DashboardFoldersServiceAPIService) DashboardFoldersServiceGetDashboardFolder(ctx context.Context, folderId string) ApiDashboardFoldersServiceGetDashboardFolderRequest {
	return ApiDashboardFoldersServiceGetDashboardFolderRequest{
		ApiService: a,
		ctx: ctx,
		folderId: folderId,
	}
}

// Execute executes the request
//  @return GetDashboardFolderResponse
func (a *DashboardFoldersServiceAPIService) DashboardFoldersServiceGetDashboardFolderExecute(r ApiDashboardFoldersServiceGetDashboardFolderRequest) (*GetDashboardFolderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetDashboardFolderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardFoldersServiceAPIService.DashboardFoldersServiceGetDashboardFolder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dashboards/dashboards/v1/folders/{folder_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"folder_id"+"}", url.PathEscape(parameterValueToString(r.folderId, "folderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.requestId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "request_id", r.requestId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDashboardFoldersServiceListDashboardFoldersRequest struct {
	ctx context.Context
	ApiService *DashboardFoldersServiceAPIService
}

func (r ApiDashboardFoldersServiceListDashboardFoldersRequest) Execute() (*ListDashboardFoldersResponse, *http.Response, error) {
	return r.ApiService.DashboardFoldersServiceListDashboardFoldersExecute(r)
}

/*
DashboardFoldersServiceListDashboardFolders List dashboard folders

List all dashboard folders accessible.

Requires the following permissions:
- `team-dashboards:Read`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDashboardFoldersServiceListDashboardFoldersRequest
*/
func (a *DashboardFoldersServiceAPIService) DashboardFoldersServiceListDashboardFolders(ctx context.Context) ApiDashboardFoldersServiceListDashboardFoldersRequest {
	return ApiDashboardFoldersServiceListDashboardFoldersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListDashboardFoldersResponse
func (a *DashboardFoldersServiceAPIService) DashboardFoldersServiceListDashboardFoldersExecute(r ApiDashboardFoldersServiceListDashboardFoldersRequest) (*ListDashboardFoldersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListDashboardFoldersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardFoldersServiceAPIService.DashboardFoldersServiceListDashboardFolders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dashboards/dashboards/v1/folders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDashboardFoldersServiceReplaceDashboardFolderRequest struct {
	ctx context.Context
	ApiService *DashboardFoldersServiceAPIService
	replaceDashboardFolderRequestDataStructure *ReplaceDashboardFolderRequestDataStructure
}

func (r ApiDashboardFoldersServiceReplaceDashboardFolderRequest) ReplaceDashboardFolderRequestDataStructure(replaceDashboardFolderRequestDataStructure ReplaceDashboardFolderRequestDataStructure) ApiDashboardFoldersServiceReplaceDashboardFolderRequest {
	r.replaceDashboardFolderRequestDataStructure = &replaceDashboardFolderRequestDataStructure
	return r
}

func (r ApiDashboardFoldersServiceReplaceDashboardFolderRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DashboardFoldersServiceReplaceDashboardFolderExecute(r)
}

/*
DashboardFoldersServiceReplaceDashboardFolder Replace a dashboard folder

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDashboardFoldersServiceReplaceDashboardFolderRequest
*/
func (a *DashboardFoldersServiceAPIService) DashboardFoldersServiceReplaceDashboardFolder(ctx context.Context) ApiDashboardFoldersServiceReplaceDashboardFolderRequest {
	return ApiDashboardFoldersServiceReplaceDashboardFolderRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DashboardFoldersServiceAPIService) DashboardFoldersServiceReplaceDashboardFolderExecute(r ApiDashboardFoldersServiceReplaceDashboardFolderRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardFoldersServiceAPIService.DashboardFoldersServiceReplaceDashboardFolder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dashboards/dashboards/v1/folders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.replaceDashboardFolderRequestDataStructure
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
