/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package custom_enrichments_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CustomEnrichmentData - struct for CustomEnrichmentData
type CustomEnrichmentData struct {
	CustomEnrichmentDataBinary *CustomEnrichmentDataBinary
	CustomEnrichmentDataTextual *CustomEnrichmentDataTextual
}

// CustomEnrichmentDataBinaryAsCustomEnrichmentData is a convenience function that returns CustomEnrichmentDataBinary wrapped in CustomEnrichmentData
func CustomEnrichmentDataBinaryAsCustomEnrichmentData(v *CustomEnrichmentDataBinary) CustomEnrichmentData {
	return CustomEnrichmentData{
		CustomEnrichmentDataBinary: v,
	}
}

// CustomEnrichmentDataTextualAsCustomEnrichmentData is a convenience function that returns CustomEnrichmentDataTextual wrapped in CustomEnrichmentData
func CustomEnrichmentDataTextualAsCustomEnrichmentData(v *CustomEnrichmentDataTextual) CustomEnrichmentData {
	return CustomEnrichmentData{
		CustomEnrichmentDataTextual: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CustomEnrichmentData) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CustomEnrichmentDataBinary
	err = newStrictDecoder(data).Decode(&dst.CustomEnrichmentDataBinary)
	if err == nil {
		jsonCustomEnrichmentDataBinary, _ := json.Marshal(dst.CustomEnrichmentDataBinary)
		if string(jsonCustomEnrichmentDataBinary) == "{}" { // empty struct
			dst.CustomEnrichmentDataBinary = nil
		} else {
			if err = validator.Validate(dst.CustomEnrichmentDataBinary); err != nil {
				dst.CustomEnrichmentDataBinary = nil
			} else {
				match++
			}
		}
	} else {
		dst.CustomEnrichmentDataBinary = nil
	}

	// try to unmarshal data into CustomEnrichmentDataTextual
	err = newStrictDecoder(data).Decode(&dst.CustomEnrichmentDataTextual)
	if err == nil {
		jsonCustomEnrichmentDataTextual, _ := json.Marshal(dst.CustomEnrichmentDataTextual)
		if string(jsonCustomEnrichmentDataTextual) == "{}" { // empty struct
			dst.CustomEnrichmentDataTextual = nil
		} else {
			if err = validator.Validate(dst.CustomEnrichmentDataTextual); err != nil {
				dst.CustomEnrichmentDataTextual = nil
			} else {
				match++
			}
		}
	} else {
		dst.CustomEnrichmentDataTextual = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CustomEnrichmentDataBinary = nil
		dst.CustomEnrichmentDataTextual = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CustomEnrichmentData)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CustomEnrichmentData)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CustomEnrichmentData) MarshalJSON() ([]byte, error) {
	if src.CustomEnrichmentDataBinary != nil {
		return json.Marshal(&src.CustomEnrichmentDataBinary)
	}

	if src.CustomEnrichmentDataTextual != nil {
		return json.Marshal(&src.CustomEnrichmentDataTextual)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CustomEnrichmentData) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CustomEnrichmentDataBinary != nil {
		return obj.CustomEnrichmentDataBinary
	}

	if obj.CustomEnrichmentDataTextual != nil {
		return obj.CustomEnrichmentDataTextual
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CustomEnrichmentData) GetActualInstanceValue() (interface{}) {
	if obj.CustomEnrichmentDataBinary != nil {
		return *obj.CustomEnrichmentDataBinary
	}

	if obj.CustomEnrichmentDataTextual != nil {
		return *obj.CustomEnrichmentDataTextual
	}

	// all schemas are nil
	return nil
}

type NullableCustomEnrichmentData struct {
	value *CustomEnrichmentData
	isSet bool
}

func (v NullableCustomEnrichmentData) Get() *CustomEnrichmentData {
	return v.value
}

func (v *NullableCustomEnrichmentData) Set(val *CustomEnrichmentData) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomEnrichmentData) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomEnrichmentData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomEnrichmentData(val *CustomEnrichmentData) *NullableCustomEnrichmentData {
	return &NullableCustomEnrichmentData{value: val, isSet: true}
}

func (v NullableCustomEnrichmentData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomEnrichmentData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


