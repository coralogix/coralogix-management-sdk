/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package custom_enrichments_service

import (
	"encoding/json"
)

// checks if the CustomEnrichmentDataOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomEnrichmentDataOneOf1{}

// CustomEnrichmentDataOneOf1 struct for CustomEnrichmentDataOneOf1
type CustomEnrichmentDataOneOf1 struct {
	Binary *string `json:"binary,omitempty"`
	Definition *CustomEnrichment `json:"definition,omitempty"`
}

// NewCustomEnrichmentDataOneOf1 instantiates a new CustomEnrichmentDataOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomEnrichmentDataOneOf1() *CustomEnrichmentDataOneOf1 {
	this := CustomEnrichmentDataOneOf1{}
	return &this
}

// NewCustomEnrichmentDataOneOf1WithDefaults instantiates a new CustomEnrichmentDataOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomEnrichmentDataOneOf1WithDefaults() *CustomEnrichmentDataOneOf1 {
	this := CustomEnrichmentDataOneOf1{}
	return &this
}

// GetBinary returns the Binary field value if set, zero value otherwise.
func (o *CustomEnrichmentDataOneOf1) GetBinary() string {
	if o == nil || IsNil(o.Binary) {
		var ret string
		return ret
	}
	return *o.Binary
}

// GetBinaryOk returns a tuple with the Binary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomEnrichmentDataOneOf1) GetBinaryOk() (*string, bool) {
	if o == nil || IsNil(o.Binary) {
		return nil, false
	}
	return o.Binary, true
}

// HasBinary returns a boolean if a field has been set.
func (o *CustomEnrichmentDataOneOf1) HasBinary() bool {
	if o != nil && !IsNil(o.Binary) {
		return true
	}

	return false
}

// SetBinary gets a reference to the given string and assigns it to the Binary field.
func (o *CustomEnrichmentDataOneOf1) SetBinary(v string) {
	o.Binary = &v
}

// GetDefinition returns the Definition field value if set, zero value otherwise.
func (o *CustomEnrichmentDataOneOf1) GetDefinition() CustomEnrichment {
	if o == nil || IsNil(o.Definition) {
		var ret CustomEnrichment
		return ret
	}
	return *o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomEnrichmentDataOneOf1) GetDefinitionOk() (*CustomEnrichment, bool) {
	if o == nil || IsNil(o.Definition) {
		return nil, false
	}
	return o.Definition, true
}

// HasDefinition returns a boolean if a field has been set.
func (o *CustomEnrichmentDataOneOf1) HasDefinition() bool {
	if o != nil && !IsNil(o.Definition) {
		return true
	}

	return false
}

// SetDefinition gets a reference to the given CustomEnrichment and assigns it to the Definition field.
func (o *CustomEnrichmentDataOneOf1) SetDefinition(v CustomEnrichment) {
	o.Definition = &v
}

func (o CustomEnrichmentDataOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomEnrichmentDataOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Binary) {
		toSerialize["binary"] = o.Binary
	}
	if !IsNil(o.Definition) {
		toSerialize["definition"] = o.Definition
	}
	return toSerialize, nil
}

type NullableCustomEnrichmentDataOneOf1 struct {
	value *CustomEnrichmentDataOneOf1
	isSet bool
}

func (v NullableCustomEnrichmentDataOneOf1) Get() *CustomEnrichmentDataOneOf1 {
	return v.value
}

func (v *NullableCustomEnrichmentDataOneOf1) Set(val *CustomEnrichmentDataOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomEnrichmentDataOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomEnrichmentDataOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomEnrichmentDataOneOf1(val *CustomEnrichmentDataOneOf1) *NullableCustomEnrichmentDataOneOf1 {
	return &NullableCustomEnrichmentDataOneOf1{value: val, isSet: true}
}

func (v NullableCustomEnrichmentDataOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomEnrichmentDataOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


