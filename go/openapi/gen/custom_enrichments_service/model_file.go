/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package custom_enrichments_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// File - struct for File
type File struct {
	FileBinary *FileBinary
	FileTextual *FileTextual
}

// FileBinaryAsFile is a convenience function that returns FileBinary wrapped in File
func FileBinaryAsFile(v *FileBinary) File {
	return File{
		FileBinary: v,
	}
}

// FileTextualAsFile is a convenience function that returns FileTextual wrapped in File
func FileTextualAsFile(v *FileTextual) File {
	return File{
		FileTextual: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *File) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FileBinary
	err = newStrictDecoder(data).Decode(&dst.FileBinary)
	if err == nil {
		jsonFileBinary, _ := json.Marshal(dst.FileBinary)
		if string(jsonFileBinary) == "{}" { // empty struct
			dst.FileBinary = nil
		} else {
			if err = validator.Validate(dst.FileBinary); err != nil {
				dst.FileBinary = nil
			} else {
				match++
			}
		}
	} else {
		dst.FileBinary = nil
	}

	// try to unmarshal data into FileTextual
	err = newStrictDecoder(data).Decode(&dst.FileTextual)
	if err == nil {
		jsonFileTextual, _ := json.Marshal(dst.FileTextual)
		if string(jsonFileTextual) == "{}" { // empty struct
			dst.FileTextual = nil
		} else {
			if err = validator.Validate(dst.FileTextual); err != nil {
				dst.FileTextual = nil
			} else {
				match++
			}
		}
	} else {
		dst.FileTextual = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FileBinary = nil
		dst.FileTextual = nil

		return fmt.Errorf("data matches more than one schema in oneOf(File)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(File)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src File) MarshalJSON() ([]byte, error) {
	if src.FileBinary != nil {
		return json.Marshal(&src.FileBinary)
	}

	if src.FileTextual != nil {
		return json.Marshal(&src.FileTextual)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *File) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FileBinary != nil {
		return obj.FileBinary
	}

	if obj.FileTextual != nil {
		return obj.FileTextual
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj File) GetActualInstanceValue() (interface{}) {
	if obj.FileBinary != nil {
		return *obj.FileBinary
	}

	if obj.FileTextual != nil {
		return *obj.FileTextual
	}

	// all schemas are nil
	return nil
}

type NullableFile struct {
	value *File
	isSet bool
}

func (v NullableFile) Get() *File {
	return v.value
}

func (v *NullableFile) Set(val *File) {
	v.value = val
	v.isSet = true
}

func (v NullableFile) IsSet() bool {
	return v.isSet
}

func (v *NullableFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFile(val *File) *NullableFile {
	return &NullableFile{value: val, isSet: true}
}

func (v NullableFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


