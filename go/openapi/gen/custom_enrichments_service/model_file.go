/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package custom_enrichments_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// File - struct for File
type File struct {
	File1 *File1
	File2 *File2
}

// File1AsFile is a convenience function that returns File1 wrapped in File
func File1AsFile(v *File1) File {
	return File{
		File1: v,
	}
}

// File2AsFile is a convenience function that returns File2 wrapped in File
func File2AsFile(v *File2) File {
	return File{
		File2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *File) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into File1
	err = newStrictDecoder(data).Decode(&dst.File1)
	if err == nil {
		jsonFile1, _ := json.Marshal(dst.File1)
		if string(jsonFile1) == "{}" { // empty struct
			dst.File1 = nil
		} else {
			if err = validator.Validate(dst.File1); err != nil {
				dst.File1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.File1 = nil
	}

	// try to unmarshal data into File2
	err = newStrictDecoder(data).Decode(&dst.File2)
	if err == nil {
		jsonFile2, _ := json.Marshal(dst.File2)
		if string(jsonFile2) == "{}" { // empty struct
			dst.File2 = nil
		} else {
			if err = validator.Validate(dst.File2); err != nil {
				dst.File2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.File2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.File1 = nil
		dst.File2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(File)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(File)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src File) MarshalJSON() ([]byte, error) {
	if src.File1 != nil {
		return json.Marshal(&src.File1)
	}

	if src.File2 != nil {
		return json.Marshal(&src.File2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *File) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.File1 != nil {
		return obj.File1
	}

	if obj.File2 != nil {
		return obj.File2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj File) GetActualInstanceValue() (interface{}) {
	if obj.File1 != nil {
		return *obj.File1
	}

	if obj.File2 != nil {
		return *obj.File2
	}

	// all schemas are nil
	return nil
}

type NullableFile struct {
	value *File
	isSet bool
}

func (v NullableFile) Get() *File {
	return v.value
}

func (v *NullableFile) Set(val *File) {
	v.value = val
	v.isSet = true
}

func (v NullableFile) IsSet() bool {
	return v.isSet
}

func (v *NullableFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFile(val *File) *NullableFile {
	return &NullableFile{value: val, isSet: true}
}

func (v NullableFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


