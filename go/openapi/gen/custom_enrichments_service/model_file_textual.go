/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package custom_enrichments_service

import (
	"encoding/json"
)

// checks if the FileTextual type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileTextual{}

// FileTextual This data structure represents a file
type FileTextual struct {
	Extension *string `json:"extension,omitempty"`
	Name *string `json:"name,omitempty"`
	Size *int64 `json:"size,omitempty"`
	Textual *string `json:"textual,omitempty"`
}

// NewFileTextual instantiates a new FileTextual object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileTextual() *FileTextual {
	this := FileTextual{}
	return &this
}

// NewFileTextualWithDefaults instantiates a new FileTextual object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileTextualWithDefaults() *FileTextual {
	this := FileTextual{}
	return &this
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *FileTextual) GetExtension() string {
	if o == nil || IsNil(o.Extension) {
		var ret string
		return ret
	}
	return *o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileTextual) GetExtensionOk() (*string, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *FileTextual) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given string and assigns it to the Extension field.
func (o *FileTextual) SetExtension(v string) {
	o.Extension = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FileTextual) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileTextual) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FileTextual) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FileTextual) SetName(v string) {
	o.Name = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *FileTextual) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileTextual) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *FileTextual) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *FileTextual) SetSize(v int64) {
	o.Size = &v
}

// GetTextual returns the Textual field value if set, zero value otherwise.
func (o *FileTextual) GetTextual() string {
	if o == nil || IsNil(o.Textual) {
		var ret string
		return ret
	}
	return *o.Textual
}

// GetTextualOk returns a tuple with the Textual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileTextual) GetTextualOk() (*string, bool) {
	if o == nil || IsNil(o.Textual) {
		return nil, false
	}
	return o.Textual, true
}

// HasTextual returns a boolean if a field has been set.
func (o *FileTextual) HasTextual() bool {
	if o != nil && !IsNil(o.Textual) {
		return true
	}

	return false
}

// SetTextual gets a reference to the given string and assigns it to the Textual field.
func (o *FileTextual) SetTextual(v string) {
	o.Textual = &v
}

func (o FileTextual) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileTextual) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Textual) {
		toSerialize["textual"] = o.Textual
	}
	return toSerialize, nil
}

type NullableFileTextual struct {
	value *FileTextual
	isSet bool
}

func (v NullableFileTextual) Get() *FileTextual {
	return v.value
}

func (v *NullableFileTextual) Set(val *FileTextual) {
	v.value = val
	v.isSet = true
}

func (v NullableFileTextual) IsSet() bool {
	return v.isSet
}

func (v *NullableFileTextual) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileTextual(val *FileTextual) *NullableFileTextual {
	return &NullableFileTextual{value: val, isSet: true}
}

func (v NullableFileTextual) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileTextual) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


