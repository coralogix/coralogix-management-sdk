/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package custom_enrichments_service

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// CustomEnrichmentsServiceAPIService CustomEnrichmentsServiceAPI service
type CustomEnrichmentsServiceAPIService service

type ApiCustomEnrichmentServiceCreateCustomEnrichmentRequest struct {
	ctx context.Context
	ApiService *CustomEnrichmentsServiceAPIService
	createCustomEnrichmentRequest *CreateCustomEnrichmentRequest
}

func (r ApiCustomEnrichmentServiceCreateCustomEnrichmentRequest) CreateCustomEnrichmentRequest(createCustomEnrichmentRequest CreateCustomEnrichmentRequest) ApiCustomEnrichmentServiceCreateCustomEnrichmentRequest {
	r.createCustomEnrichmentRequest = &createCustomEnrichmentRequest
	return r
}

func (r ApiCustomEnrichmentServiceCreateCustomEnrichmentRequest) Execute() (*CreateCustomEnrichmentResponse, *http.Response, error) {
	return r.ApiService.CustomEnrichmentServiceCreateCustomEnrichmentExecute(r)
}

/*
CustomEnrichmentServiceCreateCustomEnrichment Create Custom Enrichments

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCustomEnrichmentServiceCreateCustomEnrichmentRequest
*/
func (a *CustomEnrichmentsServiceAPIService) CustomEnrichmentServiceCreateCustomEnrichment(ctx context.Context) ApiCustomEnrichmentServiceCreateCustomEnrichmentRequest {
	return ApiCustomEnrichmentServiceCreateCustomEnrichmentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateCustomEnrichmentResponse
func (a *CustomEnrichmentsServiceAPIService) CustomEnrichmentServiceCreateCustomEnrichmentExecute(r ApiCustomEnrichmentServiceCreateCustomEnrichmentRequest) (*CreateCustomEnrichmentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateCustomEnrichmentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomEnrichmentsServiceAPIService.CustomEnrichmentServiceCreateCustomEnrichment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/custom_enrichment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createCustomEnrichmentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomEnrichmentServiceDeleteCustomEnrichmentRequest struct {
	ctx context.Context
	ApiService *CustomEnrichmentsServiceAPIService
	customEnrichmentId int64
}

func (r ApiCustomEnrichmentServiceDeleteCustomEnrichmentRequest) Execute() (*DeleteCustomEnrichmentResponse, *http.Response, error) {
	return r.ApiService.CustomEnrichmentServiceDeleteCustomEnrichmentExecute(r)
}

/*
CustomEnrichmentServiceDeleteCustomEnrichment Delete Custom Enrichments

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customEnrichmentId
 @return ApiCustomEnrichmentServiceDeleteCustomEnrichmentRequest
*/
func (a *CustomEnrichmentsServiceAPIService) CustomEnrichmentServiceDeleteCustomEnrichment(ctx context.Context, customEnrichmentId int64) ApiCustomEnrichmentServiceDeleteCustomEnrichmentRequest {
	return ApiCustomEnrichmentServiceDeleteCustomEnrichmentRequest{
		ApiService: a,
		ctx: ctx,
		customEnrichmentId: customEnrichmentId,
	}
}

// Execute executes the request
//  @return DeleteCustomEnrichmentResponse
func (a *CustomEnrichmentsServiceAPIService) CustomEnrichmentServiceDeleteCustomEnrichmentExecute(r ApiCustomEnrichmentServiceDeleteCustomEnrichmentRequest) (*DeleteCustomEnrichmentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteCustomEnrichmentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomEnrichmentsServiceAPIService.CustomEnrichmentServiceDeleteCustomEnrichment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/custom_enrichment/{custom_enrichment_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"custom_enrichment_id"+"}", url.PathEscape(parameterValueToString(r.customEnrichmentId, "customEnrichmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomEnrichmentServiceGetCustomEnrichmentRequest struct {
	ctx context.Context
	ApiService *CustomEnrichmentsServiceAPIService
	id int64
}

func (r ApiCustomEnrichmentServiceGetCustomEnrichmentRequest) Execute() (*GetCustomEnrichmentResponse, *http.Response, error) {
	return r.ApiService.CustomEnrichmentServiceGetCustomEnrichmentExecute(r)
}

/*
CustomEnrichmentServiceGetCustomEnrichment Get Custom Enrichment

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiCustomEnrichmentServiceGetCustomEnrichmentRequest
*/
func (a *CustomEnrichmentsServiceAPIService) CustomEnrichmentServiceGetCustomEnrichment(ctx context.Context, id int64) ApiCustomEnrichmentServiceGetCustomEnrichmentRequest {
	return ApiCustomEnrichmentServiceGetCustomEnrichmentRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetCustomEnrichmentResponse
func (a *CustomEnrichmentsServiceAPIService) CustomEnrichmentServiceGetCustomEnrichmentExecute(r ApiCustomEnrichmentServiceGetCustomEnrichmentRequest) (*GetCustomEnrichmentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetCustomEnrichmentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomEnrichmentsServiceAPIService.CustomEnrichmentServiceGetCustomEnrichment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/custom_enrichment/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomEnrichmentServiceGetCustomEnrichmentsRequest struct {
	ctx context.Context
	ApiService *CustomEnrichmentsServiceAPIService
}

func (r ApiCustomEnrichmentServiceGetCustomEnrichmentsRequest) Execute() (*GetCustomEnrichmentsResponse, *http.Response, error) {
	return r.ApiService.CustomEnrichmentServiceGetCustomEnrichmentsExecute(r)
}

/*
CustomEnrichmentServiceGetCustomEnrichments Get Custom Enrichments

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCustomEnrichmentServiceGetCustomEnrichmentsRequest
*/
func (a *CustomEnrichmentsServiceAPIService) CustomEnrichmentServiceGetCustomEnrichments(ctx context.Context) ApiCustomEnrichmentServiceGetCustomEnrichmentsRequest {
	return ApiCustomEnrichmentServiceGetCustomEnrichmentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetCustomEnrichmentsResponse
func (a *CustomEnrichmentsServiceAPIService) CustomEnrichmentServiceGetCustomEnrichmentsExecute(r ApiCustomEnrichmentServiceGetCustomEnrichmentsRequest) (*GetCustomEnrichmentsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetCustomEnrichmentsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomEnrichmentsServiceAPIService.CustomEnrichmentServiceGetCustomEnrichments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/custom_enrichment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomEnrichmentServiceSearchCustomEnrichmentDataRequest struct {
	ctx context.Context
	ApiService *CustomEnrichmentsServiceAPIService
	searchClauses *[]CustomEnrichmentServiceSearchCustomEnrichmentDataSearchClausesParameterInner
}

func (r ApiCustomEnrichmentServiceSearchCustomEnrichmentDataRequest) SearchClauses(searchClauses []CustomEnrichmentServiceSearchCustomEnrichmentDataSearchClausesParameterInner) ApiCustomEnrichmentServiceSearchCustomEnrichmentDataRequest {
	r.searchClauses = &searchClauses
	return r
}

func (r ApiCustomEnrichmentServiceSearchCustomEnrichmentDataRequest) Execute() (*SearchCustomEnrichmentDataResponse, *http.Response, error) {
	return r.ApiService.CustomEnrichmentServiceSearchCustomEnrichmentDataExecute(r)
}

/*
CustomEnrichmentServiceSearchCustomEnrichmentData Search Custom Enrichment Data

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCustomEnrichmentServiceSearchCustomEnrichmentDataRequest
*/
func (a *CustomEnrichmentsServiceAPIService) CustomEnrichmentServiceSearchCustomEnrichmentData(ctx context.Context) ApiCustomEnrichmentServiceSearchCustomEnrichmentDataRequest {
	return ApiCustomEnrichmentServiceSearchCustomEnrichmentDataRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchCustomEnrichmentDataResponse
func (a *CustomEnrichmentsServiceAPIService) CustomEnrichmentServiceSearchCustomEnrichmentDataExecute(r ApiCustomEnrichmentServiceSearchCustomEnrichmentDataRequest) (*SearchCustomEnrichmentDataResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchCustomEnrichmentDataResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomEnrichmentsServiceAPIService.CustomEnrichmentServiceSearchCustomEnrichmentData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/custom_enrichment/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.searchClauses != nil {
		t := *r.searchClauses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "search_clauses", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "search_clauses", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomEnrichmentServiceUpdateCustomEnrichmentRequest struct {
	ctx context.Context
	ApiService *CustomEnrichmentsServiceAPIService
	updateCustomEnrichmentRequest *UpdateCustomEnrichmentRequest
}

func (r ApiCustomEnrichmentServiceUpdateCustomEnrichmentRequest) UpdateCustomEnrichmentRequest(updateCustomEnrichmentRequest UpdateCustomEnrichmentRequest) ApiCustomEnrichmentServiceUpdateCustomEnrichmentRequest {
	r.updateCustomEnrichmentRequest = &updateCustomEnrichmentRequest
	return r
}

func (r ApiCustomEnrichmentServiceUpdateCustomEnrichmentRequest) Execute() (*UpdateCustomEnrichmentResponse, *http.Response, error) {
	return r.ApiService.CustomEnrichmentServiceUpdateCustomEnrichmentExecute(r)
}

/*
CustomEnrichmentServiceUpdateCustomEnrichment Update Custom Enrichment

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCustomEnrichmentServiceUpdateCustomEnrichmentRequest
*/
func (a *CustomEnrichmentsServiceAPIService) CustomEnrichmentServiceUpdateCustomEnrichment(ctx context.Context) ApiCustomEnrichmentServiceUpdateCustomEnrichmentRequest {
	return ApiCustomEnrichmentServiceUpdateCustomEnrichmentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UpdateCustomEnrichmentResponse
func (a *CustomEnrichmentsServiceAPIService) CustomEnrichmentServiceUpdateCustomEnrichmentExecute(r ApiCustomEnrichmentServiceUpdateCustomEnrichmentRequest) (*UpdateCustomEnrichmentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateCustomEnrichmentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomEnrichmentsServiceAPIService.CustomEnrichmentServiceUpdateCustomEnrichment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/custom_enrichment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateCustomEnrichmentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
