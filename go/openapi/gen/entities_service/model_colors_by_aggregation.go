/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entities_service

import (
	"encoding/json"
)

// checks if the ColorsByAggregation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ColorsByAggregation{}

// ColorsByAggregation struct for ColorsByAggregation
type ColorsByAggregation struct {
	Aggregation *ColorsByAggregation `json:"aggregation,omitempty"`
}

// NewColorsByAggregation instantiates a new ColorsByAggregation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColorsByAggregation() *ColorsByAggregation {
	this := ColorsByAggregation{}
	return &this
}

// NewColorsByAggregationWithDefaults instantiates a new ColorsByAggregation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColorsByAggregationWithDefaults() *ColorsByAggregation {
	this := ColorsByAggregation{}
	return &this
}

// GetAggregation returns the Aggregation field value if set, zero value otherwise.
func (o *ColorsByAggregation) GetAggregation() ColorsByAggregation {
	if o == nil || IsNil(o.Aggregation) {
		var ret ColorsByAggregation
		return ret
	}
	return *o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorsByAggregation) GetAggregationOk() (*ColorsByAggregation, bool) {
	if o == nil || IsNil(o.Aggregation) {
		return nil, false
	}
	return o.Aggregation, true
}

// HasAggregation returns a boolean if a field has been set.
func (o *ColorsByAggregation) HasAggregation() bool {
	if o != nil && !IsNil(o.Aggregation) {
		return true
	}

	return false
}

// SetAggregation gets a reference to the given ColorsByAggregation and assigns it to the Aggregation field.
func (o *ColorsByAggregation) SetAggregation(v ColorsByAggregation) {
	o.Aggregation = &v
}

func (o ColorsByAggregation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ColorsByAggregation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aggregation) {
		toSerialize["aggregation"] = o.Aggregation
	}
	return toSerialize, nil
}

type NullableColorsByAggregation struct {
	value *ColorsByAggregation
	isSet bool
}

func (v NullableColorsByAggregation) Get() *ColorsByAggregation {
	return v.value
}

func (v *NullableColorsByAggregation) Set(val *ColorsByAggregation) {
	v.value = val
	v.isSet = true
}

func (v NullableColorsByAggregation) IsSet() bool {
	return v.isSet
}

func (v *NullableColorsByAggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColorsByAggregation(val *ColorsByAggregation) *NullableColorsByAggregation {
	return &NullableColorsByAggregation{value: val, isSet: true}
}

func (v NullableColorsByAggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColorsByAggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


