/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo_service

import (
	"encoding/json"
	"fmt"
)

// ServicesV1SloStatus the model 'ServicesV1SloStatus'
type ServicesV1SloStatus string

// List of services.v1.SloStatus
const (
	SERVICESV1SLOSTATUS_SLO_STATUS_UNSPECIFIED ServicesV1SloStatus = "SLO_STATUS_UNSPECIFIED"
	SERVICESV1SLOSTATUS_SLO_STATUS_OK ServicesV1SloStatus = "SLO_STATUS_OK"
	SERVICESV1SLOSTATUS_SLO_STATUS_BREACHED ServicesV1SloStatus = "SLO_STATUS_BREACHED"
)

// All allowed values of ServicesV1SloStatus enum
var AllowedServicesV1SloStatusEnumValues = []ServicesV1SloStatus{
	"SLO_STATUS_UNSPECIFIED",
	"SLO_STATUS_OK",
	"SLO_STATUS_BREACHED",
}

func (v *ServicesV1SloStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServicesV1SloStatus(value)
	for _, existing := range AllowedServicesV1SloStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServicesV1SloStatus", value)
}

// NewServicesV1SloStatusFromValue returns a pointer to a valid ServicesV1SloStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServicesV1SloStatusFromValue(v string) (*ServicesV1SloStatus, error) {
	ev := ServicesV1SloStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServicesV1SloStatus: valid values are %v", v, AllowedServicesV1SloStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServicesV1SloStatus) IsValid() bool {
	for _, existing := range AllowedServicesV1SloStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to services.v1.SloStatus value
func (v ServicesV1SloStatus) Ptr() *ServicesV1SloStatus {
	return &v
}

type NullableServicesV1SloStatus struct {
	value *ServicesV1SloStatus
	isSet bool
}

func (v NullableServicesV1SloStatus) Get() *ServicesV1SloStatus {
	return v.value
}

func (v *NullableServicesV1SloStatus) Set(val *ServicesV1SloStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesV1SloStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesV1SloStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesV1SloStatus(val *ServicesV1SloStatus) *NullableServicesV1SloStatus {
	return &NullableServicesV1SloStatus{value: val, isSet: true}
}

func (v NullableServicesV1SloStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesV1SloStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

