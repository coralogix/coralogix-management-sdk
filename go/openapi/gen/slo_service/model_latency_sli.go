/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LatencySli type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LatencySli{}

// LatencySli This data structure represents a Latency Service Level Indicator (SLO) in Coralogix APM.
type LatencySli struct {
	ThresholdMicroseconds string `json:"thresholdMicroseconds"`
	ThresholdSymbol ThresholdSymbol `json:"thresholdSymbol"`
}

type _LatencySli LatencySli

// NewLatencySli instantiates a new LatencySli object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLatencySli(thresholdMicroseconds string, thresholdSymbol ThresholdSymbol) *LatencySli {
	this := LatencySli{}
	this.ThresholdMicroseconds = thresholdMicroseconds
	this.ThresholdSymbol = thresholdSymbol
	return &this
}

// NewLatencySliWithDefaults instantiates a new LatencySli object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLatencySliWithDefaults() *LatencySli {
	this := LatencySli{}
	return &this
}

// GetThresholdMicroseconds returns the ThresholdMicroseconds field value
func (o *LatencySli) GetThresholdMicroseconds() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ThresholdMicroseconds
}

// GetThresholdMicrosecondsOk returns a tuple with the ThresholdMicroseconds field value
// and a boolean to check if the value has been set.
func (o *LatencySli) GetThresholdMicrosecondsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThresholdMicroseconds, true
}

// SetThresholdMicroseconds sets field value
func (o *LatencySli) SetThresholdMicroseconds(v string) {
	o.ThresholdMicroseconds = v
}

// GetThresholdSymbol returns the ThresholdSymbol field value
func (o *LatencySli) GetThresholdSymbol() ThresholdSymbol {
	if o == nil {
		var ret ThresholdSymbol
		return ret
	}

	return o.ThresholdSymbol
}

// GetThresholdSymbolOk returns a tuple with the ThresholdSymbol field value
// and a boolean to check if the value has been set.
func (o *LatencySli) GetThresholdSymbolOk() (*ThresholdSymbol, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThresholdSymbol, true
}

// SetThresholdSymbol sets field value
func (o *LatencySli) SetThresholdSymbol(v ThresholdSymbol) {
	o.ThresholdSymbol = v
}

func (o LatencySli) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LatencySli) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["thresholdMicroseconds"] = o.ThresholdMicroseconds
	toSerialize["thresholdSymbol"] = o.ThresholdSymbol
	return toSerialize, nil
}

func (o *LatencySli) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"thresholdMicroseconds",
		"thresholdSymbol",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLatencySli := _LatencySli{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLatencySli)

	if err != nil {
		return err
	}

	*o = LatencySli(varLatencySli)

	return err
}

type NullableLatencySli struct {
	value *LatencySli
	isSet bool
}

func (v NullableLatencySli) Get() *LatencySli {
	return v.value
}

func (v *NullableLatencySli) Set(val *LatencySli) {
	v.value = val
	v.isSet = true
}

func (v NullableLatencySli) IsSet() bool {
	return v.isSet
}

func (v *NullableLatencySli) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLatencySli(val *LatencySli) *NullableLatencySli {
	return &NullableLatencySli{value: val, isSet: true}
}

func (v NullableLatencySli) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLatencySli) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


