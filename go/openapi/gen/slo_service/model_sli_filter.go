/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SliFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SliFilter{}

// SliFilter This data structure represents a filter for a Service Level Indicator (SLI) in Coralogix APM.
type SliFilter struct {
	CompareType CompareType `json:"compareType"`
	Field string `json:"field"`
	FieldValues []string `json:"fieldValues"`
}

type _SliFilter SliFilter

// NewSliFilter instantiates a new SliFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSliFilter(compareType CompareType, field string, fieldValues []string) *SliFilter {
	this := SliFilter{}
	this.CompareType = compareType
	this.Field = field
	this.FieldValues = fieldValues
	return &this
}

// NewSliFilterWithDefaults instantiates a new SliFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSliFilterWithDefaults() *SliFilter {
	this := SliFilter{}
	return &this
}

// GetCompareType returns the CompareType field value
func (o *SliFilter) GetCompareType() CompareType {
	if o == nil {
		var ret CompareType
		return ret
	}

	return o.CompareType
}

// GetCompareTypeOk returns a tuple with the CompareType field value
// and a boolean to check if the value has been set.
func (o *SliFilter) GetCompareTypeOk() (*CompareType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompareType, true
}

// SetCompareType sets field value
func (o *SliFilter) SetCompareType(v CompareType) {
	o.CompareType = v
}

// GetField returns the Field field value
func (o *SliFilter) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *SliFilter) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *SliFilter) SetField(v string) {
	o.Field = v
}

// GetFieldValues returns the FieldValues field value
func (o *SliFilter) GetFieldValues() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FieldValues
}

// GetFieldValuesOk returns a tuple with the FieldValues field value
// and a boolean to check if the value has been set.
func (o *SliFilter) GetFieldValuesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FieldValues, true
}

// SetFieldValues sets field value
func (o *SliFilter) SetFieldValues(v []string) {
	o.FieldValues = v
}

func (o SliFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SliFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["compareType"] = o.CompareType
	toSerialize["field"] = o.Field
	toSerialize["fieldValues"] = o.FieldValues
	return toSerialize, nil
}

func (o *SliFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"compareType",
		"field",
		"fieldValues",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSliFilter := _SliFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSliFilter)

	if err != nil {
		return err
	}

	*o = SliFilter(varSliFilter)

	return err
}

type NullableSliFilter struct {
	value *SliFilter
	isSet bool
}

func (v NullableSliFilter) Get() *SliFilter {
	return v.value
}

func (v *NullableSliFilter) Set(val *SliFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableSliFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableSliFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSliFilter(val *SliFilter) *NullableSliFilter {
	return &NullableSliFilter{value: val, isSet: true}
}

func (v NullableSliFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSliFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


