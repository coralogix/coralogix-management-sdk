/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ServiceSlo - struct for ServiceSlo
type ServiceSlo struct {
	ServiceSloErrorSli *ServiceSloErrorSli
	ServiceSloLatencySli *ServiceSloLatencySli
}

// ServiceSloErrorSliAsServiceSlo is a convenience function that returns ServiceSloErrorSli wrapped in ServiceSlo
func ServiceSloErrorSliAsServiceSlo(v *ServiceSloErrorSli) ServiceSlo {
	return ServiceSlo{
		ServiceSloErrorSli: v,
	}
}

// ServiceSloLatencySliAsServiceSlo is a convenience function that returns ServiceSloLatencySli wrapped in ServiceSlo
func ServiceSloLatencySliAsServiceSlo(v *ServiceSloLatencySli) ServiceSlo {
	return ServiceSlo{
		ServiceSloLatencySli: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ServiceSlo) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ServiceSloErrorSli
	err = newStrictDecoder(data).Decode(&dst.ServiceSloErrorSli)
	if err == nil {
		jsonServiceSloErrorSli, _ := json.Marshal(dst.ServiceSloErrorSli)
		if string(jsonServiceSloErrorSli) == "{}" { // empty struct
			dst.ServiceSloErrorSli = nil
		} else {
			if err = validator.Validate(dst.ServiceSloErrorSli); err != nil {
				dst.ServiceSloErrorSli = nil
			} else {
				match++
			}
		}
	} else {
		dst.ServiceSloErrorSli = nil
	}

	// try to unmarshal data into ServiceSloLatencySli
	err = newStrictDecoder(data).Decode(&dst.ServiceSloLatencySli)
	if err == nil {
		jsonServiceSloLatencySli, _ := json.Marshal(dst.ServiceSloLatencySli)
		if string(jsonServiceSloLatencySli) == "{}" { // empty struct
			dst.ServiceSloLatencySli = nil
		} else {
			if err = validator.Validate(dst.ServiceSloLatencySli); err != nil {
				dst.ServiceSloLatencySli = nil
			} else {
				match++
			}
		}
	} else {
		dst.ServiceSloLatencySli = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ServiceSloErrorSli = nil
		dst.ServiceSloLatencySli = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ServiceSlo)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ServiceSlo)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ServiceSlo) MarshalJSON() ([]byte, error) {
	if src.ServiceSloErrorSli != nil {
		return json.Marshal(&src.ServiceSloErrorSli)
	}

	if src.ServiceSloLatencySli != nil {
		return json.Marshal(&src.ServiceSloLatencySli)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ServiceSlo) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ServiceSloErrorSli != nil {
		return obj.ServiceSloErrorSli
	}

	if obj.ServiceSloLatencySli != nil {
		return obj.ServiceSloLatencySli
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ServiceSlo) GetActualInstanceValue() (interface{}) {
	if obj.ServiceSloErrorSli != nil {
		return *obj.ServiceSloErrorSli
	}

	if obj.ServiceSloLatencySli != nil {
		return *obj.ServiceSloLatencySli
	}

	// all schemas are nil
	return nil
}

type NullableServiceSlo struct {
	value *ServiceSlo
	isSet bool
}

func (v NullableServiceSlo) Get() *ServiceSlo {
	return v.value
}

func (v *NullableServiceSlo) Set(val *ServiceSlo) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceSlo) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceSlo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceSlo(val *ServiceSlo) *NullableServiceSlo {
	return &NullableServiceSlo{value: val, isSet: true}
}

func (v NullableServiceSlo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceSlo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


