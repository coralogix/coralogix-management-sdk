/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo_service

import (
	"encoding/json"
	"fmt"
)

// SloPeriod the model 'SloPeriod'
type SloPeriod string

// List of SloPeriod
const (
	SLOPERIOD_SLO_PERIOD_UNSPECIFIED SloPeriod = "SLO_PERIOD_UNSPECIFIED"
	SLOPERIOD_SLO_PERIOD_7_DAYS SloPeriod = "SLO_PERIOD_7_DAYS"
	SLOPERIOD_SLO_PERIOD_14_DAYS SloPeriod = "SLO_PERIOD_14_DAYS"
	SLOPERIOD_SLO_PERIOD_30_DAYS SloPeriod = "SLO_PERIOD_30_DAYS"
)

// All allowed values of SloPeriod enum
var AllowedSloPeriodEnumValues = []SloPeriod{
	"SLO_PERIOD_UNSPECIFIED",
	"SLO_PERIOD_7_DAYS",
	"SLO_PERIOD_14_DAYS",
	"SLO_PERIOD_30_DAYS",
}

func (v *SloPeriod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SloPeriod(value)
	for _, existing := range AllowedSloPeriodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SloPeriod", value)
}

// NewSloPeriodFromValue returns a pointer to a valid SloPeriod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSloPeriodFromValue(v string) (*SloPeriod, error) {
	ev := SloPeriod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SloPeriod: valid values are %v", v, AllowedSloPeriodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SloPeriod) IsValid() bool {
	for _, existing := range AllowedSloPeriodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SloPeriod value
func (v SloPeriod) Ptr() *SloPeriod {
	return &v
}

type NullableSloPeriod struct {
	value *SloPeriod
	isSet bool
}

func (v NullableSloPeriod) Get() *SloPeriod {
	return v.value
}

func (v *NullableSloPeriod) Set(val *SloPeriod) {
	v.value = val
	v.isSet = true
}

func (v NullableSloPeriod) IsSet() bool {
	return v.isSet
}

func (v *NullableSloPeriod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloPeriod(val *SloPeriod) *NullableSloPeriod {
	return &NullableSloPeriod{value: val, isSet: true}
}

func (v NullableSloPeriod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloPeriod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

