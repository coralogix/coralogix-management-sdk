/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo_service

import (
	"encoding/json"
	"fmt"
)

// ThresholdSymbol the model 'ThresholdSymbol'
type ThresholdSymbol string

// List of ThresholdSymbol
const (
	THRESHOLDSYMBOL_THRESHOLD_SYMBOL_UNSPECIFIED ThresholdSymbol = "THRESHOLD_SYMBOL_UNSPECIFIED"
	THRESHOLDSYMBOL_THRESHOLD_SYMBOL_GREATER ThresholdSymbol = "THRESHOLD_SYMBOL_GREATER"
	THRESHOLDSYMBOL_THRESHOLD_SYMBOL_GREATER_OR_EQUAL ThresholdSymbol = "THRESHOLD_SYMBOL_GREATER_OR_EQUAL"
	THRESHOLDSYMBOL_THRESHOLD_SYMBOL_LESS ThresholdSymbol = "THRESHOLD_SYMBOL_LESS"
	THRESHOLDSYMBOL_THRESHOLD_SYMBOL_LESS_OR_EQUAL ThresholdSymbol = "THRESHOLD_SYMBOL_LESS_OR_EQUAL"
	THRESHOLDSYMBOL_THRESHOLD_SYMBOL_EQUAL ThresholdSymbol = "THRESHOLD_SYMBOL_EQUAL"
	THRESHOLDSYMBOL_THRESHOLD_SYMBOL_NOT_EQUAL ThresholdSymbol = "THRESHOLD_SYMBOL_NOT_EQUAL"
)

// All allowed values of ThresholdSymbol enum
var AllowedThresholdSymbolEnumValues = []ThresholdSymbol{
	"THRESHOLD_SYMBOL_UNSPECIFIED",
	"THRESHOLD_SYMBOL_GREATER",
	"THRESHOLD_SYMBOL_GREATER_OR_EQUAL",
	"THRESHOLD_SYMBOL_LESS",
	"THRESHOLD_SYMBOL_LESS_OR_EQUAL",
	"THRESHOLD_SYMBOL_EQUAL",
	"THRESHOLD_SYMBOL_NOT_EQUAL",
}

func (v *ThresholdSymbol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ThresholdSymbol(value)
	for _, existing := range AllowedThresholdSymbolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ThresholdSymbol", value)
}

// NewThresholdSymbolFromValue returns a pointer to a valid ThresholdSymbol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewThresholdSymbolFromValue(v string) (*ThresholdSymbol, error) {
	ev := ThresholdSymbol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ThresholdSymbol: valid values are %v", v, AllowedThresholdSymbolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ThresholdSymbol) IsValid() bool {
	for _, existing := range AllowedThresholdSymbolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ThresholdSymbol value
func (v ThresholdSymbol) Ptr() *ThresholdSymbol {
	return &v
}

type NullableThresholdSymbol struct {
	value *ThresholdSymbol
	isSet bool
}

func (v NullableThresholdSymbol) Get() *ThresholdSymbol {
	return v.value
}

func (v *NullableThresholdSymbol) Set(val *ThresholdSymbol) {
	v.value = val
	v.isSet = true
}

func (v NullableThresholdSymbol) IsSet() bool {
	return v.isSet
}

func (v *NullableThresholdSymbol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThresholdSymbol(val *ThresholdSymbol) *NullableThresholdSymbol {
	return &NullableThresholdSymbol{value: val, isSet: true}
}

func (v NullableThresholdSymbol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThresholdSymbol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

