/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReplaceServiceSLORequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplaceServiceSLORequest{}

// ReplaceServiceSLORequest This data structure represents a request to update a Service SLO.
type ReplaceServiceSLORequest struct {
	Slo ServiceSlo `json:"slo"`
}

type _ReplaceServiceSLORequest ReplaceServiceSLORequest

// NewReplaceServiceSLORequest instantiates a new ReplaceServiceSLORequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplaceServiceSLORequest(slo ServiceSlo) *ReplaceServiceSLORequest {
	this := ReplaceServiceSLORequest{}
	this.Slo = slo
	return &this
}

// NewReplaceServiceSLORequestWithDefaults instantiates a new ReplaceServiceSLORequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplaceServiceSLORequestWithDefaults() *ReplaceServiceSLORequest {
	this := ReplaceServiceSLORequest{}
	return &this
}

// GetSlo returns the Slo field value
func (o *ReplaceServiceSLORequest) GetSlo() ServiceSlo {
	if o == nil {
		var ret ServiceSlo
		return ret
	}

	return o.Slo
}

// GetSloOk returns a tuple with the Slo field value
// and a boolean to check if the value has been set.
func (o *ReplaceServiceSLORequest) GetSloOk() (*ServiceSlo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slo, true
}

// SetSlo sets field value
func (o *ReplaceServiceSLORequest) SetSlo(v ServiceSlo) {
	o.Slo = v
}

func (o ReplaceServiceSLORequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplaceServiceSLORequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["slo"] = o.Slo
	return toSerialize, nil
}

func (o *ReplaceServiceSLORequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"slo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReplaceServiceSLORequest := _ReplaceServiceSLORequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReplaceServiceSLORequest)

	if err != nil {
		return err
	}

	*o = ReplaceServiceSLORequest(varReplaceServiceSLORequest)

	return err
}

type NullableReplaceServiceSLORequest struct {
	value *ReplaceServiceSLORequest
	isSet bool
}

func (v NullableReplaceServiceSLORequest) Get() *ReplaceServiceSLORequest {
	return v.value
}

func (v *NullableReplaceServiceSLORequest) Set(val *ReplaceServiceSLORequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceServiceSLORequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceServiceSLORequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceServiceSLORequest(val *ReplaceServiceSLORequest) *NullableReplaceServiceSLORequest {
	return &NullableReplaceServiceSLORequest{value: val, isSet: true}
}

func (v NullableReplaceServiceSLORequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceServiceSLORequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


