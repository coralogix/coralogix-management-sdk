/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo_service

import (
	"encoding/json"
	"fmt"
)

// CompareType the model 'CompareType'
type CompareType string

// List of CompareType
const (
	COMPARETYPE_COMPARE_TYPE_UNSPECIFIED CompareType = "COMPARE_TYPE_UNSPECIFIED"
	COMPARETYPE_COMPARE_TYPE_IS CompareType = "COMPARE_TYPE_IS"
	COMPARETYPE_COMPARE_TYPE_START_WITH CompareType = "COMPARE_TYPE_START_WITH"
	COMPARETYPE_COMPARE_TYPE_ENDS_WITH CompareType = "COMPARE_TYPE_ENDS_WITH"
	COMPARETYPE_COMPARE_TYPE_INCLUDES CompareType = "COMPARE_TYPE_INCLUDES"
)

// All allowed values of CompareType enum
var AllowedCompareTypeEnumValues = []CompareType{
	"COMPARE_TYPE_UNSPECIFIED",
	"COMPARE_TYPE_IS",
	"COMPARE_TYPE_START_WITH",
	"COMPARE_TYPE_ENDS_WITH",
	"COMPARE_TYPE_INCLUDES",
}

func (v *CompareType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CompareType(value)
	for _, existing := range AllowedCompareTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CompareType", value)
}

// NewCompareTypeFromValue returns a pointer to a valid CompareType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCompareTypeFromValue(v string) (*CompareType, error) {
	ev := CompareType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CompareType: valid values are %v", v, AllowedCompareTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CompareType) IsValid() bool {
	for _, existing := range AllowedCompareTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CompareType value
func (v CompareType) Ptr() *CompareType {
	return &v
}

type NullableCompareType struct {
	value *CompareType
	isSet bool
}

func (v NullableCompareType) Get() *CompareType {
	return v.value
}

func (v *NullableCompareType) Set(val *CompareType) {
	v.value = val
	v.isSet = true
}

func (v NullableCompareType) IsSet() bool {
	return v.isSet
}

func (v *NullableCompareType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompareType(val *CompareType) *NullableCompareType {
	return &NullableCompareType{value: val, isSet: true}
}

func (v NullableCompareType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompareType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

