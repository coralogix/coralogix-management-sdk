/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EventsFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventsFilter{}

// EventsFilter This data structure represents an events filter
type EventsFilter struct {
	CxEventKeys []string `json:"cxEventKeys"`
	CxEventLabelsFilters interface{} `json:"cxEventLabelsFilters,omitempty"`
	CxEventMetadataFilters interface{} `json:"cxEventMetadataFilters,omitempty"`
	CxEventTypes []string `json:"cxEventTypes"`
	Timestamp interface{} `json:"timestamp"`
}

type _EventsFilter EventsFilter

// NewEventsFilter instantiates a new EventsFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsFilter(cxEventKeys []string, cxEventTypes []string, timestamp interface{}) *EventsFilter {
	this := EventsFilter{}
	this.CxEventKeys = cxEventKeys
	this.CxEventTypes = cxEventTypes
	this.Timestamp = timestamp
	return &this
}

// NewEventsFilterWithDefaults instantiates a new EventsFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsFilterWithDefaults() *EventsFilter {
	this := EventsFilter{}
	return &this
}

// GetCxEventKeys returns the CxEventKeys field value
func (o *EventsFilter) GetCxEventKeys() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CxEventKeys
}

// GetCxEventKeysOk returns a tuple with the CxEventKeys field value
// and a boolean to check if the value has been set.
func (o *EventsFilter) GetCxEventKeysOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CxEventKeys, true
}

// SetCxEventKeys sets field value
func (o *EventsFilter) SetCxEventKeys(v []string) {
	o.CxEventKeys = v
}

// GetCxEventLabelsFilters returns the CxEventLabelsFilters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventsFilter) GetCxEventLabelsFilters() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CxEventLabelsFilters
}

// GetCxEventLabelsFiltersOk returns a tuple with the CxEventLabelsFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventsFilter) GetCxEventLabelsFiltersOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CxEventLabelsFilters) {
		return nil, false
	}
	return &o.CxEventLabelsFilters, true
}

// HasCxEventLabelsFilters returns a boolean if a field has been set.
func (o *EventsFilter) HasCxEventLabelsFilters() bool {
	if o != nil && !IsNil(o.CxEventLabelsFilters) {
		return true
	}

	return false
}

// SetCxEventLabelsFilters gets a reference to the given interface{} and assigns it to the CxEventLabelsFilters field.
func (o *EventsFilter) SetCxEventLabelsFilters(v interface{}) {
	o.CxEventLabelsFilters = v
}

// GetCxEventMetadataFilters returns the CxEventMetadataFilters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventsFilter) GetCxEventMetadataFilters() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CxEventMetadataFilters
}

// GetCxEventMetadataFiltersOk returns a tuple with the CxEventMetadataFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventsFilter) GetCxEventMetadataFiltersOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CxEventMetadataFilters) {
		return nil, false
	}
	return &o.CxEventMetadataFilters, true
}

// HasCxEventMetadataFilters returns a boolean if a field has been set.
func (o *EventsFilter) HasCxEventMetadataFilters() bool {
	if o != nil && !IsNil(o.CxEventMetadataFilters) {
		return true
	}

	return false
}

// SetCxEventMetadataFilters gets a reference to the given interface{} and assigns it to the CxEventMetadataFilters field.
func (o *EventsFilter) SetCxEventMetadataFilters(v interface{}) {
	o.CxEventMetadataFilters = v
}

// GetCxEventTypes returns the CxEventTypes field value
func (o *EventsFilter) GetCxEventTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CxEventTypes
}

// GetCxEventTypesOk returns a tuple with the CxEventTypes field value
// and a boolean to check if the value has been set.
func (o *EventsFilter) GetCxEventTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CxEventTypes, true
}

// SetCxEventTypes sets field value
func (o *EventsFilter) SetCxEventTypes(v []string) {
	o.CxEventTypes = v
}

// GetTimestamp returns the Timestamp field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *EventsFilter) GetTimestamp() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventsFilter) GetTimestampOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *EventsFilter) SetTimestamp(v interface{}) {
	o.Timestamp = v
}

func (o EventsFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventsFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cxEventKeys"] = o.CxEventKeys
	if o.CxEventLabelsFilters != nil {
		toSerialize["cxEventLabelsFilters"] = o.CxEventLabelsFilters
	}
	if o.CxEventMetadataFilters != nil {
		toSerialize["cxEventMetadataFilters"] = o.CxEventMetadataFilters
	}
	toSerialize["cxEventTypes"] = o.CxEventTypes
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

func (o *EventsFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cxEventKeys",
		"cxEventTypes",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventsFilter := _EventsFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventsFilter)

	if err != nil {
		return err
	}

	*o = EventsFilter(varEventsFilter)

	return err
}

type NullableEventsFilter struct {
	value *EventsFilter
	isSet bool
}

func (v NullableEventsFilter) Get() *EventsFilter {
	return v.value
}

func (v *NullableEventsFilter) Set(val *EventsFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsFilter(val *EventsFilter) *NullableEventsFilter {
	return &NullableEventsFilter{value: val, isSet: true}
}

func (v NullableEventsFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


