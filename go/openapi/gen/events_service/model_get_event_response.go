/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events_service

import (
	"encoding/json"
)

// checks if the GetEventResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEventResponse{}

// GetEventResponse struct for GetEventResponse
type GetEventResponse struct {
	Event *CxEventSingleOrMultiple `json:"event,omitempty"`
	Pagination *EventsV3PaginationResponse `json:"pagination,omitempty"`
}

// NewGetEventResponse instantiates a new GetEventResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEventResponse() *GetEventResponse {
	this := GetEventResponse{}
	return &this
}

// NewGetEventResponseWithDefaults instantiates a new GetEventResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEventResponseWithDefaults() *GetEventResponse {
	this := GetEventResponse{}
	return &this
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *GetEventResponse) GetEvent() CxEventSingleOrMultiple {
	if o == nil || IsNil(o.Event) {
		var ret CxEventSingleOrMultiple
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEventResponse) GetEventOk() (*CxEventSingleOrMultiple, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *GetEventResponse) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given CxEventSingleOrMultiple and assigns it to the Event field.
func (o *GetEventResponse) SetEvent(v CxEventSingleOrMultiple) {
	o.Event = &v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *GetEventResponse) GetPagination() EventsV3PaginationResponse {
	if o == nil || IsNil(o.Pagination) {
		var ret EventsV3PaginationResponse
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEventResponse) GetPaginationOk() (*EventsV3PaginationResponse, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *GetEventResponse) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given EventsV3PaginationResponse and assigns it to the Pagination field.
func (o *GetEventResponse) SetPagination(v EventsV3PaginationResponse) {
	o.Pagination = &v
}

func (o GetEventResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEventResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	return toSerialize, nil
}

type NullableGetEventResponse struct {
	value *GetEventResponse
	isSet bool
}

func (v NullableGetEventResponse) Get() *GetEventResponse {
	return v.value
}

func (v *NullableGetEventResponse) Set(val *GetEventResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEventResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEventResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEventResponse(val *GetEventResponse) *NullableGetEventResponse {
	return &NullableGetEventResponse{value: val, isSet: true}
}

func (v NullableGetEventResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEventResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


