/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events_service

import (
	"encoding/json"
)

// checks if the CxEventSingleOrMultipleSingleEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CxEventSingleOrMultipleSingleEvent{}

// CxEventSingleOrMultipleSingleEvent This data structure represents a single or multiple events
type CxEventSingleOrMultipleSingleEvent struct {
	SingleEvent *CxEvent `json:"singleEvent,omitempty"`
}

// NewCxEventSingleOrMultipleSingleEvent instantiates a new CxEventSingleOrMultipleSingleEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCxEventSingleOrMultipleSingleEvent() *CxEventSingleOrMultipleSingleEvent {
	this := CxEventSingleOrMultipleSingleEvent{}
	return &this
}

// NewCxEventSingleOrMultipleSingleEventWithDefaults instantiates a new CxEventSingleOrMultipleSingleEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCxEventSingleOrMultipleSingleEventWithDefaults() *CxEventSingleOrMultipleSingleEvent {
	this := CxEventSingleOrMultipleSingleEvent{}
	return &this
}

// GetSingleEvent returns the SingleEvent field value if set, zero value otherwise.
func (o *CxEventSingleOrMultipleSingleEvent) GetSingleEvent() CxEvent {
	if o == nil || IsNil(o.SingleEvent) {
		var ret CxEvent
		return ret
	}
	return *o.SingleEvent
}

// GetSingleEventOk returns a tuple with the SingleEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CxEventSingleOrMultipleSingleEvent) GetSingleEventOk() (*CxEvent, bool) {
	if o == nil || IsNil(o.SingleEvent) {
		return nil, false
	}
	return o.SingleEvent, true
}

// HasSingleEvent returns a boolean if a field has been set.
func (o *CxEventSingleOrMultipleSingleEvent) HasSingleEvent() bool {
	if o != nil && !IsNil(o.SingleEvent) {
		return true
	}

	return false
}

// SetSingleEvent gets a reference to the given CxEvent and assigns it to the SingleEvent field.
func (o *CxEventSingleOrMultipleSingleEvent) SetSingleEvent(v CxEvent) {
	o.SingleEvent = &v
}

func (o CxEventSingleOrMultipleSingleEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CxEventSingleOrMultipleSingleEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SingleEvent) {
		toSerialize["singleEvent"] = o.SingleEvent
	}
	return toSerialize, nil
}

type NullableCxEventSingleOrMultipleSingleEvent struct {
	value *CxEventSingleOrMultipleSingleEvent
	isSet bool
}

func (v NullableCxEventSingleOrMultipleSingleEvent) Get() *CxEventSingleOrMultipleSingleEvent {
	return v.value
}

func (v *NullableCxEventSingleOrMultipleSingleEvent) Set(val *CxEventSingleOrMultipleSingleEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableCxEventSingleOrMultipleSingleEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableCxEventSingleOrMultipleSingleEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCxEventSingleOrMultipleSingleEvent(val *CxEventSingleOrMultipleSingleEvent) *NullableCxEventSingleOrMultipleSingleEvent {
	return &NullableCxEventSingleOrMultipleSingleEvent{value: val, isSet: true}
}

func (v NullableCxEventSingleOrMultipleSingleEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCxEventSingleOrMultipleSingleEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


