/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events_service

import (
	"encoding/json"
)

// checks if the CxEventSingleOrMultiple2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CxEventSingleOrMultiple2{}

// CxEventSingleOrMultiple2 This data structure represents a single or multiple events
type CxEventSingleOrMultiple2 struct {
	MultipleEvents *CxEventArray `json:"multipleEvents,omitempty"`
}

// NewCxEventSingleOrMultiple2 instantiates a new CxEventSingleOrMultiple2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCxEventSingleOrMultiple2() *CxEventSingleOrMultiple2 {
	this := CxEventSingleOrMultiple2{}
	return &this
}

// NewCxEventSingleOrMultiple2WithDefaults instantiates a new CxEventSingleOrMultiple2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCxEventSingleOrMultiple2WithDefaults() *CxEventSingleOrMultiple2 {
	this := CxEventSingleOrMultiple2{}
	return &this
}

// GetMultipleEvents returns the MultipleEvents field value if set, zero value otherwise.
func (o *CxEventSingleOrMultiple2) GetMultipleEvents() CxEventArray {
	if o == nil || IsNil(o.MultipleEvents) {
		var ret CxEventArray
		return ret
	}
	return *o.MultipleEvents
}

// GetMultipleEventsOk returns a tuple with the MultipleEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CxEventSingleOrMultiple2) GetMultipleEventsOk() (*CxEventArray, bool) {
	if o == nil || IsNil(o.MultipleEvents) {
		return nil, false
	}
	return o.MultipleEvents, true
}

// HasMultipleEvents returns a boolean if a field has been set.
func (o *CxEventSingleOrMultiple2) HasMultipleEvents() bool {
	if o != nil && !IsNil(o.MultipleEvents) {
		return true
	}

	return false
}

// SetMultipleEvents gets a reference to the given CxEventArray and assigns it to the MultipleEvents field.
func (o *CxEventSingleOrMultiple2) SetMultipleEvents(v CxEventArray) {
	o.MultipleEvents = &v
}

func (o CxEventSingleOrMultiple2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CxEventSingleOrMultiple2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MultipleEvents) {
		toSerialize["multipleEvents"] = o.MultipleEvents
	}
	return toSerialize, nil
}

type NullableCxEventSingleOrMultiple2 struct {
	value *CxEventSingleOrMultiple2
	isSet bool
}

func (v NullableCxEventSingleOrMultiple2) Get() *CxEventSingleOrMultiple2 {
	return v.value
}

func (v *NullableCxEventSingleOrMultiple2) Set(val *CxEventSingleOrMultiple2) {
	v.value = val
	v.isSet = true
}

func (v NullableCxEventSingleOrMultiple2) IsSet() bool {
	return v.isSet
}

func (v *NullableCxEventSingleOrMultiple2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCxEventSingleOrMultiple2(val *CxEventSingleOrMultiple2) *NullableCxEventSingleOrMultiple2 {
	return &NullableCxEventSingleOrMultiple2{value: val, isSet: true}
}

func (v NullableCxEventSingleOrMultiple2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCxEventSingleOrMultiple2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


