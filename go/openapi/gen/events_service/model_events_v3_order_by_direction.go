/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events_service

import (
	"encoding/json"
	"fmt"
)

// EventsV3OrderByDirection the model 'EventsV3OrderByDirection'
type EventsV3OrderByDirection string

// List of events.v3.OrderByDirection
const (
	EVENTSV3ORDERBYDIRECTION_ORDER_BY_DIRECTION_UNSPECIFIED EventsV3OrderByDirection = "ORDER_BY_DIRECTION_UNSPECIFIED"
	EVENTSV3ORDERBYDIRECTION_ORDER_BY_DIRECTION_ASC EventsV3OrderByDirection = "ORDER_BY_DIRECTION_ASC"
	EVENTSV3ORDERBYDIRECTION_ORDER_BY_DIRECTION_DESC EventsV3OrderByDirection = "ORDER_BY_DIRECTION_DESC"
)

// All allowed values of EventsV3OrderByDirection enum
var AllowedEventsV3OrderByDirectionEnumValues = []EventsV3OrderByDirection{
	"ORDER_BY_DIRECTION_UNSPECIFIED",
	"ORDER_BY_DIRECTION_ASC",
	"ORDER_BY_DIRECTION_DESC",
}

func (v *EventsV3OrderByDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventsV3OrderByDirection(value)
	for _, existing := range AllowedEventsV3OrderByDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventsV3OrderByDirection", value)
}

// NewEventsV3OrderByDirectionFromValue returns a pointer to a valid EventsV3OrderByDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventsV3OrderByDirectionFromValue(v string) (*EventsV3OrderByDirection, error) {
	ev := EventsV3OrderByDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventsV3OrderByDirection: valid values are %v", v, AllowedEventsV3OrderByDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventsV3OrderByDirection) IsValid() bool {
	for _, existing := range AllowedEventsV3OrderByDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to events.v3.OrderByDirection value
func (v EventsV3OrderByDirection) Ptr() *EventsV3OrderByDirection {
	return &v
}

type NullableEventsV3OrderByDirection struct {
	value *EventsV3OrderByDirection
	isSet bool
}

func (v NullableEventsV3OrderByDirection) Get() *EventsV3OrderByDirection {
	return v.value
}

func (v *NullableEventsV3OrderByDirection) Set(val *EventsV3OrderByDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsV3OrderByDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsV3OrderByDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsV3OrderByDirection(val *EventsV3OrderByDirection) *NullableEventsV3OrderByDirection {
	return &NullableEventsV3OrderByDirection{value: val, isSet: true}
}

func (v NullableEventsV3OrderByDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsV3OrderByDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

