/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events_service

import (
	"encoding/json"
)

// checks if the BatchGetEventResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchGetEventResponse{}

// BatchGetEventResponse struct for BatchGetEventResponse
type BatchGetEventResponse struct {
	Events map[string]CxEventSingleOrMultiple `json:"events,omitempty"`
	NotFoundIds []string `json:"notFoundIds,omitempty"`
	Pagination *EventsV3PaginationResponse `json:"pagination,omitempty"`
}

// NewBatchGetEventResponse instantiates a new BatchGetEventResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchGetEventResponse() *BatchGetEventResponse {
	this := BatchGetEventResponse{}
	return &this
}

// NewBatchGetEventResponseWithDefaults instantiates a new BatchGetEventResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchGetEventResponseWithDefaults() *BatchGetEventResponse {
	this := BatchGetEventResponse{}
	return &this
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *BatchGetEventResponse) GetEvents() map[string]CxEventSingleOrMultiple {
	if o == nil || IsNil(o.Events) {
		var ret map[string]CxEventSingleOrMultiple
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchGetEventResponse) GetEventsOk() (map[string]CxEventSingleOrMultiple, bool) {
	if o == nil || IsNil(o.Events) {
		return map[string]CxEventSingleOrMultiple{}, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *BatchGetEventResponse) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given map[string]CxEventSingleOrMultiple and assigns it to the Events field.
func (o *BatchGetEventResponse) SetEvents(v map[string]CxEventSingleOrMultiple) {
	o.Events = v
}

// GetNotFoundIds returns the NotFoundIds field value if set, zero value otherwise.
func (o *BatchGetEventResponse) GetNotFoundIds() []string {
	if o == nil || IsNil(o.NotFoundIds) {
		var ret []string
		return ret
	}
	return o.NotFoundIds
}

// GetNotFoundIdsOk returns a tuple with the NotFoundIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchGetEventResponse) GetNotFoundIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.NotFoundIds) {
		return nil, false
	}
	return o.NotFoundIds, true
}

// HasNotFoundIds returns a boolean if a field has been set.
func (o *BatchGetEventResponse) HasNotFoundIds() bool {
	if o != nil && !IsNil(o.NotFoundIds) {
		return true
	}

	return false
}

// SetNotFoundIds gets a reference to the given []string and assigns it to the NotFoundIds field.
func (o *BatchGetEventResponse) SetNotFoundIds(v []string) {
	o.NotFoundIds = v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *BatchGetEventResponse) GetPagination() EventsV3PaginationResponse {
	if o == nil || IsNil(o.Pagination) {
		var ret EventsV3PaginationResponse
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchGetEventResponse) GetPaginationOk() (*EventsV3PaginationResponse, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *BatchGetEventResponse) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given EventsV3PaginationResponse and assigns it to the Pagination field.
func (o *BatchGetEventResponse) SetPagination(v EventsV3PaginationResponse) {
	o.Pagination = &v
}

func (o BatchGetEventResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchGetEventResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.NotFoundIds) {
		toSerialize["notFoundIds"] = o.NotFoundIds
	}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	return toSerialize, nil
}

type NullableBatchGetEventResponse struct {
	value *BatchGetEventResponse
	isSet bool
}

func (v NullableBatchGetEventResponse) Get() *BatchGetEventResponse {
	return v.value
}

func (v *NullableBatchGetEventResponse) Set(val *BatchGetEventResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchGetEventResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchGetEventResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchGetEventResponse(val *BatchGetEventResponse) *NullableBatchGetEventResponse {
	return &NullableBatchGetEventResponse{value: val, isSet: true}
}

func (v NullableBatchGetEventResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchGetEventResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


