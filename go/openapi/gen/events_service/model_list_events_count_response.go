/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListEventsCountResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListEventsCountResponse{}

// ListEventsCountResponse This data structure represents a response to list events count
type ListEventsCountResponse struct {
	Count string `json:"count"`
	ReachedLimit bool `json:"reachedLimit"`
}

type _ListEventsCountResponse ListEventsCountResponse

// NewListEventsCountResponse instantiates a new ListEventsCountResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListEventsCountResponse(count string, reachedLimit bool) *ListEventsCountResponse {
	this := ListEventsCountResponse{}
	this.Count = count
	this.ReachedLimit = reachedLimit
	return &this
}

// NewListEventsCountResponseWithDefaults instantiates a new ListEventsCountResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListEventsCountResponseWithDefaults() *ListEventsCountResponse {
	this := ListEventsCountResponse{}
	return &this
}

// GetCount returns the Count field value
func (o *ListEventsCountResponse) GetCount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *ListEventsCountResponse) GetCountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *ListEventsCountResponse) SetCount(v string) {
	o.Count = v
}

// GetReachedLimit returns the ReachedLimit field value
func (o *ListEventsCountResponse) GetReachedLimit() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ReachedLimit
}

// GetReachedLimitOk returns a tuple with the ReachedLimit field value
// and a boolean to check if the value has been set.
func (o *ListEventsCountResponse) GetReachedLimitOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReachedLimit, true
}

// SetReachedLimit sets field value
func (o *ListEventsCountResponse) SetReachedLimit(v bool) {
	o.ReachedLimit = v
}

func (o ListEventsCountResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListEventsCountResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["reachedLimit"] = o.ReachedLimit
	return toSerialize, nil
}

func (o *ListEventsCountResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"reachedLimit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListEventsCountResponse := _ListEventsCountResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListEventsCountResponse)

	if err != nil {
		return err
	}

	*o = ListEventsCountResponse(varListEventsCountResponse)

	return err
}

type NullableListEventsCountResponse struct {
	value *ListEventsCountResponse
	isSet bool
}

func (v NullableListEventsCountResponse) Get() *ListEventsCountResponse {
	return v.value
}

func (v *NullableListEventsCountResponse) Set(val *ListEventsCountResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListEventsCountResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListEventsCountResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListEventsCountResponse(val *ListEventsCountResponse) *NullableListEventsCountResponse {
	return &NullableListEventsCountResponse{value: val, isSet: true}
}

func (v NullableListEventsCountResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListEventsCountResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


