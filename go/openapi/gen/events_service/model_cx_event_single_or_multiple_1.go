/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events_service

import (
	"encoding/json"
)

// checks if the CxEventSingleOrMultiple1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CxEventSingleOrMultiple1{}

// CxEventSingleOrMultiple1 This data structure represents a single or multiple events
type CxEventSingleOrMultiple1 struct {
	SingleEvent *CxEvent `json:"singleEvent,omitempty"`
}

// NewCxEventSingleOrMultiple1 instantiates a new CxEventSingleOrMultiple1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCxEventSingleOrMultiple1() *CxEventSingleOrMultiple1 {
	this := CxEventSingleOrMultiple1{}
	return &this
}

// NewCxEventSingleOrMultiple1WithDefaults instantiates a new CxEventSingleOrMultiple1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCxEventSingleOrMultiple1WithDefaults() *CxEventSingleOrMultiple1 {
	this := CxEventSingleOrMultiple1{}
	return &this
}

// GetSingleEvent returns the SingleEvent field value if set, zero value otherwise.
func (o *CxEventSingleOrMultiple1) GetSingleEvent() CxEvent {
	if o == nil || IsNil(o.SingleEvent) {
		var ret CxEvent
		return ret
	}
	return *o.SingleEvent
}

// GetSingleEventOk returns a tuple with the SingleEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CxEventSingleOrMultiple1) GetSingleEventOk() (*CxEvent, bool) {
	if o == nil || IsNil(o.SingleEvent) {
		return nil, false
	}
	return o.SingleEvent, true
}

// HasSingleEvent returns a boolean if a field has been set.
func (o *CxEventSingleOrMultiple1) HasSingleEvent() bool {
	if o != nil && !IsNil(o.SingleEvent) {
		return true
	}

	return false
}

// SetSingleEvent gets a reference to the given CxEvent and assigns it to the SingleEvent field.
func (o *CxEventSingleOrMultiple1) SetSingleEvent(v CxEvent) {
	o.SingleEvent = &v
}

func (o CxEventSingleOrMultiple1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CxEventSingleOrMultiple1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SingleEvent) {
		toSerialize["singleEvent"] = o.SingleEvent
	}
	return toSerialize, nil
}

type NullableCxEventSingleOrMultiple1 struct {
	value *CxEventSingleOrMultiple1
	isSet bool
}

func (v NullableCxEventSingleOrMultiple1) Get() *CxEventSingleOrMultiple1 {
	return v.value
}

func (v *NullableCxEventSingleOrMultiple1) Set(val *CxEventSingleOrMultiple1) {
	v.value = val
	v.isSet = true
}

func (v NullableCxEventSingleOrMultiple1) IsSet() bool {
	return v.isSet
}

func (v *NullableCxEventSingleOrMultiple1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCxEventSingleOrMultiple1(val *CxEventSingleOrMultiple1) *NullableCxEventSingleOrMultiple1 {
	return &NullableCxEventSingleOrMultiple1{value: val, isSet: true}
}

func (v NullableCxEventSingleOrMultiple1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCxEventSingleOrMultiple1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


