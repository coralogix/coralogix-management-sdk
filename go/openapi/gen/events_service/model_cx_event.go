/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events_service

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CxEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CxEvent{}

// CxEvent This data structure represents an event
type CxEvent struct {
	CompanyId int32 `json:"companyId"`
	CxEventDedupKey *string `json:"cxEventDedupKey,omitempty"`
	CxEventKey string `json:"cxEventKey"`
	CxEventLabels map[string]string `json:"cxEventLabels"`
	CxEventMetadata *map[string]string `json:"cxEventMetadata,omitempty"`
	CxEventPayload map[string]interface{} `json:"cxEventPayload"`
	CxEventPayloadType string `json:"cxEventPayloadType"`
	CxEventTimestamp time.Time `json:"cxEventTimestamp"`
	CxEventType string `json:"cxEventType"`
}

type _CxEvent CxEvent

// NewCxEvent instantiates a new CxEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCxEvent(companyId int32, cxEventKey string, cxEventLabels map[string]string, cxEventPayload map[string]interface{}, cxEventPayloadType string, cxEventTimestamp time.Time, cxEventType string) *CxEvent {
	this := CxEvent{}
	this.CompanyId = companyId
	this.CxEventKey = cxEventKey
	this.CxEventLabels = cxEventLabels
	this.CxEventPayload = cxEventPayload
	this.CxEventPayloadType = cxEventPayloadType
	this.CxEventTimestamp = cxEventTimestamp
	this.CxEventType = cxEventType
	return &this
}

// NewCxEventWithDefaults instantiates a new CxEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCxEventWithDefaults() *CxEvent {
	this := CxEvent{}
	return &this
}

// GetCompanyId returns the CompanyId field value
func (o *CxEvent) GetCompanyId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value
// and a boolean to check if the value has been set.
func (o *CxEvent) GetCompanyIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyId, true
}

// SetCompanyId sets field value
func (o *CxEvent) SetCompanyId(v int32) {
	o.CompanyId = v
}

// GetCxEventDedupKey returns the CxEventDedupKey field value if set, zero value otherwise.
func (o *CxEvent) GetCxEventDedupKey() string {
	if o == nil || IsNil(o.CxEventDedupKey) {
		var ret string
		return ret
	}
	return *o.CxEventDedupKey
}

// GetCxEventDedupKeyOk returns a tuple with the CxEventDedupKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CxEvent) GetCxEventDedupKeyOk() (*string, bool) {
	if o == nil || IsNil(o.CxEventDedupKey) {
		return nil, false
	}
	return o.CxEventDedupKey, true
}

// HasCxEventDedupKey returns a boolean if a field has been set.
func (o *CxEvent) HasCxEventDedupKey() bool {
	if o != nil && !IsNil(o.CxEventDedupKey) {
		return true
	}

	return false
}

// SetCxEventDedupKey gets a reference to the given string and assigns it to the CxEventDedupKey field.
func (o *CxEvent) SetCxEventDedupKey(v string) {
	o.CxEventDedupKey = &v
}

// GetCxEventKey returns the CxEventKey field value
func (o *CxEvent) GetCxEventKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CxEventKey
}

// GetCxEventKeyOk returns a tuple with the CxEventKey field value
// and a boolean to check if the value has been set.
func (o *CxEvent) GetCxEventKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CxEventKey, true
}

// SetCxEventKey sets field value
func (o *CxEvent) SetCxEventKey(v string) {
	o.CxEventKey = v
}

// GetCxEventLabels returns the CxEventLabels field value
func (o *CxEvent) GetCxEventLabels() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.CxEventLabels
}

// GetCxEventLabelsOk returns a tuple with the CxEventLabels field value
// and a boolean to check if the value has been set.
func (o *CxEvent) GetCxEventLabelsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CxEventLabels, true
}

// SetCxEventLabels sets field value
func (o *CxEvent) SetCxEventLabels(v map[string]string) {
	o.CxEventLabels = v
}

// GetCxEventMetadata returns the CxEventMetadata field value if set, zero value otherwise.
func (o *CxEvent) GetCxEventMetadata() map[string]string {
	if o == nil || IsNil(o.CxEventMetadata) {
		var ret map[string]string
		return ret
	}
	return *o.CxEventMetadata
}

// GetCxEventMetadataOk returns a tuple with the CxEventMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CxEvent) GetCxEventMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.CxEventMetadata) {
		return nil, false
	}
	return o.CxEventMetadata, true
}

// HasCxEventMetadata returns a boolean if a field has been set.
func (o *CxEvent) HasCxEventMetadata() bool {
	if o != nil && !IsNil(o.CxEventMetadata) {
		return true
	}

	return false
}

// SetCxEventMetadata gets a reference to the given map[string]string and assigns it to the CxEventMetadata field.
func (o *CxEvent) SetCxEventMetadata(v map[string]string) {
	o.CxEventMetadata = &v
}

// GetCxEventPayload returns the CxEventPayload field value
func (o *CxEvent) GetCxEventPayload() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.CxEventPayload
}

// GetCxEventPayloadOk returns a tuple with the CxEventPayload field value
// and a boolean to check if the value has been set.
func (o *CxEvent) GetCxEventPayloadOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.CxEventPayload, true
}

// SetCxEventPayload sets field value
func (o *CxEvent) SetCxEventPayload(v map[string]interface{}) {
	o.CxEventPayload = v
}

// GetCxEventPayloadType returns the CxEventPayloadType field value
func (o *CxEvent) GetCxEventPayloadType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CxEventPayloadType
}

// GetCxEventPayloadTypeOk returns a tuple with the CxEventPayloadType field value
// and a boolean to check if the value has been set.
func (o *CxEvent) GetCxEventPayloadTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CxEventPayloadType, true
}

// SetCxEventPayloadType sets field value
func (o *CxEvent) SetCxEventPayloadType(v string) {
	o.CxEventPayloadType = v
}

// GetCxEventTimestamp returns the CxEventTimestamp field value
func (o *CxEvent) GetCxEventTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CxEventTimestamp
}

// GetCxEventTimestampOk returns a tuple with the CxEventTimestamp field value
// and a boolean to check if the value has been set.
func (o *CxEvent) GetCxEventTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CxEventTimestamp, true
}

// SetCxEventTimestamp sets field value
func (o *CxEvent) SetCxEventTimestamp(v time.Time) {
	o.CxEventTimestamp = v
}

// GetCxEventType returns the CxEventType field value
func (o *CxEvent) GetCxEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CxEventType
}

// GetCxEventTypeOk returns a tuple with the CxEventType field value
// and a boolean to check if the value has been set.
func (o *CxEvent) GetCxEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CxEventType, true
}

// SetCxEventType sets field value
func (o *CxEvent) SetCxEventType(v string) {
	o.CxEventType = v
}

func (o CxEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CxEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["companyId"] = o.CompanyId
	if !IsNil(o.CxEventDedupKey) {
		toSerialize["cxEventDedupKey"] = o.CxEventDedupKey
	}
	toSerialize["cxEventKey"] = o.CxEventKey
	toSerialize["cxEventLabels"] = o.CxEventLabels
	if !IsNil(o.CxEventMetadata) {
		toSerialize["cxEventMetadata"] = o.CxEventMetadata
	}
	toSerialize["cxEventPayload"] = o.CxEventPayload
	toSerialize["cxEventPayloadType"] = o.CxEventPayloadType
	toSerialize["cxEventTimestamp"] = o.CxEventTimestamp
	toSerialize["cxEventType"] = o.CxEventType
	return toSerialize, nil
}

func (o *CxEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"companyId",
		"cxEventKey",
		"cxEventLabels",
		"cxEventPayload",
		"cxEventPayloadType",
		"cxEventTimestamp",
		"cxEventType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCxEvent := _CxEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCxEvent)

	if err != nil {
		return err
	}

	*o = CxEvent(varCxEvent)

	return err
}

type NullableCxEvent struct {
	value *CxEvent
	isSet bool
}

func (v NullableCxEvent) Get() *CxEvent {
	return v.value
}

func (v *NullableCxEvent) Set(val *CxEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableCxEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableCxEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCxEvent(val *CxEvent) *NullableCxEvent {
	return &NullableCxEvent{value: val, isSet: true}
}

func (v NullableCxEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCxEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


