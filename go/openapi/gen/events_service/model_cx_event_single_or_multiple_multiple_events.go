/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events_service

import (
	"encoding/json"
)

// checks if the CxEventSingleOrMultipleMultipleEvents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CxEventSingleOrMultipleMultipleEvents{}

// CxEventSingleOrMultipleMultipleEvents This data structure represents a single or multiple events
type CxEventSingleOrMultipleMultipleEvents struct {
	MultipleEvents *CxEventArray `json:"multipleEvents,omitempty"`
}

// NewCxEventSingleOrMultipleMultipleEvents instantiates a new CxEventSingleOrMultipleMultipleEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCxEventSingleOrMultipleMultipleEvents() *CxEventSingleOrMultipleMultipleEvents {
	this := CxEventSingleOrMultipleMultipleEvents{}
	return &this
}

// NewCxEventSingleOrMultipleMultipleEventsWithDefaults instantiates a new CxEventSingleOrMultipleMultipleEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCxEventSingleOrMultipleMultipleEventsWithDefaults() *CxEventSingleOrMultipleMultipleEvents {
	this := CxEventSingleOrMultipleMultipleEvents{}
	return &this
}

// GetMultipleEvents returns the MultipleEvents field value if set, zero value otherwise.
func (o *CxEventSingleOrMultipleMultipleEvents) GetMultipleEvents() CxEventArray {
	if o == nil || IsNil(o.MultipleEvents) {
		var ret CxEventArray
		return ret
	}
	return *o.MultipleEvents
}

// GetMultipleEventsOk returns a tuple with the MultipleEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CxEventSingleOrMultipleMultipleEvents) GetMultipleEventsOk() (*CxEventArray, bool) {
	if o == nil || IsNil(o.MultipleEvents) {
		return nil, false
	}
	return o.MultipleEvents, true
}

// HasMultipleEvents returns a boolean if a field has been set.
func (o *CxEventSingleOrMultipleMultipleEvents) HasMultipleEvents() bool {
	if o != nil && !IsNil(o.MultipleEvents) {
		return true
	}

	return false
}

// SetMultipleEvents gets a reference to the given CxEventArray and assigns it to the MultipleEvents field.
func (o *CxEventSingleOrMultipleMultipleEvents) SetMultipleEvents(v CxEventArray) {
	o.MultipleEvents = &v
}

func (o CxEventSingleOrMultipleMultipleEvents) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CxEventSingleOrMultipleMultipleEvents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MultipleEvents) {
		toSerialize["multipleEvents"] = o.MultipleEvents
	}
	return toSerialize, nil
}

type NullableCxEventSingleOrMultipleMultipleEvents struct {
	value *CxEventSingleOrMultipleMultipleEvents
	isSet bool
}

func (v NullableCxEventSingleOrMultipleMultipleEvents) Get() *CxEventSingleOrMultipleMultipleEvents {
	return v.value
}

func (v *NullableCxEventSingleOrMultipleMultipleEvents) Set(val *CxEventSingleOrMultipleMultipleEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableCxEventSingleOrMultipleMultipleEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableCxEventSingleOrMultipleMultipleEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCxEventSingleOrMultipleMultipleEvents(val *CxEventSingleOrMultipleMultipleEvents) *NullableCxEventSingleOrMultipleMultipleEvents {
	return &NullableCxEventSingleOrMultipleMultipleEvents{value: val, isSet: true}
}

func (v NullableCxEventSingleOrMultipleMultipleEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCxEventSingleOrMultipleMultipleEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


