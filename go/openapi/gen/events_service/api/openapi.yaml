openapi: 3.0.0
info:
  title: ""
  version: 1.0.0
servers:
- url: /
paths:
  /v3/events:
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: EventsService_ListEvents
      parameters:
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          $ref: "#/components/schemas/EventsFilter"
        style: form
      - explode: true
        in: query
        name: order_bys
        required: false
        schema:
          items:
            $ref: "#/components/schemas/EventsService_ListEvents_order_bys_parameter_inner"
          type: array
        style: form
      - explode: true
        in: query
        name: pagination
        required: false
        schema:
          $ref: "#/components/schemas/EventsService_ListEvents_pagination_parameter"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListEventsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: List Events
      tags:
      - Events Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v3/events?filter=SOME_OBJECT_VALUE&order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v3/events"

          querystring = {"filter":"SOME_OBJECT_VALUE","order_bys":"SOME_ARRAY_VALUE","pagination":"SOME_OBJECT_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/v3/events?filter=SOME_OBJECT_VALUE&order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
  /v3/events/events:batchGet:
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: EventsService_BatchGetEvent
      parameters:
      - explode: true
        in: query
        name: ids
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: order_bys
        required: false
        schema:
          items:
            $ref: "#/components/schemas/EventsService_ListEvents_order_bys_parameter_inner"
          type: array
        style: form
      - explode: true
        in: query
        name: pagination
        required: false
        schema:
          $ref: "#/components/schemas/EventsService_ListEvents_pagination_parameter"
        style: form
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          $ref: "#/components/schemas/EventsService_BatchGetEvent_filter_parameter"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchGetEventResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Batch Get Event
      tags:
      - Events Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v3/events/events:batchGet?ids=SOME_ARRAY_VALUE&order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE&filter=SOME_OBJECT_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v3/events/events:batchGet"

          querystring = {"ids":"SOME_ARRAY_VALUE","order_bys":"SOME_ARRAY_VALUE","pagination":"SOME_OBJECT_VALUE","filter":"SOME_OBJECT_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/v3/events/events:batchGet?ids=SOME_ARRAY_VALUE&order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE&filter=SOME_OBJECT_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
  /v3/events/{id}:
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: EventsService_GetEvent
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          example: test
          type: string
        style: simple
      - explode: true
        in: query
        name: order_bys
        required: false
        schema:
          items:
            $ref: "#/components/schemas/EventsService_ListEvents_order_bys_parameter_inner"
          type: array
        style: form
      - explode: true
        in: query
        name: pagination
        required: false
        schema:
          $ref: "#/components/schemas/EventsService_ListEvents_pagination_parameter"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEventResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get Event
      tags:
      - Events Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v3/events/test?order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v3/events/test"

          querystring = {"order_bys":"SOME_ARRAY_VALUE","pagination":"SOME_OBJECT_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/v3/events/test?order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
  /v3/events:count:
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: EventsService_ListEventsCount
      parameters:
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          $ref: "#/components/schemas/EventsFilter"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListEventsCountResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: List Events Count
      tags:
      - Events Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v3/events:count?filter=SOME_OBJECT_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v3/events:count"

          querystring = {"filter":"SOME_OBJECT_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/v3/events:count?filter=SOME_OBJECT_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
  /v3/events:statistics:
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: EventsService_GetEventsStatistics
      parameters:
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          $ref: "#/components/schemas/EventsFilter"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEventsStatisticsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get Events Statistics
      tags:
      - Events Service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v3/events:statistics?filter=SOME_OBJECT_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v3/events:statistics"

          querystring = {"filter":"SOME_OBJECT_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/v3/events:statistics?filter=SOME_OBJECT_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
components:
  schemas:
    BatchGetEventResponse:
      example:
        notFoundIds:
        - notFoundIds
        - notFoundIds
        pagination:
          totalSize: 10
          nextPageToken: test
        events:
          key:
            singleEvent:
              cxEventType: test_type
              companyId: 1
              cxEventKey: test
              cxEventMetadata:
                test: test
              cxEventPayload:
                test: test
              cxEventPayloadType: test_payload_type
              cxEventDedupKey: test_dedup_key
              cxEventLabels:
                test: test
              cxEventTimestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        events:
          additionalProperties:
            $ref: "#/components/schemas/CxEventSingleOrMultiple"
          type: object
        notFoundIds:
          items:
            type: string
          type: array
        pagination:
          $ref: "#/components/schemas/events.v3.PaginationResponse"
      type: object
    ColorsByAggregation:
      additionalProperties: false
      properties:
        aggregation:
          $ref: "#/components/schemas/ColorsByAggregation"
      type: object
    ColorsByGroupBy:
      additionalProperties: false
      properties:
        groupBy:
          $ref: "#/components/schemas/ColorsByGroupBy"
      type: object
    ColorsByStack:
      additionalProperties: false
      properties:
        stack:
          $ref: "#/components/schemas/ColorsByStack"
      type: object
    CxEvent:
      description: This data structure represents an event
      example:
        cxEventType: test_type
        companyId: 1
        cxEventKey: test
        cxEventMetadata:
          test: test
        cxEventPayload:
          test: test
        cxEventPayloadType: test_payload_type
        cxEventDedupKey: test_dedup_key
        cxEventLabels:
          test: test
        cxEventTimestamp: 2000-01-23T04:56:07.000+00:00
      externalDocs:
        description: Find out more about events
        url: https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      properties:
        companyId:
          example: 1
          format: int32
          type: integer
        cxEventDedupKey:
          example: test_dedup_key
          type: string
        cxEventKey:
          example: test
          type: string
        cxEventLabels:
          additionalProperties:
            type: string
          example:
            test: test
          type: object
        cxEventMetadata:
          additionalProperties:
            type: string
          example:
            test: test
          type: object
        cxEventPayload:
          example:
            test: test
          type: object
        cxEventPayloadType:
          example: test_payload_type
          type: string
        cxEventTimestamp:
          format: date-time
          type: string
        cxEventType:
          example: test_type
          type: string
      required:
      - companyId
      - cxEventKey
      - cxEventLabels
      - cxEventPayload
      - cxEventPayloadType
      - cxEventTimestamp
      - cxEventType
      title: Event
      type: object
    CxEventArray:
      description: This data structure represents an array of events
      externalDocs:
        description: Find out more about events
        url: https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
      properties:
        events:
          items:
            $ref: "#/components/schemas/CxEvent"
          type: array
      required:
      - events
      title: CxEventArray
      type: object
    CxEventSingleOrMultiple:
      oneOf:
      - $ref: "#/components/schemas/CxEventSingleOrMultipleSingleEvent"
      - $ref: "#/components/schemas/CxEventSingleOrMultipleMultipleEvents"
    CxEventSingleOrMultipleMultipleEvents:
      additionalProperties: false
      description: This data structure represents a single or multiple events
      externalDocs:
        url: ""
      properties:
        multipleEvents:
          $ref: "#/components/schemas/CxEventArray"
      required:
      - event
      title: CxEventSingleOrMultiple
      type: object
    CxEventSingleOrMultipleSingleEvent:
      additionalProperties: false
      description: This data structure represents a single or multiple events
      example:
        singleEvent:
          cxEventType: test_type
          companyId: 1
          cxEventKey: test
          cxEventMetadata:
            test: test
          cxEventPayload:
            test: test
          cxEventPayloadType: test_payload_type
          cxEventDedupKey: test_dedup_key
          cxEventLabels:
            test: test
          cxEventTimestamp: 2000-01-23T04:56:07.000+00:00
      externalDocs:
        url: ""
      properties:
        singleEvent:
          $ref: "#/components/schemas/CxEvent"
      required:
      - event
      title: CxEventSingleOrMultiple
      type: object
    FieldGroup:
      properties:
        name:
          type: string
        value:
          type: string
      type: object
    FieldStatistics:
      example:
        fieldStatistics:
          key: fieldStatistics
      properties:
        fieldStatistics:
          additionalProperties:
            format: int64
            type: string
          type: object
      type: object
    FilterPathAndValues:
      oneOf:
      - $ref: "#/components/schemas/FilterPathAndValuesMultipleValues"
      - $ref: "#/components/schemas/FilterPathAndValuesFilters"
    FilterPathAndValuesFilters:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        filters:
          $ref: "#/components/schemas/Filters"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
    FilterPathAndValuesMultipleValues:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        multipleValues:
          $ref: "#/components/schemas/MultipleValues"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
    Filters:
      description: This data structure represents a filter
      externalDocs:
        url: ""
      properties:
        operator:
          $ref: "#/components/schemas/v3.FilterOperator"
        pathAndValues:
          items:
            $ref: "#/components/schemas/FilterPathAndValues"
          type: array
      required:
      - pathAndValues
      title: Filters
      type: object
    GetEventResponse:
      example:
        pagination:
          totalSize: 10
          nextPageToken: test
        event:
          singleEvent:
            cxEventType: test_type
            companyId: 1
            cxEventKey: test
            cxEventMetadata:
              test: test
            cxEventPayload:
              test: test
            cxEventPayloadType: test_payload_type
            cxEventDedupKey: test_dedup_key
            cxEventLabels:
              test: test
            cxEventTimestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        event:
          $ref: "#/components/schemas/CxEventSingleOrMultiple"
        pagination:
          $ref: "#/components/schemas/events.v3.PaginationResponse"
      type: object
    GetEventsStatisticsResponse:
      description: This data structure represents a response to get events statistics
      example:
        cxEventMetadataFieldStatistics:
          key:
            fieldStatistics:
              key: fieldStatistics
        cxEventLabelsFieldStatistics:
          key:
            fieldStatistics:
              key: fieldStatistics
      externalDocs:
        url: ""
      properties:
        cxEventLabelsFieldStatistics:
          additionalProperties:
            $ref: "#/components/schemas/FieldStatistics"
          type: object
        cxEventMetadataFieldStatistics:
          additionalProperties:
            $ref: "#/components/schemas/FieldStatistics"
          type: object
      required:
      - cxEventMetadataFieldStatisticscxEventLabelsFieldStatistics
      title: GetEventsStatisticsResponse
      type: object
    ListEventsCountResponse:
      description: This data structure represents a response to list events count
      example:
        count: "10"
        reachedLimit: false
      externalDocs:
        url: ""
      properties:
        count:
          example: "10"
          format: uint64
          type: string
        reachedLimit:
          example: false
          type: boolean
      required:
      - count
      - reachedLimit
      title: ListEventsCountResponse
      type: object
    ListEventsResponse:
      description: This data structure represents a response to list events
      example:
        pagination:
          totalSize: 10
          nextPageToken: test
        events:
        - cxEventType: test_type
          companyId: 1
          cxEventKey: test
          cxEventMetadata:
            test: test
          cxEventPayload:
            test: test
          cxEventPayloadType: test_payload_type
          cxEventDedupKey: test_dedup_key
          cxEventLabels:
            test: test
          cxEventTimestamp: 2000-01-23T04:56:07.000+00:00
        - cxEventType: test_type
          companyId: 1
          cxEventKey: test
          cxEventMetadata:
            test: test
          cxEventPayload:
            test: test
          cxEventPayloadType: test_payload_type
          cxEventDedupKey: test_dedup_key
          cxEventLabels:
            test: test
          cxEventTimestamp: 2000-01-23T04:56:07.000+00:00
      externalDocs:
        url: ""
      properties:
        events:
          items:
            $ref: "#/components/schemas/CxEvent"
          type: array
        pagination:
          $ref: "#/components/schemas/events.v3.PaginationResponse"
      required:
      - events
      title: ListEventsResponse
      type: object
    MultipleValues:
      properties:
        matcher:
          $ref: "#/components/schemas/events.v3.FilterMatcher"
        values:
          items:
            type: string
          type: array
      type: object
    common.Group:
      properties:
        field:
          $ref: "#/components/schemas/FieldGroup"
        groups:
          items:
            $ref: "#/components/schemas/common.Group"
          type: array
        value:
          format: double
          type: number
      type: object
    events.v3.FilterMatcher:
      enum:
      - FILTER_MATCHER_TEXT_OR_UNSPECIFIED
      - FILTER_MATCHER_REGEXP
      type: string
    events.v3.OrderByDirection:
      enum:
      - ORDER_BY_DIRECTION_UNSPECIFIED
      - ORDER_BY_DIRECTION_ASC
      - ORDER_BY_DIRECTION_DESC
      type: string
    events.v3.OrderByFields:
      enum:
      - ORDER_BY_FIELDS_UNSPECIFIED
      - ORDER_BY_FIELDS_TIMESTAMP
      type: string
    events.v3.PaginationResponse:
      example:
        totalSize: 10
        nextPageToken: test
      properties:
        nextPageToken:
          example: test
          type: string
        totalSize:
          example: 10
          format: int64
          type: integer
      type: object
    v3.FilterOperator:
      enum:
      - FILTER_OPERATOR_AND_OR_UNSPECIFIED
      - FILTER_OPERATOR_OR
      type: string
    EventsFilter:
      description: This data structure represents an events filter
      externalDocs:
        url: ""
      properties:
        cxEventKeys:
          items:
            example: "[\"test_key\"]"
            type: string
          type: array
        cxEventLabelsFilters: {}
        cxEventMetadataFilters: {}
        cxEventTypes:
          items:
            example: "[\"test_type\"]"
            type: string
          type: array
        timestamp: {}
      required:
      - cxEventKeys
      - cxEventTypes
      - timestamp
      title: EventsFilter
      type: object
    EventsService_ListEvents_order_bys_parameter_inner:
      properties:
        direction:
          $ref: "#/components/schemas/events.v3.OrderByDirection"
        fieldName:
          $ref: "#/components/schemas/events.v3.OrderByFields"
      type: object
    EventsService_ListEvents_pagination_parameter:
      properties:
        pageSize:
          example: 10
          format: int64
          type: integer
        pageToken:
          example: test
          type: string
      type: object
    EventsService_BatchGetEvent_filter_parameter:
      properties:
        timestamp: {}
      type: object
  securitySchemes:
    apiKeyAuth:
      description: API key authentication
      in: header
      name: Authorization
      type: apiKey
