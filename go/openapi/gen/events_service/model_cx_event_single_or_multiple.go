/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CxEventSingleOrMultiple - struct for CxEventSingleOrMultiple
type CxEventSingleOrMultiple struct {
	CxEventSingleOrMultiple1 *CxEventSingleOrMultiple1
	CxEventSingleOrMultiple2 *CxEventSingleOrMultiple2
}

// CxEventSingleOrMultiple1AsCxEventSingleOrMultiple is a convenience function that returns CxEventSingleOrMultiple1 wrapped in CxEventSingleOrMultiple
func CxEventSingleOrMultiple1AsCxEventSingleOrMultiple(v *CxEventSingleOrMultiple1) CxEventSingleOrMultiple {
	return CxEventSingleOrMultiple{
		CxEventSingleOrMultiple1: v,
	}
}

// CxEventSingleOrMultiple2AsCxEventSingleOrMultiple is a convenience function that returns CxEventSingleOrMultiple2 wrapped in CxEventSingleOrMultiple
func CxEventSingleOrMultiple2AsCxEventSingleOrMultiple(v *CxEventSingleOrMultiple2) CxEventSingleOrMultiple {
	return CxEventSingleOrMultiple{
		CxEventSingleOrMultiple2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CxEventSingleOrMultiple) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CxEventSingleOrMultiple1
	err = newStrictDecoder(data).Decode(&dst.CxEventSingleOrMultiple1)
	if err == nil {
		jsonCxEventSingleOrMultiple1, _ := json.Marshal(dst.CxEventSingleOrMultiple1)
		if string(jsonCxEventSingleOrMultiple1) == "{}" { // empty struct
			dst.CxEventSingleOrMultiple1 = nil
		} else {
			if err = validator.Validate(dst.CxEventSingleOrMultiple1); err != nil {
				dst.CxEventSingleOrMultiple1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.CxEventSingleOrMultiple1 = nil
	}

	// try to unmarshal data into CxEventSingleOrMultiple2
	err = newStrictDecoder(data).Decode(&dst.CxEventSingleOrMultiple2)
	if err == nil {
		jsonCxEventSingleOrMultiple2, _ := json.Marshal(dst.CxEventSingleOrMultiple2)
		if string(jsonCxEventSingleOrMultiple2) == "{}" { // empty struct
			dst.CxEventSingleOrMultiple2 = nil
		} else {
			if err = validator.Validate(dst.CxEventSingleOrMultiple2); err != nil {
				dst.CxEventSingleOrMultiple2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.CxEventSingleOrMultiple2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CxEventSingleOrMultiple1 = nil
		dst.CxEventSingleOrMultiple2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CxEventSingleOrMultiple)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CxEventSingleOrMultiple)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CxEventSingleOrMultiple) MarshalJSON() ([]byte, error) {
	if src.CxEventSingleOrMultiple1 != nil {
		return json.Marshal(&src.CxEventSingleOrMultiple1)
	}

	if src.CxEventSingleOrMultiple2 != nil {
		return json.Marshal(&src.CxEventSingleOrMultiple2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CxEventSingleOrMultiple) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CxEventSingleOrMultiple1 != nil {
		return obj.CxEventSingleOrMultiple1
	}

	if obj.CxEventSingleOrMultiple2 != nil {
		return obj.CxEventSingleOrMultiple2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CxEventSingleOrMultiple) GetActualInstanceValue() (interface{}) {
	if obj.CxEventSingleOrMultiple1 != nil {
		return *obj.CxEventSingleOrMultiple1
	}

	if obj.CxEventSingleOrMultiple2 != nil {
		return *obj.CxEventSingleOrMultiple2
	}

	// all schemas are nil
	return nil
}

type NullableCxEventSingleOrMultiple struct {
	value *CxEventSingleOrMultiple
	isSet bool
}

func (v NullableCxEventSingleOrMultiple) Get() *CxEventSingleOrMultiple {
	return v.value
}

func (v *NullableCxEventSingleOrMultiple) Set(val *CxEventSingleOrMultiple) {
	v.value = val
	v.isSet = true
}

func (v NullableCxEventSingleOrMultiple) IsSet() bool {
	return v.isSet
}

func (v *NullableCxEventSingleOrMultiple) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCxEventSingleOrMultiple(val *CxEventSingleOrMultiple) *NullableCxEventSingleOrMultiple {
	return &NullableCxEventSingleOrMultiple{value: val, isSet: true}
}

func (v NullableCxEventSingleOrMultiple) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCxEventSingleOrMultiple) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


