/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ip_access_service

import (
	"encoding/json"
)

// checks if the ReplaceCompanyIPAccessSettingsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplaceCompanyIPAccessSettingsRequest{}

// ReplaceCompanyIPAccessSettingsRequest This data structure represents the request to replace company IP access settings.
type ReplaceCompanyIPAccessSettingsRequest struct {
	EnableCoralogixCustomerSupportAccess *CoralogixCustomerSupportAccess `json:"enableCoralogixCustomerSupportAccess,omitempty"`
	Id *string `json:"id,omitempty"`
	IpAccess []IpAccess `json:"ipAccess,omitempty"`
}

// NewReplaceCompanyIPAccessSettingsRequest instantiates a new ReplaceCompanyIPAccessSettingsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplaceCompanyIPAccessSettingsRequest() *ReplaceCompanyIPAccessSettingsRequest {
	this := ReplaceCompanyIPAccessSettingsRequest{}
	return &this
}

// NewReplaceCompanyIPAccessSettingsRequestWithDefaults instantiates a new ReplaceCompanyIPAccessSettingsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplaceCompanyIPAccessSettingsRequestWithDefaults() *ReplaceCompanyIPAccessSettingsRequest {
	this := ReplaceCompanyIPAccessSettingsRequest{}
	return &this
}

// GetEnableCoralogixCustomerSupportAccess returns the EnableCoralogixCustomerSupportAccess field value if set, zero value otherwise.
func (o *ReplaceCompanyIPAccessSettingsRequest) GetEnableCoralogixCustomerSupportAccess() CoralogixCustomerSupportAccess {
	if o == nil || IsNil(o.EnableCoralogixCustomerSupportAccess) {
		var ret CoralogixCustomerSupportAccess
		return ret
	}
	return *o.EnableCoralogixCustomerSupportAccess
}

// GetEnableCoralogixCustomerSupportAccessOk returns a tuple with the EnableCoralogixCustomerSupportAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceCompanyIPAccessSettingsRequest) GetEnableCoralogixCustomerSupportAccessOk() (*CoralogixCustomerSupportAccess, bool) {
	if o == nil || IsNil(o.EnableCoralogixCustomerSupportAccess) {
		return nil, false
	}
	return o.EnableCoralogixCustomerSupportAccess, true
}

// HasEnableCoralogixCustomerSupportAccess returns a boolean if a field has been set.
func (o *ReplaceCompanyIPAccessSettingsRequest) HasEnableCoralogixCustomerSupportAccess() bool {
	if o != nil && !IsNil(o.EnableCoralogixCustomerSupportAccess) {
		return true
	}

	return false
}

// SetEnableCoralogixCustomerSupportAccess gets a reference to the given CoralogixCustomerSupportAccess and assigns it to the EnableCoralogixCustomerSupportAccess field.
func (o *ReplaceCompanyIPAccessSettingsRequest) SetEnableCoralogixCustomerSupportAccess(v CoralogixCustomerSupportAccess) {
	o.EnableCoralogixCustomerSupportAccess = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReplaceCompanyIPAccessSettingsRequest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceCompanyIPAccessSettingsRequest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReplaceCompanyIPAccessSettingsRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ReplaceCompanyIPAccessSettingsRequest) SetId(v string) {
	o.Id = &v
}

// GetIpAccess returns the IpAccess field value if set, zero value otherwise.
func (o *ReplaceCompanyIPAccessSettingsRequest) GetIpAccess() []IpAccess {
	if o == nil || IsNil(o.IpAccess) {
		var ret []IpAccess
		return ret
	}
	return o.IpAccess
}

// GetIpAccessOk returns a tuple with the IpAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceCompanyIPAccessSettingsRequest) GetIpAccessOk() ([]IpAccess, bool) {
	if o == nil || IsNil(o.IpAccess) {
		return nil, false
	}
	return o.IpAccess, true
}

// HasIpAccess returns a boolean if a field has been set.
func (o *ReplaceCompanyIPAccessSettingsRequest) HasIpAccess() bool {
	if o != nil && !IsNil(o.IpAccess) {
		return true
	}

	return false
}

// SetIpAccess gets a reference to the given []IpAccess and assigns it to the IpAccess field.
func (o *ReplaceCompanyIPAccessSettingsRequest) SetIpAccess(v []IpAccess) {
	o.IpAccess = v
}

func (o ReplaceCompanyIPAccessSettingsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplaceCompanyIPAccessSettingsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnableCoralogixCustomerSupportAccess) {
		toSerialize["enableCoralogixCustomerSupportAccess"] = o.EnableCoralogixCustomerSupportAccess
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IpAccess) {
		toSerialize["ipAccess"] = o.IpAccess
	}
	return toSerialize, nil
}

type NullableReplaceCompanyIPAccessSettingsRequest struct {
	value *ReplaceCompanyIPAccessSettingsRequest
	isSet bool
}

func (v NullableReplaceCompanyIPAccessSettingsRequest) Get() *ReplaceCompanyIPAccessSettingsRequest {
	return v.value
}

func (v *NullableReplaceCompanyIPAccessSettingsRequest) Set(val *ReplaceCompanyIPAccessSettingsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceCompanyIPAccessSettingsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceCompanyIPAccessSettingsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceCompanyIPAccessSettingsRequest(val *ReplaceCompanyIPAccessSettingsRequest) *NullableReplaceCompanyIPAccessSettingsRequest {
	return &NullableReplaceCompanyIPAccessSettingsRequest{value: val, isSet: true}
}

func (v NullableReplaceCompanyIPAccessSettingsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceCompanyIPAccessSettingsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


