/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ip_access_service

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// IPAccessServiceAPIService IPAccessServiceAPI service
type IPAccessServiceAPIService service

type ApiIpAccessServiceCreateCompanyIpAccessSettingsRequest struct {
	ctx context.Context
	ApiService *IPAccessServiceAPIService
	createCompanyIPAccessSettingsRequest *CreateCompanyIPAccessSettingsRequest
}

func (r ApiIpAccessServiceCreateCompanyIpAccessSettingsRequest) CreateCompanyIPAccessSettingsRequest(createCompanyIPAccessSettingsRequest CreateCompanyIPAccessSettingsRequest) ApiIpAccessServiceCreateCompanyIpAccessSettingsRequest {
	r.createCompanyIPAccessSettingsRequest = &createCompanyIPAccessSettingsRequest
	return r
}

func (r ApiIpAccessServiceCreateCompanyIpAccessSettingsRequest) Execute() (*CreateCompanyIpAccessSettingsResponse, *http.Response, error) {
	return r.ApiService.IpAccessServiceCreateCompanyIpAccessSettingsExecute(r)
}

/*
IpAccessServiceCreateCompanyIpAccessSettings Create company IP access settings

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIpAccessServiceCreateCompanyIpAccessSettingsRequest
*/
func (a *IPAccessServiceAPIService) IpAccessServiceCreateCompanyIpAccessSettings(ctx context.Context) ApiIpAccessServiceCreateCompanyIpAccessSettingsRequest {
	return ApiIpAccessServiceCreateCompanyIpAccessSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateCompanyIpAccessSettingsResponse
func (a *IPAccessServiceAPIService) IpAccessServiceCreateCompanyIpAccessSettingsExecute(r ApiIpAccessServiceCreateCompanyIpAccessSettingsRequest) (*CreateCompanyIpAccessSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateCompanyIpAccessSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPAccessServiceAPIService.IpAccessServiceCreateCompanyIpAccessSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aaa/team-sec-ip-access/v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createCompanyIPAccessSettingsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIpAccessServiceDeleteCompanyIpAccessSettingsRequest struct {
	ctx context.Context
	ApiService *IPAccessServiceAPIService
	id *string
}

func (r ApiIpAccessServiceDeleteCompanyIpAccessSettingsRequest) Id(id string) ApiIpAccessServiceDeleteCompanyIpAccessSettingsRequest {
	r.id = &id
	return r
}

func (r ApiIpAccessServiceDeleteCompanyIpAccessSettingsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.IpAccessServiceDeleteCompanyIpAccessSettingsExecute(r)
}

/*
IpAccessServiceDeleteCompanyIpAccessSettings Delete company IP access settings

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIpAccessServiceDeleteCompanyIpAccessSettingsRequest
*/
func (a *IPAccessServiceAPIService) IpAccessServiceDeleteCompanyIpAccessSettings(ctx context.Context) ApiIpAccessServiceDeleteCompanyIpAccessSettingsRequest {
	return ApiIpAccessServiceDeleteCompanyIpAccessSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *IPAccessServiceAPIService) IpAccessServiceDeleteCompanyIpAccessSettingsExecute(r ApiIpAccessServiceDeleteCompanyIpAccessSettingsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPAccessServiceAPIService.IpAccessServiceDeleteCompanyIpAccessSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aaa/team-sec-ip-access/v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIpAccessServiceGetCompanyIpAccessSettingsRequest struct {
	ctx context.Context
	ApiService *IPAccessServiceAPIService
	id *string
}

func (r ApiIpAccessServiceGetCompanyIpAccessSettingsRequest) Id(id string) ApiIpAccessServiceGetCompanyIpAccessSettingsRequest {
	r.id = &id
	return r
}

func (r ApiIpAccessServiceGetCompanyIpAccessSettingsRequest) Execute() (*GetCompanyIpAccessSettingsResponse, *http.Response, error) {
	return r.ApiService.IpAccessServiceGetCompanyIpAccessSettingsExecute(r)
}

/*
IpAccessServiceGetCompanyIpAccessSettings Get company IP access settings

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIpAccessServiceGetCompanyIpAccessSettingsRequest
*/
func (a *IPAccessServiceAPIService) IpAccessServiceGetCompanyIpAccessSettings(ctx context.Context) ApiIpAccessServiceGetCompanyIpAccessSettingsRequest {
	return ApiIpAccessServiceGetCompanyIpAccessSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetCompanyIpAccessSettingsResponse
func (a *IPAccessServiceAPIService) IpAccessServiceGetCompanyIpAccessSettingsExecute(r ApiIpAccessServiceGetCompanyIpAccessSettingsRequest) (*GetCompanyIpAccessSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetCompanyIpAccessSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPAccessServiceAPIService.IpAccessServiceGetCompanyIpAccessSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aaa/team-sec-ip-access/v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIpAccessServiceReplaceCompanyIpAccessSettingsRequest struct {
	ctx context.Context
	ApiService *IPAccessServiceAPIService
	replaceCompanyIPAccessSettingsRequest *ReplaceCompanyIPAccessSettingsRequest
}

func (r ApiIpAccessServiceReplaceCompanyIpAccessSettingsRequest) ReplaceCompanyIPAccessSettingsRequest(replaceCompanyIPAccessSettingsRequest ReplaceCompanyIPAccessSettingsRequest) ApiIpAccessServiceReplaceCompanyIpAccessSettingsRequest {
	r.replaceCompanyIPAccessSettingsRequest = &replaceCompanyIPAccessSettingsRequest
	return r
}

func (r ApiIpAccessServiceReplaceCompanyIpAccessSettingsRequest) Execute() (*ReplaceCompanyIpAccessSettingsResponse, *http.Response, error) {
	return r.ApiService.IpAccessServiceReplaceCompanyIpAccessSettingsExecute(r)
}

/*
IpAccessServiceReplaceCompanyIpAccessSettings Replace company IP access settings

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIpAccessServiceReplaceCompanyIpAccessSettingsRequest
*/
func (a *IPAccessServiceAPIService) IpAccessServiceReplaceCompanyIpAccessSettings(ctx context.Context) ApiIpAccessServiceReplaceCompanyIpAccessSettingsRequest {
	return ApiIpAccessServiceReplaceCompanyIpAccessSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ReplaceCompanyIpAccessSettingsResponse
func (a *IPAccessServiceAPIService) IpAccessServiceReplaceCompanyIpAccessSettingsExecute(r ApiIpAccessServiceReplaceCompanyIpAccessSettingsRequest) (*ReplaceCompanyIpAccessSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReplaceCompanyIpAccessSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPAccessServiceAPIService.IpAccessServiceReplaceCompanyIpAccessSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aaa/team-sec-ip-access/v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.replaceCompanyIPAccessSettingsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
