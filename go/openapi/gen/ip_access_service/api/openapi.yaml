openapi: 3.0.0
info:
  title: ""
  version: 1.0.0
servers:
- url: /
paths:
  /aaa/team-sec-ip-access/v1:
    delete:
      description: No description available
      externalDocs:
        url: ""
      operationId: IpAccessService_DeleteCompanyIpAccessSettings
      parameters:
      - explode: true
        in: query
        name: id
        required: false
        schema:
          example: "405"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteCompanyIpAccessSettingsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete company IP access settings
      tags:
      - IP access service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1?id=405';

          let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1"

          querystring = {"id":"405"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("DELETE", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1?id=405' \
            --header 'Authorization: Bearer <API_KEY>'
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: IpAccessService_GetCompanyIpAccessSettings
      parameters:
      - explode: true
        in: query
        name: id
        required: false
        schema:
          description: "The ID of the company IP access settings to get. If it's not\
            \ provided, the id will be derived from the authorization header."
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCompanyIpAccessSettingsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get company IP access settings
      tags:
      - IP access service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1?id=SOME_STRING_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1"

          querystring = {"id":"SOME_STRING_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1?id=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
    post:
      description: No description available
      externalDocs:
        url: ""
      operationId: IpAccessService_CreateCompanyIpAccessSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Create_company_IP_access_settings_request"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCompanyIpAccessSettingsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Create company IP access settings
      tags:
      - IP access service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1';

          let options = {
            method: 'POST',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"enableCoralogixCustomerSupportAccess":"CORALOGIX_CUSTOMER_SUPPORT_ACCESS_UNSPECIFIED","ipAccess":[{"enabled":true,"ipRange":"192.168.0.1/24","name":"Office Network"}]}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1"

          payload = {
              "enableCoralogixCustomerSupportAccess": "CORALOGIX_CUSTOMER_SUPPORT_ACCESS_UNSPECIFIED",
              "ipAccess": [
                  {
                      "enabled": True,
                      "ipRange": "192.168.0.1/24",
                      "name": "Office Network"
                  }
              ]
          }
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1 \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"enableCoralogixCustomerSupportAccess":"CORALOGIX_CUSTOMER_SUPPORT_ACCESS_UNSPECIFIED","ipAccess":[{"enabled":true,"ipRange":"192.168.0.1/24","name":"Office Network"}]}'
    put:
      description: No description available
      externalDocs:
        url: ""
      operationId: IpAccessService_ReplaceCompanyIpAccessSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Replace_company_IP_access_settings_request"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplaceCompanyIpAccessSettingsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Replace company IP access settings
      tags:
      - IP access service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1';

          let options = {
            method: 'PUT',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"enableCoralogixCustomerSupportAccess":"CORALOGIX_CUSTOMER_SUPPORT_ACCESS_UNSPECIFIED","id":405,"ipAccess":[{"enabled":true,"ipRange":"192.168.0.1/24","name":"Office Network"}]}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1"

          payload = {
              "enableCoralogixCustomerSupportAccess": "CORALOGIX_CUSTOMER_SUPPORT_ACCESS_UNSPECIFIED",
              "id": 405,
              "ipAccess": [
                  {
                      "enabled": True,
                      "ipRange": "192.168.0.1/24",
                      "name": "Office Network"
                  }
              ]
          }
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("PUT", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1 \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"enableCoralogixCustomerSupportAccess":"CORALOGIX_CUSTOMER_SUPPORT_ACCESS_UNSPECIFIED","id":405,"ipAccess":[{"enabled":true,"ipRange":"192.168.0.1/24","name":"Office Network"}]}'
components:
  schemas:
    CompanyIpAccessSettings:
      description: This data structure represents the IP access settings for a company.
      example:
        enableCoralogixCustomerSupportAccess: CORALOGIX_CUSTOMER_SUPPORT_ACCESS_UNSPECIFIED
        ipAccess: 405
        id: "405"
      externalDocs:
        url: ""
      properties:
        enableCoralogixCustomerSupportAccess:
          $ref: "#/components/schemas/CoralogixCustomerSupportAccess"
        id:
          description: The unique identifier for the company IP access settings. This
            is typically a company ID.
          example: "405"
          type: string
        ipAccess:
          additionalProperties:
            $ref: "#/components/schemas/IpAccess"
          description: The list of IP access entries.
          example: 405
          type: object
      title: Company IP access settings
      type: object
    CoralogixCustomerSupportAccess:
      enum:
      - CORALOGIX_CUSTOMER_SUPPORT_ACCESS_UNSPECIFIED
      - CORALOGIX_CUSTOMER_SUPPORT_ACCESS_DISABLED
      - CORALOGIX_CUSTOMER_SUPPORT_ACCESS_ENABLED
      type: string
    CreateCompanyIpAccessSettingsResponse:
      description: This data structure represents the response to create company IP
        access settings.
      example:
        settings:
          enableCoralogixCustomerSupportAccess: CORALOGIX_CUSTOMER_SUPPORT_ACCESS_UNSPECIFIED
          ipAccess: 405
          id: "405"
      externalDocs:
        url: ""
      properties:
        settings:
          $ref: "#/components/schemas/CompanyIpAccessSettings"
      title: Create company IP access settings response
      type: object
    DeleteCompanyIpAccessSettingsResponse:
      description: This data structure represents the response to delete company IP
        access settings.
      externalDocs:
        url: ""
      title: Delete company IP access settings response
      type: object
    FieldGroup:
      properties:
        name:
          type: string
        value:
          type: string
      type: object
    FilterPathAndValues:
      oneOf:
      - $ref: "#/components/schemas/FilterPathAndValues_1"
      - $ref: "#/components/schemas/FilterPathAndValues_2"
    Filters:
      description: This data structure represents a filter
      externalDocs:
        url: ""
      properties:
        operator:
          $ref: "#/components/schemas/v3.FilterOperator"
        pathAndValues:
          items:
            $ref: "#/components/schemas/FilterPathAndValues"
          type: array
      required:
      - pathAndValues
      title: Filters
      type: object
    GetCompanyIpAccessSettingsResponse:
      description: This data structure represents the response to get company IP access
        settings.
      example:
        settings:
          enableCoralogixCustomerSupportAccess: CORALOGIX_CUSTOMER_SUPPORT_ACCESS_UNSPECIFIED
          ipAccess: 405
          id: "405"
      externalDocs:
        url: ""
      properties:
        settings:
          $ref: "#/components/schemas/CompanyIpAccessSettings"
      title: Get company IP access settings response
      type: object
    IpAccess:
      description: Represents a single IP access entry.
      externalDocs:
        description: Find out more about IP access control in our documentation
        url: https://coralogix.com/docs/user-guides/account-management/account-settings/ip-access-control/
      properties:
        enabled:
          description: Whether this IP access entry is enabled.
          example: true
          type: boolean
        ipRange:
          description: The IP range in CIDR notation.
          example: 192.168.0.1/24
          type: string
        name:
          description: The name of the IP access entry.
          example: Office Network
          type: string
      required:
      - enabled
      - ipRange
      title: IP Access
      type: object
    MultipleValues:
      properties:
        matcher:
          $ref: "#/components/schemas/events.v3.FilterMatcher"
        values:
          items:
            type: string
          type: array
      type: object
    ReplaceCompanyIpAccessSettingsResponse:
      description: This data structure represents the response to replace company
        IP access settings.
      example:
        settings:
          enableCoralogixCustomerSupportAccess: CORALOGIX_CUSTOMER_SUPPORT_ACCESS_UNSPECIFIED
          ipAccess: 405
          id: "405"
      externalDocs:
        url: ""
      properties:
        settings:
          $ref: "#/components/schemas/CompanyIpAccessSettings"
      title: Replace company IP access settings response
      type: object
    common.Group:
      properties:
        field:
          $ref: "#/components/schemas/FieldGroup"
        groups:
          items:
            $ref: "#/components/schemas/common.Group"
          type: array
        value:
          format: double
          type: number
      type: object
    events.v3.FilterMatcher:
      enum:
      - FILTER_MATCHER_TEXT_OR_UNSPECIFIED
      - FILTER_MATCHER_REGEXP
      type: string
    v3.FilterOperator:
      enum:
      - FILTER_OPERATOR_AND_OR_UNSPECIFIED
      - FILTER_OPERATOR_OR
      type: string
    Replace_company_IP_access_settings_request:
      additionalProperties: false
      description: This data structure represents the request to replace company IP
        access settings.
      properties:
        enableCoralogixCustomerSupportAccess:
          $ref: "#/components/schemas/CoralogixCustomerSupportAccess"
        id:
          example: "405"
          type: string
        ipAccess:
          items:
            $ref: "#/components/schemas/IpAccess"
          type: array
      title: Replace company IP access settings request
      type: object
    Create_company_IP_access_settings_request:
      additionalProperties: false
      description: This data structure represents the request to create company IP
        access settings.
      properties:
        enableCoralogixCustomerSupportAccess:
          $ref: "#/components/schemas/CoralogixCustomerSupportAccess"
        ipAccess:
          items:
            $ref: "#/components/schemas/IpAccess"
          type: array
      title: Create company IP access settings request
      type: object
    FilterPathAndValues_1:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        multipleValues:
          $ref: "#/components/schemas/MultipleValues"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
    FilterPathAndValues_2:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        filters:
          $ref: "#/components/schemas/Filters"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
  securitySchemes:
    apiKeyAuth:
      description: API key authentication
      in: header
      name: Authorization
      type: apiKey
