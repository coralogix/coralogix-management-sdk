/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ip_access_service

import (
	"encoding/json"
	"fmt"
)

// CoralogixCustomerSupportAccess the model 'CoralogixCustomerSupportAccess'
type CoralogixCustomerSupportAccess string

// List of CoralogixCustomerSupportAccess
const (
	CORALOGIXCUSTOMERSUPPORTACCESS_CORALOGIX_CUSTOMER_SUPPORT_ACCESS_UNSPECIFIED CoralogixCustomerSupportAccess = "CORALOGIX_CUSTOMER_SUPPORT_ACCESS_UNSPECIFIED"
	CORALOGIXCUSTOMERSUPPORTACCESS_CORALOGIX_CUSTOMER_SUPPORT_ACCESS_DISABLED CoralogixCustomerSupportAccess = "CORALOGIX_CUSTOMER_SUPPORT_ACCESS_DISABLED"
	CORALOGIXCUSTOMERSUPPORTACCESS_CORALOGIX_CUSTOMER_SUPPORT_ACCESS_ENABLED CoralogixCustomerSupportAccess = "CORALOGIX_CUSTOMER_SUPPORT_ACCESS_ENABLED"
)

// All allowed values of CoralogixCustomerSupportAccess enum
var AllowedCoralogixCustomerSupportAccessEnumValues = []CoralogixCustomerSupportAccess{
	"CORALOGIX_CUSTOMER_SUPPORT_ACCESS_UNSPECIFIED",
	"CORALOGIX_CUSTOMER_SUPPORT_ACCESS_DISABLED",
	"CORALOGIX_CUSTOMER_SUPPORT_ACCESS_ENABLED",
}

func (v *CoralogixCustomerSupportAccess) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CoralogixCustomerSupportAccess(value)
	for _, existing := range AllowedCoralogixCustomerSupportAccessEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CoralogixCustomerSupportAccess", value)
}

// NewCoralogixCustomerSupportAccessFromValue returns a pointer to a valid CoralogixCustomerSupportAccess
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCoralogixCustomerSupportAccessFromValue(v string) (*CoralogixCustomerSupportAccess, error) {
	ev := CoralogixCustomerSupportAccess(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CoralogixCustomerSupportAccess: valid values are %v", v, AllowedCoralogixCustomerSupportAccessEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CoralogixCustomerSupportAccess) IsValid() bool {
	for _, existing := range AllowedCoralogixCustomerSupportAccessEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CoralogixCustomerSupportAccess value
func (v CoralogixCustomerSupportAccess) Ptr() *CoralogixCustomerSupportAccess {
	return &v
}

type NullableCoralogixCustomerSupportAccess struct {
	value *CoralogixCustomerSupportAccess
	isSet bool
}

func (v NullableCoralogixCustomerSupportAccess) Get() *CoralogixCustomerSupportAccess {
	return v.value
}

func (v *NullableCoralogixCustomerSupportAccess) Set(val *CoralogixCustomerSupportAccess) {
	v.value = val
	v.isSet = true
}

func (v NullableCoralogixCustomerSupportAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableCoralogixCustomerSupportAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoralogixCustomerSupportAccess(val *CoralogixCustomerSupportAccess) *NullableCoralogixCustomerSupportAccess {
	return &NullableCoralogixCustomerSupportAccess{value: val, isSet: true}
}

func (v NullableCoralogixCustomerSupportAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoralogixCustomerSupportAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

