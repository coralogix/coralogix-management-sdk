/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ip_access_service

import (
	"encoding/json"
)

// checks if the ReplaceCompanyIpAccessSettingsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplaceCompanyIpAccessSettingsResponse{}

// ReplaceCompanyIpAccessSettingsResponse This data structure represents the response to replace company IP access settings.
type ReplaceCompanyIpAccessSettingsResponse struct {
	Settings *CompanyIpAccessSettings `json:"settings,omitempty"`
}

// NewReplaceCompanyIpAccessSettingsResponse instantiates a new ReplaceCompanyIpAccessSettingsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplaceCompanyIpAccessSettingsResponse() *ReplaceCompanyIpAccessSettingsResponse {
	this := ReplaceCompanyIpAccessSettingsResponse{}
	return &this
}

// NewReplaceCompanyIpAccessSettingsResponseWithDefaults instantiates a new ReplaceCompanyIpAccessSettingsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplaceCompanyIpAccessSettingsResponseWithDefaults() *ReplaceCompanyIpAccessSettingsResponse {
	this := ReplaceCompanyIpAccessSettingsResponse{}
	return &this
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *ReplaceCompanyIpAccessSettingsResponse) GetSettings() CompanyIpAccessSettings {
	if o == nil || IsNil(o.Settings) {
		var ret CompanyIpAccessSettings
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceCompanyIpAccessSettingsResponse) GetSettingsOk() (*CompanyIpAccessSettings, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *ReplaceCompanyIpAccessSettingsResponse) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given CompanyIpAccessSettings and assigns it to the Settings field.
func (o *ReplaceCompanyIpAccessSettingsResponse) SetSettings(v CompanyIpAccessSettings) {
	o.Settings = &v
}

func (o ReplaceCompanyIpAccessSettingsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplaceCompanyIpAccessSettingsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	return toSerialize, nil
}

type NullableReplaceCompanyIpAccessSettingsResponse struct {
	value *ReplaceCompanyIpAccessSettingsResponse
	isSet bool
}

func (v NullableReplaceCompanyIpAccessSettingsResponse) Get() *ReplaceCompanyIpAccessSettingsResponse {
	return v.value
}

func (v *NullableReplaceCompanyIpAccessSettingsResponse) Set(val *ReplaceCompanyIpAccessSettingsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceCompanyIpAccessSettingsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceCompanyIpAccessSettingsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceCompanyIpAccessSettingsResponse(val *ReplaceCompanyIpAccessSettingsResponse) *NullableReplaceCompanyIpAccessSettingsResponse {
	return &NullableReplaceCompanyIpAccessSettingsResponse{value: val, isSet: true}
}

func (v NullableReplaceCompanyIpAccessSettingsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceCompanyIpAccessSettingsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


