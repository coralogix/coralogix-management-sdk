/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ip_access_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// FilterPathAndValues - struct for FilterPathAndValues
type FilterPathAndValues struct {
	FilterPathAndValuesFilters *FilterPathAndValuesFilters
	FilterPathAndValuesMultipleValues *FilterPathAndValuesMultipleValues
}

// FilterPathAndValuesFiltersAsFilterPathAndValues is a convenience function that returns FilterPathAndValuesFilters wrapped in FilterPathAndValues
func FilterPathAndValuesFiltersAsFilterPathAndValues(v *FilterPathAndValuesFilters) FilterPathAndValues {
	return FilterPathAndValues{
		FilterPathAndValuesFilters: v,
	}
}

// FilterPathAndValuesMultipleValuesAsFilterPathAndValues is a convenience function that returns FilterPathAndValuesMultipleValues wrapped in FilterPathAndValues
func FilterPathAndValuesMultipleValuesAsFilterPathAndValues(v *FilterPathAndValuesMultipleValues) FilterPathAndValues {
	return FilterPathAndValues{
		FilterPathAndValuesMultipleValues: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FilterPathAndValues) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FilterPathAndValuesFilters
	err = newStrictDecoder(data).Decode(&dst.FilterPathAndValuesFilters)
	if err == nil {
		jsonFilterPathAndValuesFilters, _ := json.Marshal(dst.FilterPathAndValuesFilters)
		if string(jsonFilterPathAndValuesFilters) == "{}" { // empty struct
			dst.FilterPathAndValuesFilters = nil
		} else {
			if err = validator.Validate(dst.FilterPathAndValuesFilters); err != nil {
				dst.FilterPathAndValuesFilters = nil
			} else {
				match++
			}
		}
	} else {
		dst.FilterPathAndValuesFilters = nil
	}

	// try to unmarshal data into FilterPathAndValuesMultipleValues
	err = newStrictDecoder(data).Decode(&dst.FilterPathAndValuesMultipleValues)
	if err == nil {
		jsonFilterPathAndValuesMultipleValues, _ := json.Marshal(dst.FilterPathAndValuesMultipleValues)
		if string(jsonFilterPathAndValuesMultipleValues) == "{}" { // empty struct
			dst.FilterPathAndValuesMultipleValues = nil
		} else {
			if err = validator.Validate(dst.FilterPathAndValuesMultipleValues); err != nil {
				dst.FilterPathAndValuesMultipleValues = nil
			} else {
				match++
			}
		}
	} else {
		dst.FilterPathAndValuesMultipleValues = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FilterPathAndValuesFilters = nil
		dst.FilterPathAndValuesMultipleValues = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FilterPathAndValues)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FilterPathAndValues)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FilterPathAndValues) MarshalJSON() ([]byte, error) {
	if src.FilterPathAndValuesFilters != nil {
		return json.Marshal(&src.FilterPathAndValuesFilters)
	}

	if src.FilterPathAndValuesMultipleValues != nil {
		return json.Marshal(&src.FilterPathAndValuesMultipleValues)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FilterPathAndValues) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FilterPathAndValuesFilters != nil {
		return obj.FilterPathAndValuesFilters
	}

	if obj.FilterPathAndValuesMultipleValues != nil {
		return obj.FilterPathAndValuesMultipleValues
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj FilterPathAndValues) GetActualInstanceValue() (interface{}) {
	if obj.FilterPathAndValuesFilters != nil {
		return *obj.FilterPathAndValuesFilters
	}

	if obj.FilterPathAndValuesMultipleValues != nil {
		return *obj.FilterPathAndValuesMultipleValues
	}

	// all schemas are nil
	return nil
}

type NullableFilterPathAndValues struct {
	value *FilterPathAndValues
	isSet bool
}

func (v NullableFilterPathAndValues) Get() *FilterPathAndValues {
	return v.value
}

func (v *NullableFilterPathAndValues) Set(val *FilterPathAndValues) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterPathAndValues) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterPathAndValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterPathAndValues(val *FilterPathAndValues) *NullableFilterPathAndValues {
	return &NullableFilterPathAndValues{value: val, isSet: true}
}

func (v NullableFilterPathAndValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterPathAndValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


