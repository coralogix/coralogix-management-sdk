/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ip_access_service

import (
	"encoding/json"
)

// checks if the CompanyIpAccessSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyIpAccessSettings{}

// CompanyIpAccessSettings This data structure represents the IP access settings for a company.
type CompanyIpAccessSettings struct {
	EnableCoralogixCustomerSupportAccess *CoralogixCustomerSupportAccess `json:"enableCoralogixCustomerSupportAccess,omitempty"`
	// The unique identifier for the company IP access settings. This is typically a company ID.
	Id *string `json:"id,omitempty"`
	// The list of IP access entries.
	IpAccess *map[string]IpAccess `json:"ipAccess,omitempty"`
}

// NewCompanyIpAccessSettings instantiates a new CompanyIpAccessSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyIpAccessSettings() *CompanyIpAccessSettings {
	this := CompanyIpAccessSettings{}
	return &this
}

// NewCompanyIpAccessSettingsWithDefaults instantiates a new CompanyIpAccessSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyIpAccessSettingsWithDefaults() *CompanyIpAccessSettings {
	this := CompanyIpAccessSettings{}
	return &this
}

// GetEnableCoralogixCustomerSupportAccess returns the EnableCoralogixCustomerSupportAccess field value if set, zero value otherwise.
func (o *CompanyIpAccessSettings) GetEnableCoralogixCustomerSupportAccess() CoralogixCustomerSupportAccess {
	if o == nil || IsNil(o.EnableCoralogixCustomerSupportAccess) {
		var ret CoralogixCustomerSupportAccess
		return ret
	}
	return *o.EnableCoralogixCustomerSupportAccess
}

// GetEnableCoralogixCustomerSupportAccessOk returns a tuple with the EnableCoralogixCustomerSupportAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyIpAccessSettings) GetEnableCoralogixCustomerSupportAccessOk() (*CoralogixCustomerSupportAccess, bool) {
	if o == nil || IsNil(o.EnableCoralogixCustomerSupportAccess) {
		return nil, false
	}
	return o.EnableCoralogixCustomerSupportAccess, true
}

// HasEnableCoralogixCustomerSupportAccess returns a boolean if a field has been set.
func (o *CompanyIpAccessSettings) HasEnableCoralogixCustomerSupportAccess() bool {
	if o != nil && !IsNil(o.EnableCoralogixCustomerSupportAccess) {
		return true
	}

	return false
}

// SetEnableCoralogixCustomerSupportAccess gets a reference to the given CoralogixCustomerSupportAccess and assigns it to the EnableCoralogixCustomerSupportAccess field.
func (o *CompanyIpAccessSettings) SetEnableCoralogixCustomerSupportAccess(v CoralogixCustomerSupportAccess) {
	o.EnableCoralogixCustomerSupportAccess = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CompanyIpAccessSettings) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyIpAccessSettings) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CompanyIpAccessSettings) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CompanyIpAccessSettings) SetId(v string) {
	o.Id = &v
}

// GetIpAccess returns the IpAccess field value if set, zero value otherwise.
func (o *CompanyIpAccessSettings) GetIpAccess() map[string]IpAccess {
	if o == nil || IsNil(o.IpAccess) {
		var ret map[string]IpAccess
		return ret
	}
	return *o.IpAccess
}

// GetIpAccessOk returns a tuple with the IpAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyIpAccessSettings) GetIpAccessOk() (*map[string]IpAccess, bool) {
	if o == nil || IsNil(o.IpAccess) {
		return nil, false
	}
	return o.IpAccess, true
}

// HasIpAccess returns a boolean if a field has been set.
func (o *CompanyIpAccessSettings) HasIpAccess() bool {
	if o != nil && !IsNil(o.IpAccess) {
		return true
	}

	return false
}

// SetIpAccess gets a reference to the given map[string]IpAccess and assigns it to the IpAccess field.
func (o *CompanyIpAccessSettings) SetIpAccess(v map[string]IpAccess) {
	o.IpAccess = &v
}

func (o CompanyIpAccessSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyIpAccessSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnableCoralogixCustomerSupportAccess) {
		toSerialize["enableCoralogixCustomerSupportAccess"] = o.EnableCoralogixCustomerSupportAccess
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IpAccess) {
		toSerialize["ipAccess"] = o.IpAccess
	}
	return toSerialize, nil
}

type NullableCompanyIpAccessSettings struct {
	value *CompanyIpAccessSettings
	isSet bool
}

func (v NullableCompanyIpAccessSettings) Get() *CompanyIpAccessSettings {
	return v.value
}

func (v *NullableCompanyIpAccessSettings) Set(val *CompanyIpAccessSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyIpAccessSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyIpAccessSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyIpAccessSettings(val *CompanyIpAccessSettings) *NullableCompanyIpAccessSettings {
	return &NullableCompanyIpAccessSettings{value: val, isSet: true}
}

func (v NullableCompanyIpAccessSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyIpAccessSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


