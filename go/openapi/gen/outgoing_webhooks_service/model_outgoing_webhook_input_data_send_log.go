/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package outgoing_webhooks_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OutgoingWebhookInputDataSendLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutgoingWebhookInputDataSendLog{}

// OutgoingWebhookInputDataSendLog struct for OutgoingWebhookInputDataSendLog
type OutgoingWebhookInputDataSendLog struct {
	Name string `json:"name"`
	SendLog *SendLogConfig `json:"sendLog,omitempty"`
	Type WebhookType `json:"type"`
	Url *string `json:"url,omitempty"`
}

type _OutgoingWebhookInputDataSendLog OutgoingWebhookInputDataSendLog

// NewOutgoingWebhookInputDataSendLog instantiates a new OutgoingWebhookInputDataSendLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutgoingWebhookInputDataSendLog(name string, type_ WebhookType) *OutgoingWebhookInputDataSendLog {
	this := OutgoingWebhookInputDataSendLog{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewOutgoingWebhookInputDataSendLogWithDefaults instantiates a new OutgoingWebhookInputDataSendLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutgoingWebhookInputDataSendLogWithDefaults() *OutgoingWebhookInputDataSendLog {
	this := OutgoingWebhookInputDataSendLog{}
	return &this
}

// GetName returns the Name field value
func (o *OutgoingWebhookInputDataSendLog) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OutgoingWebhookInputDataSendLog) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OutgoingWebhookInputDataSendLog) SetName(v string) {
	o.Name = v
}

// GetSendLog returns the SendLog field value if set, zero value otherwise.
func (o *OutgoingWebhookInputDataSendLog) GetSendLog() SendLogConfig {
	if o == nil || IsNil(o.SendLog) {
		var ret SendLogConfig
		return ret
	}
	return *o.SendLog
}

// GetSendLogOk returns a tuple with the SendLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingWebhookInputDataSendLog) GetSendLogOk() (*SendLogConfig, bool) {
	if o == nil || IsNil(o.SendLog) {
		return nil, false
	}
	return o.SendLog, true
}

// HasSendLog returns a boolean if a field has been set.
func (o *OutgoingWebhookInputDataSendLog) HasSendLog() bool {
	if o != nil && !IsNil(o.SendLog) {
		return true
	}

	return false
}

// SetSendLog gets a reference to the given SendLogConfig and assigns it to the SendLog field.
func (o *OutgoingWebhookInputDataSendLog) SetSendLog(v SendLogConfig) {
	o.SendLog = &v
}

// GetType returns the Type field value
func (o *OutgoingWebhookInputDataSendLog) GetType() WebhookType {
	if o == nil {
		var ret WebhookType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *OutgoingWebhookInputDataSendLog) GetTypeOk() (*WebhookType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *OutgoingWebhookInputDataSendLog) SetType(v WebhookType) {
	o.Type = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *OutgoingWebhookInputDataSendLog) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingWebhookInputDataSendLog) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *OutgoingWebhookInputDataSendLog) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *OutgoingWebhookInputDataSendLog) SetUrl(v string) {
	o.Url = &v
}

func (o OutgoingWebhookInputDataSendLog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutgoingWebhookInputDataSendLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.SendLog) {
		toSerialize["sendLog"] = o.SendLog
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

func (o *OutgoingWebhookInputDataSendLog) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOutgoingWebhookInputDataSendLog := _OutgoingWebhookInputDataSendLog{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOutgoingWebhookInputDataSendLog)

	if err != nil {
		return err
	}

	*o = OutgoingWebhookInputDataSendLog(varOutgoingWebhookInputDataSendLog)

	return err
}

type NullableOutgoingWebhookInputDataSendLog struct {
	value *OutgoingWebhookInputDataSendLog
	isSet bool
}

func (v NullableOutgoingWebhookInputDataSendLog) Get() *OutgoingWebhookInputDataSendLog {
	return v.value
}

func (v *NullableOutgoingWebhookInputDataSendLog) Set(val *OutgoingWebhookInputDataSendLog) {
	v.value = val
	v.isSet = true
}

func (v NullableOutgoingWebhookInputDataSendLog) IsSet() bool {
	return v.isSet
}

func (v *NullableOutgoingWebhookInputDataSendLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutgoingWebhookInputDataSendLog(val *OutgoingWebhookInputDataSendLog) *NullableOutgoingWebhookInputDataSendLog {
	return &NullableOutgoingWebhookInputDataSendLog{value: val, isSet: true}
}

func (v NullableOutgoingWebhookInputDataSendLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutgoingWebhookInputDataSendLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


