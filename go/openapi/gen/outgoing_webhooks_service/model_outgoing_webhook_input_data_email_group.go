/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package outgoing_webhooks_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OutgoingWebhookInputDataEmailGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutgoingWebhookInputDataEmailGroup{}

// OutgoingWebhookInputDataEmailGroup struct for OutgoingWebhookInputDataEmailGroup
type OutgoingWebhookInputDataEmailGroup struct {
	EmailGroup *EmailGroupConfig `json:"emailGroup,omitempty"`
	Name string `json:"name"`
	Type WebhookType `json:"type"`
	Url *string `json:"url,omitempty"`
}

type _OutgoingWebhookInputDataEmailGroup OutgoingWebhookInputDataEmailGroup

// NewOutgoingWebhookInputDataEmailGroup instantiates a new OutgoingWebhookInputDataEmailGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutgoingWebhookInputDataEmailGroup(name string, type_ WebhookType) *OutgoingWebhookInputDataEmailGroup {
	this := OutgoingWebhookInputDataEmailGroup{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewOutgoingWebhookInputDataEmailGroupWithDefaults instantiates a new OutgoingWebhookInputDataEmailGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutgoingWebhookInputDataEmailGroupWithDefaults() *OutgoingWebhookInputDataEmailGroup {
	this := OutgoingWebhookInputDataEmailGroup{}
	return &this
}

// GetEmailGroup returns the EmailGroup field value if set, zero value otherwise.
func (o *OutgoingWebhookInputDataEmailGroup) GetEmailGroup() EmailGroupConfig {
	if o == nil || IsNil(o.EmailGroup) {
		var ret EmailGroupConfig
		return ret
	}
	return *o.EmailGroup
}

// GetEmailGroupOk returns a tuple with the EmailGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingWebhookInputDataEmailGroup) GetEmailGroupOk() (*EmailGroupConfig, bool) {
	if o == nil || IsNil(o.EmailGroup) {
		return nil, false
	}
	return o.EmailGroup, true
}

// HasEmailGroup returns a boolean if a field has been set.
func (o *OutgoingWebhookInputDataEmailGroup) HasEmailGroup() bool {
	if o != nil && !IsNil(o.EmailGroup) {
		return true
	}

	return false
}

// SetEmailGroup gets a reference to the given EmailGroupConfig and assigns it to the EmailGroup field.
func (o *OutgoingWebhookInputDataEmailGroup) SetEmailGroup(v EmailGroupConfig) {
	o.EmailGroup = &v
}

// GetName returns the Name field value
func (o *OutgoingWebhookInputDataEmailGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OutgoingWebhookInputDataEmailGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OutgoingWebhookInputDataEmailGroup) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *OutgoingWebhookInputDataEmailGroup) GetType() WebhookType {
	if o == nil {
		var ret WebhookType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *OutgoingWebhookInputDataEmailGroup) GetTypeOk() (*WebhookType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *OutgoingWebhookInputDataEmailGroup) SetType(v WebhookType) {
	o.Type = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *OutgoingWebhookInputDataEmailGroup) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingWebhookInputDataEmailGroup) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *OutgoingWebhookInputDataEmailGroup) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *OutgoingWebhookInputDataEmailGroup) SetUrl(v string) {
	o.Url = &v
}

func (o OutgoingWebhookInputDataEmailGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutgoingWebhookInputDataEmailGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EmailGroup) {
		toSerialize["emailGroup"] = o.EmailGroup
	}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

func (o *OutgoingWebhookInputDataEmailGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOutgoingWebhookInputDataEmailGroup := _OutgoingWebhookInputDataEmailGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOutgoingWebhookInputDataEmailGroup)

	if err != nil {
		return err
	}

	*o = OutgoingWebhookInputDataEmailGroup(varOutgoingWebhookInputDataEmailGroup)

	return err
}

type NullableOutgoingWebhookInputDataEmailGroup struct {
	value *OutgoingWebhookInputDataEmailGroup
	isSet bool
}

func (v NullableOutgoingWebhookInputDataEmailGroup) Get() *OutgoingWebhookInputDataEmailGroup {
	return v.value
}

func (v *NullableOutgoingWebhookInputDataEmailGroup) Set(val *OutgoingWebhookInputDataEmailGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableOutgoingWebhookInputDataEmailGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableOutgoingWebhookInputDataEmailGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutgoingWebhookInputDataEmailGroup(val *OutgoingWebhookInputDataEmailGroup) *NullableOutgoingWebhookInputDataEmailGroup {
	return &NullableOutgoingWebhookInputDataEmailGroup{value: val, isSet: true}
}

func (v NullableOutgoingWebhookInputDataEmailGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutgoingWebhookInputDataEmailGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


