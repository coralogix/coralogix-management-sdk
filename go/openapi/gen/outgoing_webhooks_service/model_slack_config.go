/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package outgoing_webhooks_service

import (
	"encoding/json"
)

// checks if the SlackConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SlackConfig{}

// SlackConfig struct for SlackConfig
type SlackConfig struct {
	Attachments []Attachment `json:"attachments,omitempty"`
	Digests []Digest `json:"digests,omitempty"`
}

// NewSlackConfig instantiates a new SlackConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSlackConfig() *SlackConfig {
	this := SlackConfig{}
	return &this
}

// NewSlackConfigWithDefaults instantiates a new SlackConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSlackConfigWithDefaults() *SlackConfig {
	this := SlackConfig{}
	return &this
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *SlackConfig) GetAttachments() []Attachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []Attachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlackConfig) GetAttachmentsOk() ([]Attachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *SlackConfig) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []Attachment and assigns it to the Attachments field.
func (o *SlackConfig) SetAttachments(v []Attachment) {
	o.Attachments = v
}

// GetDigests returns the Digests field value if set, zero value otherwise.
func (o *SlackConfig) GetDigests() []Digest {
	if o == nil || IsNil(o.Digests) {
		var ret []Digest
		return ret
	}
	return o.Digests
}

// GetDigestsOk returns a tuple with the Digests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlackConfig) GetDigestsOk() ([]Digest, bool) {
	if o == nil || IsNil(o.Digests) {
		return nil, false
	}
	return o.Digests, true
}

// HasDigests returns a boolean if a field has been set.
func (o *SlackConfig) HasDigests() bool {
	if o != nil && !IsNil(o.Digests) {
		return true
	}

	return false
}

// SetDigests gets a reference to the given []Digest and assigns it to the Digests field.
func (o *SlackConfig) SetDigests(v []Digest) {
	o.Digests = v
}

func (o SlackConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SlackConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	if !IsNil(o.Digests) {
		toSerialize["digests"] = o.Digests
	}
	return toSerialize, nil
}

type NullableSlackConfig struct {
	value *SlackConfig
	isSet bool
}

func (v NullableSlackConfig) Get() *SlackConfig {
	return v.value
}

func (v *NullableSlackConfig) Set(val *SlackConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSlackConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSlackConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlackConfig(val *SlackConfig) *NullableSlackConfig {
	return &NullableSlackConfig{value: val, isSet: true}
}

func (v NullableSlackConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlackConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


