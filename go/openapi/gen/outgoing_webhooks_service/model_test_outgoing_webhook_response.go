/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package outgoing_webhooks_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// TestOutgoingWebhookResponse - struct for TestOutgoingWebhookResponse
type TestOutgoingWebhookResponse struct {
	TestOutgoingWebhookResponseFailure *TestOutgoingWebhookResponseFailure
	TestOutgoingWebhookResponseSuccess *TestOutgoingWebhookResponseSuccess
}

// TestOutgoingWebhookResponseFailureAsTestOutgoingWebhookResponse is a convenience function that returns TestOutgoingWebhookResponseFailure wrapped in TestOutgoingWebhookResponse
func TestOutgoingWebhookResponseFailureAsTestOutgoingWebhookResponse(v *TestOutgoingWebhookResponseFailure) TestOutgoingWebhookResponse {
	return TestOutgoingWebhookResponse{
		TestOutgoingWebhookResponseFailure: v,
	}
}

// TestOutgoingWebhookResponseSuccessAsTestOutgoingWebhookResponse is a convenience function that returns TestOutgoingWebhookResponseSuccess wrapped in TestOutgoingWebhookResponse
func TestOutgoingWebhookResponseSuccessAsTestOutgoingWebhookResponse(v *TestOutgoingWebhookResponseSuccess) TestOutgoingWebhookResponse {
	return TestOutgoingWebhookResponse{
		TestOutgoingWebhookResponseSuccess: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TestOutgoingWebhookResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TestOutgoingWebhookResponseFailure
	err = newStrictDecoder(data).Decode(&dst.TestOutgoingWebhookResponseFailure)
	if err == nil {
		jsonTestOutgoingWebhookResponseFailure, _ := json.Marshal(dst.TestOutgoingWebhookResponseFailure)
		if string(jsonTestOutgoingWebhookResponseFailure) == "{}" { // empty struct
			dst.TestOutgoingWebhookResponseFailure = nil
		} else {
			if err = validator.Validate(dst.TestOutgoingWebhookResponseFailure); err != nil {
				dst.TestOutgoingWebhookResponseFailure = nil
			} else {
				match++
			}
		}
	} else {
		dst.TestOutgoingWebhookResponseFailure = nil
	}

	// try to unmarshal data into TestOutgoingWebhookResponseSuccess
	err = newStrictDecoder(data).Decode(&dst.TestOutgoingWebhookResponseSuccess)
	if err == nil {
		jsonTestOutgoingWebhookResponseSuccess, _ := json.Marshal(dst.TestOutgoingWebhookResponseSuccess)
		if string(jsonTestOutgoingWebhookResponseSuccess) == "{}" { // empty struct
			dst.TestOutgoingWebhookResponseSuccess = nil
		} else {
			if err = validator.Validate(dst.TestOutgoingWebhookResponseSuccess); err != nil {
				dst.TestOutgoingWebhookResponseSuccess = nil
			} else {
				match++
			}
		}
	} else {
		dst.TestOutgoingWebhookResponseSuccess = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TestOutgoingWebhookResponseFailure = nil
		dst.TestOutgoingWebhookResponseSuccess = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TestOutgoingWebhookResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TestOutgoingWebhookResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TestOutgoingWebhookResponse) MarshalJSON() ([]byte, error) {
	if src.TestOutgoingWebhookResponseFailure != nil {
		return json.Marshal(&src.TestOutgoingWebhookResponseFailure)
	}

	if src.TestOutgoingWebhookResponseSuccess != nil {
		return json.Marshal(&src.TestOutgoingWebhookResponseSuccess)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TestOutgoingWebhookResponse) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TestOutgoingWebhookResponseFailure != nil {
		return obj.TestOutgoingWebhookResponseFailure
	}

	if obj.TestOutgoingWebhookResponseSuccess != nil {
		return obj.TestOutgoingWebhookResponseSuccess
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj TestOutgoingWebhookResponse) GetActualInstanceValue() (interface{}) {
	if obj.TestOutgoingWebhookResponseFailure != nil {
		return *obj.TestOutgoingWebhookResponseFailure
	}

	if obj.TestOutgoingWebhookResponseSuccess != nil {
		return *obj.TestOutgoingWebhookResponseSuccess
	}

	// all schemas are nil
	return nil
}

type NullableTestOutgoingWebhookResponse struct {
	value *TestOutgoingWebhookResponse
	isSet bool
}

func (v NullableTestOutgoingWebhookResponse) Get() *TestOutgoingWebhookResponse {
	return v.value
}

func (v *NullableTestOutgoingWebhookResponse) Set(val *TestOutgoingWebhookResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTestOutgoingWebhookResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTestOutgoingWebhookResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestOutgoingWebhookResponse(val *TestOutgoingWebhookResponse) *NullableTestOutgoingWebhookResponse {
	return &NullableTestOutgoingWebhookResponse{value: val, isSet: true}
}

func (v NullableTestOutgoingWebhookResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestOutgoingWebhookResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


