/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package outgoing_webhooks_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FilterPathAndValuesMultipleValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterPathAndValuesMultipleValues{}

// FilterPathAndValuesMultipleValues This data structure represents a filter path and values
type FilterPathAndValuesMultipleValues struct {
	MultipleValues *MultipleValues `json:"multipleValues,omitempty"`
	Path string `json:"path"`
}

type _FilterPathAndValuesMultipleValues FilterPathAndValuesMultipleValues

// NewFilterPathAndValuesMultipleValues instantiates a new FilterPathAndValuesMultipleValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterPathAndValuesMultipleValues(path string) *FilterPathAndValuesMultipleValues {
	this := FilterPathAndValuesMultipleValues{}
	this.Path = path
	return &this
}

// NewFilterPathAndValuesMultipleValuesWithDefaults instantiates a new FilterPathAndValuesMultipleValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterPathAndValuesMultipleValuesWithDefaults() *FilterPathAndValuesMultipleValues {
	this := FilterPathAndValuesMultipleValues{}
	return &this
}

// GetMultipleValues returns the MultipleValues field value if set, zero value otherwise.
func (o *FilterPathAndValuesMultipleValues) GetMultipleValues() MultipleValues {
	if o == nil || IsNil(o.MultipleValues) {
		var ret MultipleValues
		return ret
	}
	return *o.MultipleValues
}

// GetMultipleValuesOk returns a tuple with the MultipleValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterPathAndValuesMultipleValues) GetMultipleValuesOk() (*MultipleValues, bool) {
	if o == nil || IsNil(o.MultipleValues) {
		return nil, false
	}
	return o.MultipleValues, true
}

// HasMultipleValues returns a boolean if a field has been set.
func (o *FilterPathAndValuesMultipleValues) HasMultipleValues() bool {
	if o != nil && !IsNil(o.MultipleValues) {
		return true
	}

	return false
}

// SetMultipleValues gets a reference to the given MultipleValues and assigns it to the MultipleValues field.
func (o *FilterPathAndValuesMultipleValues) SetMultipleValues(v MultipleValues) {
	o.MultipleValues = &v
}

// GetPath returns the Path field value
func (o *FilterPathAndValuesMultipleValues) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *FilterPathAndValuesMultipleValues) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *FilterPathAndValuesMultipleValues) SetPath(v string) {
	o.Path = v
}

func (o FilterPathAndValuesMultipleValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterPathAndValuesMultipleValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MultipleValues) {
		toSerialize["multipleValues"] = o.MultipleValues
	}
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

func (o *FilterPathAndValuesMultipleValues) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFilterPathAndValuesMultipleValues := _FilterPathAndValuesMultipleValues{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFilterPathAndValuesMultipleValues)

	if err != nil {
		return err
	}

	*o = FilterPathAndValuesMultipleValues(varFilterPathAndValuesMultipleValues)

	return err
}

type NullableFilterPathAndValuesMultipleValues struct {
	value *FilterPathAndValuesMultipleValues
	isSet bool
}

func (v NullableFilterPathAndValuesMultipleValues) Get() *FilterPathAndValuesMultipleValues {
	return v.value
}

func (v *NullableFilterPathAndValuesMultipleValues) Set(val *FilterPathAndValuesMultipleValues) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterPathAndValuesMultipleValues) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterPathAndValuesMultipleValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterPathAndValuesMultipleValues(val *FilterPathAndValuesMultipleValues) *NullableFilterPathAndValuesMultipleValues {
	return &NullableFilterPathAndValuesMultipleValues{value: val, isSet: true}
}

func (v NullableFilterPathAndValuesMultipleValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterPathAndValuesMultipleValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


