/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package outgoing_webhooks_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JiraConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JiraConfig{}

// JiraConfig struct for JiraConfig
type JiraConfig struct {
	ApiToken string `json:"apiToken"`
	Email string `json:"email"`
	ProjectKey string `json:"projectKey"`
}

type _JiraConfig JiraConfig

// NewJiraConfig instantiates a new JiraConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJiraConfig(apiToken string, email string, projectKey string) *JiraConfig {
	this := JiraConfig{}
	this.ApiToken = apiToken
	this.Email = email
	this.ProjectKey = projectKey
	return &this
}

// NewJiraConfigWithDefaults instantiates a new JiraConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJiraConfigWithDefaults() *JiraConfig {
	this := JiraConfig{}
	return &this
}

// GetApiToken returns the ApiToken field value
func (o *JiraConfig) GetApiToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiToken
}

// GetApiTokenOk returns a tuple with the ApiToken field value
// and a boolean to check if the value has been set.
func (o *JiraConfig) GetApiTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiToken, true
}

// SetApiToken sets field value
func (o *JiraConfig) SetApiToken(v string) {
	o.ApiToken = v
}

// GetEmail returns the Email field value
func (o *JiraConfig) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *JiraConfig) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *JiraConfig) SetEmail(v string) {
	o.Email = v
}

// GetProjectKey returns the ProjectKey field value
func (o *JiraConfig) GetProjectKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectKey
}

// GetProjectKeyOk returns a tuple with the ProjectKey field value
// and a boolean to check if the value has been set.
func (o *JiraConfig) GetProjectKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectKey, true
}

// SetProjectKey sets field value
func (o *JiraConfig) SetProjectKey(v string) {
	o.ProjectKey = v
}

func (o JiraConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JiraConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["apiToken"] = o.ApiToken
	toSerialize["email"] = o.Email
	toSerialize["projectKey"] = o.ProjectKey
	return toSerialize, nil
}

func (o *JiraConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"apiToken",
		"email",
		"projectKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJiraConfig := _JiraConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJiraConfig)

	if err != nil {
		return err
	}

	*o = JiraConfig(varJiraConfig)

	return err
}

type NullableJiraConfig struct {
	value *JiraConfig
	isSet bool
}

func (v NullableJiraConfig) Get() *JiraConfig {
	return v.value
}

func (v *NullableJiraConfig) Set(val *JiraConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableJiraConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableJiraConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJiraConfig(val *JiraConfig) *NullableJiraConfig {
	return &NullableJiraConfig{value: val, isSet: true}
}

func (v NullableJiraConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJiraConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


