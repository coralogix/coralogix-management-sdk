/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package outgoing_webhooks_service

import (
	"encoding/json"
	"fmt"
)

// DigestType the model 'DigestType'
type DigestType string

// List of DigestType
const (
	DIGESTTYPE_UNKNOWN DigestType = "UNKNOWN"
	DIGESTTYPE_ERROR_AND_CRITICAL_LOGS DigestType = "ERROR_AND_CRITICAL_LOGS"
	DIGESTTYPE_FLOW_ANOMALIES DigestType = "FLOW_ANOMALIES"
	DIGESTTYPE_SPIKE_ANOMALIES DigestType = "SPIKE_ANOMALIES"
	DIGESTTYPE_DATA_USAGE DigestType = "DATA_USAGE"
)

// All allowed values of DigestType enum
var AllowedDigestTypeEnumValues = []DigestType{
	"UNKNOWN",
	"ERROR_AND_CRITICAL_LOGS",
	"FLOW_ANOMALIES",
	"SPIKE_ANOMALIES",
	"DATA_USAGE",
}

func (v *DigestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DigestType(value)
	for _, existing := range AllowedDigestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DigestType", value)
}

// NewDigestTypeFromValue returns a pointer to a valid DigestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDigestTypeFromValue(v string) (*DigestType, error) {
	ev := DigestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DigestType: valid values are %v", v, AllowedDigestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DigestType) IsValid() bool {
	for _, existing := range AllowedDigestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DigestType value
func (v DigestType) Ptr() *DigestType {
	return &v
}

type NullableDigestType struct {
	value *DigestType
	isSet bool
}

func (v NullableDigestType) Get() *DigestType {
	return v.value
}

func (v *NullableDigestType) Set(val *DigestType) {
	v.value = val
	v.isSet = true
}

func (v NullableDigestType) IsSet() bool {
	return v.isSet
}

func (v *NullableDigestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDigestType(val *DigestType) *NullableDigestType {
	return &NullableDigestType{value: val, isSet: true}
}

func (v NullableDigestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDigestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

