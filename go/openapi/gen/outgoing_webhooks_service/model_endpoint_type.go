/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package outgoing_webhooks_service

import (
	"encoding/json"
	"fmt"
)

// EndpointType the model 'EndpointType'
type EndpointType string

// List of EndpointType
const (
	ENDPOINTTYPE_ENDPOINT_TYPE_DEFAULT_OR_PUBLIC EndpointType = "ENDPOINT_TYPE_DEFAULT_OR_PUBLIC"
	ENDPOINTTYPE_ENDPOINT_TYPE_PRIVATE EndpointType = "ENDPOINT_TYPE_PRIVATE"
)

// All allowed values of EndpointType enum
var AllowedEndpointTypeEnumValues = []EndpointType{
	"ENDPOINT_TYPE_DEFAULT_OR_PUBLIC",
	"ENDPOINT_TYPE_PRIVATE",
}

func (v *EndpointType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EndpointType(value)
	for _, existing := range AllowedEndpointTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EndpointType", value)
}

// NewEndpointTypeFromValue returns a pointer to a valid EndpointType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEndpointTypeFromValue(v string) (*EndpointType, error) {
	ev := EndpointType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EndpointType: valid values are %v", v, AllowedEndpointTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EndpointType) IsValid() bool {
	for _, existing := range AllowedEndpointTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EndpointType value
func (v EndpointType) Ptr() *EndpointType {
	return &v
}

type NullableEndpointType struct {
	value *EndpointType
	isSet bool
}

func (v NullableEndpointType) Get() *EndpointType {
	return v.value
}

func (v *NullableEndpointType) Set(val *EndpointType) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointType) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointType(val *EndpointType) *NullableEndpointType {
	return &NullableEndpointType{value: val, isSet: true}
}

func (v NullableEndpointType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

