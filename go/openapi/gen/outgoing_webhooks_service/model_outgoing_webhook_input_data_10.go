/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package outgoing_webhooks_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OutgoingWebhookInputData10 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutgoingWebhookInputData10{}

// OutgoingWebhookInputData10 struct for OutgoingWebhookInputData10
type OutgoingWebhookInputData10 struct {
	IbmEventNotifications *IbmEventNotificationsConfig `json:"ibmEventNotifications,omitempty"`
	Name string `json:"name"`
	Type WebhookType `json:"type"`
	Url *string `json:"url,omitempty"`
}

type _OutgoingWebhookInputData10 OutgoingWebhookInputData10

// NewOutgoingWebhookInputData10 instantiates a new OutgoingWebhookInputData10 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutgoingWebhookInputData10(name string, type_ WebhookType) *OutgoingWebhookInputData10 {
	this := OutgoingWebhookInputData10{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewOutgoingWebhookInputData10WithDefaults instantiates a new OutgoingWebhookInputData10 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutgoingWebhookInputData10WithDefaults() *OutgoingWebhookInputData10 {
	this := OutgoingWebhookInputData10{}
	return &this
}

// GetIbmEventNotifications returns the IbmEventNotifications field value if set, zero value otherwise.
func (o *OutgoingWebhookInputData10) GetIbmEventNotifications() IbmEventNotificationsConfig {
	if o == nil || IsNil(o.IbmEventNotifications) {
		var ret IbmEventNotificationsConfig
		return ret
	}
	return *o.IbmEventNotifications
}

// GetIbmEventNotificationsOk returns a tuple with the IbmEventNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingWebhookInputData10) GetIbmEventNotificationsOk() (*IbmEventNotificationsConfig, bool) {
	if o == nil || IsNil(o.IbmEventNotifications) {
		return nil, false
	}
	return o.IbmEventNotifications, true
}

// HasIbmEventNotifications returns a boolean if a field has been set.
func (o *OutgoingWebhookInputData10) HasIbmEventNotifications() bool {
	if o != nil && !IsNil(o.IbmEventNotifications) {
		return true
	}

	return false
}

// SetIbmEventNotifications gets a reference to the given IbmEventNotificationsConfig and assigns it to the IbmEventNotifications field.
func (o *OutgoingWebhookInputData10) SetIbmEventNotifications(v IbmEventNotificationsConfig) {
	o.IbmEventNotifications = &v
}

// GetName returns the Name field value
func (o *OutgoingWebhookInputData10) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OutgoingWebhookInputData10) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OutgoingWebhookInputData10) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *OutgoingWebhookInputData10) GetType() WebhookType {
	if o == nil {
		var ret WebhookType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *OutgoingWebhookInputData10) GetTypeOk() (*WebhookType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *OutgoingWebhookInputData10) SetType(v WebhookType) {
	o.Type = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *OutgoingWebhookInputData10) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingWebhookInputData10) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *OutgoingWebhookInputData10) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *OutgoingWebhookInputData10) SetUrl(v string) {
	o.Url = &v
}

func (o OutgoingWebhookInputData10) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutgoingWebhookInputData10) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IbmEventNotifications) {
		toSerialize["ibmEventNotifications"] = o.IbmEventNotifications
	}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

func (o *OutgoingWebhookInputData10) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOutgoingWebhookInputData10 := _OutgoingWebhookInputData10{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOutgoingWebhookInputData10)

	if err != nil {
		return err
	}

	*o = OutgoingWebhookInputData10(varOutgoingWebhookInputData10)

	return err
}

type NullableOutgoingWebhookInputData10 struct {
	value *OutgoingWebhookInputData10
	isSet bool
}

func (v NullableOutgoingWebhookInputData10) Get() *OutgoingWebhookInputData10 {
	return v.value
}

func (v *NullableOutgoingWebhookInputData10) Set(val *OutgoingWebhookInputData10) {
	v.value = val
	v.isSet = true
}

func (v NullableOutgoingWebhookInputData10) IsSet() bool {
	return v.isSet
}

func (v *NullableOutgoingWebhookInputData10) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutgoingWebhookInputData10(val *OutgoingWebhookInputData10) *NullableOutgoingWebhookInputData10 {
	return &NullableOutgoingWebhookInputData10{value: val, isSet: true}
}

func (v NullableOutgoingWebhookInputData10) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutgoingWebhookInputData10) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


