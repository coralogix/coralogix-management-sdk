/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package outgoing_webhooks_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// OutgoingWebhook - struct for OutgoingWebhook
type OutgoingWebhook struct {
	OutgoingWebhookAwsEventBridge *OutgoingWebhookAwsEventBridge
	OutgoingWebhookDemisto *OutgoingWebhookDemisto
	OutgoingWebhookEmailGroup *OutgoingWebhookEmailGroup
	OutgoingWebhookGenericWebhook *OutgoingWebhookGenericWebhook
	OutgoingWebhookIbmEventNotifications *OutgoingWebhookIbmEventNotifications
	OutgoingWebhookJira *OutgoingWebhookJira
	OutgoingWebhookMicrosoftTeams *OutgoingWebhookMicrosoftTeams
	OutgoingWebhookMsTeamsWorkflow *OutgoingWebhookMsTeamsWorkflow
	OutgoingWebhookOpsgenie *OutgoingWebhookOpsgenie
	OutgoingWebhookPagerDuty *OutgoingWebhookPagerDuty
	OutgoingWebhookSendLog *OutgoingWebhookSendLog
	OutgoingWebhookSlack *OutgoingWebhookSlack
}

// OutgoingWebhookAwsEventBridgeAsOutgoingWebhook is a convenience function that returns OutgoingWebhookAwsEventBridge wrapped in OutgoingWebhook
func OutgoingWebhookAwsEventBridgeAsOutgoingWebhook(v *OutgoingWebhookAwsEventBridge) OutgoingWebhook {
	return OutgoingWebhook{
		OutgoingWebhookAwsEventBridge: v,
	}
}

// OutgoingWebhookDemistoAsOutgoingWebhook is a convenience function that returns OutgoingWebhookDemisto wrapped in OutgoingWebhook
func OutgoingWebhookDemistoAsOutgoingWebhook(v *OutgoingWebhookDemisto) OutgoingWebhook {
	return OutgoingWebhook{
		OutgoingWebhookDemisto: v,
	}
}

// OutgoingWebhookEmailGroupAsOutgoingWebhook is a convenience function that returns OutgoingWebhookEmailGroup wrapped in OutgoingWebhook
func OutgoingWebhookEmailGroupAsOutgoingWebhook(v *OutgoingWebhookEmailGroup) OutgoingWebhook {
	return OutgoingWebhook{
		OutgoingWebhookEmailGroup: v,
	}
}

// OutgoingWebhookGenericWebhookAsOutgoingWebhook is a convenience function that returns OutgoingWebhookGenericWebhook wrapped in OutgoingWebhook
func OutgoingWebhookGenericWebhookAsOutgoingWebhook(v *OutgoingWebhookGenericWebhook) OutgoingWebhook {
	return OutgoingWebhook{
		OutgoingWebhookGenericWebhook: v,
	}
}

// OutgoingWebhookIbmEventNotificationsAsOutgoingWebhook is a convenience function that returns OutgoingWebhookIbmEventNotifications wrapped in OutgoingWebhook
func OutgoingWebhookIbmEventNotificationsAsOutgoingWebhook(v *OutgoingWebhookIbmEventNotifications) OutgoingWebhook {
	return OutgoingWebhook{
		OutgoingWebhookIbmEventNotifications: v,
	}
}

// OutgoingWebhookJiraAsOutgoingWebhook is a convenience function that returns OutgoingWebhookJira wrapped in OutgoingWebhook
func OutgoingWebhookJiraAsOutgoingWebhook(v *OutgoingWebhookJira) OutgoingWebhook {
	return OutgoingWebhook{
		OutgoingWebhookJira: v,
	}
}

// OutgoingWebhookMicrosoftTeamsAsOutgoingWebhook is a convenience function that returns OutgoingWebhookMicrosoftTeams wrapped in OutgoingWebhook
func OutgoingWebhookMicrosoftTeamsAsOutgoingWebhook(v *OutgoingWebhookMicrosoftTeams) OutgoingWebhook {
	return OutgoingWebhook{
		OutgoingWebhookMicrosoftTeams: v,
	}
}

// OutgoingWebhookMsTeamsWorkflowAsOutgoingWebhook is a convenience function that returns OutgoingWebhookMsTeamsWorkflow wrapped in OutgoingWebhook
func OutgoingWebhookMsTeamsWorkflowAsOutgoingWebhook(v *OutgoingWebhookMsTeamsWorkflow) OutgoingWebhook {
	return OutgoingWebhook{
		OutgoingWebhookMsTeamsWorkflow: v,
	}
}

// OutgoingWebhookOpsgenieAsOutgoingWebhook is a convenience function that returns OutgoingWebhookOpsgenie wrapped in OutgoingWebhook
func OutgoingWebhookOpsgenieAsOutgoingWebhook(v *OutgoingWebhookOpsgenie) OutgoingWebhook {
	return OutgoingWebhook{
		OutgoingWebhookOpsgenie: v,
	}
}

// OutgoingWebhookPagerDutyAsOutgoingWebhook is a convenience function that returns OutgoingWebhookPagerDuty wrapped in OutgoingWebhook
func OutgoingWebhookPagerDutyAsOutgoingWebhook(v *OutgoingWebhookPagerDuty) OutgoingWebhook {
	return OutgoingWebhook{
		OutgoingWebhookPagerDuty: v,
	}
}

// OutgoingWebhookSendLogAsOutgoingWebhook is a convenience function that returns OutgoingWebhookSendLog wrapped in OutgoingWebhook
func OutgoingWebhookSendLogAsOutgoingWebhook(v *OutgoingWebhookSendLog) OutgoingWebhook {
	return OutgoingWebhook{
		OutgoingWebhookSendLog: v,
	}
}

// OutgoingWebhookSlackAsOutgoingWebhook is a convenience function that returns OutgoingWebhookSlack wrapped in OutgoingWebhook
func OutgoingWebhookSlackAsOutgoingWebhook(v *OutgoingWebhookSlack) OutgoingWebhook {
	return OutgoingWebhook{
		OutgoingWebhookSlack: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OutgoingWebhook) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into OutgoingWebhookAwsEventBridge
	err = newStrictDecoder(data).Decode(&dst.OutgoingWebhookAwsEventBridge)
	if err == nil {
		jsonOutgoingWebhookAwsEventBridge, _ := json.Marshal(dst.OutgoingWebhookAwsEventBridge)
		if string(jsonOutgoingWebhookAwsEventBridge) == "{}" { // empty struct
			dst.OutgoingWebhookAwsEventBridge = nil
		} else {
			if err = validator.Validate(dst.OutgoingWebhookAwsEventBridge); err != nil {
				dst.OutgoingWebhookAwsEventBridge = nil
			} else {
				match++
			}
		}
	} else {
		dst.OutgoingWebhookAwsEventBridge = nil
	}

	// try to unmarshal data into OutgoingWebhookDemisto
	err = newStrictDecoder(data).Decode(&dst.OutgoingWebhookDemisto)
	if err == nil {
		jsonOutgoingWebhookDemisto, _ := json.Marshal(dst.OutgoingWebhookDemisto)
		if string(jsonOutgoingWebhookDemisto) == "{}" { // empty struct
			dst.OutgoingWebhookDemisto = nil
		} else {
			if err = validator.Validate(dst.OutgoingWebhookDemisto); err != nil {
				dst.OutgoingWebhookDemisto = nil
			} else {
				match++
			}
		}
	} else {
		dst.OutgoingWebhookDemisto = nil
	}

	// try to unmarshal data into OutgoingWebhookEmailGroup
	err = newStrictDecoder(data).Decode(&dst.OutgoingWebhookEmailGroup)
	if err == nil {
		jsonOutgoingWebhookEmailGroup, _ := json.Marshal(dst.OutgoingWebhookEmailGroup)
		if string(jsonOutgoingWebhookEmailGroup) == "{}" { // empty struct
			dst.OutgoingWebhookEmailGroup = nil
		} else {
			if err = validator.Validate(dst.OutgoingWebhookEmailGroup); err != nil {
				dst.OutgoingWebhookEmailGroup = nil
			} else {
				match++
			}
		}
	} else {
		dst.OutgoingWebhookEmailGroup = nil
	}

	// try to unmarshal data into OutgoingWebhookGenericWebhook
	err = newStrictDecoder(data).Decode(&dst.OutgoingWebhookGenericWebhook)
	if err == nil {
		jsonOutgoingWebhookGenericWebhook, _ := json.Marshal(dst.OutgoingWebhookGenericWebhook)
		if string(jsonOutgoingWebhookGenericWebhook) == "{}" { // empty struct
			dst.OutgoingWebhookGenericWebhook = nil
		} else {
			if err = validator.Validate(dst.OutgoingWebhookGenericWebhook); err != nil {
				dst.OutgoingWebhookGenericWebhook = nil
			} else {
				match++
			}
		}
	} else {
		dst.OutgoingWebhookGenericWebhook = nil
	}

	// try to unmarshal data into OutgoingWebhookIbmEventNotifications
	err = newStrictDecoder(data).Decode(&dst.OutgoingWebhookIbmEventNotifications)
	if err == nil {
		jsonOutgoingWebhookIbmEventNotifications, _ := json.Marshal(dst.OutgoingWebhookIbmEventNotifications)
		if string(jsonOutgoingWebhookIbmEventNotifications) == "{}" { // empty struct
			dst.OutgoingWebhookIbmEventNotifications = nil
		} else {
			if err = validator.Validate(dst.OutgoingWebhookIbmEventNotifications); err != nil {
				dst.OutgoingWebhookIbmEventNotifications = nil
			} else {
				match++
			}
		}
	} else {
		dst.OutgoingWebhookIbmEventNotifications = nil
	}

	// try to unmarshal data into OutgoingWebhookJira
	err = newStrictDecoder(data).Decode(&dst.OutgoingWebhookJira)
	if err == nil {
		jsonOutgoingWebhookJira, _ := json.Marshal(dst.OutgoingWebhookJira)
		if string(jsonOutgoingWebhookJira) == "{}" { // empty struct
			dst.OutgoingWebhookJira = nil
		} else {
			if err = validator.Validate(dst.OutgoingWebhookJira); err != nil {
				dst.OutgoingWebhookJira = nil
			} else {
				match++
			}
		}
	} else {
		dst.OutgoingWebhookJira = nil
	}

	// try to unmarshal data into OutgoingWebhookMicrosoftTeams
	err = newStrictDecoder(data).Decode(&dst.OutgoingWebhookMicrosoftTeams)
	if err == nil {
		jsonOutgoingWebhookMicrosoftTeams, _ := json.Marshal(dst.OutgoingWebhookMicrosoftTeams)
		if string(jsonOutgoingWebhookMicrosoftTeams) == "{}" { // empty struct
			dst.OutgoingWebhookMicrosoftTeams = nil
		} else {
			if err = validator.Validate(dst.OutgoingWebhookMicrosoftTeams); err != nil {
				dst.OutgoingWebhookMicrosoftTeams = nil
			} else {
				match++
			}
		}
	} else {
		dst.OutgoingWebhookMicrosoftTeams = nil
	}

	// try to unmarshal data into OutgoingWebhookMsTeamsWorkflow
	err = newStrictDecoder(data).Decode(&dst.OutgoingWebhookMsTeamsWorkflow)
	if err == nil {
		jsonOutgoingWebhookMsTeamsWorkflow, _ := json.Marshal(dst.OutgoingWebhookMsTeamsWorkflow)
		if string(jsonOutgoingWebhookMsTeamsWorkflow) == "{}" { // empty struct
			dst.OutgoingWebhookMsTeamsWorkflow = nil
		} else {
			if err = validator.Validate(dst.OutgoingWebhookMsTeamsWorkflow); err != nil {
				dst.OutgoingWebhookMsTeamsWorkflow = nil
			} else {
				match++
			}
		}
	} else {
		dst.OutgoingWebhookMsTeamsWorkflow = nil
	}

	// try to unmarshal data into OutgoingWebhookOpsgenie
	err = newStrictDecoder(data).Decode(&dst.OutgoingWebhookOpsgenie)
	if err == nil {
		jsonOutgoingWebhookOpsgenie, _ := json.Marshal(dst.OutgoingWebhookOpsgenie)
		if string(jsonOutgoingWebhookOpsgenie) == "{}" { // empty struct
			dst.OutgoingWebhookOpsgenie = nil
		} else {
			if err = validator.Validate(dst.OutgoingWebhookOpsgenie); err != nil {
				dst.OutgoingWebhookOpsgenie = nil
			} else {
				match++
			}
		}
	} else {
		dst.OutgoingWebhookOpsgenie = nil
	}

	// try to unmarshal data into OutgoingWebhookPagerDuty
	err = newStrictDecoder(data).Decode(&dst.OutgoingWebhookPagerDuty)
	if err == nil {
		jsonOutgoingWebhookPagerDuty, _ := json.Marshal(dst.OutgoingWebhookPagerDuty)
		if string(jsonOutgoingWebhookPagerDuty) == "{}" { // empty struct
			dst.OutgoingWebhookPagerDuty = nil
		} else {
			if err = validator.Validate(dst.OutgoingWebhookPagerDuty); err != nil {
				dst.OutgoingWebhookPagerDuty = nil
			} else {
				match++
			}
		}
	} else {
		dst.OutgoingWebhookPagerDuty = nil
	}

	// try to unmarshal data into OutgoingWebhookSendLog
	err = newStrictDecoder(data).Decode(&dst.OutgoingWebhookSendLog)
	if err == nil {
		jsonOutgoingWebhookSendLog, _ := json.Marshal(dst.OutgoingWebhookSendLog)
		if string(jsonOutgoingWebhookSendLog) == "{}" { // empty struct
			dst.OutgoingWebhookSendLog = nil
		} else {
			if err = validator.Validate(dst.OutgoingWebhookSendLog); err != nil {
				dst.OutgoingWebhookSendLog = nil
			} else {
				match++
			}
		}
	} else {
		dst.OutgoingWebhookSendLog = nil
	}

	// try to unmarshal data into OutgoingWebhookSlack
	err = newStrictDecoder(data).Decode(&dst.OutgoingWebhookSlack)
	if err == nil {
		jsonOutgoingWebhookSlack, _ := json.Marshal(dst.OutgoingWebhookSlack)
		if string(jsonOutgoingWebhookSlack) == "{}" { // empty struct
			dst.OutgoingWebhookSlack = nil
		} else {
			if err = validator.Validate(dst.OutgoingWebhookSlack); err != nil {
				dst.OutgoingWebhookSlack = nil
			} else {
				match++
			}
		}
	} else {
		dst.OutgoingWebhookSlack = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.OutgoingWebhookAwsEventBridge = nil
		dst.OutgoingWebhookDemisto = nil
		dst.OutgoingWebhookEmailGroup = nil
		dst.OutgoingWebhookGenericWebhook = nil
		dst.OutgoingWebhookIbmEventNotifications = nil
		dst.OutgoingWebhookJira = nil
		dst.OutgoingWebhookMicrosoftTeams = nil
		dst.OutgoingWebhookMsTeamsWorkflow = nil
		dst.OutgoingWebhookOpsgenie = nil
		dst.OutgoingWebhookPagerDuty = nil
		dst.OutgoingWebhookSendLog = nil
		dst.OutgoingWebhookSlack = nil

		return fmt.Errorf("data matches more than one schema in oneOf(OutgoingWebhook)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(OutgoingWebhook)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OutgoingWebhook) MarshalJSON() ([]byte, error) {
	if src.OutgoingWebhookAwsEventBridge != nil {
		return json.Marshal(&src.OutgoingWebhookAwsEventBridge)
	}

	if src.OutgoingWebhookDemisto != nil {
		return json.Marshal(&src.OutgoingWebhookDemisto)
	}

	if src.OutgoingWebhookEmailGroup != nil {
		return json.Marshal(&src.OutgoingWebhookEmailGroup)
	}

	if src.OutgoingWebhookGenericWebhook != nil {
		return json.Marshal(&src.OutgoingWebhookGenericWebhook)
	}

	if src.OutgoingWebhookIbmEventNotifications != nil {
		return json.Marshal(&src.OutgoingWebhookIbmEventNotifications)
	}

	if src.OutgoingWebhookJira != nil {
		return json.Marshal(&src.OutgoingWebhookJira)
	}

	if src.OutgoingWebhookMicrosoftTeams != nil {
		return json.Marshal(&src.OutgoingWebhookMicrosoftTeams)
	}

	if src.OutgoingWebhookMsTeamsWorkflow != nil {
		return json.Marshal(&src.OutgoingWebhookMsTeamsWorkflow)
	}

	if src.OutgoingWebhookOpsgenie != nil {
		return json.Marshal(&src.OutgoingWebhookOpsgenie)
	}

	if src.OutgoingWebhookPagerDuty != nil {
		return json.Marshal(&src.OutgoingWebhookPagerDuty)
	}

	if src.OutgoingWebhookSendLog != nil {
		return json.Marshal(&src.OutgoingWebhookSendLog)
	}

	if src.OutgoingWebhookSlack != nil {
		return json.Marshal(&src.OutgoingWebhookSlack)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OutgoingWebhook) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.OutgoingWebhookAwsEventBridge != nil {
		return obj.OutgoingWebhookAwsEventBridge
	}

	if obj.OutgoingWebhookDemisto != nil {
		return obj.OutgoingWebhookDemisto
	}

	if obj.OutgoingWebhookEmailGroup != nil {
		return obj.OutgoingWebhookEmailGroup
	}

	if obj.OutgoingWebhookGenericWebhook != nil {
		return obj.OutgoingWebhookGenericWebhook
	}

	if obj.OutgoingWebhookIbmEventNotifications != nil {
		return obj.OutgoingWebhookIbmEventNotifications
	}

	if obj.OutgoingWebhookJira != nil {
		return obj.OutgoingWebhookJira
	}

	if obj.OutgoingWebhookMicrosoftTeams != nil {
		return obj.OutgoingWebhookMicrosoftTeams
	}

	if obj.OutgoingWebhookMsTeamsWorkflow != nil {
		return obj.OutgoingWebhookMsTeamsWorkflow
	}

	if obj.OutgoingWebhookOpsgenie != nil {
		return obj.OutgoingWebhookOpsgenie
	}

	if obj.OutgoingWebhookPagerDuty != nil {
		return obj.OutgoingWebhookPagerDuty
	}

	if obj.OutgoingWebhookSendLog != nil {
		return obj.OutgoingWebhookSendLog
	}

	if obj.OutgoingWebhookSlack != nil {
		return obj.OutgoingWebhookSlack
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj OutgoingWebhook) GetActualInstanceValue() (interface{}) {
	if obj.OutgoingWebhookAwsEventBridge != nil {
		return *obj.OutgoingWebhookAwsEventBridge
	}

	if obj.OutgoingWebhookDemisto != nil {
		return *obj.OutgoingWebhookDemisto
	}

	if obj.OutgoingWebhookEmailGroup != nil {
		return *obj.OutgoingWebhookEmailGroup
	}

	if obj.OutgoingWebhookGenericWebhook != nil {
		return *obj.OutgoingWebhookGenericWebhook
	}

	if obj.OutgoingWebhookIbmEventNotifications != nil {
		return *obj.OutgoingWebhookIbmEventNotifications
	}

	if obj.OutgoingWebhookJira != nil {
		return *obj.OutgoingWebhookJira
	}

	if obj.OutgoingWebhookMicrosoftTeams != nil {
		return *obj.OutgoingWebhookMicrosoftTeams
	}

	if obj.OutgoingWebhookMsTeamsWorkflow != nil {
		return *obj.OutgoingWebhookMsTeamsWorkflow
	}

	if obj.OutgoingWebhookOpsgenie != nil {
		return *obj.OutgoingWebhookOpsgenie
	}

	if obj.OutgoingWebhookPagerDuty != nil {
		return *obj.OutgoingWebhookPagerDuty
	}

	if obj.OutgoingWebhookSendLog != nil {
		return *obj.OutgoingWebhookSendLog
	}

	if obj.OutgoingWebhookSlack != nil {
		return *obj.OutgoingWebhookSlack
	}

	// all schemas are nil
	return nil
}

type NullableOutgoingWebhook struct {
	value *OutgoingWebhook
	isSet bool
}

func (v NullableOutgoingWebhook) Get() *OutgoingWebhook {
	return v.value
}

func (v *NullableOutgoingWebhook) Set(val *OutgoingWebhook) {
	v.value = val
	v.isSet = true
}

func (v NullableOutgoingWebhook) IsSet() bool {
	return v.isSet
}

func (v *NullableOutgoingWebhook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutgoingWebhook(val *OutgoingWebhook) *NullableOutgoingWebhook {
	return &NullableOutgoingWebhook{value: val, isSet: true}
}

func (v NullableOutgoingWebhook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutgoingWebhook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


