/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package outgoing_webhooks_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Digest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Digest{}

// Digest struct for Digest
type Digest struct {
	IsActive *bool `json:"isActive,omitempty"`
	Type DigestType `json:"type"`
}

type _Digest Digest

// NewDigest instantiates a new Digest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDigest(type_ DigestType) *Digest {
	this := Digest{}
	this.Type = type_
	return &this
}

// NewDigestWithDefaults instantiates a new Digest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDigestWithDefaults() *Digest {
	this := Digest{}
	return &this
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *Digest) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Digest) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *Digest) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *Digest) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetType returns the Type field value
func (o *Digest) GetType() DigestType {
	if o == nil {
		var ret DigestType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Digest) GetTypeOk() (*DigestType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Digest) SetType(v DigestType) {
	o.Type = v
}

func (o Digest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Digest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *Digest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDigest := _Digest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDigest)

	if err != nil {
		return err
	}

	*o = Digest(varDigest)

	return err
}

type NullableDigest struct {
	value *Digest
	isSet bool
}

func (v NullableDigest) Get() *Digest {
	return v.value
}

func (v *NullableDigest) Set(val *Digest) {
	v.value = val
	v.isSet = true
}

func (v NullableDigest) IsSet() bool {
	return v.isSet
}

func (v *NullableDigest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDigest(val *Digest) *NullableDigest {
	return &NullableDigest{value: val, isSet: true}
}

func (v NullableDigest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDigest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


