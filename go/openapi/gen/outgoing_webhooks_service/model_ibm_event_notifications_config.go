/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package outgoing_webhooks_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IbmEventNotificationsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IbmEventNotificationsConfig{}

// IbmEventNotificationsConfig struct for IbmEventNotificationsConfig
type IbmEventNotificationsConfig struct {
	EndpointType EndpointType `json:"endpointType"`
	EventNotificationsInstanceId string `json:"eventNotificationsInstanceId"`
	RegionId string `json:"regionId"`
	SourceId *string `json:"sourceId,omitempty"`
	SourceName *string `json:"sourceName,omitempty"`
}

type _IbmEventNotificationsConfig IbmEventNotificationsConfig

// NewIbmEventNotificationsConfig instantiates a new IbmEventNotificationsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIbmEventNotificationsConfig(endpointType EndpointType, eventNotificationsInstanceId string, regionId string) *IbmEventNotificationsConfig {
	this := IbmEventNotificationsConfig{}
	this.EndpointType = endpointType
	this.EventNotificationsInstanceId = eventNotificationsInstanceId
	this.RegionId = regionId
	return &this
}

// NewIbmEventNotificationsConfigWithDefaults instantiates a new IbmEventNotificationsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIbmEventNotificationsConfigWithDefaults() *IbmEventNotificationsConfig {
	this := IbmEventNotificationsConfig{}
	return &this
}

// GetEndpointType returns the EndpointType field value
func (o *IbmEventNotificationsConfig) GetEndpointType() EndpointType {
	if o == nil {
		var ret EndpointType
		return ret
	}

	return o.EndpointType
}

// GetEndpointTypeOk returns a tuple with the EndpointType field value
// and a boolean to check if the value has been set.
func (o *IbmEventNotificationsConfig) GetEndpointTypeOk() (*EndpointType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndpointType, true
}

// SetEndpointType sets field value
func (o *IbmEventNotificationsConfig) SetEndpointType(v EndpointType) {
	o.EndpointType = v
}

// GetEventNotificationsInstanceId returns the EventNotificationsInstanceId field value
func (o *IbmEventNotificationsConfig) GetEventNotificationsInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventNotificationsInstanceId
}

// GetEventNotificationsInstanceIdOk returns a tuple with the EventNotificationsInstanceId field value
// and a boolean to check if the value has been set.
func (o *IbmEventNotificationsConfig) GetEventNotificationsInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventNotificationsInstanceId, true
}

// SetEventNotificationsInstanceId sets field value
func (o *IbmEventNotificationsConfig) SetEventNotificationsInstanceId(v string) {
	o.EventNotificationsInstanceId = v
}

// GetRegionId returns the RegionId field value
func (o *IbmEventNotificationsConfig) GetRegionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value
// and a boolean to check if the value has been set.
func (o *IbmEventNotificationsConfig) GetRegionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionId, true
}

// SetRegionId sets field value
func (o *IbmEventNotificationsConfig) SetRegionId(v string) {
	o.RegionId = v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *IbmEventNotificationsConfig) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IbmEventNotificationsConfig) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *IbmEventNotificationsConfig) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *IbmEventNotificationsConfig) SetSourceId(v string) {
	o.SourceId = &v
}

// GetSourceName returns the SourceName field value if set, zero value otherwise.
func (o *IbmEventNotificationsConfig) GetSourceName() string {
	if o == nil || IsNil(o.SourceName) {
		var ret string
		return ret
	}
	return *o.SourceName
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IbmEventNotificationsConfig) GetSourceNameOk() (*string, bool) {
	if o == nil || IsNil(o.SourceName) {
		return nil, false
	}
	return o.SourceName, true
}

// HasSourceName returns a boolean if a field has been set.
func (o *IbmEventNotificationsConfig) HasSourceName() bool {
	if o != nil && !IsNil(o.SourceName) {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given string and assigns it to the SourceName field.
func (o *IbmEventNotificationsConfig) SetSourceName(v string) {
	o.SourceName = &v
}

func (o IbmEventNotificationsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IbmEventNotificationsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["endpointType"] = o.EndpointType
	toSerialize["eventNotificationsInstanceId"] = o.EventNotificationsInstanceId
	toSerialize["regionId"] = o.RegionId
	if !IsNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	if !IsNil(o.SourceName) {
		toSerialize["sourceName"] = o.SourceName
	}
	return toSerialize, nil
}

func (o *IbmEventNotificationsConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"endpointType",
		"eventNotificationsInstanceId",
		"regionId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIbmEventNotificationsConfig := _IbmEventNotificationsConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIbmEventNotificationsConfig)

	if err != nil {
		return err
	}

	*o = IbmEventNotificationsConfig(varIbmEventNotificationsConfig)

	return err
}

type NullableIbmEventNotificationsConfig struct {
	value *IbmEventNotificationsConfig
	isSet bool
}

func (v NullableIbmEventNotificationsConfig) Get() *IbmEventNotificationsConfig {
	return v.value
}

func (v *NullableIbmEventNotificationsConfig) Set(val *IbmEventNotificationsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIbmEventNotificationsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIbmEventNotificationsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIbmEventNotificationsConfig(val *IbmEventNotificationsConfig) *NullableIbmEventNotificationsConfig {
	return &NullableIbmEventNotificationsConfig{value: val, isSet: true}
}

func (v NullableIbmEventNotificationsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIbmEventNotificationsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


