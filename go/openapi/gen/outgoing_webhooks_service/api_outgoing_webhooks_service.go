/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package outgoing_webhooks_service

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OutgoingWebhooksServiceAPIService OutgoingWebhooksServiceAPI service
type OutgoingWebhooksServiceAPIService service

type ApiOutgoingWebhooksServiceCreateOutgoingWebhookRequest struct {
	ctx context.Context
	ApiService *OutgoingWebhooksServiceAPIService
	createOutgoingWebhookRequest *CreateOutgoingWebhookRequest
}

func (r ApiOutgoingWebhooksServiceCreateOutgoingWebhookRequest) CreateOutgoingWebhookRequest(createOutgoingWebhookRequest CreateOutgoingWebhookRequest) ApiOutgoingWebhooksServiceCreateOutgoingWebhookRequest {
	r.createOutgoingWebhookRequest = &createOutgoingWebhookRequest
	return r
}

func (r ApiOutgoingWebhooksServiceCreateOutgoingWebhookRequest) Execute() (*CreateOutgoingWebhookResponse, *http.Response, error) {
	return r.ApiService.OutgoingWebhooksServiceCreateOutgoingWebhookExecute(r)
}

/*
OutgoingWebhooksServiceCreateOutgoingWebhook Create an outgoing webhook

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOutgoingWebhooksServiceCreateOutgoingWebhookRequest
*/
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceCreateOutgoingWebhook(ctx context.Context) ApiOutgoingWebhooksServiceCreateOutgoingWebhookRequest {
	return ApiOutgoingWebhooksServiceCreateOutgoingWebhookRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateOutgoingWebhookResponse
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceCreateOutgoingWebhookExecute(r ApiOutgoingWebhooksServiceCreateOutgoingWebhookRequest) (*CreateOutgoingWebhookResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateOutgoingWebhookResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutgoingWebhooksServiceAPIService.OutgoingWebhooksServiceCreateOutgoingWebhook")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/webhooks/v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createOutgoingWebhookRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOutgoingWebhooksServiceDeleteOutgoingWebhookRequest struct {
	ctx context.Context
	ApiService *OutgoingWebhooksServiceAPIService
	id string
}

func (r ApiOutgoingWebhooksServiceDeleteOutgoingWebhookRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.OutgoingWebhooksServiceDeleteOutgoingWebhookExecute(r)
}

/*
OutgoingWebhooksServiceDeleteOutgoingWebhook Delete an outgoing webhook

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiOutgoingWebhooksServiceDeleteOutgoingWebhookRequest
*/
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceDeleteOutgoingWebhook(ctx context.Context, id string) ApiOutgoingWebhooksServiceDeleteOutgoingWebhookRequest {
	return ApiOutgoingWebhooksServiceDeleteOutgoingWebhookRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceDeleteOutgoingWebhookExecute(r ApiOutgoingWebhooksServiceDeleteOutgoingWebhookRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutgoingWebhooksServiceAPIService.OutgoingWebhooksServiceDeleteOutgoingWebhook")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/webhooks/v1/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOutgoingWebhooksServiceGetOutgoingWebhookRequest struct {
	ctx context.Context
	ApiService *OutgoingWebhooksServiceAPIService
	id string
}

func (r ApiOutgoingWebhooksServiceGetOutgoingWebhookRequest) Execute() (*GetOutgoingWebhookResponse, *http.Response, error) {
	return r.ApiService.OutgoingWebhooksServiceGetOutgoingWebhookExecute(r)
}

/*
OutgoingWebhooksServiceGetOutgoingWebhook Get outgoing webhook

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiOutgoingWebhooksServiceGetOutgoingWebhookRequest
*/
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceGetOutgoingWebhook(ctx context.Context, id string) ApiOutgoingWebhooksServiceGetOutgoingWebhookRequest {
	return ApiOutgoingWebhooksServiceGetOutgoingWebhookRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetOutgoingWebhookResponse
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceGetOutgoingWebhookExecute(r ApiOutgoingWebhooksServiceGetOutgoingWebhookRequest) (*GetOutgoingWebhookResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetOutgoingWebhookResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutgoingWebhooksServiceAPIService.OutgoingWebhooksServiceGetOutgoingWebhook")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/webhooks/v1/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsRequest struct {
	ctx context.Context
	ApiService *OutgoingWebhooksServiceAPIService
	type_ string
}

func (r ApiOutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsRequest) Execute() (*GetOutgoingWebhookTypeDetailsResponse, *http.Response, error) {
	return r.ApiService.OutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsExecute(r)
}

/*
OutgoingWebhooksServiceGetOutgoingWebhookTypeDetails Get outgoing webhook type details

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param type_
 @return ApiOutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsRequest
*/
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceGetOutgoingWebhookTypeDetails(ctx context.Context, type_ string) ApiOutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsRequest {
	return ApiOutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsRequest{
		ApiService: a,
		ctx: ctx,
		type_: type_,
	}
}

// Execute executes the request
//  @return GetOutgoingWebhookTypeDetailsResponse
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsExecute(r ApiOutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsRequest) (*GetOutgoingWebhookTypeDetailsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetOutgoingWebhookTypeDetailsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutgoingWebhooksServiceAPIService.OutgoingWebhooksServiceGetOutgoingWebhookTypeDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/webhooks/v1/types/{type}"
	localVarPath = strings.Replace(localVarPath, "{"+"type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOutgoingWebhooksServiceListAllOutgoingWebhooksRequest struct {
	ctx context.Context
	ApiService *OutgoingWebhooksServiceAPIService
}

func (r ApiOutgoingWebhooksServiceListAllOutgoingWebhooksRequest) Execute() (*ListAllOutgoingWebhooksResponse, *http.Response, error) {
	return r.ApiService.OutgoingWebhooksServiceListAllOutgoingWebhooksExecute(r)
}

/*
OutgoingWebhooksServiceListAllOutgoingWebhooks List all outgoing webhooks

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOutgoingWebhooksServiceListAllOutgoingWebhooksRequest
*/
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceListAllOutgoingWebhooks(ctx context.Context) ApiOutgoingWebhooksServiceListAllOutgoingWebhooksRequest {
	return ApiOutgoingWebhooksServiceListAllOutgoingWebhooksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListAllOutgoingWebhooksResponse
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceListAllOutgoingWebhooksExecute(r ApiOutgoingWebhooksServiceListAllOutgoingWebhooksRequest) (*ListAllOutgoingWebhooksResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListAllOutgoingWebhooksResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutgoingWebhooksServiceAPIService.OutgoingWebhooksServiceListAllOutgoingWebhooks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/webhooks/v1/all"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOutgoingWebhooksServiceListOutboundWebhooksSummaryRequest struct {
	ctx context.Context
	ApiService *OutgoingWebhooksServiceAPIService
}

func (r ApiOutgoingWebhooksServiceListOutboundWebhooksSummaryRequest) Execute() (*ListOutboundWebhooksSummaryResponse, *http.Response, error) {
	return r.ApiService.OutgoingWebhooksServiceListOutboundWebhooksSummaryExecute(r)
}

/*
OutgoingWebhooksServiceListOutboundWebhooksSummary List outbound webhooks summary

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOutgoingWebhooksServiceListOutboundWebhooksSummaryRequest
*/
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceListOutboundWebhooksSummary(ctx context.Context) ApiOutgoingWebhooksServiceListOutboundWebhooksSummaryRequest {
	return ApiOutgoingWebhooksServiceListOutboundWebhooksSummaryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListOutboundWebhooksSummaryResponse
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceListOutboundWebhooksSummaryExecute(r ApiOutgoingWebhooksServiceListOutboundWebhooksSummaryRequest) (*ListOutboundWebhooksSummaryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListOutboundWebhooksSummaryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutgoingWebhooksServiceAPIService.OutgoingWebhooksServiceListOutboundWebhooksSummary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/webhooks/v1/summary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOutgoingWebhooksServiceListOutgoingWebhookTypesRequest struct {
	ctx context.Context
	ApiService *OutgoingWebhooksServiceAPIService
}

func (r ApiOutgoingWebhooksServiceListOutgoingWebhookTypesRequest) Execute() (*ListOutgoingWebhookTypesResponse, *http.Response, error) {
	return r.ApiService.OutgoingWebhooksServiceListOutgoingWebhookTypesExecute(r)
}

/*
OutgoingWebhooksServiceListOutgoingWebhookTypes Get outgoing webhook types

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOutgoingWebhooksServiceListOutgoingWebhookTypesRequest
*/
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceListOutgoingWebhookTypes(ctx context.Context) ApiOutgoingWebhooksServiceListOutgoingWebhookTypesRequest {
	return ApiOutgoingWebhooksServiceListOutgoingWebhookTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListOutgoingWebhookTypesResponse
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceListOutgoingWebhookTypesExecute(r ApiOutgoingWebhooksServiceListOutgoingWebhookTypesRequest) (*ListOutgoingWebhookTypesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListOutgoingWebhookTypesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutgoingWebhooksServiceAPIService.OutgoingWebhooksServiceListOutgoingWebhookTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/webhooks/v1/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOutgoingWebhooksServiceListOutgoingWebhooksRequest struct {
	ctx context.Context
	ApiService *OutgoingWebhooksServiceAPIService
	type_ *string
}

func (r ApiOutgoingWebhooksServiceListOutgoingWebhooksRequest) Type_(type_ string) ApiOutgoingWebhooksServiceListOutgoingWebhooksRequest {
	r.type_ = &type_
	return r
}

func (r ApiOutgoingWebhooksServiceListOutgoingWebhooksRequest) Execute() (*ListOutgoingWebhooksResponse, *http.Response, error) {
	return r.ApiService.OutgoingWebhooksServiceListOutgoingWebhooksExecute(r)
}

/*
OutgoingWebhooksServiceListOutgoingWebhooks List outgoing webhooks

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOutgoingWebhooksServiceListOutgoingWebhooksRequest
*/
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceListOutgoingWebhooks(ctx context.Context) ApiOutgoingWebhooksServiceListOutgoingWebhooksRequest {
	return ApiOutgoingWebhooksServiceListOutgoingWebhooksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListOutgoingWebhooksResponse
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceListOutgoingWebhooksExecute(r ApiOutgoingWebhooksServiceListOutgoingWebhooksRequest) (*ListOutgoingWebhooksResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListOutgoingWebhooksResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutgoingWebhooksServiceAPIService.OutgoingWebhooksServiceListOutgoingWebhooks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/webhooks/v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOutgoingWebhooksServiceTestExistingOutgoingWebhookRequest struct {
	ctx context.Context
	ApiService *OutgoingWebhooksServiceAPIService
	testExistingOutgoingWebhookRequest *TestExistingOutgoingWebhookRequest
}

func (r ApiOutgoingWebhooksServiceTestExistingOutgoingWebhookRequest) TestExistingOutgoingWebhookRequest(testExistingOutgoingWebhookRequest TestExistingOutgoingWebhookRequest) ApiOutgoingWebhooksServiceTestExistingOutgoingWebhookRequest {
	r.testExistingOutgoingWebhookRequest = &testExistingOutgoingWebhookRequest
	return r
}

func (r ApiOutgoingWebhooksServiceTestExistingOutgoingWebhookRequest) Execute() (*TestOutgoingWebhookResponse, *http.Response, error) {
	return r.ApiService.OutgoingWebhooksServiceTestExistingOutgoingWebhookExecute(r)
}

/*
OutgoingWebhooksServiceTestExistingOutgoingWebhook Test an existing outgoing webhook

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOutgoingWebhooksServiceTestExistingOutgoingWebhookRequest
*/
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceTestExistingOutgoingWebhook(ctx context.Context) ApiOutgoingWebhooksServiceTestExistingOutgoingWebhookRequest {
	return ApiOutgoingWebhooksServiceTestExistingOutgoingWebhookRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TestOutgoingWebhookResponse
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceTestExistingOutgoingWebhookExecute(r ApiOutgoingWebhooksServiceTestExistingOutgoingWebhookRequest) (*TestOutgoingWebhookResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TestOutgoingWebhookResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutgoingWebhooksServiceAPIService.OutgoingWebhooksServiceTestExistingOutgoingWebhook")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/webhooks/v1/test-existing"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.testExistingOutgoingWebhookRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOutgoingWebhooksServiceTestOutgoingWebhookRequest struct {
	ctx context.Context
	ApiService *OutgoingWebhooksServiceAPIService
	testOutgoingWebhookRequest *TestOutgoingWebhookRequest
}

func (r ApiOutgoingWebhooksServiceTestOutgoingWebhookRequest) TestOutgoingWebhookRequest(testOutgoingWebhookRequest TestOutgoingWebhookRequest) ApiOutgoingWebhooksServiceTestOutgoingWebhookRequest {
	r.testOutgoingWebhookRequest = &testOutgoingWebhookRequest
	return r
}

func (r ApiOutgoingWebhooksServiceTestOutgoingWebhookRequest) Execute() (*TestOutgoingWebhookResponse, *http.Response, error) {
	return r.ApiService.OutgoingWebhooksServiceTestOutgoingWebhookExecute(r)
}

/*
OutgoingWebhooksServiceTestOutgoingWebhook Test an outgoing webhook

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOutgoingWebhooksServiceTestOutgoingWebhookRequest
*/
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceTestOutgoingWebhook(ctx context.Context) ApiOutgoingWebhooksServiceTestOutgoingWebhookRequest {
	return ApiOutgoingWebhooksServiceTestOutgoingWebhookRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TestOutgoingWebhookResponse
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceTestOutgoingWebhookExecute(r ApiOutgoingWebhooksServiceTestOutgoingWebhookRequest) (*TestOutgoingWebhookResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TestOutgoingWebhookResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutgoingWebhooksServiceAPIService.OutgoingWebhooksServiceTestOutgoingWebhook")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/webhooks/v1/test"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.testOutgoingWebhookRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOutgoingWebhooksServiceUpdateOutgoingWebhookRequest struct {
	ctx context.Context
	ApiService *OutgoingWebhooksServiceAPIService
	updateOutgoingWebhookRequest *UpdateOutgoingWebhookRequest
}

func (r ApiOutgoingWebhooksServiceUpdateOutgoingWebhookRequest) UpdateOutgoingWebhookRequest(updateOutgoingWebhookRequest UpdateOutgoingWebhookRequest) ApiOutgoingWebhooksServiceUpdateOutgoingWebhookRequest {
	r.updateOutgoingWebhookRequest = &updateOutgoingWebhookRequest
	return r
}

func (r ApiOutgoingWebhooksServiceUpdateOutgoingWebhookRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.OutgoingWebhooksServiceUpdateOutgoingWebhookExecute(r)
}

/*
OutgoingWebhooksServiceUpdateOutgoingWebhook Update an outgoing webhook

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOutgoingWebhooksServiceUpdateOutgoingWebhookRequest
*/
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceUpdateOutgoingWebhook(ctx context.Context) ApiOutgoingWebhooksServiceUpdateOutgoingWebhookRequest {
	return ApiOutgoingWebhooksServiceUpdateOutgoingWebhookRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *OutgoingWebhooksServiceAPIService) OutgoingWebhooksServiceUpdateOutgoingWebhookExecute(r ApiOutgoingWebhooksServiceUpdateOutgoingWebhookRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutgoingWebhooksServiceAPIService.OutgoingWebhooksServiceUpdateOutgoingWebhook")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/webhooks/v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateOutgoingWebhookRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
