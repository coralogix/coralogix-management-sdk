/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the PieChartStackDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PieChartStackDefinition{}

// PieChartStackDefinition struct for PieChartStackDefinition
type PieChartStackDefinition struct {
	// How many slices can fit in a single slice stack
	MaxSlicesPerStack *int32 `json:"maxSlicesPerStack,omitempty"`
	// Custom template name of an individual slice in the stack
	StackNameTemplate *string `json:"stackNameTemplate,omitempty"`
}

// NewPieChartStackDefinition instantiates a new PieChartStackDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPieChartStackDefinition() *PieChartStackDefinition {
	this := PieChartStackDefinition{}
	return &this
}

// NewPieChartStackDefinitionWithDefaults instantiates a new PieChartStackDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPieChartStackDefinitionWithDefaults() *PieChartStackDefinition {
	this := PieChartStackDefinition{}
	return &this
}

// GetMaxSlicesPerStack returns the MaxSlicesPerStack field value if set, zero value otherwise.
func (o *PieChartStackDefinition) GetMaxSlicesPerStack() int32 {
	if o == nil || IsNil(o.MaxSlicesPerStack) {
		var ret int32
		return ret
	}
	return *o.MaxSlicesPerStack
}

// GetMaxSlicesPerStackOk returns a tuple with the MaxSlicesPerStack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PieChartStackDefinition) GetMaxSlicesPerStackOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxSlicesPerStack) {
		return nil, false
	}
	return o.MaxSlicesPerStack, true
}

// HasMaxSlicesPerStack returns a boolean if a field has been set.
func (o *PieChartStackDefinition) HasMaxSlicesPerStack() bool {
	if o != nil && !IsNil(o.MaxSlicesPerStack) {
		return true
	}

	return false
}

// SetMaxSlicesPerStack gets a reference to the given int32 and assigns it to the MaxSlicesPerStack field.
func (o *PieChartStackDefinition) SetMaxSlicesPerStack(v int32) {
	o.MaxSlicesPerStack = &v
}

// GetStackNameTemplate returns the StackNameTemplate field value if set, zero value otherwise.
func (o *PieChartStackDefinition) GetStackNameTemplate() string {
	if o == nil || IsNil(o.StackNameTemplate) {
		var ret string
		return ret
	}
	return *o.StackNameTemplate
}

// GetStackNameTemplateOk returns a tuple with the StackNameTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PieChartStackDefinition) GetStackNameTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.StackNameTemplate) {
		return nil, false
	}
	return o.StackNameTemplate, true
}

// HasStackNameTemplate returns a boolean if a field has been set.
func (o *PieChartStackDefinition) HasStackNameTemplate() bool {
	if o != nil && !IsNil(o.StackNameTemplate) {
		return true
	}

	return false
}

// SetStackNameTemplate gets a reference to the given string and assigns it to the StackNameTemplate field.
func (o *PieChartStackDefinition) SetStackNameTemplate(v string) {
	o.StackNameTemplate = &v
}

func (o PieChartStackDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PieChartStackDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxSlicesPerStack) {
		toSerialize["maxSlicesPerStack"] = o.MaxSlicesPerStack
	}
	if !IsNil(o.StackNameTemplate) {
		toSerialize["stackNameTemplate"] = o.StackNameTemplate
	}
	return toSerialize, nil
}

type NullablePieChartStackDefinition struct {
	value *PieChartStackDefinition
	isSet bool
}

func (v NullablePieChartStackDefinition) Get() *PieChartStackDefinition {
	return v.value
}

func (v *NullablePieChartStackDefinition) Set(val *PieChartStackDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullablePieChartStackDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullablePieChartStackDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePieChartStackDefinition(val *PieChartStackDefinition) *NullablePieChartStackDefinition {
	return &NullablePieChartStackDefinition{value: val, isSet: true}
}

func (v NullablePieChartStackDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePieChartStackDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


