/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the QuerySourceSpansQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuerySourceSpansQuery{}

// QuerySourceSpansQuery struct for QuerySourceSpansQuery
type QuerySourceSpansQuery struct {
	Type *QuerySourceSpansQueryType `json:"type,omitempty"`
}

// NewQuerySourceSpansQuery instantiates a new QuerySourceSpansQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuerySourceSpansQuery() *QuerySourceSpansQuery {
	this := QuerySourceSpansQuery{}
	return &this
}

// NewQuerySourceSpansQueryWithDefaults instantiates a new QuerySourceSpansQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuerySourceSpansQueryWithDefaults() *QuerySourceSpansQuery {
	this := QuerySourceSpansQuery{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *QuerySourceSpansQuery) GetType() QuerySourceSpansQueryType {
	if o == nil || IsNil(o.Type) {
		var ret QuerySourceSpansQueryType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuerySourceSpansQuery) GetTypeOk() (*QuerySourceSpansQueryType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *QuerySourceSpansQuery) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given QuerySourceSpansQueryType and assigns it to the Type field.
func (o *QuerySourceSpansQuery) SetType(v QuerySourceSpansQueryType) {
	o.Type = &v
}

func (o QuerySourceSpansQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuerySourceSpansQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableQuerySourceSpansQuery struct {
	value *QuerySourceSpansQuery
	isSet bool
}

func (v NullableQuerySourceSpansQuery) Get() *QuerySourceSpansQuery {
	return v.value
}

func (v *NullableQuerySourceSpansQuery) Set(val *QuerySourceSpansQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableQuerySourceSpansQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableQuerySourceSpansQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuerySourceSpansQuery(val *QuerySourceSpansQuery) *NullableQuerySourceSpansQuery {
	return &NullableQuerySourceSpansQuery{value: val, isSet: true}
}

func (v NullableQuerySourceSpansQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuerySourceSpansQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


