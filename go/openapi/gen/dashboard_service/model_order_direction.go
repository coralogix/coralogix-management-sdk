/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// OrderDirection the model 'OrderDirection'
type OrderDirection string

// List of OrderDirection
const (
	ORDERDIRECTION_ORDER_DIRECTION_UNSPECIFIED OrderDirection = "ORDER_DIRECTION_UNSPECIFIED"
	ORDERDIRECTION_ORDER_DIRECTION_ASC OrderDirection = "ORDER_DIRECTION_ASC"
	ORDERDIRECTION_ORDER_DIRECTION_DESC OrderDirection = "ORDER_DIRECTION_DESC"
)

// All allowed values of OrderDirection enum
var AllowedOrderDirectionEnumValues = []OrderDirection{
	"ORDER_DIRECTION_UNSPECIFIED",
	"ORDER_DIRECTION_ASC",
	"ORDER_DIRECTION_DESC",
}

func (v *OrderDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderDirection(value)
	for _, existing := range AllowedOrderDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderDirection", value)
}

// NewOrderDirectionFromValue returns a pointer to a valid OrderDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderDirectionFromValue(v string) (*OrderDirection, error) {
	ev := OrderDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderDirection: valid values are %v", v, AllowedOrderDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderDirection) IsValid() bool {
	for _, existing := range AllowedOrderDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderDirection value
func (v OrderDirection) Ptr() *OrderDirection {
	return &v
}

type NullableOrderDirection struct {
	value *OrderDirection
	isSet bool
}

func (v NullableOrderDirection) Get() *OrderDirection {
	return v.value
}

func (v *NullableOrderDirection) Set(val *OrderDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderDirection(val *OrderDirection) *NullableOrderDirection {
	return &NullableOrderDirection{value: val, isSet: true}
}

func (v NullableOrderDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

