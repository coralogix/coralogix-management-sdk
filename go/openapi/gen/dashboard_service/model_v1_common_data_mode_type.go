/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// V1CommonDataModeType the model 'V1CommonDataModeType'
type V1CommonDataModeType string

// List of v1.common.DataModeType
const (
	V1COMMONDATAMODETYPE_DATA_MODE_TYPE_HIGH_UNSPECIFIED V1CommonDataModeType = "DATA_MODE_TYPE_HIGH_UNSPECIFIED"
	V1COMMONDATAMODETYPE_DATA_MODE_TYPE_ARCHIVE V1CommonDataModeType = "DATA_MODE_TYPE_ARCHIVE"
)

// All allowed values of V1CommonDataModeType enum
var AllowedV1CommonDataModeTypeEnumValues = []V1CommonDataModeType{
	"DATA_MODE_TYPE_HIGH_UNSPECIFIED",
	"DATA_MODE_TYPE_ARCHIVE",
}

func (v *V1CommonDataModeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1CommonDataModeType(value)
	for _, existing := range AllowedV1CommonDataModeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1CommonDataModeType", value)
}

// NewV1CommonDataModeTypeFromValue returns a pointer to a valid V1CommonDataModeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1CommonDataModeTypeFromValue(v string) (*V1CommonDataModeType, error) {
	ev := V1CommonDataModeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1CommonDataModeType: valid values are %v", v, AllowedV1CommonDataModeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1CommonDataModeType) IsValid() bool {
	for _, existing := range AllowedV1CommonDataModeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1.common.DataModeType value
func (v V1CommonDataModeType) Ptr() *V1CommonDataModeType {
	return &v
}

type NullableV1CommonDataModeType struct {
	value *V1CommonDataModeType
	isSet bool
}

func (v NullableV1CommonDataModeType) Get() *V1CommonDataModeType {
	return v.value
}

func (v *NullableV1CommonDataModeType) Set(val *V1CommonDataModeType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1CommonDataModeType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1CommonDataModeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1CommonDataModeType(val *V1CommonDataModeType) *NullableV1CommonDataModeType {
	return &NullableV1CommonDataModeType{value: val, isSet: true}
}

func (v NullableV1CommonDataModeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1CommonDataModeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

