/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the SectionColor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SectionColor{}

// SectionColor struct for SectionColor
type SectionColor struct {
	Predefined *SectionPredefinedColor `json:"predefined,omitempty"`
}

// NewSectionColor instantiates a new SectionColor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSectionColor() *SectionColor {
	this := SectionColor{}
	return &this
}

// NewSectionColorWithDefaults instantiates a new SectionColor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSectionColorWithDefaults() *SectionColor {
	this := SectionColor{}
	return &this
}

// GetPredefined returns the Predefined field value if set, zero value otherwise.
func (o *SectionColor) GetPredefined() SectionPredefinedColor {
	if o == nil || IsNil(o.Predefined) {
		var ret SectionPredefinedColor
		return ret
	}
	return *o.Predefined
}

// GetPredefinedOk returns a tuple with the Predefined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SectionColor) GetPredefinedOk() (*SectionPredefinedColor, bool) {
	if o == nil || IsNil(o.Predefined) {
		return nil, false
	}
	return o.Predefined, true
}

// HasPredefined returns a boolean if a field has been set.
func (o *SectionColor) HasPredefined() bool {
	if o != nil && !IsNil(o.Predefined) {
		return true
	}

	return false
}

// SetPredefined gets a reference to the given SectionPredefinedColor and assigns it to the Predefined field.
func (o *SectionColor) SetPredefined(v SectionPredefinedColor) {
	o.Predefined = &v
}

func (o SectionColor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SectionColor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Predefined) {
		toSerialize["predefined"] = o.Predefined
	}
	return toSerialize, nil
}

type NullableSectionColor struct {
	value *SectionColor
	isSet bool
}

func (v NullableSectionColor) Get() *SectionColor {
	return v.value
}

func (v *NullableSectionColor) Set(val *SectionColor) {
	v.value = val
	v.isSet = true
}

func (v NullableSectionColor) IsSet() bool {
	return v.isSet
}

func (v *NullableSectionColor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSectionColor(val *SectionColor) *NullableSectionColor {
	return &NullableSectionColor{value: val, isSet: true}
}

func (v NullableSectionColor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSectionColor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


