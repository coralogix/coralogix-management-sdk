/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the VerticalBars type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerticalBars{}

// VerticalBars struct for VerticalBars
type VerticalBars struct {
	// Whether to render numeric value without abbreviation
	AllowAbbreviation *bool `json:"allowAbbreviation,omitempty"`
	BarValueDisplay *VisualizationBarValueDisplay `json:"barValueDisplay,omitempty"`
	CategoryFields []ObservationField `json:"categoryFields,omitempty"`
	// Applied color scheme, one of the predefined values
	ColorScheme *string `json:"colorScheme,omitempty"`
	ColorsBy *ColorsBy `json:"colorsBy,omitempty"`
	// Custom unit (requires to have unit field set to custom to take effect)
	CustomUnit *string `json:"customUnit,omitempty"`
	// Number indicating the decimal precision of the numeric values, within range 0-15
	DecimalPrecision *int32 `json:"decimalPrecision,omitempty"`
	// Custom template name for a group, can contain variables
	GroupNameTemplate *string `json:"groupNameTemplate,omitempty"`
	// Whether to ignore color scheme and derive colors from algorithm
	HashColors *bool `json:"hashColors,omitempty"`
	Legend *Legend `json:"legend,omitempty"`
	// Maximum number of bars on a chart
	MaxBarsPerChart *int32 `json:"maxBarsPerChart,omitempty"`
	// How many slices can fit in a single bar
	MaxSlicesPerBar *int32 `json:"maxSlicesPerBar,omitempty"`
	ScaleType *ScaleType `json:"scaleType,omitempty"`
	SortBy *SortByType `json:"sortBy,omitempty"`
	// Custom template name of an individual stack
	StackNameTemplate *string `json:"stackNameTemplate,omitempty"`
	SubCategoryFields []ObservationField `json:"subCategoryFields,omitempty"`
	Unit *CommonUnit `json:"unit,omitempty"`
	ValueField *ObservationField `json:"valueField,omitempty"`
	// Number indicating the upper band for y axis
	YAxisMax *float32 `json:"yAxisMax,omitempty"`
	// Number indicating the lower band for y axis
	YAxisMin *float32 `json:"yAxisMin,omitempty"`
}

// NewVerticalBars instantiates a new VerticalBars object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerticalBars() *VerticalBars {
	this := VerticalBars{}
	return &this
}

// NewVerticalBarsWithDefaults instantiates a new VerticalBars object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerticalBarsWithDefaults() *VerticalBars {
	this := VerticalBars{}
	return &this
}

// GetAllowAbbreviation returns the AllowAbbreviation field value if set, zero value otherwise.
func (o *VerticalBars) GetAllowAbbreviation() bool {
	if o == nil || IsNil(o.AllowAbbreviation) {
		var ret bool
		return ret
	}
	return *o.AllowAbbreviation
}

// GetAllowAbbreviationOk returns a tuple with the AllowAbbreviation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerticalBars) GetAllowAbbreviationOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowAbbreviation) {
		return nil, false
	}
	return o.AllowAbbreviation, true
}

// HasAllowAbbreviation returns a boolean if a field has been set.
func (o *VerticalBars) HasAllowAbbreviation() bool {
	if o != nil && !IsNil(o.AllowAbbreviation) {
		return true
	}

	return false
}

// SetAllowAbbreviation gets a reference to the given bool and assigns it to the AllowAbbreviation field.
func (o *VerticalBars) SetAllowAbbreviation(v bool) {
	o.AllowAbbreviation = &v
}

// GetBarValueDisplay returns the BarValueDisplay field value if set, zero value otherwise.
func (o *VerticalBars) GetBarValueDisplay() VisualizationBarValueDisplay {
	if o == nil || IsNil(o.BarValueDisplay) {
		var ret VisualizationBarValueDisplay
		return ret
	}
	return *o.BarValueDisplay
}

// GetBarValueDisplayOk returns a tuple with the BarValueDisplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerticalBars) GetBarValueDisplayOk() (*VisualizationBarValueDisplay, bool) {
	if o == nil || IsNil(o.BarValueDisplay) {
		return nil, false
	}
	return o.BarValueDisplay, true
}

// HasBarValueDisplay returns a boolean if a field has been set.
func (o *VerticalBars) HasBarValueDisplay() bool {
	if o != nil && !IsNil(o.BarValueDisplay) {
		return true
	}

	return false
}

// SetBarValueDisplay gets a reference to the given VisualizationBarValueDisplay and assigns it to the BarValueDisplay field.
func (o *VerticalBars) SetBarValueDisplay(v VisualizationBarValueDisplay) {
	o.BarValueDisplay = &v
}

// GetCategoryFields returns the CategoryFields field value if set, zero value otherwise.
func (o *VerticalBars) GetCategoryFields() []ObservationField {
	if o == nil || IsNil(o.CategoryFields) {
		var ret []ObservationField
		return ret
	}
	return o.CategoryFields
}

// GetCategoryFieldsOk returns a tuple with the CategoryFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerticalBars) GetCategoryFieldsOk() ([]ObservationField, bool) {
	if o == nil || IsNil(o.CategoryFields) {
		return nil, false
	}
	return o.CategoryFields, true
}

// HasCategoryFields returns a boolean if a field has been set.
func (o *VerticalBars) HasCategoryFields() bool {
	if o != nil && !IsNil(o.CategoryFields) {
		return true
	}

	return false
}

// SetCategoryFields gets a reference to the given []ObservationField and assigns it to the CategoryFields field.
func (o *VerticalBars) SetCategoryFields(v []ObservationField) {
	o.CategoryFields = v
}

// GetColorScheme returns the ColorScheme field value if set, zero value otherwise.
func (o *VerticalBars) GetColorScheme() string {
	if o == nil || IsNil(o.ColorScheme) {
		var ret string
		return ret
	}
	return *o.ColorScheme
}

// GetColorSchemeOk returns a tuple with the ColorScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerticalBars) GetColorSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.ColorScheme) {
		return nil, false
	}
	return o.ColorScheme, true
}

// HasColorScheme returns a boolean if a field has been set.
func (o *VerticalBars) HasColorScheme() bool {
	if o != nil && !IsNil(o.ColorScheme) {
		return true
	}

	return false
}

// SetColorScheme gets a reference to the given string and assigns it to the ColorScheme field.
func (o *VerticalBars) SetColorScheme(v string) {
	o.ColorScheme = &v
}

// GetColorsBy returns the ColorsBy field value if set, zero value otherwise.
func (o *VerticalBars) GetColorsBy() ColorsBy {
	if o == nil || IsNil(o.ColorsBy) {
		var ret ColorsBy
		return ret
	}
	return *o.ColorsBy
}

// GetColorsByOk returns a tuple with the ColorsBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerticalBars) GetColorsByOk() (*ColorsBy, bool) {
	if o == nil || IsNil(o.ColorsBy) {
		return nil, false
	}
	return o.ColorsBy, true
}

// HasColorsBy returns a boolean if a field has been set.
func (o *VerticalBars) HasColorsBy() bool {
	if o != nil && !IsNil(o.ColorsBy) {
		return true
	}

	return false
}

// SetColorsBy gets a reference to the given ColorsBy and assigns it to the ColorsBy field.
func (o *VerticalBars) SetColorsBy(v ColorsBy) {
	o.ColorsBy = &v
}

// GetCustomUnit returns the CustomUnit field value if set, zero value otherwise.
func (o *VerticalBars) GetCustomUnit() string {
	if o == nil || IsNil(o.CustomUnit) {
		var ret string
		return ret
	}
	return *o.CustomUnit
}

// GetCustomUnitOk returns a tuple with the CustomUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerticalBars) GetCustomUnitOk() (*string, bool) {
	if o == nil || IsNil(o.CustomUnit) {
		return nil, false
	}
	return o.CustomUnit, true
}

// HasCustomUnit returns a boolean if a field has been set.
func (o *VerticalBars) HasCustomUnit() bool {
	if o != nil && !IsNil(o.CustomUnit) {
		return true
	}

	return false
}

// SetCustomUnit gets a reference to the given string and assigns it to the CustomUnit field.
func (o *VerticalBars) SetCustomUnit(v string) {
	o.CustomUnit = &v
}

// GetDecimalPrecision returns the DecimalPrecision field value if set, zero value otherwise.
func (o *VerticalBars) GetDecimalPrecision() int32 {
	if o == nil || IsNil(o.DecimalPrecision) {
		var ret int32
		return ret
	}
	return *o.DecimalPrecision
}

// GetDecimalPrecisionOk returns a tuple with the DecimalPrecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerticalBars) GetDecimalPrecisionOk() (*int32, bool) {
	if o == nil || IsNil(o.DecimalPrecision) {
		return nil, false
	}
	return o.DecimalPrecision, true
}

// HasDecimalPrecision returns a boolean if a field has been set.
func (o *VerticalBars) HasDecimalPrecision() bool {
	if o != nil && !IsNil(o.DecimalPrecision) {
		return true
	}

	return false
}

// SetDecimalPrecision gets a reference to the given int32 and assigns it to the DecimalPrecision field.
func (o *VerticalBars) SetDecimalPrecision(v int32) {
	o.DecimalPrecision = &v
}

// GetGroupNameTemplate returns the GroupNameTemplate field value if set, zero value otherwise.
func (o *VerticalBars) GetGroupNameTemplate() string {
	if o == nil || IsNil(o.GroupNameTemplate) {
		var ret string
		return ret
	}
	return *o.GroupNameTemplate
}

// GetGroupNameTemplateOk returns a tuple with the GroupNameTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerticalBars) GetGroupNameTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.GroupNameTemplate) {
		return nil, false
	}
	return o.GroupNameTemplate, true
}

// HasGroupNameTemplate returns a boolean if a field has been set.
func (o *VerticalBars) HasGroupNameTemplate() bool {
	if o != nil && !IsNil(o.GroupNameTemplate) {
		return true
	}

	return false
}

// SetGroupNameTemplate gets a reference to the given string and assigns it to the GroupNameTemplate field.
func (o *VerticalBars) SetGroupNameTemplate(v string) {
	o.GroupNameTemplate = &v
}

// GetHashColors returns the HashColors field value if set, zero value otherwise.
func (o *VerticalBars) GetHashColors() bool {
	if o == nil || IsNil(o.HashColors) {
		var ret bool
		return ret
	}
	return *o.HashColors
}

// GetHashColorsOk returns a tuple with the HashColors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerticalBars) GetHashColorsOk() (*bool, bool) {
	if o == nil || IsNil(o.HashColors) {
		return nil, false
	}
	return o.HashColors, true
}

// HasHashColors returns a boolean if a field has been set.
func (o *VerticalBars) HasHashColors() bool {
	if o != nil && !IsNil(o.HashColors) {
		return true
	}

	return false
}

// SetHashColors gets a reference to the given bool and assigns it to the HashColors field.
func (o *VerticalBars) SetHashColors(v bool) {
	o.HashColors = &v
}

// GetLegend returns the Legend field value if set, zero value otherwise.
func (o *VerticalBars) GetLegend() Legend {
	if o == nil || IsNil(o.Legend) {
		var ret Legend
		return ret
	}
	return *o.Legend
}

// GetLegendOk returns a tuple with the Legend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerticalBars) GetLegendOk() (*Legend, bool) {
	if o == nil || IsNil(o.Legend) {
		return nil, false
	}
	return o.Legend, true
}

// HasLegend returns a boolean if a field has been set.
func (o *VerticalBars) HasLegend() bool {
	if o != nil && !IsNil(o.Legend) {
		return true
	}

	return false
}

// SetLegend gets a reference to the given Legend and assigns it to the Legend field.
func (o *VerticalBars) SetLegend(v Legend) {
	o.Legend = &v
}

// GetMaxBarsPerChart returns the MaxBarsPerChart field value if set, zero value otherwise.
func (o *VerticalBars) GetMaxBarsPerChart() int32 {
	if o == nil || IsNil(o.MaxBarsPerChart) {
		var ret int32
		return ret
	}
	return *o.MaxBarsPerChart
}

// GetMaxBarsPerChartOk returns a tuple with the MaxBarsPerChart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerticalBars) GetMaxBarsPerChartOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxBarsPerChart) {
		return nil, false
	}
	return o.MaxBarsPerChart, true
}

// HasMaxBarsPerChart returns a boolean if a field has been set.
func (o *VerticalBars) HasMaxBarsPerChart() bool {
	if o != nil && !IsNil(o.MaxBarsPerChart) {
		return true
	}

	return false
}

// SetMaxBarsPerChart gets a reference to the given int32 and assigns it to the MaxBarsPerChart field.
func (o *VerticalBars) SetMaxBarsPerChart(v int32) {
	o.MaxBarsPerChart = &v
}

// GetMaxSlicesPerBar returns the MaxSlicesPerBar field value if set, zero value otherwise.
func (o *VerticalBars) GetMaxSlicesPerBar() int32 {
	if o == nil || IsNil(o.MaxSlicesPerBar) {
		var ret int32
		return ret
	}
	return *o.MaxSlicesPerBar
}

// GetMaxSlicesPerBarOk returns a tuple with the MaxSlicesPerBar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerticalBars) GetMaxSlicesPerBarOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxSlicesPerBar) {
		return nil, false
	}
	return o.MaxSlicesPerBar, true
}

// HasMaxSlicesPerBar returns a boolean if a field has been set.
func (o *VerticalBars) HasMaxSlicesPerBar() bool {
	if o != nil && !IsNil(o.MaxSlicesPerBar) {
		return true
	}

	return false
}

// SetMaxSlicesPerBar gets a reference to the given int32 and assigns it to the MaxSlicesPerBar field.
func (o *VerticalBars) SetMaxSlicesPerBar(v int32) {
	o.MaxSlicesPerBar = &v
}

// GetScaleType returns the ScaleType field value if set, zero value otherwise.
func (o *VerticalBars) GetScaleType() ScaleType {
	if o == nil || IsNil(o.ScaleType) {
		var ret ScaleType
		return ret
	}
	return *o.ScaleType
}

// GetScaleTypeOk returns a tuple with the ScaleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerticalBars) GetScaleTypeOk() (*ScaleType, bool) {
	if o == nil || IsNil(o.ScaleType) {
		return nil, false
	}
	return o.ScaleType, true
}

// HasScaleType returns a boolean if a field has been set.
func (o *VerticalBars) HasScaleType() bool {
	if o != nil && !IsNil(o.ScaleType) {
		return true
	}

	return false
}

// SetScaleType gets a reference to the given ScaleType and assigns it to the ScaleType field.
func (o *VerticalBars) SetScaleType(v ScaleType) {
	o.ScaleType = &v
}

// GetSortBy returns the SortBy field value if set, zero value otherwise.
func (o *VerticalBars) GetSortBy() SortByType {
	if o == nil || IsNil(o.SortBy) {
		var ret SortByType
		return ret
	}
	return *o.SortBy
}

// GetSortByOk returns a tuple with the SortBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerticalBars) GetSortByOk() (*SortByType, bool) {
	if o == nil || IsNil(o.SortBy) {
		return nil, false
	}
	return o.SortBy, true
}

// HasSortBy returns a boolean if a field has been set.
func (o *VerticalBars) HasSortBy() bool {
	if o != nil && !IsNil(o.SortBy) {
		return true
	}

	return false
}

// SetSortBy gets a reference to the given SortByType and assigns it to the SortBy field.
func (o *VerticalBars) SetSortBy(v SortByType) {
	o.SortBy = &v
}

// GetStackNameTemplate returns the StackNameTemplate field value if set, zero value otherwise.
func (o *VerticalBars) GetStackNameTemplate() string {
	if o == nil || IsNil(o.StackNameTemplate) {
		var ret string
		return ret
	}
	return *o.StackNameTemplate
}

// GetStackNameTemplateOk returns a tuple with the StackNameTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerticalBars) GetStackNameTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.StackNameTemplate) {
		return nil, false
	}
	return o.StackNameTemplate, true
}

// HasStackNameTemplate returns a boolean if a field has been set.
func (o *VerticalBars) HasStackNameTemplate() bool {
	if o != nil && !IsNil(o.StackNameTemplate) {
		return true
	}

	return false
}

// SetStackNameTemplate gets a reference to the given string and assigns it to the StackNameTemplate field.
func (o *VerticalBars) SetStackNameTemplate(v string) {
	o.StackNameTemplate = &v
}

// GetSubCategoryFields returns the SubCategoryFields field value if set, zero value otherwise.
func (o *VerticalBars) GetSubCategoryFields() []ObservationField {
	if o == nil || IsNil(o.SubCategoryFields) {
		var ret []ObservationField
		return ret
	}
	return o.SubCategoryFields
}

// GetSubCategoryFieldsOk returns a tuple with the SubCategoryFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerticalBars) GetSubCategoryFieldsOk() ([]ObservationField, bool) {
	if o == nil || IsNil(o.SubCategoryFields) {
		return nil, false
	}
	return o.SubCategoryFields, true
}

// HasSubCategoryFields returns a boolean if a field has been set.
func (o *VerticalBars) HasSubCategoryFields() bool {
	if o != nil && !IsNil(o.SubCategoryFields) {
		return true
	}

	return false
}

// SetSubCategoryFields gets a reference to the given []ObservationField and assigns it to the SubCategoryFields field.
func (o *VerticalBars) SetSubCategoryFields(v []ObservationField) {
	o.SubCategoryFields = v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *VerticalBars) GetUnit() CommonUnit {
	if o == nil || IsNil(o.Unit) {
		var ret CommonUnit
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerticalBars) GetUnitOk() (*CommonUnit, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *VerticalBars) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given CommonUnit and assigns it to the Unit field.
func (o *VerticalBars) SetUnit(v CommonUnit) {
	o.Unit = &v
}

// GetValueField returns the ValueField field value if set, zero value otherwise.
func (o *VerticalBars) GetValueField() ObservationField {
	if o == nil || IsNil(o.ValueField) {
		var ret ObservationField
		return ret
	}
	return *o.ValueField
}

// GetValueFieldOk returns a tuple with the ValueField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerticalBars) GetValueFieldOk() (*ObservationField, bool) {
	if o == nil || IsNil(o.ValueField) {
		return nil, false
	}
	return o.ValueField, true
}

// HasValueField returns a boolean if a field has been set.
func (o *VerticalBars) HasValueField() bool {
	if o != nil && !IsNil(o.ValueField) {
		return true
	}

	return false
}

// SetValueField gets a reference to the given ObservationField and assigns it to the ValueField field.
func (o *VerticalBars) SetValueField(v ObservationField) {
	o.ValueField = &v
}

// GetYAxisMax returns the YAxisMax field value if set, zero value otherwise.
func (o *VerticalBars) GetYAxisMax() float32 {
	if o == nil || IsNil(o.YAxisMax) {
		var ret float32
		return ret
	}
	return *o.YAxisMax
}

// GetYAxisMaxOk returns a tuple with the YAxisMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerticalBars) GetYAxisMaxOk() (*float32, bool) {
	if o == nil || IsNil(o.YAxisMax) {
		return nil, false
	}
	return o.YAxisMax, true
}

// HasYAxisMax returns a boolean if a field has been set.
func (o *VerticalBars) HasYAxisMax() bool {
	if o != nil && !IsNil(o.YAxisMax) {
		return true
	}

	return false
}

// SetYAxisMax gets a reference to the given float32 and assigns it to the YAxisMax field.
func (o *VerticalBars) SetYAxisMax(v float32) {
	o.YAxisMax = &v
}

// GetYAxisMin returns the YAxisMin field value if set, zero value otherwise.
func (o *VerticalBars) GetYAxisMin() float32 {
	if o == nil || IsNil(o.YAxisMin) {
		var ret float32
		return ret
	}
	return *o.YAxisMin
}

// GetYAxisMinOk returns a tuple with the YAxisMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerticalBars) GetYAxisMinOk() (*float32, bool) {
	if o == nil || IsNil(o.YAxisMin) {
		return nil, false
	}
	return o.YAxisMin, true
}

// HasYAxisMin returns a boolean if a field has been set.
func (o *VerticalBars) HasYAxisMin() bool {
	if o != nil && !IsNil(o.YAxisMin) {
		return true
	}

	return false
}

// SetYAxisMin gets a reference to the given float32 and assigns it to the YAxisMin field.
func (o *VerticalBars) SetYAxisMin(v float32) {
	o.YAxisMin = &v
}

func (o VerticalBars) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerticalBars) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowAbbreviation) {
		toSerialize["allowAbbreviation"] = o.AllowAbbreviation
	}
	if !IsNil(o.BarValueDisplay) {
		toSerialize["barValueDisplay"] = o.BarValueDisplay
	}
	if !IsNil(o.CategoryFields) {
		toSerialize["categoryFields"] = o.CategoryFields
	}
	if !IsNil(o.ColorScheme) {
		toSerialize["colorScheme"] = o.ColorScheme
	}
	if !IsNil(o.ColorsBy) {
		toSerialize["colorsBy"] = o.ColorsBy
	}
	if !IsNil(o.CustomUnit) {
		toSerialize["customUnit"] = o.CustomUnit
	}
	if !IsNil(o.DecimalPrecision) {
		toSerialize["decimalPrecision"] = o.DecimalPrecision
	}
	if !IsNil(o.GroupNameTemplate) {
		toSerialize["groupNameTemplate"] = o.GroupNameTemplate
	}
	if !IsNil(o.HashColors) {
		toSerialize["hashColors"] = o.HashColors
	}
	if !IsNil(o.Legend) {
		toSerialize["legend"] = o.Legend
	}
	if !IsNil(o.MaxBarsPerChart) {
		toSerialize["maxBarsPerChart"] = o.MaxBarsPerChart
	}
	if !IsNil(o.MaxSlicesPerBar) {
		toSerialize["maxSlicesPerBar"] = o.MaxSlicesPerBar
	}
	if !IsNil(o.ScaleType) {
		toSerialize["scaleType"] = o.ScaleType
	}
	if !IsNil(o.SortBy) {
		toSerialize["sortBy"] = o.SortBy
	}
	if !IsNil(o.StackNameTemplate) {
		toSerialize["stackNameTemplate"] = o.StackNameTemplate
	}
	if !IsNil(o.SubCategoryFields) {
		toSerialize["subCategoryFields"] = o.SubCategoryFields
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.ValueField) {
		toSerialize["valueField"] = o.ValueField
	}
	if !IsNil(o.YAxisMax) {
		toSerialize["yAxisMax"] = o.YAxisMax
	}
	if !IsNil(o.YAxisMin) {
		toSerialize["yAxisMin"] = o.YAxisMin
	}
	return toSerialize, nil
}

type NullableVerticalBars struct {
	value *VerticalBars
	isSet bool
}

func (v NullableVerticalBars) Get() *VerticalBars {
	return v.value
}

func (v *NullableVerticalBars) Set(val *VerticalBars) {
	v.value = val
	v.isSet = true
}

func (v NullableVerticalBars) IsSet() bool {
	return v.isSet
}

func (v *NullableVerticalBars) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerticalBars(val *VerticalBars) *NullableVerticalBars {
	return &NullableVerticalBars{value: val, isSet: true}
}

func (v NullableVerticalBars) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerticalBars) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


