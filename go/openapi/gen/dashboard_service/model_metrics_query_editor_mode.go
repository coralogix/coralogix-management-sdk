/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// MetricsQueryEditorMode the model 'MetricsQueryEditorMode'
type MetricsQueryEditorMode string

// List of MetricsQueryEditorMode
const (
	METRICSQUERYEDITORMODE_METRICS_QUERY_EDITOR_MODE_UNSPECIFIED MetricsQueryEditorMode = "METRICS_QUERY_EDITOR_MODE_UNSPECIFIED"
	METRICSQUERYEDITORMODE_METRICS_QUERY_EDITOR_MODE_TEXT MetricsQueryEditorMode = "METRICS_QUERY_EDITOR_MODE_TEXT"
	METRICSQUERYEDITORMODE_METRICS_QUERY_EDITOR_MODE_BUILDER MetricsQueryEditorMode = "METRICS_QUERY_EDITOR_MODE_BUILDER"
)

// All allowed values of MetricsQueryEditorMode enum
var AllowedMetricsQueryEditorModeEnumValues = []MetricsQueryEditorMode{
	"METRICS_QUERY_EDITOR_MODE_UNSPECIFIED",
	"METRICS_QUERY_EDITOR_MODE_TEXT",
	"METRICS_QUERY_EDITOR_MODE_BUILDER",
}

func (v *MetricsQueryEditorMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetricsQueryEditorMode(value)
	for _, existing := range AllowedMetricsQueryEditorModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetricsQueryEditorMode", value)
}

// NewMetricsQueryEditorModeFromValue returns a pointer to a valid MetricsQueryEditorMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetricsQueryEditorModeFromValue(v string) (*MetricsQueryEditorMode, error) {
	ev := MetricsQueryEditorMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetricsQueryEditorMode: valid values are %v", v, AllowedMetricsQueryEditorModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetricsQueryEditorMode) IsValid() bool {
	for _, existing := range AllowedMetricsQueryEditorModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetricsQueryEditorMode value
func (v MetricsQueryEditorMode) Ptr() *MetricsQueryEditorMode {
	return &v
}

type NullableMetricsQueryEditorMode struct {
	value *MetricsQueryEditorMode
	isSet bool
}

func (v NullableMetricsQueryEditorMode) Get() *MetricsQueryEditorMode {
	return v.value
}

func (v *NullableMetricsQueryEditorMode) Set(val *MetricsQueryEditorMode) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsQueryEditorMode) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsQueryEditorMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsQueryEditorMode(val *MetricsQueryEditorMode) *NullableMetricsQueryEditorMode {
	return &NullableMetricsQueryEditorMode{value: val, isSet: true}
}

func (v NullableMetricsQueryEditorMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsQueryEditorMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

