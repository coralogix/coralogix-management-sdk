/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// LogsAggregation - struct for LogsAggregation
type LogsAggregation struct {
	LogsAggregationOneOf *LogsAggregationOneOf
	LogsAggregationOneOf1 *LogsAggregationOneOf1
	LogsAggregationOneOf2 *LogsAggregationOneOf2
	LogsAggregationOneOf3 *LogsAggregationOneOf3
	LogsAggregationOneOf4 *LogsAggregationOneOf4
	LogsAggregationOneOf5 *LogsAggregationOneOf5
	LogsAggregationOneOf6 *LogsAggregationOneOf6
}

// LogsAggregationOneOfAsLogsAggregation is a convenience function that returns LogsAggregationOneOf wrapped in LogsAggregation
func LogsAggregationOneOfAsLogsAggregation(v *LogsAggregationOneOf) LogsAggregation {
	return LogsAggregation{
		LogsAggregationOneOf: v,
	}
}

// LogsAggregationOneOf1AsLogsAggregation is a convenience function that returns LogsAggregationOneOf1 wrapped in LogsAggregation
func LogsAggregationOneOf1AsLogsAggregation(v *LogsAggregationOneOf1) LogsAggregation {
	return LogsAggregation{
		LogsAggregationOneOf1: v,
	}
}

// LogsAggregationOneOf2AsLogsAggregation is a convenience function that returns LogsAggregationOneOf2 wrapped in LogsAggregation
func LogsAggregationOneOf2AsLogsAggregation(v *LogsAggregationOneOf2) LogsAggregation {
	return LogsAggregation{
		LogsAggregationOneOf2: v,
	}
}

// LogsAggregationOneOf3AsLogsAggregation is a convenience function that returns LogsAggregationOneOf3 wrapped in LogsAggregation
func LogsAggregationOneOf3AsLogsAggregation(v *LogsAggregationOneOf3) LogsAggregation {
	return LogsAggregation{
		LogsAggregationOneOf3: v,
	}
}

// LogsAggregationOneOf4AsLogsAggregation is a convenience function that returns LogsAggregationOneOf4 wrapped in LogsAggregation
func LogsAggregationOneOf4AsLogsAggregation(v *LogsAggregationOneOf4) LogsAggregation {
	return LogsAggregation{
		LogsAggregationOneOf4: v,
	}
}

// LogsAggregationOneOf5AsLogsAggregation is a convenience function that returns LogsAggregationOneOf5 wrapped in LogsAggregation
func LogsAggregationOneOf5AsLogsAggregation(v *LogsAggregationOneOf5) LogsAggregation {
	return LogsAggregation{
		LogsAggregationOneOf5: v,
	}
}

// LogsAggregationOneOf6AsLogsAggregation is a convenience function that returns LogsAggregationOneOf6 wrapped in LogsAggregation
func LogsAggregationOneOf6AsLogsAggregation(v *LogsAggregationOneOf6) LogsAggregation {
	return LogsAggregation{
		LogsAggregationOneOf6: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *LogsAggregation) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LogsAggregationOneOf
	err = newStrictDecoder(data).Decode(&dst.LogsAggregationOneOf)
	if err == nil {
		jsonLogsAggregationOneOf, _ := json.Marshal(dst.LogsAggregationOneOf)
		if string(jsonLogsAggregationOneOf) == "{}" { // empty struct
			dst.LogsAggregationOneOf = nil
		} else {
			if err = validator.Validate(dst.LogsAggregationOneOf); err != nil {
				dst.LogsAggregationOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogsAggregationOneOf = nil
	}

	// try to unmarshal data into LogsAggregationOneOf1
	err = newStrictDecoder(data).Decode(&dst.LogsAggregationOneOf1)
	if err == nil {
		jsonLogsAggregationOneOf1, _ := json.Marshal(dst.LogsAggregationOneOf1)
		if string(jsonLogsAggregationOneOf1) == "{}" { // empty struct
			dst.LogsAggregationOneOf1 = nil
		} else {
			if err = validator.Validate(dst.LogsAggregationOneOf1); err != nil {
				dst.LogsAggregationOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogsAggregationOneOf1 = nil
	}

	// try to unmarshal data into LogsAggregationOneOf2
	err = newStrictDecoder(data).Decode(&dst.LogsAggregationOneOf2)
	if err == nil {
		jsonLogsAggregationOneOf2, _ := json.Marshal(dst.LogsAggregationOneOf2)
		if string(jsonLogsAggregationOneOf2) == "{}" { // empty struct
			dst.LogsAggregationOneOf2 = nil
		} else {
			if err = validator.Validate(dst.LogsAggregationOneOf2); err != nil {
				dst.LogsAggregationOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogsAggregationOneOf2 = nil
	}

	// try to unmarshal data into LogsAggregationOneOf3
	err = newStrictDecoder(data).Decode(&dst.LogsAggregationOneOf3)
	if err == nil {
		jsonLogsAggregationOneOf3, _ := json.Marshal(dst.LogsAggregationOneOf3)
		if string(jsonLogsAggregationOneOf3) == "{}" { // empty struct
			dst.LogsAggregationOneOf3 = nil
		} else {
			if err = validator.Validate(dst.LogsAggregationOneOf3); err != nil {
				dst.LogsAggregationOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogsAggregationOneOf3 = nil
	}

	// try to unmarshal data into LogsAggregationOneOf4
	err = newStrictDecoder(data).Decode(&dst.LogsAggregationOneOf4)
	if err == nil {
		jsonLogsAggregationOneOf4, _ := json.Marshal(dst.LogsAggregationOneOf4)
		if string(jsonLogsAggregationOneOf4) == "{}" { // empty struct
			dst.LogsAggregationOneOf4 = nil
		} else {
			if err = validator.Validate(dst.LogsAggregationOneOf4); err != nil {
				dst.LogsAggregationOneOf4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogsAggregationOneOf4 = nil
	}

	// try to unmarshal data into LogsAggregationOneOf5
	err = newStrictDecoder(data).Decode(&dst.LogsAggregationOneOf5)
	if err == nil {
		jsonLogsAggregationOneOf5, _ := json.Marshal(dst.LogsAggregationOneOf5)
		if string(jsonLogsAggregationOneOf5) == "{}" { // empty struct
			dst.LogsAggregationOneOf5 = nil
		} else {
			if err = validator.Validate(dst.LogsAggregationOneOf5); err != nil {
				dst.LogsAggregationOneOf5 = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogsAggregationOneOf5 = nil
	}

	// try to unmarshal data into LogsAggregationOneOf6
	err = newStrictDecoder(data).Decode(&dst.LogsAggregationOneOf6)
	if err == nil {
		jsonLogsAggregationOneOf6, _ := json.Marshal(dst.LogsAggregationOneOf6)
		if string(jsonLogsAggregationOneOf6) == "{}" { // empty struct
			dst.LogsAggregationOneOf6 = nil
		} else {
			if err = validator.Validate(dst.LogsAggregationOneOf6); err != nil {
				dst.LogsAggregationOneOf6 = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogsAggregationOneOf6 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LogsAggregationOneOf = nil
		dst.LogsAggregationOneOf1 = nil
		dst.LogsAggregationOneOf2 = nil
		dst.LogsAggregationOneOf3 = nil
		dst.LogsAggregationOneOf4 = nil
		dst.LogsAggregationOneOf5 = nil
		dst.LogsAggregationOneOf6 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(LogsAggregation)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(LogsAggregation)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src LogsAggregation) MarshalJSON() ([]byte, error) {
	if src.LogsAggregationOneOf != nil {
		return json.Marshal(&src.LogsAggregationOneOf)
	}

	if src.LogsAggregationOneOf1 != nil {
		return json.Marshal(&src.LogsAggregationOneOf1)
	}

	if src.LogsAggregationOneOf2 != nil {
		return json.Marshal(&src.LogsAggregationOneOf2)
	}

	if src.LogsAggregationOneOf3 != nil {
		return json.Marshal(&src.LogsAggregationOneOf3)
	}

	if src.LogsAggregationOneOf4 != nil {
		return json.Marshal(&src.LogsAggregationOneOf4)
	}

	if src.LogsAggregationOneOf5 != nil {
		return json.Marshal(&src.LogsAggregationOneOf5)
	}

	if src.LogsAggregationOneOf6 != nil {
		return json.Marshal(&src.LogsAggregationOneOf6)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *LogsAggregation) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.LogsAggregationOneOf != nil {
		return obj.LogsAggregationOneOf
	}

	if obj.LogsAggregationOneOf1 != nil {
		return obj.LogsAggregationOneOf1
	}

	if obj.LogsAggregationOneOf2 != nil {
		return obj.LogsAggregationOneOf2
	}

	if obj.LogsAggregationOneOf3 != nil {
		return obj.LogsAggregationOneOf3
	}

	if obj.LogsAggregationOneOf4 != nil {
		return obj.LogsAggregationOneOf4
	}

	if obj.LogsAggregationOneOf5 != nil {
		return obj.LogsAggregationOneOf5
	}

	if obj.LogsAggregationOneOf6 != nil {
		return obj.LogsAggregationOneOf6
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj LogsAggregation) GetActualInstanceValue() (interface{}) {
	if obj.LogsAggregationOneOf != nil {
		return *obj.LogsAggregationOneOf
	}

	if obj.LogsAggregationOneOf1 != nil {
		return *obj.LogsAggregationOneOf1
	}

	if obj.LogsAggregationOneOf2 != nil {
		return *obj.LogsAggregationOneOf2
	}

	if obj.LogsAggregationOneOf3 != nil {
		return *obj.LogsAggregationOneOf3
	}

	if obj.LogsAggregationOneOf4 != nil {
		return *obj.LogsAggregationOneOf4
	}

	if obj.LogsAggregationOneOf5 != nil {
		return *obj.LogsAggregationOneOf5
	}

	if obj.LogsAggregationOneOf6 != nil {
		return *obj.LogsAggregationOneOf6
	}

	// all schemas are nil
	return nil
}

type NullableLogsAggregation struct {
	value *LogsAggregation
	isSet bool
}

func (v NullableLogsAggregation) Get() *LogsAggregation {
	return v.value
}

func (v *NullableLogsAggregation) Set(val *LogsAggregation) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsAggregation) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsAggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsAggregation(val *LogsAggregation) *NullableLogsAggregation {
	return &NullableLogsAggregation{value: val, isSet: true}
}

func (v NullableLogsAggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsAggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


