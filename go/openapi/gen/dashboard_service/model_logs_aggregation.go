/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// LogsAggregation - struct for LogsAggregation
type LogsAggregation struct {
	LogsAggregationAverage *LogsAggregationAverage
	LogsAggregationCount *LogsAggregationCount
	LogsAggregationCountDistinct *LogsAggregationCountDistinct
	LogsAggregationMax *LogsAggregationMax
	LogsAggregationMin *LogsAggregationMin
	LogsAggregationPercentile *LogsAggregationPercentile
	LogsAggregationSum *LogsAggregationSum
}

// LogsAggregationAverageAsLogsAggregation is a convenience function that returns LogsAggregationAverage wrapped in LogsAggregation
func LogsAggregationAverageAsLogsAggregation(v *LogsAggregationAverage) LogsAggregation {
	return LogsAggregation{
		LogsAggregationAverage: v,
	}
}

// LogsAggregationCountAsLogsAggregation is a convenience function that returns LogsAggregationCount wrapped in LogsAggregation
func LogsAggregationCountAsLogsAggregation(v *LogsAggregationCount) LogsAggregation {
	return LogsAggregation{
		LogsAggregationCount: v,
	}
}

// LogsAggregationCountDistinctAsLogsAggregation is a convenience function that returns LogsAggregationCountDistinct wrapped in LogsAggregation
func LogsAggregationCountDistinctAsLogsAggregation(v *LogsAggregationCountDistinct) LogsAggregation {
	return LogsAggregation{
		LogsAggregationCountDistinct: v,
	}
}

// LogsAggregationMaxAsLogsAggregation is a convenience function that returns LogsAggregationMax wrapped in LogsAggregation
func LogsAggregationMaxAsLogsAggregation(v *LogsAggregationMax) LogsAggregation {
	return LogsAggregation{
		LogsAggregationMax: v,
	}
}

// LogsAggregationMinAsLogsAggregation is a convenience function that returns LogsAggregationMin wrapped in LogsAggregation
func LogsAggregationMinAsLogsAggregation(v *LogsAggregationMin) LogsAggregation {
	return LogsAggregation{
		LogsAggregationMin: v,
	}
}

// LogsAggregationPercentileAsLogsAggregation is a convenience function that returns LogsAggregationPercentile wrapped in LogsAggregation
func LogsAggregationPercentileAsLogsAggregation(v *LogsAggregationPercentile) LogsAggregation {
	return LogsAggregation{
		LogsAggregationPercentile: v,
	}
}

// LogsAggregationSumAsLogsAggregation is a convenience function that returns LogsAggregationSum wrapped in LogsAggregation
func LogsAggregationSumAsLogsAggregation(v *LogsAggregationSum) LogsAggregation {
	return LogsAggregation{
		LogsAggregationSum: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *LogsAggregation) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LogsAggregationAverage
	err = newStrictDecoder(data).Decode(&dst.LogsAggregationAverage)
	if err == nil {
		jsonLogsAggregationAverage, _ := json.Marshal(dst.LogsAggregationAverage)
		if string(jsonLogsAggregationAverage) == "{}" { // empty struct
			dst.LogsAggregationAverage = nil
		} else {
			if err = validator.Validate(dst.LogsAggregationAverage); err != nil {
				dst.LogsAggregationAverage = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogsAggregationAverage = nil
	}

	// try to unmarshal data into LogsAggregationCount
	err = newStrictDecoder(data).Decode(&dst.LogsAggregationCount)
	if err == nil {
		jsonLogsAggregationCount, _ := json.Marshal(dst.LogsAggregationCount)
		if string(jsonLogsAggregationCount) == "{}" { // empty struct
			dst.LogsAggregationCount = nil
		} else {
			if err = validator.Validate(dst.LogsAggregationCount); err != nil {
				dst.LogsAggregationCount = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogsAggregationCount = nil
	}

	// try to unmarshal data into LogsAggregationCountDistinct
	err = newStrictDecoder(data).Decode(&dst.LogsAggregationCountDistinct)
	if err == nil {
		jsonLogsAggregationCountDistinct, _ := json.Marshal(dst.LogsAggregationCountDistinct)
		if string(jsonLogsAggregationCountDistinct) == "{}" { // empty struct
			dst.LogsAggregationCountDistinct = nil
		} else {
			if err = validator.Validate(dst.LogsAggregationCountDistinct); err != nil {
				dst.LogsAggregationCountDistinct = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogsAggregationCountDistinct = nil
	}

	// try to unmarshal data into LogsAggregationMax
	err = newStrictDecoder(data).Decode(&dst.LogsAggregationMax)
	if err == nil {
		jsonLogsAggregationMax, _ := json.Marshal(dst.LogsAggregationMax)
		if string(jsonLogsAggregationMax) == "{}" { // empty struct
			dst.LogsAggregationMax = nil
		} else {
			if err = validator.Validate(dst.LogsAggregationMax); err != nil {
				dst.LogsAggregationMax = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogsAggregationMax = nil
	}

	// try to unmarshal data into LogsAggregationMin
	err = newStrictDecoder(data).Decode(&dst.LogsAggregationMin)
	if err == nil {
		jsonLogsAggregationMin, _ := json.Marshal(dst.LogsAggregationMin)
		if string(jsonLogsAggregationMin) == "{}" { // empty struct
			dst.LogsAggregationMin = nil
		} else {
			if err = validator.Validate(dst.LogsAggregationMin); err != nil {
				dst.LogsAggregationMin = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogsAggregationMin = nil
	}

	// try to unmarshal data into LogsAggregationPercentile
	err = newStrictDecoder(data).Decode(&dst.LogsAggregationPercentile)
	if err == nil {
		jsonLogsAggregationPercentile, _ := json.Marshal(dst.LogsAggregationPercentile)
		if string(jsonLogsAggregationPercentile) == "{}" { // empty struct
			dst.LogsAggregationPercentile = nil
		} else {
			if err = validator.Validate(dst.LogsAggregationPercentile); err != nil {
				dst.LogsAggregationPercentile = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogsAggregationPercentile = nil
	}

	// try to unmarshal data into LogsAggregationSum
	err = newStrictDecoder(data).Decode(&dst.LogsAggregationSum)
	if err == nil {
		jsonLogsAggregationSum, _ := json.Marshal(dst.LogsAggregationSum)
		if string(jsonLogsAggregationSum) == "{}" { // empty struct
			dst.LogsAggregationSum = nil
		} else {
			if err = validator.Validate(dst.LogsAggregationSum); err != nil {
				dst.LogsAggregationSum = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogsAggregationSum = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LogsAggregationAverage = nil
		dst.LogsAggregationCount = nil
		dst.LogsAggregationCountDistinct = nil
		dst.LogsAggregationMax = nil
		dst.LogsAggregationMin = nil
		dst.LogsAggregationPercentile = nil
		dst.LogsAggregationSum = nil

		return fmt.Errorf("data matches more than one schema in oneOf(LogsAggregation)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(LogsAggregation)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src LogsAggregation) MarshalJSON() ([]byte, error) {
	if src.LogsAggregationAverage != nil {
		return json.Marshal(&src.LogsAggregationAverage)
	}

	if src.LogsAggregationCount != nil {
		return json.Marshal(&src.LogsAggregationCount)
	}

	if src.LogsAggregationCountDistinct != nil {
		return json.Marshal(&src.LogsAggregationCountDistinct)
	}

	if src.LogsAggregationMax != nil {
		return json.Marshal(&src.LogsAggregationMax)
	}

	if src.LogsAggregationMin != nil {
		return json.Marshal(&src.LogsAggregationMin)
	}

	if src.LogsAggregationPercentile != nil {
		return json.Marshal(&src.LogsAggregationPercentile)
	}

	if src.LogsAggregationSum != nil {
		return json.Marshal(&src.LogsAggregationSum)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *LogsAggregation) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.LogsAggregationAverage != nil {
		return obj.LogsAggregationAverage
	}

	if obj.LogsAggregationCount != nil {
		return obj.LogsAggregationCount
	}

	if obj.LogsAggregationCountDistinct != nil {
		return obj.LogsAggregationCountDistinct
	}

	if obj.LogsAggregationMax != nil {
		return obj.LogsAggregationMax
	}

	if obj.LogsAggregationMin != nil {
		return obj.LogsAggregationMin
	}

	if obj.LogsAggregationPercentile != nil {
		return obj.LogsAggregationPercentile
	}

	if obj.LogsAggregationSum != nil {
		return obj.LogsAggregationSum
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj LogsAggregation) GetActualInstanceValue() (interface{}) {
	if obj.LogsAggregationAverage != nil {
		return *obj.LogsAggregationAverage
	}

	if obj.LogsAggregationCount != nil {
		return *obj.LogsAggregationCount
	}

	if obj.LogsAggregationCountDistinct != nil {
		return *obj.LogsAggregationCountDistinct
	}

	if obj.LogsAggregationMax != nil {
		return *obj.LogsAggregationMax
	}

	if obj.LogsAggregationMin != nil {
		return *obj.LogsAggregationMin
	}

	if obj.LogsAggregationPercentile != nil {
		return *obj.LogsAggregationPercentile
	}

	if obj.LogsAggregationSum != nil {
		return *obj.LogsAggregationSum
	}

	// all schemas are nil
	return nil
}

type NullableLogsAggregation struct {
	value *LogsAggregation
	isSet bool
}

func (v NullableLogsAggregation) Get() *LogsAggregation {
	return v.value
}

func (v *NullableLogsAggregation) Set(val *LogsAggregation) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsAggregation) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsAggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsAggregation(val *LogsAggregation) *NullableLogsAggregation {
	return &NullableLogsAggregation{value: val, isSet: true}
}

func (v NullableLogsAggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsAggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


