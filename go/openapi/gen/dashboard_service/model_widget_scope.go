/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// WidgetScope - struct for WidgetScope
type WidgetScope struct {
	WidgetScopeOneOf *WidgetScopeOneOf
	WidgetScopeOneOf1 *WidgetScopeOneOf1
}

// WidgetScopeOneOfAsWidgetScope is a convenience function that returns WidgetScopeOneOf wrapped in WidgetScope
func WidgetScopeOneOfAsWidgetScope(v *WidgetScopeOneOf) WidgetScope {
	return WidgetScope{
		WidgetScopeOneOf: v,
	}
}

// WidgetScopeOneOf1AsWidgetScope is a convenience function that returns WidgetScopeOneOf1 wrapped in WidgetScope
func WidgetScopeOneOf1AsWidgetScope(v *WidgetScopeOneOf1) WidgetScope {
	return WidgetScope{
		WidgetScopeOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *WidgetScope) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into WidgetScopeOneOf
	err = newStrictDecoder(data).Decode(&dst.WidgetScopeOneOf)
	if err == nil {
		jsonWidgetScopeOneOf, _ := json.Marshal(dst.WidgetScopeOneOf)
		if string(jsonWidgetScopeOneOf) == "{}" { // empty struct
			dst.WidgetScopeOneOf = nil
		} else {
			if err = validator.Validate(dst.WidgetScopeOneOf); err != nil {
				dst.WidgetScopeOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetScopeOneOf = nil
	}

	// try to unmarshal data into WidgetScopeOneOf1
	err = newStrictDecoder(data).Decode(&dst.WidgetScopeOneOf1)
	if err == nil {
		jsonWidgetScopeOneOf1, _ := json.Marshal(dst.WidgetScopeOneOf1)
		if string(jsonWidgetScopeOneOf1) == "{}" { // empty struct
			dst.WidgetScopeOneOf1 = nil
		} else {
			if err = validator.Validate(dst.WidgetScopeOneOf1); err != nil {
				dst.WidgetScopeOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetScopeOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.WidgetScopeOneOf = nil
		dst.WidgetScopeOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(WidgetScope)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(WidgetScope)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WidgetScope) MarshalJSON() ([]byte, error) {
	if src.WidgetScopeOneOf != nil {
		return json.Marshal(&src.WidgetScopeOneOf)
	}

	if src.WidgetScopeOneOf1 != nil {
		return json.Marshal(&src.WidgetScopeOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WidgetScope) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.WidgetScopeOneOf != nil {
		return obj.WidgetScopeOneOf
	}

	if obj.WidgetScopeOneOf1 != nil {
		return obj.WidgetScopeOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj WidgetScope) GetActualInstanceValue() (interface{}) {
	if obj.WidgetScopeOneOf != nil {
		return *obj.WidgetScopeOneOf
	}

	if obj.WidgetScopeOneOf1 != nil {
		return *obj.WidgetScopeOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableWidgetScope struct {
	value *WidgetScope
	isSet bool
}

func (v NullableWidgetScope) Get() *WidgetScope {
	return v.value
}

func (v *NullableWidgetScope) Set(val *WidgetScope) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetScope) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetScope(val *WidgetScope) *NullableWidgetScope {
	return &NullableWidgetScope{value: val, isSet: true}
}

func (v NullableWidgetScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


