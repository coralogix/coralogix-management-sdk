/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// WidgetScope - struct for WidgetScope
type WidgetScope struct {
	WidgetScopeAllWidgets *WidgetScopeAllWidgets
	WidgetScopeSpecificWidgets *WidgetScopeSpecificWidgets
}

// WidgetScopeAllWidgetsAsWidgetScope is a convenience function that returns WidgetScopeAllWidgets wrapped in WidgetScope
func WidgetScopeAllWidgetsAsWidgetScope(v *WidgetScopeAllWidgets) WidgetScope {
	return WidgetScope{
		WidgetScopeAllWidgets: v,
	}
}

// WidgetScopeSpecificWidgetsAsWidgetScope is a convenience function that returns WidgetScopeSpecificWidgets wrapped in WidgetScope
func WidgetScopeSpecificWidgetsAsWidgetScope(v *WidgetScopeSpecificWidgets) WidgetScope {
	return WidgetScope{
		WidgetScopeSpecificWidgets: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *WidgetScope) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into WidgetScopeAllWidgets
	err = newStrictDecoder(data).Decode(&dst.WidgetScopeAllWidgets)
	if err == nil {
		jsonWidgetScopeAllWidgets, _ := json.Marshal(dst.WidgetScopeAllWidgets)
		if string(jsonWidgetScopeAllWidgets) == "{}" { // empty struct
			dst.WidgetScopeAllWidgets = nil
		} else {
			if err = validator.Validate(dst.WidgetScopeAllWidgets); err != nil {
				dst.WidgetScopeAllWidgets = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetScopeAllWidgets = nil
	}

	// try to unmarshal data into WidgetScopeSpecificWidgets
	err = newStrictDecoder(data).Decode(&dst.WidgetScopeSpecificWidgets)
	if err == nil {
		jsonWidgetScopeSpecificWidgets, _ := json.Marshal(dst.WidgetScopeSpecificWidgets)
		if string(jsonWidgetScopeSpecificWidgets) == "{}" { // empty struct
			dst.WidgetScopeSpecificWidgets = nil
		} else {
			if err = validator.Validate(dst.WidgetScopeSpecificWidgets); err != nil {
				dst.WidgetScopeSpecificWidgets = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetScopeSpecificWidgets = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.WidgetScopeAllWidgets = nil
		dst.WidgetScopeSpecificWidgets = nil

		return fmt.Errorf("data matches more than one schema in oneOf(WidgetScope)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(WidgetScope)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WidgetScope) MarshalJSON() ([]byte, error) {
	if src.WidgetScopeAllWidgets != nil {
		return json.Marshal(&src.WidgetScopeAllWidgets)
	}

	if src.WidgetScopeSpecificWidgets != nil {
		return json.Marshal(&src.WidgetScopeSpecificWidgets)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WidgetScope) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.WidgetScopeAllWidgets != nil {
		return obj.WidgetScopeAllWidgets
	}

	if obj.WidgetScopeSpecificWidgets != nil {
		return obj.WidgetScopeSpecificWidgets
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj WidgetScope) GetActualInstanceValue() (interface{}) {
	if obj.WidgetScopeAllWidgets != nil {
		return *obj.WidgetScopeAllWidgets
	}

	if obj.WidgetScopeSpecificWidgets != nil {
		return *obj.WidgetScopeSpecificWidgets
	}

	// all schemas are nil
	return nil
}

type NullableWidgetScope struct {
	value *WidgetScope
	isSet bool
}

func (v NullableWidgetScope) Get() *WidgetScope {
	return v.value
}

func (v *NullableWidgetScope) Set(val *WidgetScope) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetScope) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetScope(val *WidgetScope) *NullableWidgetScope {
	return &NullableWidgetScope{value: val, isSet: true}
}

func (v NullableWidgetScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


