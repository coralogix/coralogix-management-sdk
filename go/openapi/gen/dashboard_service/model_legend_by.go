/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// LegendBy the model 'LegendBy'
type LegendBy string

// List of LegendBy
const (
	LEGENDBY_LEGEND_BY_UNSPECIFIED LegendBy = "LEGEND_BY_UNSPECIFIED"
	LEGENDBY_LEGEND_BY_THRESHOLDS LegendBy = "LEGEND_BY_THRESHOLDS"
	LEGENDBY_LEGEND_BY_GROUPS LegendBy = "LEGEND_BY_GROUPS"
)

// All allowed values of LegendBy enum
var AllowedLegendByEnumValues = []LegendBy{
	"LEGEND_BY_UNSPECIFIED",
	"LEGEND_BY_THRESHOLDS",
	"LEGEND_BY_GROUPS",
}

func (v *LegendBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LegendBy(value)
	for _, existing := range AllowedLegendByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LegendBy", value)
}

// NewLegendByFromValue returns a pointer to a valid LegendBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLegendByFromValue(v string) (*LegendBy, error) {
	ev := LegendBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LegendBy: valid values are %v", v, AllowedLegendByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LegendBy) IsValid() bool {
	for _, existing := range AllowedLegendByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LegendBy value
func (v LegendBy) Ptr() *LegendBy {
	return &v
}

type NullableLegendBy struct {
	value *LegendBy
	isSet bool
}

func (v NullableLegendBy) Get() *LegendBy {
	return v.value
}

func (v *NullableLegendBy) Set(val *LegendBy) {
	v.value = val
	v.isSet = true
}

func (v NullableLegendBy) IsSet() bool {
	return v.isSet
}

func (v *NullableLegendBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegendBy(val *LegendBy) *NullableLegendBy {
	return &NullableLegendBy{value: val, isSet: true}
}

func (v NullableLegendBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegendBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

