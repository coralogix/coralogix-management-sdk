/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Visualization - struct for Visualization
type Visualization struct {
	VisualizationOneOf *VisualizationOneOf
	VisualizationOneOf1 *VisualizationOneOf1
	VisualizationOneOf2 *VisualizationOneOf2
	VisualizationOneOf3 *VisualizationOneOf3
	VisualizationOneOf4 *VisualizationOneOf4
	VisualizationOneOf5 *VisualizationOneOf5
	VisualizationOneOf6 *VisualizationOneOf6
	VisualizationOneOf7 *VisualizationOneOf7
	VisualizationOneOf8 *VisualizationOneOf8
}

// VisualizationOneOfAsVisualization is a convenience function that returns VisualizationOneOf wrapped in Visualization
func VisualizationOneOfAsVisualization(v *VisualizationOneOf) Visualization {
	return Visualization{
		VisualizationOneOf: v,
	}
}

// VisualizationOneOf1AsVisualization is a convenience function that returns VisualizationOneOf1 wrapped in Visualization
func VisualizationOneOf1AsVisualization(v *VisualizationOneOf1) Visualization {
	return Visualization{
		VisualizationOneOf1: v,
	}
}

// VisualizationOneOf2AsVisualization is a convenience function that returns VisualizationOneOf2 wrapped in Visualization
func VisualizationOneOf2AsVisualization(v *VisualizationOneOf2) Visualization {
	return Visualization{
		VisualizationOneOf2: v,
	}
}

// VisualizationOneOf3AsVisualization is a convenience function that returns VisualizationOneOf3 wrapped in Visualization
func VisualizationOneOf3AsVisualization(v *VisualizationOneOf3) Visualization {
	return Visualization{
		VisualizationOneOf3: v,
	}
}

// VisualizationOneOf4AsVisualization is a convenience function that returns VisualizationOneOf4 wrapped in Visualization
func VisualizationOneOf4AsVisualization(v *VisualizationOneOf4) Visualization {
	return Visualization{
		VisualizationOneOf4: v,
	}
}

// VisualizationOneOf5AsVisualization is a convenience function that returns VisualizationOneOf5 wrapped in Visualization
func VisualizationOneOf5AsVisualization(v *VisualizationOneOf5) Visualization {
	return Visualization{
		VisualizationOneOf5: v,
	}
}

// VisualizationOneOf6AsVisualization is a convenience function that returns VisualizationOneOf6 wrapped in Visualization
func VisualizationOneOf6AsVisualization(v *VisualizationOneOf6) Visualization {
	return Visualization{
		VisualizationOneOf6: v,
	}
}

// VisualizationOneOf7AsVisualization is a convenience function that returns VisualizationOneOf7 wrapped in Visualization
func VisualizationOneOf7AsVisualization(v *VisualizationOneOf7) Visualization {
	return Visualization{
		VisualizationOneOf7: v,
	}
}

// VisualizationOneOf8AsVisualization is a convenience function that returns VisualizationOneOf8 wrapped in Visualization
func VisualizationOneOf8AsVisualization(v *VisualizationOneOf8) Visualization {
	return Visualization{
		VisualizationOneOf8: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Visualization) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into VisualizationOneOf
	err = newStrictDecoder(data).Decode(&dst.VisualizationOneOf)
	if err == nil {
		jsonVisualizationOneOf, _ := json.Marshal(dst.VisualizationOneOf)
		if string(jsonVisualizationOneOf) == "{}" { // empty struct
			dst.VisualizationOneOf = nil
		} else {
			if err = validator.Validate(dst.VisualizationOneOf); err != nil {
				dst.VisualizationOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.VisualizationOneOf = nil
	}

	// try to unmarshal data into VisualizationOneOf1
	err = newStrictDecoder(data).Decode(&dst.VisualizationOneOf1)
	if err == nil {
		jsonVisualizationOneOf1, _ := json.Marshal(dst.VisualizationOneOf1)
		if string(jsonVisualizationOneOf1) == "{}" { // empty struct
			dst.VisualizationOneOf1 = nil
		} else {
			if err = validator.Validate(dst.VisualizationOneOf1); err != nil {
				dst.VisualizationOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.VisualizationOneOf1 = nil
	}

	// try to unmarshal data into VisualizationOneOf2
	err = newStrictDecoder(data).Decode(&dst.VisualizationOneOf2)
	if err == nil {
		jsonVisualizationOneOf2, _ := json.Marshal(dst.VisualizationOneOf2)
		if string(jsonVisualizationOneOf2) == "{}" { // empty struct
			dst.VisualizationOneOf2 = nil
		} else {
			if err = validator.Validate(dst.VisualizationOneOf2); err != nil {
				dst.VisualizationOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.VisualizationOneOf2 = nil
	}

	// try to unmarshal data into VisualizationOneOf3
	err = newStrictDecoder(data).Decode(&dst.VisualizationOneOf3)
	if err == nil {
		jsonVisualizationOneOf3, _ := json.Marshal(dst.VisualizationOneOf3)
		if string(jsonVisualizationOneOf3) == "{}" { // empty struct
			dst.VisualizationOneOf3 = nil
		} else {
			if err = validator.Validate(dst.VisualizationOneOf3); err != nil {
				dst.VisualizationOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.VisualizationOneOf3 = nil
	}

	// try to unmarshal data into VisualizationOneOf4
	err = newStrictDecoder(data).Decode(&dst.VisualizationOneOf4)
	if err == nil {
		jsonVisualizationOneOf4, _ := json.Marshal(dst.VisualizationOneOf4)
		if string(jsonVisualizationOneOf4) == "{}" { // empty struct
			dst.VisualizationOneOf4 = nil
		} else {
			if err = validator.Validate(dst.VisualizationOneOf4); err != nil {
				dst.VisualizationOneOf4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.VisualizationOneOf4 = nil
	}

	// try to unmarshal data into VisualizationOneOf5
	err = newStrictDecoder(data).Decode(&dst.VisualizationOneOf5)
	if err == nil {
		jsonVisualizationOneOf5, _ := json.Marshal(dst.VisualizationOneOf5)
		if string(jsonVisualizationOneOf5) == "{}" { // empty struct
			dst.VisualizationOneOf5 = nil
		} else {
			if err = validator.Validate(dst.VisualizationOneOf5); err != nil {
				dst.VisualizationOneOf5 = nil
			} else {
				match++
			}
		}
	} else {
		dst.VisualizationOneOf5 = nil
	}

	// try to unmarshal data into VisualizationOneOf6
	err = newStrictDecoder(data).Decode(&dst.VisualizationOneOf6)
	if err == nil {
		jsonVisualizationOneOf6, _ := json.Marshal(dst.VisualizationOneOf6)
		if string(jsonVisualizationOneOf6) == "{}" { // empty struct
			dst.VisualizationOneOf6 = nil
		} else {
			if err = validator.Validate(dst.VisualizationOneOf6); err != nil {
				dst.VisualizationOneOf6 = nil
			} else {
				match++
			}
		}
	} else {
		dst.VisualizationOneOf6 = nil
	}

	// try to unmarshal data into VisualizationOneOf7
	err = newStrictDecoder(data).Decode(&dst.VisualizationOneOf7)
	if err == nil {
		jsonVisualizationOneOf7, _ := json.Marshal(dst.VisualizationOneOf7)
		if string(jsonVisualizationOneOf7) == "{}" { // empty struct
			dst.VisualizationOneOf7 = nil
		} else {
			if err = validator.Validate(dst.VisualizationOneOf7); err != nil {
				dst.VisualizationOneOf7 = nil
			} else {
				match++
			}
		}
	} else {
		dst.VisualizationOneOf7 = nil
	}

	// try to unmarshal data into VisualizationOneOf8
	err = newStrictDecoder(data).Decode(&dst.VisualizationOneOf8)
	if err == nil {
		jsonVisualizationOneOf8, _ := json.Marshal(dst.VisualizationOneOf8)
		if string(jsonVisualizationOneOf8) == "{}" { // empty struct
			dst.VisualizationOneOf8 = nil
		} else {
			if err = validator.Validate(dst.VisualizationOneOf8); err != nil {
				dst.VisualizationOneOf8 = nil
			} else {
				match++
			}
		}
	} else {
		dst.VisualizationOneOf8 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.VisualizationOneOf = nil
		dst.VisualizationOneOf1 = nil
		dst.VisualizationOneOf2 = nil
		dst.VisualizationOneOf3 = nil
		dst.VisualizationOneOf4 = nil
		dst.VisualizationOneOf5 = nil
		dst.VisualizationOneOf6 = nil
		dst.VisualizationOneOf7 = nil
		dst.VisualizationOneOf8 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Visualization)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Visualization)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Visualization) MarshalJSON() ([]byte, error) {
	if src.VisualizationOneOf != nil {
		return json.Marshal(&src.VisualizationOneOf)
	}

	if src.VisualizationOneOf1 != nil {
		return json.Marshal(&src.VisualizationOneOf1)
	}

	if src.VisualizationOneOf2 != nil {
		return json.Marshal(&src.VisualizationOneOf2)
	}

	if src.VisualizationOneOf3 != nil {
		return json.Marshal(&src.VisualizationOneOf3)
	}

	if src.VisualizationOneOf4 != nil {
		return json.Marshal(&src.VisualizationOneOf4)
	}

	if src.VisualizationOneOf5 != nil {
		return json.Marshal(&src.VisualizationOneOf5)
	}

	if src.VisualizationOneOf6 != nil {
		return json.Marshal(&src.VisualizationOneOf6)
	}

	if src.VisualizationOneOf7 != nil {
		return json.Marshal(&src.VisualizationOneOf7)
	}

	if src.VisualizationOneOf8 != nil {
		return json.Marshal(&src.VisualizationOneOf8)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Visualization) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.VisualizationOneOf != nil {
		return obj.VisualizationOneOf
	}

	if obj.VisualizationOneOf1 != nil {
		return obj.VisualizationOneOf1
	}

	if obj.VisualizationOneOf2 != nil {
		return obj.VisualizationOneOf2
	}

	if obj.VisualizationOneOf3 != nil {
		return obj.VisualizationOneOf3
	}

	if obj.VisualizationOneOf4 != nil {
		return obj.VisualizationOneOf4
	}

	if obj.VisualizationOneOf5 != nil {
		return obj.VisualizationOneOf5
	}

	if obj.VisualizationOneOf6 != nil {
		return obj.VisualizationOneOf6
	}

	if obj.VisualizationOneOf7 != nil {
		return obj.VisualizationOneOf7
	}

	if obj.VisualizationOneOf8 != nil {
		return obj.VisualizationOneOf8
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Visualization) GetActualInstanceValue() (interface{}) {
	if obj.VisualizationOneOf != nil {
		return *obj.VisualizationOneOf
	}

	if obj.VisualizationOneOf1 != nil {
		return *obj.VisualizationOneOf1
	}

	if obj.VisualizationOneOf2 != nil {
		return *obj.VisualizationOneOf2
	}

	if obj.VisualizationOneOf3 != nil {
		return *obj.VisualizationOneOf3
	}

	if obj.VisualizationOneOf4 != nil {
		return *obj.VisualizationOneOf4
	}

	if obj.VisualizationOneOf5 != nil {
		return *obj.VisualizationOneOf5
	}

	if obj.VisualizationOneOf6 != nil {
		return *obj.VisualizationOneOf6
	}

	if obj.VisualizationOneOf7 != nil {
		return *obj.VisualizationOneOf7
	}

	if obj.VisualizationOneOf8 != nil {
		return *obj.VisualizationOneOf8
	}

	// all schemas are nil
	return nil
}

type NullableVisualization struct {
	value *Visualization
	isSet bool
}

func (v NullableVisualization) Get() *Visualization {
	return v.value
}

func (v *NullableVisualization) Set(val *Visualization) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualization) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualization(val *Visualization) *NullableVisualization {
	return &NullableVisualization{value: val, isSet: true}
}

func (v NullableVisualization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


