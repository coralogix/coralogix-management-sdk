/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Visualization - struct for Visualization
type Visualization struct {
	VisualizationGauge *VisualizationGauge
	VisualizationHexagonBins *VisualizationHexagonBins
	VisualizationHorizontalBars *VisualizationHorizontalBars
	VisualizationPieChart *VisualizationPieChart
	VisualizationStat *VisualizationStat
	VisualizationTable *VisualizationTable
	VisualizationTimeSeriesBars *VisualizationTimeSeriesBars
	VisualizationTimeSeriesLines *VisualizationTimeSeriesLines
	VisualizationVerticalBars *VisualizationVerticalBars
}

// VisualizationGaugeAsVisualization is a convenience function that returns VisualizationGauge wrapped in Visualization
func VisualizationGaugeAsVisualization(v *VisualizationGauge) Visualization {
	return Visualization{
		VisualizationGauge: v,
	}
}

// VisualizationHexagonBinsAsVisualization is a convenience function that returns VisualizationHexagonBins wrapped in Visualization
func VisualizationHexagonBinsAsVisualization(v *VisualizationHexagonBins) Visualization {
	return Visualization{
		VisualizationHexagonBins: v,
	}
}

// VisualizationHorizontalBarsAsVisualization is a convenience function that returns VisualizationHorizontalBars wrapped in Visualization
func VisualizationHorizontalBarsAsVisualization(v *VisualizationHorizontalBars) Visualization {
	return Visualization{
		VisualizationHorizontalBars: v,
	}
}

// VisualizationPieChartAsVisualization is a convenience function that returns VisualizationPieChart wrapped in Visualization
func VisualizationPieChartAsVisualization(v *VisualizationPieChart) Visualization {
	return Visualization{
		VisualizationPieChart: v,
	}
}

// VisualizationStatAsVisualization is a convenience function that returns VisualizationStat wrapped in Visualization
func VisualizationStatAsVisualization(v *VisualizationStat) Visualization {
	return Visualization{
		VisualizationStat: v,
	}
}

// VisualizationTableAsVisualization is a convenience function that returns VisualizationTable wrapped in Visualization
func VisualizationTableAsVisualization(v *VisualizationTable) Visualization {
	return Visualization{
		VisualizationTable: v,
	}
}

// VisualizationTimeSeriesBarsAsVisualization is a convenience function that returns VisualizationTimeSeriesBars wrapped in Visualization
func VisualizationTimeSeriesBarsAsVisualization(v *VisualizationTimeSeriesBars) Visualization {
	return Visualization{
		VisualizationTimeSeriesBars: v,
	}
}

// VisualizationTimeSeriesLinesAsVisualization is a convenience function that returns VisualizationTimeSeriesLines wrapped in Visualization
func VisualizationTimeSeriesLinesAsVisualization(v *VisualizationTimeSeriesLines) Visualization {
	return Visualization{
		VisualizationTimeSeriesLines: v,
	}
}

// VisualizationVerticalBarsAsVisualization is a convenience function that returns VisualizationVerticalBars wrapped in Visualization
func VisualizationVerticalBarsAsVisualization(v *VisualizationVerticalBars) Visualization {
	return Visualization{
		VisualizationVerticalBars: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Visualization) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into VisualizationGauge
	err = newStrictDecoder(data).Decode(&dst.VisualizationGauge)
	if err == nil {
		jsonVisualizationGauge, _ := json.Marshal(dst.VisualizationGauge)
		if string(jsonVisualizationGauge) == "{}" { // empty struct
			dst.VisualizationGauge = nil
		} else {
			if err = validator.Validate(dst.VisualizationGauge); err != nil {
				dst.VisualizationGauge = nil
			} else {
				match++
			}
		}
	} else {
		dst.VisualizationGauge = nil
	}

	// try to unmarshal data into VisualizationHexagonBins
	err = newStrictDecoder(data).Decode(&dst.VisualizationHexagonBins)
	if err == nil {
		jsonVisualizationHexagonBins, _ := json.Marshal(dst.VisualizationHexagonBins)
		if string(jsonVisualizationHexagonBins) == "{}" { // empty struct
			dst.VisualizationHexagonBins = nil
		} else {
			if err = validator.Validate(dst.VisualizationHexagonBins); err != nil {
				dst.VisualizationHexagonBins = nil
			} else {
				match++
			}
		}
	} else {
		dst.VisualizationHexagonBins = nil
	}

	// try to unmarshal data into VisualizationHorizontalBars
	err = newStrictDecoder(data).Decode(&dst.VisualizationHorizontalBars)
	if err == nil {
		jsonVisualizationHorizontalBars, _ := json.Marshal(dst.VisualizationHorizontalBars)
		if string(jsonVisualizationHorizontalBars) == "{}" { // empty struct
			dst.VisualizationHorizontalBars = nil
		} else {
			if err = validator.Validate(dst.VisualizationHorizontalBars); err != nil {
				dst.VisualizationHorizontalBars = nil
			} else {
				match++
			}
		}
	} else {
		dst.VisualizationHorizontalBars = nil
	}

	// try to unmarshal data into VisualizationPieChart
	err = newStrictDecoder(data).Decode(&dst.VisualizationPieChart)
	if err == nil {
		jsonVisualizationPieChart, _ := json.Marshal(dst.VisualizationPieChart)
		if string(jsonVisualizationPieChart) == "{}" { // empty struct
			dst.VisualizationPieChart = nil
		} else {
			if err = validator.Validate(dst.VisualizationPieChart); err != nil {
				dst.VisualizationPieChart = nil
			} else {
				match++
			}
		}
	} else {
		dst.VisualizationPieChart = nil
	}

	// try to unmarshal data into VisualizationStat
	err = newStrictDecoder(data).Decode(&dst.VisualizationStat)
	if err == nil {
		jsonVisualizationStat, _ := json.Marshal(dst.VisualizationStat)
		if string(jsonVisualizationStat) == "{}" { // empty struct
			dst.VisualizationStat = nil
		} else {
			if err = validator.Validate(dst.VisualizationStat); err != nil {
				dst.VisualizationStat = nil
			} else {
				match++
			}
		}
	} else {
		dst.VisualizationStat = nil
	}

	// try to unmarshal data into VisualizationTable
	err = newStrictDecoder(data).Decode(&dst.VisualizationTable)
	if err == nil {
		jsonVisualizationTable, _ := json.Marshal(dst.VisualizationTable)
		if string(jsonVisualizationTable) == "{}" { // empty struct
			dst.VisualizationTable = nil
		} else {
			if err = validator.Validate(dst.VisualizationTable); err != nil {
				dst.VisualizationTable = nil
			} else {
				match++
			}
		}
	} else {
		dst.VisualizationTable = nil
	}

	// try to unmarshal data into VisualizationTimeSeriesBars
	err = newStrictDecoder(data).Decode(&dst.VisualizationTimeSeriesBars)
	if err == nil {
		jsonVisualizationTimeSeriesBars, _ := json.Marshal(dst.VisualizationTimeSeriesBars)
		if string(jsonVisualizationTimeSeriesBars) == "{}" { // empty struct
			dst.VisualizationTimeSeriesBars = nil
		} else {
			if err = validator.Validate(dst.VisualizationTimeSeriesBars); err != nil {
				dst.VisualizationTimeSeriesBars = nil
			} else {
				match++
			}
		}
	} else {
		dst.VisualizationTimeSeriesBars = nil
	}

	// try to unmarshal data into VisualizationTimeSeriesLines
	err = newStrictDecoder(data).Decode(&dst.VisualizationTimeSeriesLines)
	if err == nil {
		jsonVisualizationTimeSeriesLines, _ := json.Marshal(dst.VisualizationTimeSeriesLines)
		if string(jsonVisualizationTimeSeriesLines) == "{}" { // empty struct
			dst.VisualizationTimeSeriesLines = nil
		} else {
			if err = validator.Validate(dst.VisualizationTimeSeriesLines); err != nil {
				dst.VisualizationTimeSeriesLines = nil
			} else {
				match++
			}
		}
	} else {
		dst.VisualizationTimeSeriesLines = nil
	}

	// try to unmarshal data into VisualizationVerticalBars
	err = newStrictDecoder(data).Decode(&dst.VisualizationVerticalBars)
	if err == nil {
		jsonVisualizationVerticalBars, _ := json.Marshal(dst.VisualizationVerticalBars)
		if string(jsonVisualizationVerticalBars) == "{}" { // empty struct
			dst.VisualizationVerticalBars = nil
		} else {
			if err = validator.Validate(dst.VisualizationVerticalBars); err != nil {
				dst.VisualizationVerticalBars = nil
			} else {
				match++
			}
		}
	} else {
		dst.VisualizationVerticalBars = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.VisualizationGauge = nil
		dst.VisualizationHexagonBins = nil
		dst.VisualizationHorizontalBars = nil
		dst.VisualizationPieChart = nil
		dst.VisualizationStat = nil
		dst.VisualizationTable = nil
		dst.VisualizationTimeSeriesBars = nil
		dst.VisualizationTimeSeriesLines = nil
		dst.VisualizationVerticalBars = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Visualization)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Visualization)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Visualization) MarshalJSON() ([]byte, error) {
	if src.VisualizationGauge != nil {
		return json.Marshal(&src.VisualizationGauge)
	}

	if src.VisualizationHexagonBins != nil {
		return json.Marshal(&src.VisualizationHexagonBins)
	}

	if src.VisualizationHorizontalBars != nil {
		return json.Marshal(&src.VisualizationHorizontalBars)
	}

	if src.VisualizationPieChart != nil {
		return json.Marshal(&src.VisualizationPieChart)
	}

	if src.VisualizationStat != nil {
		return json.Marshal(&src.VisualizationStat)
	}

	if src.VisualizationTable != nil {
		return json.Marshal(&src.VisualizationTable)
	}

	if src.VisualizationTimeSeriesBars != nil {
		return json.Marshal(&src.VisualizationTimeSeriesBars)
	}

	if src.VisualizationTimeSeriesLines != nil {
		return json.Marshal(&src.VisualizationTimeSeriesLines)
	}

	if src.VisualizationVerticalBars != nil {
		return json.Marshal(&src.VisualizationVerticalBars)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Visualization) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.VisualizationGauge != nil {
		return obj.VisualizationGauge
	}

	if obj.VisualizationHexagonBins != nil {
		return obj.VisualizationHexagonBins
	}

	if obj.VisualizationHorizontalBars != nil {
		return obj.VisualizationHorizontalBars
	}

	if obj.VisualizationPieChart != nil {
		return obj.VisualizationPieChart
	}

	if obj.VisualizationStat != nil {
		return obj.VisualizationStat
	}

	if obj.VisualizationTable != nil {
		return obj.VisualizationTable
	}

	if obj.VisualizationTimeSeriesBars != nil {
		return obj.VisualizationTimeSeriesBars
	}

	if obj.VisualizationTimeSeriesLines != nil {
		return obj.VisualizationTimeSeriesLines
	}

	if obj.VisualizationVerticalBars != nil {
		return obj.VisualizationVerticalBars
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Visualization) GetActualInstanceValue() (interface{}) {
	if obj.VisualizationGauge != nil {
		return *obj.VisualizationGauge
	}

	if obj.VisualizationHexagonBins != nil {
		return *obj.VisualizationHexagonBins
	}

	if obj.VisualizationHorizontalBars != nil {
		return *obj.VisualizationHorizontalBars
	}

	if obj.VisualizationPieChart != nil {
		return *obj.VisualizationPieChart
	}

	if obj.VisualizationStat != nil {
		return *obj.VisualizationStat
	}

	if obj.VisualizationTable != nil {
		return *obj.VisualizationTable
	}

	if obj.VisualizationTimeSeriesBars != nil {
		return *obj.VisualizationTimeSeriesBars
	}

	if obj.VisualizationTimeSeriesLines != nil {
		return *obj.VisualizationTimeSeriesLines
	}

	if obj.VisualizationVerticalBars != nil {
		return *obj.VisualizationVerticalBars
	}

	// all schemas are nil
	return nil
}

type NullableVisualization struct {
	value *Visualization
	isSet bool
}

func (v NullableVisualization) Get() *Visualization {
	return v.value
}

func (v *NullableVisualization) Set(val *Visualization) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualization) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualization(val *Visualization) *NullableVisualization {
	return &NullableVisualization{value: val, isSet: true}
}

func (v NullableVisualization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


