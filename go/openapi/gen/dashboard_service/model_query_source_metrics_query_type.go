/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// QuerySourceMetricsQueryType - struct for QuerySourceMetricsQueryType
type QuerySourceMetricsQueryType struct {
	QuerySourceMetricsQueryTypeLabelName *QuerySourceMetricsQueryTypeLabelName
	QuerySourceMetricsQueryTypeLabelValue *QuerySourceMetricsQueryTypeLabelValue
	QuerySourceMetricsQueryTypeMetricName *QuerySourceMetricsQueryTypeMetricName
}

// QuerySourceMetricsQueryTypeLabelNameAsQuerySourceMetricsQueryType is a convenience function that returns QuerySourceMetricsQueryTypeLabelName wrapped in QuerySourceMetricsQueryType
func QuerySourceMetricsQueryTypeLabelNameAsQuerySourceMetricsQueryType(v *QuerySourceMetricsQueryTypeLabelName) QuerySourceMetricsQueryType {
	return QuerySourceMetricsQueryType{
		QuerySourceMetricsQueryTypeLabelName: v,
	}
}

// QuerySourceMetricsQueryTypeLabelValueAsQuerySourceMetricsQueryType is a convenience function that returns QuerySourceMetricsQueryTypeLabelValue wrapped in QuerySourceMetricsQueryType
func QuerySourceMetricsQueryTypeLabelValueAsQuerySourceMetricsQueryType(v *QuerySourceMetricsQueryTypeLabelValue) QuerySourceMetricsQueryType {
	return QuerySourceMetricsQueryType{
		QuerySourceMetricsQueryTypeLabelValue: v,
	}
}

// QuerySourceMetricsQueryTypeMetricNameAsQuerySourceMetricsQueryType is a convenience function that returns QuerySourceMetricsQueryTypeMetricName wrapped in QuerySourceMetricsQueryType
func QuerySourceMetricsQueryTypeMetricNameAsQuerySourceMetricsQueryType(v *QuerySourceMetricsQueryTypeMetricName) QuerySourceMetricsQueryType {
	return QuerySourceMetricsQueryType{
		QuerySourceMetricsQueryTypeMetricName: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *QuerySourceMetricsQueryType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into QuerySourceMetricsQueryTypeLabelName
	err = newStrictDecoder(data).Decode(&dst.QuerySourceMetricsQueryTypeLabelName)
	if err == nil {
		jsonQuerySourceMetricsQueryTypeLabelName, _ := json.Marshal(dst.QuerySourceMetricsQueryTypeLabelName)
		if string(jsonQuerySourceMetricsQueryTypeLabelName) == "{}" { // empty struct
			dst.QuerySourceMetricsQueryTypeLabelName = nil
		} else {
			if err = validator.Validate(dst.QuerySourceMetricsQueryTypeLabelName); err != nil {
				dst.QuerySourceMetricsQueryTypeLabelName = nil
			} else {
				match++
			}
		}
	} else {
		dst.QuerySourceMetricsQueryTypeLabelName = nil
	}

	// try to unmarshal data into QuerySourceMetricsQueryTypeLabelValue
	err = newStrictDecoder(data).Decode(&dst.QuerySourceMetricsQueryTypeLabelValue)
	if err == nil {
		jsonQuerySourceMetricsQueryTypeLabelValue, _ := json.Marshal(dst.QuerySourceMetricsQueryTypeLabelValue)
		if string(jsonQuerySourceMetricsQueryTypeLabelValue) == "{}" { // empty struct
			dst.QuerySourceMetricsQueryTypeLabelValue = nil
		} else {
			if err = validator.Validate(dst.QuerySourceMetricsQueryTypeLabelValue); err != nil {
				dst.QuerySourceMetricsQueryTypeLabelValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.QuerySourceMetricsQueryTypeLabelValue = nil
	}

	// try to unmarshal data into QuerySourceMetricsQueryTypeMetricName
	err = newStrictDecoder(data).Decode(&dst.QuerySourceMetricsQueryTypeMetricName)
	if err == nil {
		jsonQuerySourceMetricsQueryTypeMetricName, _ := json.Marshal(dst.QuerySourceMetricsQueryTypeMetricName)
		if string(jsonQuerySourceMetricsQueryTypeMetricName) == "{}" { // empty struct
			dst.QuerySourceMetricsQueryTypeMetricName = nil
		} else {
			if err = validator.Validate(dst.QuerySourceMetricsQueryTypeMetricName); err != nil {
				dst.QuerySourceMetricsQueryTypeMetricName = nil
			} else {
				match++
			}
		}
	} else {
		dst.QuerySourceMetricsQueryTypeMetricName = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.QuerySourceMetricsQueryTypeLabelName = nil
		dst.QuerySourceMetricsQueryTypeLabelValue = nil
		dst.QuerySourceMetricsQueryTypeMetricName = nil

		return fmt.Errorf("data matches more than one schema in oneOf(QuerySourceMetricsQueryType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(QuerySourceMetricsQueryType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src QuerySourceMetricsQueryType) MarshalJSON() ([]byte, error) {
	if src.QuerySourceMetricsQueryTypeLabelName != nil {
		return json.Marshal(&src.QuerySourceMetricsQueryTypeLabelName)
	}

	if src.QuerySourceMetricsQueryTypeLabelValue != nil {
		return json.Marshal(&src.QuerySourceMetricsQueryTypeLabelValue)
	}

	if src.QuerySourceMetricsQueryTypeMetricName != nil {
		return json.Marshal(&src.QuerySourceMetricsQueryTypeMetricName)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *QuerySourceMetricsQueryType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.QuerySourceMetricsQueryTypeLabelName != nil {
		return obj.QuerySourceMetricsQueryTypeLabelName
	}

	if obj.QuerySourceMetricsQueryTypeLabelValue != nil {
		return obj.QuerySourceMetricsQueryTypeLabelValue
	}

	if obj.QuerySourceMetricsQueryTypeMetricName != nil {
		return obj.QuerySourceMetricsQueryTypeMetricName
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj QuerySourceMetricsQueryType) GetActualInstanceValue() (interface{}) {
	if obj.QuerySourceMetricsQueryTypeLabelName != nil {
		return *obj.QuerySourceMetricsQueryTypeLabelName
	}

	if obj.QuerySourceMetricsQueryTypeLabelValue != nil {
		return *obj.QuerySourceMetricsQueryTypeLabelValue
	}

	if obj.QuerySourceMetricsQueryTypeMetricName != nil {
		return *obj.QuerySourceMetricsQueryTypeMetricName
	}

	// all schemas are nil
	return nil
}

type NullableQuerySourceMetricsQueryType struct {
	value *QuerySourceMetricsQueryType
	isSet bool
}

func (v NullableQuerySourceMetricsQueryType) Get() *QuerySourceMetricsQueryType {
	return v.value
}

func (v *NullableQuerySourceMetricsQueryType) Set(val *QuerySourceMetricsQueryType) {
	v.value = val
	v.isSet = true
}

func (v NullableQuerySourceMetricsQueryType) IsSet() bool {
	return v.isSet
}

func (v *NullableQuerySourceMetricsQueryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuerySourceMetricsQueryType(val *QuerySourceMetricsQueryType) *NullableQuerySourceMetricsQueryType {
	return &NullableQuerySourceMetricsQueryType{value: val, isSet: true}
}

func (v NullableQuerySourceMetricsQueryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuerySourceMetricsQueryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


