/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// QuerySourceMetricsQueryType - struct for QuerySourceMetricsQueryType
type QuerySourceMetricsQueryType struct {
	QuerySourceMetricsQueryTypeOneOf *QuerySourceMetricsQueryTypeOneOf
	QuerySourceMetricsQueryTypeOneOf1 *QuerySourceMetricsQueryTypeOneOf1
	QuerySourceMetricsQueryTypeOneOf2 *QuerySourceMetricsQueryTypeOneOf2
}

// QuerySourceMetricsQueryTypeOneOfAsQuerySourceMetricsQueryType is a convenience function that returns QuerySourceMetricsQueryTypeOneOf wrapped in QuerySourceMetricsQueryType
func QuerySourceMetricsQueryTypeOneOfAsQuerySourceMetricsQueryType(v *QuerySourceMetricsQueryTypeOneOf) QuerySourceMetricsQueryType {
	return QuerySourceMetricsQueryType{
		QuerySourceMetricsQueryTypeOneOf: v,
	}
}

// QuerySourceMetricsQueryTypeOneOf1AsQuerySourceMetricsQueryType is a convenience function that returns QuerySourceMetricsQueryTypeOneOf1 wrapped in QuerySourceMetricsQueryType
func QuerySourceMetricsQueryTypeOneOf1AsQuerySourceMetricsQueryType(v *QuerySourceMetricsQueryTypeOneOf1) QuerySourceMetricsQueryType {
	return QuerySourceMetricsQueryType{
		QuerySourceMetricsQueryTypeOneOf1: v,
	}
}

// QuerySourceMetricsQueryTypeOneOf2AsQuerySourceMetricsQueryType is a convenience function that returns QuerySourceMetricsQueryTypeOneOf2 wrapped in QuerySourceMetricsQueryType
func QuerySourceMetricsQueryTypeOneOf2AsQuerySourceMetricsQueryType(v *QuerySourceMetricsQueryTypeOneOf2) QuerySourceMetricsQueryType {
	return QuerySourceMetricsQueryType{
		QuerySourceMetricsQueryTypeOneOf2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *QuerySourceMetricsQueryType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into QuerySourceMetricsQueryTypeOneOf
	err = newStrictDecoder(data).Decode(&dst.QuerySourceMetricsQueryTypeOneOf)
	if err == nil {
		jsonQuerySourceMetricsQueryTypeOneOf, _ := json.Marshal(dst.QuerySourceMetricsQueryTypeOneOf)
		if string(jsonQuerySourceMetricsQueryTypeOneOf) == "{}" { // empty struct
			dst.QuerySourceMetricsQueryTypeOneOf = nil
		} else {
			if err = validator.Validate(dst.QuerySourceMetricsQueryTypeOneOf); err != nil {
				dst.QuerySourceMetricsQueryTypeOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.QuerySourceMetricsQueryTypeOneOf = nil
	}

	// try to unmarshal data into QuerySourceMetricsQueryTypeOneOf1
	err = newStrictDecoder(data).Decode(&dst.QuerySourceMetricsQueryTypeOneOf1)
	if err == nil {
		jsonQuerySourceMetricsQueryTypeOneOf1, _ := json.Marshal(dst.QuerySourceMetricsQueryTypeOneOf1)
		if string(jsonQuerySourceMetricsQueryTypeOneOf1) == "{}" { // empty struct
			dst.QuerySourceMetricsQueryTypeOneOf1 = nil
		} else {
			if err = validator.Validate(dst.QuerySourceMetricsQueryTypeOneOf1); err != nil {
				dst.QuerySourceMetricsQueryTypeOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.QuerySourceMetricsQueryTypeOneOf1 = nil
	}

	// try to unmarshal data into QuerySourceMetricsQueryTypeOneOf2
	err = newStrictDecoder(data).Decode(&dst.QuerySourceMetricsQueryTypeOneOf2)
	if err == nil {
		jsonQuerySourceMetricsQueryTypeOneOf2, _ := json.Marshal(dst.QuerySourceMetricsQueryTypeOneOf2)
		if string(jsonQuerySourceMetricsQueryTypeOneOf2) == "{}" { // empty struct
			dst.QuerySourceMetricsQueryTypeOneOf2 = nil
		} else {
			if err = validator.Validate(dst.QuerySourceMetricsQueryTypeOneOf2); err != nil {
				dst.QuerySourceMetricsQueryTypeOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.QuerySourceMetricsQueryTypeOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.QuerySourceMetricsQueryTypeOneOf = nil
		dst.QuerySourceMetricsQueryTypeOneOf1 = nil
		dst.QuerySourceMetricsQueryTypeOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(QuerySourceMetricsQueryType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(QuerySourceMetricsQueryType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src QuerySourceMetricsQueryType) MarshalJSON() ([]byte, error) {
	if src.QuerySourceMetricsQueryTypeOneOf != nil {
		return json.Marshal(&src.QuerySourceMetricsQueryTypeOneOf)
	}

	if src.QuerySourceMetricsQueryTypeOneOf1 != nil {
		return json.Marshal(&src.QuerySourceMetricsQueryTypeOneOf1)
	}

	if src.QuerySourceMetricsQueryTypeOneOf2 != nil {
		return json.Marshal(&src.QuerySourceMetricsQueryTypeOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *QuerySourceMetricsQueryType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.QuerySourceMetricsQueryTypeOneOf != nil {
		return obj.QuerySourceMetricsQueryTypeOneOf
	}

	if obj.QuerySourceMetricsQueryTypeOneOf1 != nil {
		return obj.QuerySourceMetricsQueryTypeOneOf1
	}

	if obj.QuerySourceMetricsQueryTypeOneOf2 != nil {
		return obj.QuerySourceMetricsQueryTypeOneOf2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj QuerySourceMetricsQueryType) GetActualInstanceValue() (interface{}) {
	if obj.QuerySourceMetricsQueryTypeOneOf != nil {
		return *obj.QuerySourceMetricsQueryTypeOneOf
	}

	if obj.QuerySourceMetricsQueryTypeOneOf1 != nil {
		return *obj.QuerySourceMetricsQueryTypeOneOf1
	}

	if obj.QuerySourceMetricsQueryTypeOneOf2 != nil {
		return *obj.QuerySourceMetricsQueryTypeOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableQuerySourceMetricsQueryType struct {
	value *QuerySourceMetricsQueryType
	isSet bool
}

func (v NullableQuerySourceMetricsQueryType) Get() *QuerySourceMetricsQueryType {
	return v.value
}

func (v *NullableQuerySourceMetricsQueryType) Set(val *QuerySourceMetricsQueryType) {
	v.value = val
	v.isSet = true
}

func (v NullableQuerySourceMetricsQueryType) IsSet() bool {
	return v.isSet
}

func (v *NullableQuerySourceMetricsQueryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuerySourceMetricsQueryType(val *QuerySourceMetricsQueryType) *NullableQuerySourceMetricsQueryType {
	return &NullableQuerySourceMetricsQueryType{value: val, isSet: true}
}

func (v NullableQuerySourceMetricsQueryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuerySourceMetricsQueryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


