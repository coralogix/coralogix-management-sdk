/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the DataprimeQueryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataprimeQueryType{}

// DataprimeQueryType struct for DataprimeQueryType
type DataprimeQueryType struct {
	QueryText *QueryText `json:"queryText,omitempty"`
}

// NewDataprimeQueryType instantiates a new DataprimeQueryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataprimeQueryType() *DataprimeQueryType {
	this := DataprimeQueryType{}
	return &this
}

// NewDataprimeQueryTypeWithDefaults instantiates a new DataprimeQueryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataprimeQueryTypeWithDefaults() *DataprimeQueryType {
	this := DataprimeQueryType{}
	return &this
}

// GetQueryText returns the QueryText field value if set, zero value otherwise.
func (o *DataprimeQueryType) GetQueryText() QueryText {
	if o == nil || IsNil(o.QueryText) {
		var ret QueryText
		return ret
	}
	return *o.QueryText
}

// GetQueryTextOk returns a tuple with the QueryText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataprimeQueryType) GetQueryTextOk() (*QueryText, bool) {
	if o == nil || IsNil(o.QueryText) {
		return nil, false
	}
	return o.QueryText, true
}

// HasQueryText returns a boolean if a field has been set.
func (o *DataprimeQueryType) HasQueryText() bool {
	if o != nil && !IsNil(o.QueryText) {
		return true
	}

	return false
}

// SetQueryText gets a reference to the given QueryText and assigns it to the QueryText field.
func (o *DataprimeQueryType) SetQueryText(v QueryText) {
	o.QueryText = &v
}

func (o DataprimeQueryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataprimeQueryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.QueryText) {
		toSerialize["queryText"] = o.QueryText
	}
	return toSerialize, nil
}

type NullableDataprimeQueryType struct {
	value *DataprimeQueryType
	isSet bool
}

func (v NullableDataprimeQueryType) Get() *DataprimeQueryType {
	return v.value
}

func (v *NullableDataprimeQueryType) Set(val *DataprimeQueryType) {
	v.value = val
	v.isSet = true
}

func (v NullableDataprimeQueryType) IsSet() bool {
	return v.isSet
}

func (v *NullableDataprimeQueryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataprimeQueryType(val *DataprimeQueryType) *NullableDataprimeQueryType {
	return &NullableDataprimeQueryType{value: val, isSet: true}
}

func (v NullableDataprimeQueryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataprimeQueryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


