/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// FilterSource - struct for FilterSource
type FilterSource struct {
	FilterSourceLogs *FilterSourceLogs
	FilterSourceMetrics *FilterSourceMetrics
	FilterSourceSpans *FilterSourceSpans
}

// FilterSourceLogsAsFilterSource is a convenience function that returns FilterSourceLogs wrapped in FilterSource
func FilterSourceLogsAsFilterSource(v *FilterSourceLogs) FilterSource {
	return FilterSource{
		FilterSourceLogs: v,
	}
}

// FilterSourceMetricsAsFilterSource is a convenience function that returns FilterSourceMetrics wrapped in FilterSource
func FilterSourceMetricsAsFilterSource(v *FilterSourceMetrics) FilterSource {
	return FilterSource{
		FilterSourceMetrics: v,
	}
}

// FilterSourceSpansAsFilterSource is a convenience function that returns FilterSourceSpans wrapped in FilterSource
func FilterSourceSpansAsFilterSource(v *FilterSourceSpans) FilterSource {
	return FilterSource{
		FilterSourceSpans: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FilterSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FilterSourceLogs
	err = newStrictDecoder(data).Decode(&dst.FilterSourceLogs)
	if err == nil {
		jsonFilterSourceLogs, _ := json.Marshal(dst.FilterSourceLogs)
		if string(jsonFilterSourceLogs) == "{}" { // empty struct
			dst.FilterSourceLogs = nil
		} else {
			if err = validator.Validate(dst.FilterSourceLogs); err != nil {
				dst.FilterSourceLogs = nil
			} else {
				match++
			}
		}
	} else {
		dst.FilterSourceLogs = nil
	}

	// try to unmarshal data into FilterSourceMetrics
	err = newStrictDecoder(data).Decode(&dst.FilterSourceMetrics)
	if err == nil {
		jsonFilterSourceMetrics, _ := json.Marshal(dst.FilterSourceMetrics)
		if string(jsonFilterSourceMetrics) == "{}" { // empty struct
			dst.FilterSourceMetrics = nil
		} else {
			if err = validator.Validate(dst.FilterSourceMetrics); err != nil {
				dst.FilterSourceMetrics = nil
			} else {
				match++
			}
		}
	} else {
		dst.FilterSourceMetrics = nil
	}

	// try to unmarshal data into FilterSourceSpans
	err = newStrictDecoder(data).Decode(&dst.FilterSourceSpans)
	if err == nil {
		jsonFilterSourceSpans, _ := json.Marshal(dst.FilterSourceSpans)
		if string(jsonFilterSourceSpans) == "{}" { // empty struct
			dst.FilterSourceSpans = nil
		} else {
			if err = validator.Validate(dst.FilterSourceSpans); err != nil {
				dst.FilterSourceSpans = nil
			} else {
				match++
			}
		}
	} else {
		dst.FilterSourceSpans = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FilterSourceLogs = nil
		dst.FilterSourceMetrics = nil
		dst.FilterSourceSpans = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FilterSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FilterSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FilterSource) MarshalJSON() ([]byte, error) {
	if src.FilterSourceLogs != nil {
		return json.Marshal(&src.FilterSourceLogs)
	}

	if src.FilterSourceMetrics != nil {
		return json.Marshal(&src.FilterSourceMetrics)
	}

	if src.FilterSourceSpans != nil {
		return json.Marshal(&src.FilterSourceSpans)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FilterSource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FilterSourceLogs != nil {
		return obj.FilterSourceLogs
	}

	if obj.FilterSourceMetrics != nil {
		return obj.FilterSourceMetrics
	}

	if obj.FilterSourceSpans != nil {
		return obj.FilterSourceSpans
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj FilterSource) GetActualInstanceValue() (interface{}) {
	if obj.FilterSourceLogs != nil {
		return *obj.FilterSourceLogs
	}

	if obj.FilterSourceMetrics != nil {
		return *obj.FilterSourceMetrics
	}

	if obj.FilterSourceSpans != nil {
		return *obj.FilterSourceSpans
	}

	// all schemas are nil
	return nil
}

type NullableFilterSource struct {
	value *FilterSource
	isSet bool
}

func (v NullableFilterSource) Get() *FilterSource {
	return v.value
}

func (v *NullableFilterSource) Set(val *FilterSource) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterSource) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterSource(val *FilterSource) *NullableFilterSource {
	return &NullableFilterSource{value: val, isSet: true}
}

func (v NullableFilterSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


