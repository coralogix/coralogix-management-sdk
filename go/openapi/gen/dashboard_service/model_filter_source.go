/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// FilterSource - struct for FilterSource
type FilterSource struct {
	Source *Source
	Source1 *Source1
	Source2 *Source2
}

// SourceAsFilterSource is a convenience function that returns Source wrapped in FilterSource
func SourceAsFilterSource(v *Source) FilterSource {
	return FilterSource{
		Source: v,
	}
}

// Source1AsFilterSource is a convenience function that returns Source1 wrapped in FilterSource
func Source1AsFilterSource(v *Source1) FilterSource {
	return FilterSource{
		Source1: v,
	}
}

// Source2AsFilterSource is a convenience function that returns Source2 wrapped in FilterSource
func Source2AsFilterSource(v *Source2) FilterSource {
	return FilterSource{
		Source2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FilterSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Source
	err = newStrictDecoder(data).Decode(&dst.Source)
	if err == nil {
		jsonSource, _ := json.Marshal(dst.Source)
		if string(jsonSource) == "{}" { // empty struct
			dst.Source = nil
		} else {
			if err = validator.Validate(dst.Source); err != nil {
				dst.Source = nil
			} else {
				match++
			}
		}
	} else {
		dst.Source = nil
	}

	// try to unmarshal data into Source1
	err = newStrictDecoder(data).Decode(&dst.Source1)
	if err == nil {
		jsonSource1, _ := json.Marshal(dst.Source1)
		if string(jsonSource1) == "{}" { // empty struct
			dst.Source1 = nil
		} else {
			if err = validator.Validate(dst.Source1); err != nil {
				dst.Source1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Source1 = nil
	}

	// try to unmarshal data into Source2
	err = newStrictDecoder(data).Decode(&dst.Source2)
	if err == nil {
		jsonSource2, _ := json.Marshal(dst.Source2)
		if string(jsonSource2) == "{}" { // empty struct
			dst.Source2 = nil
		} else {
			if err = validator.Validate(dst.Source2); err != nil {
				dst.Source2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Source2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Source = nil
		dst.Source1 = nil
		dst.Source2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FilterSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FilterSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FilterSource) MarshalJSON() ([]byte, error) {
	if src.Source != nil {
		return json.Marshal(&src.Source)
	}

	if src.Source1 != nil {
		return json.Marshal(&src.Source1)
	}

	if src.Source2 != nil {
		return json.Marshal(&src.Source2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FilterSource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Source != nil {
		return obj.Source
	}

	if obj.Source1 != nil {
		return obj.Source1
	}

	if obj.Source2 != nil {
		return obj.Source2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj FilterSource) GetActualInstanceValue() (interface{}) {
	if obj.Source != nil {
		return *obj.Source
	}

	if obj.Source1 != nil {
		return *obj.Source1
	}

	if obj.Source2 != nil {
		return *obj.Source2
	}

	// all schemas are nil
	return nil
}

type NullableFilterSource struct {
	value *FilterSource
	isSet bool
}

func (v NullableFilterSource) Get() *FilterSource {
	return v.value
}

func (v *NullableFilterSource) Set(val *FilterSource) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterSource) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterSource(val *FilterSource) *NullableFilterSource {
	return &NullableFilterSource{value: val, isSet: true}
}

func (v NullableFilterSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


