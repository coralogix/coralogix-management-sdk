/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// FilterSource - struct for FilterSource
type FilterSource struct {
	SourceLogs *SourceLogs
	SourceMetrics *SourceMetrics
	SourceSpans *SourceSpans
}

// SourceLogsAsFilterSource is a convenience function that returns SourceLogs wrapped in FilterSource
func SourceLogsAsFilterSource(v *SourceLogs) FilterSource {
	return FilterSource{
		SourceLogs: v,
	}
}

// SourceMetricsAsFilterSource is a convenience function that returns SourceMetrics wrapped in FilterSource
func SourceMetricsAsFilterSource(v *SourceMetrics) FilterSource {
	return FilterSource{
		SourceMetrics: v,
	}
}

// SourceSpansAsFilterSource is a convenience function that returns SourceSpans wrapped in FilterSource
func SourceSpansAsFilterSource(v *SourceSpans) FilterSource {
	return FilterSource{
		SourceSpans: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FilterSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SourceLogs
	err = newStrictDecoder(data).Decode(&dst.SourceLogs)
	if err == nil {
		jsonSourceLogs, _ := json.Marshal(dst.SourceLogs)
		if string(jsonSourceLogs) == "{}" { // empty struct
			dst.SourceLogs = nil
		} else {
			if err = validator.Validate(dst.SourceLogs); err != nil {
				dst.SourceLogs = nil
			} else {
				match++
			}
		}
	} else {
		dst.SourceLogs = nil
	}

	// try to unmarshal data into SourceMetrics
	err = newStrictDecoder(data).Decode(&dst.SourceMetrics)
	if err == nil {
		jsonSourceMetrics, _ := json.Marshal(dst.SourceMetrics)
		if string(jsonSourceMetrics) == "{}" { // empty struct
			dst.SourceMetrics = nil
		} else {
			if err = validator.Validate(dst.SourceMetrics); err != nil {
				dst.SourceMetrics = nil
			} else {
				match++
			}
		}
	} else {
		dst.SourceMetrics = nil
	}

	// try to unmarshal data into SourceSpans
	err = newStrictDecoder(data).Decode(&dst.SourceSpans)
	if err == nil {
		jsonSourceSpans, _ := json.Marshal(dst.SourceSpans)
		if string(jsonSourceSpans) == "{}" { // empty struct
			dst.SourceSpans = nil
		} else {
			if err = validator.Validate(dst.SourceSpans); err != nil {
				dst.SourceSpans = nil
			} else {
				match++
			}
		}
	} else {
		dst.SourceSpans = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SourceLogs = nil
		dst.SourceMetrics = nil
		dst.SourceSpans = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FilterSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FilterSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FilterSource) MarshalJSON() ([]byte, error) {
	if src.SourceLogs != nil {
		return json.Marshal(&src.SourceLogs)
	}

	if src.SourceMetrics != nil {
		return json.Marshal(&src.SourceMetrics)
	}

	if src.SourceSpans != nil {
		return json.Marshal(&src.SourceSpans)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FilterSource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SourceLogs != nil {
		return obj.SourceLogs
	}

	if obj.SourceMetrics != nil {
		return obj.SourceMetrics
	}

	if obj.SourceSpans != nil {
		return obj.SourceSpans
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj FilterSource) GetActualInstanceValue() (interface{}) {
	if obj.SourceLogs != nil {
		return *obj.SourceLogs
	}

	if obj.SourceMetrics != nil {
		return *obj.SourceMetrics
	}

	if obj.SourceSpans != nil {
		return *obj.SourceSpans
	}

	// all schemas are nil
	return nil
}

type NullableFilterSource struct {
	value *FilterSource
	isSet bool
}

func (v NullableFilterSource) Get() *FilterSource {
	return v.value
}

func (v *NullableFilterSource) Set(val *FilterSource) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterSource) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterSource(val *FilterSource) *NullableFilterSource {
	return &NullableFilterSource{value: val, isSet: true}
}

func (v NullableFilterSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


