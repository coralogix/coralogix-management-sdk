/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the LogsQueryGrouping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogsQueryGrouping{}

// LogsQueryGrouping struct for LogsQueryGrouping
type LogsQueryGrouping struct {
	Aggregations []LogsQueryAggregation `json:"aggregations,omitempty"`
	GroupBy []string `json:"groupBy,omitempty"`
	GroupBys []ObservationField `json:"groupBys,omitempty"`
}

// NewLogsQueryGrouping instantiates a new LogsQueryGrouping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsQueryGrouping() *LogsQueryGrouping {
	this := LogsQueryGrouping{}
	return &this
}

// NewLogsQueryGroupingWithDefaults instantiates a new LogsQueryGrouping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsQueryGroupingWithDefaults() *LogsQueryGrouping {
	this := LogsQueryGrouping{}
	return &this
}

// GetAggregations returns the Aggregations field value if set, zero value otherwise.
func (o *LogsQueryGrouping) GetAggregations() []LogsQueryAggregation {
	if o == nil || IsNil(o.Aggregations) {
		var ret []LogsQueryAggregation
		return ret
	}
	return o.Aggregations
}

// GetAggregationsOk returns a tuple with the Aggregations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsQueryGrouping) GetAggregationsOk() ([]LogsQueryAggregation, bool) {
	if o == nil || IsNil(o.Aggregations) {
		return nil, false
	}
	return o.Aggregations, true
}

// HasAggregations returns a boolean if a field has been set.
func (o *LogsQueryGrouping) HasAggregations() bool {
	if o != nil && !IsNil(o.Aggregations) {
		return true
	}

	return false
}

// SetAggregations gets a reference to the given []LogsQueryAggregation and assigns it to the Aggregations field.
func (o *LogsQueryGrouping) SetAggregations(v []LogsQueryAggregation) {
	o.Aggregations = v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *LogsQueryGrouping) GetGroupBy() []string {
	if o == nil || IsNil(o.GroupBy) {
		var ret []string
		return ret
	}
	return o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsQueryGrouping) GetGroupByOk() ([]string, bool) {
	if o == nil || IsNil(o.GroupBy) {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *LogsQueryGrouping) HasGroupBy() bool {
	if o != nil && !IsNil(o.GroupBy) {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given []string and assigns it to the GroupBy field.
func (o *LogsQueryGrouping) SetGroupBy(v []string) {
	o.GroupBy = v
}

// GetGroupBys returns the GroupBys field value if set, zero value otherwise.
func (o *LogsQueryGrouping) GetGroupBys() []ObservationField {
	if o == nil || IsNil(o.GroupBys) {
		var ret []ObservationField
		return ret
	}
	return o.GroupBys
}

// GetGroupBysOk returns a tuple with the GroupBys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsQueryGrouping) GetGroupBysOk() ([]ObservationField, bool) {
	if o == nil || IsNil(o.GroupBys) {
		return nil, false
	}
	return o.GroupBys, true
}

// HasGroupBys returns a boolean if a field has been set.
func (o *LogsQueryGrouping) HasGroupBys() bool {
	if o != nil && !IsNil(o.GroupBys) {
		return true
	}

	return false
}

// SetGroupBys gets a reference to the given []ObservationField and assigns it to the GroupBys field.
func (o *LogsQueryGrouping) SetGroupBys(v []ObservationField) {
	o.GroupBys = v
}

func (o LogsQueryGrouping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogsQueryGrouping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aggregations) {
		toSerialize["aggregations"] = o.Aggregations
	}
	if !IsNil(o.GroupBy) {
		toSerialize["groupBy"] = o.GroupBy
	}
	if !IsNil(o.GroupBys) {
		toSerialize["groupBys"] = o.GroupBys
	}
	return toSerialize, nil
}

type NullableLogsQueryGrouping struct {
	value *LogsQueryGrouping
	isSet bool
}

func (v NullableLogsQueryGrouping) Get() *LogsQueryGrouping {
	return v.value
}

func (v *NullableLogsQueryGrouping) Set(val *LogsQueryGrouping) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsQueryGrouping) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsQueryGrouping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsQueryGrouping(val *LogsQueryGrouping) *NullableLogsQueryGrouping {
	return &NullableLogsQueryGrouping{value: val, isSet: true}
}

func (v NullableLogsQueryGrouping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsQueryGrouping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


