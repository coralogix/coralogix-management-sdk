/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the WidgetsPieChartLabelDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WidgetsPieChartLabelDefinition{}

// WidgetsPieChartLabelDefinition struct for WidgetsPieChartLabelDefinition
type WidgetsPieChartLabelDefinition struct {
	// Are labels visible
	IsVisible *bool `json:"isVisible,omitempty"`
	LabelSource *WidgetsPieChartLabelSource `json:"labelSource,omitempty"`
	// Whether to show the name of slice in the label
	ShowName *bool `json:"showName,omitempty"`
	// Whether to show percentage value of slice in the label
	ShowPercentage *bool `json:"showPercentage,omitempty"`
	// Whether to show value of slice in the label
	ShowValue *bool `json:"showValue,omitempty"`
}

// NewWidgetsPieChartLabelDefinition instantiates a new WidgetsPieChartLabelDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWidgetsPieChartLabelDefinition() *WidgetsPieChartLabelDefinition {
	this := WidgetsPieChartLabelDefinition{}
	return &this
}

// NewWidgetsPieChartLabelDefinitionWithDefaults instantiates a new WidgetsPieChartLabelDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWidgetsPieChartLabelDefinitionWithDefaults() *WidgetsPieChartLabelDefinition {
	this := WidgetsPieChartLabelDefinition{}
	return &this
}

// GetIsVisible returns the IsVisible field value if set, zero value otherwise.
func (o *WidgetsPieChartLabelDefinition) GetIsVisible() bool {
	if o == nil || IsNil(o.IsVisible) {
		var ret bool
		return ret
	}
	return *o.IsVisible
}

// GetIsVisibleOk returns a tuple with the IsVisible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsPieChartLabelDefinition) GetIsVisibleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVisible) {
		return nil, false
	}
	return o.IsVisible, true
}

// HasIsVisible returns a boolean if a field has been set.
func (o *WidgetsPieChartLabelDefinition) HasIsVisible() bool {
	if o != nil && !IsNil(o.IsVisible) {
		return true
	}

	return false
}

// SetIsVisible gets a reference to the given bool and assigns it to the IsVisible field.
func (o *WidgetsPieChartLabelDefinition) SetIsVisible(v bool) {
	o.IsVisible = &v
}

// GetLabelSource returns the LabelSource field value if set, zero value otherwise.
func (o *WidgetsPieChartLabelDefinition) GetLabelSource() WidgetsPieChartLabelSource {
	if o == nil || IsNil(o.LabelSource) {
		var ret WidgetsPieChartLabelSource
		return ret
	}
	return *o.LabelSource
}

// GetLabelSourceOk returns a tuple with the LabelSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsPieChartLabelDefinition) GetLabelSourceOk() (*WidgetsPieChartLabelSource, bool) {
	if o == nil || IsNil(o.LabelSource) {
		return nil, false
	}
	return o.LabelSource, true
}

// HasLabelSource returns a boolean if a field has been set.
func (o *WidgetsPieChartLabelDefinition) HasLabelSource() bool {
	if o != nil && !IsNil(o.LabelSource) {
		return true
	}

	return false
}

// SetLabelSource gets a reference to the given WidgetsPieChartLabelSource and assigns it to the LabelSource field.
func (o *WidgetsPieChartLabelDefinition) SetLabelSource(v WidgetsPieChartLabelSource) {
	o.LabelSource = &v
}

// GetShowName returns the ShowName field value if set, zero value otherwise.
func (o *WidgetsPieChartLabelDefinition) GetShowName() bool {
	if o == nil || IsNil(o.ShowName) {
		var ret bool
		return ret
	}
	return *o.ShowName
}

// GetShowNameOk returns a tuple with the ShowName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsPieChartLabelDefinition) GetShowNameOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowName) {
		return nil, false
	}
	return o.ShowName, true
}

// HasShowName returns a boolean if a field has been set.
func (o *WidgetsPieChartLabelDefinition) HasShowName() bool {
	if o != nil && !IsNil(o.ShowName) {
		return true
	}

	return false
}

// SetShowName gets a reference to the given bool and assigns it to the ShowName field.
func (o *WidgetsPieChartLabelDefinition) SetShowName(v bool) {
	o.ShowName = &v
}

// GetShowPercentage returns the ShowPercentage field value if set, zero value otherwise.
func (o *WidgetsPieChartLabelDefinition) GetShowPercentage() bool {
	if o == nil || IsNil(o.ShowPercentage) {
		var ret bool
		return ret
	}
	return *o.ShowPercentage
}

// GetShowPercentageOk returns a tuple with the ShowPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsPieChartLabelDefinition) GetShowPercentageOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowPercentage) {
		return nil, false
	}
	return o.ShowPercentage, true
}

// HasShowPercentage returns a boolean if a field has been set.
func (o *WidgetsPieChartLabelDefinition) HasShowPercentage() bool {
	if o != nil && !IsNil(o.ShowPercentage) {
		return true
	}

	return false
}

// SetShowPercentage gets a reference to the given bool and assigns it to the ShowPercentage field.
func (o *WidgetsPieChartLabelDefinition) SetShowPercentage(v bool) {
	o.ShowPercentage = &v
}

// GetShowValue returns the ShowValue field value if set, zero value otherwise.
func (o *WidgetsPieChartLabelDefinition) GetShowValue() bool {
	if o == nil || IsNil(o.ShowValue) {
		var ret bool
		return ret
	}
	return *o.ShowValue
}

// GetShowValueOk returns a tuple with the ShowValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsPieChartLabelDefinition) GetShowValueOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowValue) {
		return nil, false
	}
	return o.ShowValue, true
}

// HasShowValue returns a boolean if a field has been set.
func (o *WidgetsPieChartLabelDefinition) HasShowValue() bool {
	if o != nil && !IsNil(o.ShowValue) {
		return true
	}

	return false
}

// SetShowValue gets a reference to the given bool and assigns it to the ShowValue field.
func (o *WidgetsPieChartLabelDefinition) SetShowValue(v bool) {
	o.ShowValue = &v
}

func (o WidgetsPieChartLabelDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WidgetsPieChartLabelDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsVisible) {
		toSerialize["isVisible"] = o.IsVisible
	}
	if !IsNil(o.LabelSource) {
		toSerialize["labelSource"] = o.LabelSource
	}
	if !IsNil(o.ShowName) {
		toSerialize["showName"] = o.ShowName
	}
	if !IsNil(o.ShowPercentage) {
		toSerialize["showPercentage"] = o.ShowPercentage
	}
	if !IsNil(o.ShowValue) {
		toSerialize["showValue"] = o.ShowValue
	}
	return toSerialize, nil
}

type NullableWidgetsPieChartLabelDefinition struct {
	value *WidgetsPieChartLabelDefinition
	isSet bool
}

func (v NullableWidgetsPieChartLabelDefinition) Get() *WidgetsPieChartLabelDefinition {
	return v.value
}

func (v *NullableWidgetsPieChartLabelDefinition) Set(val *WidgetsPieChartLabelDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetsPieChartLabelDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetsPieChartLabelDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetsPieChartLabelDefinition(val *WidgetsPieChartLabelDefinition) *NullableWidgetsPieChartLabelDefinition {
	return &NullableWidgetsPieChartLabelDefinition{value: val, isSet: true}
}

func (v NullableWidgetsPieChartLabelDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetsPieChartLabelDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


