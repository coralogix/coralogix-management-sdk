/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SectionOptions - struct for SectionOptions
type SectionOptions struct {
	SectionOptionsOneOf *SectionOptionsOneOf
	SectionOptionsOneOf1 *SectionOptionsOneOf1
}

// SectionOptionsOneOfAsSectionOptions is a convenience function that returns SectionOptionsOneOf wrapped in SectionOptions
func SectionOptionsOneOfAsSectionOptions(v *SectionOptionsOneOf) SectionOptions {
	return SectionOptions{
		SectionOptionsOneOf: v,
	}
}

// SectionOptionsOneOf1AsSectionOptions is a convenience function that returns SectionOptionsOneOf1 wrapped in SectionOptions
func SectionOptionsOneOf1AsSectionOptions(v *SectionOptionsOneOf1) SectionOptions {
	return SectionOptions{
		SectionOptionsOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SectionOptions) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SectionOptionsOneOf
	err = newStrictDecoder(data).Decode(&dst.SectionOptionsOneOf)
	if err == nil {
		jsonSectionOptionsOneOf, _ := json.Marshal(dst.SectionOptionsOneOf)
		if string(jsonSectionOptionsOneOf) == "{}" { // empty struct
			dst.SectionOptionsOneOf = nil
		} else {
			if err = validator.Validate(dst.SectionOptionsOneOf); err != nil {
				dst.SectionOptionsOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.SectionOptionsOneOf = nil
	}

	// try to unmarshal data into SectionOptionsOneOf1
	err = newStrictDecoder(data).Decode(&dst.SectionOptionsOneOf1)
	if err == nil {
		jsonSectionOptionsOneOf1, _ := json.Marshal(dst.SectionOptionsOneOf1)
		if string(jsonSectionOptionsOneOf1) == "{}" { // empty struct
			dst.SectionOptionsOneOf1 = nil
		} else {
			if err = validator.Validate(dst.SectionOptionsOneOf1); err != nil {
				dst.SectionOptionsOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.SectionOptionsOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SectionOptionsOneOf = nil
		dst.SectionOptionsOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SectionOptions)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SectionOptions)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SectionOptions) MarshalJSON() ([]byte, error) {
	if src.SectionOptionsOneOf != nil {
		return json.Marshal(&src.SectionOptionsOneOf)
	}

	if src.SectionOptionsOneOf1 != nil {
		return json.Marshal(&src.SectionOptionsOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SectionOptions) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SectionOptionsOneOf != nil {
		return obj.SectionOptionsOneOf
	}

	if obj.SectionOptionsOneOf1 != nil {
		return obj.SectionOptionsOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SectionOptions) GetActualInstanceValue() (interface{}) {
	if obj.SectionOptionsOneOf != nil {
		return *obj.SectionOptionsOneOf
	}

	if obj.SectionOptionsOneOf1 != nil {
		return *obj.SectionOptionsOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableSectionOptions struct {
	value *SectionOptions
	isSet bool
}

func (v NullableSectionOptions) Get() *SectionOptions {
	return v.value
}

func (v *NullableSectionOptions) Set(val *SectionOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSectionOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSectionOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSectionOptions(val *SectionOptions) *NullableSectionOptions {
	return &NullableSectionOptions{value: val, isSet: true}
}

func (v NullableSectionOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSectionOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


