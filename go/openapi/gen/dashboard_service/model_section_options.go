/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SectionOptions - struct for SectionOptions
type SectionOptions struct {
	SectionOptionsCustom *SectionOptionsCustom
	SectionOptionsInternal *SectionOptionsInternal
}

// SectionOptionsCustomAsSectionOptions is a convenience function that returns SectionOptionsCustom wrapped in SectionOptions
func SectionOptionsCustomAsSectionOptions(v *SectionOptionsCustom) SectionOptions {
	return SectionOptions{
		SectionOptionsCustom: v,
	}
}

// SectionOptionsInternalAsSectionOptions is a convenience function that returns SectionOptionsInternal wrapped in SectionOptions
func SectionOptionsInternalAsSectionOptions(v *SectionOptionsInternal) SectionOptions {
	return SectionOptions{
		SectionOptionsInternal: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SectionOptions) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SectionOptionsCustom
	err = newStrictDecoder(data).Decode(&dst.SectionOptionsCustom)
	if err == nil {
		jsonSectionOptionsCustom, _ := json.Marshal(dst.SectionOptionsCustom)
		if string(jsonSectionOptionsCustom) == "{}" { // empty struct
			dst.SectionOptionsCustom = nil
		} else {
			if err = validator.Validate(dst.SectionOptionsCustom); err != nil {
				dst.SectionOptionsCustom = nil
			} else {
				match++
			}
		}
	} else {
		dst.SectionOptionsCustom = nil
	}

	// try to unmarshal data into SectionOptionsInternal
	err = newStrictDecoder(data).Decode(&dst.SectionOptionsInternal)
	if err == nil {
		jsonSectionOptionsInternal, _ := json.Marshal(dst.SectionOptionsInternal)
		if string(jsonSectionOptionsInternal) == "{}" { // empty struct
			dst.SectionOptionsInternal = nil
		} else {
			if err = validator.Validate(dst.SectionOptionsInternal); err != nil {
				dst.SectionOptionsInternal = nil
			} else {
				match++
			}
		}
	} else {
		dst.SectionOptionsInternal = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SectionOptionsCustom = nil
		dst.SectionOptionsInternal = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SectionOptions)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SectionOptions)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SectionOptions) MarshalJSON() ([]byte, error) {
	if src.SectionOptionsCustom != nil {
		return json.Marshal(&src.SectionOptionsCustom)
	}

	if src.SectionOptionsInternal != nil {
		return json.Marshal(&src.SectionOptionsInternal)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SectionOptions) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SectionOptionsCustom != nil {
		return obj.SectionOptionsCustom
	}

	if obj.SectionOptionsInternal != nil {
		return obj.SectionOptionsInternal
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SectionOptions) GetActualInstanceValue() (interface{}) {
	if obj.SectionOptionsCustom != nil {
		return *obj.SectionOptionsCustom
	}

	if obj.SectionOptionsInternal != nil {
		return *obj.SectionOptionsInternal
	}

	// all schemas are nil
	return nil
}

type NullableSectionOptions struct {
	value *SectionOptions
	isSet bool
}

func (v NullableSectionOptions) Get() *SectionOptions {
	return v.value
}

func (v *NullableSectionOptions) Set(val *SectionOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSectionOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSectionOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSectionOptions(val *SectionOptions) *NullableSectionOptions {
	return &NullableSectionOptions{value: val, isSet: true}
}

func (v NullableSectionOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSectionOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


