/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the StaticSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StaticSource{}

// StaticSource struct for StaticSource
type StaticSource struct {
	AllOption *AllOption `json:"allOption,omitempty"`
	Values []ValueLabel `json:"values,omitempty"`
	ValuesOrderDirection *OrderDirection `json:"valuesOrderDirection,omitempty"`
}

// NewStaticSource instantiates a new StaticSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStaticSource() *StaticSource {
	this := StaticSource{}
	return &this
}

// NewStaticSourceWithDefaults instantiates a new StaticSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStaticSourceWithDefaults() *StaticSource {
	this := StaticSource{}
	return &this
}

// GetAllOption returns the AllOption field value if set, zero value otherwise.
func (o *StaticSource) GetAllOption() AllOption {
	if o == nil || IsNil(o.AllOption) {
		var ret AllOption
		return ret
	}
	return *o.AllOption
}

// GetAllOptionOk returns a tuple with the AllOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticSource) GetAllOptionOk() (*AllOption, bool) {
	if o == nil || IsNil(o.AllOption) {
		return nil, false
	}
	return o.AllOption, true
}

// HasAllOption returns a boolean if a field has been set.
func (o *StaticSource) HasAllOption() bool {
	if o != nil && !IsNil(o.AllOption) {
		return true
	}

	return false
}

// SetAllOption gets a reference to the given AllOption and assigns it to the AllOption field.
func (o *StaticSource) SetAllOption(v AllOption) {
	o.AllOption = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *StaticSource) GetValues() []ValueLabel {
	if o == nil || IsNil(o.Values) {
		var ret []ValueLabel
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticSource) GetValuesOk() ([]ValueLabel, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *StaticSource) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []ValueLabel and assigns it to the Values field.
func (o *StaticSource) SetValues(v []ValueLabel) {
	o.Values = v
}

// GetValuesOrderDirection returns the ValuesOrderDirection field value if set, zero value otherwise.
func (o *StaticSource) GetValuesOrderDirection() OrderDirection {
	if o == nil || IsNil(o.ValuesOrderDirection) {
		var ret OrderDirection
		return ret
	}
	return *o.ValuesOrderDirection
}

// GetValuesOrderDirectionOk returns a tuple with the ValuesOrderDirection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticSource) GetValuesOrderDirectionOk() (*OrderDirection, bool) {
	if o == nil || IsNil(o.ValuesOrderDirection) {
		return nil, false
	}
	return o.ValuesOrderDirection, true
}

// HasValuesOrderDirection returns a boolean if a field has been set.
func (o *StaticSource) HasValuesOrderDirection() bool {
	if o != nil && !IsNil(o.ValuesOrderDirection) {
		return true
	}

	return false
}

// SetValuesOrderDirection gets a reference to the given OrderDirection and assigns it to the ValuesOrderDirection field.
func (o *StaticSource) SetValuesOrderDirection(v OrderDirection) {
	o.ValuesOrderDirection = &v
}

func (o StaticSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StaticSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllOption) {
		toSerialize["allOption"] = o.AllOption
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.ValuesOrderDirection) {
		toSerialize["valuesOrderDirection"] = o.ValuesOrderDirection
	}
	return toSerialize, nil
}

type NullableStaticSource struct {
	value *StaticSource
	isSet bool
}

func (v NullableStaticSource) Get() *StaticSource {
	return v.value
}

func (v *NullableStaticSource) Set(val *StaticSource) {
	v.value = val
	v.isSet = true
}

func (v NullableStaticSource) IsSet() bool {
	return v.isSet
}

func (v *NullableStaticSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStaticSource(val *StaticSource) *NullableStaticSource {
	return &NullableStaticSource{value: val, isSet: true}
}

func (v NullableStaticSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStaticSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


