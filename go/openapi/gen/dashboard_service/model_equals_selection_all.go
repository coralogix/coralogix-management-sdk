/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the EqualsSelectionAll type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EqualsSelectionAll{}

// EqualsSelectionAll This data structure defines the values for the equality comparison.
type EqualsSelectionAll struct {
	// This data structure indicates that all values are selected.
	All map[string]interface{} `json:"all,omitempty"`
}

// NewEqualsSelectionAll instantiates a new EqualsSelectionAll object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEqualsSelectionAll() *EqualsSelectionAll {
	this := EqualsSelectionAll{}
	return &this
}

// NewEqualsSelectionAllWithDefaults instantiates a new EqualsSelectionAll object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEqualsSelectionAllWithDefaults() *EqualsSelectionAll {
	this := EqualsSelectionAll{}
	return &this
}

// GetAll returns the All field value if set, zero value otherwise.
func (o *EqualsSelectionAll) GetAll() map[string]interface{} {
	if o == nil || IsNil(o.All) {
		var ret map[string]interface{}
		return ret
	}
	return o.All
}

// GetAllOk returns a tuple with the All field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EqualsSelectionAll) GetAllOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.All) {
		return map[string]interface{}{}, false
	}
	return o.All, true
}

// HasAll returns a boolean if a field has been set.
func (o *EqualsSelectionAll) HasAll() bool {
	if o != nil && !IsNil(o.All) {
		return true
	}

	return false
}

// SetAll gets a reference to the given map[string]interface{} and assigns it to the All field.
func (o *EqualsSelectionAll) SetAll(v map[string]interface{}) {
	o.All = v
}

func (o EqualsSelectionAll) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EqualsSelectionAll) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.All) {
		toSerialize["all"] = o.All
	}
	return toSerialize, nil
}

type NullableEqualsSelectionAll struct {
	value *EqualsSelectionAll
	isSet bool
}

func (v NullableEqualsSelectionAll) Get() *EqualsSelectionAll {
	return v.value
}

func (v *NullableEqualsSelectionAll) Set(val *EqualsSelectionAll) {
	v.value = val
	v.isSet = true
}

func (v NullableEqualsSelectionAll) IsSet() bool {
	return v.isSet
}

func (v *NullableEqualsSelectionAll) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEqualsSelectionAll(val *EqualsSelectionAll) *NullableEqualsSelectionAll {
	return &NullableEqualsSelectionAll{value: val, isSet: true}
}

func (v NullableEqualsSelectionAll) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEqualsSelectionAll) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


