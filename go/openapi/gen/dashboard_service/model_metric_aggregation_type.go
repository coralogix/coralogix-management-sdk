/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// MetricAggregationType the model 'MetricAggregationType'
type MetricAggregationType string

// List of MetricAggregationType
const (
	METRICAGGREGATIONTYPE_METRIC_AGGREGATION_TYPE_UNSPECIFIED MetricAggregationType = "METRIC_AGGREGATION_TYPE_UNSPECIFIED"
	METRICAGGREGATIONTYPE_METRIC_AGGREGATION_TYPE_MIN MetricAggregationType = "METRIC_AGGREGATION_TYPE_MIN"
	METRICAGGREGATIONTYPE_METRIC_AGGREGATION_TYPE_MAX MetricAggregationType = "METRIC_AGGREGATION_TYPE_MAX"
	METRICAGGREGATIONTYPE_METRIC_AGGREGATION_TYPE_AVERAGE MetricAggregationType = "METRIC_AGGREGATION_TYPE_AVERAGE"
	METRICAGGREGATIONTYPE_METRIC_AGGREGATION_TYPE_SUM MetricAggregationType = "METRIC_AGGREGATION_TYPE_SUM"
	METRICAGGREGATIONTYPE_METRIC_AGGREGATION_TYPE_PERCENTILE_99 MetricAggregationType = "METRIC_AGGREGATION_TYPE_PERCENTILE_99"
	METRICAGGREGATIONTYPE_METRIC_AGGREGATION_TYPE_PERCENTILE_95 MetricAggregationType = "METRIC_AGGREGATION_TYPE_PERCENTILE_95"
	METRICAGGREGATIONTYPE_METRIC_AGGREGATION_TYPE_PERCENTILE_50 MetricAggregationType = "METRIC_AGGREGATION_TYPE_PERCENTILE_50"
)

// All allowed values of MetricAggregationType enum
var AllowedMetricAggregationTypeEnumValues = []MetricAggregationType{
	"METRIC_AGGREGATION_TYPE_UNSPECIFIED",
	"METRIC_AGGREGATION_TYPE_MIN",
	"METRIC_AGGREGATION_TYPE_MAX",
	"METRIC_AGGREGATION_TYPE_AVERAGE",
	"METRIC_AGGREGATION_TYPE_SUM",
	"METRIC_AGGREGATION_TYPE_PERCENTILE_99",
	"METRIC_AGGREGATION_TYPE_PERCENTILE_95",
	"METRIC_AGGREGATION_TYPE_PERCENTILE_50",
}

func (v *MetricAggregationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetricAggregationType(value)
	for _, existing := range AllowedMetricAggregationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetricAggregationType", value)
}

// NewMetricAggregationTypeFromValue returns a pointer to a valid MetricAggregationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetricAggregationTypeFromValue(v string) (*MetricAggregationType, error) {
	ev := MetricAggregationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetricAggregationType: valid values are %v", v, AllowedMetricAggregationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetricAggregationType) IsValid() bool {
	for _, existing := range AllowedMetricAggregationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetricAggregationType value
func (v MetricAggregationType) Ptr() *MetricAggregationType {
	return &v
}

type NullableMetricAggregationType struct {
	value *MetricAggregationType
	isSet bool
}

func (v NullableMetricAggregationType) Get() *MetricAggregationType {
	return v.value
}

func (v *NullableMetricAggregationType) Set(val *MetricAggregationType) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricAggregationType) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricAggregationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricAggregationType(val *MetricAggregationType) *NullableMetricAggregationType {
	return &NullableMetricAggregationType{value: val, isSet: true}
}

func (v NullableMetricAggregationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricAggregationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

