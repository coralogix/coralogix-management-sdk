/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the ColorsByOneOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ColorsByOneOf2{}

// ColorsByOneOf2 struct for ColorsByOneOf2
type ColorsByOneOf2 struct {
	Aggregation map[string]interface{} `json:"aggregation,omitempty"`
}

// NewColorsByOneOf2 instantiates a new ColorsByOneOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColorsByOneOf2() *ColorsByOneOf2 {
	this := ColorsByOneOf2{}
	return &this
}

// NewColorsByOneOf2WithDefaults instantiates a new ColorsByOneOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColorsByOneOf2WithDefaults() *ColorsByOneOf2 {
	this := ColorsByOneOf2{}
	return &this
}

// GetAggregation returns the Aggregation field value if set, zero value otherwise.
func (o *ColorsByOneOf2) GetAggregation() map[string]interface{} {
	if o == nil || IsNil(o.Aggregation) {
		var ret map[string]interface{}
		return ret
	}
	return o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorsByOneOf2) GetAggregationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Aggregation) {
		return map[string]interface{}{}, false
	}
	return o.Aggregation, true
}

// HasAggregation returns a boolean if a field has been set.
func (o *ColorsByOneOf2) HasAggregation() bool {
	if o != nil && !IsNil(o.Aggregation) {
		return true
	}

	return false
}

// SetAggregation gets a reference to the given map[string]interface{} and assigns it to the Aggregation field.
func (o *ColorsByOneOf2) SetAggregation(v map[string]interface{}) {
	o.Aggregation = v
}

func (o ColorsByOneOf2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ColorsByOneOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aggregation) {
		toSerialize["aggregation"] = o.Aggregation
	}
	return toSerialize, nil
}

type NullableColorsByOneOf2 struct {
	value *ColorsByOneOf2
	isSet bool
}

func (v NullableColorsByOneOf2) Get() *ColorsByOneOf2 {
	return v.value
}

func (v *NullableColorsByOneOf2) Set(val *ColorsByOneOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableColorsByOneOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableColorsByOneOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColorsByOneOf2(val *ColorsByOneOf2) *NullableColorsByOneOf2 {
	return &NullableColorsByOneOf2{value: val, isSet: true}
}

func (v NullableColorsByOneOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColorsByOneOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


