/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// GaugeAggregation the model 'GaugeAggregation'
type GaugeAggregation string

// List of Gauge.Aggregation
const (
	GAUGEAGGREGATION_AGGREGATION_UNSPECIFIED GaugeAggregation = "AGGREGATION_UNSPECIFIED"
	GAUGEAGGREGATION_AGGREGATION_LAST GaugeAggregation = "AGGREGATION_LAST"
	GAUGEAGGREGATION_AGGREGATION_MIN GaugeAggregation = "AGGREGATION_MIN"
	GAUGEAGGREGATION_AGGREGATION_MAX GaugeAggregation = "AGGREGATION_MAX"
	GAUGEAGGREGATION_AGGREGATION_AVG GaugeAggregation = "AGGREGATION_AVG"
	GAUGEAGGREGATION_AGGREGATION_SUM GaugeAggregation = "AGGREGATION_SUM"
)

// All allowed values of GaugeAggregation enum
var AllowedGaugeAggregationEnumValues = []GaugeAggregation{
	"AGGREGATION_UNSPECIFIED",
	"AGGREGATION_LAST",
	"AGGREGATION_MIN",
	"AGGREGATION_MAX",
	"AGGREGATION_AVG",
	"AGGREGATION_SUM",
}

func (v *GaugeAggregation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GaugeAggregation(value)
	for _, existing := range AllowedGaugeAggregationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GaugeAggregation", value)
}

// NewGaugeAggregationFromValue returns a pointer to a valid GaugeAggregation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGaugeAggregationFromValue(v string) (*GaugeAggregation, error) {
	ev := GaugeAggregation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GaugeAggregation: valid values are %v", v, AllowedGaugeAggregationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GaugeAggregation) IsValid() bool {
	for _, existing := range AllowedGaugeAggregationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Gauge.Aggregation value
func (v GaugeAggregation) Ptr() *GaugeAggregation {
	return &v
}

type NullableGaugeAggregation struct {
	value *GaugeAggregation
	isSet bool
}

func (v NullableGaugeAggregation) Get() *GaugeAggregation {
	return v.value
}

func (v *NullableGaugeAggregation) Set(val *GaugeAggregation) {
	v.value = val
	v.isSet = true
}

func (v NullableGaugeAggregation) IsSet() bool {
	return v.isSet
}

func (v *NullableGaugeAggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGaugeAggregation(val *GaugeAggregation) *NullableGaugeAggregation {
	return &NullableGaugeAggregation{value: val, isSet: true}
}

func (v NullableGaugeAggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGaugeAggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

