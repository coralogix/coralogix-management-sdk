/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// TooltipType the model 'TooltipType'
type TooltipType string

// List of TooltipType
const (
	TOOLTIPTYPE_TOOLTIP_TYPE_UNSPECIFIED TooltipType = "TOOLTIP_TYPE_UNSPECIFIED"
	TOOLTIPTYPE_TOOLTIP_TYPE_ALL TooltipType = "TOOLTIP_TYPE_ALL"
	TOOLTIPTYPE_TOOLTIP_TYPE_SINGLE TooltipType = "TOOLTIP_TYPE_SINGLE"
)

// All allowed values of TooltipType enum
var AllowedTooltipTypeEnumValues = []TooltipType{
	"TOOLTIP_TYPE_UNSPECIFIED",
	"TOOLTIP_TYPE_ALL",
	"TOOLTIP_TYPE_SINGLE",
}

func (v *TooltipType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TooltipType(value)
	for _, existing := range AllowedTooltipTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TooltipType", value)
}

// NewTooltipTypeFromValue returns a pointer to a valid TooltipType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTooltipTypeFromValue(v string) (*TooltipType, error) {
	ev := TooltipType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TooltipType: valid values are %v", v, AllowedTooltipTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TooltipType) IsValid() bool {
	for _, existing := range AllowedTooltipTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TooltipType value
func (v TooltipType) Ptr() *TooltipType {
	return &v
}

type NullableTooltipType struct {
	value *TooltipType
	isSet bool
}

func (v NullableTooltipType) Get() *TooltipType {
	return v.value
}

func (v *NullableTooltipType) Set(val *TooltipType) {
	v.value = val
	v.isSet = true
}

func (v NullableTooltipType) IsSet() bool {
	return v.isSet
}

func (v *NullableTooltipType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTooltipType(val *TooltipType) *NullableTooltipType {
	return &NullableTooltipType{value: val, isSet: true}
}

func (v NullableTooltipType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTooltipType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

