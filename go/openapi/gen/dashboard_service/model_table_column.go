/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the TableColumn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TableColumn{}

// TableColumn struct for TableColumn
type TableColumn struct {
	Field *ObservationField `json:"field,omitempty"`
}

// NewTableColumn instantiates a new TableColumn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableColumn() *TableColumn {
	this := TableColumn{}
	return &this
}

// NewTableColumnWithDefaults instantiates a new TableColumn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableColumnWithDefaults() *TableColumn {
	this := TableColumn{}
	return &this
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *TableColumn) GetField() ObservationField {
	if o == nil || IsNil(o.Field) {
		var ret ObservationField
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableColumn) GetFieldOk() (*ObservationField, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *TableColumn) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given ObservationField and assigns it to the Field field.
func (o *TableColumn) SetField(v ObservationField) {
	o.Field = &v
}

func (o TableColumn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TableColumn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	return toSerialize, nil
}

type NullableTableColumn struct {
	value *TableColumn
	isSet bool
}

func (v NullableTableColumn) Get() *TableColumn {
	return v.value
}

func (v *NullableTableColumn) Set(val *TableColumn) {
	v.value = val
	v.isSet = true
}

func (v NullableTableColumn) IsSet() bool {
	return v.isSet
}

func (v *NullableTableColumn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableColumn(val *TableColumn) *NullableTableColumn {
	return &NullableTableColumn{value: val, isSet: true}
}

func (v NullableTableColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableColumn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


