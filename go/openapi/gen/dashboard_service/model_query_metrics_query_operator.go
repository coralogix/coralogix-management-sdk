/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// QueryMetricsQueryOperator - struct for QueryMetricsQueryOperator
type QueryMetricsQueryOperator struct {
	QueryMetricsQueryOperatorEquals *QueryMetricsQueryOperatorEquals
	QueryMetricsQueryOperatorNotEquals *QueryMetricsQueryOperatorNotEquals
}

// QueryMetricsQueryOperatorEqualsAsQueryMetricsQueryOperator is a convenience function that returns QueryMetricsQueryOperatorEquals wrapped in QueryMetricsQueryOperator
func QueryMetricsQueryOperatorEqualsAsQueryMetricsQueryOperator(v *QueryMetricsQueryOperatorEquals) QueryMetricsQueryOperator {
	return QueryMetricsQueryOperator{
		QueryMetricsQueryOperatorEquals: v,
	}
}

// QueryMetricsQueryOperatorNotEqualsAsQueryMetricsQueryOperator is a convenience function that returns QueryMetricsQueryOperatorNotEquals wrapped in QueryMetricsQueryOperator
func QueryMetricsQueryOperatorNotEqualsAsQueryMetricsQueryOperator(v *QueryMetricsQueryOperatorNotEquals) QueryMetricsQueryOperator {
	return QueryMetricsQueryOperator{
		QueryMetricsQueryOperatorNotEquals: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *QueryMetricsQueryOperator) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into QueryMetricsQueryOperatorEquals
	err = newStrictDecoder(data).Decode(&dst.QueryMetricsQueryOperatorEquals)
	if err == nil {
		jsonQueryMetricsQueryOperatorEquals, _ := json.Marshal(dst.QueryMetricsQueryOperatorEquals)
		if string(jsonQueryMetricsQueryOperatorEquals) == "{}" { // empty struct
			dst.QueryMetricsQueryOperatorEquals = nil
		} else {
			if err = validator.Validate(dst.QueryMetricsQueryOperatorEquals); err != nil {
				dst.QueryMetricsQueryOperatorEquals = nil
			} else {
				match++
			}
		}
	} else {
		dst.QueryMetricsQueryOperatorEquals = nil
	}

	// try to unmarshal data into QueryMetricsQueryOperatorNotEquals
	err = newStrictDecoder(data).Decode(&dst.QueryMetricsQueryOperatorNotEquals)
	if err == nil {
		jsonQueryMetricsQueryOperatorNotEquals, _ := json.Marshal(dst.QueryMetricsQueryOperatorNotEquals)
		if string(jsonQueryMetricsQueryOperatorNotEquals) == "{}" { // empty struct
			dst.QueryMetricsQueryOperatorNotEquals = nil
		} else {
			if err = validator.Validate(dst.QueryMetricsQueryOperatorNotEquals); err != nil {
				dst.QueryMetricsQueryOperatorNotEquals = nil
			} else {
				match++
			}
		}
	} else {
		dst.QueryMetricsQueryOperatorNotEquals = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.QueryMetricsQueryOperatorEquals = nil
		dst.QueryMetricsQueryOperatorNotEquals = nil

		return fmt.Errorf("data matches more than one schema in oneOf(QueryMetricsQueryOperator)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(QueryMetricsQueryOperator)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src QueryMetricsQueryOperator) MarshalJSON() ([]byte, error) {
	if src.QueryMetricsQueryOperatorEquals != nil {
		return json.Marshal(&src.QueryMetricsQueryOperatorEquals)
	}

	if src.QueryMetricsQueryOperatorNotEquals != nil {
		return json.Marshal(&src.QueryMetricsQueryOperatorNotEquals)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *QueryMetricsQueryOperator) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.QueryMetricsQueryOperatorEquals != nil {
		return obj.QueryMetricsQueryOperatorEquals
	}

	if obj.QueryMetricsQueryOperatorNotEquals != nil {
		return obj.QueryMetricsQueryOperatorNotEquals
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj QueryMetricsQueryOperator) GetActualInstanceValue() (interface{}) {
	if obj.QueryMetricsQueryOperatorEquals != nil {
		return *obj.QueryMetricsQueryOperatorEquals
	}

	if obj.QueryMetricsQueryOperatorNotEquals != nil {
		return *obj.QueryMetricsQueryOperatorNotEquals
	}

	// all schemas are nil
	return nil
}

type NullableQueryMetricsQueryOperator struct {
	value *QueryMetricsQueryOperator
	isSet bool
}

func (v NullableQueryMetricsQueryOperator) Get() *QueryMetricsQueryOperator {
	return v.value
}

func (v *NullableQueryMetricsQueryOperator) Set(val *QueryMetricsQueryOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryMetricsQueryOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryMetricsQueryOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryMetricsQueryOperator(val *QueryMetricsQueryOperator) *NullableQueryMetricsQueryOperator {
	return &NullableQueryMetricsQueryOperator{value: val, isSet: true}
}

func (v NullableQueryMetricsQueryOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryMetricsQueryOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


