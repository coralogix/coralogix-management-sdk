/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// SpanRelationType the model 'SpanRelationType'
type SpanRelationType string

// List of SpanRelationType
const (
	SPANRELATIONTYPE_SPAN_RELATION_TYPE_NONE_UNSPECIFIED SpanRelationType = "SPAN_RELATION_TYPE_NONE_UNSPECIFIED"
	SPANRELATIONTYPE_SPAN_RELATION_TYPE_OTHER SpanRelationType = "SPAN_RELATION_TYPE_OTHER"
	SPANRELATIONTYPE_SPAN_RELATION_TYPE_PARENT SpanRelationType = "SPAN_RELATION_TYPE_PARENT"
	SPANRELATIONTYPE_SPAN_RELATION_TYPE_ROOT SpanRelationType = "SPAN_RELATION_TYPE_ROOT"
)

// All allowed values of SpanRelationType enum
var AllowedSpanRelationTypeEnumValues = []SpanRelationType{
	"SPAN_RELATION_TYPE_NONE_UNSPECIFIED",
	"SPAN_RELATION_TYPE_OTHER",
	"SPAN_RELATION_TYPE_PARENT",
	"SPAN_RELATION_TYPE_ROOT",
}

func (v *SpanRelationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SpanRelationType(value)
	for _, existing := range AllowedSpanRelationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpanRelationType", value)
}

// NewSpanRelationTypeFromValue returns a pointer to a valid SpanRelationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpanRelationTypeFromValue(v string) (*SpanRelationType, error) {
	ev := SpanRelationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpanRelationType: valid values are %v", v, AllowedSpanRelationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpanRelationType) IsValid() bool {
	for _, existing := range AllowedSpanRelationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SpanRelationType value
func (v SpanRelationType) Ptr() *SpanRelationType {
	return &v
}

type NullableSpanRelationType struct {
	value *SpanRelationType
	isSet bool
}

func (v NullableSpanRelationType) Get() *SpanRelationType {
	return v.value
}

func (v *NullableSpanRelationType) Set(val *SpanRelationType) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanRelationType) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanRelationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanRelationType(val *SpanRelationType) *NullableSpanRelationType {
	return &NullableSpanRelationType{value: val, isSet: true}
}

func (v NullableSpanRelationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanRelationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

