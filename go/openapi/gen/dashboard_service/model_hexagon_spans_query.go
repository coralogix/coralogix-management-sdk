/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the HexagonSpansQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HexagonSpansQuery{}

// HexagonSpansQuery A spans variant of the query
type HexagonSpansQuery struct {
	Filters []SpansFilter `json:"filters,omitempty"`
	GroupBy []SpanField `json:"groupBy,omitempty"`
	GroupBys []SpanObservationField `json:"groupBys,omitempty"`
	LuceneQuery *LuceneQuery `json:"luceneQuery,omitempty"`
	SpansAggregation *SpansAggregation `json:"spansAggregation,omitempty"`
	TimeFrame *TimeFrameSelect `json:"timeFrame,omitempty"`
}

// NewHexagonSpansQuery instantiates a new HexagonSpansQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHexagonSpansQuery() *HexagonSpansQuery {
	this := HexagonSpansQuery{}
	return &this
}

// NewHexagonSpansQueryWithDefaults instantiates a new HexagonSpansQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHexagonSpansQueryWithDefaults() *HexagonSpansQuery {
	this := HexagonSpansQuery{}
	return &this
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *HexagonSpansQuery) GetFilters() []SpansFilter {
	if o == nil || IsNil(o.Filters) {
		var ret []SpansFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HexagonSpansQuery) GetFiltersOk() ([]SpansFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *HexagonSpansQuery) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []SpansFilter and assigns it to the Filters field.
func (o *HexagonSpansQuery) SetFilters(v []SpansFilter) {
	o.Filters = v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *HexagonSpansQuery) GetGroupBy() []SpanField {
	if o == nil || IsNil(o.GroupBy) {
		var ret []SpanField
		return ret
	}
	return o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HexagonSpansQuery) GetGroupByOk() ([]SpanField, bool) {
	if o == nil || IsNil(o.GroupBy) {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *HexagonSpansQuery) HasGroupBy() bool {
	if o != nil && !IsNil(o.GroupBy) {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given []SpanField and assigns it to the GroupBy field.
func (o *HexagonSpansQuery) SetGroupBy(v []SpanField) {
	o.GroupBy = v
}

// GetGroupBys returns the GroupBys field value if set, zero value otherwise.
func (o *HexagonSpansQuery) GetGroupBys() []SpanObservationField {
	if o == nil || IsNil(o.GroupBys) {
		var ret []SpanObservationField
		return ret
	}
	return o.GroupBys
}

// GetGroupBysOk returns a tuple with the GroupBys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HexagonSpansQuery) GetGroupBysOk() ([]SpanObservationField, bool) {
	if o == nil || IsNil(o.GroupBys) {
		return nil, false
	}
	return o.GroupBys, true
}

// HasGroupBys returns a boolean if a field has been set.
func (o *HexagonSpansQuery) HasGroupBys() bool {
	if o != nil && !IsNil(o.GroupBys) {
		return true
	}

	return false
}

// SetGroupBys gets a reference to the given []SpanObservationField and assigns it to the GroupBys field.
func (o *HexagonSpansQuery) SetGroupBys(v []SpanObservationField) {
	o.GroupBys = v
}

// GetLuceneQuery returns the LuceneQuery field value if set, zero value otherwise.
func (o *HexagonSpansQuery) GetLuceneQuery() LuceneQuery {
	if o == nil || IsNil(o.LuceneQuery) {
		var ret LuceneQuery
		return ret
	}
	return *o.LuceneQuery
}

// GetLuceneQueryOk returns a tuple with the LuceneQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HexagonSpansQuery) GetLuceneQueryOk() (*LuceneQuery, bool) {
	if o == nil || IsNil(o.LuceneQuery) {
		return nil, false
	}
	return o.LuceneQuery, true
}

// HasLuceneQuery returns a boolean if a field has been set.
func (o *HexagonSpansQuery) HasLuceneQuery() bool {
	if o != nil && !IsNil(o.LuceneQuery) {
		return true
	}

	return false
}

// SetLuceneQuery gets a reference to the given LuceneQuery and assigns it to the LuceneQuery field.
func (o *HexagonSpansQuery) SetLuceneQuery(v LuceneQuery) {
	o.LuceneQuery = &v
}

// GetSpansAggregation returns the SpansAggregation field value if set, zero value otherwise.
func (o *HexagonSpansQuery) GetSpansAggregation() SpansAggregation {
	if o == nil || IsNil(o.SpansAggregation) {
		var ret SpansAggregation
		return ret
	}
	return *o.SpansAggregation
}

// GetSpansAggregationOk returns a tuple with the SpansAggregation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HexagonSpansQuery) GetSpansAggregationOk() (*SpansAggregation, bool) {
	if o == nil || IsNil(o.SpansAggregation) {
		return nil, false
	}
	return o.SpansAggregation, true
}

// HasSpansAggregation returns a boolean if a field has been set.
func (o *HexagonSpansQuery) HasSpansAggregation() bool {
	if o != nil && !IsNil(o.SpansAggregation) {
		return true
	}

	return false
}

// SetSpansAggregation gets a reference to the given SpansAggregation and assigns it to the SpansAggregation field.
func (o *HexagonSpansQuery) SetSpansAggregation(v SpansAggregation) {
	o.SpansAggregation = &v
}

// GetTimeFrame returns the TimeFrame field value if set, zero value otherwise.
func (o *HexagonSpansQuery) GetTimeFrame() TimeFrameSelect {
	if o == nil || IsNil(o.TimeFrame) {
		var ret TimeFrameSelect
		return ret
	}
	return *o.TimeFrame
}

// GetTimeFrameOk returns a tuple with the TimeFrame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HexagonSpansQuery) GetTimeFrameOk() (*TimeFrameSelect, bool) {
	if o == nil || IsNil(o.TimeFrame) {
		return nil, false
	}
	return o.TimeFrame, true
}

// HasTimeFrame returns a boolean if a field has been set.
func (o *HexagonSpansQuery) HasTimeFrame() bool {
	if o != nil && !IsNil(o.TimeFrame) {
		return true
	}

	return false
}

// SetTimeFrame gets a reference to the given TimeFrameSelect and assigns it to the TimeFrame field.
func (o *HexagonSpansQuery) SetTimeFrame(v TimeFrameSelect) {
	o.TimeFrame = &v
}

func (o HexagonSpansQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HexagonSpansQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.GroupBy) {
		toSerialize["groupBy"] = o.GroupBy
	}
	if !IsNil(o.GroupBys) {
		toSerialize["groupBys"] = o.GroupBys
	}
	if !IsNil(o.LuceneQuery) {
		toSerialize["luceneQuery"] = o.LuceneQuery
	}
	if !IsNil(o.SpansAggregation) {
		toSerialize["spansAggregation"] = o.SpansAggregation
	}
	if !IsNil(o.TimeFrame) {
		toSerialize["timeFrame"] = o.TimeFrame
	}
	return toSerialize, nil
}

type NullableHexagonSpansQuery struct {
	value *HexagonSpansQuery
	isSet bool
}

func (v NullableHexagonSpansQuery) Get() *HexagonSpansQuery {
	return v.value
}

func (v *NullableHexagonSpansQuery) Set(val *HexagonSpansQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableHexagonSpansQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableHexagonSpansQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHexagonSpansQuery(val *HexagonSpansQuery) *NullableHexagonSpansQuery {
	return &NullableHexagonSpansQuery{value: val, isSet: true}
}

func (v NullableHexagonSpansQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHexagonSpansQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


