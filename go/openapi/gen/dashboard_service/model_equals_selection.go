/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// EqualsSelection - struct for EqualsSelection
type EqualsSelection struct {
	Selection *Selection
	Selection1 *Selection1
}

// SelectionAsEqualsSelection is a convenience function that returns Selection wrapped in EqualsSelection
func SelectionAsEqualsSelection(v *Selection) EqualsSelection {
	return EqualsSelection{
		Selection: v,
	}
}

// Selection1AsEqualsSelection is a convenience function that returns Selection1 wrapped in EqualsSelection
func Selection1AsEqualsSelection(v *Selection1) EqualsSelection {
	return EqualsSelection{
		Selection1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EqualsSelection) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Selection
	err = newStrictDecoder(data).Decode(&dst.Selection)
	if err == nil {
		jsonSelection, _ := json.Marshal(dst.Selection)
		if string(jsonSelection) == "{}" { // empty struct
			dst.Selection = nil
		} else {
			if err = validator.Validate(dst.Selection); err != nil {
				dst.Selection = nil
			} else {
				match++
			}
		}
	} else {
		dst.Selection = nil
	}

	// try to unmarshal data into Selection1
	err = newStrictDecoder(data).Decode(&dst.Selection1)
	if err == nil {
		jsonSelection1, _ := json.Marshal(dst.Selection1)
		if string(jsonSelection1) == "{}" { // empty struct
			dst.Selection1 = nil
		} else {
			if err = validator.Validate(dst.Selection1); err != nil {
				dst.Selection1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Selection1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Selection = nil
		dst.Selection1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EqualsSelection)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EqualsSelection)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EqualsSelection) MarshalJSON() ([]byte, error) {
	if src.Selection != nil {
		return json.Marshal(&src.Selection)
	}

	if src.Selection1 != nil {
		return json.Marshal(&src.Selection1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EqualsSelection) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Selection != nil {
		return obj.Selection
	}

	if obj.Selection1 != nil {
		return obj.Selection1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj EqualsSelection) GetActualInstanceValue() (interface{}) {
	if obj.Selection != nil {
		return *obj.Selection
	}

	if obj.Selection1 != nil {
		return *obj.Selection1
	}

	// all schemas are nil
	return nil
}

type NullableEqualsSelection struct {
	value *EqualsSelection
	isSet bool
}

func (v NullableEqualsSelection) Get() *EqualsSelection {
	return v.value
}

func (v *NullableEqualsSelection) Set(val *EqualsSelection) {
	v.value = val
	v.isSet = true
}

func (v NullableEqualsSelection) IsSet() bool {
	return v.isSet
}

func (v *NullableEqualsSelection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEqualsSelection(val *EqualsSelection) *NullableEqualsSelection {
	return &NullableEqualsSelection{value: val, isSet: true}
}

func (v NullableEqualsSelection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEqualsSelection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


