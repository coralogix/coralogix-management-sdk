/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// QueryMetricsQueryStringOrVariable - struct for QueryMetricsQueryStringOrVariable
type QueryMetricsQueryStringOrVariable struct {
	StringOrVariableStringValue *StringOrVariableStringValue
	StringOrVariableVariableName *StringOrVariableVariableName
}

// StringOrVariableStringValueAsQueryMetricsQueryStringOrVariable is a convenience function that returns StringOrVariableStringValue wrapped in QueryMetricsQueryStringOrVariable
func StringOrVariableStringValueAsQueryMetricsQueryStringOrVariable(v *StringOrVariableStringValue) QueryMetricsQueryStringOrVariable {
	return QueryMetricsQueryStringOrVariable{
		StringOrVariableStringValue: v,
	}
}

// StringOrVariableVariableNameAsQueryMetricsQueryStringOrVariable is a convenience function that returns StringOrVariableVariableName wrapped in QueryMetricsQueryStringOrVariable
func StringOrVariableVariableNameAsQueryMetricsQueryStringOrVariable(v *StringOrVariableVariableName) QueryMetricsQueryStringOrVariable {
	return QueryMetricsQueryStringOrVariable{
		StringOrVariableVariableName: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *QueryMetricsQueryStringOrVariable) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into StringOrVariableStringValue
	err = newStrictDecoder(data).Decode(&dst.StringOrVariableStringValue)
	if err == nil {
		jsonStringOrVariableStringValue, _ := json.Marshal(dst.StringOrVariableStringValue)
		if string(jsonStringOrVariableStringValue) == "{}" { // empty struct
			dst.StringOrVariableStringValue = nil
		} else {
			if err = validator.Validate(dst.StringOrVariableStringValue); err != nil {
				dst.StringOrVariableStringValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.StringOrVariableStringValue = nil
	}

	// try to unmarshal data into StringOrVariableVariableName
	err = newStrictDecoder(data).Decode(&dst.StringOrVariableVariableName)
	if err == nil {
		jsonStringOrVariableVariableName, _ := json.Marshal(dst.StringOrVariableVariableName)
		if string(jsonStringOrVariableVariableName) == "{}" { // empty struct
			dst.StringOrVariableVariableName = nil
		} else {
			if err = validator.Validate(dst.StringOrVariableVariableName); err != nil {
				dst.StringOrVariableVariableName = nil
			} else {
				match++
			}
		}
	} else {
		dst.StringOrVariableVariableName = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.StringOrVariableStringValue = nil
		dst.StringOrVariableVariableName = nil

		return fmt.Errorf("data matches more than one schema in oneOf(QueryMetricsQueryStringOrVariable)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(QueryMetricsQueryStringOrVariable)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src QueryMetricsQueryStringOrVariable) MarshalJSON() ([]byte, error) {
	if src.StringOrVariableStringValue != nil {
		return json.Marshal(&src.StringOrVariableStringValue)
	}

	if src.StringOrVariableVariableName != nil {
		return json.Marshal(&src.StringOrVariableVariableName)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *QueryMetricsQueryStringOrVariable) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.StringOrVariableStringValue != nil {
		return obj.StringOrVariableStringValue
	}

	if obj.StringOrVariableVariableName != nil {
		return obj.StringOrVariableVariableName
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj QueryMetricsQueryStringOrVariable) GetActualInstanceValue() (interface{}) {
	if obj.StringOrVariableStringValue != nil {
		return *obj.StringOrVariableStringValue
	}

	if obj.StringOrVariableVariableName != nil {
		return *obj.StringOrVariableVariableName
	}

	// all schemas are nil
	return nil
}

type NullableQueryMetricsQueryStringOrVariable struct {
	value *QueryMetricsQueryStringOrVariable
	isSet bool
}

func (v NullableQueryMetricsQueryStringOrVariable) Get() *QueryMetricsQueryStringOrVariable {
	return v.value
}

func (v *NullableQueryMetricsQueryStringOrVariable) Set(val *QueryMetricsQueryStringOrVariable) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryMetricsQueryStringOrVariable) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryMetricsQueryStringOrVariable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryMetricsQueryStringOrVariable(val *QueryMetricsQueryStringOrVariable) *NullableQueryMetricsQueryStringOrVariable {
	return &NullableQueryMetricsQueryStringOrVariable{value: val, isSet: true}
}

func (v NullableQueryMetricsQueryStringOrVariable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryMetricsQueryStringOrVariable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


