/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the HexagonQueryDataprime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HexagonQueryDataprime{}

// HexagonQueryDataprime struct for HexagonQueryDataprime
type HexagonQueryDataprime struct {
	Dataprime *HexagonDataprimeQuery `json:"dataprime,omitempty"`
}

// NewHexagonQueryDataprime instantiates a new HexagonQueryDataprime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHexagonQueryDataprime() *HexagonQueryDataprime {
	this := HexagonQueryDataprime{}
	return &this
}

// NewHexagonQueryDataprimeWithDefaults instantiates a new HexagonQueryDataprime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHexagonQueryDataprimeWithDefaults() *HexagonQueryDataprime {
	this := HexagonQueryDataprime{}
	return &this
}

// GetDataprime returns the Dataprime field value if set, zero value otherwise.
func (o *HexagonQueryDataprime) GetDataprime() HexagonDataprimeQuery {
	if o == nil || IsNil(o.Dataprime) {
		var ret HexagonDataprimeQuery
		return ret
	}
	return *o.Dataprime
}

// GetDataprimeOk returns a tuple with the Dataprime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HexagonQueryDataprime) GetDataprimeOk() (*HexagonDataprimeQuery, bool) {
	if o == nil || IsNil(o.Dataprime) {
		return nil, false
	}
	return o.Dataprime, true
}

// HasDataprime returns a boolean if a field has been set.
func (o *HexagonQueryDataprime) HasDataprime() bool {
	if o != nil && !IsNil(o.Dataprime) {
		return true
	}

	return false
}

// SetDataprime gets a reference to the given HexagonDataprimeQuery and assigns it to the Dataprime field.
func (o *HexagonQueryDataprime) SetDataprime(v HexagonDataprimeQuery) {
	o.Dataprime = &v
}

func (o HexagonQueryDataprime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HexagonQueryDataprime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dataprime) {
		toSerialize["dataprime"] = o.Dataprime
	}
	return toSerialize, nil
}

type NullableHexagonQueryDataprime struct {
	value *HexagonQueryDataprime
	isSet bool
}

func (v NullableHexagonQueryDataprime) Get() *HexagonQueryDataprime {
	return v.value
}

func (v *NullableHexagonQueryDataprime) Set(val *HexagonQueryDataprime) {
	v.value = val
	v.isSet = true
}

func (v NullableHexagonQueryDataprime) IsSet() bool {
	return v.isSet
}

func (v *NullableHexagonQueryDataprime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHexagonQueryDataprime(val *HexagonQueryDataprime) *NullableHexagonQueryDataprime {
	return &NullableHexagonQueryDataprime{value: val, isSet: true}
}

func (v NullableHexagonQueryDataprime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHexagonQueryDataprime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


