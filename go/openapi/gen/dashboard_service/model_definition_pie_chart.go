/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the DefinitionPieChart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefinitionPieChart{}

// DefinitionPieChart struct for DefinitionPieChart
type DefinitionPieChart struct {
	PieChart *WidgetsPieChart `json:"pieChart,omitempty"`
}

// NewDefinitionPieChart instantiates a new DefinitionPieChart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefinitionPieChart() *DefinitionPieChart {
	this := DefinitionPieChart{}
	return &this
}

// NewDefinitionPieChartWithDefaults instantiates a new DefinitionPieChart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefinitionPieChartWithDefaults() *DefinitionPieChart {
	this := DefinitionPieChart{}
	return &this
}

// GetPieChart returns the PieChart field value if set, zero value otherwise.
func (o *DefinitionPieChart) GetPieChart() WidgetsPieChart {
	if o == nil || IsNil(o.PieChart) {
		var ret WidgetsPieChart
		return ret
	}
	return *o.PieChart
}

// GetPieChartOk returns a tuple with the PieChart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinitionPieChart) GetPieChartOk() (*WidgetsPieChart, bool) {
	if o == nil || IsNil(o.PieChart) {
		return nil, false
	}
	return o.PieChart, true
}

// HasPieChart returns a boolean if a field has been set.
func (o *DefinitionPieChart) HasPieChart() bool {
	if o != nil && !IsNil(o.PieChart) {
		return true
	}

	return false
}

// SetPieChart gets a reference to the given WidgetsPieChart and assigns it to the PieChart field.
func (o *DefinitionPieChart) SetPieChart(v WidgetsPieChart) {
	o.PieChart = &v
}

func (o DefinitionPieChart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefinitionPieChart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PieChart) {
		toSerialize["pieChart"] = o.PieChart
	}
	return toSerialize, nil
}

type NullableDefinitionPieChart struct {
	value *DefinitionPieChart
	isSet bool
}

func (v NullableDefinitionPieChart) Get() *DefinitionPieChart {
	return v.value
}

func (v *NullableDefinitionPieChart) Set(val *DefinitionPieChart) {
	v.value = val
	v.isSet = true
}

func (v NullableDefinitionPieChart) IsSet() bool {
	return v.isSet
}

func (v *NullableDefinitionPieChart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefinitionPieChart(val *DefinitionPieChart) *NullableDefinitionPieChart {
	return &NullableDefinitionPieChart{value: val, isSet: true}
}

func (v NullableDefinitionPieChart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefinitionPieChart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


