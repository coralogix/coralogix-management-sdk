/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the FiltersFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FiltersFilter{}

// FiltersFilter This data structure represents the configuration for filtering data on the dashboard.
type FiltersFilter struct {
	// Indicates if the filter's UI representation should be collapsed or expanded.
	Collapsed *bool `json:"collapsed,omitempty"`
	// A display name for the filter
	DisplayName *string `json:"displayName,omitempty"`
	// Indicates if the filter is currently enabled or not.
	Enabled *bool `json:"enabled,omitempty"`
	Source *FilterSource `json:"source,omitempty"`
}

// NewFiltersFilter instantiates a new FiltersFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFiltersFilter() *FiltersFilter {
	this := FiltersFilter{}
	return &this
}

// NewFiltersFilterWithDefaults instantiates a new FiltersFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiltersFilterWithDefaults() *FiltersFilter {
	this := FiltersFilter{}
	return &this
}

// GetCollapsed returns the Collapsed field value if set, zero value otherwise.
func (o *FiltersFilter) GetCollapsed() bool {
	if o == nil || IsNil(o.Collapsed) {
		var ret bool
		return ret
	}
	return *o.Collapsed
}

// GetCollapsedOk returns a tuple with the Collapsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersFilter) GetCollapsedOk() (*bool, bool) {
	if o == nil || IsNil(o.Collapsed) {
		return nil, false
	}
	return o.Collapsed, true
}

// HasCollapsed returns a boolean if a field has been set.
func (o *FiltersFilter) HasCollapsed() bool {
	if o != nil && !IsNil(o.Collapsed) {
		return true
	}

	return false
}

// SetCollapsed gets a reference to the given bool and assigns it to the Collapsed field.
func (o *FiltersFilter) SetCollapsed(v bool) {
	o.Collapsed = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *FiltersFilter) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersFilter) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *FiltersFilter) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *FiltersFilter) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *FiltersFilter) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersFilter) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *FiltersFilter) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *FiltersFilter) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *FiltersFilter) GetSource() FilterSource {
	if o == nil || IsNil(o.Source) {
		var ret FilterSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersFilter) GetSourceOk() (*FilterSource, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *FiltersFilter) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given FilterSource and assigns it to the Source field.
func (o *FiltersFilter) SetSource(v FilterSource) {
	o.Source = &v
}

func (o FiltersFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FiltersFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Collapsed) {
		toSerialize["collapsed"] = o.Collapsed
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	return toSerialize, nil
}

type NullableFiltersFilter struct {
	value *FiltersFilter
	isSet bool
}

func (v NullableFiltersFilter) Get() *FiltersFilter {
	return v.value
}

func (v *NullableFiltersFilter) Set(val *FiltersFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableFiltersFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableFiltersFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiltersFilter(val *FiltersFilter) *NullableFiltersFilter {
	return &NullableFiltersFilter{value: val, isSet: true}
}

func (v NullableFiltersFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiltersFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


