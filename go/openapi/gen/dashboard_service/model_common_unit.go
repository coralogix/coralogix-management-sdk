/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// CommonUnit the model 'CommonUnit'
type CommonUnit string

// List of common.Unit
const (
	COMMONUNIT_UNIT_UNSPECIFIED CommonUnit = "UNIT_UNSPECIFIED"
	COMMONUNIT_UNIT_MICROSECONDS CommonUnit = "UNIT_MICROSECONDS"
	COMMONUNIT_UNIT_MILLISECONDS CommonUnit = "UNIT_MILLISECONDS"
	COMMONUNIT_UNIT_SECONDS CommonUnit = "UNIT_SECONDS"
	COMMONUNIT_UNIT_BYTES CommonUnit = "UNIT_BYTES"
	COMMONUNIT_UNIT_KBYTES CommonUnit = "UNIT_KBYTES"
	COMMONUNIT_UNIT_MBYTES CommonUnit = "UNIT_MBYTES"
	COMMONUNIT_UNIT_GBYTES CommonUnit = "UNIT_GBYTES"
	COMMONUNIT_UNIT_BYTES_IEC CommonUnit = "UNIT_BYTES_IEC"
	COMMONUNIT_UNIT_KIBYTES CommonUnit = "UNIT_KIBYTES"
	COMMONUNIT_UNIT_MIBYTES CommonUnit = "UNIT_MIBYTES"
	COMMONUNIT_UNIT_GIBYTES CommonUnit = "UNIT_GIBYTES"
	COMMONUNIT_UNIT_EUR_CENTS CommonUnit = "UNIT_EUR_CENTS"
	COMMONUNIT_UNIT_EUR CommonUnit = "UNIT_EUR"
	COMMONUNIT_UNIT_USD_CENTS CommonUnit = "UNIT_USD_CENTS"
	COMMONUNIT_UNIT_USD CommonUnit = "UNIT_USD"
	COMMONUNIT_UNIT_NANOSECONDS CommonUnit = "UNIT_NANOSECONDS"
	COMMONUNIT_UNIT_CUSTOM CommonUnit = "UNIT_CUSTOM"
	COMMONUNIT_UNIT_PERCENT_ZERO_ONE CommonUnit = "UNIT_PERCENT_ZERO_ONE"
	COMMONUNIT_UNIT_PERCENT_ZERO_HUNDRED CommonUnit = "UNIT_PERCENT_ZERO_HUNDRED"
	COMMONUNIT_UNIT_PERCENT CommonUnit = "UNIT_PERCENT"
)

// All allowed values of CommonUnit enum
var AllowedCommonUnitEnumValues = []CommonUnit{
	"UNIT_UNSPECIFIED",
	"UNIT_MICROSECONDS",
	"UNIT_MILLISECONDS",
	"UNIT_SECONDS",
	"UNIT_BYTES",
	"UNIT_KBYTES",
	"UNIT_MBYTES",
	"UNIT_GBYTES",
	"UNIT_BYTES_IEC",
	"UNIT_KIBYTES",
	"UNIT_MIBYTES",
	"UNIT_GIBYTES",
	"UNIT_EUR_CENTS",
	"UNIT_EUR",
	"UNIT_USD_CENTS",
	"UNIT_USD",
	"UNIT_NANOSECONDS",
	"UNIT_CUSTOM",
	"UNIT_PERCENT_ZERO_ONE",
	"UNIT_PERCENT_ZERO_HUNDRED",
	"UNIT_PERCENT",
}

func (v *CommonUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommonUnit(value)
	for _, existing := range AllowedCommonUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommonUnit", value)
}

// NewCommonUnitFromValue returns a pointer to a valid CommonUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommonUnitFromValue(v string) (*CommonUnit, error) {
	ev := CommonUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommonUnit: valid values are %v", v, AllowedCommonUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommonUnit) IsValid() bool {
	for _, existing := range AllowedCommonUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to common.Unit value
func (v CommonUnit) Ptr() *CommonUnit {
	return &v
}

type NullableCommonUnit struct {
	value *CommonUnit
	isSet bool
}

func (v NullableCommonUnit) Get() *CommonUnit {
	return v.value
}

func (v *NullableCommonUnit) Set(val *CommonUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonUnit(val *CommonUnit) *NullableCommonUnit {
	return &NullableCommonUnit{value: val, isSet: true}
}

func (v NullableCommonUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

