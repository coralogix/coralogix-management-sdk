/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the SpecificWidgets type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpecificWidgets{}

// SpecificWidgets struct for SpecificWidgets
type SpecificWidgets struct {
	WidgetIds []string `json:"widgetIds,omitempty"`
}

// NewSpecificWidgets instantiates a new SpecificWidgets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecificWidgets() *SpecificWidgets {
	this := SpecificWidgets{}
	return &this
}

// NewSpecificWidgetsWithDefaults instantiates a new SpecificWidgets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecificWidgetsWithDefaults() *SpecificWidgets {
	this := SpecificWidgets{}
	return &this
}

// GetWidgetIds returns the WidgetIds field value if set, zero value otherwise.
func (o *SpecificWidgets) GetWidgetIds() []string {
	if o == nil || IsNil(o.WidgetIds) {
		var ret []string
		return ret
	}
	return o.WidgetIds
}

// GetWidgetIdsOk returns a tuple with the WidgetIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecificWidgets) GetWidgetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.WidgetIds) {
		return nil, false
	}
	return o.WidgetIds, true
}

// HasWidgetIds returns a boolean if a field has been set.
func (o *SpecificWidgets) HasWidgetIds() bool {
	if o != nil && !IsNil(o.WidgetIds) {
		return true
	}

	return false
}

// SetWidgetIds gets a reference to the given []string and assigns it to the WidgetIds field.
func (o *SpecificWidgets) SetWidgetIds(v []string) {
	o.WidgetIds = v
}

func (o SpecificWidgets) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpecificWidgets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.WidgetIds) {
		toSerialize["widgetIds"] = o.WidgetIds
	}
	return toSerialize, nil
}

type NullableSpecificWidgets struct {
	value *SpecificWidgets
	isSet bool
}

func (v NullableSpecificWidgets) Get() *SpecificWidgets {
	return v.value
}

func (v *NullableSpecificWidgets) Set(val *SpecificWidgets) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecificWidgets) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecificWidgets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecificWidgets(val *SpecificWidgets) *NullableSpecificWidgets {
	return &NullableSpecificWidgets{value: val, isSet: true}
}

func (v NullableSpecificWidgets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecificWidgets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


