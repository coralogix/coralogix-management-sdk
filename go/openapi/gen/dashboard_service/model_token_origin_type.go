/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// TokenOriginType the model 'TokenOriginType'
type TokenOriginType string

// List of TokenOriginType
const (
	TOKENORIGINTYPE_TOKEN_ORIGIN_TYPE_UNSPECIFIED TokenOriginType = "TOKEN_ORIGIN_TYPE_UNSPECIFIED"
	TOKENORIGINTYPE_TOKEN_ORIGIN_TYPE_USER TokenOriginType = "TOKEN_ORIGIN_TYPE_USER"
	TOKENORIGINTYPE_TOKEN_ORIGIN_TYPE_API TokenOriginType = "TOKEN_ORIGIN_TYPE_API"
)

// All allowed values of TokenOriginType enum
var AllowedTokenOriginTypeEnumValues = []TokenOriginType{
	"TOKEN_ORIGIN_TYPE_UNSPECIFIED",
	"TOKEN_ORIGIN_TYPE_USER",
	"TOKEN_ORIGIN_TYPE_API",
}

func (v *TokenOriginType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TokenOriginType(value)
	for _, existing := range AllowedTokenOriginTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TokenOriginType", value)
}

// NewTokenOriginTypeFromValue returns a pointer to a valid TokenOriginType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTokenOriginTypeFromValue(v string) (*TokenOriginType, error) {
	ev := TokenOriginType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TokenOriginType: valid values are %v", v, AllowedTokenOriginTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TokenOriginType) IsValid() bool {
	for _, existing := range AllowedTokenOriginTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TokenOriginType value
func (v TokenOriginType) Ptr() *TokenOriginType {
	return &v
}

type NullableTokenOriginType struct {
	value *TokenOriginType
	isSet bool
}

func (v NullableTokenOriginType) Get() *TokenOriginType {
	return v.value
}

func (v *NullableTokenOriginType) Set(val *TokenOriginType) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenOriginType) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenOriginType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenOriginType(val *TokenOriginType) *NullableTokenOriginType {
	return &NullableTokenOriginType{value: val, isSet: true}
}

func (v NullableTokenOriginType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenOriginType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

