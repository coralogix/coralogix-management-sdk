/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// GaugeThresholdBy the model 'GaugeThresholdBy'
type GaugeThresholdBy string

// List of Gauge.ThresholdBy
const (
	GAUGETHRESHOLDBY_THRESHOLD_BY_UNSPECIFIED GaugeThresholdBy = "THRESHOLD_BY_UNSPECIFIED"
	GAUGETHRESHOLDBY_THRESHOLD_BY_VALUE GaugeThresholdBy = "THRESHOLD_BY_VALUE"
	GAUGETHRESHOLDBY_THRESHOLD_BY_BACKGROUND GaugeThresholdBy = "THRESHOLD_BY_BACKGROUND"
)

// All allowed values of GaugeThresholdBy enum
var AllowedGaugeThresholdByEnumValues = []GaugeThresholdBy{
	"THRESHOLD_BY_UNSPECIFIED",
	"THRESHOLD_BY_VALUE",
	"THRESHOLD_BY_BACKGROUND",
}

func (v *GaugeThresholdBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GaugeThresholdBy(value)
	for _, existing := range AllowedGaugeThresholdByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GaugeThresholdBy", value)
}

// NewGaugeThresholdByFromValue returns a pointer to a valid GaugeThresholdBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGaugeThresholdByFromValue(v string) (*GaugeThresholdBy, error) {
	ev := GaugeThresholdBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GaugeThresholdBy: valid values are %v", v, AllowedGaugeThresholdByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GaugeThresholdBy) IsValid() bool {
	for _, existing := range AllowedGaugeThresholdByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Gauge.ThresholdBy value
func (v GaugeThresholdBy) Ptr() *GaugeThresholdBy {
	return &v
}

type NullableGaugeThresholdBy struct {
	value *GaugeThresholdBy
	isSet bool
}

func (v NullableGaugeThresholdBy) Get() *GaugeThresholdBy {
	return v.value
}

func (v *NullableGaugeThresholdBy) Set(val *GaugeThresholdBy) {
	v.value = val
	v.isSet = true
}

func (v NullableGaugeThresholdBy) IsSet() bool {
	return v.isSet
}

func (v *NullableGaugeThresholdBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGaugeThresholdBy(val *GaugeThresholdBy) *NullableGaugeThresholdBy {
	return &NullableGaugeThresholdBy{value: val, isSet: true}
}

func (v NullableGaugeThresholdBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGaugeThresholdBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

