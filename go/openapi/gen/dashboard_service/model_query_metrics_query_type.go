/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// QueryMetricsQueryType - struct for QueryMetricsQueryType
type QueryMetricsQueryType struct {
	TypeLabelName *TypeLabelName
	TypeLabelValue *TypeLabelValue
	TypeMetricName *TypeMetricName
}

// TypeLabelNameAsQueryMetricsQueryType is a convenience function that returns TypeLabelName wrapped in QueryMetricsQueryType
func TypeLabelNameAsQueryMetricsQueryType(v *TypeLabelName) QueryMetricsQueryType {
	return QueryMetricsQueryType{
		TypeLabelName: v,
	}
}

// TypeLabelValueAsQueryMetricsQueryType is a convenience function that returns TypeLabelValue wrapped in QueryMetricsQueryType
func TypeLabelValueAsQueryMetricsQueryType(v *TypeLabelValue) QueryMetricsQueryType {
	return QueryMetricsQueryType{
		TypeLabelValue: v,
	}
}

// TypeMetricNameAsQueryMetricsQueryType is a convenience function that returns TypeMetricName wrapped in QueryMetricsQueryType
func TypeMetricNameAsQueryMetricsQueryType(v *TypeMetricName) QueryMetricsQueryType {
	return QueryMetricsQueryType{
		TypeMetricName: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *QueryMetricsQueryType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TypeLabelName
	err = newStrictDecoder(data).Decode(&dst.TypeLabelName)
	if err == nil {
		jsonTypeLabelName, _ := json.Marshal(dst.TypeLabelName)
		if string(jsonTypeLabelName) == "{}" { // empty struct
			dst.TypeLabelName = nil
		} else {
			if err = validator.Validate(dst.TypeLabelName); err != nil {
				dst.TypeLabelName = nil
			} else {
				match++
			}
		}
	} else {
		dst.TypeLabelName = nil
	}

	// try to unmarshal data into TypeLabelValue
	err = newStrictDecoder(data).Decode(&dst.TypeLabelValue)
	if err == nil {
		jsonTypeLabelValue, _ := json.Marshal(dst.TypeLabelValue)
		if string(jsonTypeLabelValue) == "{}" { // empty struct
			dst.TypeLabelValue = nil
		} else {
			if err = validator.Validate(dst.TypeLabelValue); err != nil {
				dst.TypeLabelValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.TypeLabelValue = nil
	}

	// try to unmarshal data into TypeMetricName
	err = newStrictDecoder(data).Decode(&dst.TypeMetricName)
	if err == nil {
		jsonTypeMetricName, _ := json.Marshal(dst.TypeMetricName)
		if string(jsonTypeMetricName) == "{}" { // empty struct
			dst.TypeMetricName = nil
		} else {
			if err = validator.Validate(dst.TypeMetricName); err != nil {
				dst.TypeMetricName = nil
			} else {
				match++
			}
		}
	} else {
		dst.TypeMetricName = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TypeLabelName = nil
		dst.TypeLabelValue = nil
		dst.TypeMetricName = nil

		return fmt.Errorf("data matches more than one schema in oneOf(QueryMetricsQueryType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(QueryMetricsQueryType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src QueryMetricsQueryType) MarshalJSON() ([]byte, error) {
	if src.TypeLabelName != nil {
		return json.Marshal(&src.TypeLabelName)
	}

	if src.TypeLabelValue != nil {
		return json.Marshal(&src.TypeLabelValue)
	}

	if src.TypeMetricName != nil {
		return json.Marshal(&src.TypeMetricName)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *QueryMetricsQueryType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TypeLabelName != nil {
		return obj.TypeLabelName
	}

	if obj.TypeLabelValue != nil {
		return obj.TypeLabelValue
	}

	if obj.TypeMetricName != nil {
		return obj.TypeMetricName
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj QueryMetricsQueryType) GetActualInstanceValue() (interface{}) {
	if obj.TypeLabelName != nil {
		return *obj.TypeLabelName
	}

	if obj.TypeLabelValue != nil {
		return *obj.TypeLabelValue
	}

	if obj.TypeMetricName != nil {
		return *obj.TypeMetricName
	}

	// all schemas are nil
	return nil
}

type NullableQueryMetricsQueryType struct {
	value *QueryMetricsQueryType
	isSet bool
}

func (v NullableQueryMetricsQueryType) Get() *QueryMetricsQueryType {
	return v.value
}

func (v *NullableQueryMetricsQueryType) Set(val *QueryMetricsQueryType) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryMetricsQueryType) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryMetricsQueryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryMetricsQueryType(val *QueryMetricsQueryType) *NullableQueryMetricsQueryType {
	return &NullableQueryMetricsQueryType{value: val, isSet: true}
}

func (v NullableQueryMetricsQueryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryMetricsQueryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


