/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// QueryMetricsQueryType - struct for QueryMetricsQueryType
type QueryMetricsQueryType struct {
	QueryMetricsQueryTypeLabelName *QueryMetricsQueryTypeLabelName
	QueryMetricsQueryTypeLabelValue *QueryMetricsQueryTypeLabelValue
	QueryMetricsQueryTypeMetricName *QueryMetricsQueryTypeMetricName
}

// QueryMetricsQueryTypeLabelNameAsQueryMetricsQueryType is a convenience function that returns QueryMetricsQueryTypeLabelName wrapped in QueryMetricsQueryType
func QueryMetricsQueryTypeLabelNameAsQueryMetricsQueryType(v *QueryMetricsQueryTypeLabelName) QueryMetricsQueryType {
	return QueryMetricsQueryType{
		QueryMetricsQueryTypeLabelName: v,
	}
}

// QueryMetricsQueryTypeLabelValueAsQueryMetricsQueryType is a convenience function that returns QueryMetricsQueryTypeLabelValue wrapped in QueryMetricsQueryType
func QueryMetricsQueryTypeLabelValueAsQueryMetricsQueryType(v *QueryMetricsQueryTypeLabelValue) QueryMetricsQueryType {
	return QueryMetricsQueryType{
		QueryMetricsQueryTypeLabelValue: v,
	}
}

// QueryMetricsQueryTypeMetricNameAsQueryMetricsQueryType is a convenience function that returns QueryMetricsQueryTypeMetricName wrapped in QueryMetricsQueryType
func QueryMetricsQueryTypeMetricNameAsQueryMetricsQueryType(v *QueryMetricsQueryTypeMetricName) QueryMetricsQueryType {
	return QueryMetricsQueryType{
		QueryMetricsQueryTypeMetricName: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *QueryMetricsQueryType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into QueryMetricsQueryTypeLabelName
	err = newStrictDecoder(data).Decode(&dst.QueryMetricsQueryTypeLabelName)
	if err == nil {
		jsonQueryMetricsQueryTypeLabelName, _ := json.Marshal(dst.QueryMetricsQueryTypeLabelName)
		if string(jsonQueryMetricsQueryTypeLabelName) == "{}" { // empty struct
			dst.QueryMetricsQueryTypeLabelName = nil
		} else {
			if err = validator.Validate(dst.QueryMetricsQueryTypeLabelName); err != nil {
				dst.QueryMetricsQueryTypeLabelName = nil
			} else {
				match++
			}
		}
	} else {
		dst.QueryMetricsQueryTypeLabelName = nil
	}

	// try to unmarshal data into QueryMetricsQueryTypeLabelValue
	err = newStrictDecoder(data).Decode(&dst.QueryMetricsQueryTypeLabelValue)
	if err == nil {
		jsonQueryMetricsQueryTypeLabelValue, _ := json.Marshal(dst.QueryMetricsQueryTypeLabelValue)
		if string(jsonQueryMetricsQueryTypeLabelValue) == "{}" { // empty struct
			dst.QueryMetricsQueryTypeLabelValue = nil
		} else {
			if err = validator.Validate(dst.QueryMetricsQueryTypeLabelValue); err != nil {
				dst.QueryMetricsQueryTypeLabelValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.QueryMetricsQueryTypeLabelValue = nil
	}

	// try to unmarshal data into QueryMetricsQueryTypeMetricName
	err = newStrictDecoder(data).Decode(&dst.QueryMetricsQueryTypeMetricName)
	if err == nil {
		jsonQueryMetricsQueryTypeMetricName, _ := json.Marshal(dst.QueryMetricsQueryTypeMetricName)
		if string(jsonQueryMetricsQueryTypeMetricName) == "{}" { // empty struct
			dst.QueryMetricsQueryTypeMetricName = nil
		} else {
			if err = validator.Validate(dst.QueryMetricsQueryTypeMetricName); err != nil {
				dst.QueryMetricsQueryTypeMetricName = nil
			} else {
				match++
			}
		}
	} else {
		dst.QueryMetricsQueryTypeMetricName = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.QueryMetricsQueryTypeLabelName = nil
		dst.QueryMetricsQueryTypeLabelValue = nil
		dst.QueryMetricsQueryTypeMetricName = nil

		return fmt.Errorf("data matches more than one schema in oneOf(QueryMetricsQueryType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(QueryMetricsQueryType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src QueryMetricsQueryType) MarshalJSON() ([]byte, error) {
	if src.QueryMetricsQueryTypeLabelName != nil {
		return json.Marshal(&src.QueryMetricsQueryTypeLabelName)
	}

	if src.QueryMetricsQueryTypeLabelValue != nil {
		return json.Marshal(&src.QueryMetricsQueryTypeLabelValue)
	}

	if src.QueryMetricsQueryTypeMetricName != nil {
		return json.Marshal(&src.QueryMetricsQueryTypeMetricName)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *QueryMetricsQueryType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.QueryMetricsQueryTypeLabelName != nil {
		return obj.QueryMetricsQueryTypeLabelName
	}

	if obj.QueryMetricsQueryTypeLabelValue != nil {
		return obj.QueryMetricsQueryTypeLabelValue
	}

	if obj.QueryMetricsQueryTypeMetricName != nil {
		return obj.QueryMetricsQueryTypeMetricName
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj QueryMetricsQueryType) GetActualInstanceValue() (interface{}) {
	if obj.QueryMetricsQueryTypeLabelName != nil {
		return *obj.QueryMetricsQueryTypeLabelName
	}

	if obj.QueryMetricsQueryTypeLabelValue != nil {
		return *obj.QueryMetricsQueryTypeLabelValue
	}

	if obj.QueryMetricsQueryTypeMetricName != nil {
		return *obj.QueryMetricsQueryTypeMetricName
	}

	// all schemas are nil
	return nil
}

type NullableQueryMetricsQueryType struct {
	value *QueryMetricsQueryType
	isSet bool
}

func (v NullableQueryMetricsQueryType) Get() *QueryMetricsQueryType {
	return v.value
}

func (v *NullableQueryMetricsQueryType) Set(val *QueryMetricsQueryType) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryMetricsQueryType) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryMetricsQueryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryMetricsQueryType(val *QueryMetricsQueryType) *NullableQueryMetricsQueryType {
	return &NullableQueryMetricsQueryType{value: val, isSet: true}
}

func (v NullableQueryMetricsQueryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryMetricsQueryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


