/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// QueryMetricsQueryType - struct for QueryMetricsQueryType
type QueryMetricsQueryType struct {
	QueryMetricsQueryTypeOneOf *QueryMetricsQueryTypeOneOf
	QueryMetricsQueryTypeOneOf1 *QueryMetricsQueryTypeOneOf1
	QueryMetricsQueryTypeOneOf2 *QueryMetricsQueryTypeOneOf2
}

// QueryMetricsQueryTypeOneOfAsQueryMetricsQueryType is a convenience function that returns QueryMetricsQueryTypeOneOf wrapped in QueryMetricsQueryType
func QueryMetricsQueryTypeOneOfAsQueryMetricsQueryType(v *QueryMetricsQueryTypeOneOf) QueryMetricsQueryType {
	return QueryMetricsQueryType{
		QueryMetricsQueryTypeOneOf: v,
	}
}

// QueryMetricsQueryTypeOneOf1AsQueryMetricsQueryType is a convenience function that returns QueryMetricsQueryTypeOneOf1 wrapped in QueryMetricsQueryType
func QueryMetricsQueryTypeOneOf1AsQueryMetricsQueryType(v *QueryMetricsQueryTypeOneOf1) QueryMetricsQueryType {
	return QueryMetricsQueryType{
		QueryMetricsQueryTypeOneOf1: v,
	}
}

// QueryMetricsQueryTypeOneOf2AsQueryMetricsQueryType is a convenience function that returns QueryMetricsQueryTypeOneOf2 wrapped in QueryMetricsQueryType
func QueryMetricsQueryTypeOneOf2AsQueryMetricsQueryType(v *QueryMetricsQueryTypeOneOf2) QueryMetricsQueryType {
	return QueryMetricsQueryType{
		QueryMetricsQueryTypeOneOf2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *QueryMetricsQueryType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into QueryMetricsQueryTypeOneOf
	err = newStrictDecoder(data).Decode(&dst.QueryMetricsQueryTypeOneOf)
	if err == nil {
		jsonQueryMetricsQueryTypeOneOf, _ := json.Marshal(dst.QueryMetricsQueryTypeOneOf)
		if string(jsonQueryMetricsQueryTypeOneOf) == "{}" { // empty struct
			dst.QueryMetricsQueryTypeOneOf = nil
		} else {
			if err = validator.Validate(dst.QueryMetricsQueryTypeOneOf); err != nil {
				dst.QueryMetricsQueryTypeOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.QueryMetricsQueryTypeOneOf = nil
	}

	// try to unmarshal data into QueryMetricsQueryTypeOneOf1
	err = newStrictDecoder(data).Decode(&dst.QueryMetricsQueryTypeOneOf1)
	if err == nil {
		jsonQueryMetricsQueryTypeOneOf1, _ := json.Marshal(dst.QueryMetricsQueryTypeOneOf1)
		if string(jsonQueryMetricsQueryTypeOneOf1) == "{}" { // empty struct
			dst.QueryMetricsQueryTypeOneOf1 = nil
		} else {
			if err = validator.Validate(dst.QueryMetricsQueryTypeOneOf1); err != nil {
				dst.QueryMetricsQueryTypeOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.QueryMetricsQueryTypeOneOf1 = nil
	}

	// try to unmarshal data into QueryMetricsQueryTypeOneOf2
	err = newStrictDecoder(data).Decode(&dst.QueryMetricsQueryTypeOneOf2)
	if err == nil {
		jsonQueryMetricsQueryTypeOneOf2, _ := json.Marshal(dst.QueryMetricsQueryTypeOneOf2)
		if string(jsonQueryMetricsQueryTypeOneOf2) == "{}" { // empty struct
			dst.QueryMetricsQueryTypeOneOf2 = nil
		} else {
			if err = validator.Validate(dst.QueryMetricsQueryTypeOneOf2); err != nil {
				dst.QueryMetricsQueryTypeOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.QueryMetricsQueryTypeOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.QueryMetricsQueryTypeOneOf = nil
		dst.QueryMetricsQueryTypeOneOf1 = nil
		dst.QueryMetricsQueryTypeOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(QueryMetricsQueryType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(QueryMetricsQueryType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src QueryMetricsQueryType) MarshalJSON() ([]byte, error) {
	if src.QueryMetricsQueryTypeOneOf != nil {
		return json.Marshal(&src.QueryMetricsQueryTypeOneOf)
	}

	if src.QueryMetricsQueryTypeOneOf1 != nil {
		return json.Marshal(&src.QueryMetricsQueryTypeOneOf1)
	}

	if src.QueryMetricsQueryTypeOneOf2 != nil {
		return json.Marshal(&src.QueryMetricsQueryTypeOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *QueryMetricsQueryType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.QueryMetricsQueryTypeOneOf != nil {
		return obj.QueryMetricsQueryTypeOneOf
	}

	if obj.QueryMetricsQueryTypeOneOf1 != nil {
		return obj.QueryMetricsQueryTypeOneOf1
	}

	if obj.QueryMetricsQueryTypeOneOf2 != nil {
		return obj.QueryMetricsQueryTypeOneOf2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj QueryMetricsQueryType) GetActualInstanceValue() (interface{}) {
	if obj.QueryMetricsQueryTypeOneOf != nil {
		return *obj.QueryMetricsQueryTypeOneOf
	}

	if obj.QueryMetricsQueryTypeOneOf1 != nil {
		return *obj.QueryMetricsQueryTypeOneOf1
	}

	if obj.QueryMetricsQueryTypeOneOf2 != nil {
		return *obj.QueryMetricsQueryTypeOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableQueryMetricsQueryType struct {
	value *QueryMetricsQueryType
	isSet bool
}

func (v NullableQueryMetricsQueryType) Get() *QueryMetricsQueryType {
	return v.value
}

func (v *NullableQueryMetricsQueryType) Set(val *QueryMetricsQueryType) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryMetricsQueryType) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryMetricsQueryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryMetricsQueryType(val *QueryMetricsQueryType) *NullableQueryMetricsQueryType {
	return &NullableQueryMetricsQueryType{value: val, isSet: true}
}

func (v NullableQueryMetricsQueryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryMetricsQueryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


