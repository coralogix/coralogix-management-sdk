/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the Tooltip type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tooltip{}

// Tooltip struct for Tooltip
type Tooltip struct {
	ShowLabels *bool `json:"showLabels,omitempty"`
	Type *TooltipType `json:"type,omitempty"`
}

// NewTooltip instantiates a new Tooltip object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTooltip() *Tooltip {
	this := Tooltip{}
	return &this
}

// NewTooltipWithDefaults instantiates a new Tooltip object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTooltipWithDefaults() *Tooltip {
	this := Tooltip{}
	return &this
}

// GetShowLabels returns the ShowLabels field value if set, zero value otherwise.
func (o *Tooltip) GetShowLabels() bool {
	if o == nil || IsNil(o.ShowLabels) {
		var ret bool
		return ret
	}
	return *o.ShowLabels
}

// GetShowLabelsOk returns a tuple with the ShowLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tooltip) GetShowLabelsOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowLabels) {
		return nil, false
	}
	return o.ShowLabels, true
}

// HasShowLabels returns a boolean if a field has been set.
func (o *Tooltip) HasShowLabels() bool {
	if o != nil && !IsNil(o.ShowLabels) {
		return true
	}

	return false
}

// SetShowLabels gets a reference to the given bool and assigns it to the ShowLabels field.
func (o *Tooltip) SetShowLabels(v bool) {
	o.ShowLabels = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Tooltip) GetType() TooltipType {
	if o == nil || IsNil(o.Type) {
		var ret TooltipType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tooltip) GetTypeOk() (*TooltipType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Tooltip) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given TooltipType and assigns it to the Type field.
func (o *Tooltip) SetType(v TooltipType) {
	o.Type = &v
}

func (o Tooltip) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tooltip) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ShowLabels) {
		toSerialize["showLabels"] = o.ShowLabels
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableTooltip struct {
	value *Tooltip
	isSet bool
}

func (v NullableTooltip) Get() *Tooltip {
	return v.value
}

func (v *NullableTooltip) Set(val *Tooltip) {
	v.value = val
	v.isSet = true
}

func (v NullableTooltip) IsSet() bool {
	return v.isSet
}

func (v *NullableTooltip) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTooltip(val *Tooltip) *NullableTooltip {
	return &NullableTooltip{value: val, isSet: true}
}

func (v NullableTooltip) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTooltip) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


