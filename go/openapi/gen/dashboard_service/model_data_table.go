/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the DataTable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataTable{}

// DataTable struct for DataTable
type DataTable struct {
	Columns []DataTableColumn `json:"columns,omitempty"`
	DataModeType *WidgetsCommonDataModeType `json:"dataModeType,omitempty"`
	OrderBy *OrderingField `json:"orderBy,omitempty"`
	Query *DataTableQuery `json:"query,omitempty"`
	// How many results are displayed per table page
	ResultsPerPage *int32 `json:"resultsPerPage,omitempty"`
	RowStyle *RowStyle `json:"rowStyle,omitempty"`
}

// NewDataTable instantiates a new DataTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTable() *DataTable {
	this := DataTable{}
	return &this
}

// NewDataTableWithDefaults instantiates a new DataTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTableWithDefaults() *DataTable {
	this := DataTable{}
	return &this
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *DataTable) GetColumns() []DataTableColumn {
	if o == nil || IsNil(o.Columns) {
		var ret []DataTableColumn
		return ret
	}
	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTable) GetColumnsOk() ([]DataTableColumn, bool) {
	if o == nil || IsNil(o.Columns) {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *DataTable) HasColumns() bool {
	if o != nil && !IsNil(o.Columns) {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []DataTableColumn and assigns it to the Columns field.
func (o *DataTable) SetColumns(v []DataTableColumn) {
	o.Columns = v
}

// GetDataModeType returns the DataModeType field value if set, zero value otherwise.
func (o *DataTable) GetDataModeType() WidgetsCommonDataModeType {
	if o == nil || IsNil(o.DataModeType) {
		var ret WidgetsCommonDataModeType
		return ret
	}
	return *o.DataModeType
}

// GetDataModeTypeOk returns a tuple with the DataModeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTable) GetDataModeTypeOk() (*WidgetsCommonDataModeType, bool) {
	if o == nil || IsNil(o.DataModeType) {
		return nil, false
	}
	return o.DataModeType, true
}

// HasDataModeType returns a boolean if a field has been set.
func (o *DataTable) HasDataModeType() bool {
	if o != nil && !IsNil(o.DataModeType) {
		return true
	}

	return false
}

// SetDataModeType gets a reference to the given WidgetsCommonDataModeType and assigns it to the DataModeType field.
func (o *DataTable) SetDataModeType(v WidgetsCommonDataModeType) {
	o.DataModeType = &v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *DataTable) GetOrderBy() OrderingField {
	if o == nil || IsNil(o.OrderBy) {
		var ret OrderingField
		return ret
	}
	return *o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTable) GetOrderByOk() (*OrderingField, bool) {
	if o == nil || IsNil(o.OrderBy) {
		return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *DataTable) HasOrderBy() bool {
	if o != nil && !IsNil(o.OrderBy) {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given OrderingField and assigns it to the OrderBy field.
func (o *DataTable) SetOrderBy(v OrderingField) {
	o.OrderBy = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *DataTable) GetQuery() DataTableQuery {
	if o == nil || IsNil(o.Query) {
		var ret DataTableQuery
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTable) GetQueryOk() (*DataTableQuery, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *DataTable) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given DataTableQuery and assigns it to the Query field.
func (o *DataTable) SetQuery(v DataTableQuery) {
	o.Query = &v
}

// GetResultsPerPage returns the ResultsPerPage field value if set, zero value otherwise.
func (o *DataTable) GetResultsPerPage() int32 {
	if o == nil || IsNil(o.ResultsPerPage) {
		var ret int32
		return ret
	}
	return *o.ResultsPerPage
}

// GetResultsPerPageOk returns a tuple with the ResultsPerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTable) GetResultsPerPageOk() (*int32, bool) {
	if o == nil || IsNil(o.ResultsPerPage) {
		return nil, false
	}
	return o.ResultsPerPage, true
}

// HasResultsPerPage returns a boolean if a field has been set.
func (o *DataTable) HasResultsPerPage() bool {
	if o != nil && !IsNil(o.ResultsPerPage) {
		return true
	}

	return false
}

// SetResultsPerPage gets a reference to the given int32 and assigns it to the ResultsPerPage field.
func (o *DataTable) SetResultsPerPage(v int32) {
	o.ResultsPerPage = &v
}

// GetRowStyle returns the RowStyle field value if set, zero value otherwise.
func (o *DataTable) GetRowStyle() RowStyle {
	if o == nil || IsNil(o.RowStyle) {
		var ret RowStyle
		return ret
	}
	return *o.RowStyle
}

// GetRowStyleOk returns a tuple with the RowStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTable) GetRowStyleOk() (*RowStyle, bool) {
	if o == nil || IsNil(o.RowStyle) {
		return nil, false
	}
	return o.RowStyle, true
}

// HasRowStyle returns a boolean if a field has been set.
func (o *DataTable) HasRowStyle() bool {
	if o != nil && !IsNil(o.RowStyle) {
		return true
	}

	return false
}

// SetRowStyle gets a reference to the given RowStyle and assigns it to the RowStyle field.
func (o *DataTable) SetRowStyle(v RowStyle) {
	o.RowStyle = &v
}

func (o DataTable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataTable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Columns) {
		toSerialize["columns"] = o.Columns
	}
	if !IsNil(o.DataModeType) {
		toSerialize["dataModeType"] = o.DataModeType
	}
	if !IsNil(o.OrderBy) {
		toSerialize["orderBy"] = o.OrderBy
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.ResultsPerPage) {
		toSerialize["resultsPerPage"] = o.ResultsPerPage
	}
	if !IsNil(o.RowStyle) {
		toSerialize["rowStyle"] = o.RowStyle
	}
	return toSerialize, nil
}

type NullableDataTable struct {
	value *DataTable
	isSet bool
}

func (v NullableDataTable) Get() *DataTable {
	return v.value
}

func (v *NullableDataTable) Set(val *DataTable) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTable) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTable(val *DataTable) *NullableDataTable {
	return &NullableDataTable{value: val, isSet: true}
}

func (v NullableDataTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


