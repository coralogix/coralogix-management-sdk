/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// DimensionField the model 'DimensionField'
type DimensionField string

// List of DimensionField
const (
	DIMENSIONFIELD_DIMENSION_FIELD_UNSPECIFIED DimensionField = "DIMENSION_FIELD_UNSPECIFIED"
	DIMENSIONFIELD_DIMENSION_FIELD_TRACE_ID DimensionField = "DIMENSION_FIELD_TRACE_ID"
)

// All allowed values of DimensionField enum
var AllowedDimensionFieldEnumValues = []DimensionField{
	"DIMENSION_FIELD_UNSPECIFIED",
	"DIMENSION_FIELD_TRACE_ID",
}

func (v *DimensionField) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DimensionField(value)
	for _, existing := range AllowedDimensionFieldEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DimensionField", value)
}

// NewDimensionFieldFromValue returns a pointer to a valid DimensionField
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDimensionFieldFromValue(v string) (*DimensionField, error) {
	ev := DimensionField(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DimensionField: valid values are %v", v, AllowedDimensionFieldEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DimensionField) IsValid() bool {
	for _, existing := range AllowedDimensionFieldEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DimensionField value
func (v DimensionField) Ptr() *DimensionField {
	return &v
}

type NullableDimensionField struct {
	value *DimensionField
	isSet bool
}

func (v NullableDimensionField) Get() *DimensionField {
	return v.value
}

func (v *NullableDimensionField) Set(val *DimensionField) {
	v.value = val
	v.isSet = true
}

func (v NullableDimensionField) IsSet() bool {
	return v.isSet
}

func (v *NullableDimensionField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDimensionField(val *DimensionField) *NullableDimensionField {
	return &NullableDimensionField{value: val, isSet: true}
}

func (v NullableDimensionField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDimensionField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

