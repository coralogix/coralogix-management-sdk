/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the XAxisOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &XAxisOneOf1{}

// XAxisOneOf1 struct for XAxisOneOf1
type XAxisOneOf1 struct {
	Time *XAxisByTime `json:"time,omitempty"`
}

// NewXAxisOneOf1 instantiates a new XAxisOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewXAxisOneOf1() *XAxisOneOf1 {
	this := XAxisOneOf1{}
	return &this
}

// NewXAxisOneOf1WithDefaults instantiates a new XAxisOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewXAxisOneOf1WithDefaults() *XAxisOneOf1 {
	this := XAxisOneOf1{}
	return &this
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *XAxisOneOf1) GetTime() XAxisByTime {
	if o == nil || IsNil(o.Time) {
		var ret XAxisByTime
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *XAxisOneOf1) GetTimeOk() (*XAxisByTime, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *XAxisOneOf1) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given XAxisByTime and assigns it to the Time field.
func (o *XAxisOneOf1) SetTime(v XAxisByTime) {
	o.Time = &v
}

func (o XAxisOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o XAxisOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	return toSerialize, nil
}

type NullableXAxisOneOf1 struct {
	value *XAxisOneOf1
	isSet bool
}

func (v NullableXAxisOneOf1) Get() *XAxisOneOf1 {
	return v.value
}

func (v *NullableXAxisOneOf1) Set(val *XAxisOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableXAxisOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableXAxisOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableXAxisOneOf1(val *XAxisOneOf1) *NullableXAxisOneOf1 {
	return &NullableXAxisOneOf1{value: val, isSet: true}
}

func (v NullableXAxisOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableXAxisOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


