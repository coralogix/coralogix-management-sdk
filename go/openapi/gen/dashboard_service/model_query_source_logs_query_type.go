/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// QuerySourceLogsQueryType - struct for QuerySourceLogsQueryType
type QuerySourceLogsQueryType struct {
	QuerySourceLogsQueryTypeOneOf *QuerySourceLogsQueryTypeOneOf
	QuerySourceLogsQueryTypeOneOf1 *QuerySourceLogsQueryTypeOneOf1
}

// QuerySourceLogsQueryTypeOneOfAsQuerySourceLogsQueryType is a convenience function that returns QuerySourceLogsQueryTypeOneOf wrapped in QuerySourceLogsQueryType
func QuerySourceLogsQueryTypeOneOfAsQuerySourceLogsQueryType(v *QuerySourceLogsQueryTypeOneOf) QuerySourceLogsQueryType {
	return QuerySourceLogsQueryType{
		QuerySourceLogsQueryTypeOneOf: v,
	}
}

// QuerySourceLogsQueryTypeOneOf1AsQuerySourceLogsQueryType is a convenience function that returns QuerySourceLogsQueryTypeOneOf1 wrapped in QuerySourceLogsQueryType
func QuerySourceLogsQueryTypeOneOf1AsQuerySourceLogsQueryType(v *QuerySourceLogsQueryTypeOneOf1) QuerySourceLogsQueryType {
	return QuerySourceLogsQueryType{
		QuerySourceLogsQueryTypeOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *QuerySourceLogsQueryType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into QuerySourceLogsQueryTypeOneOf
	err = newStrictDecoder(data).Decode(&dst.QuerySourceLogsQueryTypeOneOf)
	if err == nil {
		jsonQuerySourceLogsQueryTypeOneOf, _ := json.Marshal(dst.QuerySourceLogsQueryTypeOneOf)
		if string(jsonQuerySourceLogsQueryTypeOneOf) == "{}" { // empty struct
			dst.QuerySourceLogsQueryTypeOneOf = nil
		} else {
			if err = validator.Validate(dst.QuerySourceLogsQueryTypeOneOf); err != nil {
				dst.QuerySourceLogsQueryTypeOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.QuerySourceLogsQueryTypeOneOf = nil
	}

	// try to unmarshal data into QuerySourceLogsQueryTypeOneOf1
	err = newStrictDecoder(data).Decode(&dst.QuerySourceLogsQueryTypeOneOf1)
	if err == nil {
		jsonQuerySourceLogsQueryTypeOneOf1, _ := json.Marshal(dst.QuerySourceLogsQueryTypeOneOf1)
		if string(jsonQuerySourceLogsQueryTypeOneOf1) == "{}" { // empty struct
			dst.QuerySourceLogsQueryTypeOneOf1 = nil
		} else {
			if err = validator.Validate(dst.QuerySourceLogsQueryTypeOneOf1); err != nil {
				dst.QuerySourceLogsQueryTypeOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.QuerySourceLogsQueryTypeOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.QuerySourceLogsQueryTypeOneOf = nil
		dst.QuerySourceLogsQueryTypeOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(QuerySourceLogsQueryType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(QuerySourceLogsQueryType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src QuerySourceLogsQueryType) MarshalJSON() ([]byte, error) {
	if src.QuerySourceLogsQueryTypeOneOf != nil {
		return json.Marshal(&src.QuerySourceLogsQueryTypeOneOf)
	}

	if src.QuerySourceLogsQueryTypeOneOf1 != nil {
		return json.Marshal(&src.QuerySourceLogsQueryTypeOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *QuerySourceLogsQueryType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.QuerySourceLogsQueryTypeOneOf != nil {
		return obj.QuerySourceLogsQueryTypeOneOf
	}

	if obj.QuerySourceLogsQueryTypeOneOf1 != nil {
		return obj.QuerySourceLogsQueryTypeOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj QuerySourceLogsQueryType) GetActualInstanceValue() (interface{}) {
	if obj.QuerySourceLogsQueryTypeOneOf != nil {
		return *obj.QuerySourceLogsQueryTypeOneOf
	}

	if obj.QuerySourceLogsQueryTypeOneOf1 != nil {
		return *obj.QuerySourceLogsQueryTypeOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableQuerySourceLogsQueryType struct {
	value *QuerySourceLogsQueryType
	isSet bool
}

func (v NullableQuerySourceLogsQueryType) Get() *QuerySourceLogsQueryType {
	return v.value
}

func (v *NullableQuerySourceLogsQueryType) Set(val *QuerySourceLogsQueryType) {
	v.value = val
	v.isSet = true
}

func (v NullableQuerySourceLogsQueryType) IsSet() bool {
	return v.isSet
}

func (v *NullableQuerySourceLogsQueryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuerySourceLogsQueryType(val *QuerySourceLogsQueryType) *NullableQuerySourceLogsQueryType {
	return &NullableQuerySourceLogsQueryType{value: val, isSet: true}
}

func (v NullableQuerySourceLogsQueryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuerySourceLogsQueryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


