/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// QuerySourceLogsQueryType - struct for QuerySourceLogsQueryType
type QuerySourceLogsQueryType struct {
	QuerySourceLogsQueryTypeFieldName *QuerySourceLogsQueryTypeFieldName
	QuerySourceLogsQueryTypeFieldValue *QuerySourceLogsQueryTypeFieldValue
}

// QuerySourceLogsQueryTypeFieldNameAsQuerySourceLogsQueryType is a convenience function that returns QuerySourceLogsQueryTypeFieldName wrapped in QuerySourceLogsQueryType
func QuerySourceLogsQueryTypeFieldNameAsQuerySourceLogsQueryType(v *QuerySourceLogsQueryTypeFieldName) QuerySourceLogsQueryType {
	return QuerySourceLogsQueryType{
		QuerySourceLogsQueryTypeFieldName: v,
	}
}

// QuerySourceLogsQueryTypeFieldValueAsQuerySourceLogsQueryType is a convenience function that returns QuerySourceLogsQueryTypeFieldValue wrapped in QuerySourceLogsQueryType
func QuerySourceLogsQueryTypeFieldValueAsQuerySourceLogsQueryType(v *QuerySourceLogsQueryTypeFieldValue) QuerySourceLogsQueryType {
	return QuerySourceLogsQueryType{
		QuerySourceLogsQueryTypeFieldValue: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *QuerySourceLogsQueryType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into QuerySourceLogsQueryTypeFieldName
	err = newStrictDecoder(data).Decode(&dst.QuerySourceLogsQueryTypeFieldName)
	if err == nil {
		jsonQuerySourceLogsQueryTypeFieldName, _ := json.Marshal(dst.QuerySourceLogsQueryTypeFieldName)
		if string(jsonQuerySourceLogsQueryTypeFieldName) == "{}" { // empty struct
			dst.QuerySourceLogsQueryTypeFieldName = nil
		} else {
			if err = validator.Validate(dst.QuerySourceLogsQueryTypeFieldName); err != nil {
				dst.QuerySourceLogsQueryTypeFieldName = nil
			} else {
				match++
			}
		}
	} else {
		dst.QuerySourceLogsQueryTypeFieldName = nil
	}

	// try to unmarshal data into QuerySourceLogsQueryTypeFieldValue
	err = newStrictDecoder(data).Decode(&dst.QuerySourceLogsQueryTypeFieldValue)
	if err == nil {
		jsonQuerySourceLogsQueryTypeFieldValue, _ := json.Marshal(dst.QuerySourceLogsQueryTypeFieldValue)
		if string(jsonQuerySourceLogsQueryTypeFieldValue) == "{}" { // empty struct
			dst.QuerySourceLogsQueryTypeFieldValue = nil
		} else {
			if err = validator.Validate(dst.QuerySourceLogsQueryTypeFieldValue); err != nil {
				dst.QuerySourceLogsQueryTypeFieldValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.QuerySourceLogsQueryTypeFieldValue = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.QuerySourceLogsQueryTypeFieldName = nil
		dst.QuerySourceLogsQueryTypeFieldValue = nil

		return fmt.Errorf("data matches more than one schema in oneOf(QuerySourceLogsQueryType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(QuerySourceLogsQueryType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src QuerySourceLogsQueryType) MarshalJSON() ([]byte, error) {
	if src.QuerySourceLogsQueryTypeFieldName != nil {
		return json.Marshal(&src.QuerySourceLogsQueryTypeFieldName)
	}

	if src.QuerySourceLogsQueryTypeFieldValue != nil {
		return json.Marshal(&src.QuerySourceLogsQueryTypeFieldValue)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *QuerySourceLogsQueryType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.QuerySourceLogsQueryTypeFieldName != nil {
		return obj.QuerySourceLogsQueryTypeFieldName
	}

	if obj.QuerySourceLogsQueryTypeFieldValue != nil {
		return obj.QuerySourceLogsQueryTypeFieldValue
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj QuerySourceLogsQueryType) GetActualInstanceValue() (interface{}) {
	if obj.QuerySourceLogsQueryTypeFieldName != nil {
		return *obj.QuerySourceLogsQueryTypeFieldName
	}

	if obj.QuerySourceLogsQueryTypeFieldValue != nil {
		return *obj.QuerySourceLogsQueryTypeFieldValue
	}

	// all schemas are nil
	return nil
}

type NullableQuerySourceLogsQueryType struct {
	value *QuerySourceLogsQueryType
	isSet bool
}

func (v NullableQuerySourceLogsQueryType) Get() *QuerySourceLogsQueryType {
	return v.value
}

func (v *NullableQuerySourceLogsQueryType) Set(val *QuerySourceLogsQueryType) {
	v.value = val
	v.isSet = true
}

func (v NullableQuerySourceLogsQueryType) IsSet() bool {
	return v.isSet
}

func (v *NullableQuerySourceLogsQueryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuerySourceLogsQueryType(val *QuerySourceLogsQueryType) *NullableQuerySourceLogsQueryType {
	return &NullableQuerySourceLogsQueryType{value: val, isSet: true}
}

func (v NullableQuerySourceLogsQueryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuerySourceLogsQueryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


