/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// LegendPlacement the model 'LegendPlacement'
type LegendPlacement string

// List of LegendPlacement
const (
	LEGENDPLACEMENT_LEGEND_PLACEMENT_UNSPECIFIED LegendPlacement = "LEGEND_PLACEMENT_UNSPECIFIED"
	LEGENDPLACEMENT_LEGEND_PLACEMENT_AUTO LegendPlacement = "LEGEND_PLACEMENT_AUTO"
	LEGENDPLACEMENT_LEGEND_PLACEMENT_BOTTOM LegendPlacement = "LEGEND_PLACEMENT_BOTTOM"
	LEGENDPLACEMENT_LEGEND_PLACEMENT_SIDE LegendPlacement = "LEGEND_PLACEMENT_SIDE"
	LEGENDPLACEMENT_LEGEND_PLACEMENT_HIDDEN LegendPlacement = "LEGEND_PLACEMENT_HIDDEN"
)

// All allowed values of LegendPlacement enum
var AllowedLegendPlacementEnumValues = []LegendPlacement{
	"LEGEND_PLACEMENT_UNSPECIFIED",
	"LEGEND_PLACEMENT_AUTO",
	"LEGEND_PLACEMENT_BOTTOM",
	"LEGEND_PLACEMENT_SIDE",
	"LEGEND_PLACEMENT_HIDDEN",
}

func (v *LegendPlacement) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LegendPlacement(value)
	for _, existing := range AllowedLegendPlacementEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LegendPlacement", value)
}

// NewLegendPlacementFromValue returns a pointer to a valid LegendPlacement
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLegendPlacementFromValue(v string) (*LegendPlacement, error) {
	ev := LegendPlacement(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LegendPlacement: valid values are %v", v, AllowedLegendPlacementEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LegendPlacement) IsValid() bool {
	for _, existing := range AllowedLegendPlacementEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LegendPlacement value
func (v LegendPlacement) Ptr() *LegendPlacement {
	return &v
}

type NullableLegendPlacement struct {
	value *LegendPlacement
	isSet bool
}

func (v NullableLegendPlacement) Get() *LegendPlacement {
	return v.value
}

func (v *NullableLegendPlacement) Set(val *LegendPlacement) {
	v.value = val
	v.isSet = true
}

func (v NullableLegendPlacement) IsSet() bool {
	return v.isSet
}

func (v *NullableLegendPlacement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegendPlacement(val *LegendPlacement) *NullableLegendPlacement {
	return &NullableLegendPlacement{value: val, isSet: true}
}

func (v NullableLegendPlacement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegendPlacement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

