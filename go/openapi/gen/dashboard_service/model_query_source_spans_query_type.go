/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// QuerySourceSpansQueryType - struct for QuerySourceSpansQueryType
type QuerySourceSpansQueryType struct {
	QuerySourceSpansQueryTypeFieldName *QuerySourceSpansQueryTypeFieldName
	QuerySourceSpansQueryTypeFieldValue *QuerySourceSpansQueryTypeFieldValue
}

// QuerySourceSpansQueryTypeFieldNameAsQuerySourceSpansQueryType is a convenience function that returns QuerySourceSpansQueryTypeFieldName wrapped in QuerySourceSpansQueryType
func QuerySourceSpansQueryTypeFieldNameAsQuerySourceSpansQueryType(v *QuerySourceSpansQueryTypeFieldName) QuerySourceSpansQueryType {
	return QuerySourceSpansQueryType{
		QuerySourceSpansQueryTypeFieldName: v,
	}
}

// QuerySourceSpansQueryTypeFieldValueAsQuerySourceSpansQueryType is a convenience function that returns QuerySourceSpansQueryTypeFieldValue wrapped in QuerySourceSpansQueryType
func QuerySourceSpansQueryTypeFieldValueAsQuerySourceSpansQueryType(v *QuerySourceSpansQueryTypeFieldValue) QuerySourceSpansQueryType {
	return QuerySourceSpansQueryType{
		QuerySourceSpansQueryTypeFieldValue: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *QuerySourceSpansQueryType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into QuerySourceSpansQueryTypeFieldName
	err = newStrictDecoder(data).Decode(&dst.QuerySourceSpansQueryTypeFieldName)
	if err == nil {
		jsonQuerySourceSpansQueryTypeFieldName, _ := json.Marshal(dst.QuerySourceSpansQueryTypeFieldName)
		if string(jsonQuerySourceSpansQueryTypeFieldName) == "{}" { // empty struct
			dst.QuerySourceSpansQueryTypeFieldName = nil
		} else {
			if err = validator.Validate(dst.QuerySourceSpansQueryTypeFieldName); err != nil {
				dst.QuerySourceSpansQueryTypeFieldName = nil
			} else {
				match++
			}
		}
	} else {
		dst.QuerySourceSpansQueryTypeFieldName = nil
	}

	// try to unmarshal data into QuerySourceSpansQueryTypeFieldValue
	err = newStrictDecoder(data).Decode(&dst.QuerySourceSpansQueryTypeFieldValue)
	if err == nil {
		jsonQuerySourceSpansQueryTypeFieldValue, _ := json.Marshal(dst.QuerySourceSpansQueryTypeFieldValue)
		if string(jsonQuerySourceSpansQueryTypeFieldValue) == "{}" { // empty struct
			dst.QuerySourceSpansQueryTypeFieldValue = nil
		} else {
			if err = validator.Validate(dst.QuerySourceSpansQueryTypeFieldValue); err != nil {
				dst.QuerySourceSpansQueryTypeFieldValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.QuerySourceSpansQueryTypeFieldValue = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.QuerySourceSpansQueryTypeFieldName = nil
		dst.QuerySourceSpansQueryTypeFieldValue = nil

		return fmt.Errorf("data matches more than one schema in oneOf(QuerySourceSpansQueryType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(QuerySourceSpansQueryType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src QuerySourceSpansQueryType) MarshalJSON() ([]byte, error) {
	if src.QuerySourceSpansQueryTypeFieldName != nil {
		return json.Marshal(&src.QuerySourceSpansQueryTypeFieldName)
	}

	if src.QuerySourceSpansQueryTypeFieldValue != nil {
		return json.Marshal(&src.QuerySourceSpansQueryTypeFieldValue)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *QuerySourceSpansQueryType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.QuerySourceSpansQueryTypeFieldName != nil {
		return obj.QuerySourceSpansQueryTypeFieldName
	}

	if obj.QuerySourceSpansQueryTypeFieldValue != nil {
		return obj.QuerySourceSpansQueryTypeFieldValue
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj QuerySourceSpansQueryType) GetActualInstanceValue() (interface{}) {
	if obj.QuerySourceSpansQueryTypeFieldName != nil {
		return *obj.QuerySourceSpansQueryTypeFieldName
	}

	if obj.QuerySourceSpansQueryTypeFieldValue != nil {
		return *obj.QuerySourceSpansQueryTypeFieldValue
	}

	// all schemas are nil
	return nil
}

type NullableQuerySourceSpansQueryType struct {
	value *QuerySourceSpansQueryType
	isSet bool
}

func (v NullableQuerySourceSpansQueryType) Get() *QuerySourceSpansQueryType {
	return v.value
}

func (v *NullableQuerySourceSpansQueryType) Set(val *QuerySourceSpansQueryType) {
	v.value = val
	v.isSet = true
}

func (v NullableQuerySourceSpansQueryType) IsSet() bool {
	return v.isSet
}

func (v *NullableQuerySourceSpansQueryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuerySourceSpansQueryType(val *QuerySourceSpansQueryType) *NullableQuerySourceSpansQueryType {
	return &NullableQuerySourceSpansQueryType{value: val, isSet: true}
}

func (v NullableQuerySourceSpansQueryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuerySourceSpansQueryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


