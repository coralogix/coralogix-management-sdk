/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the WidgetsPieChart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WidgetsPieChart{}

// WidgetsPieChart struct for WidgetsPieChart
type WidgetsPieChart struct {
	// Applied color scheme, one of the predefined values
	ColorScheme *string `json:"colorScheme,omitempty"`
	// Custom unit (requires the unit field to be set to custom to take effect)
	CustomUnit *string `json:"customUnit,omitempty"`
	DataModeType *WidgetsCommonDataModeType `json:"dataModeType,omitempty"`
	// Number indicating the decimal precision of the numeric values, within range 0-15
	Decimal *int32 `json:"decimal,omitempty"`
	// Whether to render numeric value without abbreviation
	DecimalPrecision *bool `json:"decimalPrecision,omitempty"`
	// Custom template name for a group, can contain variables
	GroupNameTemplate *string `json:"groupNameTemplate,omitempty"`
	// Whether to ignore color scheme and derive colors from algorithm
	HashColors *bool `json:"hashColors,omitempty"`
	LabelDefinition *WidgetsPieChartLabelDefinition `json:"labelDefinition,omitempty"`
	Legend *Legend `json:"legend,omitempty"`
	// Maximum number of slices on a chart
	MaxSlicesPerChart *int32 `json:"maxSlicesPerChart,omitempty"`
	// Minimum percentage threshold for slices to be displayed
	MinSlicePercentage *int32 `json:"minSlicePercentage,omitempty"`
	Query *PieChartQuery `json:"query,omitempty"`
	// Indicates whether to display the legend
	ShowLegend *bool `json:"showLegend,omitempty"`
	// Whether to show the total amount as a title
	ShowTotal *bool `json:"showTotal,omitempty"`
	StackDefinition *PieChartStackDefinition `json:"stackDefinition,omitempty"`
	Unit *CommonUnit `json:"unit,omitempty"`
}

// NewWidgetsPieChart instantiates a new WidgetsPieChart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWidgetsPieChart() *WidgetsPieChart {
	this := WidgetsPieChart{}
	return &this
}

// NewWidgetsPieChartWithDefaults instantiates a new WidgetsPieChart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWidgetsPieChartWithDefaults() *WidgetsPieChart {
	this := WidgetsPieChart{}
	return &this
}

// GetColorScheme returns the ColorScheme field value if set, zero value otherwise.
func (o *WidgetsPieChart) GetColorScheme() string {
	if o == nil || IsNil(o.ColorScheme) {
		var ret string
		return ret
	}
	return *o.ColorScheme
}

// GetColorSchemeOk returns a tuple with the ColorScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsPieChart) GetColorSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.ColorScheme) {
		return nil, false
	}
	return o.ColorScheme, true
}

// HasColorScheme returns a boolean if a field has been set.
func (o *WidgetsPieChart) HasColorScheme() bool {
	if o != nil && !IsNil(o.ColorScheme) {
		return true
	}

	return false
}

// SetColorScheme gets a reference to the given string and assigns it to the ColorScheme field.
func (o *WidgetsPieChart) SetColorScheme(v string) {
	o.ColorScheme = &v
}

// GetCustomUnit returns the CustomUnit field value if set, zero value otherwise.
func (o *WidgetsPieChart) GetCustomUnit() string {
	if o == nil || IsNil(o.CustomUnit) {
		var ret string
		return ret
	}
	return *o.CustomUnit
}

// GetCustomUnitOk returns a tuple with the CustomUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsPieChart) GetCustomUnitOk() (*string, bool) {
	if o == nil || IsNil(o.CustomUnit) {
		return nil, false
	}
	return o.CustomUnit, true
}

// HasCustomUnit returns a boolean if a field has been set.
func (o *WidgetsPieChart) HasCustomUnit() bool {
	if o != nil && !IsNil(o.CustomUnit) {
		return true
	}

	return false
}

// SetCustomUnit gets a reference to the given string and assigns it to the CustomUnit field.
func (o *WidgetsPieChart) SetCustomUnit(v string) {
	o.CustomUnit = &v
}

// GetDataModeType returns the DataModeType field value if set, zero value otherwise.
func (o *WidgetsPieChart) GetDataModeType() WidgetsCommonDataModeType {
	if o == nil || IsNil(o.DataModeType) {
		var ret WidgetsCommonDataModeType
		return ret
	}
	return *o.DataModeType
}

// GetDataModeTypeOk returns a tuple with the DataModeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsPieChart) GetDataModeTypeOk() (*WidgetsCommonDataModeType, bool) {
	if o == nil || IsNil(o.DataModeType) {
		return nil, false
	}
	return o.DataModeType, true
}

// HasDataModeType returns a boolean if a field has been set.
func (o *WidgetsPieChart) HasDataModeType() bool {
	if o != nil && !IsNil(o.DataModeType) {
		return true
	}

	return false
}

// SetDataModeType gets a reference to the given WidgetsCommonDataModeType and assigns it to the DataModeType field.
func (o *WidgetsPieChart) SetDataModeType(v WidgetsCommonDataModeType) {
	o.DataModeType = &v
}

// GetDecimal returns the Decimal field value if set, zero value otherwise.
func (o *WidgetsPieChart) GetDecimal() int32 {
	if o == nil || IsNil(o.Decimal) {
		var ret int32
		return ret
	}
	return *o.Decimal
}

// GetDecimalOk returns a tuple with the Decimal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsPieChart) GetDecimalOk() (*int32, bool) {
	if o == nil || IsNil(o.Decimal) {
		return nil, false
	}
	return o.Decimal, true
}

// HasDecimal returns a boolean if a field has been set.
func (o *WidgetsPieChart) HasDecimal() bool {
	if o != nil && !IsNil(o.Decimal) {
		return true
	}

	return false
}

// SetDecimal gets a reference to the given int32 and assigns it to the Decimal field.
func (o *WidgetsPieChart) SetDecimal(v int32) {
	o.Decimal = &v
}

// GetDecimalPrecision returns the DecimalPrecision field value if set, zero value otherwise.
func (o *WidgetsPieChart) GetDecimalPrecision() bool {
	if o == nil || IsNil(o.DecimalPrecision) {
		var ret bool
		return ret
	}
	return *o.DecimalPrecision
}

// GetDecimalPrecisionOk returns a tuple with the DecimalPrecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsPieChart) GetDecimalPrecisionOk() (*bool, bool) {
	if o == nil || IsNil(o.DecimalPrecision) {
		return nil, false
	}
	return o.DecimalPrecision, true
}

// HasDecimalPrecision returns a boolean if a field has been set.
func (o *WidgetsPieChart) HasDecimalPrecision() bool {
	if o != nil && !IsNil(o.DecimalPrecision) {
		return true
	}

	return false
}

// SetDecimalPrecision gets a reference to the given bool and assigns it to the DecimalPrecision field.
func (o *WidgetsPieChart) SetDecimalPrecision(v bool) {
	o.DecimalPrecision = &v
}

// GetGroupNameTemplate returns the GroupNameTemplate field value if set, zero value otherwise.
func (o *WidgetsPieChart) GetGroupNameTemplate() string {
	if o == nil || IsNil(o.GroupNameTemplate) {
		var ret string
		return ret
	}
	return *o.GroupNameTemplate
}

// GetGroupNameTemplateOk returns a tuple with the GroupNameTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsPieChart) GetGroupNameTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.GroupNameTemplate) {
		return nil, false
	}
	return o.GroupNameTemplate, true
}

// HasGroupNameTemplate returns a boolean if a field has been set.
func (o *WidgetsPieChart) HasGroupNameTemplate() bool {
	if o != nil && !IsNil(o.GroupNameTemplate) {
		return true
	}

	return false
}

// SetGroupNameTemplate gets a reference to the given string and assigns it to the GroupNameTemplate field.
func (o *WidgetsPieChart) SetGroupNameTemplate(v string) {
	o.GroupNameTemplate = &v
}

// GetHashColors returns the HashColors field value if set, zero value otherwise.
func (o *WidgetsPieChart) GetHashColors() bool {
	if o == nil || IsNil(o.HashColors) {
		var ret bool
		return ret
	}
	return *o.HashColors
}

// GetHashColorsOk returns a tuple with the HashColors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsPieChart) GetHashColorsOk() (*bool, bool) {
	if o == nil || IsNil(o.HashColors) {
		return nil, false
	}
	return o.HashColors, true
}

// HasHashColors returns a boolean if a field has been set.
func (o *WidgetsPieChart) HasHashColors() bool {
	if o != nil && !IsNil(o.HashColors) {
		return true
	}

	return false
}

// SetHashColors gets a reference to the given bool and assigns it to the HashColors field.
func (o *WidgetsPieChart) SetHashColors(v bool) {
	o.HashColors = &v
}

// GetLabelDefinition returns the LabelDefinition field value if set, zero value otherwise.
func (o *WidgetsPieChart) GetLabelDefinition() WidgetsPieChartLabelDefinition {
	if o == nil || IsNil(o.LabelDefinition) {
		var ret WidgetsPieChartLabelDefinition
		return ret
	}
	return *o.LabelDefinition
}

// GetLabelDefinitionOk returns a tuple with the LabelDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsPieChart) GetLabelDefinitionOk() (*WidgetsPieChartLabelDefinition, bool) {
	if o == nil || IsNil(o.LabelDefinition) {
		return nil, false
	}
	return o.LabelDefinition, true
}

// HasLabelDefinition returns a boolean if a field has been set.
func (o *WidgetsPieChart) HasLabelDefinition() bool {
	if o != nil && !IsNil(o.LabelDefinition) {
		return true
	}

	return false
}

// SetLabelDefinition gets a reference to the given WidgetsPieChartLabelDefinition and assigns it to the LabelDefinition field.
func (o *WidgetsPieChart) SetLabelDefinition(v WidgetsPieChartLabelDefinition) {
	o.LabelDefinition = &v
}

// GetLegend returns the Legend field value if set, zero value otherwise.
func (o *WidgetsPieChart) GetLegend() Legend {
	if o == nil || IsNil(o.Legend) {
		var ret Legend
		return ret
	}
	return *o.Legend
}

// GetLegendOk returns a tuple with the Legend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsPieChart) GetLegendOk() (*Legend, bool) {
	if o == nil || IsNil(o.Legend) {
		return nil, false
	}
	return o.Legend, true
}

// HasLegend returns a boolean if a field has been set.
func (o *WidgetsPieChart) HasLegend() bool {
	if o != nil && !IsNil(o.Legend) {
		return true
	}

	return false
}

// SetLegend gets a reference to the given Legend and assigns it to the Legend field.
func (o *WidgetsPieChart) SetLegend(v Legend) {
	o.Legend = &v
}

// GetMaxSlicesPerChart returns the MaxSlicesPerChart field value if set, zero value otherwise.
func (o *WidgetsPieChart) GetMaxSlicesPerChart() int32 {
	if o == nil || IsNil(o.MaxSlicesPerChart) {
		var ret int32
		return ret
	}
	return *o.MaxSlicesPerChart
}

// GetMaxSlicesPerChartOk returns a tuple with the MaxSlicesPerChart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsPieChart) GetMaxSlicesPerChartOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxSlicesPerChart) {
		return nil, false
	}
	return o.MaxSlicesPerChart, true
}

// HasMaxSlicesPerChart returns a boolean if a field has been set.
func (o *WidgetsPieChart) HasMaxSlicesPerChart() bool {
	if o != nil && !IsNil(o.MaxSlicesPerChart) {
		return true
	}

	return false
}

// SetMaxSlicesPerChart gets a reference to the given int32 and assigns it to the MaxSlicesPerChart field.
func (o *WidgetsPieChart) SetMaxSlicesPerChart(v int32) {
	o.MaxSlicesPerChart = &v
}

// GetMinSlicePercentage returns the MinSlicePercentage field value if set, zero value otherwise.
func (o *WidgetsPieChart) GetMinSlicePercentage() int32 {
	if o == nil || IsNil(o.MinSlicePercentage) {
		var ret int32
		return ret
	}
	return *o.MinSlicePercentage
}

// GetMinSlicePercentageOk returns a tuple with the MinSlicePercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsPieChart) GetMinSlicePercentageOk() (*int32, bool) {
	if o == nil || IsNil(o.MinSlicePercentage) {
		return nil, false
	}
	return o.MinSlicePercentage, true
}

// HasMinSlicePercentage returns a boolean if a field has been set.
func (o *WidgetsPieChart) HasMinSlicePercentage() bool {
	if o != nil && !IsNil(o.MinSlicePercentage) {
		return true
	}

	return false
}

// SetMinSlicePercentage gets a reference to the given int32 and assigns it to the MinSlicePercentage field.
func (o *WidgetsPieChart) SetMinSlicePercentage(v int32) {
	o.MinSlicePercentage = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *WidgetsPieChart) GetQuery() PieChartQuery {
	if o == nil || IsNil(o.Query) {
		var ret PieChartQuery
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsPieChart) GetQueryOk() (*PieChartQuery, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *WidgetsPieChart) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given PieChartQuery and assigns it to the Query field.
func (o *WidgetsPieChart) SetQuery(v PieChartQuery) {
	o.Query = &v
}

// GetShowLegend returns the ShowLegend field value if set, zero value otherwise.
func (o *WidgetsPieChart) GetShowLegend() bool {
	if o == nil || IsNil(o.ShowLegend) {
		var ret bool
		return ret
	}
	return *o.ShowLegend
}

// GetShowLegendOk returns a tuple with the ShowLegend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsPieChart) GetShowLegendOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowLegend) {
		return nil, false
	}
	return o.ShowLegend, true
}

// HasShowLegend returns a boolean if a field has been set.
func (o *WidgetsPieChart) HasShowLegend() bool {
	if o != nil && !IsNil(o.ShowLegend) {
		return true
	}

	return false
}

// SetShowLegend gets a reference to the given bool and assigns it to the ShowLegend field.
func (o *WidgetsPieChart) SetShowLegend(v bool) {
	o.ShowLegend = &v
}

// GetShowTotal returns the ShowTotal field value if set, zero value otherwise.
func (o *WidgetsPieChart) GetShowTotal() bool {
	if o == nil || IsNil(o.ShowTotal) {
		var ret bool
		return ret
	}
	return *o.ShowTotal
}

// GetShowTotalOk returns a tuple with the ShowTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsPieChart) GetShowTotalOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowTotal) {
		return nil, false
	}
	return o.ShowTotal, true
}

// HasShowTotal returns a boolean if a field has been set.
func (o *WidgetsPieChart) HasShowTotal() bool {
	if o != nil && !IsNil(o.ShowTotal) {
		return true
	}

	return false
}

// SetShowTotal gets a reference to the given bool and assigns it to the ShowTotal field.
func (o *WidgetsPieChart) SetShowTotal(v bool) {
	o.ShowTotal = &v
}

// GetStackDefinition returns the StackDefinition field value if set, zero value otherwise.
func (o *WidgetsPieChart) GetStackDefinition() PieChartStackDefinition {
	if o == nil || IsNil(o.StackDefinition) {
		var ret PieChartStackDefinition
		return ret
	}
	return *o.StackDefinition
}

// GetStackDefinitionOk returns a tuple with the StackDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsPieChart) GetStackDefinitionOk() (*PieChartStackDefinition, bool) {
	if o == nil || IsNil(o.StackDefinition) {
		return nil, false
	}
	return o.StackDefinition, true
}

// HasStackDefinition returns a boolean if a field has been set.
func (o *WidgetsPieChart) HasStackDefinition() bool {
	if o != nil && !IsNil(o.StackDefinition) {
		return true
	}

	return false
}

// SetStackDefinition gets a reference to the given PieChartStackDefinition and assigns it to the StackDefinition field.
func (o *WidgetsPieChart) SetStackDefinition(v PieChartStackDefinition) {
	o.StackDefinition = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *WidgetsPieChart) GetUnit() CommonUnit {
	if o == nil || IsNil(o.Unit) {
		var ret CommonUnit
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsPieChart) GetUnitOk() (*CommonUnit, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *WidgetsPieChart) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given CommonUnit and assigns it to the Unit field.
func (o *WidgetsPieChart) SetUnit(v CommonUnit) {
	o.Unit = &v
}

func (o WidgetsPieChart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WidgetsPieChart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ColorScheme) {
		toSerialize["colorScheme"] = o.ColorScheme
	}
	if !IsNil(o.CustomUnit) {
		toSerialize["customUnit"] = o.CustomUnit
	}
	if !IsNil(o.DataModeType) {
		toSerialize["dataModeType"] = o.DataModeType
	}
	if !IsNil(o.Decimal) {
		toSerialize["decimal"] = o.Decimal
	}
	if !IsNil(o.DecimalPrecision) {
		toSerialize["decimalPrecision"] = o.DecimalPrecision
	}
	if !IsNil(o.GroupNameTemplate) {
		toSerialize["groupNameTemplate"] = o.GroupNameTemplate
	}
	if !IsNil(o.HashColors) {
		toSerialize["hashColors"] = o.HashColors
	}
	if !IsNil(o.LabelDefinition) {
		toSerialize["labelDefinition"] = o.LabelDefinition
	}
	if !IsNil(o.Legend) {
		toSerialize["legend"] = o.Legend
	}
	if !IsNil(o.MaxSlicesPerChart) {
		toSerialize["maxSlicesPerChart"] = o.MaxSlicesPerChart
	}
	if !IsNil(o.MinSlicePercentage) {
		toSerialize["minSlicePercentage"] = o.MinSlicePercentage
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.ShowLegend) {
		toSerialize["showLegend"] = o.ShowLegend
	}
	if !IsNil(o.ShowTotal) {
		toSerialize["showTotal"] = o.ShowTotal
	}
	if !IsNil(o.StackDefinition) {
		toSerialize["stackDefinition"] = o.StackDefinition
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	return toSerialize, nil
}

type NullableWidgetsPieChart struct {
	value *WidgetsPieChart
	isSet bool
}

func (v NullableWidgetsPieChart) Get() *WidgetsPieChart {
	return v.value
}

func (v *NullableWidgetsPieChart) Set(val *WidgetsPieChart) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetsPieChart) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetsPieChart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetsPieChart(val *WidgetsPieChart) *NullableWidgetsPieChart {
	return &NullableWidgetsPieChart{value: val, isSet: true}
}

func (v NullableWidgetsPieChart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetsPieChart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


