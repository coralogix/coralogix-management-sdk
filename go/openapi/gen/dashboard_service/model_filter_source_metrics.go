/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the FilterSourceMetrics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterSourceMetrics{}

// FilterSourceMetrics Defines the type of data the filter applies to.
type FilterSourceMetrics struct {
	Metrics *MetricsFilter `json:"metrics,omitempty"`
}

// NewFilterSourceMetrics instantiates a new FilterSourceMetrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterSourceMetrics() *FilterSourceMetrics {
	this := FilterSourceMetrics{}
	return &this
}

// NewFilterSourceMetricsWithDefaults instantiates a new FilterSourceMetrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterSourceMetricsWithDefaults() *FilterSourceMetrics {
	this := FilterSourceMetrics{}
	return &this
}

// GetMetrics returns the Metrics field value if set, zero value otherwise.
func (o *FilterSourceMetrics) GetMetrics() MetricsFilter {
	if o == nil || IsNil(o.Metrics) {
		var ret MetricsFilter
		return ret
	}
	return *o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterSourceMetrics) GetMetricsOk() (*MetricsFilter, bool) {
	if o == nil || IsNil(o.Metrics) {
		return nil, false
	}
	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *FilterSourceMetrics) HasMetrics() bool {
	if o != nil && !IsNil(o.Metrics) {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given MetricsFilter and assigns it to the Metrics field.
func (o *FilterSourceMetrics) SetMetrics(v MetricsFilter) {
	o.Metrics = &v
}

func (o FilterSourceMetrics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterSourceMetrics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metrics) {
		toSerialize["metrics"] = o.Metrics
	}
	return toSerialize, nil
}

type NullableFilterSourceMetrics struct {
	value *FilterSourceMetrics
	isSet bool
}

func (v NullableFilterSourceMetrics) Get() *FilterSourceMetrics {
	return v.value
}

func (v *NullableFilterSourceMetrics) Set(val *FilterSourceMetrics) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterSourceMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterSourceMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterSourceMetrics(val *FilterSourceMetrics) *NullableFilterSourceMetrics {
	return &NullableFilterSourceMetrics{value: val, isSet: true}
}

func (v NullableFilterSourceMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterSourceMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


