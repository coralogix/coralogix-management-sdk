/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// SortByType the model 'SortByType'
type SortByType string

// List of SortByType
const (
	SORTBYTYPE_SORT_BY_TYPE_UNSPECIFIED SortByType = "SORT_BY_TYPE_UNSPECIFIED"
	SORTBYTYPE_SORT_BY_TYPE_VALUE SortByType = "SORT_BY_TYPE_VALUE"
	SORTBYTYPE_SORT_BY_TYPE_NAME SortByType = "SORT_BY_TYPE_NAME"
)

// All allowed values of SortByType enum
var AllowedSortByTypeEnumValues = []SortByType{
	"SORT_BY_TYPE_UNSPECIFIED",
	"SORT_BY_TYPE_VALUE",
	"SORT_BY_TYPE_NAME",
}

func (v *SortByType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SortByType(value)
	for _, existing := range AllowedSortByTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SortByType", value)
}

// NewSortByTypeFromValue returns a pointer to a valid SortByType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSortByTypeFromValue(v string) (*SortByType, error) {
	ev := SortByType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SortByType: valid values are %v", v, AllowedSortByTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SortByType) IsValid() bool {
	for _, existing := range AllowedSortByTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SortByType value
func (v SortByType) Ptr() *SortByType {
	return &v
}

type NullableSortByType struct {
	value *SortByType
	isSet bool
}

func (v NullableSortByType) Get() *SortByType {
	return v.value
}

func (v *NullableSortByType) Set(val *SortByType) {
	v.value = val
	v.isSet = true
}

func (v NullableSortByType) IsSet() bool {
	return v.isSet
}

func (v *NullableSortByType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSortByType(val *SortByType) *NullableSortByType {
	return &NullableSortByType{value: val, isSet: true}
}

func (v NullableSortByType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSortByType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

