/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the DefinitionGauge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefinitionGauge{}

// DefinitionGauge struct for DefinitionGauge
type DefinitionGauge struct {
	Gauge *WidgetsGauge `json:"gauge,omitempty"`
}

// NewDefinitionGauge instantiates a new DefinitionGauge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefinitionGauge() *DefinitionGauge {
	this := DefinitionGauge{}
	return &this
}

// NewDefinitionGaugeWithDefaults instantiates a new DefinitionGauge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefinitionGaugeWithDefaults() *DefinitionGauge {
	this := DefinitionGauge{}
	return &this
}

// GetGauge returns the Gauge field value if set, zero value otherwise.
func (o *DefinitionGauge) GetGauge() WidgetsGauge {
	if o == nil || IsNil(o.Gauge) {
		var ret WidgetsGauge
		return ret
	}
	return *o.Gauge
}

// GetGaugeOk returns a tuple with the Gauge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinitionGauge) GetGaugeOk() (*WidgetsGauge, bool) {
	if o == nil || IsNil(o.Gauge) {
		return nil, false
	}
	return o.Gauge, true
}

// HasGauge returns a boolean if a field has been set.
func (o *DefinitionGauge) HasGauge() bool {
	if o != nil && !IsNil(o.Gauge) {
		return true
	}

	return false
}

// SetGauge gets a reference to the given WidgetsGauge and assigns it to the Gauge field.
func (o *DefinitionGauge) SetGauge(v WidgetsGauge) {
	o.Gauge = &v
}

func (o DefinitionGauge) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefinitionGauge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Gauge) {
		toSerialize["gauge"] = o.Gauge
	}
	return toSerialize, nil
}

type NullableDefinitionGauge struct {
	value *DefinitionGauge
	isSet bool
}

func (v NullableDefinitionGauge) Get() *DefinitionGauge {
	return v.value
}

func (v *NullableDefinitionGauge) Set(val *DefinitionGauge) {
	v.value = val
	v.isSet = true
}

func (v NullableDefinitionGauge) IsSet() bool {
	return v.isSet
}

func (v *NullableDefinitionGauge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefinitionGauge(val *DefinitionGauge) *NullableDefinitionGauge {
	return &NullableDefinitionGauge{value: val, isSet: true}
}

func (v NullableDefinitionGauge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefinitionGauge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


