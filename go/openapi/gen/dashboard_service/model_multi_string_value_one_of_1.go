/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the MultiStringValueOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiStringValueOneOf1{}

// MultiStringValueOneOf1 struct for MultiStringValueOneOf1
type MultiStringValueOneOf1 struct {
	List *ListValue `json:"list,omitempty"`
}

// NewMultiStringValueOneOf1 instantiates a new MultiStringValueOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiStringValueOneOf1() *MultiStringValueOneOf1 {
	this := MultiStringValueOneOf1{}
	return &this
}

// NewMultiStringValueOneOf1WithDefaults instantiates a new MultiStringValueOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiStringValueOneOf1WithDefaults() *MultiStringValueOneOf1 {
	this := MultiStringValueOneOf1{}
	return &this
}

// GetList returns the List field value if set, zero value otherwise.
func (o *MultiStringValueOneOf1) GetList() ListValue {
	if o == nil || IsNil(o.List) {
		var ret ListValue
		return ret
	}
	return *o.List
}

// GetListOk returns a tuple with the List field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiStringValueOneOf1) GetListOk() (*ListValue, bool) {
	if o == nil || IsNil(o.List) {
		return nil, false
	}
	return o.List, true
}

// HasList returns a boolean if a field has been set.
func (o *MultiStringValueOneOf1) HasList() bool {
	if o != nil && !IsNil(o.List) {
		return true
	}

	return false
}

// SetList gets a reference to the given ListValue and assigns it to the List field.
func (o *MultiStringValueOneOf1) SetList(v ListValue) {
	o.List = &v
}

func (o MultiStringValueOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiStringValueOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.List) {
		toSerialize["list"] = o.List
	}
	return toSerialize, nil
}

type NullableMultiStringValueOneOf1 struct {
	value *MultiStringValueOneOf1
	isSet bool
}

func (v NullableMultiStringValueOneOf1) Get() *MultiStringValueOneOf1 {
	return v.value
}

func (v *NullableMultiStringValueOneOf1) Set(val *MultiStringValueOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiStringValueOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiStringValueOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiStringValueOneOf1(val *MultiStringValueOneOf1) *NullableMultiStringValueOneOf1 {
	return &NullableMultiStringValueOneOf1{value: val, isSet: true}
}

func (v NullableMultiStringValueOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiStringValueOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


