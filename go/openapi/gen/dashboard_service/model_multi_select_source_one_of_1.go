/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the MultiSelectSourceOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiSelectSourceOneOf1{}

// MultiSelectSourceOneOf1 struct for MultiSelectSourceOneOf1
type MultiSelectSourceOneOf1 struct {
	MetricLabel *MetricLabelSource `json:"metricLabel,omitempty"`
}

// NewMultiSelectSourceOneOf1 instantiates a new MultiSelectSourceOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiSelectSourceOneOf1() *MultiSelectSourceOneOf1 {
	this := MultiSelectSourceOneOf1{}
	return &this
}

// NewMultiSelectSourceOneOf1WithDefaults instantiates a new MultiSelectSourceOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiSelectSourceOneOf1WithDefaults() *MultiSelectSourceOneOf1 {
	this := MultiSelectSourceOneOf1{}
	return &this
}

// GetMetricLabel returns the MetricLabel field value if set, zero value otherwise.
func (o *MultiSelectSourceOneOf1) GetMetricLabel() MetricLabelSource {
	if o == nil || IsNil(o.MetricLabel) {
		var ret MetricLabelSource
		return ret
	}
	return *o.MetricLabel
}

// GetMetricLabelOk returns a tuple with the MetricLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiSelectSourceOneOf1) GetMetricLabelOk() (*MetricLabelSource, bool) {
	if o == nil || IsNil(o.MetricLabel) {
		return nil, false
	}
	return o.MetricLabel, true
}

// HasMetricLabel returns a boolean if a field has been set.
func (o *MultiSelectSourceOneOf1) HasMetricLabel() bool {
	if o != nil && !IsNil(o.MetricLabel) {
		return true
	}

	return false
}

// SetMetricLabel gets a reference to the given MetricLabelSource and assigns it to the MetricLabel field.
func (o *MultiSelectSourceOneOf1) SetMetricLabel(v MetricLabelSource) {
	o.MetricLabel = &v
}

func (o MultiSelectSourceOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiSelectSourceOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MetricLabel) {
		toSerialize["metricLabel"] = o.MetricLabel
	}
	return toSerialize, nil
}

type NullableMultiSelectSourceOneOf1 struct {
	value *MultiSelectSourceOneOf1
	isSet bool
}

func (v NullableMultiSelectSourceOneOf1) Get() *MultiSelectSourceOneOf1 {
	return v.value
}

func (v *NullableMultiSelectSourceOneOf1) Set(val *MultiSelectSourceOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiSelectSourceOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiSelectSourceOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiSelectSourceOneOf1(val *MultiSelectSourceOneOf1) *NullableMultiSelectSourceOneOf1 {
	return &NullableMultiSelectSourceOneOf1{value: val, isSet: true}
}

func (v NullableMultiSelectSourceOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiSelectSourceOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


