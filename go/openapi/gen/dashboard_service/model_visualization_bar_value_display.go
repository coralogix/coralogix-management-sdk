/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// VisualizationBarValueDisplay the model 'VisualizationBarValueDisplay'
type VisualizationBarValueDisplay string

// List of Visualization.BarValueDisplay
const (
	VISUALIZATIONBARVALUEDISPLAY_BAR_VALUE_DISPLAY_UNSPECIFIED VisualizationBarValueDisplay = "BAR_VALUE_DISPLAY_UNSPECIFIED"
	VISUALIZATIONBARVALUEDISPLAY_BAR_VALUE_DISPLAY_TOP VisualizationBarValueDisplay = "BAR_VALUE_DISPLAY_TOP"
	VISUALIZATIONBARVALUEDISPLAY_BAR_VALUE_DISPLAY_INSIDE VisualizationBarValueDisplay = "BAR_VALUE_DISPLAY_INSIDE"
	VISUALIZATIONBARVALUEDISPLAY_BAR_VALUE_DISPLAY_BOTH VisualizationBarValueDisplay = "BAR_VALUE_DISPLAY_BOTH"
)

// All allowed values of VisualizationBarValueDisplay enum
var AllowedVisualizationBarValueDisplayEnumValues = []VisualizationBarValueDisplay{
	"BAR_VALUE_DISPLAY_UNSPECIFIED",
	"BAR_VALUE_DISPLAY_TOP",
	"BAR_VALUE_DISPLAY_INSIDE",
	"BAR_VALUE_DISPLAY_BOTH",
}

func (v *VisualizationBarValueDisplay) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VisualizationBarValueDisplay(value)
	for _, existing := range AllowedVisualizationBarValueDisplayEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VisualizationBarValueDisplay", value)
}

// NewVisualizationBarValueDisplayFromValue returns a pointer to a valid VisualizationBarValueDisplay
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVisualizationBarValueDisplayFromValue(v string) (*VisualizationBarValueDisplay, error) {
	ev := VisualizationBarValueDisplay(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VisualizationBarValueDisplay: valid values are %v", v, AllowedVisualizationBarValueDisplayEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VisualizationBarValueDisplay) IsValid() bool {
	for _, existing := range AllowedVisualizationBarValueDisplayEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Visualization.BarValueDisplay value
func (v VisualizationBarValueDisplay) Ptr() *VisualizationBarValueDisplay {
	return &v
}

type NullableVisualizationBarValueDisplay struct {
	value *VisualizationBarValueDisplay
	isSet bool
}

func (v NullableVisualizationBarValueDisplay) Get() *VisualizationBarValueDisplay {
	return v.value
}

func (v *NullableVisualizationBarValueDisplay) Set(val *VisualizationBarValueDisplay) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualizationBarValueDisplay) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualizationBarValueDisplay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualizationBarValueDisplay(val *VisualizationBarValueDisplay) *NullableVisualizationBarValueDisplay {
	return &NullableVisualizationBarValueDisplay{value: val, isSet: true}
}

func (v NullableVisualizationBarValueDisplay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualizationBarValueDisplay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

