/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the WidgetDefinitionMarkdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WidgetDefinitionMarkdown{}

// WidgetDefinitionMarkdown struct for WidgetDefinitionMarkdown
type WidgetDefinitionMarkdown struct {
	Markdown *Markdown `json:"markdown,omitempty"`
}

// NewWidgetDefinitionMarkdown instantiates a new WidgetDefinitionMarkdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWidgetDefinitionMarkdown() *WidgetDefinitionMarkdown {
	this := WidgetDefinitionMarkdown{}
	return &this
}

// NewWidgetDefinitionMarkdownWithDefaults instantiates a new WidgetDefinitionMarkdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWidgetDefinitionMarkdownWithDefaults() *WidgetDefinitionMarkdown {
	this := WidgetDefinitionMarkdown{}
	return &this
}

// GetMarkdown returns the Markdown field value if set, zero value otherwise.
func (o *WidgetDefinitionMarkdown) GetMarkdown() Markdown {
	if o == nil || IsNil(o.Markdown) {
		var ret Markdown
		return ret
	}
	return *o.Markdown
}

// GetMarkdownOk returns a tuple with the Markdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetDefinitionMarkdown) GetMarkdownOk() (*Markdown, bool) {
	if o == nil || IsNil(o.Markdown) {
		return nil, false
	}
	return o.Markdown, true
}

// HasMarkdown returns a boolean if a field has been set.
func (o *WidgetDefinitionMarkdown) HasMarkdown() bool {
	if o != nil && !IsNil(o.Markdown) {
		return true
	}

	return false
}

// SetMarkdown gets a reference to the given Markdown and assigns it to the Markdown field.
func (o *WidgetDefinitionMarkdown) SetMarkdown(v Markdown) {
	o.Markdown = &v
}

func (o WidgetDefinitionMarkdown) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WidgetDefinitionMarkdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Markdown) {
		toSerialize["markdown"] = o.Markdown
	}
	return toSerialize, nil
}

type NullableWidgetDefinitionMarkdown struct {
	value *WidgetDefinitionMarkdown
	isSet bool
}

func (v NullableWidgetDefinitionMarkdown) Get() *WidgetDefinitionMarkdown {
	return v.value
}

func (v *NullableWidgetDefinitionMarkdown) Set(val *WidgetDefinitionMarkdown) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetDefinitionMarkdown) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetDefinitionMarkdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetDefinitionMarkdown(val *WidgetDefinitionMarkdown) *NullableWidgetDefinitionMarkdown {
	return &NullableWidgetDefinitionMarkdown{value: val, isSet: true}
}

func (v NullableWidgetDefinitionMarkdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetDefinitionMarkdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


