/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// FilterOperator - struct for FilterOperator
type FilterOperator struct {
	Operator *Operator
	Operator1 *Operator1
}

// OperatorAsFilterOperator is a convenience function that returns Operator wrapped in FilterOperator
func OperatorAsFilterOperator(v *Operator) FilterOperator {
	return FilterOperator{
		Operator: v,
	}
}

// Operator1AsFilterOperator is a convenience function that returns Operator1 wrapped in FilterOperator
func Operator1AsFilterOperator(v *Operator1) FilterOperator {
	return FilterOperator{
		Operator1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FilterOperator) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Operator
	err = newStrictDecoder(data).Decode(&dst.Operator)
	if err == nil {
		jsonOperator, _ := json.Marshal(dst.Operator)
		if string(jsonOperator) == "{}" { // empty struct
			dst.Operator = nil
		} else {
			if err = validator.Validate(dst.Operator); err != nil {
				dst.Operator = nil
			} else {
				match++
			}
		}
	} else {
		dst.Operator = nil
	}

	// try to unmarshal data into Operator1
	err = newStrictDecoder(data).Decode(&dst.Operator1)
	if err == nil {
		jsonOperator1, _ := json.Marshal(dst.Operator1)
		if string(jsonOperator1) == "{}" { // empty struct
			dst.Operator1 = nil
		} else {
			if err = validator.Validate(dst.Operator1); err != nil {
				dst.Operator1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Operator1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Operator = nil
		dst.Operator1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FilterOperator)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FilterOperator)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FilterOperator) MarshalJSON() ([]byte, error) {
	if src.Operator != nil {
		return json.Marshal(&src.Operator)
	}

	if src.Operator1 != nil {
		return json.Marshal(&src.Operator1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FilterOperator) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Operator != nil {
		return obj.Operator
	}

	if obj.Operator1 != nil {
		return obj.Operator1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj FilterOperator) GetActualInstanceValue() (interface{}) {
	if obj.Operator != nil {
		return *obj.Operator
	}

	if obj.Operator1 != nil {
		return *obj.Operator1
	}

	// all schemas are nil
	return nil
}

type NullableFilterOperator struct {
	value *FilterOperator
	isSet bool
}

func (v NullableFilterOperator) Get() *FilterOperator {
	return v.value
}

func (v *NullableFilterOperator) Set(val *FilterOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterOperator(val *FilterOperator) *NullableFilterOperator {
	return &NullableFilterOperator{value: val, isSet: true}
}

func (v NullableFilterOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


