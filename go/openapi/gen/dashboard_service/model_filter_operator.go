/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// FilterOperator - struct for FilterOperator
type FilterOperator struct {
	FilterOperatorEquals *FilterOperatorEquals
	FilterOperatorNotEquals *FilterOperatorNotEquals
}

// FilterOperatorEqualsAsFilterOperator is a convenience function that returns FilterOperatorEquals wrapped in FilterOperator
func FilterOperatorEqualsAsFilterOperator(v *FilterOperatorEquals) FilterOperator {
	return FilterOperator{
		FilterOperatorEquals: v,
	}
}

// FilterOperatorNotEqualsAsFilterOperator is a convenience function that returns FilterOperatorNotEquals wrapped in FilterOperator
func FilterOperatorNotEqualsAsFilterOperator(v *FilterOperatorNotEquals) FilterOperator {
	return FilterOperator{
		FilterOperatorNotEquals: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FilterOperator) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FilterOperatorEquals
	err = newStrictDecoder(data).Decode(&dst.FilterOperatorEquals)
	if err == nil {
		jsonFilterOperatorEquals, _ := json.Marshal(dst.FilterOperatorEquals)
		if string(jsonFilterOperatorEquals) == "{}" { // empty struct
			dst.FilterOperatorEquals = nil
		} else {
			if err = validator.Validate(dst.FilterOperatorEquals); err != nil {
				dst.FilterOperatorEquals = nil
			} else {
				match++
			}
		}
	} else {
		dst.FilterOperatorEquals = nil
	}

	// try to unmarshal data into FilterOperatorNotEquals
	err = newStrictDecoder(data).Decode(&dst.FilterOperatorNotEquals)
	if err == nil {
		jsonFilterOperatorNotEquals, _ := json.Marshal(dst.FilterOperatorNotEquals)
		if string(jsonFilterOperatorNotEquals) == "{}" { // empty struct
			dst.FilterOperatorNotEquals = nil
		} else {
			if err = validator.Validate(dst.FilterOperatorNotEquals); err != nil {
				dst.FilterOperatorNotEquals = nil
			} else {
				match++
			}
		}
	} else {
		dst.FilterOperatorNotEquals = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FilterOperatorEquals = nil
		dst.FilterOperatorNotEquals = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FilterOperator)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FilterOperator)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FilterOperator) MarshalJSON() ([]byte, error) {
	if src.FilterOperatorEquals != nil {
		return json.Marshal(&src.FilterOperatorEquals)
	}

	if src.FilterOperatorNotEquals != nil {
		return json.Marshal(&src.FilterOperatorNotEquals)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FilterOperator) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FilterOperatorEquals != nil {
		return obj.FilterOperatorEquals
	}

	if obj.FilterOperatorNotEquals != nil {
		return obj.FilterOperatorNotEquals
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj FilterOperator) GetActualInstanceValue() (interface{}) {
	if obj.FilterOperatorEquals != nil {
		return *obj.FilterOperatorEquals
	}

	if obj.FilterOperatorNotEquals != nil {
		return *obj.FilterOperatorNotEquals
	}

	// all schemas are nil
	return nil
}

type NullableFilterOperator struct {
	value *FilterOperator
	isSet bool
}

func (v NullableFilterOperator) Get() *FilterOperator {
	return v.value
}

func (v *NullableFilterOperator) Set(val *FilterOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterOperator(val *FilterOperator) *NullableFilterOperator {
	return &NullableFilterOperator{value: val, isSet: true}
}

func (v NullableFilterOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


