/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DynamicQuery - struct for DynamicQuery
type DynamicQuery struct {
	DynamicQueryDataprime *DynamicQueryDataprime
	DynamicQueryLogs *DynamicQueryLogs
	DynamicQueryMetrics *DynamicQueryMetrics
	DynamicQuerySpans *DynamicQuerySpans
}

// DynamicQueryDataprimeAsDynamicQuery is a convenience function that returns DynamicQueryDataprime wrapped in DynamicQuery
func DynamicQueryDataprimeAsDynamicQuery(v *DynamicQueryDataprime) DynamicQuery {
	return DynamicQuery{
		DynamicQueryDataprime: v,
	}
}

// DynamicQueryLogsAsDynamicQuery is a convenience function that returns DynamicQueryLogs wrapped in DynamicQuery
func DynamicQueryLogsAsDynamicQuery(v *DynamicQueryLogs) DynamicQuery {
	return DynamicQuery{
		DynamicQueryLogs: v,
	}
}

// DynamicQueryMetricsAsDynamicQuery is a convenience function that returns DynamicQueryMetrics wrapped in DynamicQuery
func DynamicQueryMetricsAsDynamicQuery(v *DynamicQueryMetrics) DynamicQuery {
	return DynamicQuery{
		DynamicQueryMetrics: v,
	}
}

// DynamicQuerySpansAsDynamicQuery is a convenience function that returns DynamicQuerySpans wrapped in DynamicQuery
func DynamicQuerySpansAsDynamicQuery(v *DynamicQuerySpans) DynamicQuery {
	return DynamicQuery{
		DynamicQuerySpans: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DynamicQuery) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DynamicQueryDataprime
	err = newStrictDecoder(data).Decode(&dst.DynamicQueryDataprime)
	if err == nil {
		jsonDynamicQueryDataprime, _ := json.Marshal(dst.DynamicQueryDataprime)
		if string(jsonDynamicQueryDataprime) == "{}" { // empty struct
			dst.DynamicQueryDataprime = nil
		} else {
			if err = validator.Validate(dst.DynamicQueryDataprime); err != nil {
				dst.DynamicQueryDataprime = nil
			} else {
				match++
			}
		}
	} else {
		dst.DynamicQueryDataprime = nil
	}

	// try to unmarshal data into DynamicQueryLogs
	err = newStrictDecoder(data).Decode(&dst.DynamicQueryLogs)
	if err == nil {
		jsonDynamicQueryLogs, _ := json.Marshal(dst.DynamicQueryLogs)
		if string(jsonDynamicQueryLogs) == "{}" { // empty struct
			dst.DynamicQueryLogs = nil
		} else {
			if err = validator.Validate(dst.DynamicQueryLogs); err != nil {
				dst.DynamicQueryLogs = nil
			} else {
				match++
			}
		}
	} else {
		dst.DynamicQueryLogs = nil
	}

	// try to unmarshal data into DynamicQueryMetrics
	err = newStrictDecoder(data).Decode(&dst.DynamicQueryMetrics)
	if err == nil {
		jsonDynamicQueryMetrics, _ := json.Marshal(dst.DynamicQueryMetrics)
		if string(jsonDynamicQueryMetrics) == "{}" { // empty struct
			dst.DynamicQueryMetrics = nil
		} else {
			if err = validator.Validate(dst.DynamicQueryMetrics); err != nil {
				dst.DynamicQueryMetrics = nil
			} else {
				match++
			}
		}
	} else {
		dst.DynamicQueryMetrics = nil
	}

	// try to unmarshal data into DynamicQuerySpans
	err = newStrictDecoder(data).Decode(&dst.DynamicQuerySpans)
	if err == nil {
		jsonDynamicQuerySpans, _ := json.Marshal(dst.DynamicQuerySpans)
		if string(jsonDynamicQuerySpans) == "{}" { // empty struct
			dst.DynamicQuerySpans = nil
		} else {
			if err = validator.Validate(dst.DynamicQuerySpans); err != nil {
				dst.DynamicQuerySpans = nil
			} else {
				match++
			}
		}
	} else {
		dst.DynamicQuerySpans = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DynamicQueryDataprime = nil
		dst.DynamicQueryLogs = nil
		dst.DynamicQueryMetrics = nil
		dst.DynamicQuerySpans = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DynamicQuery)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DynamicQuery)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DynamicQuery) MarshalJSON() ([]byte, error) {
	if src.DynamicQueryDataprime != nil {
		return json.Marshal(&src.DynamicQueryDataprime)
	}

	if src.DynamicQueryLogs != nil {
		return json.Marshal(&src.DynamicQueryLogs)
	}

	if src.DynamicQueryMetrics != nil {
		return json.Marshal(&src.DynamicQueryMetrics)
	}

	if src.DynamicQuerySpans != nil {
		return json.Marshal(&src.DynamicQuerySpans)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DynamicQuery) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DynamicQueryDataprime != nil {
		return obj.DynamicQueryDataprime
	}

	if obj.DynamicQueryLogs != nil {
		return obj.DynamicQueryLogs
	}

	if obj.DynamicQueryMetrics != nil {
		return obj.DynamicQueryMetrics
	}

	if obj.DynamicQuerySpans != nil {
		return obj.DynamicQuerySpans
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DynamicQuery) GetActualInstanceValue() (interface{}) {
	if obj.DynamicQueryDataprime != nil {
		return *obj.DynamicQueryDataprime
	}

	if obj.DynamicQueryLogs != nil {
		return *obj.DynamicQueryLogs
	}

	if obj.DynamicQueryMetrics != nil {
		return *obj.DynamicQueryMetrics
	}

	if obj.DynamicQuerySpans != nil {
		return *obj.DynamicQuerySpans
	}

	// all schemas are nil
	return nil
}

type NullableDynamicQuery struct {
	value *DynamicQuery
	isSet bool
}

func (v NullableDynamicQuery) Get() *DynamicQuery {
	return v.value
}

func (v *NullableDynamicQuery) Set(val *DynamicQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicQuery(val *DynamicQuery) *NullableDynamicQuery {
	return &NullableDynamicQuery{value: val, isSet: true}
}

func (v NullableDynamicQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


