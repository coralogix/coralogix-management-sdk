/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DynamicQuery - struct for DynamicQuery
type DynamicQuery struct {
	DynamicQueryOneOf *DynamicQueryOneOf
	DynamicQueryOneOf1 *DynamicQueryOneOf1
	DynamicQueryOneOf2 *DynamicQueryOneOf2
	DynamicQueryOneOf3 *DynamicQueryOneOf3
}

// DynamicQueryOneOfAsDynamicQuery is a convenience function that returns DynamicQueryOneOf wrapped in DynamicQuery
func DynamicQueryOneOfAsDynamicQuery(v *DynamicQueryOneOf) DynamicQuery {
	return DynamicQuery{
		DynamicQueryOneOf: v,
	}
}

// DynamicQueryOneOf1AsDynamicQuery is a convenience function that returns DynamicQueryOneOf1 wrapped in DynamicQuery
func DynamicQueryOneOf1AsDynamicQuery(v *DynamicQueryOneOf1) DynamicQuery {
	return DynamicQuery{
		DynamicQueryOneOf1: v,
	}
}

// DynamicQueryOneOf2AsDynamicQuery is a convenience function that returns DynamicQueryOneOf2 wrapped in DynamicQuery
func DynamicQueryOneOf2AsDynamicQuery(v *DynamicQueryOneOf2) DynamicQuery {
	return DynamicQuery{
		DynamicQueryOneOf2: v,
	}
}

// DynamicQueryOneOf3AsDynamicQuery is a convenience function that returns DynamicQueryOneOf3 wrapped in DynamicQuery
func DynamicQueryOneOf3AsDynamicQuery(v *DynamicQueryOneOf3) DynamicQuery {
	return DynamicQuery{
		DynamicQueryOneOf3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DynamicQuery) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DynamicQueryOneOf
	err = newStrictDecoder(data).Decode(&dst.DynamicQueryOneOf)
	if err == nil {
		jsonDynamicQueryOneOf, _ := json.Marshal(dst.DynamicQueryOneOf)
		if string(jsonDynamicQueryOneOf) == "{}" { // empty struct
			dst.DynamicQueryOneOf = nil
		} else {
			if err = validator.Validate(dst.DynamicQueryOneOf); err != nil {
				dst.DynamicQueryOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.DynamicQueryOneOf = nil
	}

	// try to unmarshal data into DynamicQueryOneOf1
	err = newStrictDecoder(data).Decode(&dst.DynamicQueryOneOf1)
	if err == nil {
		jsonDynamicQueryOneOf1, _ := json.Marshal(dst.DynamicQueryOneOf1)
		if string(jsonDynamicQueryOneOf1) == "{}" { // empty struct
			dst.DynamicQueryOneOf1 = nil
		} else {
			if err = validator.Validate(dst.DynamicQueryOneOf1); err != nil {
				dst.DynamicQueryOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.DynamicQueryOneOf1 = nil
	}

	// try to unmarshal data into DynamicQueryOneOf2
	err = newStrictDecoder(data).Decode(&dst.DynamicQueryOneOf2)
	if err == nil {
		jsonDynamicQueryOneOf2, _ := json.Marshal(dst.DynamicQueryOneOf2)
		if string(jsonDynamicQueryOneOf2) == "{}" { // empty struct
			dst.DynamicQueryOneOf2 = nil
		} else {
			if err = validator.Validate(dst.DynamicQueryOneOf2); err != nil {
				dst.DynamicQueryOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.DynamicQueryOneOf2 = nil
	}

	// try to unmarshal data into DynamicQueryOneOf3
	err = newStrictDecoder(data).Decode(&dst.DynamicQueryOneOf3)
	if err == nil {
		jsonDynamicQueryOneOf3, _ := json.Marshal(dst.DynamicQueryOneOf3)
		if string(jsonDynamicQueryOneOf3) == "{}" { // empty struct
			dst.DynamicQueryOneOf3 = nil
		} else {
			if err = validator.Validate(dst.DynamicQueryOneOf3); err != nil {
				dst.DynamicQueryOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.DynamicQueryOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DynamicQueryOneOf = nil
		dst.DynamicQueryOneOf1 = nil
		dst.DynamicQueryOneOf2 = nil
		dst.DynamicQueryOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DynamicQuery)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DynamicQuery)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DynamicQuery) MarshalJSON() ([]byte, error) {
	if src.DynamicQueryOneOf != nil {
		return json.Marshal(&src.DynamicQueryOneOf)
	}

	if src.DynamicQueryOneOf1 != nil {
		return json.Marshal(&src.DynamicQueryOneOf1)
	}

	if src.DynamicQueryOneOf2 != nil {
		return json.Marshal(&src.DynamicQueryOneOf2)
	}

	if src.DynamicQueryOneOf3 != nil {
		return json.Marshal(&src.DynamicQueryOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DynamicQuery) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DynamicQueryOneOf != nil {
		return obj.DynamicQueryOneOf
	}

	if obj.DynamicQueryOneOf1 != nil {
		return obj.DynamicQueryOneOf1
	}

	if obj.DynamicQueryOneOf2 != nil {
		return obj.DynamicQueryOneOf2
	}

	if obj.DynamicQueryOneOf3 != nil {
		return obj.DynamicQueryOneOf3
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DynamicQuery) GetActualInstanceValue() (interface{}) {
	if obj.DynamicQueryOneOf != nil {
		return *obj.DynamicQueryOneOf
	}

	if obj.DynamicQueryOneOf1 != nil {
		return *obj.DynamicQueryOneOf1
	}

	if obj.DynamicQueryOneOf2 != nil {
		return *obj.DynamicQueryOneOf2
	}

	if obj.DynamicQueryOneOf3 != nil {
		return *obj.DynamicQueryOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableDynamicQuery struct {
	value *DynamicQuery
	isSet bool
}

func (v NullableDynamicQuery) Get() *DynamicQuery {
	return v.value
}

func (v *NullableDynamicQuery) Set(val *DynamicQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicQuery(val *DynamicQuery) *NullableDynamicQuery {
	return &NullableDynamicQuery{value: val, isSet: true}
}

func (v NullableDynamicQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


