/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DataTableQuery - struct for DataTableQuery
type DataTableQuery struct {
	DataTableQueryDataprime *DataTableQueryDataprime
	DataTableQueryLogs *DataTableQueryLogs
	DataTableQueryMetrics *DataTableQueryMetrics
	DataTableQuerySpans *DataTableQuerySpans
}

// DataTableQueryDataprimeAsDataTableQuery is a convenience function that returns DataTableQueryDataprime wrapped in DataTableQuery
func DataTableQueryDataprimeAsDataTableQuery(v *DataTableQueryDataprime) DataTableQuery {
	return DataTableQuery{
		DataTableQueryDataprime: v,
	}
}

// DataTableQueryLogsAsDataTableQuery is a convenience function that returns DataTableQueryLogs wrapped in DataTableQuery
func DataTableQueryLogsAsDataTableQuery(v *DataTableQueryLogs) DataTableQuery {
	return DataTableQuery{
		DataTableQueryLogs: v,
	}
}

// DataTableQueryMetricsAsDataTableQuery is a convenience function that returns DataTableQueryMetrics wrapped in DataTableQuery
func DataTableQueryMetricsAsDataTableQuery(v *DataTableQueryMetrics) DataTableQuery {
	return DataTableQuery{
		DataTableQueryMetrics: v,
	}
}

// DataTableQuerySpansAsDataTableQuery is a convenience function that returns DataTableQuerySpans wrapped in DataTableQuery
func DataTableQuerySpansAsDataTableQuery(v *DataTableQuerySpans) DataTableQuery {
	return DataTableQuery{
		DataTableQuerySpans: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DataTableQuery) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DataTableQueryDataprime
	err = newStrictDecoder(data).Decode(&dst.DataTableQueryDataprime)
	if err == nil {
		jsonDataTableQueryDataprime, _ := json.Marshal(dst.DataTableQueryDataprime)
		if string(jsonDataTableQueryDataprime) == "{}" { // empty struct
			dst.DataTableQueryDataprime = nil
		} else {
			if err = validator.Validate(dst.DataTableQueryDataprime); err != nil {
				dst.DataTableQueryDataprime = nil
			} else {
				match++
			}
		}
	} else {
		dst.DataTableQueryDataprime = nil
	}

	// try to unmarshal data into DataTableQueryLogs
	err = newStrictDecoder(data).Decode(&dst.DataTableQueryLogs)
	if err == nil {
		jsonDataTableQueryLogs, _ := json.Marshal(dst.DataTableQueryLogs)
		if string(jsonDataTableQueryLogs) == "{}" { // empty struct
			dst.DataTableQueryLogs = nil
		} else {
			if err = validator.Validate(dst.DataTableQueryLogs); err != nil {
				dst.DataTableQueryLogs = nil
			} else {
				match++
			}
		}
	} else {
		dst.DataTableQueryLogs = nil
	}

	// try to unmarshal data into DataTableQueryMetrics
	err = newStrictDecoder(data).Decode(&dst.DataTableQueryMetrics)
	if err == nil {
		jsonDataTableQueryMetrics, _ := json.Marshal(dst.DataTableQueryMetrics)
		if string(jsonDataTableQueryMetrics) == "{}" { // empty struct
			dst.DataTableQueryMetrics = nil
		} else {
			if err = validator.Validate(dst.DataTableQueryMetrics); err != nil {
				dst.DataTableQueryMetrics = nil
			} else {
				match++
			}
		}
	} else {
		dst.DataTableQueryMetrics = nil
	}

	// try to unmarshal data into DataTableQuerySpans
	err = newStrictDecoder(data).Decode(&dst.DataTableQuerySpans)
	if err == nil {
		jsonDataTableQuerySpans, _ := json.Marshal(dst.DataTableQuerySpans)
		if string(jsonDataTableQuerySpans) == "{}" { // empty struct
			dst.DataTableQuerySpans = nil
		} else {
			if err = validator.Validate(dst.DataTableQuerySpans); err != nil {
				dst.DataTableQuerySpans = nil
			} else {
				match++
			}
		}
	} else {
		dst.DataTableQuerySpans = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DataTableQueryDataprime = nil
		dst.DataTableQueryLogs = nil
		dst.DataTableQueryMetrics = nil
		dst.DataTableQuerySpans = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DataTableQuery)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DataTableQuery)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DataTableQuery) MarshalJSON() ([]byte, error) {
	if src.DataTableQueryDataprime != nil {
		return json.Marshal(&src.DataTableQueryDataprime)
	}

	if src.DataTableQueryLogs != nil {
		return json.Marshal(&src.DataTableQueryLogs)
	}

	if src.DataTableQueryMetrics != nil {
		return json.Marshal(&src.DataTableQueryMetrics)
	}

	if src.DataTableQuerySpans != nil {
		return json.Marshal(&src.DataTableQuerySpans)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DataTableQuery) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DataTableQueryDataprime != nil {
		return obj.DataTableQueryDataprime
	}

	if obj.DataTableQueryLogs != nil {
		return obj.DataTableQueryLogs
	}

	if obj.DataTableQueryMetrics != nil {
		return obj.DataTableQueryMetrics
	}

	if obj.DataTableQuerySpans != nil {
		return obj.DataTableQuerySpans
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DataTableQuery) GetActualInstanceValue() (interface{}) {
	if obj.DataTableQueryDataprime != nil {
		return *obj.DataTableQueryDataprime
	}

	if obj.DataTableQueryLogs != nil {
		return *obj.DataTableQueryLogs
	}

	if obj.DataTableQueryMetrics != nil {
		return *obj.DataTableQueryMetrics
	}

	if obj.DataTableQuerySpans != nil {
		return *obj.DataTableQuerySpans
	}

	// all schemas are nil
	return nil
}

type NullableDataTableQuery struct {
	value *DataTableQuery
	isSet bool
}

func (v NullableDataTableQuery) Get() *DataTableQuery {
	return v.value
}

func (v *NullableDataTableQuery) Set(val *DataTableQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTableQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTableQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTableQuery(val *DataTableQuery) *NullableDataTableQuery {
	return &NullableDataTableQuery{value: val, isSet: true}
}

func (v NullableDataTableQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTableQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


