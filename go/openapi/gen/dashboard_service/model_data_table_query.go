/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DataTableQuery - struct for DataTableQuery
type DataTableQuery struct {
	DataTableQueryOneOf *DataTableQueryOneOf
	DataTableQueryOneOf1 *DataTableQueryOneOf1
	DataTableQueryOneOf2 *DataTableQueryOneOf2
	DataTableQueryOneOf3 *DataTableQueryOneOf3
}

// DataTableQueryOneOfAsDataTableQuery is a convenience function that returns DataTableQueryOneOf wrapped in DataTableQuery
func DataTableQueryOneOfAsDataTableQuery(v *DataTableQueryOneOf) DataTableQuery {
	return DataTableQuery{
		DataTableQueryOneOf: v,
	}
}

// DataTableQueryOneOf1AsDataTableQuery is a convenience function that returns DataTableQueryOneOf1 wrapped in DataTableQuery
func DataTableQueryOneOf1AsDataTableQuery(v *DataTableQueryOneOf1) DataTableQuery {
	return DataTableQuery{
		DataTableQueryOneOf1: v,
	}
}

// DataTableQueryOneOf2AsDataTableQuery is a convenience function that returns DataTableQueryOneOf2 wrapped in DataTableQuery
func DataTableQueryOneOf2AsDataTableQuery(v *DataTableQueryOneOf2) DataTableQuery {
	return DataTableQuery{
		DataTableQueryOneOf2: v,
	}
}

// DataTableQueryOneOf3AsDataTableQuery is a convenience function that returns DataTableQueryOneOf3 wrapped in DataTableQuery
func DataTableQueryOneOf3AsDataTableQuery(v *DataTableQueryOneOf3) DataTableQuery {
	return DataTableQuery{
		DataTableQueryOneOf3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DataTableQuery) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DataTableQueryOneOf
	err = newStrictDecoder(data).Decode(&dst.DataTableQueryOneOf)
	if err == nil {
		jsonDataTableQueryOneOf, _ := json.Marshal(dst.DataTableQueryOneOf)
		if string(jsonDataTableQueryOneOf) == "{}" { // empty struct
			dst.DataTableQueryOneOf = nil
		} else {
			if err = validator.Validate(dst.DataTableQueryOneOf); err != nil {
				dst.DataTableQueryOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.DataTableQueryOneOf = nil
	}

	// try to unmarshal data into DataTableQueryOneOf1
	err = newStrictDecoder(data).Decode(&dst.DataTableQueryOneOf1)
	if err == nil {
		jsonDataTableQueryOneOf1, _ := json.Marshal(dst.DataTableQueryOneOf1)
		if string(jsonDataTableQueryOneOf1) == "{}" { // empty struct
			dst.DataTableQueryOneOf1 = nil
		} else {
			if err = validator.Validate(dst.DataTableQueryOneOf1); err != nil {
				dst.DataTableQueryOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.DataTableQueryOneOf1 = nil
	}

	// try to unmarshal data into DataTableQueryOneOf2
	err = newStrictDecoder(data).Decode(&dst.DataTableQueryOneOf2)
	if err == nil {
		jsonDataTableQueryOneOf2, _ := json.Marshal(dst.DataTableQueryOneOf2)
		if string(jsonDataTableQueryOneOf2) == "{}" { // empty struct
			dst.DataTableQueryOneOf2 = nil
		} else {
			if err = validator.Validate(dst.DataTableQueryOneOf2); err != nil {
				dst.DataTableQueryOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.DataTableQueryOneOf2 = nil
	}

	// try to unmarshal data into DataTableQueryOneOf3
	err = newStrictDecoder(data).Decode(&dst.DataTableQueryOneOf3)
	if err == nil {
		jsonDataTableQueryOneOf3, _ := json.Marshal(dst.DataTableQueryOneOf3)
		if string(jsonDataTableQueryOneOf3) == "{}" { // empty struct
			dst.DataTableQueryOneOf3 = nil
		} else {
			if err = validator.Validate(dst.DataTableQueryOneOf3); err != nil {
				dst.DataTableQueryOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.DataTableQueryOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DataTableQueryOneOf = nil
		dst.DataTableQueryOneOf1 = nil
		dst.DataTableQueryOneOf2 = nil
		dst.DataTableQueryOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DataTableQuery)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DataTableQuery)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DataTableQuery) MarshalJSON() ([]byte, error) {
	if src.DataTableQueryOneOf != nil {
		return json.Marshal(&src.DataTableQueryOneOf)
	}

	if src.DataTableQueryOneOf1 != nil {
		return json.Marshal(&src.DataTableQueryOneOf1)
	}

	if src.DataTableQueryOneOf2 != nil {
		return json.Marshal(&src.DataTableQueryOneOf2)
	}

	if src.DataTableQueryOneOf3 != nil {
		return json.Marshal(&src.DataTableQueryOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DataTableQuery) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DataTableQueryOneOf != nil {
		return obj.DataTableQueryOneOf
	}

	if obj.DataTableQueryOneOf1 != nil {
		return obj.DataTableQueryOneOf1
	}

	if obj.DataTableQueryOneOf2 != nil {
		return obj.DataTableQueryOneOf2
	}

	if obj.DataTableQueryOneOf3 != nil {
		return obj.DataTableQueryOneOf3
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DataTableQuery) GetActualInstanceValue() (interface{}) {
	if obj.DataTableQueryOneOf != nil {
		return *obj.DataTableQueryOneOf
	}

	if obj.DataTableQueryOneOf1 != nil {
		return *obj.DataTableQueryOneOf1
	}

	if obj.DataTableQueryOneOf2 != nil {
		return *obj.DataTableQueryOneOf2
	}

	if obj.DataTableQueryOneOf3 != nil {
		return *obj.DataTableQueryOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableDataTableQuery struct {
	value *DataTableQuery
	isSet bool
}

func (v NullableDataTableQuery) Get() *DataTableQuery {
	return v.value
}

func (v *NullableDataTableQuery) Set(val *DataTableQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTableQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTableQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTableQuery(val *DataTableQuery) *NullableDataTableQuery {
	return &NullableDataTableQuery{value: val, isSet: true}
}

func (v NullableDataTableQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTableQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


