/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the Legend type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Legend{}

// Legend struct for Legend
type Legend struct {
	Columns []LegendColumn `json:"columns,omitempty"`
	// In case of multiple queries, whether legend items should be grouped by their respective queries
	GroupByQuery *bool `json:"groupByQuery,omitempty"`
	// Is the legend visible in the widget
	IsVisible *bool `json:"isVisible,omitempty"`
	Placement *LegendPlacement `json:"placement,omitempty"`
}

// NewLegend instantiates a new Legend object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegend() *Legend {
	this := Legend{}
	return &this
}

// NewLegendWithDefaults instantiates a new Legend object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegendWithDefaults() *Legend {
	this := Legend{}
	return &this
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *Legend) GetColumns() []LegendColumn {
	if o == nil || IsNil(o.Columns) {
		var ret []LegendColumn
		return ret
	}
	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Legend) GetColumnsOk() ([]LegendColumn, bool) {
	if o == nil || IsNil(o.Columns) {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *Legend) HasColumns() bool {
	if o != nil && !IsNil(o.Columns) {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []LegendColumn and assigns it to the Columns field.
func (o *Legend) SetColumns(v []LegendColumn) {
	o.Columns = v
}

// GetGroupByQuery returns the GroupByQuery field value if set, zero value otherwise.
func (o *Legend) GetGroupByQuery() bool {
	if o == nil || IsNil(o.GroupByQuery) {
		var ret bool
		return ret
	}
	return *o.GroupByQuery
}

// GetGroupByQueryOk returns a tuple with the GroupByQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Legend) GetGroupByQueryOk() (*bool, bool) {
	if o == nil || IsNil(o.GroupByQuery) {
		return nil, false
	}
	return o.GroupByQuery, true
}

// HasGroupByQuery returns a boolean if a field has been set.
func (o *Legend) HasGroupByQuery() bool {
	if o != nil && !IsNil(o.GroupByQuery) {
		return true
	}

	return false
}

// SetGroupByQuery gets a reference to the given bool and assigns it to the GroupByQuery field.
func (o *Legend) SetGroupByQuery(v bool) {
	o.GroupByQuery = &v
}

// GetIsVisible returns the IsVisible field value if set, zero value otherwise.
func (o *Legend) GetIsVisible() bool {
	if o == nil || IsNil(o.IsVisible) {
		var ret bool
		return ret
	}
	return *o.IsVisible
}

// GetIsVisibleOk returns a tuple with the IsVisible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Legend) GetIsVisibleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVisible) {
		return nil, false
	}
	return o.IsVisible, true
}

// HasIsVisible returns a boolean if a field has been set.
func (o *Legend) HasIsVisible() bool {
	if o != nil && !IsNil(o.IsVisible) {
		return true
	}

	return false
}

// SetIsVisible gets a reference to the given bool and assigns it to the IsVisible field.
func (o *Legend) SetIsVisible(v bool) {
	o.IsVisible = &v
}

// GetPlacement returns the Placement field value if set, zero value otherwise.
func (o *Legend) GetPlacement() LegendPlacement {
	if o == nil || IsNil(o.Placement) {
		var ret LegendPlacement
		return ret
	}
	return *o.Placement
}

// GetPlacementOk returns a tuple with the Placement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Legend) GetPlacementOk() (*LegendPlacement, bool) {
	if o == nil || IsNil(o.Placement) {
		return nil, false
	}
	return o.Placement, true
}

// HasPlacement returns a boolean if a field has been set.
func (o *Legend) HasPlacement() bool {
	if o != nil && !IsNil(o.Placement) {
		return true
	}

	return false
}

// SetPlacement gets a reference to the given LegendPlacement and assigns it to the Placement field.
func (o *Legend) SetPlacement(v LegendPlacement) {
	o.Placement = &v
}

func (o Legend) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Legend) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Columns) {
		toSerialize["columns"] = o.Columns
	}
	if !IsNil(o.GroupByQuery) {
		toSerialize["groupByQuery"] = o.GroupByQuery
	}
	if !IsNil(o.IsVisible) {
		toSerialize["isVisible"] = o.IsVisible
	}
	if !IsNil(o.Placement) {
		toSerialize["placement"] = o.Placement
	}
	return toSerialize, nil
}

type NullableLegend struct {
	value *Legend
	isSet bool
}

func (v NullableLegend) Get() *Legend {
	return v.value
}

func (v *NullableLegend) Set(val *Legend) {
	v.value = val
	v.isSet = true
}

func (v NullableLegend) IsSet() bool {
	return v.isSet
}

func (v *NullableLegend) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegend(val *Legend) *NullableLegend {
	return &NullableLegend{value: val, isSet: true}
}

func (v NullableLegend) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegend) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


