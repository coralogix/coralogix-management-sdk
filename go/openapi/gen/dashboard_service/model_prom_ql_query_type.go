/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// PromQLQueryType the model 'PromQLQueryType'
type PromQLQueryType string

// List of PromQLQueryType
const (
	PROMQLQUERYTYPE_PROM_QL_QUERY_TYPE_UNSPECIFIED PromQLQueryType = "PROM_QL_QUERY_TYPE_UNSPECIFIED"
	PROMQLQUERYTYPE_PROM_QL_QUERY_TYPE_RANGE PromQLQueryType = "PROM_QL_QUERY_TYPE_RANGE"
	PROMQLQUERYTYPE_PROM_QL_QUERY_TYPE_INSTANT PromQLQueryType = "PROM_QL_QUERY_TYPE_INSTANT"
)

// All allowed values of PromQLQueryType enum
var AllowedPromQLQueryTypeEnumValues = []PromQLQueryType{
	"PROM_QL_QUERY_TYPE_UNSPECIFIED",
	"PROM_QL_QUERY_TYPE_RANGE",
	"PROM_QL_QUERY_TYPE_INSTANT",
}

func (v *PromQLQueryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PromQLQueryType(value)
	for _, existing := range AllowedPromQLQueryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PromQLQueryType", value)
}

// NewPromQLQueryTypeFromValue returns a pointer to a valid PromQLQueryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPromQLQueryTypeFromValue(v string) (*PromQLQueryType, error) {
	ev := PromQLQueryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PromQLQueryType: valid values are %v", v, AllowedPromQLQueryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PromQLQueryType) IsValid() bool {
	for _, existing := range AllowedPromQLQueryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PromQLQueryType value
func (v PromQLQueryType) Ptr() *PromQLQueryType {
	return &v
}

type NullablePromQLQueryType struct {
	value *PromQLQueryType
	isSet bool
}

func (v NullablePromQLQueryType) Get() *PromQLQueryType {
	return v.value
}

func (v *NullablePromQLQueryType) Set(val *PromQLQueryType) {
	v.value = val
	v.isSet = true
}

func (v NullablePromQLQueryType) IsSet() bool {
	return v.isSet
}

func (v *NullablePromQLQueryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePromQLQueryType(val *PromQLQueryType) *NullablePromQLQueryType {
	return &NullablePromQLQueryType{value: val, isSet: true}
}

func (v NullablePromQLQueryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePromQLQueryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

