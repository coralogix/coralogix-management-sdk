/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the MultiSelect type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiSelect{}

// MultiSelect struct for MultiSelect
type MultiSelect struct {
	Selected []string `json:"selected,omitempty"`
	Selection *MultiSelectSelection `json:"selection,omitempty"`
	SelectionOptions *VariableSelectionOptions `json:"selectionOptions,omitempty"`
	Source *MultiSelectSource `json:"source,omitempty"`
	ValuesOrderDirection *OrderDirection `json:"valuesOrderDirection,omitempty"`
}

// NewMultiSelect instantiates a new MultiSelect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiSelect() *MultiSelect {
	this := MultiSelect{}
	return &this
}

// NewMultiSelectWithDefaults instantiates a new MultiSelect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiSelectWithDefaults() *MultiSelect {
	this := MultiSelect{}
	return &this
}

// GetSelected returns the Selected field value if set, zero value otherwise.
func (o *MultiSelect) GetSelected() []string {
	if o == nil || IsNil(o.Selected) {
		var ret []string
		return ret
	}
	return o.Selected
}

// GetSelectedOk returns a tuple with the Selected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiSelect) GetSelectedOk() ([]string, bool) {
	if o == nil || IsNil(o.Selected) {
		return nil, false
	}
	return o.Selected, true
}

// HasSelected returns a boolean if a field has been set.
func (o *MultiSelect) HasSelected() bool {
	if o != nil && !IsNil(o.Selected) {
		return true
	}

	return false
}

// SetSelected gets a reference to the given []string and assigns it to the Selected field.
func (o *MultiSelect) SetSelected(v []string) {
	o.Selected = v
}

// GetSelection returns the Selection field value if set, zero value otherwise.
func (o *MultiSelect) GetSelection() MultiSelectSelection {
	if o == nil || IsNil(o.Selection) {
		var ret MultiSelectSelection
		return ret
	}
	return *o.Selection
}

// GetSelectionOk returns a tuple with the Selection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiSelect) GetSelectionOk() (*MultiSelectSelection, bool) {
	if o == nil || IsNil(o.Selection) {
		return nil, false
	}
	return o.Selection, true
}

// HasSelection returns a boolean if a field has been set.
func (o *MultiSelect) HasSelection() bool {
	if o != nil && !IsNil(o.Selection) {
		return true
	}

	return false
}

// SetSelection gets a reference to the given MultiSelectSelection and assigns it to the Selection field.
func (o *MultiSelect) SetSelection(v MultiSelectSelection) {
	o.Selection = &v
}

// GetSelectionOptions returns the SelectionOptions field value if set, zero value otherwise.
func (o *MultiSelect) GetSelectionOptions() VariableSelectionOptions {
	if o == nil || IsNil(o.SelectionOptions) {
		var ret VariableSelectionOptions
		return ret
	}
	return *o.SelectionOptions
}

// GetSelectionOptionsOk returns a tuple with the SelectionOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiSelect) GetSelectionOptionsOk() (*VariableSelectionOptions, bool) {
	if o == nil || IsNil(o.SelectionOptions) {
		return nil, false
	}
	return o.SelectionOptions, true
}

// HasSelectionOptions returns a boolean if a field has been set.
func (o *MultiSelect) HasSelectionOptions() bool {
	if o != nil && !IsNil(o.SelectionOptions) {
		return true
	}

	return false
}

// SetSelectionOptions gets a reference to the given VariableSelectionOptions and assigns it to the SelectionOptions field.
func (o *MultiSelect) SetSelectionOptions(v VariableSelectionOptions) {
	o.SelectionOptions = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *MultiSelect) GetSource() MultiSelectSource {
	if o == nil || IsNil(o.Source) {
		var ret MultiSelectSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiSelect) GetSourceOk() (*MultiSelectSource, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *MultiSelect) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given MultiSelectSource and assigns it to the Source field.
func (o *MultiSelect) SetSource(v MultiSelectSource) {
	o.Source = &v
}

// GetValuesOrderDirection returns the ValuesOrderDirection field value if set, zero value otherwise.
func (o *MultiSelect) GetValuesOrderDirection() OrderDirection {
	if o == nil || IsNil(o.ValuesOrderDirection) {
		var ret OrderDirection
		return ret
	}
	return *o.ValuesOrderDirection
}

// GetValuesOrderDirectionOk returns a tuple with the ValuesOrderDirection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiSelect) GetValuesOrderDirectionOk() (*OrderDirection, bool) {
	if o == nil || IsNil(o.ValuesOrderDirection) {
		return nil, false
	}
	return o.ValuesOrderDirection, true
}

// HasValuesOrderDirection returns a boolean if a field has been set.
func (o *MultiSelect) HasValuesOrderDirection() bool {
	if o != nil && !IsNil(o.ValuesOrderDirection) {
		return true
	}

	return false
}

// SetValuesOrderDirection gets a reference to the given OrderDirection and assigns it to the ValuesOrderDirection field.
func (o *MultiSelect) SetValuesOrderDirection(v OrderDirection) {
	o.ValuesOrderDirection = &v
}

func (o MultiSelect) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiSelect) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Selected) {
		toSerialize["selected"] = o.Selected
	}
	if !IsNil(o.Selection) {
		toSerialize["selection"] = o.Selection
	}
	if !IsNil(o.SelectionOptions) {
		toSerialize["selectionOptions"] = o.SelectionOptions
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.ValuesOrderDirection) {
		toSerialize["valuesOrderDirection"] = o.ValuesOrderDirection
	}
	return toSerialize, nil
}

type NullableMultiSelect struct {
	value *MultiSelect
	isSet bool
}

func (v NullableMultiSelect) Get() *MultiSelect {
	return v.value
}

func (v *NullableMultiSelect) Set(val *MultiSelect) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiSelect) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiSelect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiSelect(val *MultiSelect) *NullableMultiSelect {
	return &NullableMultiSelect{value: val, isSet: true}
}

func (v NullableMultiSelect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiSelect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


