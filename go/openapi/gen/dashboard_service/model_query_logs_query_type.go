/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// QueryLogsQueryType - struct for QueryLogsQueryType
type QueryLogsQueryType struct {
	QueryLogsQueryTypeOneOf *QueryLogsQueryTypeOneOf
	QueryLogsQueryTypeOneOf1 *QueryLogsQueryTypeOneOf1
}

// QueryLogsQueryTypeOneOfAsQueryLogsQueryType is a convenience function that returns QueryLogsQueryTypeOneOf wrapped in QueryLogsQueryType
func QueryLogsQueryTypeOneOfAsQueryLogsQueryType(v *QueryLogsQueryTypeOneOf) QueryLogsQueryType {
	return QueryLogsQueryType{
		QueryLogsQueryTypeOneOf: v,
	}
}

// QueryLogsQueryTypeOneOf1AsQueryLogsQueryType is a convenience function that returns QueryLogsQueryTypeOneOf1 wrapped in QueryLogsQueryType
func QueryLogsQueryTypeOneOf1AsQueryLogsQueryType(v *QueryLogsQueryTypeOneOf1) QueryLogsQueryType {
	return QueryLogsQueryType{
		QueryLogsQueryTypeOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *QueryLogsQueryType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into QueryLogsQueryTypeOneOf
	err = newStrictDecoder(data).Decode(&dst.QueryLogsQueryTypeOneOf)
	if err == nil {
		jsonQueryLogsQueryTypeOneOf, _ := json.Marshal(dst.QueryLogsQueryTypeOneOf)
		if string(jsonQueryLogsQueryTypeOneOf) == "{}" { // empty struct
			dst.QueryLogsQueryTypeOneOf = nil
		} else {
			if err = validator.Validate(dst.QueryLogsQueryTypeOneOf); err != nil {
				dst.QueryLogsQueryTypeOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.QueryLogsQueryTypeOneOf = nil
	}

	// try to unmarshal data into QueryLogsQueryTypeOneOf1
	err = newStrictDecoder(data).Decode(&dst.QueryLogsQueryTypeOneOf1)
	if err == nil {
		jsonQueryLogsQueryTypeOneOf1, _ := json.Marshal(dst.QueryLogsQueryTypeOneOf1)
		if string(jsonQueryLogsQueryTypeOneOf1) == "{}" { // empty struct
			dst.QueryLogsQueryTypeOneOf1 = nil
		} else {
			if err = validator.Validate(dst.QueryLogsQueryTypeOneOf1); err != nil {
				dst.QueryLogsQueryTypeOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.QueryLogsQueryTypeOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.QueryLogsQueryTypeOneOf = nil
		dst.QueryLogsQueryTypeOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(QueryLogsQueryType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(QueryLogsQueryType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src QueryLogsQueryType) MarshalJSON() ([]byte, error) {
	if src.QueryLogsQueryTypeOneOf != nil {
		return json.Marshal(&src.QueryLogsQueryTypeOneOf)
	}

	if src.QueryLogsQueryTypeOneOf1 != nil {
		return json.Marshal(&src.QueryLogsQueryTypeOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *QueryLogsQueryType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.QueryLogsQueryTypeOneOf != nil {
		return obj.QueryLogsQueryTypeOneOf
	}

	if obj.QueryLogsQueryTypeOneOf1 != nil {
		return obj.QueryLogsQueryTypeOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj QueryLogsQueryType) GetActualInstanceValue() (interface{}) {
	if obj.QueryLogsQueryTypeOneOf != nil {
		return *obj.QueryLogsQueryTypeOneOf
	}

	if obj.QueryLogsQueryTypeOneOf1 != nil {
		return *obj.QueryLogsQueryTypeOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableQueryLogsQueryType struct {
	value *QueryLogsQueryType
	isSet bool
}

func (v NullableQueryLogsQueryType) Get() *QueryLogsQueryType {
	return v.value
}

func (v *NullableQueryLogsQueryType) Set(val *QueryLogsQueryType) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryLogsQueryType) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryLogsQueryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryLogsQueryType(val *QueryLogsQueryType) *NullableQueryLogsQueryType {
	return &NullableQueryLogsQueryType{value: val, isSet: true}
}

func (v NullableQueryLogsQueryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryLogsQueryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


