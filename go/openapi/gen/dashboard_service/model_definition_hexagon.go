/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the DefinitionHexagon type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefinitionHexagon{}

// DefinitionHexagon struct for DefinitionHexagon
type DefinitionHexagon struct {
	Hexagon *Hexagon `json:"hexagon,omitempty"`
}

// NewDefinitionHexagon instantiates a new DefinitionHexagon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefinitionHexagon() *DefinitionHexagon {
	this := DefinitionHexagon{}
	return &this
}

// NewDefinitionHexagonWithDefaults instantiates a new DefinitionHexagon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefinitionHexagonWithDefaults() *DefinitionHexagon {
	this := DefinitionHexagon{}
	return &this
}

// GetHexagon returns the Hexagon field value if set, zero value otherwise.
func (o *DefinitionHexagon) GetHexagon() Hexagon {
	if o == nil || IsNil(o.Hexagon) {
		var ret Hexagon
		return ret
	}
	return *o.Hexagon
}

// GetHexagonOk returns a tuple with the Hexagon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinitionHexagon) GetHexagonOk() (*Hexagon, bool) {
	if o == nil || IsNil(o.Hexagon) {
		return nil, false
	}
	return o.Hexagon, true
}

// HasHexagon returns a boolean if a field has been set.
func (o *DefinitionHexagon) HasHexagon() bool {
	if o != nil && !IsNil(o.Hexagon) {
		return true
	}

	return false
}

// SetHexagon gets a reference to the given Hexagon and assigns it to the Hexagon field.
func (o *DefinitionHexagon) SetHexagon(v Hexagon) {
	o.Hexagon = &v
}

func (o DefinitionHexagon) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefinitionHexagon) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hexagon) {
		toSerialize["hexagon"] = o.Hexagon
	}
	return toSerialize, nil
}

type NullableDefinitionHexagon struct {
	value *DefinitionHexagon
	isSet bool
}

func (v NullableDefinitionHexagon) Get() *DefinitionHexagon {
	return v.value
}

func (v *NullableDefinitionHexagon) Set(val *DefinitionHexagon) {
	v.value = val
	v.isSet = true
}

func (v NullableDefinitionHexagon) IsSet() bool {
	return v.isSet
}

func (v *NullableDefinitionHexagon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefinitionHexagon(val *DefinitionHexagon) *NullableDefinitionHexagon {
	return &NullableDefinitionHexagon{value: val, isSet: true}
}

func (v NullableDefinitionHexagon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefinitionHexagon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


