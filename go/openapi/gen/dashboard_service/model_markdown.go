/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the Markdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Markdown{}

// Markdown struct for Markdown
type Markdown struct {
	// Markdown text
	MarkdownText *string `json:"markdownText,omitempty"`
	// Tooltip text to display on widget hover
	TooltipText *string `json:"tooltipText,omitempty"`
}

// NewMarkdown instantiates a new Markdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarkdown() *Markdown {
	this := Markdown{}
	return &this
}

// NewMarkdownWithDefaults instantiates a new Markdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarkdownWithDefaults() *Markdown {
	this := Markdown{}
	return &this
}

// GetMarkdownText returns the MarkdownText field value if set, zero value otherwise.
func (o *Markdown) GetMarkdownText() string {
	if o == nil || IsNil(o.MarkdownText) {
		var ret string
		return ret
	}
	return *o.MarkdownText
}

// GetMarkdownTextOk returns a tuple with the MarkdownText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Markdown) GetMarkdownTextOk() (*string, bool) {
	if o == nil || IsNil(o.MarkdownText) {
		return nil, false
	}
	return o.MarkdownText, true
}

// HasMarkdownText returns a boolean if a field has been set.
func (o *Markdown) HasMarkdownText() bool {
	if o != nil && !IsNil(o.MarkdownText) {
		return true
	}

	return false
}

// SetMarkdownText gets a reference to the given string and assigns it to the MarkdownText field.
func (o *Markdown) SetMarkdownText(v string) {
	o.MarkdownText = &v
}

// GetTooltipText returns the TooltipText field value if set, zero value otherwise.
func (o *Markdown) GetTooltipText() string {
	if o == nil || IsNil(o.TooltipText) {
		var ret string
		return ret
	}
	return *o.TooltipText
}

// GetTooltipTextOk returns a tuple with the TooltipText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Markdown) GetTooltipTextOk() (*string, bool) {
	if o == nil || IsNil(o.TooltipText) {
		return nil, false
	}
	return o.TooltipText, true
}

// HasTooltipText returns a boolean if a field has been set.
func (o *Markdown) HasTooltipText() bool {
	if o != nil && !IsNil(o.TooltipText) {
		return true
	}

	return false
}

// SetTooltipText gets a reference to the given string and assigns it to the TooltipText field.
func (o *Markdown) SetTooltipText(v string) {
	o.TooltipText = &v
}

func (o Markdown) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Markdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MarkdownText) {
		toSerialize["markdownText"] = o.MarkdownText
	}
	if !IsNil(o.TooltipText) {
		toSerialize["tooltipText"] = o.TooltipText
	}
	return toSerialize, nil
}

type NullableMarkdown struct {
	value *Markdown
	isSet bool
}

func (v NullableMarkdown) Get() *Markdown {
	return v.value
}

func (v *NullableMarkdown) Set(val *Markdown) {
	v.value = val
	v.isSet = true
}

func (v NullableMarkdown) IsSet() bool {
	return v.isSet
}

func (v *NullableMarkdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarkdown(val *Markdown) *NullableMarkdown {
	return &NullableMarkdown{value: val, isSet: true}
}

func (v NullableMarkdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarkdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


