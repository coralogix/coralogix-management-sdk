/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// WidgetsCommonDataModeType the model 'WidgetsCommonDataModeType'
type WidgetsCommonDataModeType string

// List of widgets.common.DataModeType
const (
	WIDGETSCOMMONDATAMODETYPE_DATA_MODE_TYPE_HIGH_UNSPECIFIED WidgetsCommonDataModeType = "DATA_MODE_TYPE_HIGH_UNSPECIFIED"
	WIDGETSCOMMONDATAMODETYPE_DATA_MODE_TYPE_ARCHIVE WidgetsCommonDataModeType = "DATA_MODE_TYPE_ARCHIVE"
)

// All allowed values of WidgetsCommonDataModeType enum
var AllowedWidgetsCommonDataModeTypeEnumValues = []WidgetsCommonDataModeType{
	"DATA_MODE_TYPE_HIGH_UNSPECIFIED",
	"DATA_MODE_TYPE_ARCHIVE",
}

func (v *WidgetsCommonDataModeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WidgetsCommonDataModeType(value)
	for _, existing := range AllowedWidgetsCommonDataModeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WidgetsCommonDataModeType", value)
}

// NewWidgetsCommonDataModeTypeFromValue returns a pointer to a valid WidgetsCommonDataModeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWidgetsCommonDataModeTypeFromValue(v string) (*WidgetsCommonDataModeType, error) {
	ev := WidgetsCommonDataModeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WidgetsCommonDataModeType: valid values are %v", v, AllowedWidgetsCommonDataModeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WidgetsCommonDataModeType) IsValid() bool {
	for _, existing := range AllowedWidgetsCommonDataModeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to widgets.common.DataModeType value
func (v WidgetsCommonDataModeType) Ptr() *WidgetsCommonDataModeType {
	return &v
}

type NullableWidgetsCommonDataModeType struct {
	value *WidgetsCommonDataModeType
	isSet bool
}

func (v NullableWidgetsCommonDataModeType) Get() *WidgetsCommonDataModeType {
	return v.value
}

func (v *NullableWidgetsCommonDataModeType) Set(val *WidgetsCommonDataModeType) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetsCommonDataModeType) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetsCommonDataModeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetsCommonDataModeType(val *WidgetsCommonDataModeType) *NullableWidgetsCommonDataModeType {
	return &NullableWidgetsCommonDataModeType{value: val, isSet: true}
}

func (v NullableWidgetsCommonDataModeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetsCommonDataModeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

