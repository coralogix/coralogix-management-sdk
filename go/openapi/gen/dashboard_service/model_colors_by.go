/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ColorsBy - struct for ColorsBy
type ColorsBy struct {
	ColorsByAggregation *ColorsByAggregation
	ColorsByGroupBy *ColorsByGroupBy
	ColorsByStack *ColorsByStack
}

// ColorsByAggregationAsColorsBy is a convenience function that returns ColorsByAggregation wrapped in ColorsBy
func ColorsByAggregationAsColorsBy(v *ColorsByAggregation) ColorsBy {
	return ColorsBy{
		ColorsByAggregation: v,
	}
}

// ColorsByGroupByAsColorsBy is a convenience function that returns ColorsByGroupBy wrapped in ColorsBy
func ColorsByGroupByAsColorsBy(v *ColorsByGroupBy) ColorsBy {
	return ColorsBy{
		ColorsByGroupBy: v,
	}
}

// ColorsByStackAsColorsBy is a convenience function that returns ColorsByStack wrapped in ColorsBy
func ColorsByStackAsColorsBy(v *ColorsByStack) ColorsBy {
	return ColorsBy{
		ColorsByStack: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ColorsBy) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ColorsByAggregation
	err = newStrictDecoder(data).Decode(&dst.ColorsByAggregation)
	if err == nil {
		jsonColorsByAggregation, _ := json.Marshal(dst.ColorsByAggregation)
		if string(jsonColorsByAggregation) == "{}" { // empty struct
			dst.ColorsByAggregation = nil
		} else {
			if err = validator.Validate(dst.ColorsByAggregation); err != nil {
				dst.ColorsByAggregation = nil
			} else {
				match++
			}
		}
	} else {
		dst.ColorsByAggregation = nil
	}

	// try to unmarshal data into ColorsByGroupBy
	err = newStrictDecoder(data).Decode(&dst.ColorsByGroupBy)
	if err == nil {
		jsonColorsByGroupBy, _ := json.Marshal(dst.ColorsByGroupBy)
		if string(jsonColorsByGroupBy) == "{}" { // empty struct
			dst.ColorsByGroupBy = nil
		} else {
			if err = validator.Validate(dst.ColorsByGroupBy); err != nil {
				dst.ColorsByGroupBy = nil
			} else {
				match++
			}
		}
	} else {
		dst.ColorsByGroupBy = nil
	}

	// try to unmarshal data into ColorsByStack
	err = newStrictDecoder(data).Decode(&dst.ColorsByStack)
	if err == nil {
		jsonColorsByStack, _ := json.Marshal(dst.ColorsByStack)
		if string(jsonColorsByStack) == "{}" { // empty struct
			dst.ColorsByStack = nil
		} else {
			if err = validator.Validate(dst.ColorsByStack); err != nil {
				dst.ColorsByStack = nil
			} else {
				match++
			}
		}
	} else {
		dst.ColorsByStack = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ColorsByAggregation = nil
		dst.ColorsByGroupBy = nil
		dst.ColorsByStack = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ColorsBy)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ColorsBy)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ColorsBy) MarshalJSON() ([]byte, error) {
	if src.ColorsByAggregation != nil {
		return json.Marshal(&src.ColorsByAggregation)
	}

	if src.ColorsByGroupBy != nil {
		return json.Marshal(&src.ColorsByGroupBy)
	}

	if src.ColorsByStack != nil {
		return json.Marshal(&src.ColorsByStack)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ColorsBy) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ColorsByAggregation != nil {
		return obj.ColorsByAggregation
	}

	if obj.ColorsByGroupBy != nil {
		return obj.ColorsByGroupBy
	}

	if obj.ColorsByStack != nil {
		return obj.ColorsByStack
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ColorsBy) GetActualInstanceValue() (interface{}) {
	if obj.ColorsByAggregation != nil {
		return *obj.ColorsByAggregation
	}

	if obj.ColorsByGroupBy != nil {
		return *obj.ColorsByGroupBy
	}

	if obj.ColorsByStack != nil {
		return *obj.ColorsByStack
	}

	// all schemas are nil
	return nil
}

type NullableColorsBy struct {
	value *ColorsBy
	isSet bool
}

func (v NullableColorsBy) Get() *ColorsBy {
	return v.value
}

func (v *NullableColorsBy) Set(val *ColorsBy) {
	v.value = val
	v.isSet = true
}

func (v NullableColorsBy) IsSet() bool {
	return v.isSet
}

func (v *NullableColorsBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColorsBy(val *ColorsBy) *NullableColorsBy {
	return &NullableColorsBy{value: val, isSet: true}
}

func (v NullableColorsBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColorsBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


