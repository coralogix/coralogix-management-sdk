/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the NotEqualsSelection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotEqualsSelection{}

// NotEqualsSelection This data structure defines the values for the non-equality comparison.
type NotEqualsSelection struct {
	List *NotEqualsSelectionListSelection `json:"list,omitempty"`
}

// NewNotEqualsSelection instantiates a new NotEqualsSelection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotEqualsSelection() *NotEqualsSelection {
	this := NotEqualsSelection{}
	return &this
}

// NewNotEqualsSelectionWithDefaults instantiates a new NotEqualsSelection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotEqualsSelectionWithDefaults() *NotEqualsSelection {
	this := NotEqualsSelection{}
	return &this
}

// GetList returns the List field value if set, zero value otherwise.
func (o *NotEqualsSelection) GetList() NotEqualsSelectionListSelection {
	if o == nil || IsNil(o.List) {
		var ret NotEqualsSelectionListSelection
		return ret
	}
	return *o.List
}

// GetListOk returns a tuple with the List field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotEqualsSelection) GetListOk() (*NotEqualsSelectionListSelection, bool) {
	if o == nil || IsNil(o.List) {
		return nil, false
	}
	return o.List, true
}

// HasList returns a boolean if a field has been set.
func (o *NotEqualsSelection) HasList() bool {
	if o != nil && !IsNil(o.List) {
		return true
	}

	return false
}

// SetList gets a reference to the given NotEqualsSelectionListSelection and assigns it to the List field.
func (o *NotEqualsSelection) SetList(v NotEqualsSelectionListSelection) {
	o.List = &v
}

func (o NotEqualsSelection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotEqualsSelection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.List) {
		toSerialize["list"] = o.List
	}
	return toSerialize, nil
}

type NullableNotEqualsSelection struct {
	value *NotEqualsSelection
	isSet bool
}

func (v NullableNotEqualsSelection) Get() *NotEqualsSelection {
	return v.value
}

func (v *NullableNotEqualsSelection) Set(val *NotEqualsSelection) {
	v.value = val
	v.isSet = true
}

func (v NullableNotEqualsSelection) IsSet() bool {
	return v.isSet
}

func (v *NullableNotEqualsSelection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotEqualsSelection(val *NotEqualsSelection) *NullableNotEqualsSelection {
	return &NullableNotEqualsSelection{value: val, isSet: true}
}

func (v NullableNotEqualsSelection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotEqualsSelection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


