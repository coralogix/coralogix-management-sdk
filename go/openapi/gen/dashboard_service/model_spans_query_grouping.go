/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the SpansQueryGrouping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpansQueryGrouping{}

// SpansQueryGrouping struct for SpansQueryGrouping
type SpansQueryGrouping struct {
	Aggregations []SpansQueryAggregation `json:"aggregations,omitempty"`
	GroupBy []SpanField `json:"groupBy,omitempty"`
	GroupBys []SpanObservationField `json:"groupBys,omitempty"`
}

// NewSpansQueryGrouping instantiates a new SpansQueryGrouping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpansQueryGrouping() *SpansQueryGrouping {
	this := SpansQueryGrouping{}
	return &this
}

// NewSpansQueryGroupingWithDefaults instantiates a new SpansQueryGrouping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpansQueryGroupingWithDefaults() *SpansQueryGrouping {
	this := SpansQueryGrouping{}
	return &this
}

// GetAggregations returns the Aggregations field value if set, zero value otherwise.
func (o *SpansQueryGrouping) GetAggregations() []SpansQueryAggregation {
	if o == nil || IsNil(o.Aggregations) {
		var ret []SpansQueryAggregation
		return ret
	}
	return o.Aggregations
}

// GetAggregationsOk returns a tuple with the Aggregations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpansQueryGrouping) GetAggregationsOk() ([]SpansQueryAggregation, bool) {
	if o == nil || IsNil(o.Aggregations) {
		return nil, false
	}
	return o.Aggregations, true
}

// HasAggregations returns a boolean if a field has been set.
func (o *SpansQueryGrouping) HasAggregations() bool {
	if o != nil && !IsNil(o.Aggregations) {
		return true
	}

	return false
}

// SetAggregations gets a reference to the given []SpansQueryAggregation and assigns it to the Aggregations field.
func (o *SpansQueryGrouping) SetAggregations(v []SpansQueryAggregation) {
	o.Aggregations = v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *SpansQueryGrouping) GetGroupBy() []SpanField {
	if o == nil || IsNil(o.GroupBy) {
		var ret []SpanField
		return ret
	}
	return o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpansQueryGrouping) GetGroupByOk() ([]SpanField, bool) {
	if o == nil || IsNil(o.GroupBy) {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *SpansQueryGrouping) HasGroupBy() bool {
	if o != nil && !IsNil(o.GroupBy) {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given []SpanField and assigns it to the GroupBy field.
func (o *SpansQueryGrouping) SetGroupBy(v []SpanField) {
	o.GroupBy = v
}

// GetGroupBys returns the GroupBys field value if set, zero value otherwise.
func (o *SpansQueryGrouping) GetGroupBys() []SpanObservationField {
	if o == nil || IsNil(o.GroupBys) {
		var ret []SpanObservationField
		return ret
	}
	return o.GroupBys
}

// GetGroupBysOk returns a tuple with the GroupBys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpansQueryGrouping) GetGroupBysOk() ([]SpanObservationField, bool) {
	if o == nil || IsNil(o.GroupBys) {
		return nil, false
	}
	return o.GroupBys, true
}

// HasGroupBys returns a boolean if a field has been set.
func (o *SpansQueryGrouping) HasGroupBys() bool {
	if o != nil && !IsNil(o.GroupBys) {
		return true
	}

	return false
}

// SetGroupBys gets a reference to the given []SpanObservationField and assigns it to the GroupBys field.
func (o *SpansQueryGrouping) SetGroupBys(v []SpanObservationField) {
	o.GroupBys = v
}

func (o SpansQueryGrouping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpansQueryGrouping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aggregations) {
		toSerialize["aggregations"] = o.Aggregations
	}
	if !IsNil(o.GroupBy) {
		toSerialize["groupBy"] = o.GroupBy
	}
	if !IsNil(o.GroupBys) {
		toSerialize["groupBys"] = o.GroupBys
	}
	return toSerialize, nil
}

type NullableSpansQueryGrouping struct {
	value *SpansQueryGrouping
	isSet bool
}

func (v NullableSpansQueryGrouping) Get() *SpansQueryGrouping {
	return v.value
}

func (v *NullableSpansQueryGrouping) Set(val *SpansQueryGrouping) {
	v.value = val
	v.isSet = true
}

func (v NullableSpansQueryGrouping) IsSet() bool {
	return v.isSet
}

func (v *NullableSpansQueryGrouping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpansQueryGrouping(val *SpansQueryGrouping) *NullableSpansQueryGrouping {
	return &NullableSpansQueryGrouping{value: val, isSet: true}
}

func (v NullableSpansQueryGrouping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpansQueryGrouping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


