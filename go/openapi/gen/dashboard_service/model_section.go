/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the Section type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Section{}

// Section struct for Section
type Section struct {
	Id *UUID `json:"id,omitempty"`
	Options *SectionOptions `json:"options,omitempty"`
	Rows []Row `json:"rows,omitempty"`
}

// NewSection instantiates a new Section object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSection() *Section {
	this := Section{}
	return &this
}

// NewSectionWithDefaults instantiates a new Section object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSectionWithDefaults() *Section {
	this := Section{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Section) GetId() UUID {
	if o == nil || IsNil(o.Id) {
		var ret UUID
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetIdOk() (*UUID, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Section) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given UUID and assigns it to the Id field.
func (o *Section) SetId(v UUID) {
	o.Id = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Section) GetOptions() SectionOptions {
	if o == nil || IsNil(o.Options) {
		var ret SectionOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetOptionsOk() (*SectionOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Section) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given SectionOptions and assigns it to the Options field.
func (o *Section) SetOptions(v SectionOptions) {
	o.Options = &v
}

// GetRows returns the Rows field value if set, zero value otherwise.
func (o *Section) GetRows() []Row {
	if o == nil || IsNil(o.Rows) {
		var ret []Row
		return ret
	}
	return o.Rows
}

// GetRowsOk returns a tuple with the Rows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetRowsOk() ([]Row, bool) {
	if o == nil || IsNil(o.Rows) {
		return nil, false
	}
	return o.Rows, true
}

// HasRows returns a boolean if a field has been set.
func (o *Section) HasRows() bool {
	if o != nil && !IsNil(o.Rows) {
		return true
	}

	return false
}

// SetRows gets a reference to the given []Row and assigns it to the Rows field.
func (o *Section) SetRows(v []Row) {
	o.Rows = v
}

func (o Section) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Section) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Rows) {
		toSerialize["rows"] = o.Rows
	}
	return toSerialize, nil
}

type NullableSection struct {
	value *Section
	isSet bool
}

func (v NullableSection) Get() *Section {
	return v.value
}

func (v *NullableSection) Set(val *Section) {
	v.value = val
	v.isSet = true
}

func (v NullableSection) IsSet() bool {
	return v.isSet
}

func (v *NullableSection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSection(val *Section) *NullableSection {
	return &NullableSection{value: val, isSet: true}
}

func (v NullableSection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


