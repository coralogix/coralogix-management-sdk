/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the LogsAggregationOneOf3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogsAggregationOneOf3{}

// LogsAggregationOneOf3 struct for LogsAggregationOneOf3
type LogsAggregationOneOf3 struct {
	Average *Average `json:"average,omitempty"`
}

// NewLogsAggregationOneOf3 instantiates a new LogsAggregationOneOf3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsAggregationOneOf3() *LogsAggregationOneOf3 {
	this := LogsAggregationOneOf3{}
	return &this
}

// NewLogsAggregationOneOf3WithDefaults instantiates a new LogsAggregationOneOf3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsAggregationOneOf3WithDefaults() *LogsAggregationOneOf3 {
	this := LogsAggregationOneOf3{}
	return &this
}

// GetAverage returns the Average field value if set, zero value otherwise.
func (o *LogsAggregationOneOf3) GetAverage() Average {
	if o == nil || IsNil(o.Average) {
		var ret Average
		return ret
	}
	return *o.Average
}

// GetAverageOk returns a tuple with the Average field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsAggregationOneOf3) GetAverageOk() (*Average, bool) {
	if o == nil || IsNil(o.Average) {
		return nil, false
	}
	return o.Average, true
}

// HasAverage returns a boolean if a field has been set.
func (o *LogsAggregationOneOf3) HasAverage() bool {
	if o != nil && !IsNil(o.Average) {
		return true
	}

	return false
}

// SetAverage gets a reference to the given Average and assigns it to the Average field.
func (o *LogsAggregationOneOf3) SetAverage(v Average) {
	o.Average = &v
}

func (o LogsAggregationOneOf3) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogsAggregationOneOf3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Average) {
		toSerialize["average"] = o.Average
	}
	return toSerialize, nil
}

type NullableLogsAggregationOneOf3 struct {
	value *LogsAggregationOneOf3
	isSet bool
}

func (v NullableLogsAggregationOneOf3) Get() *LogsAggregationOneOf3 {
	return v.value
}

func (v *NullableLogsAggregationOneOf3) Set(val *LogsAggregationOneOf3) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsAggregationOneOf3) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsAggregationOneOf3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsAggregationOneOf3(val *LogsAggregationOneOf3) *NullableLogsAggregationOneOf3 {
	return &NullableLogsAggregationOneOf3{value: val, isSet: true}
}

func (v NullableLogsAggregationOneOf3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsAggregationOneOf3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


