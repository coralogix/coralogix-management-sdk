/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the SpansQueryAggregation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpansQueryAggregation{}

// SpansQueryAggregation struct for SpansQueryAggregation
type SpansQueryAggregation struct {
	Aggregation *SpansAggregation `json:"aggregation,omitempty"`
	// Aggregation unique identifier
	Id *string `json:"id,omitempty"`
	// Whether the aggregation is visible in the table
	IsVisible *bool `json:"isVisible,omitempty"`
	// Aggregation name
	Name *string `json:"name,omitempty"`
}

// NewSpansQueryAggregation instantiates a new SpansQueryAggregation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpansQueryAggregation() *SpansQueryAggregation {
	this := SpansQueryAggregation{}
	return &this
}

// NewSpansQueryAggregationWithDefaults instantiates a new SpansQueryAggregation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpansQueryAggregationWithDefaults() *SpansQueryAggregation {
	this := SpansQueryAggregation{}
	return &this
}

// GetAggregation returns the Aggregation field value if set, zero value otherwise.
func (o *SpansQueryAggregation) GetAggregation() SpansAggregation {
	if o == nil || IsNil(o.Aggregation) {
		var ret SpansAggregation
		return ret
	}
	return *o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpansQueryAggregation) GetAggregationOk() (*SpansAggregation, bool) {
	if o == nil || IsNil(o.Aggregation) {
		return nil, false
	}
	return o.Aggregation, true
}

// HasAggregation returns a boolean if a field has been set.
func (o *SpansQueryAggregation) HasAggregation() bool {
	if o != nil && !IsNil(o.Aggregation) {
		return true
	}

	return false
}

// SetAggregation gets a reference to the given SpansAggregation and assigns it to the Aggregation field.
func (o *SpansQueryAggregation) SetAggregation(v SpansAggregation) {
	o.Aggregation = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SpansQueryAggregation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpansQueryAggregation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SpansQueryAggregation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SpansQueryAggregation) SetId(v string) {
	o.Id = &v
}

// GetIsVisible returns the IsVisible field value if set, zero value otherwise.
func (o *SpansQueryAggregation) GetIsVisible() bool {
	if o == nil || IsNil(o.IsVisible) {
		var ret bool
		return ret
	}
	return *o.IsVisible
}

// GetIsVisibleOk returns a tuple with the IsVisible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpansQueryAggregation) GetIsVisibleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVisible) {
		return nil, false
	}
	return o.IsVisible, true
}

// HasIsVisible returns a boolean if a field has been set.
func (o *SpansQueryAggregation) HasIsVisible() bool {
	if o != nil && !IsNil(o.IsVisible) {
		return true
	}

	return false
}

// SetIsVisible gets a reference to the given bool and assigns it to the IsVisible field.
func (o *SpansQueryAggregation) SetIsVisible(v bool) {
	o.IsVisible = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SpansQueryAggregation) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpansQueryAggregation) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SpansQueryAggregation) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SpansQueryAggregation) SetName(v string) {
	o.Name = &v
}

func (o SpansQueryAggregation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpansQueryAggregation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aggregation) {
		toSerialize["aggregation"] = o.Aggregation
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsVisible) {
		toSerialize["isVisible"] = o.IsVisible
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableSpansQueryAggregation struct {
	value *SpansQueryAggregation
	isSet bool
}

func (v NullableSpansQueryAggregation) Get() *SpansQueryAggregation {
	return v.value
}

func (v *NullableSpansQueryAggregation) Set(val *SpansQueryAggregation) {
	v.value = val
	v.isSet = true
}

func (v NullableSpansQueryAggregation) IsSet() bool {
	return v.isSet
}

func (v *NullableSpansQueryAggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpansQueryAggregation(val *SpansQueryAggregation) *NullableSpansQueryAggregation {
	return &NullableSpansQueryAggregation{value: val, isSet: true}
}

func (v NullableSpansQueryAggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpansQueryAggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


