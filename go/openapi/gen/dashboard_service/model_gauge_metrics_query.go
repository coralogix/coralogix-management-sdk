/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the GaugeMetricsQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GaugeMetricsQuery{}

// GaugeMetricsQuery A metrics variant of the query
type GaugeMetricsQuery struct {
	Aggregation *GaugeAggregation `json:"aggregation,omitempty"`
	EditorMode *MetricsQueryEditorMode `json:"editorMode,omitempty"`
	Filters []MetricsFilter `json:"filters,omitempty"`
	PromqlQuery *PromQlQuery `json:"promqlQuery,omitempty"`
	PromqlQueryType *PromQLQueryType `json:"promqlQueryType,omitempty"`
	TimeFrame *TimeFrameSelect `json:"timeFrame,omitempty"`
}

// NewGaugeMetricsQuery instantiates a new GaugeMetricsQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGaugeMetricsQuery() *GaugeMetricsQuery {
	this := GaugeMetricsQuery{}
	return &this
}

// NewGaugeMetricsQueryWithDefaults instantiates a new GaugeMetricsQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGaugeMetricsQueryWithDefaults() *GaugeMetricsQuery {
	this := GaugeMetricsQuery{}
	return &this
}

// GetAggregation returns the Aggregation field value if set, zero value otherwise.
func (o *GaugeMetricsQuery) GetAggregation() GaugeAggregation {
	if o == nil || IsNil(o.Aggregation) {
		var ret GaugeAggregation
		return ret
	}
	return *o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GaugeMetricsQuery) GetAggregationOk() (*GaugeAggregation, bool) {
	if o == nil || IsNil(o.Aggregation) {
		return nil, false
	}
	return o.Aggregation, true
}

// HasAggregation returns a boolean if a field has been set.
func (o *GaugeMetricsQuery) HasAggregation() bool {
	if o != nil && !IsNil(o.Aggregation) {
		return true
	}

	return false
}

// SetAggregation gets a reference to the given GaugeAggregation and assigns it to the Aggregation field.
func (o *GaugeMetricsQuery) SetAggregation(v GaugeAggregation) {
	o.Aggregation = &v
}

// GetEditorMode returns the EditorMode field value if set, zero value otherwise.
func (o *GaugeMetricsQuery) GetEditorMode() MetricsQueryEditorMode {
	if o == nil || IsNil(o.EditorMode) {
		var ret MetricsQueryEditorMode
		return ret
	}
	return *o.EditorMode
}

// GetEditorModeOk returns a tuple with the EditorMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GaugeMetricsQuery) GetEditorModeOk() (*MetricsQueryEditorMode, bool) {
	if o == nil || IsNil(o.EditorMode) {
		return nil, false
	}
	return o.EditorMode, true
}

// HasEditorMode returns a boolean if a field has been set.
func (o *GaugeMetricsQuery) HasEditorMode() bool {
	if o != nil && !IsNil(o.EditorMode) {
		return true
	}

	return false
}

// SetEditorMode gets a reference to the given MetricsQueryEditorMode and assigns it to the EditorMode field.
func (o *GaugeMetricsQuery) SetEditorMode(v MetricsQueryEditorMode) {
	o.EditorMode = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *GaugeMetricsQuery) GetFilters() []MetricsFilter {
	if o == nil || IsNil(o.Filters) {
		var ret []MetricsFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GaugeMetricsQuery) GetFiltersOk() ([]MetricsFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *GaugeMetricsQuery) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []MetricsFilter and assigns it to the Filters field.
func (o *GaugeMetricsQuery) SetFilters(v []MetricsFilter) {
	o.Filters = v
}

// GetPromqlQuery returns the PromqlQuery field value if set, zero value otherwise.
func (o *GaugeMetricsQuery) GetPromqlQuery() PromQlQuery {
	if o == nil || IsNil(o.PromqlQuery) {
		var ret PromQlQuery
		return ret
	}
	return *o.PromqlQuery
}

// GetPromqlQueryOk returns a tuple with the PromqlQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GaugeMetricsQuery) GetPromqlQueryOk() (*PromQlQuery, bool) {
	if o == nil || IsNil(o.PromqlQuery) {
		return nil, false
	}
	return o.PromqlQuery, true
}

// HasPromqlQuery returns a boolean if a field has been set.
func (o *GaugeMetricsQuery) HasPromqlQuery() bool {
	if o != nil && !IsNil(o.PromqlQuery) {
		return true
	}

	return false
}

// SetPromqlQuery gets a reference to the given PromQlQuery and assigns it to the PromqlQuery field.
func (o *GaugeMetricsQuery) SetPromqlQuery(v PromQlQuery) {
	o.PromqlQuery = &v
}

// GetPromqlQueryType returns the PromqlQueryType field value if set, zero value otherwise.
func (o *GaugeMetricsQuery) GetPromqlQueryType() PromQLQueryType {
	if o == nil || IsNil(o.PromqlQueryType) {
		var ret PromQLQueryType
		return ret
	}
	return *o.PromqlQueryType
}

// GetPromqlQueryTypeOk returns a tuple with the PromqlQueryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GaugeMetricsQuery) GetPromqlQueryTypeOk() (*PromQLQueryType, bool) {
	if o == nil || IsNil(o.PromqlQueryType) {
		return nil, false
	}
	return o.PromqlQueryType, true
}

// HasPromqlQueryType returns a boolean if a field has been set.
func (o *GaugeMetricsQuery) HasPromqlQueryType() bool {
	if o != nil && !IsNil(o.PromqlQueryType) {
		return true
	}

	return false
}

// SetPromqlQueryType gets a reference to the given PromQLQueryType and assigns it to the PromqlQueryType field.
func (o *GaugeMetricsQuery) SetPromqlQueryType(v PromQLQueryType) {
	o.PromqlQueryType = &v
}

// GetTimeFrame returns the TimeFrame field value if set, zero value otherwise.
func (o *GaugeMetricsQuery) GetTimeFrame() TimeFrameSelect {
	if o == nil || IsNil(o.TimeFrame) {
		var ret TimeFrameSelect
		return ret
	}
	return *o.TimeFrame
}

// GetTimeFrameOk returns a tuple with the TimeFrame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GaugeMetricsQuery) GetTimeFrameOk() (*TimeFrameSelect, bool) {
	if o == nil || IsNil(o.TimeFrame) {
		return nil, false
	}
	return o.TimeFrame, true
}

// HasTimeFrame returns a boolean if a field has been set.
func (o *GaugeMetricsQuery) HasTimeFrame() bool {
	if o != nil && !IsNil(o.TimeFrame) {
		return true
	}

	return false
}

// SetTimeFrame gets a reference to the given TimeFrameSelect and assigns it to the TimeFrame field.
func (o *GaugeMetricsQuery) SetTimeFrame(v TimeFrameSelect) {
	o.TimeFrame = &v
}

func (o GaugeMetricsQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GaugeMetricsQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aggregation) {
		toSerialize["aggregation"] = o.Aggregation
	}
	if !IsNil(o.EditorMode) {
		toSerialize["editorMode"] = o.EditorMode
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.PromqlQuery) {
		toSerialize["promqlQuery"] = o.PromqlQuery
	}
	if !IsNil(o.PromqlQueryType) {
		toSerialize["promqlQueryType"] = o.PromqlQueryType
	}
	if !IsNil(o.TimeFrame) {
		toSerialize["timeFrame"] = o.TimeFrame
	}
	return toSerialize, nil
}

type NullableGaugeMetricsQuery struct {
	value *GaugeMetricsQuery
	isSet bool
}

func (v NullableGaugeMetricsQuery) Get() *GaugeMetricsQuery {
	return v.value
}

func (v *NullableGaugeMetricsQuery) Set(val *GaugeMetricsQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableGaugeMetricsQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableGaugeMetricsQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGaugeMetricsQuery(val *GaugeMetricsQuery) *NullableGaugeMetricsQuery {
	return &NullableGaugeMetricsQuery{value: val, isSet: true}
}

func (v NullableGaugeMetricsQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGaugeMetricsQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


