/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// RowStyle the model 'RowStyle'
type RowStyle string

// List of RowStyle
const (
	ROWSTYLE_ROW_STYLE_UNSPECIFIED RowStyle = "ROW_STYLE_UNSPECIFIED"
	ROWSTYLE_ROW_STYLE_ONE_LINE RowStyle = "ROW_STYLE_ONE_LINE"
	ROWSTYLE_ROW_STYLE_TWO_LINE RowStyle = "ROW_STYLE_TWO_LINE"
	ROWSTYLE_ROW_STYLE_CONDENSED RowStyle = "ROW_STYLE_CONDENSED"
	ROWSTYLE_ROW_STYLE_JSON RowStyle = "ROW_STYLE_JSON"
	ROWSTYLE_ROW_STYLE_LIST RowStyle = "ROW_STYLE_LIST"
)

// All allowed values of RowStyle enum
var AllowedRowStyleEnumValues = []RowStyle{
	"ROW_STYLE_UNSPECIFIED",
	"ROW_STYLE_ONE_LINE",
	"ROW_STYLE_TWO_LINE",
	"ROW_STYLE_CONDENSED",
	"ROW_STYLE_JSON",
	"ROW_STYLE_LIST",
}

func (v *RowStyle) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RowStyle(value)
	for _, existing := range AllowedRowStyleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RowStyle", value)
}

// NewRowStyleFromValue returns a pointer to a valid RowStyle
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRowStyleFromValue(v string) (*RowStyle, error) {
	ev := RowStyle(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RowStyle: valid values are %v", v, AllowedRowStyleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RowStyle) IsValid() bool {
	for _, existing := range AllowedRowStyleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RowStyle value
func (v RowStyle) Ptr() *RowStyle {
	return &v
}

type NullableRowStyle struct {
	value *RowStyle
	isSet bool
}

func (v NullableRowStyle) Get() *RowStyle {
	return v.value
}

func (v *NullableRowStyle) Set(val *RowStyle) {
	v.value = val
	v.isSet = true
}

func (v NullableRowStyle) IsSet() bool {
	return v.isSet
}

func (v *NullableRowStyle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRowStyle(val *RowStyle) *NullableRowStyle {
	return &NullableRowStyle{value: val, isSet: true}
}

func (v NullableRowStyle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRowStyle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

