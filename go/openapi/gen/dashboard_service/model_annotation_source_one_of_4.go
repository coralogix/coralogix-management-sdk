/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the AnnotationSourceOneOf4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnnotationSourceOneOf4{}

// AnnotationSourceOneOf4 struct for AnnotationSourceOneOf4
type AnnotationSourceOneOf4 struct {
	Manual *ManualSource `json:"manual,omitempty"`
}

// NewAnnotationSourceOneOf4 instantiates a new AnnotationSourceOneOf4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnnotationSourceOneOf4() *AnnotationSourceOneOf4 {
	this := AnnotationSourceOneOf4{}
	return &this
}

// NewAnnotationSourceOneOf4WithDefaults instantiates a new AnnotationSourceOneOf4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnnotationSourceOneOf4WithDefaults() *AnnotationSourceOneOf4 {
	this := AnnotationSourceOneOf4{}
	return &this
}

// GetManual returns the Manual field value if set, zero value otherwise.
func (o *AnnotationSourceOneOf4) GetManual() ManualSource {
	if o == nil || IsNil(o.Manual) {
		var ret ManualSource
		return ret
	}
	return *o.Manual
}

// GetManualOk returns a tuple with the Manual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnotationSourceOneOf4) GetManualOk() (*ManualSource, bool) {
	if o == nil || IsNil(o.Manual) {
		return nil, false
	}
	return o.Manual, true
}

// HasManual returns a boolean if a field has been set.
func (o *AnnotationSourceOneOf4) HasManual() bool {
	if o != nil && !IsNil(o.Manual) {
		return true
	}

	return false
}

// SetManual gets a reference to the given ManualSource and assigns it to the Manual field.
func (o *AnnotationSourceOneOf4) SetManual(v ManualSource) {
	o.Manual = &v
}

func (o AnnotationSourceOneOf4) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnnotationSourceOneOf4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Manual) {
		toSerialize["manual"] = o.Manual
	}
	return toSerialize, nil
}

type NullableAnnotationSourceOneOf4 struct {
	value *AnnotationSourceOneOf4
	isSet bool
}

func (v NullableAnnotationSourceOneOf4) Get() *AnnotationSourceOneOf4 {
	return v.value
}

func (v *NullableAnnotationSourceOneOf4) Set(val *AnnotationSourceOneOf4) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnotationSourceOneOf4) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnotationSourceOneOf4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnotationSourceOneOf4(val *AnnotationSourceOneOf4) *NullableAnnotationSourceOneOf4 {
	return &NullableAnnotationSourceOneOf4{value: val, isSet: true}
}

func (v NullableAnnotationSourceOneOf4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnotationSourceOneOf4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


