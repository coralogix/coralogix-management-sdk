/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the AnnotationSourceLogs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnnotationSourceLogs{}

// AnnotationSourceLogs struct for AnnotationSourceLogs
type AnnotationSourceLogs struct {
	Logs *LogsSource `json:"logs,omitempty"`
}

// NewAnnotationSourceLogs instantiates a new AnnotationSourceLogs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnnotationSourceLogs() *AnnotationSourceLogs {
	this := AnnotationSourceLogs{}
	return &this
}

// NewAnnotationSourceLogsWithDefaults instantiates a new AnnotationSourceLogs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnnotationSourceLogsWithDefaults() *AnnotationSourceLogs {
	this := AnnotationSourceLogs{}
	return &this
}

// GetLogs returns the Logs field value if set, zero value otherwise.
func (o *AnnotationSourceLogs) GetLogs() LogsSource {
	if o == nil || IsNil(o.Logs) {
		var ret LogsSource
		return ret
	}
	return *o.Logs
}

// GetLogsOk returns a tuple with the Logs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnotationSourceLogs) GetLogsOk() (*LogsSource, bool) {
	if o == nil || IsNil(o.Logs) {
		return nil, false
	}
	return o.Logs, true
}

// HasLogs returns a boolean if a field has been set.
func (o *AnnotationSourceLogs) HasLogs() bool {
	if o != nil && !IsNil(o.Logs) {
		return true
	}

	return false
}

// SetLogs gets a reference to the given LogsSource and assigns it to the Logs field.
func (o *AnnotationSourceLogs) SetLogs(v LogsSource) {
	o.Logs = &v
}

func (o AnnotationSourceLogs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnnotationSourceLogs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Logs) {
		toSerialize["logs"] = o.Logs
	}
	return toSerialize, nil
}

type NullableAnnotationSourceLogs struct {
	value *AnnotationSourceLogs
	isSet bool
}

func (v NullableAnnotationSourceLogs) Get() *AnnotationSourceLogs {
	return v.value
}

func (v *NullableAnnotationSourceLogs) Set(val *AnnotationSourceLogs) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnotationSourceLogs) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnotationSourceLogs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnotationSourceLogs(val *AnnotationSourceLogs) *NullableAnnotationSourceLogs {
	return &NullableAnnotationSourceLogs{value: val, isSet: true}
}

func (v NullableAnnotationSourceLogs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnotationSourceLogs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


