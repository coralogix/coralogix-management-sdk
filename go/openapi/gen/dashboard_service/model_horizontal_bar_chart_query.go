/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// HorizontalBarChartQuery - struct for HorizontalBarChartQuery
type HorizontalBarChartQuery struct {
	HorizontalBarChartQueryDataprime *HorizontalBarChartQueryDataprime
	HorizontalBarChartQueryLogs *HorizontalBarChartQueryLogs
	HorizontalBarChartQueryMetrics *HorizontalBarChartQueryMetrics
	HorizontalBarChartQuerySpans *HorizontalBarChartQuerySpans
}

// HorizontalBarChartQueryDataprimeAsHorizontalBarChartQuery is a convenience function that returns HorizontalBarChartQueryDataprime wrapped in HorizontalBarChartQuery
func HorizontalBarChartQueryDataprimeAsHorizontalBarChartQuery(v *HorizontalBarChartQueryDataprime) HorizontalBarChartQuery {
	return HorizontalBarChartQuery{
		HorizontalBarChartQueryDataprime: v,
	}
}

// HorizontalBarChartQueryLogsAsHorizontalBarChartQuery is a convenience function that returns HorizontalBarChartQueryLogs wrapped in HorizontalBarChartQuery
func HorizontalBarChartQueryLogsAsHorizontalBarChartQuery(v *HorizontalBarChartQueryLogs) HorizontalBarChartQuery {
	return HorizontalBarChartQuery{
		HorizontalBarChartQueryLogs: v,
	}
}

// HorizontalBarChartQueryMetricsAsHorizontalBarChartQuery is a convenience function that returns HorizontalBarChartQueryMetrics wrapped in HorizontalBarChartQuery
func HorizontalBarChartQueryMetricsAsHorizontalBarChartQuery(v *HorizontalBarChartQueryMetrics) HorizontalBarChartQuery {
	return HorizontalBarChartQuery{
		HorizontalBarChartQueryMetrics: v,
	}
}

// HorizontalBarChartQuerySpansAsHorizontalBarChartQuery is a convenience function that returns HorizontalBarChartQuerySpans wrapped in HorizontalBarChartQuery
func HorizontalBarChartQuerySpansAsHorizontalBarChartQuery(v *HorizontalBarChartQuerySpans) HorizontalBarChartQuery {
	return HorizontalBarChartQuery{
		HorizontalBarChartQuerySpans: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *HorizontalBarChartQuery) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into HorizontalBarChartQueryDataprime
	err = newStrictDecoder(data).Decode(&dst.HorizontalBarChartQueryDataprime)
	if err == nil {
		jsonHorizontalBarChartQueryDataprime, _ := json.Marshal(dst.HorizontalBarChartQueryDataprime)
		if string(jsonHorizontalBarChartQueryDataprime) == "{}" { // empty struct
			dst.HorizontalBarChartQueryDataprime = nil
		} else {
			if err = validator.Validate(dst.HorizontalBarChartQueryDataprime); err != nil {
				dst.HorizontalBarChartQueryDataprime = nil
			} else {
				match++
			}
		}
	} else {
		dst.HorizontalBarChartQueryDataprime = nil
	}

	// try to unmarshal data into HorizontalBarChartQueryLogs
	err = newStrictDecoder(data).Decode(&dst.HorizontalBarChartQueryLogs)
	if err == nil {
		jsonHorizontalBarChartQueryLogs, _ := json.Marshal(dst.HorizontalBarChartQueryLogs)
		if string(jsonHorizontalBarChartQueryLogs) == "{}" { // empty struct
			dst.HorizontalBarChartQueryLogs = nil
		} else {
			if err = validator.Validate(dst.HorizontalBarChartQueryLogs); err != nil {
				dst.HorizontalBarChartQueryLogs = nil
			} else {
				match++
			}
		}
	} else {
		dst.HorizontalBarChartQueryLogs = nil
	}

	// try to unmarshal data into HorizontalBarChartQueryMetrics
	err = newStrictDecoder(data).Decode(&dst.HorizontalBarChartQueryMetrics)
	if err == nil {
		jsonHorizontalBarChartQueryMetrics, _ := json.Marshal(dst.HorizontalBarChartQueryMetrics)
		if string(jsonHorizontalBarChartQueryMetrics) == "{}" { // empty struct
			dst.HorizontalBarChartQueryMetrics = nil
		} else {
			if err = validator.Validate(dst.HorizontalBarChartQueryMetrics); err != nil {
				dst.HorizontalBarChartQueryMetrics = nil
			} else {
				match++
			}
		}
	} else {
		dst.HorizontalBarChartQueryMetrics = nil
	}

	// try to unmarshal data into HorizontalBarChartQuerySpans
	err = newStrictDecoder(data).Decode(&dst.HorizontalBarChartQuerySpans)
	if err == nil {
		jsonHorizontalBarChartQuerySpans, _ := json.Marshal(dst.HorizontalBarChartQuerySpans)
		if string(jsonHorizontalBarChartQuerySpans) == "{}" { // empty struct
			dst.HorizontalBarChartQuerySpans = nil
		} else {
			if err = validator.Validate(dst.HorizontalBarChartQuerySpans); err != nil {
				dst.HorizontalBarChartQuerySpans = nil
			} else {
				match++
			}
		}
	} else {
		dst.HorizontalBarChartQuerySpans = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.HorizontalBarChartQueryDataprime = nil
		dst.HorizontalBarChartQueryLogs = nil
		dst.HorizontalBarChartQueryMetrics = nil
		dst.HorizontalBarChartQuerySpans = nil

		return fmt.Errorf("data matches more than one schema in oneOf(HorizontalBarChartQuery)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(HorizontalBarChartQuery)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src HorizontalBarChartQuery) MarshalJSON() ([]byte, error) {
	if src.HorizontalBarChartQueryDataprime != nil {
		return json.Marshal(&src.HorizontalBarChartQueryDataprime)
	}

	if src.HorizontalBarChartQueryLogs != nil {
		return json.Marshal(&src.HorizontalBarChartQueryLogs)
	}

	if src.HorizontalBarChartQueryMetrics != nil {
		return json.Marshal(&src.HorizontalBarChartQueryMetrics)
	}

	if src.HorizontalBarChartQuerySpans != nil {
		return json.Marshal(&src.HorizontalBarChartQuerySpans)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *HorizontalBarChartQuery) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.HorizontalBarChartQueryDataprime != nil {
		return obj.HorizontalBarChartQueryDataprime
	}

	if obj.HorizontalBarChartQueryLogs != nil {
		return obj.HorizontalBarChartQueryLogs
	}

	if obj.HorizontalBarChartQueryMetrics != nil {
		return obj.HorizontalBarChartQueryMetrics
	}

	if obj.HorizontalBarChartQuerySpans != nil {
		return obj.HorizontalBarChartQuerySpans
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj HorizontalBarChartQuery) GetActualInstanceValue() (interface{}) {
	if obj.HorizontalBarChartQueryDataprime != nil {
		return *obj.HorizontalBarChartQueryDataprime
	}

	if obj.HorizontalBarChartQueryLogs != nil {
		return *obj.HorizontalBarChartQueryLogs
	}

	if obj.HorizontalBarChartQueryMetrics != nil {
		return *obj.HorizontalBarChartQueryMetrics
	}

	if obj.HorizontalBarChartQuerySpans != nil {
		return *obj.HorizontalBarChartQuerySpans
	}

	// all schemas are nil
	return nil
}

type NullableHorizontalBarChartQuery struct {
	value *HorizontalBarChartQuery
	isSet bool
}

func (v NullableHorizontalBarChartQuery) Get() *HorizontalBarChartQuery {
	return v.value
}

func (v *NullableHorizontalBarChartQuery) Set(val *HorizontalBarChartQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableHorizontalBarChartQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableHorizontalBarChartQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHorizontalBarChartQuery(val *HorizontalBarChartQuery) *NullableHorizontalBarChartQuery {
	return &NullableHorizontalBarChartQuery{value: val, isSet: true}
}

func (v NullableHorizontalBarChartQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHorizontalBarChartQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


