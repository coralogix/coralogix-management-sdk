/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DashboardServiceAPIService DashboardServiceAPI service
type DashboardServiceAPIService service

type ApiDashboardCatalogServiceGetDashboardCatalogRequest struct {
	ctx context.Context
	ApiService *DashboardServiceAPIService
}

func (r ApiDashboardCatalogServiceGetDashboardCatalogRequest) Execute() (*GetDashboardCatalogResponse, *http.Response, error) {
	return r.ApiService.DashboardCatalogServiceGetDashboardCatalogExecute(r)
}

/*
DashboardCatalogServiceGetDashboardCatalog Get dashboard catalog

Get a list of all dashboards accessible.

Requires the following permissions:
- `team-dashboards:Read`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDashboardCatalogServiceGetDashboardCatalogRequest
*/
func (a *DashboardServiceAPIService) DashboardCatalogServiceGetDashboardCatalog(ctx context.Context) ApiDashboardCatalogServiceGetDashboardCatalogRequest {
	return ApiDashboardCatalogServiceGetDashboardCatalogRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetDashboardCatalogResponse
func (a *DashboardServiceAPIService) DashboardCatalogServiceGetDashboardCatalogExecute(r ApiDashboardCatalogServiceGetDashboardCatalogRequest) (*GetDashboardCatalogResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetDashboardCatalogResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardServiceAPIService.DashboardCatalogServiceGetDashboardCatalog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dashboards/dashboards/v1/catalog"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDashboardsServiceAssignDashboardFolderRequest struct {
	ctx context.Context
	ApiService *DashboardServiceAPIService
	dashboardId string
	assignDashboardToFolderRequestDataStructure *AssignDashboardToFolderRequestDataStructure
}

func (r ApiDashboardsServiceAssignDashboardFolderRequest) AssignDashboardToFolderRequestDataStructure(assignDashboardToFolderRequestDataStructure AssignDashboardToFolderRequestDataStructure) ApiDashboardsServiceAssignDashboardFolderRequest {
	r.assignDashboardToFolderRequestDataStructure = &assignDashboardToFolderRequestDataStructure
	return r
}

func (r ApiDashboardsServiceAssignDashboardFolderRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DashboardsServiceAssignDashboardFolderExecute(r)
}

/*
DashboardsServiceAssignDashboardFolder Assign a dashboard to a folder

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dashboardId
 @return ApiDashboardsServiceAssignDashboardFolderRequest
*/
func (a *DashboardServiceAPIService) DashboardsServiceAssignDashboardFolder(ctx context.Context, dashboardId string) ApiDashboardsServiceAssignDashboardFolderRequest {
	return ApiDashboardsServiceAssignDashboardFolderRequest{
		ApiService: a,
		ctx: ctx,
		dashboardId: dashboardId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DashboardServiceAPIService) DashboardsServiceAssignDashboardFolderExecute(r ApiDashboardsServiceAssignDashboardFolderRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardServiceAPIService.DashboardsServiceAssignDashboardFolder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/dashboards/dashboards/{dashboard_id}/folder"
	localVarPath = strings.Replace(localVarPath, "{"+"dashboard_id"+"}", url.PathEscape(parameterValueToString(r.dashboardId, "dashboardId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.assignDashboardToFolderRequestDataStructure
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDashboardsServiceCreateDashboardRequest struct {
	ctx context.Context
	ApiService *DashboardServiceAPIService
	createDashboardRequestDataStructure *CreateDashboardRequestDataStructure
}

func (r ApiDashboardsServiceCreateDashboardRequest) CreateDashboardRequestDataStructure(createDashboardRequestDataStructure CreateDashboardRequestDataStructure) ApiDashboardsServiceCreateDashboardRequest {
	r.createDashboardRequestDataStructure = &createDashboardRequestDataStructure
	return r
}

func (r ApiDashboardsServiceCreateDashboardRequest) Execute() (*CreateDashboardResponse, *http.Response, error) {
	return r.ApiService.DashboardsServiceCreateDashboardExecute(r)
}

/*
DashboardsServiceCreateDashboard Create a new dashboard

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDashboardsServiceCreateDashboardRequest
*/
func (a *DashboardServiceAPIService) DashboardsServiceCreateDashboard(ctx context.Context) ApiDashboardsServiceCreateDashboardRequest {
	return ApiDashboardsServiceCreateDashboardRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateDashboardResponse
func (a *DashboardServiceAPIService) DashboardsServiceCreateDashboardExecute(r ApiDashboardsServiceCreateDashboardRequest) (*CreateDashboardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateDashboardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardServiceAPIService.DashboardsServiceCreateDashboard")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/dashboards/dashboards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createDashboardRequestDataStructure
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDashboardsServiceDeleteDashboardRequest struct {
	ctx context.Context
	ApiService *DashboardServiceAPIService
	dashboardId string
	requestId *string
}

func (r ApiDashboardsServiceDeleteDashboardRequest) RequestId(requestId string) ApiDashboardsServiceDeleteDashboardRequest {
	r.requestId = &requestId
	return r
}

func (r ApiDashboardsServiceDeleteDashboardRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DashboardsServiceDeleteDashboardExecute(r)
}

/*
DashboardsServiceDeleteDashboard Delete a dashboard

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dashboardId
 @return ApiDashboardsServiceDeleteDashboardRequest
*/
func (a *DashboardServiceAPIService) DashboardsServiceDeleteDashboard(ctx context.Context, dashboardId string) ApiDashboardsServiceDeleteDashboardRequest {
	return ApiDashboardsServiceDeleteDashboardRequest{
		ApiService: a,
		ctx: ctx,
		dashboardId: dashboardId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DashboardServiceAPIService) DashboardsServiceDeleteDashboardExecute(r ApiDashboardsServiceDeleteDashboardRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardServiceAPIService.DashboardsServiceDeleteDashboard")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/dashboards/dashboards/{dashboard_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dashboard_id"+"}", url.PathEscape(parameterValueToString(r.dashboardId, "dashboardId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.requestId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "request_id", r.requestId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDashboardsServiceGetDashboardRequest struct {
	ctx context.Context
	ApiService *DashboardServiceAPIService
	dashboardId string
}

func (r ApiDashboardsServiceGetDashboardRequest) Execute() (*GetDashboardResponse, *http.Response, error) {
	return r.ApiService.DashboardsServiceGetDashboardExecute(r)
}

/*
DashboardsServiceGetDashboard Get a dashboard

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dashboardId
 @return ApiDashboardsServiceGetDashboardRequest
*/
func (a *DashboardServiceAPIService) DashboardsServiceGetDashboard(ctx context.Context, dashboardId string) ApiDashboardsServiceGetDashboardRequest {
	return ApiDashboardsServiceGetDashboardRequest{
		ApiService: a,
		ctx: ctx,
		dashboardId: dashboardId,
	}
}

// Execute executes the request
//  @return GetDashboardResponse
func (a *DashboardServiceAPIService) DashboardsServiceGetDashboardExecute(r ApiDashboardsServiceGetDashboardRequest) (*GetDashboardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetDashboardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardServiceAPIService.DashboardsServiceGetDashboard")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/dashboards/dashboards/{dashboard_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dashboard_id"+"}", url.PathEscape(parameterValueToString(r.dashboardId, "dashboardId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDashboardsServiceGetDashboardBySlugRequest struct {
	ctx context.Context
	ApiService *DashboardServiceAPIService
	slug string
}

func (r ApiDashboardsServiceGetDashboardBySlugRequest) Execute() (*GetDashboardBySlugResponse, *http.Response, error) {
	return r.ApiService.DashboardsServiceGetDashboardBySlugExecute(r)
}

/*
DashboardsServiceGetDashboardBySlug Get a dashboard by URL slug

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param slug
 @return ApiDashboardsServiceGetDashboardBySlugRequest
*/
func (a *DashboardServiceAPIService) DashboardsServiceGetDashboardBySlug(ctx context.Context, slug string) ApiDashboardsServiceGetDashboardBySlugRequest {
	return ApiDashboardsServiceGetDashboardBySlugRequest{
		ApiService: a,
		ctx: ctx,
		slug: slug,
	}
}

// Execute executes the request
//  @return GetDashboardBySlugResponse
func (a *DashboardServiceAPIService) DashboardsServiceGetDashboardBySlugExecute(r ApiDashboardsServiceGetDashboardBySlugRequest) (*GetDashboardBySlugResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetDashboardBySlugResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardServiceAPIService.DashboardsServiceGetDashboardBySlug")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/dashboards/by-slug/{slug}"
	localVarPath = strings.Replace(localVarPath, "{"+"slug"+"}", url.PathEscape(parameterValueToString(r.slug, "slug")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDashboardsServicePinDashboardRequest struct {
	ctx context.Context
	ApiService *DashboardServiceAPIService
	dashboardId string
	pinDashboardRequestDataStructure *PinDashboardRequestDataStructure
}

func (r ApiDashboardsServicePinDashboardRequest) PinDashboardRequestDataStructure(pinDashboardRequestDataStructure PinDashboardRequestDataStructure) ApiDashboardsServicePinDashboardRequest {
	r.pinDashboardRequestDataStructure = &pinDashboardRequestDataStructure
	return r
}

func (r ApiDashboardsServicePinDashboardRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DashboardsServicePinDashboardExecute(r)
}

/*
DashboardsServicePinDashboard Add dashboard to favorites

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dashboardId
 @return ApiDashboardsServicePinDashboardRequest
*/
func (a *DashboardServiceAPIService) DashboardsServicePinDashboard(ctx context.Context, dashboardId string) ApiDashboardsServicePinDashboardRequest {
	return ApiDashboardsServicePinDashboardRequest{
		ApiService: a,
		ctx: ctx,
		dashboardId: dashboardId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DashboardServiceAPIService) DashboardsServicePinDashboardExecute(r ApiDashboardsServicePinDashboardRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardServiceAPIService.DashboardsServicePinDashboard")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/dashboards/dashboards/{dashboard_id}:pin"
	localVarPath = strings.Replace(localVarPath, "{"+"dashboard_id"+"}", url.PathEscape(parameterValueToString(r.dashboardId, "dashboardId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.pinDashboardRequestDataStructure
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDashboardsServiceReplaceDashboardRequest struct {
	ctx context.Context
	ApiService *DashboardServiceAPIService
	replaceDashboardRequestDataStructure *ReplaceDashboardRequestDataStructure
}

func (r ApiDashboardsServiceReplaceDashboardRequest) ReplaceDashboardRequestDataStructure(replaceDashboardRequestDataStructure ReplaceDashboardRequestDataStructure) ApiDashboardsServiceReplaceDashboardRequest {
	r.replaceDashboardRequestDataStructure = &replaceDashboardRequestDataStructure
	return r
}

func (r ApiDashboardsServiceReplaceDashboardRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DashboardsServiceReplaceDashboardExecute(r)
}

/*
DashboardsServiceReplaceDashboard Replace a dashboard

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDashboardsServiceReplaceDashboardRequest
*/
func (a *DashboardServiceAPIService) DashboardsServiceReplaceDashboard(ctx context.Context) ApiDashboardsServiceReplaceDashboardRequest {
	return ApiDashboardsServiceReplaceDashboardRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DashboardServiceAPIService) DashboardsServiceReplaceDashboardExecute(r ApiDashboardsServiceReplaceDashboardRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardServiceAPIService.DashboardsServiceReplaceDashboard")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/dashboards/dashboards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.replaceDashboardRequestDataStructure
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDashboardsServiceReplaceDefaultDashboardRequest struct {
	ctx context.Context
	ApiService *DashboardServiceAPIService
	dashboardId string
	replaceDefaultDashboardRequestDataStructure *ReplaceDefaultDashboardRequestDataStructure
}

func (r ApiDashboardsServiceReplaceDefaultDashboardRequest) ReplaceDefaultDashboardRequestDataStructure(replaceDefaultDashboardRequestDataStructure ReplaceDefaultDashboardRequestDataStructure) ApiDashboardsServiceReplaceDefaultDashboardRequest {
	r.replaceDefaultDashboardRequestDataStructure = &replaceDefaultDashboardRequestDataStructure
	return r
}

func (r ApiDashboardsServiceReplaceDefaultDashboardRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DashboardsServiceReplaceDefaultDashboardExecute(r)
}

/*
DashboardsServiceReplaceDefaultDashboard Replace the default dashboard

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dashboardId
 @return ApiDashboardsServiceReplaceDefaultDashboardRequest
*/
func (a *DashboardServiceAPIService) DashboardsServiceReplaceDefaultDashboard(ctx context.Context, dashboardId string) ApiDashboardsServiceReplaceDefaultDashboardRequest {
	return ApiDashboardsServiceReplaceDefaultDashboardRequest{
		ApiService: a,
		ctx: ctx,
		dashboardId: dashboardId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DashboardServiceAPIService) DashboardsServiceReplaceDefaultDashboardExecute(r ApiDashboardsServiceReplaceDefaultDashboardRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardServiceAPIService.DashboardsServiceReplaceDefaultDashboard")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/dashboards/dashboards/{dashboard_id}/default"
	localVarPath = strings.Replace(localVarPath, "{"+"dashboard_id"+"}", url.PathEscape(parameterValueToString(r.dashboardId, "dashboardId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.replaceDefaultDashboardRequestDataStructure
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDashboardsServiceUnpinDashboardRequest struct {
	ctx context.Context
	ApiService *DashboardServiceAPIService
	dashboardId string
	unpinDashboardRequestDataStructure *UnpinDashboardRequestDataStructure
}

func (r ApiDashboardsServiceUnpinDashboardRequest) UnpinDashboardRequestDataStructure(unpinDashboardRequestDataStructure UnpinDashboardRequestDataStructure) ApiDashboardsServiceUnpinDashboardRequest {
	r.unpinDashboardRequestDataStructure = &unpinDashboardRequestDataStructure
	return r
}

func (r ApiDashboardsServiceUnpinDashboardRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DashboardsServiceUnpinDashboardExecute(r)
}

/*
DashboardsServiceUnpinDashboard Remove dashboard from favorites

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dashboardId
 @return ApiDashboardsServiceUnpinDashboardRequest
*/
func (a *DashboardServiceAPIService) DashboardsServiceUnpinDashboard(ctx context.Context, dashboardId string) ApiDashboardsServiceUnpinDashboardRequest {
	return ApiDashboardsServiceUnpinDashboardRequest{
		ApiService: a,
		ctx: ctx,
		dashboardId: dashboardId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DashboardServiceAPIService) DashboardsServiceUnpinDashboardExecute(r ApiDashboardsServiceUnpinDashboardRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardServiceAPIService.DashboardsServiceUnpinDashboard")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/dashboards/dashboards/{dashboard_id}:unpin"
	localVarPath = strings.Replace(localVarPath, "{"+"dashboard_id"+"}", url.PathEscape(parameterValueToString(r.dashboardId, "dashboardId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unpinDashboardRequestDataStructure
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
