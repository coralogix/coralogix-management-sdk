/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// CommonThresholdBy the model 'CommonThresholdBy'
type CommonThresholdBy string

// List of common.ThresholdBy
const (
	COMMONTHRESHOLDBY_THRESHOLD_BY_UNSPECIFIED CommonThresholdBy = "THRESHOLD_BY_UNSPECIFIED"
	COMMONTHRESHOLDBY_THRESHOLD_BY_VALUE CommonThresholdBy = "THRESHOLD_BY_VALUE"
	COMMONTHRESHOLDBY_THRESHOLD_BY_BACKGROUND CommonThresholdBy = "THRESHOLD_BY_BACKGROUND"
)

// All allowed values of CommonThresholdBy enum
var AllowedCommonThresholdByEnumValues = []CommonThresholdBy{
	"THRESHOLD_BY_UNSPECIFIED",
	"THRESHOLD_BY_VALUE",
	"THRESHOLD_BY_BACKGROUND",
}

func (v *CommonThresholdBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommonThresholdBy(value)
	for _, existing := range AllowedCommonThresholdByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommonThresholdBy", value)
}

// NewCommonThresholdByFromValue returns a pointer to a valid CommonThresholdBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommonThresholdByFromValue(v string) (*CommonThresholdBy, error) {
	ev := CommonThresholdBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommonThresholdBy: valid values are %v", v, AllowedCommonThresholdByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommonThresholdBy) IsValid() bool {
	for _, existing := range AllowedCommonThresholdByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to common.ThresholdBy value
func (v CommonThresholdBy) Ptr() *CommonThresholdBy {
	return &v
}

type NullableCommonThresholdBy struct {
	value *CommonThresholdBy
	isSet bool
}

func (v NullableCommonThresholdBy) Get() *CommonThresholdBy {
	return v.value
}

func (v *NullableCommonThresholdBy) Set(val *CommonThresholdBy) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonThresholdBy) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonThresholdBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonThresholdBy(val *CommonThresholdBy) *NullableCommonThresholdBy {
	return &NullableCommonThresholdBy{value: val, isSet: true}
}

func (v NullableCommonThresholdBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonThresholdBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

