/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PieChartQuery - struct for PieChartQuery
type PieChartQuery struct {
	PieChartQueryOneOf *PieChartQueryOneOf
	PieChartQueryOneOf1 *PieChartQueryOneOf1
	PieChartQueryOneOf2 *PieChartQueryOneOf2
	PieChartQueryOneOf3 *PieChartQueryOneOf3
}

// PieChartQueryOneOfAsPieChartQuery is a convenience function that returns PieChartQueryOneOf wrapped in PieChartQuery
func PieChartQueryOneOfAsPieChartQuery(v *PieChartQueryOneOf) PieChartQuery {
	return PieChartQuery{
		PieChartQueryOneOf: v,
	}
}

// PieChartQueryOneOf1AsPieChartQuery is a convenience function that returns PieChartQueryOneOf1 wrapped in PieChartQuery
func PieChartQueryOneOf1AsPieChartQuery(v *PieChartQueryOneOf1) PieChartQuery {
	return PieChartQuery{
		PieChartQueryOneOf1: v,
	}
}

// PieChartQueryOneOf2AsPieChartQuery is a convenience function that returns PieChartQueryOneOf2 wrapped in PieChartQuery
func PieChartQueryOneOf2AsPieChartQuery(v *PieChartQueryOneOf2) PieChartQuery {
	return PieChartQuery{
		PieChartQueryOneOf2: v,
	}
}

// PieChartQueryOneOf3AsPieChartQuery is a convenience function that returns PieChartQueryOneOf3 wrapped in PieChartQuery
func PieChartQueryOneOf3AsPieChartQuery(v *PieChartQueryOneOf3) PieChartQuery {
	return PieChartQuery{
		PieChartQueryOneOf3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PieChartQuery) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PieChartQueryOneOf
	err = newStrictDecoder(data).Decode(&dst.PieChartQueryOneOf)
	if err == nil {
		jsonPieChartQueryOneOf, _ := json.Marshal(dst.PieChartQueryOneOf)
		if string(jsonPieChartQueryOneOf) == "{}" { // empty struct
			dst.PieChartQueryOneOf = nil
		} else {
			if err = validator.Validate(dst.PieChartQueryOneOf); err != nil {
				dst.PieChartQueryOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.PieChartQueryOneOf = nil
	}

	// try to unmarshal data into PieChartQueryOneOf1
	err = newStrictDecoder(data).Decode(&dst.PieChartQueryOneOf1)
	if err == nil {
		jsonPieChartQueryOneOf1, _ := json.Marshal(dst.PieChartQueryOneOf1)
		if string(jsonPieChartQueryOneOf1) == "{}" { // empty struct
			dst.PieChartQueryOneOf1 = nil
		} else {
			if err = validator.Validate(dst.PieChartQueryOneOf1); err != nil {
				dst.PieChartQueryOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.PieChartQueryOneOf1 = nil
	}

	// try to unmarshal data into PieChartQueryOneOf2
	err = newStrictDecoder(data).Decode(&dst.PieChartQueryOneOf2)
	if err == nil {
		jsonPieChartQueryOneOf2, _ := json.Marshal(dst.PieChartQueryOneOf2)
		if string(jsonPieChartQueryOneOf2) == "{}" { // empty struct
			dst.PieChartQueryOneOf2 = nil
		} else {
			if err = validator.Validate(dst.PieChartQueryOneOf2); err != nil {
				dst.PieChartQueryOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.PieChartQueryOneOf2 = nil
	}

	// try to unmarshal data into PieChartQueryOneOf3
	err = newStrictDecoder(data).Decode(&dst.PieChartQueryOneOf3)
	if err == nil {
		jsonPieChartQueryOneOf3, _ := json.Marshal(dst.PieChartQueryOneOf3)
		if string(jsonPieChartQueryOneOf3) == "{}" { // empty struct
			dst.PieChartQueryOneOf3 = nil
		} else {
			if err = validator.Validate(dst.PieChartQueryOneOf3); err != nil {
				dst.PieChartQueryOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.PieChartQueryOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PieChartQueryOneOf = nil
		dst.PieChartQueryOneOf1 = nil
		dst.PieChartQueryOneOf2 = nil
		dst.PieChartQueryOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PieChartQuery)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PieChartQuery)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PieChartQuery) MarshalJSON() ([]byte, error) {
	if src.PieChartQueryOneOf != nil {
		return json.Marshal(&src.PieChartQueryOneOf)
	}

	if src.PieChartQueryOneOf1 != nil {
		return json.Marshal(&src.PieChartQueryOneOf1)
	}

	if src.PieChartQueryOneOf2 != nil {
		return json.Marshal(&src.PieChartQueryOneOf2)
	}

	if src.PieChartQueryOneOf3 != nil {
		return json.Marshal(&src.PieChartQueryOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PieChartQuery) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PieChartQueryOneOf != nil {
		return obj.PieChartQueryOneOf
	}

	if obj.PieChartQueryOneOf1 != nil {
		return obj.PieChartQueryOneOf1
	}

	if obj.PieChartQueryOneOf2 != nil {
		return obj.PieChartQueryOneOf2
	}

	if obj.PieChartQueryOneOf3 != nil {
		return obj.PieChartQueryOneOf3
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PieChartQuery) GetActualInstanceValue() (interface{}) {
	if obj.PieChartQueryOneOf != nil {
		return *obj.PieChartQueryOneOf
	}

	if obj.PieChartQueryOneOf1 != nil {
		return *obj.PieChartQueryOneOf1
	}

	if obj.PieChartQueryOneOf2 != nil {
		return *obj.PieChartQueryOneOf2
	}

	if obj.PieChartQueryOneOf3 != nil {
		return *obj.PieChartQueryOneOf3
	}

	// all schemas are nil
	return nil
}

type NullablePieChartQuery struct {
	value *PieChartQuery
	isSet bool
}

func (v NullablePieChartQuery) Get() *PieChartQuery {
	return v.value
}

func (v *NullablePieChartQuery) Set(val *PieChartQuery) {
	v.value = val
	v.isSet = true
}

func (v NullablePieChartQuery) IsSet() bool {
	return v.isSet
}

func (v *NullablePieChartQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePieChartQuery(val *PieChartQuery) *NullablePieChartQuery {
	return &NullablePieChartQuery{value: val, isSet: true}
}

func (v NullablePieChartQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePieChartQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


