/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PieChartQuery - struct for PieChartQuery
type PieChartQuery struct {
	PieChartQueryDataprime *PieChartQueryDataprime
	PieChartQueryLogs *PieChartQueryLogs
	PieChartQueryMetrics *PieChartQueryMetrics
	PieChartQuerySpans *PieChartQuerySpans
}

// PieChartQueryDataprimeAsPieChartQuery is a convenience function that returns PieChartQueryDataprime wrapped in PieChartQuery
func PieChartQueryDataprimeAsPieChartQuery(v *PieChartQueryDataprime) PieChartQuery {
	return PieChartQuery{
		PieChartQueryDataprime: v,
	}
}

// PieChartQueryLogsAsPieChartQuery is a convenience function that returns PieChartQueryLogs wrapped in PieChartQuery
func PieChartQueryLogsAsPieChartQuery(v *PieChartQueryLogs) PieChartQuery {
	return PieChartQuery{
		PieChartQueryLogs: v,
	}
}

// PieChartQueryMetricsAsPieChartQuery is a convenience function that returns PieChartQueryMetrics wrapped in PieChartQuery
func PieChartQueryMetricsAsPieChartQuery(v *PieChartQueryMetrics) PieChartQuery {
	return PieChartQuery{
		PieChartQueryMetrics: v,
	}
}

// PieChartQuerySpansAsPieChartQuery is a convenience function that returns PieChartQuerySpans wrapped in PieChartQuery
func PieChartQuerySpansAsPieChartQuery(v *PieChartQuerySpans) PieChartQuery {
	return PieChartQuery{
		PieChartQuerySpans: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PieChartQuery) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PieChartQueryDataprime
	err = newStrictDecoder(data).Decode(&dst.PieChartQueryDataprime)
	if err == nil {
		jsonPieChartQueryDataprime, _ := json.Marshal(dst.PieChartQueryDataprime)
		if string(jsonPieChartQueryDataprime) == "{}" { // empty struct
			dst.PieChartQueryDataprime = nil
		} else {
			if err = validator.Validate(dst.PieChartQueryDataprime); err != nil {
				dst.PieChartQueryDataprime = nil
			} else {
				match++
			}
		}
	} else {
		dst.PieChartQueryDataprime = nil
	}

	// try to unmarshal data into PieChartQueryLogs
	err = newStrictDecoder(data).Decode(&dst.PieChartQueryLogs)
	if err == nil {
		jsonPieChartQueryLogs, _ := json.Marshal(dst.PieChartQueryLogs)
		if string(jsonPieChartQueryLogs) == "{}" { // empty struct
			dst.PieChartQueryLogs = nil
		} else {
			if err = validator.Validate(dst.PieChartQueryLogs); err != nil {
				dst.PieChartQueryLogs = nil
			} else {
				match++
			}
		}
	} else {
		dst.PieChartQueryLogs = nil
	}

	// try to unmarshal data into PieChartQueryMetrics
	err = newStrictDecoder(data).Decode(&dst.PieChartQueryMetrics)
	if err == nil {
		jsonPieChartQueryMetrics, _ := json.Marshal(dst.PieChartQueryMetrics)
		if string(jsonPieChartQueryMetrics) == "{}" { // empty struct
			dst.PieChartQueryMetrics = nil
		} else {
			if err = validator.Validate(dst.PieChartQueryMetrics); err != nil {
				dst.PieChartQueryMetrics = nil
			} else {
				match++
			}
		}
	} else {
		dst.PieChartQueryMetrics = nil
	}

	// try to unmarshal data into PieChartQuerySpans
	err = newStrictDecoder(data).Decode(&dst.PieChartQuerySpans)
	if err == nil {
		jsonPieChartQuerySpans, _ := json.Marshal(dst.PieChartQuerySpans)
		if string(jsonPieChartQuerySpans) == "{}" { // empty struct
			dst.PieChartQuerySpans = nil
		} else {
			if err = validator.Validate(dst.PieChartQuerySpans); err != nil {
				dst.PieChartQuerySpans = nil
			} else {
				match++
			}
		}
	} else {
		dst.PieChartQuerySpans = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PieChartQueryDataprime = nil
		dst.PieChartQueryLogs = nil
		dst.PieChartQueryMetrics = nil
		dst.PieChartQuerySpans = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PieChartQuery)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PieChartQuery)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PieChartQuery) MarshalJSON() ([]byte, error) {
	if src.PieChartQueryDataprime != nil {
		return json.Marshal(&src.PieChartQueryDataprime)
	}

	if src.PieChartQueryLogs != nil {
		return json.Marshal(&src.PieChartQueryLogs)
	}

	if src.PieChartQueryMetrics != nil {
		return json.Marshal(&src.PieChartQueryMetrics)
	}

	if src.PieChartQuerySpans != nil {
		return json.Marshal(&src.PieChartQuerySpans)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PieChartQuery) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PieChartQueryDataprime != nil {
		return obj.PieChartQueryDataprime
	}

	if obj.PieChartQueryLogs != nil {
		return obj.PieChartQueryLogs
	}

	if obj.PieChartQueryMetrics != nil {
		return obj.PieChartQueryMetrics
	}

	if obj.PieChartQuerySpans != nil {
		return obj.PieChartQuerySpans
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PieChartQuery) GetActualInstanceValue() (interface{}) {
	if obj.PieChartQueryDataprime != nil {
		return *obj.PieChartQueryDataprime
	}

	if obj.PieChartQueryLogs != nil {
		return *obj.PieChartQueryLogs
	}

	if obj.PieChartQueryMetrics != nil {
		return *obj.PieChartQueryMetrics
	}

	if obj.PieChartQuerySpans != nil {
		return *obj.PieChartQuerySpans
	}

	// all schemas are nil
	return nil
}

type NullablePieChartQuery struct {
	value *PieChartQuery
	isSet bool
}

func (v NullablePieChartQuery) Get() *PieChartQuery {
	return v.value
}

func (v *NullablePieChartQuery) Set(val *PieChartQuery) {
	v.value = val
	v.isSet = true
}

func (v NullablePieChartQuery) IsSet() bool {
	return v.isSet
}

func (v *NullablePieChartQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePieChartQuery(val *PieChartQuery) *NullablePieChartQuery {
	return &NullablePieChartQuery{value: val, isSet: true}
}

func (v NullablePieChartQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePieChartQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


