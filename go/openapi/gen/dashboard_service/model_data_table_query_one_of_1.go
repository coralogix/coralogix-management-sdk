/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the DataTableQueryOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataTableQueryOneOf1{}

// DataTableQueryOneOf1 struct for DataTableQueryOneOf1
type DataTableQueryOneOf1 struct {
	Spans *DataTableSpansQuery `json:"spans,omitempty"`
}

// NewDataTableQueryOneOf1 instantiates a new DataTableQueryOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTableQueryOneOf1() *DataTableQueryOneOf1 {
	this := DataTableQueryOneOf1{}
	return &this
}

// NewDataTableQueryOneOf1WithDefaults instantiates a new DataTableQueryOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTableQueryOneOf1WithDefaults() *DataTableQueryOneOf1 {
	this := DataTableQueryOneOf1{}
	return &this
}

// GetSpans returns the Spans field value if set, zero value otherwise.
func (o *DataTableQueryOneOf1) GetSpans() DataTableSpansQuery {
	if o == nil || IsNil(o.Spans) {
		var ret DataTableSpansQuery
		return ret
	}
	return *o.Spans
}

// GetSpansOk returns a tuple with the Spans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTableQueryOneOf1) GetSpansOk() (*DataTableSpansQuery, bool) {
	if o == nil || IsNil(o.Spans) {
		return nil, false
	}
	return o.Spans, true
}

// HasSpans returns a boolean if a field has been set.
func (o *DataTableQueryOneOf1) HasSpans() bool {
	if o != nil && !IsNil(o.Spans) {
		return true
	}

	return false
}

// SetSpans gets a reference to the given DataTableSpansQuery and assigns it to the Spans field.
func (o *DataTableQueryOneOf1) SetSpans(v DataTableSpansQuery) {
	o.Spans = &v
}

func (o DataTableQueryOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataTableQueryOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Spans) {
		toSerialize["spans"] = o.Spans
	}
	return toSerialize, nil
}

type NullableDataTableQueryOneOf1 struct {
	value *DataTableQueryOneOf1
	isSet bool
}

func (v NullableDataTableQueryOneOf1) Get() *DataTableQueryOneOf1 {
	return v.value
}

func (v *NullableDataTableQueryOneOf1) Set(val *DataTableQueryOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTableQueryOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTableQueryOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTableQueryOneOf1(val *DataTableQueryOneOf1) *NullableDataTableQueryOneOf1 {
	return &NullableDataTableQueryOneOf1{value: val, isSet: true}
}

func (v NullableDataTableQueryOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTableQueryOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


