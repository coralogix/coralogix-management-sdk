/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// VariableDisplayType the model 'VariableDisplayType'
type VariableDisplayType string

// List of VariableDisplayType
const (
	VARIABLEDISPLAYTYPE_VARIABLE_DISPLAY_TYPE_UNSPECIFIED VariableDisplayType = "VARIABLE_DISPLAY_TYPE_UNSPECIFIED"
	VARIABLEDISPLAYTYPE_VARIABLE_DISPLAY_TYPE_LABEL_VALUE VariableDisplayType = "VARIABLE_DISPLAY_TYPE_LABEL_VALUE"
	VARIABLEDISPLAYTYPE_VARIABLE_DISPLAY_TYPE_VALUE VariableDisplayType = "VARIABLE_DISPLAY_TYPE_VALUE"
	VARIABLEDISPLAYTYPE_VARIABLE_DISPLAY_TYPE_NOTHING VariableDisplayType = "VARIABLE_DISPLAY_TYPE_NOTHING"
)

// All allowed values of VariableDisplayType enum
var AllowedVariableDisplayTypeEnumValues = []VariableDisplayType{
	"VARIABLE_DISPLAY_TYPE_UNSPECIFIED",
	"VARIABLE_DISPLAY_TYPE_LABEL_VALUE",
	"VARIABLE_DISPLAY_TYPE_VALUE",
	"VARIABLE_DISPLAY_TYPE_NOTHING",
}

func (v *VariableDisplayType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VariableDisplayType(value)
	for _, existing := range AllowedVariableDisplayTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VariableDisplayType", value)
}

// NewVariableDisplayTypeFromValue returns a pointer to a valid VariableDisplayType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVariableDisplayTypeFromValue(v string) (*VariableDisplayType, error) {
	ev := VariableDisplayType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VariableDisplayType: valid values are %v", v, AllowedVariableDisplayTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VariableDisplayType) IsValid() bool {
	for _, existing := range AllowedVariableDisplayTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VariableDisplayType value
func (v VariableDisplayType) Ptr() *VariableDisplayType {
	return &v
}

type NullableVariableDisplayType struct {
	value *VariableDisplayType
	isSet bool
}

func (v NullableVariableDisplayType) Get() *VariableDisplayType {
	return v.value
}

func (v *NullableVariableDisplayType) Set(val *VariableDisplayType) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableDisplayType) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableDisplayType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableDisplayType(val *VariableDisplayType) *NullableVariableDisplayType {
	return &NullableVariableDisplayType{value: val, isSet: true}
}

func (v NullableVariableDisplayType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableDisplayType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

