/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DataprimeSourceStrategy - struct for DataprimeSourceStrategy
type DataprimeSourceStrategy struct {
	DataprimeSourceStrategyOneOf *DataprimeSourceStrategyOneOf
	DataprimeSourceStrategyOneOf1 *DataprimeSourceStrategyOneOf1
	DataprimeSourceStrategyOneOf2 *DataprimeSourceStrategyOneOf2
}

// DataprimeSourceStrategyOneOfAsDataprimeSourceStrategy is a convenience function that returns DataprimeSourceStrategyOneOf wrapped in DataprimeSourceStrategy
func DataprimeSourceStrategyOneOfAsDataprimeSourceStrategy(v *DataprimeSourceStrategyOneOf) DataprimeSourceStrategy {
	return DataprimeSourceStrategy{
		DataprimeSourceStrategyOneOf: v,
	}
}

// DataprimeSourceStrategyOneOf1AsDataprimeSourceStrategy is a convenience function that returns DataprimeSourceStrategyOneOf1 wrapped in DataprimeSourceStrategy
func DataprimeSourceStrategyOneOf1AsDataprimeSourceStrategy(v *DataprimeSourceStrategyOneOf1) DataprimeSourceStrategy {
	return DataprimeSourceStrategy{
		DataprimeSourceStrategyOneOf1: v,
	}
}

// DataprimeSourceStrategyOneOf2AsDataprimeSourceStrategy is a convenience function that returns DataprimeSourceStrategyOneOf2 wrapped in DataprimeSourceStrategy
func DataprimeSourceStrategyOneOf2AsDataprimeSourceStrategy(v *DataprimeSourceStrategyOneOf2) DataprimeSourceStrategy {
	return DataprimeSourceStrategy{
		DataprimeSourceStrategyOneOf2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DataprimeSourceStrategy) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DataprimeSourceStrategyOneOf
	err = newStrictDecoder(data).Decode(&dst.DataprimeSourceStrategyOneOf)
	if err == nil {
		jsonDataprimeSourceStrategyOneOf, _ := json.Marshal(dst.DataprimeSourceStrategyOneOf)
		if string(jsonDataprimeSourceStrategyOneOf) == "{}" { // empty struct
			dst.DataprimeSourceStrategyOneOf = nil
		} else {
			if err = validator.Validate(dst.DataprimeSourceStrategyOneOf); err != nil {
				dst.DataprimeSourceStrategyOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.DataprimeSourceStrategyOneOf = nil
	}

	// try to unmarshal data into DataprimeSourceStrategyOneOf1
	err = newStrictDecoder(data).Decode(&dst.DataprimeSourceStrategyOneOf1)
	if err == nil {
		jsonDataprimeSourceStrategyOneOf1, _ := json.Marshal(dst.DataprimeSourceStrategyOneOf1)
		if string(jsonDataprimeSourceStrategyOneOf1) == "{}" { // empty struct
			dst.DataprimeSourceStrategyOneOf1 = nil
		} else {
			if err = validator.Validate(dst.DataprimeSourceStrategyOneOf1); err != nil {
				dst.DataprimeSourceStrategyOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.DataprimeSourceStrategyOneOf1 = nil
	}

	// try to unmarshal data into DataprimeSourceStrategyOneOf2
	err = newStrictDecoder(data).Decode(&dst.DataprimeSourceStrategyOneOf2)
	if err == nil {
		jsonDataprimeSourceStrategyOneOf2, _ := json.Marshal(dst.DataprimeSourceStrategyOneOf2)
		if string(jsonDataprimeSourceStrategyOneOf2) == "{}" { // empty struct
			dst.DataprimeSourceStrategyOneOf2 = nil
		} else {
			if err = validator.Validate(dst.DataprimeSourceStrategyOneOf2); err != nil {
				dst.DataprimeSourceStrategyOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.DataprimeSourceStrategyOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DataprimeSourceStrategyOneOf = nil
		dst.DataprimeSourceStrategyOneOf1 = nil
		dst.DataprimeSourceStrategyOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DataprimeSourceStrategy)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DataprimeSourceStrategy)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DataprimeSourceStrategy) MarshalJSON() ([]byte, error) {
	if src.DataprimeSourceStrategyOneOf != nil {
		return json.Marshal(&src.DataprimeSourceStrategyOneOf)
	}

	if src.DataprimeSourceStrategyOneOf1 != nil {
		return json.Marshal(&src.DataprimeSourceStrategyOneOf1)
	}

	if src.DataprimeSourceStrategyOneOf2 != nil {
		return json.Marshal(&src.DataprimeSourceStrategyOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DataprimeSourceStrategy) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DataprimeSourceStrategyOneOf != nil {
		return obj.DataprimeSourceStrategyOneOf
	}

	if obj.DataprimeSourceStrategyOneOf1 != nil {
		return obj.DataprimeSourceStrategyOneOf1
	}

	if obj.DataprimeSourceStrategyOneOf2 != nil {
		return obj.DataprimeSourceStrategyOneOf2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DataprimeSourceStrategy) GetActualInstanceValue() (interface{}) {
	if obj.DataprimeSourceStrategyOneOf != nil {
		return *obj.DataprimeSourceStrategyOneOf
	}

	if obj.DataprimeSourceStrategyOneOf1 != nil {
		return *obj.DataprimeSourceStrategyOneOf1
	}

	if obj.DataprimeSourceStrategyOneOf2 != nil {
		return *obj.DataprimeSourceStrategyOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableDataprimeSourceStrategy struct {
	value *DataprimeSourceStrategy
	isSet bool
}

func (v NullableDataprimeSourceStrategy) Get() *DataprimeSourceStrategy {
	return v.value
}

func (v *NullableDataprimeSourceStrategy) Set(val *DataprimeSourceStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableDataprimeSourceStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableDataprimeSourceStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataprimeSourceStrategy(val *DataprimeSourceStrategy) *NullableDataprimeSourceStrategy {
	return &NullableDataprimeSourceStrategy{value: val, isSet: true}
}

func (v NullableDataprimeSourceStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataprimeSourceStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


