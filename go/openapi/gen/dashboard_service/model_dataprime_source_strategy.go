/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DataprimeSourceStrategy - struct for DataprimeSourceStrategy
type DataprimeSourceStrategy struct {
	DataprimeSourceStrategyDuration *DataprimeSourceStrategyDuration
	DataprimeSourceStrategyInstant *DataprimeSourceStrategyInstant
	DataprimeSourceStrategyRange *DataprimeSourceStrategyRange
}

// DataprimeSourceStrategyDurationAsDataprimeSourceStrategy is a convenience function that returns DataprimeSourceStrategyDuration wrapped in DataprimeSourceStrategy
func DataprimeSourceStrategyDurationAsDataprimeSourceStrategy(v *DataprimeSourceStrategyDuration) DataprimeSourceStrategy {
	return DataprimeSourceStrategy{
		DataprimeSourceStrategyDuration: v,
	}
}

// DataprimeSourceStrategyInstantAsDataprimeSourceStrategy is a convenience function that returns DataprimeSourceStrategyInstant wrapped in DataprimeSourceStrategy
func DataprimeSourceStrategyInstantAsDataprimeSourceStrategy(v *DataprimeSourceStrategyInstant) DataprimeSourceStrategy {
	return DataprimeSourceStrategy{
		DataprimeSourceStrategyInstant: v,
	}
}

// DataprimeSourceStrategyRangeAsDataprimeSourceStrategy is a convenience function that returns DataprimeSourceStrategyRange wrapped in DataprimeSourceStrategy
func DataprimeSourceStrategyRangeAsDataprimeSourceStrategy(v *DataprimeSourceStrategyRange) DataprimeSourceStrategy {
	return DataprimeSourceStrategy{
		DataprimeSourceStrategyRange: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DataprimeSourceStrategy) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DataprimeSourceStrategyDuration
	err = newStrictDecoder(data).Decode(&dst.DataprimeSourceStrategyDuration)
	if err == nil {
		jsonDataprimeSourceStrategyDuration, _ := json.Marshal(dst.DataprimeSourceStrategyDuration)
		if string(jsonDataprimeSourceStrategyDuration) == "{}" { // empty struct
			dst.DataprimeSourceStrategyDuration = nil
		} else {
			if err = validator.Validate(dst.DataprimeSourceStrategyDuration); err != nil {
				dst.DataprimeSourceStrategyDuration = nil
			} else {
				match++
			}
		}
	} else {
		dst.DataprimeSourceStrategyDuration = nil
	}

	// try to unmarshal data into DataprimeSourceStrategyInstant
	err = newStrictDecoder(data).Decode(&dst.DataprimeSourceStrategyInstant)
	if err == nil {
		jsonDataprimeSourceStrategyInstant, _ := json.Marshal(dst.DataprimeSourceStrategyInstant)
		if string(jsonDataprimeSourceStrategyInstant) == "{}" { // empty struct
			dst.DataprimeSourceStrategyInstant = nil
		} else {
			if err = validator.Validate(dst.DataprimeSourceStrategyInstant); err != nil {
				dst.DataprimeSourceStrategyInstant = nil
			} else {
				match++
			}
		}
	} else {
		dst.DataprimeSourceStrategyInstant = nil
	}

	// try to unmarshal data into DataprimeSourceStrategyRange
	err = newStrictDecoder(data).Decode(&dst.DataprimeSourceStrategyRange)
	if err == nil {
		jsonDataprimeSourceStrategyRange, _ := json.Marshal(dst.DataprimeSourceStrategyRange)
		if string(jsonDataprimeSourceStrategyRange) == "{}" { // empty struct
			dst.DataprimeSourceStrategyRange = nil
		} else {
			if err = validator.Validate(dst.DataprimeSourceStrategyRange); err != nil {
				dst.DataprimeSourceStrategyRange = nil
			} else {
				match++
			}
		}
	} else {
		dst.DataprimeSourceStrategyRange = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DataprimeSourceStrategyDuration = nil
		dst.DataprimeSourceStrategyInstant = nil
		dst.DataprimeSourceStrategyRange = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DataprimeSourceStrategy)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DataprimeSourceStrategy)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DataprimeSourceStrategy) MarshalJSON() ([]byte, error) {
	if src.DataprimeSourceStrategyDuration != nil {
		return json.Marshal(&src.DataprimeSourceStrategyDuration)
	}

	if src.DataprimeSourceStrategyInstant != nil {
		return json.Marshal(&src.DataprimeSourceStrategyInstant)
	}

	if src.DataprimeSourceStrategyRange != nil {
		return json.Marshal(&src.DataprimeSourceStrategyRange)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DataprimeSourceStrategy) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DataprimeSourceStrategyDuration != nil {
		return obj.DataprimeSourceStrategyDuration
	}

	if obj.DataprimeSourceStrategyInstant != nil {
		return obj.DataprimeSourceStrategyInstant
	}

	if obj.DataprimeSourceStrategyRange != nil {
		return obj.DataprimeSourceStrategyRange
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DataprimeSourceStrategy) GetActualInstanceValue() (interface{}) {
	if obj.DataprimeSourceStrategyDuration != nil {
		return *obj.DataprimeSourceStrategyDuration
	}

	if obj.DataprimeSourceStrategyInstant != nil {
		return *obj.DataprimeSourceStrategyInstant
	}

	if obj.DataprimeSourceStrategyRange != nil {
		return *obj.DataprimeSourceStrategyRange
	}

	// all schemas are nil
	return nil
}

type NullableDataprimeSourceStrategy struct {
	value *DataprimeSourceStrategy
	isSet bool
}

func (v NullableDataprimeSourceStrategy) Get() *DataprimeSourceStrategy {
	return v.value
}

func (v *NullableDataprimeSourceStrategy) Set(val *DataprimeSourceStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableDataprimeSourceStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableDataprimeSourceStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataprimeSourceStrategy(val *DataprimeSourceStrategy) *NullableDataprimeSourceStrategy {
	return &NullableDataprimeSourceStrategy{value: val, isSet: true}
}

func (v NullableDataprimeSourceStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataprimeSourceStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


