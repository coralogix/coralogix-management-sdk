/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LineChart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LineChart{}

// LineChart LineChart represents the configuration of a line chart widget.
type LineChart struct {
	// Whether the line should remain connected instead of producing scattered points when null values are present in between
	ConnectNulls *bool `json:"connectNulls,omitempty"`
	Legend *Legend `json:"legend,omitempty"`
	QueryDefinitions []QueryDefinition `json:"queryDefinitions"`
	StackedLine *LineChartStackedLine `json:"stackedLine,omitempty"`
	Tooltip *Tooltip `json:"tooltip,omitempty"`
}

type _LineChart LineChart

// NewLineChart instantiates a new LineChart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLineChart(queryDefinitions []QueryDefinition) *LineChart {
	this := LineChart{}
	this.QueryDefinitions = queryDefinitions
	return &this
}

// NewLineChartWithDefaults instantiates a new LineChart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLineChartWithDefaults() *LineChart {
	this := LineChart{}
	return &this
}

// GetConnectNulls returns the ConnectNulls field value if set, zero value otherwise.
func (o *LineChart) GetConnectNulls() bool {
	if o == nil || IsNil(o.ConnectNulls) {
		var ret bool
		return ret
	}
	return *o.ConnectNulls
}

// GetConnectNullsOk returns a tuple with the ConnectNulls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineChart) GetConnectNullsOk() (*bool, bool) {
	if o == nil || IsNil(o.ConnectNulls) {
		return nil, false
	}
	return o.ConnectNulls, true
}

// HasConnectNulls returns a boolean if a field has been set.
func (o *LineChart) HasConnectNulls() bool {
	if o != nil && !IsNil(o.ConnectNulls) {
		return true
	}

	return false
}

// SetConnectNulls gets a reference to the given bool and assigns it to the ConnectNulls field.
func (o *LineChart) SetConnectNulls(v bool) {
	o.ConnectNulls = &v
}

// GetLegend returns the Legend field value if set, zero value otherwise.
func (o *LineChart) GetLegend() Legend {
	if o == nil || IsNil(o.Legend) {
		var ret Legend
		return ret
	}
	return *o.Legend
}

// GetLegendOk returns a tuple with the Legend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineChart) GetLegendOk() (*Legend, bool) {
	if o == nil || IsNil(o.Legend) {
		return nil, false
	}
	return o.Legend, true
}

// HasLegend returns a boolean if a field has been set.
func (o *LineChart) HasLegend() bool {
	if o != nil && !IsNil(o.Legend) {
		return true
	}

	return false
}

// SetLegend gets a reference to the given Legend and assigns it to the Legend field.
func (o *LineChart) SetLegend(v Legend) {
	o.Legend = &v
}

// GetQueryDefinitions returns the QueryDefinitions field value
func (o *LineChart) GetQueryDefinitions() []QueryDefinition {
	if o == nil {
		var ret []QueryDefinition
		return ret
	}

	return o.QueryDefinitions
}

// GetQueryDefinitionsOk returns a tuple with the QueryDefinitions field value
// and a boolean to check if the value has been set.
func (o *LineChart) GetQueryDefinitionsOk() ([]QueryDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return o.QueryDefinitions, true
}

// SetQueryDefinitions sets field value
func (o *LineChart) SetQueryDefinitions(v []QueryDefinition) {
	o.QueryDefinitions = v
}

// GetStackedLine returns the StackedLine field value if set, zero value otherwise.
func (o *LineChart) GetStackedLine() LineChartStackedLine {
	if o == nil || IsNil(o.StackedLine) {
		var ret LineChartStackedLine
		return ret
	}
	return *o.StackedLine
}

// GetStackedLineOk returns a tuple with the StackedLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineChart) GetStackedLineOk() (*LineChartStackedLine, bool) {
	if o == nil || IsNil(o.StackedLine) {
		return nil, false
	}
	return o.StackedLine, true
}

// HasStackedLine returns a boolean if a field has been set.
func (o *LineChart) HasStackedLine() bool {
	if o != nil && !IsNil(o.StackedLine) {
		return true
	}

	return false
}

// SetStackedLine gets a reference to the given LineChartStackedLine and assigns it to the StackedLine field.
func (o *LineChart) SetStackedLine(v LineChartStackedLine) {
	o.StackedLine = &v
}

// GetTooltip returns the Tooltip field value if set, zero value otherwise.
func (o *LineChart) GetTooltip() Tooltip {
	if o == nil || IsNil(o.Tooltip) {
		var ret Tooltip
		return ret
	}
	return *o.Tooltip
}

// GetTooltipOk returns a tuple with the Tooltip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineChart) GetTooltipOk() (*Tooltip, bool) {
	if o == nil || IsNil(o.Tooltip) {
		return nil, false
	}
	return o.Tooltip, true
}

// HasTooltip returns a boolean if a field has been set.
func (o *LineChart) HasTooltip() bool {
	if o != nil && !IsNil(o.Tooltip) {
		return true
	}

	return false
}

// SetTooltip gets a reference to the given Tooltip and assigns it to the Tooltip field.
func (o *LineChart) SetTooltip(v Tooltip) {
	o.Tooltip = &v
}

func (o LineChart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LineChart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConnectNulls) {
		toSerialize["connectNulls"] = o.ConnectNulls
	}
	if !IsNil(o.Legend) {
		toSerialize["legend"] = o.Legend
	}
	toSerialize["queryDefinitions"] = o.QueryDefinitions
	if !IsNil(o.StackedLine) {
		toSerialize["stackedLine"] = o.StackedLine
	}
	if !IsNil(o.Tooltip) {
		toSerialize["tooltip"] = o.Tooltip
	}
	return toSerialize, nil
}

func (o *LineChart) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"queryDefinitions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLineChart := _LineChart{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLineChart)

	if err != nil {
		return err
	}

	*o = LineChart(varLineChart)

	return err
}

type NullableLineChart struct {
	value *LineChart
	isSet bool
}

func (v NullableLineChart) Get() *LineChart {
	return v.value
}

func (v *NullableLineChart) Set(val *LineChart) {
	v.value = val
	v.isSet = true
}

func (v NullableLineChart) IsSet() bool {
	return v.isSet
}

func (v *NullableLineChart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLineChart(val *LineChart) *NullableLineChart {
	return &NullableLineChart{value: val, isSet: true}
}

func (v NullableLineChart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLineChart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


