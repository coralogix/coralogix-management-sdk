/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ManualSourceStrategy - struct for ManualSourceStrategy
type ManualSourceStrategy struct {
	ManualSourceStrategyInstant *ManualSourceStrategyInstant
	ManualSourceStrategyRange *ManualSourceStrategyRange
}

// ManualSourceStrategyInstantAsManualSourceStrategy is a convenience function that returns ManualSourceStrategyInstant wrapped in ManualSourceStrategy
func ManualSourceStrategyInstantAsManualSourceStrategy(v *ManualSourceStrategyInstant) ManualSourceStrategy {
	return ManualSourceStrategy{
		ManualSourceStrategyInstant: v,
	}
}

// ManualSourceStrategyRangeAsManualSourceStrategy is a convenience function that returns ManualSourceStrategyRange wrapped in ManualSourceStrategy
func ManualSourceStrategyRangeAsManualSourceStrategy(v *ManualSourceStrategyRange) ManualSourceStrategy {
	return ManualSourceStrategy{
		ManualSourceStrategyRange: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ManualSourceStrategy) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ManualSourceStrategyInstant
	err = newStrictDecoder(data).Decode(&dst.ManualSourceStrategyInstant)
	if err == nil {
		jsonManualSourceStrategyInstant, _ := json.Marshal(dst.ManualSourceStrategyInstant)
		if string(jsonManualSourceStrategyInstant) == "{}" { // empty struct
			dst.ManualSourceStrategyInstant = nil
		} else {
			if err = validator.Validate(dst.ManualSourceStrategyInstant); err != nil {
				dst.ManualSourceStrategyInstant = nil
			} else {
				match++
			}
		}
	} else {
		dst.ManualSourceStrategyInstant = nil
	}

	// try to unmarshal data into ManualSourceStrategyRange
	err = newStrictDecoder(data).Decode(&dst.ManualSourceStrategyRange)
	if err == nil {
		jsonManualSourceStrategyRange, _ := json.Marshal(dst.ManualSourceStrategyRange)
		if string(jsonManualSourceStrategyRange) == "{}" { // empty struct
			dst.ManualSourceStrategyRange = nil
		} else {
			if err = validator.Validate(dst.ManualSourceStrategyRange); err != nil {
				dst.ManualSourceStrategyRange = nil
			} else {
				match++
			}
		}
	} else {
		dst.ManualSourceStrategyRange = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ManualSourceStrategyInstant = nil
		dst.ManualSourceStrategyRange = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ManualSourceStrategy)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ManualSourceStrategy)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ManualSourceStrategy) MarshalJSON() ([]byte, error) {
	if src.ManualSourceStrategyInstant != nil {
		return json.Marshal(&src.ManualSourceStrategyInstant)
	}

	if src.ManualSourceStrategyRange != nil {
		return json.Marshal(&src.ManualSourceStrategyRange)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ManualSourceStrategy) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ManualSourceStrategyInstant != nil {
		return obj.ManualSourceStrategyInstant
	}

	if obj.ManualSourceStrategyRange != nil {
		return obj.ManualSourceStrategyRange
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ManualSourceStrategy) GetActualInstanceValue() (interface{}) {
	if obj.ManualSourceStrategyInstant != nil {
		return *obj.ManualSourceStrategyInstant
	}

	if obj.ManualSourceStrategyRange != nil {
		return *obj.ManualSourceStrategyRange
	}

	// all schemas are nil
	return nil
}

type NullableManualSourceStrategy struct {
	value *ManualSourceStrategy
	isSet bool
}

func (v NullableManualSourceStrategy) Get() *ManualSourceStrategy {
	return v.value
}

func (v *NullableManualSourceStrategy) Set(val *ManualSourceStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableManualSourceStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableManualSourceStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManualSourceStrategy(val *ManualSourceStrategy) *NullableManualSourceStrategy {
	return &NullableManualSourceStrategy{value: val, isSet: true}
}

func (v NullableManualSourceStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManualSourceStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


