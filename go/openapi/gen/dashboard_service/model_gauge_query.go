/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// GaugeQuery - struct for GaugeQuery
type GaugeQuery struct {
	GaugeQueryDataprime *GaugeQueryDataprime
	GaugeQueryLogs *GaugeQueryLogs
	GaugeQueryMetrics *GaugeQueryMetrics
	GaugeQuerySpans *GaugeQuerySpans
}

// GaugeQueryDataprimeAsGaugeQuery is a convenience function that returns GaugeQueryDataprime wrapped in GaugeQuery
func GaugeQueryDataprimeAsGaugeQuery(v *GaugeQueryDataprime) GaugeQuery {
	return GaugeQuery{
		GaugeQueryDataprime: v,
	}
}

// GaugeQueryLogsAsGaugeQuery is a convenience function that returns GaugeQueryLogs wrapped in GaugeQuery
func GaugeQueryLogsAsGaugeQuery(v *GaugeQueryLogs) GaugeQuery {
	return GaugeQuery{
		GaugeQueryLogs: v,
	}
}

// GaugeQueryMetricsAsGaugeQuery is a convenience function that returns GaugeQueryMetrics wrapped in GaugeQuery
func GaugeQueryMetricsAsGaugeQuery(v *GaugeQueryMetrics) GaugeQuery {
	return GaugeQuery{
		GaugeQueryMetrics: v,
	}
}

// GaugeQuerySpansAsGaugeQuery is a convenience function that returns GaugeQuerySpans wrapped in GaugeQuery
func GaugeQuerySpansAsGaugeQuery(v *GaugeQuerySpans) GaugeQuery {
	return GaugeQuery{
		GaugeQuerySpans: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GaugeQuery) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GaugeQueryDataprime
	err = newStrictDecoder(data).Decode(&dst.GaugeQueryDataprime)
	if err == nil {
		jsonGaugeQueryDataprime, _ := json.Marshal(dst.GaugeQueryDataprime)
		if string(jsonGaugeQueryDataprime) == "{}" { // empty struct
			dst.GaugeQueryDataprime = nil
		} else {
			if err = validator.Validate(dst.GaugeQueryDataprime); err != nil {
				dst.GaugeQueryDataprime = nil
			} else {
				match++
			}
		}
	} else {
		dst.GaugeQueryDataprime = nil
	}

	// try to unmarshal data into GaugeQueryLogs
	err = newStrictDecoder(data).Decode(&dst.GaugeQueryLogs)
	if err == nil {
		jsonGaugeQueryLogs, _ := json.Marshal(dst.GaugeQueryLogs)
		if string(jsonGaugeQueryLogs) == "{}" { // empty struct
			dst.GaugeQueryLogs = nil
		} else {
			if err = validator.Validate(dst.GaugeQueryLogs); err != nil {
				dst.GaugeQueryLogs = nil
			} else {
				match++
			}
		}
	} else {
		dst.GaugeQueryLogs = nil
	}

	// try to unmarshal data into GaugeQueryMetrics
	err = newStrictDecoder(data).Decode(&dst.GaugeQueryMetrics)
	if err == nil {
		jsonGaugeQueryMetrics, _ := json.Marshal(dst.GaugeQueryMetrics)
		if string(jsonGaugeQueryMetrics) == "{}" { // empty struct
			dst.GaugeQueryMetrics = nil
		} else {
			if err = validator.Validate(dst.GaugeQueryMetrics); err != nil {
				dst.GaugeQueryMetrics = nil
			} else {
				match++
			}
		}
	} else {
		dst.GaugeQueryMetrics = nil
	}

	// try to unmarshal data into GaugeQuerySpans
	err = newStrictDecoder(data).Decode(&dst.GaugeQuerySpans)
	if err == nil {
		jsonGaugeQuerySpans, _ := json.Marshal(dst.GaugeQuerySpans)
		if string(jsonGaugeQuerySpans) == "{}" { // empty struct
			dst.GaugeQuerySpans = nil
		} else {
			if err = validator.Validate(dst.GaugeQuerySpans); err != nil {
				dst.GaugeQuerySpans = nil
			} else {
				match++
			}
		}
	} else {
		dst.GaugeQuerySpans = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GaugeQueryDataprime = nil
		dst.GaugeQueryLogs = nil
		dst.GaugeQueryMetrics = nil
		dst.GaugeQuerySpans = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GaugeQuery)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GaugeQuery)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GaugeQuery) MarshalJSON() ([]byte, error) {
	if src.GaugeQueryDataprime != nil {
		return json.Marshal(&src.GaugeQueryDataprime)
	}

	if src.GaugeQueryLogs != nil {
		return json.Marshal(&src.GaugeQueryLogs)
	}

	if src.GaugeQueryMetrics != nil {
		return json.Marshal(&src.GaugeQueryMetrics)
	}

	if src.GaugeQuerySpans != nil {
		return json.Marshal(&src.GaugeQuerySpans)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GaugeQuery) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GaugeQueryDataprime != nil {
		return obj.GaugeQueryDataprime
	}

	if obj.GaugeQueryLogs != nil {
		return obj.GaugeQueryLogs
	}

	if obj.GaugeQueryMetrics != nil {
		return obj.GaugeQueryMetrics
	}

	if obj.GaugeQuerySpans != nil {
		return obj.GaugeQuerySpans
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GaugeQuery) GetActualInstanceValue() (interface{}) {
	if obj.GaugeQueryDataprime != nil {
		return *obj.GaugeQueryDataprime
	}

	if obj.GaugeQueryLogs != nil {
		return *obj.GaugeQueryLogs
	}

	if obj.GaugeQueryMetrics != nil {
		return *obj.GaugeQueryMetrics
	}

	if obj.GaugeQuerySpans != nil {
		return *obj.GaugeQuerySpans
	}

	// all schemas are nil
	return nil
}

type NullableGaugeQuery struct {
	value *GaugeQuery
	isSet bool
}

func (v NullableGaugeQuery) Get() *GaugeQuery {
	return v.value
}

func (v *NullableGaugeQuery) Set(val *GaugeQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableGaugeQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableGaugeQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGaugeQuery(val *GaugeQuery) *NullableGaugeQuery {
	return &NullableGaugeQuery{value: val, isSet: true}
}

func (v NullableGaugeQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGaugeQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


