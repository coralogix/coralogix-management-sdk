/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// GaugeQuery - struct for GaugeQuery
type GaugeQuery struct {
	GaugeQueryOneOf *GaugeQueryOneOf
	GaugeQueryOneOf1 *GaugeQueryOneOf1
	GaugeQueryOneOf2 *GaugeQueryOneOf2
	GaugeQueryOneOf3 *GaugeQueryOneOf3
}

// GaugeQueryOneOfAsGaugeQuery is a convenience function that returns GaugeQueryOneOf wrapped in GaugeQuery
func GaugeQueryOneOfAsGaugeQuery(v *GaugeQueryOneOf) GaugeQuery {
	return GaugeQuery{
		GaugeQueryOneOf: v,
	}
}

// GaugeQueryOneOf1AsGaugeQuery is a convenience function that returns GaugeQueryOneOf1 wrapped in GaugeQuery
func GaugeQueryOneOf1AsGaugeQuery(v *GaugeQueryOneOf1) GaugeQuery {
	return GaugeQuery{
		GaugeQueryOneOf1: v,
	}
}

// GaugeQueryOneOf2AsGaugeQuery is a convenience function that returns GaugeQueryOneOf2 wrapped in GaugeQuery
func GaugeQueryOneOf2AsGaugeQuery(v *GaugeQueryOneOf2) GaugeQuery {
	return GaugeQuery{
		GaugeQueryOneOf2: v,
	}
}

// GaugeQueryOneOf3AsGaugeQuery is a convenience function that returns GaugeQueryOneOf3 wrapped in GaugeQuery
func GaugeQueryOneOf3AsGaugeQuery(v *GaugeQueryOneOf3) GaugeQuery {
	return GaugeQuery{
		GaugeQueryOneOf3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GaugeQuery) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GaugeQueryOneOf
	err = newStrictDecoder(data).Decode(&dst.GaugeQueryOneOf)
	if err == nil {
		jsonGaugeQueryOneOf, _ := json.Marshal(dst.GaugeQueryOneOf)
		if string(jsonGaugeQueryOneOf) == "{}" { // empty struct
			dst.GaugeQueryOneOf = nil
		} else {
			if err = validator.Validate(dst.GaugeQueryOneOf); err != nil {
				dst.GaugeQueryOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.GaugeQueryOneOf = nil
	}

	// try to unmarshal data into GaugeQueryOneOf1
	err = newStrictDecoder(data).Decode(&dst.GaugeQueryOneOf1)
	if err == nil {
		jsonGaugeQueryOneOf1, _ := json.Marshal(dst.GaugeQueryOneOf1)
		if string(jsonGaugeQueryOneOf1) == "{}" { // empty struct
			dst.GaugeQueryOneOf1 = nil
		} else {
			if err = validator.Validate(dst.GaugeQueryOneOf1); err != nil {
				dst.GaugeQueryOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.GaugeQueryOneOf1 = nil
	}

	// try to unmarshal data into GaugeQueryOneOf2
	err = newStrictDecoder(data).Decode(&dst.GaugeQueryOneOf2)
	if err == nil {
		jsonGaugeQueryOneOf2, _ := json.Marshal(dst.GaugeQueryOneOf2)
		if string(jsonGaugeQueryOneOf2) == "{}" { // empty struct
			dst.GaugeQueryOneOf2 = nil
		} else {
			if err = validator.Validate(dst.GaugeQueryOneOf2); err != nil {
				dst.GaugeQueryOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.GaugeQueryOneOf2 = nil
	}

	// try to unmarshal data into GaugeQueryOneOf3
	err = newStrictDecoder(data).Decode(&dst.GaugeQueryOneOf3)
	if err == nil {
		jsonGaugeQueryOneOf3, _ := json.Marshal(dst.GaugeQueryOneOf3)
		if string(jsonGaugeQueryOneOf3) == "{}" { // empty struct
			dst.GaugeQueryOneOf3 = nil
		} else {
			if err = validator.Validate(dst.GaugeQueryOneOf3); err != nil {
				dst.GaugeQueryOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.GaugeQueryOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GaugeQueryOneOf = nil
		dst.GaugeQueryOneOf1 = nil
		dst.GaugeQueryOneOf2 = nil
		dst.GaugeQueryOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GaugeQuery)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GaugeQuery)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GaugeQuery) MarshalJSON() ([]byte, error) {
	if src.GaugeQueryOneOf != nil {
		return json.Marshal(&src.GaugeQueryOneOf)
	}

	if src.GaugeQueryOneOf1 != nil {
		return json.Marshal(&src.GaugeQueryOneOf1)
	}

	if src.GaugeQueryOneOf2 != nil {
		return json.Marshal(&src.GaugeQueryOneOf2)
	}

	if src.GaugeQueryOneOf3 != nil {
		return json.Marshal(&src.GaugeQueryOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GaugeQuery) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GaugeQueryOneOf != nil {
		return obj.GaugeQueryOneOf
	}

	if obj.GaugeQueryOneOf1 != nil {
		return obj.GaugeQueryOneOf1
	}

	if obj.GaugeQueryOneOf2 != nil {
		return obj.GaugeQueryOneOf2
	}

	if obj.GaugeQueryOneOf3 != nil {
		return obj.GaugeQueryOneOf3
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GaugeQuery) GetActualInstanceValue() (interface{}) {
	if obj.GaugeQueryOneOf != nil {
		return *obj.GaugeQueryOneOf
	}

	if obj.GaugeQueryOneOf1 != nil {
		return *obj.GaugeQueryOneOf1
	}

	if obj.GaugeQueryOneOf2 != nil {
		return *obj.GaugeQueryOneOf2
	}

	if obj.GaugeQueryOneOf3 != nil {
		return *obj.GaugeQueryOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableGaugeQuery struct {
	value *GaugeQuery
	isSet bool
}

func (v NullableGaugeQuery) Get() *GaugeQuery {
	return v.value
}

func (v *NullableGaugeQuery) Set(val *GaugeQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableGaugeQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableGaugeQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGaugeQuery(val *GaugeQuery) *NullableGaugeQuery {
	return &NullableGaugeQuery{value: val, isSet: true}
}

func (v NullableGaugeQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGaugeQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


