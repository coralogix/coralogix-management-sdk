/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// SelectionType the model 'SelectionType'
type SelectionType string

// List of SelectionType
const (
	SELECTIONTYPE_SELECTION_TYPE_UNSPECIFIED SelectionType = "SELECTION_TYPE_UNSPECIFIED"
	SELECTIONTYPE_SELECTION_TYPE_MULTI_ALL SelectionType = "SELECTION_TYPE_MULTI_ALL"
	SELECTIONTYPE_SELECTION_TYPE_MULTI SelectionType = "SELECTION_TYPE_MULTI"
	SELECTIONTYPE_SELECTION_TYPE_SINGLE SelectionType = "SELECTION_TYPE_SINGLE"
)

// All allowed values of SelectionType enum
var AllowedSelectionTypeEnumValues = []SelectionType{
	"SELECTION_TYPE_UNSPECIFIED",
	"SELECTION_TYPE_MULTI_ALL",
	"SELECTION_TYPE_MULTI",
	"SELECTION_TYPE_SINGLE",
}

func (v *SelectionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SelectionType(value)
	for _, existing := range AllowedSelectionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SelectionType", value)
}

// NewSelectionTypeFromValue returns a pointer to a valid SelectionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSelectionTypeFromValue(v string) (*SelectionType, error) {
	ev := SelectionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SelectionType: valid values are %v", v, AllowedSelectionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SelectionType) IsValid() bool {
	for _, existing := range AllowedSelectionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SelectionType value
func (v SelectionType) Ptr() *SelectionType {
	return &v
}

type NullableSelectionType struct {
	value *SelectionType
	isSet bool
}

func (v NullableSelectionType) Get() *SelectionType {
	return v.value
}

func (v *NullableSelectionType) Set(val *SelectionType) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectionType) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectionType(val *SelectionType) *NullableSelectionType {
	return &NullableSelectionType{value: val, isSet: true}
}

func (v NullableSelectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

