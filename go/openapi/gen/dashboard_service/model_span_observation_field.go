/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the SpanObservationField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpanObservationField{}

// SpanObservationField struct for SpanObservationField
type SpanObservationField struct {
	Keypath []string `json:"keypath,omitempty"`
	RelationType *SpanRelationType `json:"relationType,omitempty"`
	Scope *DatasetScope `json:"scope,omitempty"`
}

// NewSpanObservationField instantiates a new SpanObservationField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanObservationField() *SpanObservationField {
	this := SpanObservationField{}
	return &this
}

// NewSpanObservationFieldWithDefaults instantiates a new SpanObservationField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanObservationFieldWithDefaults() *SpanObservationField {
	this := SpanObservationField{}
	return &this
}

// GetKeypath returns the Keypath field value if set, zero value otherwise.
func (o *SpanObservationField) GetKeypath() []string {
	if o == nil || IsNil(o.Keypath) {
		var ret []string
		return ret
	}
	return o.Keypath
}

// GetKeypathOk returns a tuple with the Keypath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanObservationField) GetKeypathOk() ([]string, bool) {
	if o == nil || IsNil(o.Keypath) {
		return nil, false
	}
	return o.Keypath, true
}

// HasKeypath returns a boolean if a field has been set.
func (o *SpanObservationField) HasKeypath() bool {
	if o != nil && !IsNil(o.Keypath) {
		return true
	}

	return false
}

// SetKeypath gets a reference to the given []string and assigns it to the Keypath field.
func (o *SpanObservationField) SetKeypath(v []string) {
	o.Keypath = v
}

// GetRelationType returns the RelationType field value if set, zero value otherwise.
func (o *SpanObservationField) GetRelationType() SpanRelationType {
	if o == nil || IsNil(o.RelationType) {
		var ret SpanRelationType
		return ret
	}
	return *o.RelationType
}

// GetRelationTypeOk returns a tuple with the RelationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanObservationField) GetRelationTypeOk() (*SpanRelationType, bool) {
	if o == nil || IsNil(o.RelationType) {
		return nil, false
	}
	return o.RelationType, true
}

// HasRelationType returns a boolean if a field has been set.
func (o *SpanObservationField) HasRelationType() bool {
	if o != nil && !IsNil(o.RelationType) {
		return true
	}

	return false
}

// SetRelationType gets a reference to the given SpanRelationType and assigns it to the RelationType field.
func (o *SpanObservationField) SetRelationType(v SpanRelationType) {
	o.RelationType = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *SpanObservationField) GetScope() DatasetScope {
	if o == nil || IsNil(o.Scope) {
		var ret DatasetScope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanObservationField) GetScopeOk() (*DatasetScope, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *SpanObservationField) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given DatasetScope and assigns it to the Scope field.
func (o *SpanObservationField) SetScope(v DatasetScope) {
	o.Scope = &v
}

func (o SpanObservationField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpanObservationField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Keypath) {
		toSerialize["keypath"] = o.Keypath
	}
	if !IsNil(o.RelationType) {
		toSerialize["relationType"] = o.RelationType
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	return toSerialize, nil
}

type NullableSpanObservationField struct {
	value *SpanObservationField
	isSet bool
}

func (v NullableSpanObservationField) Get() *SpanObservationField {
	return v.value
}

func (v *NullableSpanObservationField) Set(val *SpanObservationField) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanObservationField) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanObservationField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanObservationField(val *SpanObservationField) *NullableSpanObservationField {
	return &NullableSpanObservationField{value: val, isSet: true}
}

func (v NullableSpanObservationField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanObservationField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


