/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// ActionDataSourceType the model 'ActionDataSourceType'
type ActionDataSourceType string

// List of ActionDataSourceType
const (
	ACTIONDATASOURCETYPE_ACTION_DATA_SOURCE_TYPE_NONE_UNSPECIFIED ActionDataSourceType = "ACTION_DATA_SOURCE_TYPE_NONE_UNSPECIFIED"
	ACTIONDATASOURCETYPE_ACTION_DATA_SOURCE_TYPE_LOGS ActionDataSourceType = "ACTION_DATA_SOURCE_TYPE_LOGS"
	ACTIONDATASOURCETYPE_ACTION_DATA_SOURCE_TYPE_SPANS ActionDataSourceType = "ACTION_DATA_SOURCE_TYPE_SPANS"
	ACTIONDATASOURCETYPE_ACTION_DATA_SOURCE_TYPE_METRICS ActionDataSourceType = "ACTION_DATA_SOURCE_TYPE_METRICS"
	ACTIONDATASOURCETYPE_ACTION_DATA_SOURCE_TYPE_DATAPRIME ActionDataSourceType = "ACTION_DATA_SOURCE_TYPE_DATAPRIME"
)

// All allowed values of ActionDataSourceType enum
var AllowedActionDataSourceTypeEnumValues = []ActionDataSourceType{
	"ACTION_DATA_SOURCE_TYPE_NONE_UNSPECIFIED",
	"ACTION_DATA_SOURCE_TYPE_LOGS",
	"ACTION_DATA_SOURCE_TYPE_SPANS",
	"ACTION_DATA_SOURCE_TYPE_METRICS",
	"ACTION_DATA_SOURCE_TYPE_DATAPRIME",
}

func (v *ActionDataSourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActionDataSourceType(value)
	for _, existing := range AllowedActionDataSourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ActionDataSourceType", value)
}

// NewActionDataSourceTypeFromValue returns a pointer to a valid ActionDataSourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActionDataSourceTypeFromValue(v string) (*ActionDataSourceType, error) {
	ev := ActionDataSourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ActionDataSourceType: valid values are %v", v, AllowedActionDataSourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActionDataSourceType) IsValid() bool {
	for _, existing := range AllowedActionDataSourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActionDataSourceType value
func (v ActionDataSourceType) Ptr() *ActionDataSourceType {
	return &v
}

type NullableActionDataSourceType struct {
	value *ActionDataSourceType
	isSet bool
}

func (v NullableActionDataSourceType) Get() *ActionDataSourceType {
	return v.value
}

func (v *NullableActionDataSourceType) Set(val *ActionDataSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableActionDataSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableActionDataSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionDataSourceType(val *ActionDataSourceType) *NullableActionDataSourceType {
	return &NullableActionDataSourceType{value: val, isSet: true}
}

func (v NullableActionDataSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionDataSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

