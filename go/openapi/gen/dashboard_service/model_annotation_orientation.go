/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// AnnotationOrientation the model 'AnnotationOrientation'
type AnnotationOrientation string

// List of AnnotationOrientation
const (
	ANNOTATIONORIENTATION_ANNOTATION_ORIENTATION_VERTICAL_UNSPECIFIED AnnotationOrientation = "ANNOTATION_ORIENTATION_VERTICAL_UNSPECIFIED"
	ANNOTATIONORIENTATION_ANNOTATION_ORIENTATION_HORIZONTAL AnnotationOrientation = "ANNOTATION_ORIENTATION_HORIZONTAL"
)

// All allowed values of AnnotationOrientation enum
var AllowedAnnotationOrientationEnumValues = []AnnotationOrientation{
	"ANNOTATION_ORIENTATION_VERTICAL_UNSPECIFIED",
	"ANNOTATION_ORIENTATION_HORIZONTAL",
}

func (v *AnnotationOrientation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AnnotationOrientation(value)
	for _, existing := range AllowedAnnotationOrientationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AnnotationOrientation", value)
}

// NewAnnotationOrientationFromValue returns a pointer to a valid AnnotationOrientation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAnnotationOrientationFromValue(v string) (*AnnotationOrientation, error) {
	ev := AnnotationOrientation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AnnotationOrientation: valid values are %v", v, AllowedAnnotationOrientationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AnnotationOrientation) IsValid() bool {
	for _, existing := range AllowedAnnotationOrientationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AnnotationOrientation value
func (v AnnotationOrientation) Ptr() *AnnotationOrientation {
	return &v
}

type NullableAnnotationOrientation struct {
	value *AnnotationOrientation
	isSet bool
}

func (v NullableAnnotationOrientation) Get() *AnnotationOrientation {
	return v.value
}

func (v *NullableAnnotationOrientation) Set(val *AnnotationOrientation) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnotationOrientation) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnotationOrientation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnotationOrientation(val *AnnotationOrientation) *NullableAnnotationOrientation {
	return &NullableAnnotationOrientation{value: val, isSet: true}
}

func (v NullableAnnotationOrientation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnotationOrientation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

