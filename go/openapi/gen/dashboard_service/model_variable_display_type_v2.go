/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// VariableDisplayTypeV2 the model 'VariableDisplayTypeV2'
type VariableDisplayTypeV2 string

// List of VariableDisplayTypeV2
const (
	VARIABLEDISPLAYTYPEV2_VARIABLE_DISPLAY_TYPE_V2_UNSPECIFIED VariableDisplayTypeV2 = "VARIABLE_DISPLAY_TYPE_V2_UNSPECIFIED"
	VARIABLEDISPLAYTYPEV2_VARIABLE_DISPLAY_TYPE_V2_LABEL_VALUE VariableDisplayTypeV2 = "VARIABLE_DISPLAY_TYPE_V2_LABEL_VALUE"
	VARIABLEDISPLAYTYPEV2_VARIABLE_DISPLAY_TYPE_V2_VALUE VariableDisplayTypeV2 = "VARIABLE_DISPLAY_TYPE_V2_VALUE"
	VARIABLEDISPLAYTYPEV2_VARIABLE_DISPLAY_TYPE_V2_NOTHING VariableDisplayTypeV2 = "VARIABLE_DISPLAY_TYPE_V2_NOTHING"
)

// All allowed values of VariableDisplayTypeV2 enum
var AllowedVariableDisplayTypeV2EnumValues = []VariableDisplayTypeV2{
	"VARIABLE_DISPLAY_TYPE_V2_UNSPECIFIED",
	"VARIABLE_DISPLAY_TYPE_V2_LABEL_VALUE",
	"VARIABLE_DISPLAY_TYPE_V2_VALUE",
	"VARIABLE_DISPLAY_TYPE_V2_NOTHING",
}

func (v *VariableDisplayTypeV2) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VariableDisplayTypeV2(value)
	for _, existing := range AllowedVariableDisplayTypeV2EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VariableDisplayTypeV2", value)
}

// NewVariableDisplayTypeV2FromValue returns a pointer to a valid VariableDisplayTypeV2
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVariableDisplayTypeV2FromValue(v string) (*VariableDisplayTypeV2, error) {
	ev := VariableDisplayTypeV2(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VariableDisplayTypeV2: valid values are %v", v, AllowedVariableDisplayTypeV2EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VariableDisplayTypeV2) IsValid() bool {
	for _, existing := range AllowedVariableDisplayTypeV2EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VariableDisplayTypeV2 value
func (v VariableDisplayTypeV2) Ptr() *VariableDisplayTypeV2 {
	return &v
}

type NullableVariableDisplayTypeV2 struct {
	value *VariableDisplayTypeV2
	isSet bool
}

func (v NullableVariableDisplayTypeV2) Get() *VariableDisplayTypeV2 {
	return v.value
}

func (v *NullableVariableDisplayTypeV2) Set(val *VariableDisplayTypeV2) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableDisplayTypeV2) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableDisplayTypeV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableDisplayTypeV2(val *VariableDisplayTypeV2) *NullableVariableDisplayTypeV2 {
	return &NullableVariableDisplayTypeV2{value: val, isSet: true}
}

func (v NullableVariableDisplayTypeV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableDisplayTypeV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

