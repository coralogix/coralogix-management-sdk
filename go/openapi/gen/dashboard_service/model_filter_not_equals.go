/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the FilterNotEquals type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterNotEquals{}

// FilterNotEquals This data structure represents a non-equality comparison operation.
type FilterNotEquals struct {
	Selection *NotEqualsSelection `json:"selection,omitempty"`
}

// NewFilterNotEquals instantiates a new FilterNotEquals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterNotEquals() *FilterNotEquals {
	this := FilterNotEquals{}
	return &this
}

// NewFilterNotEqualsWithDefaults instantiates a new FilterNotEquals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterNotEqualsWithDefaults() *FilterNotEquals {
	this := FilterNotEquals{}
	return &this
}

// GetSelection returns the Selection field value if set, zero value otherwise.
func (o *FilterNotEquals) GetSelection() NotEqualsSelection {
	if o == nil || IsNil(o.Selection) {
		var ret NotEqualsSelection
		return ret
	}
	return *o.Selection
}

// GetSelectionOk returns a tuple with the Selection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterNotEquals) GetSelectionOk() (*NotEqualsSelection, bool) {
	if o == nil || IsNil(o.Selection) {
		return nil, false
	}
	return o.Selection, true
}

// HasSelection returns a boolean if a field has been set.
func (o *FilterNotEquals) HasSelection() bool {
	if o != nil && !IsNil(o.Selection) {
		return true
	}

	return false
}

// SetSelection gets a reference to the given NotEqualsSelection and assigns it to the Selection field.
func (o *FilterNotEquals) SetSelection(v NotEqualsSelection) {
	o.Selection = &v
}

func (o FilterNotEquals) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterNotEquals) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Selection) {
		toSerialize["selection"] = o.Selection
	}
	return toSerialize, nil
}

type NullableFilterNotEquals struct {
	value *FilterNotEquals
	isSet bool
}

func (v NullableFilterNotEquals) Get() *FilterNotEquals {
	return v.value
}

func (v *NullableFilterNotEquals) Set(val *FilterNotEquals) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterNotEquals) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterNotEquals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterNotEquals(val *FilterNotEquals) *NullableFilterNotEquals {
	return &NullableFilterNotEquals{value: val, isSet: true}
}

func (v NullableFilterNotEquals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterNotEquals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


