/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the ColorsByOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ColorsByOneOf{}

// ColorsByOneOf struct for ColorsByOneOf
type ColorsByOneOf struct {
	Stack map[string]interface{} `json:"stack,omitempty"`
}

// NewColorsByOneOf instantiates a new ColorsByOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColorsByOneOf() *ColorsByOneOf {
	this := ColorsByOneOf{}
	return &this
}

// NewColorsByOneOfWithDefaults instantiates a new ColorsByOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColorsByOneOfWithDefaults() *ColorsByOneOf {
	this := ColorsByOneOf{}
	return &this
}

// GetStack returns the Stack field value if set, zero value otherwise.
func (o *ColorsByOneOf) GetStack() map[string]interface{} {
	if o == nil || IsNil(o.Stack) {
		var ret map[string]interface{}
		return ret
	}
	return o.Stack
}

// GetStackOk returns a tuple with the Stack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorsByOneOf) GetStackOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Stack) {
		return map[string]interface{}{}, false
	}
	return o.Stack, true
}

// HasStack returns a boolean if a field has been set.
func (o *ColorsByOneOf) HasStack() bool {
	if o != nil && !IsNil(o.Stack) {
		return true
	}

	return false
}

// SetStack gets a reference to the given map[string]interface{} and assigns it to the Stack field.
func (o *ColorsByOneOf) SetStack(v map[string]interface{}) {
	o.Stack = v
}

func (o ColorsByOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ColorsByOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Stack) {
		toSerialize["stack"] = o.Stack
	}
	return toSerialize, nil
}

type NullableColorsByOneOf struct {
	value *ColorsByOneOf
	isSet bool
}

func (v NullableColorsByOneOf) Get() *ColorsByOneOf {
	return v.value
}

func (v *NullableColorsByOneOf) Set(val *ColorsByOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableColorsByOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableColorsByOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColorsByOneOf(val *ColorsByOneOf) *NullableColorsByOneOf {
	return &NullableColorsByOneOf{value: val, isSet: true}
}

func (v NullableColorsByOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColorsByOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


