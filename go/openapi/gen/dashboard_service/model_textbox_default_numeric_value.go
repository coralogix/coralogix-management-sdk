/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the TextboxDefaultNumericValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TextboxDefaultNumericValue{}

// TextboxDefaultNumericValue struct for TextboxDefaultNumericValue
type TextboxDefaultNumericValue struct {
	IsInteger *bool `json:"isInteger,omitempty"`
	Max *float32 `json:"max,omitempty"`
	Min *float32 `json:"min,omitempty"`
	Value *float32 `json:"value,omitempty"`
}

// NewTextboxDefaultNumericValue instantiates a new TextboxDefaultNumericValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextboxDefaultNumericValue() *TextboxDefaultNumericValue {
	this := TextboxDefaultNumericValue{}
	return &this
}

// NewTextboxDefaultNumericValueWithDefaults instantiates a new TextboxDefaultNumericValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextboxDefaultNumericValueWithDefaults() *TextboxDefaultNumericValue {
	this := TextboxDefaultNumericValue{}
	return &this
}

// GetIsInteger returns the IsInteger field value if set, zero value otherwise.
func (o *TextboxDefaultNumericValue) GetIsInteger() bool {
	if o == nil || IsNil(o.IsInteger) {
		var ret bool
		return ret
	}
	return *o.IsInteger
}

// GetIsIntegerOk returns a tuple with the IsInteger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextboxDefaultNumericValue) GetIsIntegerOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInteger) {
		return nil, false
	}
	return o.IsInteger, true
}

// HasIsInteger returns a boolean if a field has been set.
func (o *TextboxDefaultNumericValue) HasIsInteger() bool {
	if o != nil && !IsNil(o.IsInteger) {
		return true
	}

	return false
}

// SetIsInteger gets a reference to the given bool and assigns it to the IsInteger field.
func (o *TextboxDefaultNumericValue) SetIsInteger(v bool) {
	o.IsInteger = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *TextboxDefaultNumericValue) GetMax() float32 {
	if o == nil || IsNil(o.Max) {
		var ret float32
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextboxDefaultNumericValue) GetMaxOk() (*float32, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *TextboxDefaultNumericValue) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given float32 and assigns it to the Max field.
func (o *TextboxDefaultNumericValue) SetMax(v float32) {
	o.Max = &v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *TextboxDefaultNumericValue) GetMin() float32 {
	if o == nil || IsNil(o.Min) {
		var ret float32
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextboxDefaultNumericValue) GetMinOk() (*float32, bool) {
	if o == nil || IsNil(o.Min) {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *TextboxDefaultNumericValue) HasMin() bool {
	if o != nil && !IsNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given float32 and assigns it to the Min field.
func (o *TextboxDefaultNumericValue) SetMin(v float32) {
	o.Min = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TextboxDefaultNumericValue) GetValue() float32 {
	if o == nil || IsNil(o.Value) {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextboxDefaultNumericValue) GetValueOk() (*float32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TextboxDefaultNumericValue) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *TextboxDefaultNumericValue) SetValue(v float32) {
	o.Value = &v
}

func (o TextboxDefaultNumericValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TextboxDefaultNumericValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsInteger) {
		toSerialize["isInteger"] = o.IsInteger
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableTextboxDefaultNumericValue struct {
	value *TextboxDefaultNumericValue
	isSet bool
}

func (v NullableTextboxDefaultNumericValue) Get() *TextboxDefaultNumericValue {
	return v.value
}

func (v *NullableTextboxDefaultNumericValue) Set(val *TextboxDefaultNumericValue) {
	v.value = val
	v.isSet = true
}

func (v NullableTextboxDefaultNumericValue) IsSet() bool {
	return v.isSet
}

func (v *NullableTextboxDefaultNumericValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextboxDefaultNumericValue(val *TextboxDefaultNumericValue) *NullableTextboxDefaultNumericValue {
	return &NullableTextboxDefaultNumericValue{value: val, isSet: true}
}

func (v NullableTextboxDefaultNumericValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextboxDefaultNumericValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


