/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the DataTableLogsQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataTableLogsQuery{}

// DataTableLogsQuery A logs variant of the query
type DataTableLogsQuery struct {
	Filters []FilterLogsFilter `json:"filters,omitempty"`
	Grouping *LogsQueryGrouping `json:"grouping,omitempty"`
	LuceneQuery *LuceneQuery `json:"luceneQuery,omitempty"`
	TimeFrame *TimeFrameSelect `json:"timeFrame,omitempty"`
}

// NewDataTableLogsQuery instantiates a new DataTableLogsQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTableLogsQuery() *DataTableLogsQuery {
	this := DataTableLogsQuery{}
	return &this
}

// NewDataTableLogsQueryWithDefaults instantiates a new DataTableLogsQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTableLogsQueryWithDefaults() *DataTableLogsQuery {
	this := DataTableLogsQuery{}
	return &this
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *DataTableLogsQuery) GetFilters() []FilterLogsFilter {
	if o == nil || IsNil(o.Filters) {
		var ret []FilterLogsFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTableLogsQuery) GetFiltersOk() ([]FilterLogsFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *DataTableLogsQuery) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []FilterLogsFilter and assigns it to the Filters field.
func (o *DataTableLogsQuery) SetFilters(v []FilterLogsFilter) {
	o.Filters = v
}

// GetGrouping returns the Grouping field value if set, zero value otherwise.
func (o *DataTableLogsQuery) GetGrouping() LogsQueryGrouping {
	if o == nil || IsNil(o.Grouping) {
		var ret LogsQueryGrouping
		return ret
	}
	return *o.Grouping
}

// GetGroupingOk returns a tuple with the Grouping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTableLogsQuery) GetGroupingOk() (*LogsQueryGrouping, bool) {
	if o == nil || IsNil(o.Grouping) {
		return nil, false
	}
	return o.Grouping, true
}

// HasGrouping returns a boolean if a field has been set.
func (o *DataTableLogsQuery) HasGrouping() bool {
	if o != nil && !IsNil(o.Grouping) {
		return true
	}

	return false
}

// SetGrouping gets a reference to the given LogsQueryGrouping and assigns it to the Grouping field.
func (o *DataTableLogsQuery) SetGrouping(v LogsQueryGrouping) {
	o.Grouping = &v
}

// GetLuceneQuery returns the LuceneQuery field value if set, zero value otherwise.
func (o *DataTableLogsQuery) GetLuceneQuery() LuceneQuery {
	if o == nil || IsNil(o.LuceneQuery) {
		var ret LuceneQuery
		return ret
	}
	return *o.LuceneQuery
}

// GetLuceneQueryOk returns a tuple with the LuceneQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTableLogsQuery) GetLuceneQueryOk() (*LuceneQuery, bool) {
	if o == nil || IsNil(o.LuceneQuery) {
		return nil, false
	}
	return o.LuceneQuery, true
}

// HasLuceneQuery returns a boolean if a field has been set.
func (o *DataTableLogsQuery) HasLuceneQuery() bool {
	if o != nil && !IsNil(o.LuceneQuery) {
		return true
	}

	return false
}

// SetLuceneQuery gets a reference to the given LuceneQuery and assigns it to the LuceneQuery field.
func (o *DataTableLogsQuery) SetLuceneQuery(v LuceneQuery) {
	o.LuceneQuery = &v
}

// GetTimeFrame returns the TimeFrame field value if set, zero value otherwise.
func (o *DataTableLogsQuery) GetTimeFrame() TimeFrameSelect {
	if o == nil || IsNil(o.TimeFrame) {
		var ret TimeFrameSelect
		return ret
	}
	return *o.TimeFrame
}

// GetTimeFrameOk returns a tuple with the TimeFrame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTableLogsQuery) GetTimeFrameOk() (*TimeFrameSelect, bool) {
	if o == nil || IsNil(o.TimeFrame) {
		return nil, false
	}
	return o.TimeFrame, true
}

// HasTimeFrame returns a boolean if a field has been set.
func (o *DataTableLogsQuery) HasTimeFrame() bool {
	if o != nil && !IsNil(o.TimeFrame) {
		return true
	}

	return false
}

// SetTimeFrame gets a reference to the given TimeFrameSelect and assigns it to the TimeFrame field.
func (o *DataTableLogsQuery) SetTimeFrame(v TimeFrameSelect) {
	o.TimeFrame = &v
}

func (o DataTableLogsQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataTableLogsQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Grouping) {
		toSerialize["grouping"] = o.Grouping
	}
	if !IsNil(o.LuceneQuery) {
		toSerialize["luceneQuery"] = o.LuceneQuery
	}
	if !IsNil(o.TimeFrame) {
		toSerialize["timeFrame"] = o.TimeFrame
	}
	return toSerialize, nil
}

type NullableDataTableLogsQuery struct {
	value *DataTableLogsQuery
	isSet bool
}

func (v NullableDataTableLogsQuery) Get() *DataTableLogsQuery {
	return v.value
}

func (v *NullableDataTableLogsQuery) Set(val *DataTableLogsQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTableLogsQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTableLogsQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTableLogsQuery(val *DataTableLogsQuery) *NullableDataTableLogsQuery {
	return &NullableDataTableLogsQuery{value: val, isSet: true}
}

func (v NullableDataTableLogsQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTableLogsQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


