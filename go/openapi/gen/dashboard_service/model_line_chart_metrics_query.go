/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the LineChartMetricsQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LineChartMetricsQuery{}

// LineChartMetricsQuery struct for LineChartMetricsQuery
type LineChartMetricsQuery struct {
	EditorMode *MetricsQueryEditorMode `json:"editorMode,omitempty"`
	Filters []MetricsFilter `json:"filters,omitempty"`
	PromqlQuery *PromQlQuery `json:"promqlQuery,omitempty"`
	SeriesLimitType *MetricsSeriesLimitType `json:"seriesLimitType,omitempty"`
	TimeFrame *TimeFrameSelect `json:"timeFrame,omitempty"`
}

// NewLineChartMetricsQuery instantiates a new LineChartMetricsQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLineChartMetricsQuery() *LineChartMetricsQuery {
	this := LineChartMetricsQuery{}
	return &this
}

// NewLineChartMetricsQueryWithDefaults instantiates a new LineChartMetricsQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLineChartMetricsQueryWithDefaults() *LineChartMetricsQuery {
	this := LineChartMetricsQuery{}
	return &this
}

// GetEditorMode returns the EditorMode field value if set, zero value otherwise.
func (o *LineChartMetricsQuery) GetEditorMode() MetricsQueryEditorMode {
	if o == nil || IsNil(o.EditorMode) {
		var ret MetricsQueryEditorMode
		return ret
	}
	return *o.EditorMode
}

// GetEditorModeOk returns a tuple with the EditorMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineChartMetricsQuery) GetEditorModeOk() (*MetricsQueryEditorMode, bool) {
	if o == nil || IsNil(o.EditorMode) {
		return nil, false
	}
	return o.EditorMode, true
}

// HasEditorMode returns a boolean if a field has been set.
func (o *LineChartMetricsQuery) HasEditorMode() bool {
	if o != nil && !IsNil(o.EditorMode) {
		return true
	}

	return false
}

// SetEditorMode gets a reference to the given MetricsQueryEditorMode and assigns it to the EditorMode field.
func (o *LineChartMetricsQuery) SetEditorMode(v MetricsQueryEditorMode) {
	o.EditorMode = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *LineChartMetricsQuery) GetFilters() []MetricsFilter {
	if o == nil || IsNil(o.Filters) {
		var ret []MetricsFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineChartMetricsQuery) GetFiltersOk() ([]MetricsFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *LineChartMetricsQuery) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []MetricsFilter and assigns it to the Filters field.
func (o *LineChartMetricsQuery) SetFilters(v []MetricsFilter) {
	o.Filters = v
}

// GetPromqlQuery returns the PromqlQuery field value if set, zero value otherwise.
func (o *LineChartMetricsQuery) GetPromqlQuery() PromQlQuery {
	if o == nil || IsNil(o.PromqlQuery) {
		var ret PromQlQuery
		return ret
	}
	return *o.PromqlQuery
}

// GetPromqlQueryOk returns a tuple with the PromqlQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineChartMetricsQuery) GetPromqlQueryOk() (*PromQlQuery, bool) {
	if o == nil || IsNil(o.PromqlQuery) {
		return nil, false
	}
	return o.PromqlQuery, true
}

// HasPromqlQuery returns a boolean if a field has been set.
func (o *LineChartMetricsQuery) HasPromqlQuery() bool {
	if o != nil && !IsNil(o.PromqlQuery) {
		return true
	}

	return false
}

// SetPromqlQuery gets a reference to the given PromQlQuery and assigns it to the PromqlQuery field.
func (o *LineChartMetricsQuery) SetPromqlQuery(v PromQlQuery) {
	o.PromqlQuery = &v
}

// GetSeriesLimitType returns the SeriesLimitType field value if set, zero value otherwise.
func (o *LineChartMetricsQuery) GetSeriesLimitType() MetricsSeriesLimitType {
	if o == nil || IsNil(o.SeriesLimitType) {
		var ret MetricsSeriesLimitType
		return ret
	}
	return *o.SeriesLimitType
}

// GetSeriesLimitTypeOk returns a tuple with the SeriesLimitType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineChartMetricsQuery) GetSeriesLimitTypeOk() (*MetricsSeriesLimitType, bool) {
	if o == nil || IsNil(o.SeriesLimitType) {
		return nil, false
	}
	return o.SeriesLimitType, true
}

// HasSeriesLimitType returns a boolean if a field has been set.
func (o *LineChartMetricsQuery) HasSeriesLimitType() bool {
	if o != nil && !IsNil(o.SeriesLimitType) {
		return true
	}

	return false
}

// SetSeriesLimitType gets a reference to the given MetricsSeriesLimitType and assigns it to the SeriesLimitType field.
func (o *LineChartMetricsQuery) SetSeriesLimitType(v MetricsSeriesLimitType) {
	o.SeriesLimitType = &v
}

// GetTimeFrame returns the TimeFrame field value if set, zero value otherwise.
func (o *LineChartMetricsQuery) GetTimeFrame() TimeFrameSelect {
	if o == nil || IsNil(o.TimeFrame) {
		var ret TimeFrameSelect
		return ret
	}
	return *o.TimeFrame
}

// GetTimeFrameOk returns a tuple with the TimeFrame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineChartMetricsQuery) GetTimeFrameOk() (*TimeFrameSelect, bool) {
	if o == nil || IsNil(o.TimeFrame) {
		return nil, false
	}
	return o.TimeFrame, true
}

// HasTimeFrame returns a boolean if a field has been set.
func (o *LineChartMetricsQuery) HasTimeFrame() bool {
	if o != nil && !IsNil(o.TimeFrame) {
		return true
	}

	return false
}

// SetTimeFrame gets a reference to the given TimeFrameSelect and assigns it to the TimeFrame field.
func (o *LineChartMetricsQuery) SetTimeFrame(v TimeFrameSelect) {
	o.TimeFrame = &v
}

func (o LineChartMetricsQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LineChartMetricsQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EditorMode) {
		toSerialize["editorMode"] = o.EditorMode
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.PromqlQuery) {
		toSerialize["promqlQuery"] = o.PromqlQuery
	}
	if !IsNil(o.SeriesLimitType) {
		toSerialize["seriesLimitType"] = o.SeriesLimitType
	}
	if !IsNil(o.TimeFrame) {
		toSerialize["timeFrame"] = o.TimeFrame
	}
	return toSerialize, nil
}

type NullableLineChartMetricsQuery struct {
	value *LineChartMetricsQuery
	isSet bool
}

func (v NullableLineChartMetricsQuery) Get() *LineChartMetricsQuery {
	return v.value
}

func (v *NullableLineChartMetricsQuery) Set(val *LineChartMetricsQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableLineChartMetricsQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableLineChartMetricsQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLineChartMetricsQuery(val *LineChartMetricsQuery) *NullableLineChartMetricsQuery {
	return &NullableLineChartMetricsQuery{value: val, isSet: true}
}

func (v NullableLineChartMetricsQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLineChartMetricsQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


