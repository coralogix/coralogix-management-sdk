/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the DefinitionMarkdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefinitionMarkdown{}

// DefinitionMarkdown struct for DefinitionMarkdown
type DefinitionMarkdown struct {
	Markdown *Markdown `json:"markdown,omitempty"`
}

// NewDefinitionMarkdown instantiates a new DefinitionMarkdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefinitionMarkdown() *DefinitionMarkdown {
	this := DefinitionMarkdown{}
	return &this
}

// NewDefinitionMarkdownWithDefaults instantiates a new DefinitionMarkdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefinitionMarkdownWithDefaults() *DefinitionMarkdown {
	this := DefinitionMarkdown{}
	return &this
}

// GetMarkdown returns the Markdown field value if set, zero value otherwise.
func (o *DefinitionMarkdown) GetMarkdown() Markdown {
	if o == nil || IsNil(o.Markdown) {
		var ret Markdown
		return ret
	}
	return *o.Markdown
}

// GetMarkdownOk returns a tuple with the Markdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinitionMarkdown) GetMarkdownOk() (*Markdown, bool) {
	if o == nil || IsNil(o.Markdown) {
		return nil, false
	}
	return o.Markdown, true
}

// HasMarkdown returns a boolean if a field has been set.
func (o *DefinitionMarkdown) HasMarkdown() bool {
	if o != nil && !IsNil(o.Markdown) {
		return true
	}

	return false
}

// SetMarkdown gets a reference to the given Markdown and assigns it to the Markdown field.
func (o *DefinitionMarkdown) SetMarkdown(v Markdown) {
	o.Markdown = &v
}

func (o DefinitionMarkdown) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefinitionMarkdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Markdown) {
		toSerialize["markdown"] = o.Markdown
	}
	return toSerialize, nil
}

type NullableDefinitionMarkdown struct {
	value *DefinitionMarkdown
	isSet bool
}

func (v NullableDefinitionMarkdown) Get() *DefinitionMarkdown {
	return v.value
}

func (v *NullableDefinitionMarkdown) Set(val *DefinitionMarkdown) {
	v.value = val
	v.isSet = true
}

func (v NullableDefinitionMarkdown) IsSet() bool {
	return v.isSet
}

func (v *NullableDefinitionMarkdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefinitionMarkdown(val *DefinitionMarkdown) *NullableDefinitionMarkdown {
	return &NullableDefinitionMarkdown{value: val, isSet: true}
}

func (v NullableDefinitionMarkdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefinitionMarkdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


