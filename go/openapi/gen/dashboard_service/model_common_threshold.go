/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the CommonThreshold type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonThreshold{}

// CommonThreshold Definition of a single gauge threshold
type CommonThreshold struct {
	// Color of the threshold
	Color *string `json:"color,omitempty"`
	// Minimum bound value of the threshold
	From *float64 `json:"from,omitempty"`
	// Optional label of the threshold
	Label *string `json:"label,omitempty"`
}

// NewCommonThreshold instantiates a new CommonThreshold object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonThreshold() *CommonThreshold {
	this := CommonThreshold{}
	return &this
}

// NewCommonThresholdWithDefaults instantiates a new CommonThreshold object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonThresholdWithDefaults() *CommonThreshold {
	this := CommonThreshold{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *CommonThreshold) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonThreshold) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *CommonThreshold) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *CommonThreshold) SetColor(v string) {
	o.Color = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *CommonThreshold) GetFrom() float64 {
	if o == nil || IsNil(o.From) {
		var ret float64
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonThreshold) GetFromOk() (*float64, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *CommonThreshold) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given float64 and assigns it to the From field.
func (o *CommonThreshold) SetFrom(v float64) {
	o.From = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *CommonThreshold) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonThreshold) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *CommonThreshold) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *CommonThreshold) SetLabel(v string) {
	o.Label = &v
}

func (o CommonThreshold) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonThreshold) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	return toSerialize, nil
}

type NullableCommonThreshold struct {
	value *CommonThreshold
	isSet bool
}

func (v NullableCommonThreshold) Get() *CommonThreshold {
	return v.value
}

func (v *NullableCommonThreshold) Set(val *CommonThreshold) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonThreshold(val *CommonThreshold) *NullableCommonThreshold {
	return &NullableCommonThreshold{value: val, isSet: true}
}

func (v NullableCommonThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


