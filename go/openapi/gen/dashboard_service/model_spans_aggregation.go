/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SpansAggregation - struct for SpansAggregation
type SpansAggregation struct {
	SpansAggregationOneOf *SpansAggregationOneOf
	SpansAggregationOneOf1 *SpansAggregationOneOf1
}

// SpansAggregationOneOfAsSpansAggregation is a convenience function that returns SpansAggregationOneOf wrapped in SpansAggregation
func SpansAggregationOneOfAsSpansAggregation(v *SpansAggregationOneOf) SpansAggregation {
	return SpansAggregation{
		SpansAggregationOneOf: v,
	}
}

// SpansAggregationOneOf1AsSpansAggregation is a convenience function that returns SpansAggregationOneOf1 wrapped in SpansAggregation
func SpansAggregationOneOf1AsSpansAggregation(v *SpansAggregationOneOf1) SpansAggregation {
	return SpansAggregation{
		SpansAggregationOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SpansAggregation) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SpansAggregationOneOf
	err = newStrictDecoder(data).Decode(&dst.SpansAggregationOneOf)
	if err == nil {
		jsonSpansAggregationOneOf, _ := json.Marshal(dst.SpansAggregationOneOf)
		if string(jsonSpansAggregationOneOf) == "{}" { // empty struct
			dst.SpansAggregationOneOf = nil
		} else {
			if err = validator.Validate(dst.SpansAggregationOneOf); err != nil {
				dst.SpansAggregationOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpansAggregationOneOf = nil
	}

	// try to unmarshal data into SpansAggregationOneOf1
	err = newStrictDecoder(data).Decode(&dst.SpansAggregationOneOf1)
	if err == nil {
		jsonSpansAggregationOneOf1, _ := json.Marshal(dst.SpansAggregationOneOf1)
		if string(jsonSpansAggregationOneOf1) == "{}" { // empty struct
			dst.SpansAggregationOneOf1 = nil
		} else {
			if err = validator.Validate(dst.SpansAggregationOneOf1); err != nil {
				dst.SpansAggregationOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpansAggregationOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SpansAggregationOneOf = nil
		dst.SpansAggregationOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SpansAggregation)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SpansAggregation)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SpansAggregation) MarshalJSON() ([]byte, error) {
	if src.SpansAggregationOneOf != nil {
		return json.Marshal(&src.SpansAggregationOneOf)
	}

	if src.SpansAggregationOneOf1 != nil {
		return json.Marshal(&src.SpansAggregationOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SpansAggregation) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SpansAggregationOneOf != nil {
		return obj.SpansAggregationOneOf
	}

	if obj.SpansAggregationOneOf1 != nil {
		return obj.SpansAggregationOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SpansAggregation) GetActualInstanceValue() (interface{}) {
	if obj.SpansAggregationOneOf != nil {
		return *obj.SpansAggregationOneOf
	}

	if obj.SpansAggregationOneOf1 != nil {
		return *obj.SpansAggregationOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableSpansAggregation struct {
	value *SpansAggregation
	isSet bool
}

func (v NullableSpansAggregation) Get() *SpansAggregation {
	return v.value
}

func (v *NullableSpansAggregation) Set(val *SpansAggregation) {
	v.value = val
	v.isSet = true
}

func (v NullableSpansAggregation) IsSet() bool {
	return v.isSet
}

func (v *NullableSpansAggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpansAggregation(val *SpansAggregation) *NullableSpansAggregation {
	return &NullableSpansAggregation{value: val, isSet: true}
}

func (v NullableSpansAggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpansAggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


