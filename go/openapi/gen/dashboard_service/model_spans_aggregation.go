/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SpansAggregation - struct for SpansAggregation
type SpansAggregation struct {
	SpansAggregationDimensionAggregation *SpansAggregationDimensionAggregation
	SpansAggregationMetricAggregation *SpansAggregationMetricAggregation
}

// SpansAggregationDimensionAggregationAsSpansAggregation is a convenience function that returns SpansAggregationDimensionAggregation wrapped in SpansAggregation
func SpansAggregationDimensionAggregationAsSpansAggregation(v *SpansAggregationDimensionAggregation) SpansAggregation {
	return SpansAggregation{
		SpansAggregationDimensionAggregation: v,
	}
}

// SpansAggregationMetricAggregationAsSpansAggregation is a convenience function that returns SpansAggregationMetricAggregation wrapped in SpansAggregation
func SpansAggregationMetricAggregationAsSpansAggregation(v *SpansAggregationMetricAggregation) SpansAggregation {
	return SpansAggregation{
		SpansAggregationMetricAggregation: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SpansAggregation) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SpansAggregationDimensionAggregation
	err = newStrictDecoder(data).Decode(&dst.SpansAggregationDimensionAggregation)
	if err == nil {
		jsonSpansAggregationDimensionAggregation, _ := json.Marshal(dst.SpansAggregationDimensionAggregation)
		if string(jsonSpansAggregationDimensionAggregation) == "{}" { // empty struct
			dst.SpansAggregationDimensionAggregation = nil
		} else {
			if err = validator.Validate(dst.SpansAggregationDimensionAggregation); err != nil {
				dst.SpansAggregationDimensionAggregation = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpansAggregationDimensionAggregation = nil
	}

	// try to unmarshal data into SpansAggregationMetricAggregation
	err = newStrictDecoder(data).Decode(&dst.SpansAggregationMetricAggregation)
	if err == nil {
		jsonSpansAggregationMetricAggregation, _ := json.Marshal(dst.SpansAggregationMetricAggregation)
		if string(jsonSpansAggregationMetricAggregation) == "{}" { // empty struct
			dst.SpansAggregationMetricAggregation = nil
		} else {
			if err = validator.Validate(dst.SpansAggregationMetricAggregation); err != nil {
				dst.SpansAggregationMetricAggregation = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpansAggregationMetricAggregation = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SpansAggregationDimensionAggregation = nil
		dst.SpansAggregationMetricAggregation = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SpansAggregation)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SpansAggregation)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SpansAggregation) MarshalJSON() ([]byte, error) {
	if src.SpansAggregationDimensionAggregation != nil {
		return json.Marshal(&src.SpansAggregationDimensionAggregation)
	}

	if src.SpansAggregationMetricAggregation != nil {
		return json.Marshal(&src.SpansAggregationMetricAggregation)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SpansAggregation) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SpansAggregationDimensionAggregation != nil {
		return obj.SpansAggregationDimensionAggregation
	}

	if obj.SpansAggregationMetricAggregation != nil {
		return obj.SpansAggregationMetricAggregation
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SpansAggregation) GetActualInstanceValue() (interface{}) {
	if obj.SpansAggregationDimensionAggregation != nil {
		return *obj.SpansAggregationDimensionAggregation
	}

	if obj.SpansAggregationMetricAggregation != nil {
		return *obj.SpansAggregationMetricAggregation
	}

	// all schemas are nil
	return nil
}

type NullableSpansAggregation struct {
	value *SpansAggregation
	isSet bool
}

func (v NullableSpansAggregation) Get() *SpansAggregation {
	return v.value
}

func (v *NullableSpansAggregation) Set(val *SpansAggregation) {
	v.value = val
	v.isSet = true
}

func (v NullableSpansAggregation) IsSet() bool {
	return v.isSet
}

func (v *NullableSpansAggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpansAggregation(val *SpansAggregation) *NullableSpansAggregation {
	return &NullableSpansAggregation{value: val, isSet: true}
}

func (v NullableSpansAggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpansAggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


