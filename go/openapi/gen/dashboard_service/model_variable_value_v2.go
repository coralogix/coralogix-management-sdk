/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// VariableValueV2 - struct for VariableValueV2
type VariableValueV2 struct {
	VariableValueV2Interval *VariableValueV2Interval
	VariableValueV2Lucene *VariableValueV2Lucene
	VariableValueV2MultiString *VariableValueV2MultiString
	VariableValueV2Regex *VariableValueV2Regex
	VariableValueV2SingleNumeric *VariableValueV2SingleNumeric
	VariableValueV2SingleString *VariableValueV2SingleString
}

// VariableValueV2IntervalAsVariableValueV2 is a convenience function that returns VariableValueV2Interval wrapped in VariableValueV2
func VariableValueV2IntervalAsVariableValueV2(v *VariableValueV2Interval) VariableValueV2 {
	return VariableValueV2{
		VariableValueV2Interval: v,
	}
}

// VariableValueV2LuceneAsVariableValueV2 is a convenience function that returns VariableValueV2Lucene wrapped in VariableValueV2
func VariableValueV2LuceneAsVariableValueV2(v *VariableValueV2Lucene) VariableValueV2 {
	return VariableValueV2{
		VariableValueV2Lucene: v,
	}
}

// VariableValueV2MultiStringAsVariableValueV2 is a convenience function that returns VariableValueV2MultiString wrapped in VariableValueV2
func VariableValueV2MultiStringAsVariableValueV2(v *VariableValueV2MultiString) VariableValueV2 {
	return VariableValueV2{
		VariableValueV2MultiString: v,
	}
}

// VariableValueV2RegexAsVariableValueV2 is a convenience function that returns VariableValueV2Regex wrapped in VariableValueV2
func VariableValueV2RegexAsVariableValueV2(v *VariableValueV2Regex) VariableValueV2 {
	return VariableValueV2{
		VariableValueV2Regex: v,
	}
}

// VariableValueV2SingleNumericAsVariableValueV2 is a convenience function that returns VariableValueV2SingleNumeric wrapped in VariableValueV2
func VariableValueV2SingleNumericAsVariableValueV2(v *VariableValueV2SingleNumeric) VariableValueV2 {
	return VariableValueV2{
		VariableValueV2SingleNumeric: v,
	}
}

// VariableValueV2SingleStringAsVariableValueV2 is a convenience function that returns VariableValueV2SingleString wrapped in VariableValueV2
func VariableValueV2SingleStringAsVariableValueV2(v *VariableValueV2SingleString) VariableValueV2 {
	return VariableValueV2{
		VariableValueV2SingleString: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *VariableValueV2) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into VariableValueV2Interval
	err = newStrictDecoder(data).Decode(&dst.VariableValueV2Interval)
	if err == nil {
		jsonVariableValueV2Interval, _ := json.Marshal(dst.VariableValueV2Interval)
		if string(jsonVariableValueV2Interval) == "{}" { // empty struct
			dst.VariableValueV2Interval = nil
		} else {
			if err = validator.Validate(dst.VariableValueV2Interval); err != nil {
				dst.VariableValueV2Interval = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableValueV2Interval = nil
	}

	// try to unmarshal data into VariableValueV2Lucene
	err = newStrictDecoder(data).Decode(&dst.VariableValueV2Lucene)
	if err == nil {
		jsonVariableValueV2Lucene, _ := json.Marshal(dst.VariableValueV2Lucene)
		if string(jsonVariableValueV2Lucene) == "{}" { // empty struct
			dst.VariableValueV2Lucene = nil
		} else {
			if err = validator.Validate(dst.VariableValueV2Lucene); err != nil {
				dst.VariableValueV2Lucene = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableValueV2Lucene = nil
	}

	// try to unmarshal data into VariableValueV2MultiString
	err = newStrictDecoder(data).Decode(&dst.VariableValueV2MultiString)
	if err == nil {
		jsonVariableValueV2MultiString, _ := json.Marshal(dst.VariableValueV2MultiString)
		if string(jsonVariableValueV2MultiString) == "{}" { // empty struct
			dst.VariableValueV2MultiString = nil
		} else {
			if err = validator.Validate(dst.VariableValueV2MultiString); err != nil {
				dst.VariableValueV2MultiString = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableValueV2MultiString = nil
	}

	// try to unmarshal data into VariableValueV2Regex
	err = newStrictDecoder(data).Decode(&dst.VariableValueV2Regex)
	if err == nil {
		jsonVariableValueV2Regex, _ := json.Marshal(dst.VariableValueV2Regex)
		if string(jsonVariableValueV2Regex) == "{}" { // empty struct
			dst.VariableValueV2Regex = nil
		} else {
			if err = validator.Validate(dst.VariableValueV2Regex); err != nil {
				dst.VariableValueV2Regex = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableValueV2Regex = nil
	}

	// try to unmarshal data into VariableValueV2SingleNumeric
	err = newStrictDecoder(data).Decode(&dst.VariableValueV2SingleNumeric)
	if err == nil {
		jsonVariableValueV2SingleNumeric, _ := json.Marshal(dst.VariableValueV2SingleNumeric)
		if string(jsonVariableValueV2SingleNumeric) == "{}" { // empty struct
			dst.VariableValueV2SingleNumeric = nil
		} else {
			if err = validator.Validate(dst.VariableValueV2SingleNumeric); err != nil {
				dst.VariableValueV2SingleNumeric = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableValueV2SingleNumeric = nil
	}

	// try to unmarshal data into VariableValueV2SingleString
	err = newStrictDecoder(data).Decode(&dst.VariableValueV2SingleString)
	if err == nil {
		jsonVariableValueV2SingleString, _ := json.Marshal(dst.VariableValueV2SingleString)
		if string(jsonVariableValueV2SingleString) == "{}" { // empty struct
			dst.VariableValueV2SingleString = nil
		} else {
			if err = validator.Validate(dst.VariableValueV2SingleString); err != nil {
				dst.VariableValueV2SingleString = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableValueV2SingleString = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.VariableValueV2Interval = nil
		dst.VariableValueV2Lucene = nil
		dst.VariableValueV2MultiString = nil
		dst.VariableValueV2Regex = nil
		dst.VariableValueV2SingleNumeric = nil
		dst.VariableValueV2SingleString = nil

		return fmt.Errorf("data matches more than one schema in oneOf(VariableValueV2)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(VariableValueV2)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src VariableValueV2) MarshalJSON() ([]byte, error) {
	if src.VariableValueV2Interval != nil {
		return json.Marshal(&src.VariableValueV2Interval)
	}

	if src.VariableValueV2Lucene != nil {
		return json.Marshal(&src.VariableValueV2Lucene)
	}

	if src.VariableValueV2MultiString != nil {
		return json.Marshal(&src.VariableValueV2MultiString)
	}

	if src.VariableValueV2Regex != nil {
		return json.Marshal(&src.VariableValueV2Regex)
	}

	if src.VariableValueV2SingleNumeric != nil {
		return json.Marshal(&src.VariableValueV2SingleNumeric)
	}

	if src.VariableValueV2SingleString != nil {
		return json.Marshal(&src.VariableValueV2SingleString)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *VariableValueV2) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.VariableValueV2Interval != nil {
		return obj.VariableValueV2Interval
	}

	if obj.VariableValueV2Lucene != nil {
		return obj.VariableValueV2Lucene
	}

	if obj.VariableValueV2MultiString != nil {
		return obj.VariableValueV2MultiString
	}

	if obj.VariableValueV2Regex != nil {
		return obj.VariableValueV2Regex
	}

	if obj.VariableValueV2SingleNumeric != nil {
		return obj.VariableValueV2SingleNumeric
	}

	if obj.VariableValueV2SingleString != nil {
		return obj.VariableValueV2SingleString
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj VariableValueV2) GetActualInstanceValue() (interface{}) {
	if obj.VariableValueV2Interval != nil {
		return *obj.VariableValueV2Interval
	}

	if obj.VariableValueV2Lucene != nil {
		return *obj.VariableValueV2Lucene
	}

	if obj.VariableValueV2MultiString != nil {
		return *obj.VariableValueV2MultiString
	}

	if obj.VariableValueV2Regex != nil {
		return *obj.VariableValueV2Regex
	}

	if obj.VariableValueV2SingleNumeric != nil {
		return *obj.VariableValueV2SingleNumeric
	}

	if obj.VariableValueV2SingleString != nil {
		return *obj.VariableValueV2SingleString
	}

	// all schemas are nil
	return nil
}

type NullableVariableValueV2 struct {
	value *VariableValueV2
	isSet bool
}

func (v NullableVariableValueV2) Get() *VariableValueV2 {
	return v.value
}

func (v *NullableVariableValueV2) Set(val *VariableValueV2) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableValueV2) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableValueV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableValueV2(val *VariableValueV2) *NullableVariableValueV2 {
	return &NullableVariableValueV2{value: val, isSet: true}
}

func (v NullableVariableValueV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableValueV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


