/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// VariableValueV2 - struct for VariableValueV2
type VariableValueV2 struct {
	VariableValueV2OneOf *VariableValueV2OneOf
	VariableValueV2OneOf1 *VariableValueV2OneOf1
	VariableValueV2OneOf2 *VariableValueV2OneOf2
	VariableValueV2OneOf3 *VariableValueV2OneOf3
	VariableValueV2OneOf4 *VariableValueV2OneOf4
	VariableValueV2OneOf5 *VariableValueV2OneOf5
}

// VariableValueV2OneOfAsVariableValueV2 is a convenience function that returns VariableValueV2OneOf wrapped in VariableValueV2
func VariableValueV2OneOfAsVariableValueV2(v *VariableValueV2OneOf) VariableValueV2 {
	return VariableValueV2{
		VariableValueV2OneOf: v,
	}
}

// VariableValueV2OneOf1AsVariableValueV2 is a convenience function that returns VariableValueV2OneOf1 wrapped in VariableValueV2
func VariableValueV2OneOf1AsVariableValueV2(v *VariableValueV2OneOf1) VariableValueV2 {
	return VariableValueV2{
		VariableValueV2OneOf1: v,
	}
}

// VariableValueV2OneOf2AsVariableValueV2 is a convenience function that returns VariableValueV2OneOf2 wrapped in VariableValueV2
func VariableValueV2OneOf2AsVariableValueV2(v *VariableValueV2OneOf2) VariableValueV2 {
	return VariableValueV2{
		VariableValueV2OneOf2: v,
	}
}

// VariableValueV2OneOf3AsVariableValueV2 is a convenience function that returns VariableValueV2OneOf3 wrapped in VariableValueV2
func VariableValueV2OneOf3AsVariableValueV2(v *VariableValueV2OneOf3) VariableValueV2 {
	return VariableValueV2{
		VariableValueV2OneOf3: v,
	}
}

// VariableValueV2OneOf4AsVariableValueV2 is a convenience function that returns VariableValueV2OneOf4 wrapped in VariableValueV2
func VariableValueV2OneOf4AsVariableValueV2(v *VariableValueV2OneOf4) VariableValueV2 {
	return VariableValueV2{
		VariableValueV2OneOf4: v,
	}
}

// VariableValueV2OneOf5AsVariableValueV2 is a convenience function that returns VariableValueV2OneOf5 wrapped in VariableValueV2
func VariableValueV2OneOf5AsVariableValueV2(v *VariableValueV2OneOf5) VariableValueV2 {
	return VariableValueV2{
		VariableValueV2OneOf5: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *VariableValueV2) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into VariableValueV2OneOf
	err = newStrictDecoder(data).Decode(&dst.VariableValueV2OneOf)
	if err == nil {
		jsonVariableValueV2OneOf, _ := json.Marshal(dst.VariableValueV2OneOf)
		if string(jsonVariableValueV2OneOf) == "{}" { // empty struct
			dst.VariableValueV2OneOf = nil
		} else {
			if err = validator.Validate(dst.VariableValueV2OneOf); err != nil {
				dst.VariableValueV2OneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableValueV2OneOf = nil
	}

	// try to unmarshal data into VariableValueV2OneOf1
	err = newStrictDecoder(data).Decode(&dst.VariableValueV2OneOf1)
	if err == nil {
		jsonVariableValueV2OneOf1, _ := json.Marshal(dst.VariableValueV2OneOf1)
		if string(jsonVariableValueV2OneOf1) == "{}" { // empty struct
			dst.VariableValueV2OneOf1 = nil
		} else {
			if err = validator.Validate(dst.VariableValueV2OneOf1); err != nil {
				dst.VariableValueV2OneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableValueV2OneOf1 = nil
	}

	// try to unmarshal data into VariableValueV2OneOf2
	err = newStrictDecoder(data).Decode(&dst.VariableValueV2OneOf2)
	if err == nil {
		jsonVariableValueV2OneOf2, _ := json.Marshal(dst.VariableValueV2OneOf2)
		if string(jsonVariableValueV2OneOf2) == "{}" { // empty struct
			dst.VariableValueV2OneOf2 = nil
		} else {
			if err = validator.Validate(dst.VariableValueV2OneOf2); err != nil {
				dst.VariableValueV2OneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableValueV2OneOf2 = nil
	}

	// try to unmarshal data into VariableValueV2OneOf3
	err = newStrictDecoder(data).Decode(&dst.VariableValueV2OneOf3)
	if err == nil {
		jsonVariableValueV2OneOf3, _ := json.Marshal(dst.VariableValueV2OneOf3)
		if string(jsonVariableValueV2OneOf3) == "{}" { // empty struct
			dst.VariableValueV2OneOf3 = nil
		} else {
			if err = validator.Validate(dst.VariableValueV2OneOf3); err != nil {
				dst.VariableValueV2OneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableValueV2OneOf3 = nil
	}

	// try to unmarshal data into VariableValueV2OneOf4
	err = newStrictDecoder(data).Decode(&dst.VariableValueV2OneOf4)
	if err == nil {
		jsonVariableValueV2OneOf4, _ := json.Marshal(dst.VariableValueV2OneOf4)
		if string(jsonVariableValueV2OneOf4) == "{}" { // empty struct
			dst.VariableValueV2OneOf4 = nil
		} else {
			if err = validator.Validate(dst.VariableValueV2OneOf4); err != nil {
				dst.VariableValueV2OneOf4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableValueV2OneOf4 = nil
	}

	// try to unmarshal data into VariableValueV2OneOf5
	err = newStrictDecoder(data).Decode(&dst.VariableValueV2OneOf5)
	if err == nil {
		jsonVariableValueV2OneOf5, _ := json.Marshal(dst.VariableValueV2OneOf5)
		if string(jsonVariableValueV2OneOf5) == "{}" { // empty struct
			dst.VariableValueV2OneOf5 = nil
		} else {
			if err = validator.Validate(dst.VariableValueV2OneOf5); err != nil {
				dst.VariableValueV2OneOf5 = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableValueV2OneOf5 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.VariableValueV2OneOf = nil
		dst.VariableValueV2OneOf1 = nil
		dst.VariableValueV2OneOf2 = nil
		dst.VariableValueV2OneOf3 = nil
		dst.VariableValueV2OneOf4 = nil
		dst.VariableValueV2OneOf5 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(VariableValueV2)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(VariableValueV2)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src VariableValueV2) MarshalJSON() ([]byte, error) {
	if src.VariableValueV2OneOf != nil {
		return json.Marshal(&src.VariableValueV2OneOf)
	}

	if src.VariableValueV2OneOf1 != nil {
		return json.Marshal(&src.VariableValueV2OneOf1)
	}

	if src.VariableValueV2OneOf2 != nil {
		return json.Marshal(&src.VariableValueV2OneOf2)
	}

	if src.VariableValueV2OneOf3 != nil {
		return json.Marshal(&src.VariableValueV2OneOf3)
	}

	if src.VariableValueV2OneOf4 != nil {
		return json.Marshal(&src.VariableValueV2OneOf4)
	}

	if src.VariableValueV2OneOf5 != nil {
		return json.Marshal(&src.VariableValueV2OneOf5)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *VariableValueV2) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.VariableValueV2OneOf != nil {
		return obj.VariableValueV2OneOf
	}

	if obj.VariableValueV2OneOf1 != nil {
		return obj.VariableValueV2OneOf1
	}

	if obj.VariableValueV2OneOf2 != nil {
		return obj.VariableValueV2OneOf2
	}

	if obj.VariableValueV2OneOf3 != nil {
		return obj.VariableValueV2OneOf3
	}

	if obj.VariableValueV2OneOf4 != nil {
		return obj.VariableValueV2OneOf4
	}

	if obj.VariableValueV2OneOf5 != nil {
		return obj.VariableValueV2OneOf5
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj VariableValueV2) GetActualInstanceValue() (interface{}) {
	if obj.VariableValueV2OneOf != nil {
		return *obj.VariableValueV2OneOf
	}

	if obj.VariableValueV2OneOf1 != nil {
		return *obj.VariableValueV2OneOf1
	}

	if obj.VariableValueV2OneOf2 != nil {
		return *obj.VariableValueV2OneOf2
	}

	if obj.VariableValueV2OneOf3 != nil {
		return *obj.VariableValueV2OneOf3
	}

	if obj.VariableValueV2OneOf4 != nil {
		return *obj.VariableValueV2OneOf4
	}

	if obj.VariableValueV2OneOf5 != nil {
		return *obj.VariableValueV2OneOf5
	}

	// all schemas are nil
	return nil
}

type NullableVariableValueV2 struct {
	value *VariableValueV2
	isSet bool
}

func (v NullableVariableValueV2) Get() *VariableValueV2 {
	return v.value
}

func (v *NullableVariableValueV2) Set(val *VariableValueV2) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableValueV2) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableValueV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableValueV2(val *VariableValueV2) *NullableVariableValueV2 {
	return &NullableVariableValueV2{value: val, isSet: true}
}

func (v NullableVariableValueV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableValueV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


