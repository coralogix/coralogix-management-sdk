/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// MultiStringValue - struct for MultiStringValue
type MultiStringValue struct {
	MultiStringValueAll *MultiStringValueAll
	MultiStringValueList *MultiStringValueList
}

// MultiStringValueAllAsMultiStringValue is a convenience function that returns MultiStringValueAll wrapped in MultiStringValue
func MultiStringValueAllAsMultiStringValue(v *MultiStringValueAll) MultiStringValue {
	return MultiStringValue{
		MultiStringValueAll: v,
	}
}

// MultiStringValueListAsMultiStringValue is a convenience function that returns MultiStringValueList wrapped in MultiStringValue
func MultiStringValueListAsMultiStringValue(v *MultiStringValueList) MultiStringValue {
	return MultiStringValue{
		MultiStringValueList: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MultiStringValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MultiStringValueAll
	err = newStrictDecoder(data).Decode(&dst.MultiStringValueAll)
	if err == nil {
		jsonMultiStringValueAll, _ := json.Marshal(dst.MultiStringValueAll)
		if string(jsonMultiStringValueAll) == "{}" { // empty struct
			dst.MultiStringValueAll = nil
		} else {
			if err = validator.Validate(dst.MultiStringValueAll); err != nil {
				dst.MultiStringValueAll = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultiStringValueAll = nil
	}

	// try to unmarshal data into MultiStringValueList
	err = newStrictDecoder(data).Decode(&dst.MultiStringValueList)
	if err == nil {
		jsonMultiStringValueList, _ := json.Marshal(dst.MultiStringValueList)
		if string(jsonMultiStringValueList) == "{}" { // empty struct
			dst.MultiStringValueList = nil
		} else {
			if err = validator.Validate(dst.MultiStringValueList); err != nil {
				dst.MultiStringValueList = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultiStringValueList = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MultiStringValueAll = nil
		dst.MultiStringValueList = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MultiStringValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MultiStringValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MultiStringValue) MarshalJSON() ([]byte, error) {
	if src.MultiStringValueAll != nil {
		return json.Marshal(&src.MultiStringValueAll)
	}

	if src.MultiStringValueList != nil {
		return json.Marshal(&src.MultiStringValueList)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MultiStringValue) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MultiStringValueAll != nil {
		return obj.MultiStringValueAll
	}

	if obj.MultiStringValueList != nil {
		return obj.MultiStringValueList
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj MultiStringValue) GetActualInstanceValue() (interface{}) {
	if obj.MultiStringValueAll != nil {
		return *obj.MultiStringValueAll
	}

	if obj.MultiStringValueList != nil {
		return *obj.MultiStringValueList
	}

	// all schemas are nil
	return nil
}

type NullableMultiStringValue struct {
	value *MultiStringValue
	isSet bool
}

func (v NullableMultiStringValue) Get() *MultiStringValue {
	return v.value
}

func (v *NullableMultiStringValue) Set(val *MultiStringValue) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiStringValue) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiStringValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiStringValue(val *MultiStringValue) *NullableMultiStringValue {
	return &NullableMultiStringValue{value: val, isSet: true}
}

func (v NullableMultiStringValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiStringValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


