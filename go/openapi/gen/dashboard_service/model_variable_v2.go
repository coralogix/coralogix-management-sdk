/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the VariableV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariableV2{}

// VariableV2 struct for VariableV2
type VariableV2 struct {
	Description *string `json:"description,omitempty"`
	DisplayFullRow *bool `json:"displayFullRow,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	DisplayType *VariableDisplayTypeV2 `json:"displayType,omitempty"`
	Name *string `json:"name,omitempty"`
	Source *VariableSourceV2 `json:"source,omitempty"`
	Value *VariableValueV2 `json:"value,omitempty"`
}

// NewVariableV2 instantiates a new VariableV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariableV2() *VariableV2 {
	this := VariableV2{}
	return &this
}

// NewVariableV2WithDefaults instantiates a new VariableV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableV2WithDefaults() *VariableV2 {
	this := VariableV2{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VariableV2) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableV2) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VariableV2) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VariableV2) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayFullRow returns the DisplayFullRow field value if set, zero value otherwise.
func (o *VariableV2) GetDisplayFullRow() bool {
	if o == nil || IsNil(o.DisplayFullRow) {
		var ret bool
		return ret
	}
	return *o.DisplayFullRow
}

// GetDisplayFullRowOk returns a tuple with the DisplayFullRow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableV2) GetDisplayFullRowOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayFullRow) {
		return nil, false
	}
	return o.DisplayFullRow, true
}

// HasDisplayFullRow returns a boolean if a field has been set.
func (o *VariableV2) HasDisplayFullRow() bool {
	if o != nil && !IsNil(o.DisplayFullRow) {
		return true
	}

	return false
}

// SetDisplayFullRow gets a reference to the given bool and assigns it to the DisplayFullRow field.
func (o *VariableV2) SetDisplayFullRow(v bool) {
	o.DisplayFullRow = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *VariableV2) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableV2) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *VariableV2) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *VariableV2) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDisplayType returns the DisplayType field value if set, zero value otherwise.
func (o *VariableV2) GetDisplayType() VariableDisplayTypeV2 {
	if o == nil || IsNil(o.DisplayType) {
		var ret VariableDisplayTypeV2
		return ret
	}
	return *o.DisplayType
}

// GetDisplayTypeOk returns a tuple with the DisplayType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableV2) GetDisplayTypeOk() (*VariableDisplayTypeV2, bool) {
	if o == nil || IsNil(o.DisplayType) {
		return nil, false
	}
	return o.DisplayType, true
}

// HasDisplayType returns a boolean if a field has been set.
func (o *VariableV2) HasDisplayType() bool {
	if o != nil && !IsNil(o.DisplayType) {
		return true
	}

	return false
}

// SetDisplayType gets a reference to the given VariableDisplayTypeV2 and assigns it to the DisplayType field.
func (o *VariableV2) SetDisplayType(v VariableDisplayTypeV2) {
	o.DisplayType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VariableV2) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableV2) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VariableV2) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VariableV2) SetName(v string) {
	o.Name = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *VariableV2) GetSource() VariableSourceV2 {
	if o == nil || IsNil(o.Source) {
		var ret VariableSourceV2
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableV2) GetSourceOk() (*VariableSourceV2, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *VariableV2) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given VariableSourceV2 and assigns it to the Source field.
func (o *VariableV2) SetSource(v VariableSourceV2) {
	o.Source = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *VariableV2) GetValue() VariableValueV2 {
	if o == nil || IsNil(o.Value) {
		var ret VariableValueV2
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableV2) GetValueOk() (*VariableValueV2, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *VariableV2) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given VariableValueV2 and assigns it to the Value field.
func (o *VariableV2) SetValue(v VariableValueV2) {
	o.Value = &v
}

func (o VariableV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariableV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayFullRow) {
		toSerialize["displayFullRow"] = o.DisplayFullRow
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.DisplayType) {
		toSerialize["displayType"] = o.DisplayType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableVariableV2 struct {
	value *VariableV2
	isSet bool
}

func (v NullableVariableV2) Get() *VariableV2 {
	return v.value
}

func (v *NullableVariableV2) Set(val *VariableV2) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableV2) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableV2(val *VariableV2) *NullableVariableV2 {
	return &NullableVariableV2{value: val, isSet: true}
}

func (v NullableVariableV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


