/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the WidgetDefinitionOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WidgetDefinitionOneOf1{}

// WidgetDefinitionOneOf1 struct for WidgetDefinitionOneOf1
type WidgetDefinitionOneOf1 struct {
	DataTable *DataTable `json:"dataTable,omitempty"`
}

// NewWidgetDefinitionOneOf1 instantiates a new WidgetDefinitionOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWidgetDefinitionOneOf1() *WidgetDefinitionOneOf1 {
	this := WidgetDefinitionOneOf1{}
	return &this
}

// NewWidgetDefinitionOneOf1WithDefaults instantiates a new WidgetDefinitionOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWidgetDefinitionOneOf1WithDefaults() *WidgetDefinitionOneOf1 {
	this := WidgetDefinitionOneOf1{}
	return &this
}

// GetDataTable returns the DataTable field value if set, zero value otherwise.
func (o *WidgetDefinitionOneOf1) GetDataTable() DataTable {
	if o == nil || IsNil(o.DataTable) {
		var ret DataTable
		return ret
	}
	return *o.DataTable
}

// GetDataTableOk returns a tuple with the DataTable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetDefinitionOneOf1) GetDataTableOk() (*DataTable, bool) {
	if o == nil || IsNil(o.DataTable) {
		return nil, false
	}
	return o.DataTable, true
}

// HasDataTable returns a boolean if a field has been set.
func (o *WidgetDefinitionOneOf1) HasDataTable() bool {
	if o != nil && !IsNil(o.DataTable) {
		return true
	}

	return false
}

// SetDataTable gets a reference to the given DataTable and assigns it to the DataTable field.
func (o *WidgetDefinitionOneOf1) SetDataTable(v DataTable) {
	o.DataTable = &v
}

func (o WidgetDefinitionOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WidgetDefinitionOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataTable) {
		toSerialize["dataTable"] = o.DataTable
	}
	return toSerialize, nil
}

type NullableWidgetDefinitionOneOf1 struct {
	value *WidgetDefinitionOneOf1
	isSet bool
}

func (v NullableWidgetDefinitionOneOf1) Get() *WidgetDefinitionOneOf1 {
	return v.value
}

func (v *NullableWidgetDefinitionOneOf1) Set(val *WidgetDefinitionOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetDefinitionOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetDefinitionOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetDefinitionOneOf1(val *WidgetDefinitionOneOf1) *NullableWidgetDefinitionOneOf1 {
	return &NullableWidgetDefinitionOneOf1{value: val, isSet: true}
}

func (v NullableWidgetDefinitionOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetDefinitionOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


