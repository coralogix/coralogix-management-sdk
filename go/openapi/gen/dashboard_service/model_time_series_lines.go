/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the TimeSeriesLines type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeSeriesLines{}

// TimeSeriesLines struct for TimeSeriesLines
type TimeSeriesLines struct {
	// Whether to render numeric value without abbreviation
	AllowAbbreviation *bool `json:"allowAbbreviation,omitempty"`
	CategoryFields []ObservationField `json:"categoryFields,omitempty"`
	// Applied color scheme for this query, one of the predefined values
	ColorScheme *string `json:"colorScheme,omitempty"`
	// Whether the line should remain connected instead of producing scattered points when null values are present in between
	ConnectNulls *bool `json:"connectNulls,omitempty"`
	// Custom unit (requires to have unit field as 'custom' to take effect)
	CustomUnit *string `json:"customUnit,omitempty"`
	// Number indicating the decimal precision of the numeric values, within range 0-15
	DecimalPrecision *int32 `json:"decimalPrecision,omitempty"`
	// Whether to ignore color scheme and derive colors from algorithm
	HashColors *bool `json:"hashColors,omitempty"`
	Legend *Legend `json:"legend,omitempty"`
	ScaleType *ScaleType `json:"scaleType,omitempty"`
	// Max count of the series per query
	SeriesCountLimit *string `json:"seriesCountLimit,omitempty"`
	// Custom template for the series name
	SeriesNameTemplate *string `json:"seriesNameTemplate,omitempty"`
	StackedLine *TimeSeriesLinesStackedLine `json:"stackedLine,omitempty"`
	TemporalField *ObservationField `json:"temporalField,omitempty"`
	Tooltip *TimeSeriesTooltip `json:"tooltip,omitempty"`
	Unit *CommonUnit `json:"unit,omitempty"`
	ValueFields []ObservationField `json:"valueFields,omitempty"`
	// Number indicating the upper band for y axis
	YAxisMax *float32 `json:"yAxisMax,omitempty"`
	// Number indicating the lower band for y axis
	YAxisMin *float32 `json:"yAxisMin,omitempty"`
}

// NewTimeSeriesLines instantiates a new TimeSeriesLines object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeSeriesLines() *TimeSeriesLines {
	this := TimeSeriesLines{}
	return &this
}

// NewTimeSeriesLinesWithDefaults instantiates a new TimeSeriesLines object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeSeriesLinesWithDefaults() *TimeSeriesLines {
	this := TimeSeriesLines{}
	return &this
}

// GetAllowAbbreviation returns the AllowAbbreviation field value if set, zero value otherwise.
func (o *TimeSeriesLines) GetAllowAbbreviation() bool {
	if o == nil || IsNil(o.AllowAbbreviation) {
		var ret bool
		return ret
	}
	return *o.AllowAbbreviation
}

// GetAllowAbbreviationOk returns a tuple with the AllowAbbreviation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesLines) GetAllowAbbreviationOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowAbbreviation) {
		return nil, false
	}
	return o.AllowAbbreviation, true
}

// HasAllowAbbreviation returns a boolean if a field has been set.
func (o *TimeSeriesLines) HasAllowAbbreviation() bool {
	if o != nil && !IsNil(o.AllowAbbreviation) {
		return true
	}

	return false
}

// SetAllowAbbreviation gets a reference to the given bool and assigns it to the AllowAbbreviation field.
func (o *TimeSeriesLines) SetAllowAbbreviation(v bool) {
	o.AllowAbbreviation = &v
}

// GetCategoryFields returns the CategoryFields field value if set, zero value otherwise.
func (o *TimeSeriesLines) GetCategoryFields() []ObservationField {
	if o == nil || IsNil(o.CategoryFields) {
		var ret []ObservationField
		return ret
	}
	return o.CategoryFields
}

// GetCategoryFieldsOk returns a tuple with the CategoryFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesLines) GetCategoryFieldsOk() ([]ObservationField, bool) {
	if o == nil || IsNil(o.CategoryFields) {
		return nil, false
	}
	return o.CategoryFields, true
}

// HasCategoryFields returns a boolean if a field has been set.
func (o *TimeSeriesLines) HasCategoryFields() bool {
	if o != nil && !IsNil(o.CategoryFields) {
		return true
	}

	return false
}

// SetCategoryFields gets a reference to the given []ObservationField and assigns it to the CategoryFields field.
func (o *TimeSeriesLines) SetCategoryFields(v []ObservationField) {
	o.CategoryFields = v
}

// GetColorScheme returns the ColorScheme field value if set, zero value otherwise.
func (o *TimeSeriesLines) GetColorScheme() string {
	if o == nil || IsNil(o.ColorScheme) {
		var ret string
		return ret
	}
	return *o.ColorScheme
}

// GetColorSchemeOk returns a tuple with the ColorScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesLines) GetColorSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.ColorScheme) {
		return nil, false
	}
	return o.ColorScheme, true
}

// HasColorScheme returns a boolean if a field has been set.
func (o *TimeSeriesLines) HasColorScheme() bool {
	if o != nil && !IsNil(o.ColorScheme) {
		return true
	}

	return false
}

// SetColorScheme gets a reference to the given string and assigns it to the ColorScheme field.
func (o *TimeSeriesLines) SetColorScheme(v string) {
	o.ColorScheme = &v
}

// GetConnectNulls returns the ConnectNulls field value if set, zero value otherwise.
func (o *TimeSeriesLines) GetConnectNulls() bool {
	if o == nil || IsNil(o.ConnectNulls) {
		var ret bool
		return ret
	}
	return *o.ConnectNulls
}

// GetConnectNullsOk returns a tuple with the ConnectNulls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesLines) GetConnectNullsOk() (*bool, bool) {
	if o == nil || IsNil(o.ConnectNulls) {
		return nil, false
	}
	return o.ConnectNulls, true
}

// HasConnectNulls returns a boolean if a field has been set.
func (o *TimeSeriesLines) HasConnectNulls() bool {
	if o != nil && !IsNil(o.ConnectNulls) {
		return true
	}

	return false
}

// SetConnectNulls gets a reference to the given bool and assigns it to the ConnectNulls field.
func (o *TimeSeriesLines) SetConnectNulls(v bool) {
	o.ConnectNulls = &v
}

// GetCustomUnit returns the CustomUnit field value if set, zero value otherwise.
func (o *TimeSeriesLines) GetCustomUnit() string {
	if o == nil || IsNil(o.CustomUnit) {
		var ret string
		return ret
	}
	return *o.CustomUnit
}

// GetCustomUnitOk returns a tuple with the CustomUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesLines) GetCustomUnitOk() (*string, bool) {
	if o == nil || IsNil(o.CustomUnit) {
		return nil, false
	}
	return o.CustomUnit, true
}

// HasCustomUnit returns a boolean if a field has been set.
func (o *TimeSeriesLines) HasCustomUnit() bool {
	if o != nil && !IsNil(o.CustomUnit) {
		return true
	}

	return false
}

// SetCustomUnit gets a reference to the given string and assigns it to the CustomUnit field.
func (o *TimeSeriesLines) SetCustomUnit(v string) {
	o.CustomUnit = &v
}

// GetDecimalPrecision returns the DecimalPrecision field value if set, zero value otherwise.
func (o *TimeSeriesLines) GetDecimalPrecision() int32 {
	if o == nil || IsNil(o.DecimalPrecision) {
		var ret int32
		return ret
	}
	return *o.DecimalPrecision
}

// GetDecimalPrecisionOk returns a tuple with the DecimalPrecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesLines) GetDecimalPrecisionOk() (*int32, bool) {
	if o == nil || IsNil(o.DecimalPrecision) {
		return nil, false
	}
	return o.DecimalPrecision, true
}

// HasDecimalPrecision returns a boolean if a field has been set.
func (o *TimeSeriesLines) HasDecimalPrecision() bool {
	if o != nil && !IsNil(o.DecimalPrecision) {
		return true
	}

	return false
}

// SetDecimalPrecision gets a reference to the given int32 and assigns it to the DecimalPrecision field.
func (o *TimeSeriesLines) SetDecimalPrecision(v int32) {
	o.DecimalPrecision = &v
}

// GetHashColors returns the HashColors field value if set, zero value otherwise.
func (o *TimeSeriesLines) GetHashColors() bool {
	if o == nil || IsNil(o.HashColors) {
		var ret bool
		return ret
	}
	return *o.HashColors
}

// GetHashColorsOk returns a tuple with the HashColors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesLines) GetHashColorsOk() (*bool, bool) {
	if o == nil || IsNil(o.HashColors) {
		return nil, false
	}
	return o.HashColors, true
}

// HasHashColors returns a boolean if a field has been set.
func (o *TimeSeriesLines) HasHashColors() bool {
	if o != nil && !IsNil(o.HashColors) {
		return true
	}

	return false
}

// SetHashColors gets a reference to the given bool and assigns it to the HashColors field.
func (o *TimeSeriesLines) SetHashColors(v bool) {
	o.HashColors = &v
}

// GetLegend returns the Legend field value if set, zero value otherwise.
func (o *TimeSeriesLines) GetLegend() Legend {
	if o == nil || IsNil(o.Legend) {
		var ret Legend
		return ret
	}
	return *o.Legend
}

// GetLegendOk returns a tuple with the Legend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesLines) GetLegendOk() (*Legend, bool) {
	if o == nil || IsNil(o.Legend) {
		return nil, false
	}
	return o.Legend, true
}

// HasLegend returns a boolean if a field has been set.
func (o *TimeSeriesLines) HasLegend() bool {
	if o != nil && !IsNil(o.Legend) {
		return true
	}

	return false
}

// SetLegend gets a reference to the given Legend and assigns it to the Legend field.
func (o *TimeSeriesLines) SetLegend(v Legend) {
	o.Legend = &v
}

// GetScaleType returns the ScaleType field value if set, zero value otherwise.
func (o *TimeSeriesLines) GetScaleType() ScaleType {
	if o == nil || IsNil(o.ScaleType) {
		var ret ScaleType
		return ret
	}
	return *o.ScaleType
}

// GetScaleTypeOk returns a tuple with the ScaleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesLines) GetScaleTypeOk() (*ScaleType, bool) {
	if o == nil || IsNil(o.ScaleType) {
		return nil, false
	}
	return o.ScaleType, true
}

// HasScaleType returns a boolean if a field has been set.
func (o *TimeSeriesLines) HasScaleType() bool {
	if o != nil && !IsNil(o.ScaleType) {
		return true
	}

	return false
}

// SetScaleType gets a reference to the given ScaleType and assigns it to the ScaleType field.
func (o *TimeSeriesLines) SetScaleType(v ScaleType) {
	o.ScaleType = &v
}

// GetSeriesCountLimit returns the SeriesCountLimit field value if set, zero value otherwise.
func (o *TimeSeriesLines) GetSeriesCountLimit() string {
	if o == nil || IsNil(o.SeriesCountLimit) {
		var ret string
		return ret
	}
	return *o.SeriesCountLimit
}

// GetSeriesCountLimitOk returns a tuple with the SeriesCountLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesLines) GetSeriesCountLimitOk() (*string, bool) {
	if o == nil || IsNil(o.SeriesCountLimit) {
		return nil, false
	}
	return o.SeriesCountLimit, true
}

// HasSeriesCountLimit returns a boolean if a field has been set.
func (o *TimeSeriesLines) HasSeriesCountLimit() bool {
	if o != nil && !IsNil(o.SeriesCountLimit) {
		return true
	}

	return false
}

// SetSeriesCountLimit gets a reference to the given string and assigns it to the SeriesCountLimit field.
func (o *TimeSeriesLines) SetSeriesCountLimit(v string) {
	o.SeriesCountLimit = &v
}

// GetSeriesNameTemplate returns the SeriesNameTemplate field value if set, zero value otherwise.
func (o *TimeSeriesLines) GetSeriesNameTemplate() string {
	if o == nil || IsNil(o.SeriesNameTemplate) {
		var ret string
		return ret
	}
	return *o.SeriesNameTemplate
}

// GetSeriesNameTemplateOk returns a tuple with the SeriesNameTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesLines) GetSeriesNameTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.SeriesNameTemplate) {
		return nil, false
	}
	return o.SeriesNameTemplate, true
}

// HasSeriesNameTemplate returns a boolean if a field has been set.
func (o *TimeSeriesLines) HasSeriesNameTemplate() bool {
	if o != nil && !IsNil(o.SeriesNameTemplate) {
		return true
	}

	return false
}

// SetSeriesNameTemplate gets a reference to the given string and assigns it to the SeriesNameTemplate field.
func (o *TimeSeriesLines) SetSeriesNameTemplate(v string) {
	o.SeriesNameTemplate = &v
}

// GetStackedLine returns the StackedLine field value if set, zero value otherwise.
func (o *TimeSeriesLines) GetStackedLine() TimeSeriesLinesStackedLine {
	if o == nil || IsNil(o.StackedLine) {
		var ret TimeSeriesLinesStackedLine
		return ret
	}
	return *o.StackedLine
}

// GetStackedLineOk returns a tuple with the StackedLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesLines) GetStackedLineOk() (*TimeSeriesLinesStackedLine, bool) {
	if o == nil || IsNil(o.StackedLine) {
		return nil, false
	}
	return o.StackedLine, true
}

// HasStackedLine returns a boolean if a field has been set.
func (o *TimeSeriesLines) HasStackedLine() bool {
	if o != nil && !IsNil(o.StackedLine) {
		return true
	}

	return false
}

// SetStackedLine gets a reference to the given TimeSeriesLinesStackedLine and assigns it to the StackedLine field.
func (o *TimeSeriesLines) SetStackedLine(v TimeSeriesLinesStackedLine) {
	o.StackedLine = &v
}

// GetTemporalField returns the TemporalField field value if set, zero value otherwise.
func (o *TimeSeriesLines) GetTemporalField() ObservationField {
	if o == nil || IsNil(o.TemporalField) {
		var ret ObservationField
		return ret
	}
	return *o.TemporalField
}

// GetTemporalFieldOk returns a tuple with the TemporalField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesLines) GetTemporalFieldOk() (*ObservationField, bool) {
	if o == nil || IsNil(o.TemporalField) {
		return nil, false
	}
	return o.TemporalField, true
}

// HasTemporalField returns a boolean if a field has been set.
func (o *TimeSeriesLines) HasTemporalField() bool {
	if o != nil && !IsNil(o.TemporalField) {
		return true
	}

	return false
}

// SetTemporalField gets a reference to the given ObservationField and assigns it to the TemporalField field.
func (o *TimeSeriesLines) SetTemporalField(v ObservationField) {
	o.TemporalField = &v
}

// GetTooltip returns the Tooltip field value if set, zero value otherwise.
func (o *TimeSeriesLines) GetTooltip() TimeSeriesTooltip {
	if o == nil || IsNil(o.Tooltip) {
		var ret TimeSeriesTooltip
		return ret
	}
	return *o.Tooltip
}

// GetTooltipOk returns a tuple with the Tooltip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesLines) GetTooltipOk() (*TimeSeriesTooltip, bool) {
	if o == nil || IsNil(o.Tooltip) {
		return nil, false
	}
	return o.Tooltip, true
}

// HasTooltip returns a boolean if a field has been set.
func (o *TimeSeriesLines) HasTooltip() bool {
	if o != nil && !IsNil(o.Tooltip) {
		return true
	}

	return false
}

// SetTooltip gets a reference to the given TimeSeriesTooltip and assigns it to the Tooltip field.
func (o *TimeSeriesLines) SetTooltip(v TimeSeriesTooltip) {
	o.Tooltip = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *TimeSeriesLines) GetUnit() CommonUnit {
	if o == nil || IsNil(o.Unit) {
		var ret CommonUnit
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesLines) GetUnitOk() (*CommonUnit, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *TimeSeriesLines) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given CommonUnit and assigns it to the Unit field.
func (o *TimeSeriesLines) SetUnit(v CommonUnit) {
	o.Unit = &v
}

// GetValueFields returns the ValueFields field value if set, zero value otherwise.
func (o *TimeSeriesLines) GetValueFields() []ObservationField {
	if o == nil || IsNil(o.ValueFields) {
		var ret []ObservationField
		return ret
	}
	return o.ValueFields
}

// GetValueFieldsOk returns a tuple with the ValueFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesLines) GetValueFieldsOk() ([]ObservationField, bool) {
	if o == nil || IsNil(o.ValueFields) {
		return nil, false
	}
	return o.ValueFields, true
}

// HasValueFields returns a boolean if a field has been set.
func (o *TimeSeriesLines) HasValueFields() bool {
	if o != nil && !IsNil(o.ValueFields) {
		return true
	}

	return false
}

// SetValueFields gets a reference to the given []ObservationField and assigns it to the ValueFields field.
func (o *TimeSeriesLines) SetValueFields(v []ObservationField) {
	o.ValueFields = v
}

// GetYAxisMax returns the YAxisMax field value if set, zero value otherwise.
func (o *TimeSeriesLines) GetYAxisMax() float32 {
	if o == nil || IsNil(o.YAxisMax) {
		var ret float32
		return ret
	}
	return *o.YAxisMax
}

// GetYAxisMaxOk returns a tuple with the YAxisMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesLines) GetYAxisMaxOk() (*float32, bool) {
	if o == nil || IsNil(o.YAxisMax) {
		return nil, false
	}
	return o.YAxisMax, true
}

// HasYAxisMax returns a boolean if a field has been set.
func (o *TimeSeriesLines) HasYAxisMax() bool {
	if o != nil && !IsNil(o.YAxisMax) {
		return true
	}

	return false
}

// SetYAxisMax gets a reference to the given float32 and assigns it to the YAxisMax field.
func (o *TimeSeriesLines) SetYAxisMax(v float32) {
	o.YAxisMax = &v
}

// GetYAxisMin returns the YAxisMin field value if set, zero value otherwise.
func (o *TimeSeriesLines) GetYAxisMin() float32 {
	if o == nil || IsNil(o.YAxisMin) {
		var ret float32
		return ret
	}
	return *o.YAxisMin
}

// GetYAxisMinOk returns a tuple with the YAxisMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesLines) GetYAxisMinOk() (*float32, bool) {
	if o == nil || IsNil(o.YAxisMin) {
		return nil, false
	}
	return o.YAxisMin, true
}

// HasYAxisMin returns a boolean if a field has been set.
func (o *TimeSeriesLines) HasYAxisMin() bool {
	if o != nil && !IsNil(o.YAxisMin) {
		return true
	}

	return false
}

// SetYAxisMin gets a reference to the given float32 and assigns it to the YAxisMin field.
func (o *TimeSeriesLines) SetYAxisMin(v float32) {
	o.YAxisMin = &v
}

func (o TimeSeriesLines) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeSeriesLines) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowAbbreviation) {
		toSerialize["allowAbbreviation"] = o.AllowAbbreviation
	}
	if !IsNil(o.CategoryFields) {
		toSerialize["categoryFields"] = o.CategoryFields
	}
	if !IsNil(o.ColorScheme) {
		toSerialize["colorScheme"] = o.ColorScheme
	}
	if !IsNil(o.ConnectNulls) {
		toSerialize["connectNulls"] = o.ConnectNulls
	}
	if !IsNil(o.CustomUnit) {
		toSerialize["customUnit"] = o.CustomUnit
	}
	if !IsNil(o.DecimalPrecision) {
		toSerialize["decimalPrecision"] = o.DecimalPrecision
	}
	if !IsNil(o.HashColors) {
		toSerialize["hashColors"] = o.HashColors
	}
	if !IsNil(o.Legend) {
		toSerialize["legend"] = o.Legend
	}
	if !IsNil(o.ScaleType) {
		toSerialize["scaleType"] = o.ScaleType
	}
	if !IsNil(o.SeriesCountLimit) {
		toSerialize["seriesCountLimit"] = o.SeriesCountLimit
	}
	if !IsNil(o.SeriesNameTemplate) {
		toSerialize["seriesNameTemplate"] = o.SeriesNameTemplate
	}
	if !IsNil(o.StackedLine) {
		toSerialize["stackedLine"] = o.StackedLine
	}
	if !IsNil(o.TemporalField) {
		toSerialize["temporalField"] = o.TemporalField
	}
	if !IsNil(o.Tooltip) {
		toSerialize["tooltip"] = o.Tooltip
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.ValueFields) {
		toSerialize["valueFields"] = o.ValueFields
	}
	if !IsNil(o.YAxisMax) {
		toSerialize["yAxisMax"] = o.YAxisMax
	}
	if !IsNil(o.YAxisMin) {
		toSerialize["yAxisMin"] = o.YAxisMin
	}
	return toSerialize, nil
}

type NullableTimeSeriesLines struct {
	value *TimeSeriesLines
	isSet bool
}

func (v NullableTimeSeriesLines) Get() *TimeSeriesLines {
	return v.value
}

func (v *NullableTimeSeriesLines) Set(val *TimeSeriesLines) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeSeriesLines) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeSeriesLines) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeSeriesLines(val *TimeSeriesLines) *NullableTimeSeriesLines {
	return &NullableTimeSeriesLines{value: val, isSet: true}
}

func (v NullableTimeSeriesLines) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeSeriesLines) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


