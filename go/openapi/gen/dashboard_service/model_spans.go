/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the Spans type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Spans{}

// Spans A spans variant of the query
type Spans struct {
	Aggregation []LogsAggregation `json:"aggregation,omitempty"`
	DataModeType *WidgetsCommonDataModeType `json:"dataModeType,omitempty"`
	Filters []SpansFilter `json:"filters,omitempty"`
	GroupBy []SpanObservationField `json:"groupBy,omitempty"`
	LuceneQuery *LuceneQuery `json:"luceneQuery,omitempty"`
}

// NewSpans instantiates a new Spans object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpans() *Spans {
	this := Spans{}
	return &this
}

// NewSpansWithDefaults instantiates a new Spans object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpansWithDefaults() *Spans {
	this := Spans{}
	return &this
}

// GetAggregation returns the Aggregation field value if set, zero value otherwise.
func (o *Spans) GetAggregation() []LogsAggregation {
	if o == nil || IsNil(o.Aggregation) {
		var ret []LogsAggregation
		return ret
	}
	return o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spans) GetAggregationOk() ([]LogsAggregation, bool) {
	if o == nil || IsNil(o.Aggregation) {
		return nil, false
	}
	return o.Aggregation, true
}

// HasAggregation returns a boolean if a field has been set.
func (o *Spans) HasAggregation() bool {
	if o != nil && !IsNil(o.Aggregation) {
		return true
	}

	return false
}

// SetAggregation gets a reference to the given []LogsAggregation and assigns it to the Aggregation field.
func (o *Spans) SetAggregation(v []LogsAggregation) {
	o.Aggregation = v
}

// GetDataModeType returns the DataModeType field value if set, zero value otherwise.
func (o *Spans) GetDataModeType() WidgetsCommonDataModeType {
	if o == nil || IsNil(o.DataModeType) {
		var ret WidgetsCommonDataModeType
		return ret
	}
	return *o.DataModeType
}

// GetDataModeTypeOk returns a tuple with the DataModeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spans) GetDataModeTypeOk() (*WidgetsCommonDataModeType, bool) {
	if o == nil || IsNil(o.DataModeType) {
		return nil, false
	}
	return o.DataModeType, true
}

// HasDataModeType returns a boolean if a field has been set.
func (o *Spans) HasDataModeType() bool {
	if o != nil && !IsNil(o.DataModeType) {
		return true
	}

	return false
}

// SetDataModeType gets a reference to the given WidgetsCommonDataModeType and assigns it to the DataModeType field.
func (o *Spans) SetDataModeType(v WidgetsCommonDataModeType) {
	o.DataModeType = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *Spans) GetFilters() []SpansFilter {
	if o == nil || IsNil(o.Filters) {
		var ret []SpansFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spans) GetFiltersOk() ([]SpansFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *Spans) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []SpansFilter and assigns it to the Filters field.
func (o *Spans) SetFilters(v []SpansFilter) {
	o.Filters = v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *Spans) GetGroupBy() []SpanObservationField {
	if o == nil || IsNil(o.GroupBy) {
		var ret []SpanObservationField
		return ret
	}
	return o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spans) GetGroupByOk() ([]SpanObservationField, bool) {
	if o == nil || IsNil(o.GroupBy) {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *Spans) HasGroupBy() bool {
	if o != nil && !IsNil(o.GroupBy) {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given []SpanObservationField and assigns it to the GroupBy field.
func (o *Spans) SetGroupBy(v []SpanObservationField) {
	o.GroupBy = v
}

// GetLuceneQuery returns the LuceneQuery field value if set, zero value otherwise.
func (o *Spans) GetLuceneQuery() LuceneQuery {
	if o == nil || IsNil(o.LuceneQuery) {
		var ret LuceneQuery
		return ret
	}
	return *o.LuceneQuery
}

// GetLuceneQueryOk returns a tuple with the LuceneQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spans) GetLuceneQueryOk() (*LuceneQuery, bool) {
	if o == nil || IsNil(o.LuceneQuery) {
		return nil, false
	}
	return o.LuceneQuery, true
}

// HasLuceneQuery returns a boolean if a field has been set.
func (o *Spans) HasLuceneQuery() bool {
	if o != nil && !IsNil(o.LuceneQuery) {
		return true
	}

	return false
}

// SetLuceneQuery gets a reference to the given LuceneQuery and assigns it to the LuceneQuery field.
func (o *Spans) SetLuceneQuery(v LuceneQuery) {
	o.LuceneQuery = &v
}

func (o Spans) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Spans) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aggregation) {
		toSerialize["aggregation"] = o.Aggregation
	}
	if !IsNil(o.DataModeType) {
		toSerialize["dataModeType"] = o.DataModeType
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.GroupBy) {
		toSerialize["groupBy"] = o.GroupBy
	}
	if !IsNil(o.LuceneQuery) {
		toSerialize["luceneQuery"] = o.LuceneQuery
	}
	return toSerialize, nil
}

type NullableSpans struct {
	value *Spans
	isSet bool
}

func (v NullableSpans) Get() *Spans {
	return v.value
}

func (v *NullableSpans) Set(val *Spans) {
	v.value = val
	v.isSet = true
}

func (v NullableSpans) IsSet() bool {
	return v.isSet
}

func (v *NullableSpans) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpans(val *Spans) *NullableSpans {
	return &NullableSpans{value: val, isSet: true}
}

func (v NullableSpans) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpans) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


