/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the ListValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListValue{}

// ListValue struct for ListValue
type ListValue struct {
	Values []SingleStringValue `json:"values,omitempty"`
}

// NewListValue instantiates a new ListValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListValue() *ListValue {
	this := ListValue{}
	return &this
}

// NewListValueWithDefaults instantiates a new ListValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListValueWithDefaults() *ListValue {
	this := ListValue{}
	return &this
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *ListValue) GetValues() []SingleStringValue {
	if o == nil || IsNil(o.Values) {
		var ret []SingleStringValue
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListValue) GetValuesOk() ([]SingleStringValue, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ListValue) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []SingleStringValue and assigns it to the Values field.
func (o *ListValue) SetValues(v []SingleStringValue) {
	o.Values = v
}

func (o ListValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableListValue struct {
	value *ListValue
	isSet bool
}

func (v NullableListValue) Get() *ListValue {
	return v.value
}

func (v *NullableListValue) Set(val *ListValue) {
	v.value = val
	v.isSet = true
}

func (v NullableListValue) IsSet() bool {
	return v.isSet
}

func (v *NullableListValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListValue(val *ListValue) *NullableListValue {
	return &NullableListValue{value: val, isSet: true}
}

func (v NullableListValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


