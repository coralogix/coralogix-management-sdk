/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the VisualizationTable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VisualizationTable{}

// VisualizationTable struct for VisualizationTable
type VisualizationTable struct {
	Table *Table `json:"table,omitempty"`
}

// NewVisualizationTable instantiates a new VisualizationTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisualizationTable() *VisualizationTable {
	this := VisualizationTable{}
	return &this
}

// NewVisualizationTableWithDefaults instantiates a new VisualizationTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisualizationTableWithDefaults() *VisualizationTable {
	this := VisualizationTable{}
	return &this
}

// GetTable returns the Table field value if set, zero value otherwise.
func (o *VisualizationTable) GetTable() Table {
	if o == nil || IsNil(o.Table) {
		var ret Table
		return ret
	}
	return *o.Table
}

// GetTableOk returns a tuple with the Table field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationTable) GetTableOk() (*Table, bool) {
	if o == nil || IsNil(o.Table) {
		return nil, false
	}
	return o.Table, true
}

// HasTable returns a boolean if a field has been set.
func (o *VisualizationTable) HasTable() bool {
	if o != nil && !IsNil(o.Table) {
		return true
	}

	return false
}

// SetTable gets a reference to the given Table and assigns it to the Table field.
func (o *VisualizationTable) SetTable(v Table) {
	o.Table = &v
}

func (o VisualizationTable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VisualizationTable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Table) {
		toSerialize["table"] = o.Table
	}
	return toSerialize, nil
}

type NullableVisualizationTable struct {
	value *VisualizationTable
	isSet bool
}

func (v NullableVisualizationTable) Get() *VisualizationTable {
	return v.value
}

func (v *NullableVisualizationTable) Set(val *VisualizationTable) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualizationTable) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualizationTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualizationTable(val *VisualizationTable) *NullableVisualizationTable {
	return &NullableVisualizationTable{value: val, isSet: true}
}

func (v NullableVisualizationTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualizationTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


