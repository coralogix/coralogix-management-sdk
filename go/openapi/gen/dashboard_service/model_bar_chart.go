/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the BarChart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BarChart{}

// BarChart BarChart represents the configuration of a vertical bar chart widget.
type BarChart struct {
	BarValueDisplay *WidgetsBarValueDisplay `json:"barValueDisplay,omitempty"`
	// Applied color scheme, one of the predefined values
	ColorScheme *string `json:"colorScheme,omitempty"`
	ColorsBy *ColorsBy `json:"colorsBy,omitempty"`
	// Custom unit (requires to have unit field set to custom to take effect)
	CustomUnit *string `json:"customUnit,omitempty"`
	DataModeType *WidgetsCommonDataModeType `json:"dataModeType,omitempty"`
	// Number indicating the decimal precision of the numeric values, within range 0-15
	Decimal *int32 `json:"decimal,omitempty"`
	// Whether to render numeric value without abbreviation
	DecimalPrecision *bool `json:"decimalPrecision,omitempty"`
	// Custom template name for a bar group, can contain variables
	GroupNameTemplate *string `json:"groupNameTemplate,omitempty"`
	// Whether to ignore color scheme and derive colors from algorithm
	HashColors *bool `json:"hashColors,omitempty"`
	Legend *Legend `json:"legend,omitempty"`
	// Maximum number of bars on a chart
	MaxBarsPerChart *int32 `json:"maxBarsPerChart,omitempty"`
	Query *BarChartQuery `json:"query,omitempty"`
	ScaleType *ScaleType `json:"scaleType,omitempty"`
	SortBy *SortByType `json:"sortBy,omitempty"`
	StackDefinition *BarChartStackDefinition `json:"stackDefinition,omitempty"`
	Unit *CommonUnit `json:"unit,omitempty"`
	XAxis *XAxis `json:"xAxis,omitempty"`
	// Number indicating the upper band for y axis
	YAxisMax *float32 `json:"yAxisMax,omitempty"`
	// Number indicating the lower band for y axis
	YAxisMin *float32 `json:"yAxisMin,omitempty"`
}

// NewBarChart instantiates a new BarChart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBarChart() *BarChart {
	this := BarChart{}
	return &this
}

// NewBarChartWithDefaults instantiates a new BarChart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBarChartWithDefaults() *BarChart {
	this := BarChart{}
	return &this
}

// GetBarValueDisplay returns the BarValueDisplay field value if set, zero value otherwise.
func (o *BarChart) GetBarValueDisplay() WidgetsBarValueDisplay {
	if o == nil || IsNil(o.BarValueDisplay) {
		var ret WidgetsBarValueDisplay
		return ret
	}
	return *o.BarValueDisplay
}

// GetBarValueDisplayOk returns a tuple with the BarValueDisplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BarChart) GetBarValueDisplayOk() (*WidgetsBarValueDisplay, bool) {
	if o == nil || IsNil(o.BarValueDisplay) {
		return nil, false
	}
	return o.BarValueDisplay, true
}

// HasBarValueDisplay returns a boolean if a field has been set.
func (o *BarChart) HasBarValueDisplay() bool {
	if o != nil && !IsNil(o.BarValueDisplay) {
		return true
	}

	return false
}

// SetBarValueDisplay gets a reference to the given WidgetsBarValueDisplay and assigns it to the BarValueDisplay field.
func (o *BarChart) SetBarValueDisplay(v WidgetsBarValueDisplay) {
	o.BarValueDisplay = &v
}

// GetColorScheme returns the ColorScheme field value if set, zero value otherwise.
func (o *BarChart) GetColorScheme() string {
	if o == nil || IsNil(o.ColorScheme) {
		var ret string
		return ret
	}
	return *o.ColorScheme
}

// GetColorSchemeOk returns a tuple with the ColorScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BarChart) GetColorSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.ColorScheme) {
		return nil, false
	}
	return o.ColorScheme, true
}

// HasColorScheme returns a boolean if a field has been set.
func (o *BarChart) HasColorScheme() bool {
	if o != nil && !IsNil(o.ColorScheme) {
		return true
	}

	return false
}

// SetColorScheme gets a reference to the given string and assigns it to the ColorScheme field.
func (o *BarChart) SetColorScheme(v string) {
	o.ColorScheme = &v
}

// GetColorsBy returns the ColorsBy field value if set, zero value otherwise.
func (o *BarChart) GetColorsBy() ColorsBy {
	if o == nil || IsNil(o.ColorsBy) {
		var ret ColorsBy
		return ret
	}
	return *o.ColorsBy
}

// GetColorsByOk returns a tuple with the ColorsBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BarChart) GetColorsByOk() (*ColorsBy, bool) {
	if o == nil || IsNil(o.ColorsBy) {
		return nil, false
	}
	return o.ColorsBy, true
}

// HasColorsBy returns a boolean if a field has been set.
func (o *BarChart) HasColorsBy() bool {
	if o != nil && !IsNil(o.ColorsBy) {
		return true
	}

	return false
}

// SetColorsBy gets a reference to the given ColorsBy and assigns it to the ColorsBy field.
func (o *BarChart) SetColorsBy(v ColorsBy) {
	o.ColorsBy = &v
}

// GetCustomUnit returns the CustomUnit field value if set, zero value otherwise.
func (o *BarChart) GetCustomUnit() string {
	if o == nil || IsNil(o.CustomUnit) {
		var ret string
		return ret
	}
	return *o.CustomUnit
}

// GetCustomUnitOk returns a tuple with the CustomUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BarChart) GetCustomUnitOk() (*string, bool) {
	if o == nil || IsNil(o.CustomUnit) {
		return nil, false
	}
	return o.CustomUnit, true
}

// HasCustomUnit returns a boolean if a field has been set.
func (o *BarChart) HasCustomUnit() bool {
	if o != nil && !IsNil(o.CustomUnit) {
		return true
	}

	return false
}

// SetCustomUnit gets a reference to the given string and assigns it to the CustomUnit field.
func (o *BarChart) SetCustomUnit(v string) {
	o.CustomUnit = &v
}

// GetDataModeType returns the DataModeType field value if set, zero value otherwise.
func (o *BarChart) GetDataModeType() WidgetsCommonDataModeType {
	if o == nil || IsNil(o.DataModeType) {
		var ret WidgetsCommonDataModeType
		return ret
	}
	return *o.DataModeType
}

// GetDataModeTypeOk returns a tuple with the DataModeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BarChart) GetDataModeTypeOk() (*WidgetsCommonDataModeType, bool) {
	if o == nil || IsNil(o.DataModeType) {
		return nil, false
	}
	return o.DataModeType, true
}

// HasDataModeType returns a boolean if a field has been set.
func (o *BarChart) HasDataModeType() bool {
	if o != nil && !IsNil(o.DataModeType) {
		return true
	}

	return false
}

// SetDataModeType gets a reference to the given WidgetsCommonDataModeType and assigns it to the DataModeType field.
func (o *BarChart) SetDataModeType(v WidgetsCommonDataModeType) {
	o.DataModeType = &v
}

// GetDecimal returns the Decimal field value if set, zero value otherwise.
func (o *BarChart) GetDecimal() int32 {
	if o == nil || IsNil(o.Decimal) {
		var ret int32
		return ret
	}
	return *o.Decimal
}

// GetDecimalOk returns a tuple with the Decimal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BarChart) GetDecimalOk() (*int32, bool) {
	if o == nil || IsNil(o.Decimal) {
		return nil, false
	}
	return o.Decimal, true
}

// HasDecimal returns a boolean if a field has been set.
func (o *BarChart) HasDecimal() bool {
	if o != nil && !IsNil(o.Decimal) {
		return true
	}

	return false
}

// SetDecimal gets a reference to the given int32 and assigns it to the Decimal field.
func (o *BarChart) SetDecimal(v int32) {
	o.Decimal = &v
}

// GetDecimalPrecision returns the DecimalPrecision field value if set, zero value otherwise.
func (o *BarChart) GetDecimalPrecision() bool {
	if o == nil || IsNil(o.DecimalPrecision) {
		var ret bool
		return ret
	}
	return *o.DecimalPrecision
}

// GetDecimalPrecisionOk returns a tuple with the DecimalPrecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BarChart) GetDecimalPrecisionOk() (*bool, bool) {
	if o == nil || IsNil(o.DecimalPrecision) {
		return nil, false
	}
	return o.DecimalPrecision, true
}

// HasDecimalPrecision returns a boolean if a field has been set.
func (o *BarChart) HasDecimalPrecision() bool {
	if o != nil && !IsNil(o.DecimalPrecision) {
		return true
	}

	return false
}

// SetDecimalPrecision gets a reference to the given bool and assigns it to the DecimalPrecision field.
func (o *BarChart) SetDecimalPrecision(v bool) {
	o.DecimalPrecision = &v
}

// GetGroupNameTemplate returns the GroupNameTemplate field value if set, zero value otherwise.
func (o *BarChart) GetGroupNameTemplate() string {
	if o == nil || IsNil(o.GroupNameTemplate) {
		var ret string
		return ret
	}
	return *o.GroupNameTemplate
}

// GetGroupNameTemplateOk returns a tuple with the GroupNameTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BarChart) GetGroupNameTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.GroupNameTemplate) {
		return nil, false
	}
	return o.GroupNameTemplate, true
}

// HasGroupNameTemplate returns a boolean if a field has been set.
func (o *BarChart) HasGroupNameTemplate() bool {
	if o != nil && !IsNil(o.GroupNameTemplate) {
		return true
	}

	return false
}

// SetGroupNameTemplate gets a reference to the given string and assigns it to the GroupNameTemplate field.
func (o *BarChart) SetGroupNameTemplate(v string) {
	o.GroupNameTemplate = &v
}

// GetHashColors returns the HashColors field value if set, zero value otherwise.
func (o *BarChart) GetHashColors() bool {
	if o == nil || IsNil(o.HashColors) {
		var ret bool
		return ret
	}
	return *o.HashColors
}

// GetHashColorsOk returns a tuple with the HashColors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BarChart) GetHashColorsOk() (*bool, bool) {
	if o == nil || IsNil(o.HashColors) {
		return nil, false
	}
	return o.HashColors, true
}

// HasHashColors returns a boolean if a field has been set.
func (o *BarChart) HasHashColors() bool {
	if o != nil && !IsNil(o.HashColors) {
		return true
	}

	return false
}

// SetHashColors gets a reference to the given bool and assigns it to the HashColors field.
func (o *BarChart) SetHashColors(v bool) {
	o.HashColors = &v
}

// GetLegend returns the Legend field value if set, zero value otherwise.
func (o *BarChart) GetLegend() Legend {
	if o == nil || IsNil(o.Legend) {
		var ret Legend
		return ret
	}
	return *o.Legend
}

// GetLegendOk returns a tuple with the Legend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BarChart) GetLegendOk() (*Legend, bool) {
	if o == nil || IsNil(o.Legend) {
		return nil, false
	}
	return o.Legend, true
}

// HasLegend returns a boolean if a field has been set.
func (o *BarChart) HasLegend() bool {
	if o != nil && !IsNil(o.Legend) {
		return true
	}

	return false
}

// SetLegend gets a reference to the given Legend and assigns it to the Legend field.
func (o *BarChart) SetLegend(v Legend) {
	o.Legend = &v
}

// GetMaxBarsPerChart returns the MaxBarsPerChart field value if set, zero value otherwise.
func (o *BarChart) GetMaxBarsPerChart() int32 {
	if o == nil || IsNil(o.MaxBarsPerChart) {
		var ret int32
		return ret
	}
	return *o.MaxBarsPerChart
}

// GetMaxBarsPerChartOk returns a tuple with the MaxBarsPerChart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BarChart) GetMaxBarsPerChartOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxBarsPerChart) {
		return nil, false
	}
	return o.MaxBarsPerChart, true
}

// HasMaxBarsPerChart returns a boolean if a field has been set.
func (o *BarChart) HasMaxBarsPerChart() bool {
	if o != nil && !IsNil(o.MaxBarsPerChart) {
		return true
	}

	return false
}

// SetMaxBarsPerChart gets a reference to the given int32 and assigns it to the MaxBarsPerChart field.
func (o *BarChart) SetMaxBarsPerChart(v int32) {
	o.MaxBarsPerChart = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *BarChart) GetQuery() BarChartQuery {
	if o == nil || IsNil(o.Query) {
		var ret BarChartQuery
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BarChart) GetQueryOk() (*BarChartQuery, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *BarChart) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given BarChartQuery and assigns it to the Query field.
func (o *BarChart) SetQuery(v BarChartQuery) {
	o.Query = &v
}

// GetScaleType returns the ScaleType field value if set, zero value otherwise.
func (o *BarChart) GetScaleType() ScaleType {
	if o == nil || IsNil(o.ScaleType) {
		var ret ScaleType
		return ret
	}
	return *o.ScaleType
}

// GetScaleTypeOk returns a tuple with the ScaleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BarChart) GetScaleTypeOk() (*ScaleType, bool) {
	if o == nil || IsNil(o.ScaleType) {
		return nil, false
	}
	return o.ScaleType, true
}

// HasScaleType returns a boolean if a field has been set.
func (o *BarChart) HasScaleType() bool {
	if o != nil && !IsNil(o.ScaleType) {
		return true
	}

	return false
}

// SetScaleType gets a reference to the given ScaleType and assigns it to the ScaleType field.
func (o *BarChart) SetScaleType(v ScaleType) {
	o.ScaleType = &v
}

// GetSortBy returns the SortBy field value if set, zero value otherwise.
func (o *BarChart) GetSortBy() SortByType {
	if o == nil || IsNil(o.SortBy) {
		var ret SortByType
		return ret
	}
	return *o.SortBy
}

// GetSortByOk returns a tuple with the SortBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BarChart) GetSortByOk() (*SortByType, bool) {
	if o == nil || IsNil(o.SortBy) {
		return nil, false
	}
	return o.SortBy, true
}

// HasSortBy returns a boolean if a field has been set.
func (o *BarChart) HasSortBy() bool {
	if o != nil && !IsNil(o.SortBy) {
		return true
	}

	return false
}

// SetSortBy gets a reference to the given SortByType and assigns it to the SortBy field.
func (o *BarChart) SetSortBy(v SortByType) {
	o.SortBy = &v
}

// GetStackDefinition returns the StackDefinition field value if set, zero value otherwise.
func (o *BarChart) GetStackDefinition() BarChartStackDefinition {
	if o == nil || IsNil(o.StackDefinition) {
		var ret BarChartStackDefinition
		return ret
	}
	return *o.StackDefinition
}

// GetStackDefinitionOk returns a tuple with the StackDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BarChart) GetStackDefinitionOk() (*BarChartStackDefinition, bool) {
	if o == nil || IsNil(o.StackDefinition) {
		return nil, false
	}
	return o.StackDefinition, true
}

// HasStackDefinition returns a boolean if a field has been set.
func (o *BarChart) HasStackDefinition() bool {
	if o != nil && !IsNil(o.StackDefinition) {
		return true
	}

	return false
}

// SetStackDefinition gets a reference to the given BarChartStackDefinition and assigns it to the StackDefinition field.
func (o *BarChart) SetStackDefinition(v BarChartStackDefinition) {
	o.StackDefinition = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *BarChart) GetUnit() CommonUnit {
	if o == nil || IsNil(o.Unit) {
		var ret CommonUnit
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BarChart) GetUnitOk() (*CommonUnit, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *BarChart) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given CommonUnit and assigns it to the Unit field.
func (o *BarChart) SetUnit(v CommonUnit) {
	o.Unit = &v
}

// GetXAxis returns the XAxis field value if set, zero value otherwise.
func (o *BarChart) GetXAxis() XAxis {
	if o == nil || IsNil(o.XAxis) {
		var ret XAxis
		return ret
	}
	return *o.XAxis
}

// GetXAxisOk returns a tuple with the XAxis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BarChart) GetXAxisOk() (*XAxis, bool) {
	if o == nil || IsNil(o.XAxis) {
		return nil, false
	}
	return o.XAxis, true
}

// HasXAxis returns a boolean if a field has been set.
func (o *BarChart) HasXAxis() bool {
	if o != nil && !IsNil(o.XAxis) {
		return true
	}

	return false
}

// SetXAxis gets a reference to the given XAxis and assigns it to the XAxis field.
func (o *BarChart) SetXAxis(v XAxis) {
	o.XAxis = &v
}

// GetYAxisMax returns the YAxisMax field value if set, zero value otherwise.
func (o *BarChart) GetYAxisMax() float32 {
	if o == nil || IsNil(o.YAxisMax) {
		var ret float32
		return ret
	}
	return *o.YAxisMax
}

// GetYAxisMaxOk returns a tuple with the YAxisMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BarChart) GetYAxisMaxOk() (*float32, bool) {
	if o == nil || IsNil(o.YAxisMax) {
		return nil, false
	}
	return o.YAxisMax, true
}

// HasYAxisMax returns a boolean if a field has been set.
func (o *BarChart) HasYAxisMax() bool {
	if o != nil && !IsNil(o.YAxisMax) {
		return true
	}

	return false
}

// SetYAxisMax gets a reference to the given float32 and assigns it to the YAxisMax field.
func (o *BarChart) SetYAxisMax(v float32) {
	o.YAxisMax = &v
}

// GetYAxisMin returns the YAxisMin field value if set, zero value otherwise.
func (o *BarChart) GetYAxisMin() float32 {
	if o == nil || IsNil(o.YAxisMin) {
		var ret float32
		return ret
	}
	return *o.YAxisMin
}

// GetYAxisMinOk returns a tuple with the YAxisMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BarChart) GetYAxisMinOk() (*float32, bool) {
	if o == nil || IsNil(o.YAxisMin) {
		return nil, false
	}
	return o.YAxisMin, true
}

// HasYAxisMin returns a boolean if a field has been set.
func (o *BarChart) HasYAxisMin() bool {
	if o != nil && !IsNil(o.YAxisMin) {
		return true
	}

	return false
}

// SetYAxisMin gets a reference to the given float32 and assigns it to the YAxisMin field.
func (o *BarChart) SetYAxisMin(v float32) {
	o.YAxisMin = &v
}

func (o BarChart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BarChart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BarValueDisplay) {
		toSerialize["barValueDisplay"] = o.BarValueDisplay
	}
	if !IsNil(o.ColorScheme) {
		toSerialize["colorScheme"] = o.ColorScheme
	}
	if !IsNil(o.ColorsBy) {
		toSerialize["colorsBy"] = o.ColorsBy
	}
	if !IsNil(o.CustomUnit) {
		toSerialize["customUnit"] = o.CustomUnit
	}
	if !IsNil(o.DataModeType) {
		toSerialize["dataModeType"] = o.DataModeType
	}
	if !IsNil(o.Decimal) {
		toSerialize["decimal"] = o.Decimal
	}
	if !IsNil(o.DecimalPrecision) {
		toSerialize["decimalPrecision"] = o.DecimalPrecision
	}
	if !IsNil(o.GroupNameTemplate) {
		toSerialize["groupNameTemplate"] = o.GroupNameTemplate
	}
	if !IsNil(o.HashColors) {
		toSerialize["hashColors"] = o.HashColors
	}
	if !IsNil(o.Legend) {
		toSerialize["legend"] = o.Legend
	}
	if !IsNil(o.MaxBarsPerChart) {
		toSerialize["maxBarsPerChart"] = o.MaxBarsPerChart
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.ScaleType) {
		toSerialize["scaleType"] = o.ScaleType
	}
	if !IsNil(o.SortBy) {
		toSerialize["sortBy"] = o.SortBy
	}
	if !IsNil(o.StackDefinition) {
		toSerialize["stackDefinition"] = o.StackDefinition
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.XAxis) {
		toSerialize["xAxis"] = o.XAxis
	}
	if !IsNil(o.YAxisMax) {
		toSerialize["yAxisMax"] = o.YAxisMax
	}
	if !IsNil(o.YAxisMin) {
		toSerialize["yAxisMin"] = o.YAxisMin
	}
	return toSerialize, nil
}

type NullableBarChart struct {
	value *BarChart
	isSet bool
}

func (v NullableBarChart) Get() *BarChart {
	return v.value
}

func (v *NullableBarChart) Set(val *BarChart) {
	v.value = val
	v.isSet = true
}

func (v NullableBarChart) IsSet() bool {
	return v.isSet
}

func (v *NullableBarChart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBarChart(val *BarChart) *NullableBarChart {
	return &NullableBarChart{value: val, isSet: true}
}

func (v NullableBarChart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBarChart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


