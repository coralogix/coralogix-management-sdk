/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// VariableSourceV2QuerySource - struct for VariableSourceV2QuerySource
type VariableSourceV2QuerySource struct {
	VariableSourceV2QuerySourceOneOf *VariableSourceV2QuerySourceOneOf
	VariableSourceV2QuerySourceOneOf1 *VariableSourceV2QuerySourceOneOf1
	VariableSourceV2QuerySourceOneOf2 *VariableSourceV2QuerySourceOneOf2
	VariableSourceV2QuerySourceOneOf3 *VariableSourceV2QuerySourceOneOf3
}

// VariableSourceV2QuerySourceOneOfAsVariableSourceV2QuerySource is a convenience function that returns VariableSourceV2QuerySourceOneOf wrapped in VariableSourceV2QuerySource
func VariableSourceV2QuerySourceOneOfAsVariableSourceV2QuerySource(v *VariableSourceV2QuerySourceOneOf) VariableSourceV2QuerySource {
	return VariableSourceV2QuerySource{
		VariableSourceV2QuerySourceOneOf: v,
	}
}

// VariableSourceV2QuerySourceOneOf1AsVariableSourceV2QuerySource is a convenience function that returns VariableSourceV2QuerySourceOneOf1 wrapped in VariableSourceV2QuerySource
func VariableSourceV2QuerySourceOneOf1AsVariableSourceV2QuerySource(v *VariableSourceV2QuerySourceOneOf1) VariableSourceV2QuerySource {
	return VariableSourceV2QuerySource{
		VariableSourceV2QuerySourceOneOf1: v,
	}
}

// VariableSourceV2QuerySourceOneOf2AsVariableSourceV2QuerySource is a convenience function that returns VariableSourceV2QuerySourceOneOf2 wrapped in VariableSourceV2QuerySource
func VariableSourceV2QuerySourceOneOf2AsVariableSourceV2QuerySource(v *VariableSourceV2QuerySourceOneOf2) VariableSourceV2QuerySource {
	return VariableSourceV2QuerySource{
		VariableSourceV2QuerySourceOneOf2: v,
	}
}

// VariableSourceV2QuerySourceOneOf3AsVariableSourceV2QuerySource is a convenience function that returns VariableSourceV2QuerySourceOneOf3 wrapped in VariableSourceV2QuerySource
func VariableSourceV2QuerySourceOneOf3AsVariableSourceV2QuerySource(v *VariableSourceV2QuerySourceOneOf3) VariableSourceV2QuerySource {
	return VariableSourceV2QuerySource{
		VariableSourceV2QuerySourceOneOf3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *VariableSourceV2QuerySource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into VariableSourceV2QuerySourceOneOf
	err = newStrictDecoder(data).Decode(&dst.VariableSourceV2QuerySourceOneOf)
	if err == nil {
		jsonVariableSourceV2QuerySourceOneOf, _ := json.Marshal(dst.VariableSourceV2QuerySourceOneOf)
		if string(jsonVariableSourceV2QuerySourceOneOf) == "{}" { // empty struct
			dst.VariableSourceV2QuerySourceOneOf = nil
		} else {
			if err = validator.Validate(dst.VariableSourceV2QuerySourceOneOf); err != nil {
				dst.VariableSourceV2QuerySourceOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableSourceV2QuerySourceOneOf = nil
	}

	// try to unmarshal data into VariableSourceV2QuerySourceOneOf1
	err = newStrictDecoder(data).Decode(&dst.VariableSourceV2QuerySourceOneOf1)
	if err == nil {
		jsonVariableSourceV2QuerySourceOneOf1, _ := json.Marshal(dst.VariableSourceV2QuerySourceOneOf1)
		if string(jsonVariableSourceV2QuerySourceOneOf1) == "{}" { // empty struct
			dst.VariableSourceV2QuerySourceOneOf1 = nil
		} else {
			if err = validator.Validate(dst.VariableSourceV2QuerySourceOneOf1); err != nil {
				dst.VariableSourceV2QuerySourceOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableSourceV2QuerySourceOneOf1 = nil
	}

	// try to unmarshal data into VariableSourceV2QuerySourceOneOf2
	err = newStrictDecoder(data).Decode(&dst.VariableSourceV2QuerySourceOneOf2)
	if err == nil {
		jsonVariableSourceV2QuerySourceOneOf2, _ := json.Marshal(dst.VariableSourceV2QuerySourceOneOf2)
		if string(jsonVariableSourceV2QuerySourceOneOf2) == "{}" { // empty struct
			dst.VariableSourceV2QuerySourceOneOf2 = nil
		} else {
			if err = validator.Validate(dst.VariableSourceV2QuerySourceOneOf2); err != nil {
				dst.VariableSourceV2QuerySourceOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableSourceV2QuerySourceOneOf2 = nil
	}

	// try to unmarshal data into VariableSourceV2QuerySourceOneOf3
	err = newStrictDecoder(data).Decode(&dst.VariableSourceV2QuerySourceOneOf3)
	if err == nil {
		jsonVariableSourceV2QuerySourceOneOf3, _ := json.Marshal(dst.VariableSourceV2QuerySourceOneOf3)
		if string(jsonVariableSourceV2QuerySourceOneOf3) == "{}" { // empty struct
			dst.VariableSourceV2QuerySourceOneOf3 = nil
		} else {
			if err = validator.Validate(dst.VariableSourceV2QuerySourceOneOf3); err != nil {
				dst.VariableSourceV2QuerySourceOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableSourceV2QuerySourceOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.VariableSourceV2QuerySourceOneOf = nil
		dst.VariableSourceV2QuerySourceOneOf1 = nil
		dst.VariableSourceV2QuerySourceOneOf2 = nil
		dst.VariableSourceV2QuerySourceOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(VariableSourceV2QuerySource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(VariableSourceV2QuerySource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src VariableSourceV2QuerySource) MarshalJSON() ([]byte, error) {
	if src.VariableSourceV2QuerySourceOneOf != nil {
		return json.Marshal(&src.VariableSourceV2QuerySourceOneOf)
	}

	if src.VariableSourceV2QuerySourceOneOf1 != nil {
		return json.Marshal(&src.VariableSourceV2QuerySourceOneOf1)
	}

	if src.VariableSourceV2QuerySourceOneOf2 != nil {
		return json.Marshal(&src.VariableSourceV2QuerySourceOneOf2)
	}

	if src.VariableSourceV2QuerySourceOneOf3 != nil {
		return json.Marshal(&src.VariableSourceV2QuerySourceOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *VariableSourceV2QuerySource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.VariableSourceV2QuerySourceOneOf != nil {
		return obj.VariableSourceV2QuerySourceOneOf
	}

	if obj.VariableSourceV2QuerySourceOneOf1 != nil {
		return obj.VariableSourceV2QuerySourceOneOf1
	}

	if obj.VariableSourceV2QuerySourceOneOf2 != nil {
		return obj.VariableSourceV2QuerySourceOneOf2
	}

	if obj.VariableSourceV2QuerySourceOneOf3 != nil {
		return obj.VariableSourceV2QuerySourceOneOf3
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj VariableSourceV2QuerySource) GetActualInstanceValue() (interface{}) {
	if obj.VariableSourceV2QuerySourceOneOf != nil {
		return *obj.VariableSourceV2QuerySourceOneOf
	}

	if obj.VariableSourceV2QuerySourceOneOf1 != nil {
		return *obj.VariableSourceV2QuerySourceOneOf1
	}

	if obj.VariableSourceV2QuerySourceOneOf2 != nil {
		return *obj.VariableSourceV2QuerySourceOneOf2
	}

	if obj.VariableSourceV2QuerySourceOneOf3 != nil {
		return *obj.VariableSourceV2QuerySourceOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableVariableSourceV2QuerySource struct {
	value *VariableSourceV2QuerySource
	isSet bool
}

func (v NullableVariableSourceV2QuerySource) Get() *VariableSourceV2QuerySource {
	return v.value
}

func (v *NullableVariableSourceV2QuerySource) Set(val *VariableSourceV2QuerySource) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableSourceV2QuerySource) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableSourceV2QuerySource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableSourceV2QuerySource(val *VariableSourceV2QuerySource) *NullableVariableSourceV2QuerySource {
	return &NullableVariableSourceV2QuerySource{value: val, isSet: true}
}

func (v NullableVariableSourceV2QuerySource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableSourceV2QuerySource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


