/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the LineChartLogsQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LineChartLogsQuery{}

// LineChartLogsQuery struct for LineChartLogsQuery
type LineChartLogsQuery struct {
	Aggregations []LogsAggregation `json:"aggregations,omitempty"`
	Filters []FilterLogsFilter `json:"filters,omitempty"`
	GroupBy []string `json:"groupBy,omitempty"`
	GroupBys []ObservationField `json:"groupBys,omitempty"`
	LuceneQuery *LuceneQuery `json:"luceneQuery,omitempty"`
	TimeFrame *TimeFrameSelect `json:"timeFrame,omitempty"`
}

// NewLineChartLogsQuery instantiates a new LineChartLogsQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLineChartLogsQuery() *LineChartLogsQuery {
	this := LineChartLogsQuery{}
	return &this
}

// NewLineChartLogsQueryWithDefaults instantiates a new LineChartLogsQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLineChartLogsQueryWithDefaults() *LineChartLogsQuery {
	this := LineChartLogsQuery{}
	return &this
}

// GetAggregations returns the Aggregations field value if set, zero value otherwise.
func (o *LineChartLogsQuery) GetAggregations() []LogsAggregation {
	if o == nil || IsNil(o.Aggregations) {
		var ret []LogsAggregation
		return ret
	}
	return o.Aggregations
}

// GetAggregationsOk returns a tuple with the Aggregations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineChartLogsQuery) GetAggregationsOk() ([]LogsAggregation, bool) {
	if o == nil || IsNil(o.Aggregations) {
		return nil, false
	}
	return o.Aggregations, true
}

// HasAggregations returns a boolean if a field has been set.
func (o *LineChartLogsQuery) HasAggregations() bool {
	if o != nil && !IsNil(o.Aggregations) {
		return true
	}

	return false
}

// SetAggregations gets a reference to the given []LogsAggregation and assigns it to the Aggregations field.
func (o *LineChartLogsQuery) SetAggregations(v []LogsAggregation) {
	o.Aggregations = v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *LineChartLogsQuery) GetFilters() []FilterLogsFilter {
	if o == nil || IsNil(o.Filters) {
		var ret []FilterLogsFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineChartLogsQuery) GetFiltersOk() ([]FilterLogsFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *LineChartLogsQuery) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []FilterLogsFilter and assigns it to the Filters field.
func (o *LineChartLogsQuery) SetFilters(v []FilterLogsFilter) {
	o.Filters = v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *LineChartLogsQuery) GetGroupBy() []string {
	if o == nil || IsNil(o.GroupBy) {
		var ret []string
		return ret
	}
	return o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineChartLogsQuery) GetGroupByOk() ([]string, bool) {
	if o == nil || IsNil(o.GroupBy) {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *LineChartLogsQuery) HasGroupBy() bool {
	if o != nil && !IsNil(o.GroupBy) {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given []string and assigns it to the GroupBy field.
func (o *LineChartLogsQuery) SetGroupBy(v []string) {
	o.GroupBy = v
}

// GetGroupBys returns the GroupBys field value if set, zero value otherwise.
func (o *LineChartLogsQuery) GetGroupBys() []ObservationField {
	if o == nil || IsNil(o.GroupBys) {
		var ret []ObservationField
		return ret
	}
	return o.GroupBys
}

// GetGroupBysOk returns a tuple with the GroupBys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineChartLogsQuery) GetGroupBysOk() ([]ObservationField, bool) {
	if o == nil || IsNil(o.GroupBys) {
		return nil, false
	}
	return o.GroupBys, true
}

// HasGroupBys returns a boolean if a field has been set.
func (o *LineChartLogsQuery) HasGroupBys() bool {
	if o != nil && !IsNil(o.GroupBys) {
		return true
	}

	return false
}

// SetGroupBys gets a reference to the given []ObservationField and assigns it to the GroupBys field.
func (o *LineChartLogsQuery) SetGroupBys(v []ObservationField) {
	o.GroupBys = v
}

// GetLuceneQuery returns the LuceneQuery field value if set, zero value otherwise.
func (o *LineChartLogsQuery) GetLuceneQuery() LuceneQuery {
	if o == nil || IsNil(o.LuceneQuery) {
		var ret LuceneQuery
		return ret
	}
	return *o.LuceneQuery
}

// GetLuceneQueryOk returns a tuple with the LuceneQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineChartLogsQuery) GetLuceneQueryOk() (*LuceneQuery, bool) {
	if o == nil || IsNil(o.LuceneQuery) {
		return nil, false
	}
	return o.LuceneQuery, true
}

// HasLuceneQuery returns a boolean if a field has been set.
func (o *LineChartLogsQuery) HasLuceneQuery() bool {
	if o != nil && !IsNil(o.LuceneQuery) {
		return true
	}

	return false
}

// SetLuceneQuery gets a reference to the given LuceneQuery and assigns it to the LuceneQuery field.
func (o *LineChartLogsQuery) SetLuceneQuery(v LuceneQuery) {
	o.LuceneQuery = &v
}

// GetTimeFrame returns the TimeFrame field value if set, zero value otherwise.
func (o *LineChartLogsQuery) GetTimeFrame() TimeFrameSelect {
	if o == nil || IsNil(o.TimeFrame) {
		var ret TimeFrameSelect
		return ret
	}
	return *o.TimeFrame
}

// GetTimeFrameOk returns a tuple with the TimeFrame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineChartLogsQuery) GetTimeFrameOk() (*TimeFrameSelect, bool) {
	if o == nil || IsNil(o.TimeFrame) {
		return nil, false
	}
	return o.TimeFrame, true
}

// HasTimeFrame returns a boolean if a field has been set.
func (o *LineChartLogsQuery) HasTimeFrame() bool {
	if o != nil && !IsNil(o.TimeFrame) {
		return true
	}

	return false
}

// SetTimeFrame gets a reference to the given TimeFrameSelect and assigns it to the TimeFrame field.
func (o *LineChartLogsQuery) SetTimeFrame(v TimeFrameSelect) {
	o.TimeFrame = &v
}

func (o LineChartLogsQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LineChartLogsQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aggregations) {
		toSerialize["aggregations"] = o.Aggregations
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.GroupBy) {
		toSerialize["groupBy"] = o.GroupBy
	}
	if !IsNil(o.GroupBys) {
		toSerialize["groupBys"] = o.GroupBys
	}
	if !IsNil(o.LuceneQuery) {
		toSerialize["luceneQuery"] = o.LuceneQuery
	}
	if !IsNil(o.TimeFrame) {
		toSerialize["timeFrame"] = o.TimeFrame
	}
	return toSerialize, nil
}

type NullableLineChartLogsQuery struct {
	value *LineChartLogsQuery
	isSet bool
}

func (v NullableLineChartLogsQuery) Get() *LineChartLogsQuery {
	return v.value
}

func (v *NullableLineChartLogsQuery) Set(val *LineChartLogsQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableLineChartLogsQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableLineChartLogsQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLineChartLogsQuery(val *LineChartLogsQuery) *NullableLineChartLogsQuery {
	return &NullableLineChartLogsQuery{value: val, isSet: true}
}

func (v NullableLineChartLogsQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLineChartLogsQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


