/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// QuerySourceMetricsQueryOperator - struct for QuerySourceMetricsQueryOperator
type QuerySourceMetricsQueryOperator struct {
	QuerySourceMetricsQueryOperatorEquals *QuerySourceMetricsQueryOperatorEquals
	QuerySourceMetricsQueryOperatorNotEquals *QuerySourceMetricsQueryOperatorNotEquals
}

// QuerySourceMetricsQueryOperatorEqualsAsQuerySourceMetricsQueryOperator is a convenience function that returns QuerySourceMetricsQueryOperatorEquals wrapped in QuerySourceMetricsQueryOperator
func QuerySourceMetricsQueryOperatorEqualsAsQuerySourceMetricsQueryOperator(v *QuerySourceMetricsQueryOperatorEquals) QuerySourceMetricsQueryOperator {
	return QuerySourceMetricsQueryOperator{
		QuerySourceMetricsQueryOperatorEquals: v,
	}
}

// QuerySourceMetricsQueryOperatorNotEqualsAsQuerySourceMetricsQueryOperator is a convenience function that returns QuerySourceMetricsQueryOperatorNotEquals wrapped in QuerySourceMetricsQueryOperator
func QuerySourceMetricsQueryOperatorNotEqualsAsQuerySourceMetricsQueryOperator(v *QuerySourceMetricsQueryOperatorNotEquals) QuerySourceMetricsQueryOperator {
	return QuerySourceMetricsQueryOperator{
		QuerySourceMetricsQueryOperatorNotEquals: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *QuerySourceMetricsQueryOperator) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into QuerySourceMetricsQueryOperatorEquals
	err = newStrictDecoder(data).Decode(&dst.QuerySourceMetricsQueryOperatorEquals)
	if err == nil {
		jsonQuerySourceMetricsQueryOperatorEquals, _ := json.Marshal(dst.QuerySourceMetricsQueryOperatorEquals)
		if string(jsonQuerySourceMetricsQueryOperatorEquals) == "{}" { // empty struct
			dst.QuerySourceMetricsQueryOperatorEquals = nil
		} else {
			if err = validator.Validate(dst.QuerySourceMetricsQueryOperatorEquals); err != nil {
				dst.QuerySourceMetricsQueryOperatorEquals = nil
			} else {
				match++
			}
		}
	} else {
		dst.QuerySourceMetricsQueryOperatorEquals = nil
	}

	// try to unmarshal data into QuerySourceMetricsQueryOperatorNotEquals
	err = newStrictDecoder(data).Decode(&dst.QuerySourceMetricsQueryOperatorNotEquals)
	if err == nil {
		jsonQuerySourceMetricsQueryOperatorNotEquals, _ := json.Marshal(dst.QuerySourceMetricsQueryOperatorNotEquals)
		if string(jsonQuerySourceMetricsQueryOperatorNotEquals) == "{}" { // empty struct
			dst.QuerySourceMetricsQueryOperatorNotEquals = nil
		} else {
			if err = validator.Validate(dst.QuerySourceMetricsQueryOperatorNotEquals); err != nil {
				dst.QuerySourceMetricsQueryOperatorNotEquals = nil
			} else {
				match++
			}
		}
	} else {
		dst.QuerySourceMetricsQueryOperatorNotEquals = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.QuerySourceMetricsQueryOperatorEquals = nil
		dst.QuerySourceMetricsQueryOperatorNotEquals = nil

		return fmt.Errorf("data matches more than one schema in oneOf(QuerySourceMetricsQueryOperator)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(QuerySourceMetricsQueryOperator)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src QuerySourceMetricsQueryOperator) MarshalJSON() ([]byte, error) {
	if src.QuerySourceMetricsQueryOperatorEquals != nil {
		return json.Marshal(&src.QuerySourceMetricsQueryOperatorEquals)
	}

	if src.QuerySourceMetricsQueryOperatorNotEquals != nil {
		return json.Marshal(&src.QuerySourceMetricsQueryOperatorNotEquals)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *QuerySourceMetricsQueryOperator) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.QuerySourceMetricsQueryOperatorEquals != nil {
		return obj.QuerySourceMetricsQueryOperatorEquals
	}

	if obj.QuerySourceMetricsQueryOperatorNotEquals != nil {
		return obj.QuerySourceMetricsQueryOperatorNotEquals
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj QuerySourceMetricsQueryOperator) GetActualInstanceValue() (interface{}) {
	if obj.QuerySourceMetricsQueryOperatorEquals != nil {
		return *obj.QuerySourceMetricsQueryOperatorEquals
	}

	if obj.QuerySourceMetricsQueryOperatorNotEquals != nil {
		return *obj.QuerySourceMetricsQueryOperatorNotEquals
	}

	// all schemas are nil
	return nil
}

type NullableQuerySourceMetricsQueryOperator struct {
	value *QuerySourceMetricsQueryOperator
	isSet bool
}

func (v NullableQuerySourceMetricsQueryOperator) Get() *QuerySourceMetricsQueryOperator {
	return v.value
}

func (v *NullableQuerySourceMetricsQueryOperator) Set(val *QuerySourceMetricsQueryOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableQuerySourceMetricsQueryOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableQuerySourceMetricsQueryOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuerySourceMetricsQueryOperator(val *QuerySourceMetricsQueryOperator) *NullableQuerySourceMetricsQueryOperator {
	return &NullableQuerySourceMetricsQueryOperator{value: val, isSet: true}
}

func (v NullableQuerySourceMetricsQueryOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuerySourceMetricsQueryOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


