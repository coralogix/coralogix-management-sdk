/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the SpansSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpansSource{}

// SpansSource struct for SpansSource
type SpansSource struct {
	DataModeType *V1CommonDataModeType `json:"dataModeType,omitempty"`
	LabelFields []ObservationField `json:"labelFields,omitempty"`
	LuceneQuery *LuceneQuery `json:"luceneQuery,omitempty"`
	MessageTemplate *string `json:"messageTemplate,omitempty"`
	Strategy *SpansSourceStrategy `json:"strategy,omitempty"`
}

// NewSpansSource instantiates a new SpansSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpansSource() *SpansSource {
	this := SpansSource{}
	return &this
}

// NewSpansSourceWithDefaults instantiates a new SpansSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpansSourceWithDefaults() *SpansSource {
	this := SpansSource{}
	return &this
}

// GetDataModeType returns the DataModeType field value if set, zero value otherwise.
func (o *SpansSource) GetDataModeType() V1CommonDataModeType {
	if o == nil || IsNil(o.DataModeType) {
		var ret V1CommonDataModeType
		return ret
	}
	return *o.DataModeType
}

// GetDataModeTypeOk returns a tuple with the DataModeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpansSource) GetDataModeTypeOk() (*V1CommonDataModeType, bool) {
	if o == nil || IsNil(o.DataModeType) {
		return nil, false
	}
	return o.DataModeType, true
}

// HasDataModeType returns a boolean if a field has been set.
func (o *SpansSource) HasDataModeType() bool {
	if o != nil && !IsNil(o.DataModeType) {
		return true
	}

	return false
}

// SetDataModeType gets a reference to the given V1CommonDataModeType and assigns it to the DataModeType field.
func (o *SpansSource) SetDataModeType(v V1CommonDataModeType) {
	o.DataModeType = &v
}

// GetLabelFields returns the LabelFields field value if set, zero value otherwise.
func (o *SpansSource) GetLabelFields() []ObservationField {
	if o == nil || IsNil(o.LabelFields) {
		var ret []ObservationField
		return ret
	}
	return o.LabelFields
}

// GetLabelFieldsOk returns a tuple with the LabelFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpansSource) GetLabelFieldsOk() ([]ObservationField, bool) {
	if o == nil || IsNil(o.LabelFields) {
		return nil, false
	}
	return o.LabelFields, true
}

// HasLabelFields returns a boolean if a field has been set.
func (o *SpansSource) HasLabelFields() bool {
	if o != nil && !IsNil(o.LabelFields) {
		return true
	}

	return false
}

// SetLabelFields gets a reference to the given []ObservationField and assigns it to the LabelFields field.
func (o *SpansSource) SetLabelFields(v []ObservationField) {
	o.LabelFields = v
}

// GetLuceneQuery returns the LuceneQuery field value if set, zero value otherwise.
func (o *SpansSource) GetLuceneQuery() LuceneQuery {
	if o == nil || IsNil(o.LuceneQuery) {
		var ret LuceneQuery
		return ret
	}
	return *o.LuceneQuery
}

// GetLuceneQueryOk returns a tuple with the LuceneQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpansSource) GetLuceneQueryOk() (*LuceneQuery, bool) {
	if o == nil || IsNil(o.LuceneQuery) {
		return nil, false
	}
	return o.LuceneQuery, true
}

// HasLuceneQuery returns a boolean if a field has been set.
func (o *SpansSource) HasLuceneQuery() bool {
	if o != nil && !IsNil(o.LuceneQuery) {
		return true
	}

	return false
}

// SetLuceneQuery gets a reference to the given LuceneQuery and assigns it to the LuceneQuery field.
func (o *SpansSource) SetLuceneQuery(v LuceneQuery) {
	o.LuceneQuery = &v
}

// GetMessageTemplate returns the MessageTemplate field value if set, zero value otherwise.
func (o *SpansSource) GetMessageTemplate() string {
	if o == nil || IsNil(o.MessageTemplate) {
		var ret string
		return ret
	}
	return *o.MessageTemplate
}

// GetMessageTemplateOk returns a tuple with the MessageTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpansSource) GetMessageTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.MessageTemplate) {
		return nil, false
	}
	return o.MessageTemplate, true
}

// HasMessageTemplate returns a boolean if a field has been set.
func (o *SpansSource) HasMessageTemplate() bool {
	if o != nil && !IsNil(o.MessageTemplate) {
		return true
	}

	return false
}

// SetMessageTemplate gets a reference to the given string and assigns it to the MessageTemplate field.
func (o *SpansSource) SetMessageTemplate(v string) {
	o.MessageTemplate = &v
}

// GetStrategy returns the Strategy field value if set, zero value otherwise.
func (o *SpansSource) GetStrategy() SpansSourceStrategy {
	if o == nil || IsNil(o.Strategy) {
		var ret SpansSourceStrategy
		return ret
	}
	return *o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpansSource) GetStrategyOk() (*SpansSourceStrategy, bool) {
	if o == nil || IsNil(o.Strategy) {
		return nil, false
	}
	return o.Strategy, true
}

// HasStrategy returns a boolean if a field has been set.
func (o *SpansSource) HasStrategy() bool {
	if o != nil && !IsNil(o.Strategy) {
		return true
	}

	return false
}

// SetStrategy gets a reference to the given SpansSourceStrategy and assigns it to the Strategy field.
func (o *SpansSource) SetStrategy(v SpansSourceStrategy) {
	o.Strategy = &v
}

func (o SpansSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpansSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataModeType) {
		toSerialize["dataModeType"] = o.DataModeType
	}
	if !IsNil(o.LabelFields) {
		toSerialize["labelFields"] = o.LabelFields
	}
	if !IsNil(o.LuceneQuery) {
		toSerialize["luceneQuery"] = o.LuceneQuery
	}
	if !IsNil(o.MessageTemplate) {
		toSerialize["messageTemplate"] = o.MessageTemplate
	}
	if !IsNil(o.Strategy) {
		toSerialize["strategy"] = o.Strategy
	}
	return toSerialize, nil
}

type NullableSpansSource struct {
	value *SpansSource
	isSet bool
}

func (v NullableSpansSource) Get() *SpansSource {
	return v.value
}

func (v *NullableSpansSource) Set(val *SpansSource) {
	v.value = val
	v.isSet = true
}

func (v NullableSpansSource) IsSet() bool {
	return v.isSet
}

func (v *NullableSpansSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpansSource(val *SpansSource) *NullableSpansSource {
	return &NullableSpansSource{value: val, isSet: true}
}

func (v NullableSpansSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpansSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


