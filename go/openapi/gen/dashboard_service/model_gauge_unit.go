/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// GaugeUnit the model 'GaugeUnit'
type GaugeUnit string

// List of Gauge.Unit
const (
	GAUGEUNIT_UNIT_UNSPECIFIED GaugeUnit = "UNIT_UNSPECIFIED"
	GAUGEUNIT_UNIT_NUMBER GaugeUnit = "UNIT_NUMBER"
	GAUGEUNIT_UNIT_PERCENT GaugeUnit = "UNIT_PERCENT"
	GAUGEUNIT_UNIT_MICROSECONDS GaugeUnit = "UNIT_MICROSECONDS"
	GAUGEUNIT_UNIT_MILLISECONDS GaugeUnit = "UNIT_MILLISECONDS"
	GAUGEUNIT_UNIT_SECONDS GaugeUnit = "UNIT_SECONDS"
	GAUGEUNIT_UNIT_BYTES GaugeUnit = "UNIT_BYTES"
	GAUGEUNIT_UNIT_KBYTES GaugeUnit = "UNIT_KBYTES"
	GAUGEUNIT_UNIT_MBYTES GaugeUnit = "UNIT_MBYTES"
	GAUGEUNIT_UNIT_GBYTES GaugeUnit = "UNIT_GBYTES"
	GAUGEUNIT_UNIT_BYTES_IEC GaugeUnit = "UNIT_BYTES_IEC"
	GAUGEUNIT_UNIT_KIBYTES GaugeUnit = "UNIT_KIBYTES"
	GAUGEUNIT_UNIT_MIBYTES GaugeUnit = "UNIT_MIBYTES"
	GAUGEUNIT_UNIT_GIBYTES GaugeUnit = "UNIT_GIBYTES"
	GAUGEUNIT_UNIT_EUR_CENTS GaugeUnit = "UNIT_EUR_CENTS"
	GAUGEUNIT_UNIT_EUR GaugeUnit = "UNIT_EUR"
	GAUGEUNIT_UNIT_USD_CENTS GaugeUnit = "UNIT_USD_CENTS"
	GAUGEUNIT_UNIT_USD GaugeUnit = "UNIT_USD"
	GAUGEUNIT_UNIT_CUSTOM GaugeUnit = "UNIT_CUSTOM"
	GAUGEUNIT_UNIT_PERCENT_ZERO_ONE GaugeUnit = "UNIT_PERCENT_ZERO_ONE"
	GAUGEUNIT_UNIT_PERCENT_ZERO_HUNDRED GaugeUnit = "UNIT_PERCENT_ZERO_HUNDRED"
	GAUGEUNIT_UNIT_NANOSECONDS GaugeUnit = "UNIT_NANOSECONDS"
)

// All allowed values of GaugeUnit enum
var AllowedGaugeUnitEnumValues = []GaugeUnit{
	"UNIT_UNSPECIFIED",
	"UNIT_NUMBER",
	"UNIT_PERCENT",
	"UNIT_MICROSECONDS",
	"UNIT_MILLISECONDS",
	"UNIT_SECONDS",
	"UNIT_BYTES",
	"UNIT_KBYTES",
	"UNIT_MBYTES",
	"UNIT_GBYTES",
	"UNIT_BYTES_IEC",
	"UNIT_KIBYTES",
	"UNIT_MIBYTES",
	"UNIT_GIBYTES",
	"UNIT_EUR_CENTS",
	"UNIT_EUR",
	"UNIT_USD_CENTS",
	"UNIT_USD",
	"UNIT_CUSTOM",
	"UNIT_PERCENT_ZERO_ONE",
	"UNIT_PERCENT_ZERO_HUNDRED",
	"UNIT_NANOSECONDS",
}

func (v *GaugeUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GaugeUnit(value)
	for _, existing := range AllowedGaugeUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GaugeUnit", value)
}

// NewGaugeUnitFromValue returns a pointer to a valid GaugeUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGaugeUnitFromValue(v string) (*GaugeUnit, error) {
	ev := GaugeUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GaugeUnit: valid values are %v", v, AllowedGaugeUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GaugeUnit) IsValid() bool {
	for _, existing := range AllowedGaugeUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Gauge.Unit value
func (v GaugeUnit) Ptr() *GaugeUnit {
	return &v
}

type NullableGaugeUnit struct {
	value *GaugeUnit
	isSet bool
}

func (v NullableGaugeUnit) Get() *GaugeUnit {
	return v.value
}

func (v *NullableGaugeUnit) Set(val *GaugeUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableGaugeUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableGaugeUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGaugeUnit(val *GaugeUnit) *NullableGaugeUnit {
	return &NullableGaugeUnit{value: val, isSet: true}
}

func (v NullableGaugeUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGaugeUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

