/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the QueryText type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryText{}

// QueryText struct for QueryText
type QueryText struct {
	DataModeType *V1CommonDataModeType `json:"dataModeType,omitempty"`
	Query *CommonDataprimeQuery `json:"query,omitempty"`
}

// NewQueryText instantiates a new QueryText object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryText() *QueryText {
	this := QueryText{}
	return &this
}

// NewQueryTextWithDefaults instantiates a new QueryText object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryTextWithDefaults() *QueryText {
	this := QueryText{}
	return &this
}

// GetDataModeType returns the DataModeType field value if set, zero value otherwise.
func (o *QueryText) GetDataModeType() V1CommonDataModeType {
	if o == nil || IsNil(o.DataModeType) {
		var ret V1CommonDataModeType
		return ret
	}
	return *o.DataModeType
}

// GetDataModeTypeOk returns a tuple with the DataModeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryText) GetDataModeTypeOk() (*V1CommonDataModeType, bool) {
	if o == nil || IsNil(o.DataModeType) {
		return nil, false
	}
	return o.DataModeType, true
}

// HasDataModeType returns a boolean if a field has been set.
func (o *QueryText) HasDataModeType() bool {
	if o != nil && !IsNil(o.DataModeType) {
		return true
	}

	return false
}

// SetDataModeType gets a reference to the given V1CommonDataModeType and assigns it to the DataModeType field.
func (o *QueryText) SetDataModeType(v V1CommonDataModeType) {
	o.DataModeType = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *QueryText) GetQuery() CommonDataprimeQuery {
	if o == nil || IsNil(o.Query) {
		var ret CommonDataprimeQuery
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryText) GetQueryOk() (*CommonDataprimeQuery, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *QueryText) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given CommonDataprimeQuery and assigns it to the Query field.
func (o *QueryText) SetQuery(v CommonDataprimeQuery) {
	o.Query = &v
}

func (o QueryText) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryText) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataModeType) {
		toSerialize["dataModeType"] = o.DataModeType
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	return toSerialize, nil
}

type NullableQueryText struct {
	value *QueryText
	isSet bool
}

func (v NullableQueryText) Get() *QueryText {
	return v.value
}

func (v *NullableQueryText) Set(val *QueryText) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryText) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryText) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryText(val *QueryText) *NullableQueryText {
	return &NullableQueryText{value: val, isSet: true}
}

func (v NullableQueryText) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryText) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


