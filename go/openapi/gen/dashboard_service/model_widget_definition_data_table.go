/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the WidgetDefinitionDataTable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WidgetDefinitionDataTable{}

// WidgetDefinitionDataTable struct for WidgetDefinitionDataTable
type WidgetDefinitionDataTable struct {
	DataTable *DataTable `json:"dataTable,omitempty"`
}

// NewWidgetDefinitionDataTable instantiates a new WidgetDefinitionDataTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWidgetDefinitionDataTable() *WidgetDefinitionDataTable {
	this := WidgetDefinitionDataTable{}
	return &this
}

// NewWidgetDefinitionDataTableWithDefaults instantiates a new WidgetDefinitionDataTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWidgetDefinitionDataTableWithDefaults() *WidgetDefinitionDataTable {
	this := WidgetDefinitionDataTable{}
	return &this
}

// GetDataTable returns the DataTable field value if set, zero value otherwise.
func (o *WidgetDefinitionDataTable) GetDataTable() DataTable {
	if o == nil || IsNil(o.DataTable) {
		var ret DataTable
		return ret
	}
	return *o.DataTable
}

// GetDataTableOk returns a tuple with the DataTable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetDefinitionDataTable) GetDataTableOk() (*DataTable, bool) {
	if o == nil || IsNil(o.DataTable) {
		return nil, false
	}
	return o.DataTable, true
}

// HasDataTable returns a boolean if a field has been set.
func (o *WidgetDefinitionDataTable) HasDataTable() bool {
	if o != nil && !IsNil(o.DataTable) {
		return true
	}

	return false
}

// SetDataTable gets a reference to the given DataTable and assigns it to the DataTable field.
func (o *WidgetDefinitionDataTable) SetDataTable(v DataTable) {
	o.DataTable = &v
}

func (o WidgetDefinitionDataTable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WidgetDefinitionDataTable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataTable) {
		toSerialize["dataTable"] = o.DataTable
	}
	return toSerialize, nil
}

type NullableWidgetDefinitionDataTable struct {
	value *WidgetDefinitionDataTable
	isSet bool
}

func (v NullableWidgetDefinitionDataTable) Get() *WidgetDefinitionDataTable {
	return v.value
}

func (v *NullableWidgetDefinitionDataTable) Set(val *WidgetDefinitionDataTable) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetDefinitionDataTable) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetDefinitionDataTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetDefinitionDataTable(val *WidgetDefinitionDataTable) *NullableWidgetDefinitionDataTable {
	return &NullableWidgetDefinitionDataTable{value: val, isSet: true}
}

func (v NullableWidgetDefinitionDataTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetDefinitionDataTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


