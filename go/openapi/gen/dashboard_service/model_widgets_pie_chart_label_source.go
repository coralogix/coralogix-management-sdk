/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// WidgetsPieChartLabelSource the model 'WidgetsPieChartLabelSource'
type WidgetsPieChartLabelSource string

// List of widgets.PieChart.LabelSource
const (
	WIDGETSPIECHARTLABELSOURCE_LABEL_SOURCE_UNSPECIFIED WidgetsPieChartLabelSource = "LABEL_SOURCE_UNSPECIFIED"
	WIDGETSPIECHARTLABELSOURCE_LABEL_SOURCE_INNER WidgetsPieChartLabelSource = "LABEL_SOURCE_INNER"
	WIDGETSPIECHARTLABELSOURCE_LABEL_SOURCE_STACK WidgetsPieChartLabelSource = "LABEL_SOURCE_STACK"
)

// All allowed values of WidgetsPieChartLabelSource enum
var AllowedWidgetsPieChartLabelSourceEnumValues = []WidgetsPieChartLabelSource{
	"LABEL_SOURCE_UNSPECIFIED",
	"LABEL_SOURCE_INNER",
	"LABEL_SOURCE_STACK",
}

func (v *WidgetsPieChartLabelSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WidgetsPieChartLabelSource(value)
	for _, existing := range AllowedWidgetsPieChartLabelSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WidgetsPieChartLabelSource", value)
}

// NewWidgetsPieChartLabelSourceFromValue returns a pointer to a valid WidgetsPieChartLabelSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWidgetsPieChartLabelSourceFromValue(v string) (*WidgetsPieChartLabelSource, error) {
	ev := WidgetsPieChartLabelSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WidgetsPieChartLabelSource: valid values are %v", v, AllowedWidgetsPieChartLabelSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WidgetsPieChartLabelSource) IsValid() bool {
	for _, existing := range AllowedWidgetsPieChartLabelSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to widgets.PieChart.LabelSource value
func (v WidgetsPieChartLabelSource) Ptr() *WidgetsPieChartLabelSource {
	return &v
}

type NullableWidgetsPieChartLabelSource struct {
	value *WidgetsPieChartLabelSource
	isSet bool
}

func (v NullableWidgetsPieChartLabelSource) Get() *WidgetsPieChartLabelSource {
	return v.value
}

func (v *NullableWidgetsPieChartLabelSource) Set(val *WidgetsPieChartLabelSource) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetsPieChartLabelSource) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetsPieChartLabelSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetsPieChartLabelSource(val *WidgetsPieChartLabelSource) *NullableWidgetsPieChartLabelSource {
	return &NullableWidgetsPieChartLabelSource{value: val, isSet: true}
}

func (v NullableWidgetsPieChartLabelSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetsPieChartLabelSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

