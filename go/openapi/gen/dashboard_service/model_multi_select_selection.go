/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// MultiSelectSelection - struct for MultiSelectSelection
type MultiSelectSelection struct {
	SelectionAll *SelectionAll
	SelectionList *SelectionList
}

// SelectionAllAsMultiSelectSelection is a convenience function that returns SelectionAll wrapped in MultiSelectSelection
func SelectionAllAsMultiSelectSelection(v *SelectionAll) MultiSelectSelection {
	return MultiSelectSelection{
		SelectionAll: v,
	}
}

// SelectionListAsMultiSelectSelection is a convenience function that returns SelectionList wrapped in MultiSelectSelection
func SelectionListAsMultiSelectSelection(v *SelectionList) MultiSelectSelection {
	return MultiSelectSelection{
		SelectionList: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MultiSelectSelection) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SelectionAll
	err = newStrictDecoder(data).Decode(&dst.SelectionAll)
	if err == nil {
		jsonSelectionAll, _ := json.Marshal(dst.SelectionAll)
		if string(jsonSelectionAll) == "{}" { // empty struct
			dst.SelectionAll = nil
		} else {
			if err = validator.Validate(dst.SelectionAll); err != nil {
				dst.SelectionAll = nil
			} else {
				match++
			}
		}
	} else {
		dst.SelectionAll = nil
	}

	// try to unmarshal data into SelectionList
	err = newStrictDecoder(data).Decode(&dst.SelectionList)
	if err == nil {
		jsonSelectionList, _ := json.Marshal(dst.SelectionList)
		if string(jsonSelectionList) == "{}" { // empty struct
			dst.SelectionList = nil
		} else {
			if err = validator.Validate(dst.SelectionList); err != nil {
				dst.SelectionList = nil
			} else {
				match++
			}
		}
	} else {
		dst.SelectionList = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SelectionAll = nil
		dst.SelectionList = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MultiSelectSelection)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MultiSelectSelection)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MultiSelectSelection) MarshalJSON() ([]byte, error) {
	if src.SelectionAll != nil {
		return json.Marshal(&src.SelectionAll)
	}

	if src.SelectionList != nil {
		return json.Marshal(&src.SelectionList)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MultiSelectSelection) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SelectionAll != nil {
		return obj.SelectionAll
	}

	if obj.SelectionList != nil {
		return obj.SelectionList
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj MultiSelectSelection) GetActualInstanceValue() (interface{}) {
	if obj.SelectionAll != nil {
		return *obj.SelectionAll
	}

	if obj.SelectionList != nil {
		return *obj.SelectionList
	}

	// all schemas are nil
	return nil
}

type NullableMultiSelectSelection struct {
	value *MultiSelectSelection
	isSet bool
}

func (v NullableMultiSelectSelection) Get() *MultiSelectSelection {
	return v.value
}

func (v *NullableMultiSelectSelection) Set(val *MultiSelectSelection) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiSelectSelection) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiSelectSelection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiSelectSelection(val *MultiSelectSelection) *NullableMultiSelectSelection {
	return &NullableMultiSelectSelection{value: val, isSet: true}
}

func (v NullableMultiSelectSelection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiSelectSelection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


