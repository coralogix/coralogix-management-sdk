/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the WidgetsDynamic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WidgetsDynamic{}

// WidgetsDynamic struct for WidgetsDynamic
type WidgetsDynamic struct {
	Interpretation *Interpretation `json:"interpretation,omitempty"`
	Query *DynamicQuery `json:"query,omitempty"`
	TimeFrame *TimeFrameSelect `json:"timeFrame,omitempty"`
	Visualization *Visualization `json:"visualization,omitempty"`
}

// NewWidgetsDynamic instantiates a new WidgetsDynamic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWidgetsDynamic() *WidgetsDynamic {
	this := WidgetsDynamic{}
	return &this
}

// NewWidgetsDynamicWithDefaults instantiates a new WidgetsDynamic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWidgetsDynamicWithDefaults() *WidgetsDynamic {
	this := WidgetsDynamic{}
	return &this
}

// GetInterpretation returns the Interpretation field value if set, zero value otherwise.
func (o *WidgetsDynamic) GetInterpretation() Interpretation {
	if o == nil || IsNil(o.Interpretation) {
		var ret Interpretation
		return ret
	}
	return *o.Interpretation
}

// GetInterpretationOk returns a tuple with the Interpretation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsDynamic) GetInterpretationOk() (*Interpretation, bool) {
	if o == nil || IsNil(o.Interpretation) {
		return nil, false
	}
	return o.Interpretation, true
}

// HasInterpretation returns a boolean if a field has been set.
func (o *WidgetsDynamic) HasInterpretation() bool {
	if o != nil && !IsNil(o.Interpretation) {
		return true
	}

	return false
}

// SetInterpretation gets a reference to the given Interpretation and assigns it to the Interpretation field.
func (o *WidgetsDynamic) SetInterpretation(v Interpretation) {
	o.Interpretation = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *WidgetsDynamic) GetQuery() DynamicQuery {
	if o == nil || IsNil(o.Query) {
		var ret DynamicQuery
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsDynamic) GetQueryOk() (*DynamicQuery, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *WidgetsDynamic) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given DynamicQuery and assigns it to the Query field.
func (o *WidgetsDynamic) SetQuery(v DynamicQuery) {
	o.Query = &v
}

// GetTimeFrame returns the TimeFrame field value if set, zero value otherwise.
func (o *WidgetsDynamic) GetTimeFrame() TimeFrameSelect {
	if o == nil || IsNil(o.TimeFrame) {
		var ret TimeFrameSelect
		return ret
	}
	return *o.TimeFrame
}

// GetTimeFrameOk returns a tuple with the TimeFrame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsDynamic) GetTimeFrameOk() (*TimeFrameSelect, bool) {
	if o == nil || IsNil(o.TimeFrame) {
		return nil, false
	}
	return o.TimeFrame, true
}

// HasTimeFrame returns a boolean if a field has been set.
func (o *WidgetsDynamic) HasTimeFrame() bool {
	if o != nil && !IsNil(o.TimeFrame) {
		return true
	}

	return false
}

// SetTimeFrame gets a reference to the given TimeFrameSelect and assigns it to the TimeFrame field.
func (o *WidgetsDynamic) SetTimeFrame(v TimeFrameSelect) {
	o.TimeFrame = &v
}

// GetVisualization returns the Visualization field value if set, zero value otherwise.
func (o *WidgetsDynamic) GetVisualization() Visualization {
	if o == nil || IsNil(o.Visualization) {
		var ret Visualization
		return ret
	}
	return *o.Visualization
}

// GetVisualizationOk returns a tuple with the Visualization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsDynamic) GetVisualizationOk() (*Visualization, bool) {
	if o == nil || IsNil(o.Visualization) {
		return nil, false
	}
	return o.Visualization, true
}

// HasVisualization returns a boolean if a field has been set.
func (o *WidgetsDynamic) HasVisualization() bool {
	if o != nil && !IsNil(o.Visualization) {
		return true
	}

	return false
}

// SetVisualization gets a reference to the given Visualization and assigns it to the Visualization field.
func (o *WidgetsDynamic) SetVisualization(v Visualization) {
	o.Visualization = &v
}

func (o WidgetsDynamic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WidgetsDynamic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Interpretation) {
		toSerialize["interpretation"] = o.Interpretation
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.TimeFrame) {
		toSerialize["timeFrame"] = o.TimeFrame
	}
	if !IsNil(o.Visualization) {
		toSerialize["visualization"] = o.Visualization
	}
	return toSerialize, nil
}

type NullableWidgetsDynamic struct {
	value *WidgetsDynamic
	isSet bool
}

func (v NullableWidgetsDynamic) Get() *WidgetsDynamic {
	return v.value
}

func (v *NullableWidgetsDynamic) Set(val *WidgetsDynamic) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetsDynamic) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetsDynamic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetsDynamic(val *WidgetsDynamic) *NullableWidgetsDynamic {
	return &NullableWidgetsDynamic{value: val, isSet: true}
}

func (v NullableWidgetsDynamic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetsDynamic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


