/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// ThresholdType the model 'ThresholdType'
type ThresholdType string

// List of ThresholdType
const (
	THRESHOLDTYPE_THRESHOLD_TYPE_UNSPECIFIED ThresholdType = "THRESHOLD_TYPE_UNSPECIFIED"
	THRESHOLDTYPE_THRESHOLD_TYPE_RELATIVE ThresholdType = "THRESHOLD_TYPE_RELATIVE"
	THRESHOLDTYPE_THRESHOLD_TYPE_ABSOLUTE ThresholdType = "THRESHOLD_TYPE_ABSOLUTE"
)

// All allowed values of ThresholdType enum
var AllowedThresholdTypeEnumValues = []ThresholdType{
	"THRESHOLD_TYPE_UNSPECIFIED",
	"THRESHOLD_TYPE_RELATIVE",
	"THRESHOLD_TYPE_ABSOLUTE",
}

func (v *ThresholdType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ThresholdType(value)
	for _, existing := range AllowedThresholdTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ThresholdType", value)
}

// NewThresholdTypeFromValue returns a pointer to a valid ThresholdType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewThresholdTypeFromValue(v string) (*ThresholdType, error) {
	ev := ThresholdType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ThresholdType: valid values are %v", v, AllowedThresholdTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ThresholdType) IsValid() bool {
	for _, existing := range AllowedThresholdTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ThresholdType value
func (v ThresholdType) Ptr() *ThresholdType {
	return &v
}

type NullableThresholdType struct {
	value *ThresholdType
	isSet bool
}

func (v NullableThresholdType) Get() *ThresholdType {
	return v.value
}

func (v *NullableThresholdType) Set(val *ThresholdType) {
	v.value = val
	v.isSet = true
}

func (v NullableThresholdType) IsSet() bool {
	return v.isSet
}

func (v *NullableThresholdType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThresholdType(val *ThresholdType) *NullableThresholdType {
	return &NullableThresholdType{value: val, isSet: true}
}

func (v NullableThresholdType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThresholdType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

