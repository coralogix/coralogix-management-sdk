/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// WidgetsBarValueDisplay the model 'WidgetsBarValueDisplay'
type WidgetsBarValueDisplay string

// List of widgets.BarValueDisplay
const (
	WIDGETSBARVALUEDISPLAY_BAR_VALUE_DISPLAY_UNSPECIFIED WidgetsBarValueDisplay = "BAR_VALUE_DISPLAY_UNSPECIFIED"
	WIDGETSBARVALUEDISPLAY_BAR_VALUE_DISPLAY_TOP WidgetsBarValueDisplay = "BAR_VALUE_DISPLAY_TOP"
	WIDGETSBARVALUEDISPLAY_BAR_VALUE_DISPLAY_INSIDE WidgetsBarValueDisplay = "BAR_VALUE_DISPLAY_INSIDE"
	WIDGETSBARVALUEDISPLAY_BAR_VALUE_DISPLAY_BOTH WidgetsBarValueDisplay = "BAR_VALUE_DISPLAY_BOTH"
)

// All allowed values of WidgetsBarValueDisplay enum
var AllowedWidgetsBarValueDisplayEnumValues = []WidgetsBarValueDisplay{
	"BAR_VALUE_DISPLAY_UNSPECIFIED",
	"BAR_VALUE_DISPLAY_TOP",
	"BAR_VALUE_DISPLAY_INSIDE",
	"BAR_VALUE_DISPLAY_BOTH",
}

func (v *WidgetsBarValueDisplay) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WidgetsBarValueDisplay(value)
	for _, existing := range AllowedWidgetsBarValueDisplayEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WidgetsBarValueDisplay", value)
}

// NewWidgetsBarValueDisplayFromValue returns a pointer to a valid WidgetsBarValueDisplay
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWidgetsBarValueDisplayFromValue(v string) (*WidgetsBarValueDisplay, error) {
	ev := WidgetsBarValueDisplay(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WidgetsBarValueDisplay: valid values are %v", v, AllowedWidgetsBarValueDisplayEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WidgetsBarValueDisplay) IsValid() bool {
	for _, existing := range AllowedWidgetsBarValueDisplayEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to widgets.BarValueDisplay value
func (v WidgetsBarValueDisplay) Ptr() *WidgetsBarValueDisplay {
	return &v
}

type NullableWidgetsBarValueDisplay struct {
	value *WidgetsBarValueDisplay
	isSet bool
}

func (v NullableWidgetsBarValueDisplay) Get() *WidgetsBarValueDisplay {
	return v.value
}

func (v *NullableWidgetsBarValueDisplay) Set(val *WidgetsBarValueDisplay) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetsBarValueDisplay) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetsBarValueDisplay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetsBarValueDisplay(val *WidgetsBarValueDisplay) *NullableWidgetsBarValueDisplay {
	return &NullableWidgetsBarValueDisplay{value: val, isSet: true}
}

func (v NullableWidgetsBarValueDisplay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetsBarValueDisplay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

