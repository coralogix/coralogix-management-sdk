/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the LogsAggregationCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogsAggregationCount{}

// LogsAggregationCount struct for LogsAggregationCount
type LogsAggregationCount struct {
	Count map[string]interface{} `json:"count,omitempty"`
}

// NewLogsAggregationCount instantiates a new LogsAggregationCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsAggregationCount() *LogsAggregationCount {
	this := LogsAggregationCount{}
	return &this
}

// NewLogsAggregationCountWithDefaults instantiates a new LogsAggregationCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsAggregationCountWithDefaults() *LogsAggregationCount {
	this := LogsAggregationCount{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *LogsAggregationCount) GetCount() map[string]interface{} {
	if o == nil || IsNil(o.Count) {
		var ret map[string]interface{}
		return ret
	}
	return o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsAggregationCount) GetCountOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Count) {
		return map[string]interface{}{}, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *LogsAggregationCount) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given map[string]interface{} and assigns it to the Count field.
func (o *LogsAggregationCount) SetCount(v map[string]interface{}) {
	o.Count = v
}

func (o LogsAggregationCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogsAggregationCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	return toSerialize, nil
}

type NullableLogsAggregationCount struct {
	value *LogsAggregationCount
	isSet bool
}

func (v NullableLogsAggregationCount) Get() *LogsAggregationCount {
	return v.value
}

func (v *NullableLogsAggregationCount) Set(val *LogsAggregationCount) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsAggregationCount) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsAggregationCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsAggregationCount(val *LogsAggregationCount) *NullableLogsAggregationCount {
	return &NullableLogsAggregationCount{value: val, isSet: true}
}

func (v NullableLogsAggregationCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsAggregationCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


