/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the MultiSelectQuerySource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiSelectQuerySource{}

// MultiSelectQuerySource struct for MultiSelectQuerySource
type MultiSelectQuerySource struct {
	Query *MultiSelectQuery `json:"query,omitempty"`
	RefreshStrategy *MultiSelectRefreshStrategy `json:"refreshStrategy,omitempty"`
	ValueDisplayOptions *MultiSelectValueDisplayOptions `json:"valueDisplayOptions,omitempty"`
}

// NewMultiSelectQuerySource instantiates a new MultiSelectQuerySource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiSelectQuerySource() *MultiSelectQuerySource {
	this := MultiSelectQuerySource{}
	return &this
}

// NewMultiSelectQuerySourceWithDefaults instantiates a new MultiSelectQuerySource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiSelectQuerySourceWithDefaults() *MultiSelectQuerySource {
	this := MultiSelectQuerySource{}
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *MultiSelectQuerySource) GetQuery() MultiSelectQuery {
	if o == nil || IsNil(o.Query) {
		var ret MultiSelectQuery
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiSelectQuerySource) GetQueryOk() (*MultiSelectQuery, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *MultiSelectQuerySource) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given MultiSelectQuery and assigns it to the Query field.
func (o *MultiSelectQuerySource) SetQuery(v MultiSelectQuery) {
	o.Query = &v
}

// GetRefreshStrategy returns the RefreshStrategy field value if set, zero value otherwise.
func (o *MultiSelectQuerySource) GetRefreshStrategy() MultiSelectRefreshStrategy {
	if o == nil || IsNil(o.RefreshStrategy) {
		var ret MultiSelectRefreshStrategy
		return ret
	}
	return *o.RefreshStrategy
}

// GetRefreshStrategyOk returns a tuple with the RefreshStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiSelectQuerySource) GetRefreshStrategyOk() (*MultiSelectRefreshStrategy, bool) {
	if o == nil || IsNil(o.RefreshStrategy) {
		return nil, false
	}
	return o.RefreshStrategy, true
}

// HasRefreshStrategy returns a boolean if a field has been set.
func (o *MultiSelectQuerySource) HasRefreshStrategy() bool {
	if o != nil && !IsNil(o.RefreshStrategy) {
		return true
	}

	return false
}

// SetRefreshStrategy gets a reference to the given MultiSelectRefreshStrategy and assigns it to the RefreshStrategy field.
func (o *MultiSelectQuerySource) SetRefreshStrategy(v MultiSelectRefreshStrategy) {
	o.RefreshStrategy = &v
}

// GetValueDisplayOptions returns the ValueDisplayOptions field value if set, zero value otherwise.
func (o *MultiSelectQuerySource) GetValueDisplayOptions() MultiSelectValueDisplayOptions {
	if o == nil || IsNil(o.ValueDisplayOptions) {
		var ret MultiSelectValueDisplayOptions
		return ret
	}
	return *o.ValueDisplayOptions
}

// GetValueDisplayOptionsOk returns a tuple with the ValueDisplayOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiSelectQuerySource) GetValueDisplayOptionsOk() (*MultiSelectValueDisplayOptions, bool) {
	if o == nil || IsNil(o.ValueDisplayOptions) {
		return nil, false
	}
	return o.ValueDisplayOptions, true
}

// HasValueDisplayOptions returns a boolean if a field has been set.
func (o *MultiSelectQuerySource) HasValueDisplayOptions() bool {
	if o != nil && !IsNil(o.ValueDisplayOptions) {
		return true
	}

	return false
}

// SetValueDisplayOptions gets a reference to the given MultiSelectValueDisplayOptions and assigns it to the ValueDisplayOptions field.
func (o *MultiSelectQuerySource) SetValueDisplayOptions(v MultiSelectValueDisplayOptions) {
	o.ValueDisplayOptions = &v
}

func (o MultiSelectQuerySource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiSelectQuerySource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.RefreshStrategy) {
		toSerialize["refreshStrategy"] = o.RefreshStrategy
	}
	if !IsNil(o.ValueDisplayOptions) {
		toSerialize["valueDisplayOptions"] = o.ValueDisplayOptions
	}
	return toSerialize, nil
}

type NullableMultiSelectQuerySource struct {
	value *MultiSelectQuerySource
	isSet bool
}

func (v NullableMultiSelectQuerySource) Get() *MultiSelectQuerySource {
	return v.value
}

func (v *NullableMultiSelectQuerySource) Set(val *MultiSelectQuerySource) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiSelectQuerySource) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiSelectQuerySource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiSelectQuerySource(val *MultiSelectQuerySource) *NullableMultiSelectQuerySource {
	return &NullableMultiSelectQuerySource{value: val, isSet: true}
}

func (v NullableMultiSelectQuerySource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiSelectQuerySource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


