/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the LogsAggregationSum type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogsAggregationSum{}

// LogsAggregationSum struct for LogsAggregationSum
type LogsAggregationSum struct {
	Sum *Sum `json:"sum,omitempty"`
}

// NewLogsAggregationSum instantiates a new LogsAggregationSum object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsAggregationSum() *LogsAggregationSum {
	this := LogsAggregationSum{}
	return &this
}

// NewLogsAggregationSumWithDefaults instantiates a new LogsAggregationSum object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsAggregationSumWithDefaults() *LogsAggregationSum {
	this := LogsAggregationSum{}
	return &this
}

// GetSum returns the Sum field value if set, zero value otherwise.
func (o *LogsAggregationSum) GetSum() Sum {
	if o == nil || IsNil(o.Sum) {
		var ret Sum
		return ret
	}
	return *o.Sum
}

// GetSumOk returns a tuple with the Sum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsAggregationSum) GetSumOk() (*Sum, bool) {
	if o == nil || IsNil(o.Sum) {
		return nil, false
	}
	return o.Sum, true
}

// HasSum returns a boolean if a field has been set.
func (o *LogsAggregationSum) HasSum() bool {
	if o != nil && !IsNil(o.Sum) {
		return true
	}

	return false
}

// SetSum gets a reference to the given Sum and assigns it to the Sum field.
func (o *LogsAggregationSum) SetSum(v Sum) {
	o.Sum = &v
}

func (o LogsAggregationSum) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogsAggregationSum) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sum) {
		toSerialize["sum"] = o.Sum
	}
	return toSerialize, nil
}

type NullableLogsAggregationSum struct {
	value *LogsAggregationSum
	isSet bool
}

func (v NullableLogsAggregationSum) Get() *LogsAggregationSum {
	return v.value
}

func (v *NullableLogsAggregationSum) Set(val *LogsAggregationSum) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsAggregationSum) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsAggregationSum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsAggregationSum(val *LogsAggregationSum) *NullableLogsAggregationSum {
	return &NullableLogsAggregationSum{value: val, isSet: true}
}

func (v NullableLogsAggregationSum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsAggregationSum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


