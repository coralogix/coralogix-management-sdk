/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the RepetitiveVar type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepetitiveVar{}

// RepetitiveVar struct for RepetitiveVar
type RepetitiveVar struct {
	// Variable name that can be applied on section making it repetitive section
	Name *string `json:"name,omitempty"`
}

// NewRepetitiveVar instantiates a new RepetitiveVar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepetitiveVar() *RepetitiveVar {
	this := RepetitiveVar{}
	return &this
}

// NewRepetitiveVarWithDefaults instantiates a new RepetitiveVar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepetitiveVarWithDefaults() *RepetitiveVar {
	this := RepetitiveVar{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RepetitiveVar) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepetitiveVar) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RepetitiveVar) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RepetitiveVar) SetName(v string) {
	o.Name = &v
}

func (o RepetitiveVar) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepetitiveVar) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableRepetitiveVar struct {
	value *RepetitiveVar
	isSet bool
}

func (v NullableRepetitiveVar) Get() *RepetitiveVar {
	return v.value
}

func (v *NullableRepetitiveVar) Set(val *RepetitiveVar) {
	v.value = val
	v.isSet = true
}

func (v NullableRepetitiveVar) IsSet() bool {
	return v.isSet
}

func (v *NullableRepetitiveVar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepetitiveVar(val *RepetitiveVar) *NullableRepetitiveVar {
	return &NullableRepetitiveVar{value: val, isSet: true}
}

func (v NullableRepetitiveVar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepetitiveVar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


