/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the FilterSourceLogs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterSourceLogs{}

// FilterSourceLogs Defines the type of data the filter applies to.
type FilterSourceLogs struct {
	Logs *FilterLogsFilter `json:"logs,omitempty"`
}

// NewFilterSourceLogs instantiates a new FilterSourceLogs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterSourceLogs() *FilterSourceLogs {
	this := FilterSourceLogs{}
	return &this
}

// NewFilterSourceLogsWithDefaults instantiates a new FilterSourceLogs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterSourceLogsWithDefaults() *FilterSourceLogs {
	this := FilterSourceLogs{}
	return &this
}

// GetLogs returns the Logs field value if set, zero value otherwise.
func (o *FilterSourceLogs) GetLogs() FilterLogsFilter {
	if o == nil || IsNil(o.Logs) {
		var ret FilterLogsFilter
		return ret
	}
	return *o.Logs
}

// GetLogsOk returns a tuple with the Logs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterSourceLogs) GetLogsOk() (*FilterLogsFilter, bool) {
	if o == nil || IsNil(o.Logs) {
		return nil, false
	}
	return o.Logs, true
}

// HasLogs returns a boolean if a field has been set.
func (o *FilterSourceLogs) HasLogs() bool {
	if o != nil && !IsNil(o.Logs) {
		return true
	}

	return false
}

// SetLogs gets a reference to the given FilterLogsFilter and assigns it to the Logs field.
func (o *FilterSourceLogs) SetLogs(v FilterLogsFilter) {
	o.Logs = &v
}

func (o FilterSourceLogs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterSourceLogs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Logs) {
		toSerialize["logs"] = o.Logs
	}
	return toSerialize, nil
}

type NullableFilterSourceLogs struct {
	value *FilterSourceLogs
	isSet bool
}

func (v NullableFilterSourceLogs) Get() *FilterSourceLogs {
	return v.value
}

func (v *NullableFilterSourceLogs) Set(val *FilterSourceLogs) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterSourceLogs) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterSourceLogs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterSourceLogs(val *FilterSourceLogs) *NullableFilterSourceLogs {
	return &NullableFilterSourceLogs{value: val, isSet: true}
}

func (v NullableFilterSourceLogs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterSourceLogs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


