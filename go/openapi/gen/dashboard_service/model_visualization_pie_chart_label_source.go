/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// VisualizationPieChartLabelSource the model 'VisualizationPieChartLabelSource'
type VisualizationPieChartLabelSource string

// List of Visualization.PieChart.LabelSource
const (
	VISUALIZATIONPIECHARTLABELSOURCE_LABEL_SOURCE_UNSPECIFIED VisualizationPieChartLabelSource = "LABEL_SOURCE_UNSPECIFIED"
	VISUALIZATIONPIECHARTLABELSOURCE_LABEL_SOURCE_INNER VisualizationPieChartLabelSource = "LABEL_SOURCE_INNER"
	VISUALIZATIONPIECHARTLABELSOURCE_LABEL_SOURCE_STACK VisualizationPieChartLabelSource = "LABEL_SOURCE_STACK"
)

// All allowed values of VisualizationPieChartLabelSource enum
var AllowedVisualizationPieChartLabelSourceEnumValues = []VisualizationPieChartLabelSource{
	"LABEL_SOURCE_UNSPECIFIED",
	"LABEL_SOURCE_INNER",
	"LABEL_SOURCE_STACK",
}

func (v *VisualizationPieChartLabelSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VisualizationPieChartLabelSource(value)
	for _, existing := range AllowedVisualizationPieChartLabelSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VisualizationPieChartLabelSource", value)
}

// NewVisualizationPieChartLabelSourceFromValue returns a pointer to a valid VisualizationPieChartLabelSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVisualizationPieChartLabelSourceFromValue(v string) (*VisualizationPieChartLabelSource, error) {
	ev := VisualizationPieChartLabelSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VisualizationPieChartLabelSource: valid values are %v", v, AllowedVisualizationPieChartLabelSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VisualizationPieChartLabelSource) IsValid() bool {
	for _, existing := range AllowedVisualizationPieChartLabelSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Visualization.PieChart.LabelSource value
func (v VisualizationPieChartLabelSource) Ptr() *VisualizationPieChartLabelSource {
	return &v
}

type NullableVisualizationPieChartLabelSource struct {
	value *VisualizationPieChartLabelSource
	isSet bool
}

func (v NullableVisualizationPieChartLabelSource) Get() *VisualizationPieChartLabelSource {
	return v.value
}

func (v *NullableVisualizationPieChartLabelSource) Set(val *VisualizationPieChartLabelSource) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualizationPieChartLabelSource) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualizationPieChartLabelSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualizationPieChartLabelSource(val *VisualizationPieChartLabelSource) *NullableVisualizationPieChartLabelSource {
	return &NullableVisualizationPieChartLabelSource{value: val, isSet: true}
}

func (v NullableVisualizationPieChartLabelSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualizationPieChartLabelSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

