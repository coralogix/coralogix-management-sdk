/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the VisualizationOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VisualizationOneOf{}

// VisualizationOneOf struct for VisualizationOneOf
type VisualizationOneOf struct {
	Table *Table `json:"table,omitempty"`
}

// NewVisualizationOneOf instantiates a new VisualizationOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisualizationOneOf() *VisualizationOneOf {
	this := VisualizationOneOf{}
	return &this
}

// NewVisualizationOneOfWithDefaults instantiates a new VisualizationOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisualizationOneOfWithDefaults() *VisualizationOneOf {
	this := VisualizationOneOf{}
	return &this
}

// GetTable returns the Table field value if set, zero value otherwise.
func (o *VisualizationOneOf) GetTable() Table {
	if o == nil || IsNil(o.Table) {
		var ret Table
		return ret
	}
	return *o.Table
}

// GetTableOk returns a tuple with the Table field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationOneOf) GetTableOk() (*Table, bool) {
	if o == nil || IsNil(o.Table) {
		return nil, false
	}
	return o.Table, true
}

// HasTable returns a boolean if a field has been set.
func (o *VisualizationOneOf) HasTable() bool {
	if o != nil && !IsNil(o.Table) {
		return true
	}

	return false
}

// SetTable gets a reference to the given Table and assigns it to the Table field.
func (o *VisualizationOneOf) SetTable(v Table) {
	o.Table = &v
}

func (o VisualizationOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VisualizationOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Table) {
		toSerialize["table"] = o.Table
	}
	return toSerialize, nil
}

type NullableVisualizationOneOf struct {
	value *VisualizationOneOf
	isSet bool
}

func (v NullableVisualizationOneOf) Get() *VisualizationOneOf {
	return v.value
}

func (v *NullableVisualizationOneOf) Set(val *VisualizationOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualizationOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualizationOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualizationOneOf(val *VisualizationOneOf) *NullableVisualizationOneOf {
	return &NullableVisualizationOneOf{value: val, isSet: true}
}

func (v NullableVisualizationOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualizationOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


