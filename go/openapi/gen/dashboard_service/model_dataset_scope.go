/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// DatasetScope the model 'DatasetScope'
type DatasetScope string

// List of DatasetScope
const (
	DATASETSCOPE_DATASET_SCOPE_UNSPECIFIED DatasetScope = "DATASET_SCOPE_UNSPECIFIED"
	DATASETSCOPE_DATASET_SCOPE_USER_DATA DatasetScope = "DATASET_SCOPE_USER_DATA"
	DATASETSCOPE_DATASET_SCOPE_LABEL DatasetScope = "DATASET_SCOPE_LABEL"
	DATASETSCOPE_DATASET_SCOPE_METADATA DatasetScope = "DATASET_SCOPE_METADATA"
)

// All allowed values of DatasetScope enum
var AllowedDatasetScopeEnumValues = []DatasetScope{
	"DATASET_SCOPE_UNSPECIFIED",
	"DATASET_SCOPE_USER_DATA",
	"DATASET_SCOPE_LABEL",
	"DATASET_SCOPE_METADATA",
}

func (v *DatasetScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DatasetScope(value)
	for _, existing := range AllowedDatasetScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DatasetScope", value)
}

// NewDatasetScopeFromValue returns a pointer to a valid DatasetScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDatasetScopeFromValue(v string) (*DatasetScope, error) {
	ev := DatasetScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DatasetScope: valid values are %v", v, AllowedDatasetScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DatasetScope) IsValid() bool {
	for _, existing := range AllowedDatasetScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DatasetScope value
func (v DatasetScope) Ptr() *DatasetScope {
	return &v
}

type NullableDatasetScope struct {
	value *DatasetScope
	isSet bool
}

func (v NullableDatasetScope) Get() *DatasetScope {
	return v.value
}

func (v *NullableDatasetScope) Set(val *DatasetScope) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasetScope) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasetScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasetScope(val *DatasetScope) *NullableDatasetScope {
	return &NullableDatasetScope{value: val, isSet: true}
}

func (v NullableDatasetScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasetScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

