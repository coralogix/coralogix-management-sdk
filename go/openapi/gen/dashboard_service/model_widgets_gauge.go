/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the WidgetsGauge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WidgetsGauge{}

// WidgetsGauge struct for WidgetsGauge
type WidgetsGauge struct {
	// Custom unit (requires to have unit field set as 'custom' to take effect)
	CustomUnit *string `json:"customUnit,omitempty"`
	DataModeType *WidgetsCommonDataModeType `json:"dataModeType,omitempty"`
	// Number indicating the decimal precision of the numeric values, within range 0-15
	Decimal *int32 `json:"decimal,omitempty"`
	// Whether to render numeric value without abbreviation
	DecimalPrecision *bool `json:"decimalPrecision,omitempty"`
	// (multigauge display only) Whether to show the series names above the value
	DisplaySeriesName *bool `json:"displaySeriesName,omitempty"`
	Legend *Legend `json:"legend,omitempty"`
	LegendBy *LegendBy `json:"legendBy,omitempty"`
	// A maximum gauge value used in percentage threshold calculation and for visual value representation
	Max *float64 `json:"max,omitempty"`
	// A minimum gauge value used in percentage threshold calculation and for visual value representation
	Min *float64 `json:"min,omitempty"`
	Query *GaugeQuery `json:"query,omitempty"`
	// Whether to show the inner arc of gauge which graphically represents the value
	ShowInnerArc *bool `json:"showInnerArc,omitempty"`
	// Whether to show the outer arc of gauge which graphically represents the min/max range
	ShowOuterArc *bool `json:"showOuterArc,omitempty"`
	ThresholdBy *GaugeThresholdBy `json:"thresholdBy,omitempty"`
	ThresholdType *ThresholdType `json:"thresholdType,omitempty"`
	Thresholds []GaugeThreshold `json:"thresholds,omitempty"`
	Unit *GaugeUnit `json:"unit,omitempty"`
}

// NewWidgetsGauge instantiates a new WidgetsGauge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWidgetsGauge() *WidgetsGauge {
	this := WidgetsGauge{}
	return &this
}

// NewWidgetsGaugeWithDefaults instantiates a new WidgetsGauge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWidgetsGaugeWithDefaults() *WidgetsGauge {
	this := WidgetsGauge{}
	return &this
}

// GetCustomUnit returns the CustomUnit field value if set, zero value otherwise.
func (o *WidgetsGauge) GetCustomUnit() string {
	if o == nil || IsNil(o.CustomUnit) {
		var ret string
		return ret
	}
	return *o.CustomUnit
}

// GetCustomUnitOk returns a tuple with the CustomUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsGauge) GetCustomUnitOk() (*string, bool) {
	if o == nil || IsNil(o.CustomUnit) {
		return nil, false
	}
	return o.CustomUnit, true
}

// HasCustomUnit returns a boolean if a field has been set.
func (o *WidgetsGauge) HasCustomUnit() bool {
	if o != nil && !IsNil(o.CustomUnit) {
		return true
	}

	return false
}

// SetCustomUnit gets a reference to the given string and assigns it to the CustomUnit field.
func (o *WidgetsGauge) SetCustomUnit(v string) {
	o.CustomUnit = &v
}

// GetDataModeType returns the DataModeType field value if set, zero value otherwise.
func (o *WidgetsGauge) GetDataModeType() WidgetsCommonDataModeType {
	if o == nil || IsNil(o.DataModeType) {
		var ret WidgetsCommonDataModeType
		return ret
	}
	return *o.DataModeType
}

// GetDataModeTypeOk returns a tuple with the DataModeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsGauge) GetDataModeTypeOk() (*WidgetsCommonDataModeType, bool) {
	if o == nil || IsNil(o.DataModeType) {
		return nil, false
	}
	return o.DataModeType, true
}

// HasDataModeType returns a boolean if a field has been set.
func (o *WidgetsGauge) HasDataModeType() bool {
	if o != nil && !IsNil(o.DataModeType) {
		return true
	}

	return false
}

// SetDataModeType gets a reference to the given WidgetsCommonDataModeType and assigns it to the DataModeType field.
func (o *WidgetsGauge) SetDataModeType(v WidgetsCommonDataModeType) {
	o.DataModeType = &v
}

// GetDecimal returns the Decimal field value if set, zero value otherwise.
func (o *WidgetsGauge) GetDecimal() int32 {
	if o == nil || IsNil(o.Decimal) {
		var ret int32
		return ret
	}
	return *o.Decimal
}

// GetDecimalOk returns a tuple with the Decimal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsGauge) GetDecimalOk() (*int32, bool) {
	if o == nil || IsNil(o.Decimal) {
		return nil, false
	}
	return o.Decimal, true
}

// HasDecimal returns a boolean if a field has been set.
func (o *WidgetsGauge) HasDecimal() bool {
	if o != nil && !IsNil(o.Decimal) {
		return true
	}

	return false
}

// SetDecimal gets a reference to the given int32 and assigns it to the Decimal field.
func (o *WidgetsGauge) SetDecimal(v int32) {
	o.Decimal = &v
}

// GetDecimalPrecision returns the DecimalPrecision field value if set, zero value otherwise.
func (o *WidgetsGauge) GetDecimalPrecision() bool {
	if o == nil || IsNil(o.DecimalPrecision) {
		var ret bool
		return ret
	}
	return *o.DecimalPrecision
}

// GetDecimalPrecisionOk returns a tuple with the DecimalPrecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsGauge) GetDecimalPrecisionOk() (*bool, bool) {
	if o == nil || IsNil(o.DecimalPrecision) {
		return nil, false
	}
	return o.DecimalPrecision, true
}

// HasDecimalPrecision returns a boolean if a field has been set.
func (o *WidgetsGauge) HasDecimalPrecision() bool {
	if o != nil && !IsNil(o.DecimalPrecision) {
		return true
	}

	return false
}

// SetDecimalPrecision gets a reference to the given bool and assigns it to the DecimalPrecision field.
func (o *WidgetsGauge) SetDecimalPrecision(v bool) {
	o.DecimalPrecision = &v
}

// GetDisplaySeriesName returns the DisplaySeriesName field value if set, zero value otherwise.
func (o *WidgetsGauge) GetDisplaySeriesName() bool {
	if o == nil || IsNil(o.DisplaySeriesName) {
		var ret bool
		return ret
	}
	return *o.DisplaySeriesName
}

// GetDisplaySeriesNameOk returns a tuple with the DisplaySeriesName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsGauge) GetDisplaySeriesNameOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplaySeriesName) {
		return nil, false
	}
	return o.DisplaySeriesName, true
}

// HasDisplaySeriesName returns a boolean if a field has been set.
func (o *WidgetsGauge) HasDisplaySeriesName() bool {
	if o != nil && !IsNil(o.DisplaySeriesName) {
		return true
	}

	return false
}

// SetDisplaySeriesName gets a reference to the given bool and assigns it to the DisplaySeriesName field.
func (o *WidgetsGauge) SetDisplaySeriesName(v bool) {
	o.DisplaySeriesName = &v
}

// GetLegend returns the Legend field value if set, zero value otherwise.
func (o *WidgetsGauge) GetLegend() Legend {
	if o == nil || IsNil(o.Legend) {
		var ret Legend
		return ret
	}
	return *o.Legend
}

// GetLegendOk returns a tuple with the Legend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsGauge) GetLegendOk() (*Legend, bool) {
	if o == nil || IsNil(o.Legend) {
		return nil, false
	}
	return o.Legend, true
}

// HasLegend returns a boolean if a field has been set.
func (o *WidgetsGauge) HasLegend() bool {
	if o != nil && !IsNil(o.Legend) {
		return true
	}

	return false
}

// SetLegend gets a reference to the given Legend and assigns it to the Legend field.
func (o *WidgetsGauge) SetLegend(v Legend) {
	o.Legend = &v
}

// GetLegendBy returns the LegendBy field value if set, zero value otherwise.
func (o *WidgetsGauge) GetLegendBy() LegendBy {
	if o == nil || IsNil(o.LegendBy) {
		var ret LegendBy
		return ret
	}
	return *o.LegendBy
}

// GetLegendByOk returns a tuple with the LegendBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsGauge) GetLegendByOk() (*LegendBy, bool) {
	if o == nil || IsNil(o.LegendBy) {
		return nil, false
	}
	return o.LegendBy, true
}

// HasLegendBy returns a boolean if a field has been set.
func (o *WidgetsGauge) HasLegendBy() bool {
	if o != nil && !IsNil(o.LegendBy) {
		return true
	}

	return false
}

// SetLegendBy gets a reference to the given LegendBy and assigns it to the LegendBy field.
func (o *WidgetsGauge) SetLegendBy(v LegendBy) {
	o.LegendBy = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *WidgetsGauge) GetMax() float64 {
	if o == nil || IsNil(o.Max) {
		var ret float64
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsGauge) GetMaxOk() (*float64, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *WidgetsGauge) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given float64 and assigns it to the Max field.
func (o *WidgetsGauge) SetMax(v float64) {
	o.Max = &v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *WidgetsGauge) GetMin() float64 {
	if o == nil || IsNil(o.Min) {
		var ret float64
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsGauge) GetMinOk() (*float64, bool) {
	if o == nil || IsNil(o.Min) {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *WidgetsGauge) HasMin() bool {
	if o != nil && !IsNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given float64 and assigns it to the Min field.
func (o *WidgetsGauge) SetMin(v float64) {
	o.Min = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *WidgetsGauge) GetQuery() GaugeQuery {
	if o == nil || IsNil(o.Query) {
		var ret GaugeQuery
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsGauge) GetQueryOk() (*GaugeQuery, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *WidgetsGauge) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given GaugeQuery and assigns it to the Query field.
func (o *WidgetsGauge) SetQuery(v GaugeQuery) {
	o.Query = &v
}

// GetShowInnerArc returns the ShowInnerArc field value if set, zero value otherwise.
func (o *WidgetsGauge) GetShowInnerArc() bool {
	if o == nil || IsNil(o.ShowInnerArc) {
		var ret bool
		return ret
	}
	return *o.ShowInnerArc
}

// GetShowInnerArcOk returns a tuple with the ShowInnerArc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsGauge) GetShowInnerArcOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowInnerArc) {
		return nil, false
	}
	return o.ShowInnerArc, true
}

// HasShowInnerArc returns a boolean if a field has been set.
func (o *WidgetsGauge) HasShowInnerArc() bool {
	if o != nil && !IsNil(o.ShowInnerArc) {
		return true
	}

	return false
}

// SetShowInnerArc gets a reference to the given bool and assigns it to the ShowInnerArc field.
func (o *WidgetsGauge) SetShowInnerArc(v bool) {
	o.ShowInnerArc = &v
}

// GetShowOuterArc returns the ShowOuterArc field value if set, zero value otherwise.
func (o *WidgetsGauge) GetShowOuterArc() bool {
	if o == nil || IsNil(o.ShowOuterArc) {
		var ret bool
		return ret
	}
	return *o.ShowOuterArc
}

// GetShowOuterArcOk returns a tuple with the ShowOuterArc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsGauge) GetShowOuterArcOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowOuterArc) {
		return nil, false
	}
	return o.ShowOuterArc, true
}

// HasShowOuterArc returns a boolean if a field has been set.
func (o *WidgetsGauge) HasShowOuterArc() bool {
	if o != nil && !IsNil(o.ShowOuterArc) {
		return true
	}

	return false
}

// SetShowOuterArc gets a reference to the given bool and assigns it to the ShowOuterArc field.
func (o *WidgetsGauge) SetShowOuterArc(v bool) {
	o.ShowOuterArc = &v
}

// GetThresholdBy returns the ThresholdBy field value if set, zero value otherwise.
func (o *WidgetsGauge) GetThresholdBy() GaugeThresholdBy {
	if o == nil || IsNil(o.ThresholdBy) {
		var ret GaugeThresholdBy
		return ret
	}
	return *o.ThresholdBy
}

// GetThresholdByOk returns a tuple with the ThresholdBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsGauge) GetThresholdByOk() (*GaugeThresholdBy, bool) {
	if o == nil || IsNil(o.ThresholdBy) {
		return nil, false
	}
	return o.ThresholdBy, true
}

// HasThresholdBy returns a boolean if a field has been set.
func (o *WidgetsGauge) HasThresholdBy() bool {
	if o != nil && !IsNil(o.ThresholdBy) {
		return true
	}

	return false
}

// SetThresholdBy gets a reference to the given GaugeThresholdBy and assigns it to the ThresholdBy field.
func (o *WidgetsGauge) SetThresholdBy(v GaugeThresholdBy) {
	o.ThresholdBy = &v
}

// GetThresholdType returns the ThresholdType field value if set, zero value otherwise.
func (o *WidgetsGauge) GetThresholdType() ThresholdType {
	if o == nil || IsNil(o.ThresholdType) {
		var ret ThresholdType
		return ret
	}
	return *o.ThresholdType
}

// GetThresholdTypeOk returns a tuple with the ThresholdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsGauge) GetThresholdTypeOk() (*ThresholdType, bool) {
	if o == nil || IsNil(o.ThresholdType) {
		return nil, false
	}
	return o.ThresholdType, true
}

// HasThresholdType returns a boolean if a field has been set.
func (o *WidgetsGauge) HasThresholdType() bool {
	if o != nil && !IsNil(o.ThresholdType) {
		return true
	}

	return false
}

// SetThresholdType gets a reference to the given ThresholdType and assigns it to the ThresholdType field.
func (o *WidgetsGauge) SetThresholdType(v ThresholdType) {
	o.ThresholdType = &v
}

// GetThresholds returns the Thresholds field value if set, zero value otherwise.
func (o *WidgetsGauge) GetThresholds() []GaugeThreshold {
	if o == nil || IsNil(o.Thresholds) {
		var ret []GaugeThreshold
		return ret
	}
	return o.Thresholds
}

// GetThresholdsOk returns a tuple with the Thresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsGauge) GetThresholdsOk() ([]GaugeThreshold, bool) {
	if o == nil || IsNil(o.Thresholds) {
		return nil, false
	}
	return o.Thresholds, true
}

// HasThresholds returns a boolean if a field has been set.
func (o *WidgetsGauge) HasThresholds() bool {
	if o != nil && !IsNil(o.Thresholds) {
		return true
	}

	return false
}

// SetThresholds gets a reference to the given []GaugeThreshold and assigns it to the Thresholds field.
func (o *WidgetsGauge) SetThresholds(v []GaugeThreshold) {
	o.Thresholds = v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *WidgetsGauge) GetUnit() GaugeUnit {
	if o == nil || IsNil(o.Unit) {
		var ret GaugeUnit
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetsGauge) GetUnitOk() (*GaugeUnit, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *WidgetsGauge) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given GaugeUnit and assigns it to the Unit field.
func (o *WidgetsGauge) SetUnit(v GaugeUnit) {
	o.Unit = &v
}

func (o WidgetsGauge) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WidgetsGauge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomUnit) {
		toSerialize["customUnit"] = o.CustomUnit
	}
	if !IsNil(o.DataModeType) {
		toSerialize["dataModeType"] = o.DataModeType
	}
	if !IsNil(o.Decimal) {
		toSerialize["decimal"] = o.Decimal
	}
	if !IsNil(o.DecimalPrecision) {
		toSerialize["decimalPrecision"] = o.DecimalPrecision
	}
	if !IsNil(o.DisplaySeriesName) {
		toSerialize["displaySeriesName"] = o.DisplaySeriesName
	}
	if !IsNil(o.Legend) {
		toSerialize["legend"] = o.Legend
	}
	if !IsNil(o.LegendBy) {
		toSerialize["legendBy"] = o.LegendBy
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.ShowInnerArc) {
		toSerialize["showInnerArc"] = o.ShowInnerArc
	}
	if !IsNil(o.ShowOuterArc) {
		toSerialize["showOuterArc"] = o.ShowOuterArc
	}
	if !IsNil(o.ThresholdBy) {
		toSerialize["thresholdBy"] = o.ThresholdBy
	}
	if !IsNil(o.ThresholdType) {
		toSerialize["thresholdType"] = o.ThresholdType
	}
	if !IsNil(o.Thresholds) {
		toSerialize["thresholds"] = o.Thresholds
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	return toSerialize, nil
}

type NullableWidgetsGauge struct {
	value *WidgetsGauge
	isSet bool
}

func (v NullableWidgetsGauge) Get() *WidgetsGauge {
	return v.value
}

func (v *NullableWidgetsGauge) Set(val *WidgetsGauge) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetsGauge) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetsGauge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetsGauge(val *WidgetsGauge) *NullableWidgetsGauge {
	return &NullableWidgetsGauge{value: val, isSet: true}
}

func (v NullableWidgetsGauge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetsGauge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


