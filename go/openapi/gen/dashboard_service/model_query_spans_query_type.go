/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// QuerySpansQueryType - struct for QuerySpansQueryType
type QuerySpansQueryType struct {
	QuerySpansQueryTypeFieldName *QuerySpansQueryTypeFieldName
	QuerySpansQueryTypeFieldValue *QuerySpansQueryTypeFieldValue
}

// QuerySpansQueryTypeFieldNameAsQuerySpansQueryType is a convenience function that returns QuerySpansQueryTypeFieldName wrapped in QuerySpansQueryType
func QuerySpansQueryTypeFieldNameAsQuerySpansQueryType(v *QuerySpansQueryTypeFieldName) QuerySpansQueryType {
	return QuerySpansQueryType{
		QuerySpansQueryTypeFieldName: v,
	}
}

// QuerySpansQueryTypeFieldValueAsQuerySpansQueryType is a convenience function that returns QuerySpansQueryTypeFieldValue wrapped in QuerySpansQueryType
func QuerySpansQueryTypeFieldValueAsQuerySpansQueryType(v *QuerySpansQueryTypeFieldValue) QuerySpansQueryType {
	return QuerySpansQueryType{
		QuerySpansQueryTypeFieldValue: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *QuerySpansQueryType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into QuerySpansQueryTypeFieldName
	err = newStrictDecoder(data).Decode(&dst.QuerySpansQueryTypeFieldName)
	if err == nil {
		jsonQuerySpansQueryTypeFieldName, _ := json.Marshal(dst.QuerySpansQueryTypeFieldName)
		if string(jsonQuerySpansQueryTypeFieldName) == "{}" { // empty struct
			dst.QuerySpansQueryTypeFieldName = nil
		} else {
			if err = validator.Validate(dst.QuerySpansQueryTypeFieldName); err != nil {
				dst.QuerySpansQueryTypeFieldName = nil
			} else {
				match++
			}
		}
	} else {
		dst.QuerySpansQueryTypeFieldName = nil
	}

	// try to unmarshal data into QuerySpansQueryTypeFieldValue
	err = newStrictDecoder(data).Decode(&dst.QuerySpansQueryTypeFieldValue)
	if err == nil {
		jsonQuerySpansQueryTypeFieldValue, _ := json.Marshal(dst.QuerySpansQueryTypeFieldValue)
		if string(jsonQuerySpansQueryTypeFieldValue) == "{}" { // empty struct
			dst.QuerySpansQueryTypeFieldValue = nil
		} else {
			if err = validator.Validate(dst.QuerySpansQueryTypeFieldValue); err != nil {
				dst.QuerySpansQueryTypeFieldValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.QuerySpansQueryTypeFieldValue = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.QuerySpansQueryTypeFieldName = nil
		dst.QuerySpansQueryTypeFieldValue = nil

		return fmt.Errorf("data matches more than one schema in oneOf(QuerySpansQueryType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(QuerySpansQueryType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src QuerySpansQueryType) MarshalJSON() ([]byte, error) {
	if src.QuerySpansQueryTypeFieldName != nil {
		return json.Marshal(&src.QuerySpansQueryTypeFieldName)
	}

	if src.QuerySpansQueryTypeFieldValue != nil {
		return json.Marshal(&src.QuerySpansQueryTypeFieldValue)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *QuerySpansQueryType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.QuerySpansQueryTypeFieldName != nil {
		return obj.QuerySpansQueryTypeFieldName
	}

	if obj.QuerySpansQueryTypeFieldValue != nil {
		return obj.QuerySpansQueryTypeFieldValue
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj QuerySpansQueryType) GetActualInstanceValue() (interface{}) {
	if obj.QuerySpansQueryTypeFieldName != nil {
		return *obj.QuerySpansQueryTypeFieldName
	}

	if obj.QuerySpansQueryTypeFieldValue != nil {
		return *obj.QuerySpansQueryTypeFieldValue
	}

	// all schemas are nil
	return nil
}

type NullableQuerySpansQueryType struct {
	value *QuerySpansQueryType
	isSet bool
}

func (v NullableQuerySpansQueryType) Get() *QuerySpansQueryType {
	return v.value
}

func (v *NullableQuerySpansQueryType) Set(val *QuerySpansQueryType) {
	v.value = val
	v.isSet = true
}

func (v NullableQuerySpansQueryType) IsSet() bool {
	return v.isSet
}

func (v *NullableQuerySpansQueryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuerySpansQueryType(val *QuerySpansQueryType) *NullableQuerySpansQueryType {
	return &NullableQuerySpansQueryType{value: val, isSet: true}
}

func (v NullableQuerySpansQueryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuerySpansQueryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


