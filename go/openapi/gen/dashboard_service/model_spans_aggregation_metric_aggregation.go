/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the SpansAggregationMetricAggregation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpansAggregationMetricAggregation{}

// SpansAggregationMetricAggregation struct for SpansAggregationMetricAggregation
type SpansAggregationMetricAggregation struct {
	MetricAggregation *MetricAggregation `json:"metricAggregation,omitempty"`
}

// NewSpansAggregationMetricAggregation instantiates a new SpansAggregationMetricAggregation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpansAggregationMetricAggregation() *SpansAggregationMetricAggregation {
	this := SpansAggregationMetricAggregation{}
	return &this
}

// NewSpansAggregationMetricAggregationWithDefaults instantiates a new SpansAggregationMetricAggregation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpansAggregationMetricAggregationWithDefaults() *SpansAggregationMetricAggregation {
	this := SpansAggregationMetricAggregation{}
	return &this
}

// GetMetricAggregation returns the MetricAggregation field value if set, zero value otherwise.
func (o *SpansAggregationMetricAggregation) GetMetricAggregation() MetricAggregation {
	if o == nil || IsNil(o.MetricAggregation) {
		var ret MetricAggregation
		return ret
	}
	return *o.MetricAggregation
}

// GetMetricAggregationOk returns a tuple with the MetricAggregation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpansAggregationMetricAggregation) GetMetricAggregationOk() (*MetricAggregation, bool) {
	if o == nil || IsNil(o.MetricAggregation) {
		return nil, false
	}
	return o.MetricAggregation, true
}

// HasMetricAggregation returns a boolean if a field has been set.
func (o *SpansAggregationMetricAggregation) HasMetricAggregation() bool {
	if o != nil && !IsNil(o.MetricAggregation) {
		return true
	}

	return false
}

// SetMetricAggregation gets a reference to the given MetricAggregation and assigns it to the MetricAggregation field.
func (o *SpansAggregationMetricAggregation) SetMetricAggregation(v MetricAggregation) {
	o.MetricAggregation = &v
}

func (o SpansAggregationMetricAggregation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpansAggregationMetricAggregation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MetricAggregation) {
		toSerialize["metricAggregation"] = o.MetricAggregation
	}
	return toSerialize, nil
}

type NullableSpansAggregationMetricAggregation struct {
	value *SpansAggregationMetricAggregation
	isSet bool
}

func (v NullableSpansAggregationMetricAggregation) Get() *SpansAggregationMetricAggregation {
	return v.value
}

func (v *NullableSpansAggregationMetricAggregation) Set(val *SpansAggregationMetricAggregation) {
	v.value = val
	v.isSet = true
}

func (v NullableSpansAggregationMetricAggregation) IsSet() bool {
	return v.isSet
}

func (v *NullableSpansAggregationMetricAggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpansAggregationMetricAggregation(val *SpansAggregationMetricAggregation) *NullableSpansAggregationMetricAggregation {
	return &NullableSpansAggregationMetricAggregation{value: val, isSet: true}
}

func (v NullableSpansAggregationMetricAggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpansAggregationMetricAggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


