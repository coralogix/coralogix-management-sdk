/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Dashboard10 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dashboard10{}

// Dashboard10 Dashboard represents the structure and configuration of a Coralogix Custom Dashboard.
type Dashboard10 struct {
	Actions []DashboardAction `json:"actions,omitempty"`
	Annotations []Annotation `json:"annotations,omitempty"`
	// A brief description or summary of the dashboard's purpose or content
	Description *string `json:"description,omitempty"`
	Filters []FiltersFilter `json:"filters,omitempty"`
	FolderPath *FolderPath `json:"folderPath,omitempty"`
	// A unique identifier of the dashboard
	Id *string `json:"id,omitempty"`
	Layout Layout `json:"layout"`
	// The display name of the dashboard
	Name string `json:"name"`
	Off map[string]interface{} `json:"off,omitempty"`
	// Relative time frame specifying a duration from the current time
	RelativeTimeFrame *string `json:"relativeTimeFrame,omitempty"`
	// A unique slug name serving as an alias for accessing the dashboard
	SlugName *string `json:"slugName,omitempty"`
	Variables []Variable `json:"variables,omitempty"`
	VariablesV2 []VariableV2 `json:"variablesV2,omitempty"`
}

type _Dashboard10 Dashboard10

// NewDashboard10 instantiates a new Dashboard10 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboard10(layout Layout, name string) *Dashboard10 {
	this := Dashboard10{}
	this.Layout = layout
	this.Name = name
	return &this
}

// NewDashboard10WithDefaults instantiates a new Dashboard10 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboard10WithDefaults() *Dashboard10 {
	this := Dashboard10{}
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *Dashboard10) GetActions() []DashboardAction {
	if o == nil || IsNil(o.Actions) {
		var ret []DashboardAction
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard10) GetActionsOk() ([]DashboardAction, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *Dashboard10) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []DashboardAction and assigns it to the Actions field.
func (o *Dashboard10) SetActions(v []DashboardAction) {
	o.Actions = v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *Dashboard10) GetAnnotations() []Annotation {
	if o == nil || IsNil(o.Annotations) {
		var ret []Annotation
		return ret
	}
	return o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard10) GetAnnotationsOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *Dashboard10) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given []Annotation and assigns it to the Annotations field.
func (o *Dashboard10) SetAnnotations(v []Annotation) {
	o.Annotations = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Dashboard10) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard10) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Dashboard10) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Dashboard10) SetDescription(v string) {
	o.Description = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *Dashboard10) GetFilters() []FiltersFilter {
	if o == nil || IsNil(o.Filters) {
		var ret []FiltersFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard10) GetFiltersOk() ([]FiltersFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *Dashboard10) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []FiltersFilter and assigns it to the Filters field.
func (o *Dashboard10) SetFilters(v []FiltersFilter) {
	o.Filters = v
}

// GetFolderPath returns the FolderPath field value if set, zero value otherwise.
func (o *Dashboard10) GetFolderPath() FolderPath {
	if o == nil || IsNil(o.FolderPath) {
		var ret FolderPath
		return ret
	}
	return *o.FolderPath
}

// GetFolderPathOk returns a tuple with the FolderPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard10) GetFolderPathOk() (*FolderPath, bool) {
	if o == nil || IsNil(o.FolderPath) {
		return nil, false
	}
	return o.FolderPath, true
}

// HasFolderPath returns a boolean if a field has been set.
func (o *Dashboard10) HasFolderPath() bool {
	if o != nil && !IsNil(o.FolderPath) {
		return true
	}

	return false
}

// SetFolderPath gets a reference to the given FolderPath and assigns it to the FolderPath field.
func (o *Dashboard10) SetFolderPath(v FolderPath) {
	o.FolderPath = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Dashboard10) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard10) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Dashboard10) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Dashboard10) SetId(v string) {
	o.Id = &v
}

// GetLayout returns the Layout field value
func (o *Dashboard10) GetLayout() Layout {
	if o == nil {
		var ret Layout
		return ret
	}

	return o.Layout
}

// GetLayoutOk returns a tuple with the Layout field value
// and a boolean to check if the value has been set.
func (o *Dashboard10) GetLayoutOk() (*Layout, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Layout, true
}

// SetLayout sets field value
func (o *Dashboard10) SetLayout(v Layout) {
	o.Layout = v
}

// GetName returns the Name field value
func (o *Dashboard10) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Dashboard10) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Dashboard10) SetName(v string) {
	o.Name = v
}

// GetOff returns the Off field value if set, zero value otherwise.
func (o *Dashboard10) GetOff() map[string]interface{} {
	if o == nil || IsNil(o.Off) {
		var ret map[string]interface{}
		return ret
	}
	return o.Off
}

// GetOffOk returns a tuple with the Off field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard10) GetOffOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Off) {
		return map[string]interface{}{}, false
	}
	return o.Off, true
}

// HasOff returns a boolean if a field has been set.
func (o *Dashboard10) HasOff() bool {
	if o != nil && !IsNil(o.Off) {
		return true
	}

	return false
}

// SetOff gets a reference to the given map[string]interface{} and assigns it to the Off field.
func (o *Dashboard10) SetOff(v map[string]interface{}) {
	o.Off = v
}

// GetRelativeTimeFrame returns the RelativeTimeFrame field value if set, zero value otherwise.
func (o *Dashboard10) GetRelativeTimeFrame() string {
	if o == nil || IsNil(o.RelativeTimeFrame) {
		var ret string
		return ret
	}
	return *o.RelativeTimeFrame
}

// GetRelativeTimeFrameOk returns a tuple with the RelativeTimeFrame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard10) GetRelativeTimeFrameOk() (*string, bool) {
	if o == nil || IsNil(o.RelativeTimeFrame) {
		return nil, false
	}
	return o.RelativeTimeFrame, true
}

// HasRelativeTimeFrame returns a boolean if a field has been set.
func (o *Dashboard10) HasRelativeTimeFrame() bool {
	if o != nil && !IsNil(o.RelativeTimeFrame) {
		return true
	}

	return false
}

// SetRelativeTimeFrame gets a reference to the given string and assigns it to the RelativeTimeFrame field.
func (o *Dashboard10) SetRelativeTimeFrame(v string) {
	o.RelativeTimeFrame = &v
}

// GetSlugName returns the SlugName field value if set, zero value otherwise.
func (o *Dashboard10) GetSlugName() string {
	if o == nil || IsNil(o.SlugName) {
		var ret string
		return ret
	}
	return *o.SlugName
}

// GetSlugNameOk returns a tuple with the SlugName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard10) GetSlugNameOk() (*string, bool) {
	if o == nil || IsNil(o.SlugName) {
		return nil, false
	}
	return o.SlugName, true
}

// HasSlugName returns a boolean if a field has been set.
func (o *Dashboard10) HasSlugName() bool {
	if o != nil && !IsNil(o.SlugName) {
		return true
	}

	return false
}

// SetSlugName gets a reference to the given string and assigns it to the SlugName field.
func (o *Dashboard10) SetSlugName(v string) {
	o.SlugName = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *Dashboard10) GetVariables() []Variable {
	if o == nil || IsNil(o.Variables) {
		var ret []Variable
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard10) GetVariablesOk() ([]Variable, bool) {
	if o == nil || IsNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *Dashboard10) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []Variable and assigns it to the Variables field.
func (o *Dashboard10) SetVariables(v []Variable) {
	o.Variables = v
}

// GetVariablesV2 returns the VariablesV2 field value if set, zero value otherwise.
func (o *Dashboard10) GetVariablesV2() []VariableV2 {
	if o == nil || IsNil(o.VariablesV2) {
		var ret []VariableV2
		return ret
	}
	return o.VariablesV2
}

// GetVariablesV2Ok returns a tuple with the VariablesV2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard10) GetVariablesV2Ok() ([]VariableV2, bool) {
	if o == nil || IsNil(o.VariablesV2) {
		return nil, false
	}
	return o.VariablesV2, true
}

// HasVariablesV2 returns a boolean if a field has been set.
func (o *Dashboard10) HasVariablesV2() bool {
	if o != nil && !IsNil(o.VariablesV2) {
		return true
	}

	return false
}

// SetVariablesV2 gets a reference to the given []VariableV2 and assigns it to the VariablesV2 field.
func (o *Dashboard10) SetVariablesV2(v []VariableV2) {
	o.VariablesV2 = v
}

func (o Dashboard10) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dashboard10) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.FolderPath) {
		toSerialize["folderPath"] = o.FolderPath
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["layout"] = o.Layout
	toSerialize["name"] = o.Name
	if !IsNil(o.Off) {
		toSerialize["off"] = o.Off
	}
	if !IsNil(o.RelativeTimeFrame) {
		toSerialize["relativeTimeFrame"] = o.RelativeTimeFrame
	}
	if !IsNil(o.SlugName) {
		toSerialize["slugName"] = o.SlugName
	}
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if !IsNil(o.VariablesV2) {
		toSerialize["variablesV2"] = o.VariablesV2
	}
	return toSerialize, nil
}

func (o *Dashboard10) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"layout",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDashboard10 := _Dashboard10{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDashboard10)

	if err != nil {
		return err
	}

	*o = Dashboard10(varDashboard10)

	return err
}

type NullableDashboard10 struct {
	value *Dashboard10
	isSet bool
}

func (v NullableDashboard10) Get() *Dashboard10 {
	return v.value
}

func (v *NullableDashboard10) Set(val *Dashboard10) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboard10) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboard10) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboard10(val *Dashboard10) *NullableDashboard10 {
	return &NullableDashboard10{value: val, isSet: true}
}

func (v NullableDashboard10) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboard10) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


