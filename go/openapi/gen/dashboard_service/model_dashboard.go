/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Dashboard - struct for Dashboard
type Dashboard struct {
	Dashboard1 *Dashboard1
	Dashboard10 *Dashboard10
	Dashboard11 *Dashboard11
	Dashboard12 *Dashboard12
	Dashboard2 *Dashboard2
	Dashboard3 *Dashboard3
	Dashboard4 *Dashboard4
	Dashboard5 *Dashboard5
	Dashboard6 *Dashboard6
	Dashboard7 *Dashboard7
	Dashboard8 *Dashboard8
	Dashboard9 *Dashboard9
}

// Dashboard1AsDashboard is a convenience function that returns Dashboard1 wrapped in Dashboard
func Dashboard1AsDashboard(v *Dashboard1) Dashboard {
	return Dashboard{
		Dashboard1: v,
	}
}

// Dashboard10AsDashboard is a convenience function that returns Dashboard10 wrapped in Dashboard
func Dashboard10AsDashboard(v *Dashboard10) Dashboard {
	return Dashboard{
		Dashboard10: v,
	}
}

// Dashboard11AsDashboard is a convenience function that returns Dashboard11 wrapped in Dashboard
func Dashboard11AsDashboard(v *Dashboard11) Dashboard {
	return Dashboard{
		Dashboard11: v,
	}
}

// Dashboard12AsDashboard is a convenience function that returns Dashboard12 wrapped in Dashboard
func Dashboard12AsDashboard(v *Dashboard12) Dashboard {
	return Dashboard{
		Dashboard12: v,
	}
}

// Dashboard2AsDashboard is a convenience function that returns Dashboard2 wrapped in Dashboard
func Dashboard2AsDashboard(v *Dashboard2) Dashboard {
	return Dashboard{
		Dashboard2: v,
	}
}

// Dashboard3AsDashboard is a convenience function that returns Dashboard3 wrapped in Dashboard
func Dashboard3AsDashboard(v *Dashboard3) Dashboard {
	return Dashboard{
		Dashboard3: v,
	}
}

// Dashboard4AsDashboard is a convenience function that returns Dashboard4 wrapped in Dashboard
func Dashboard4AsDashboard(v *Dashboard4) Dashboard {
	return Dashboard{
		Dashboard4: v,
	}
}

// Dashboard5AsDashboard is a convenience function that returns Dashboard5 wrapped in Dashboard
func Dashboard5AsDashboard(v *Dashboard5) Dashboard {
	return Dashboard{
		Dashboard5: v,
	}
}

// Dashboard6AsDashboard is a convenience function that returns Dashboard6 wrapped in Dashboard
func Dashboard6AsDashboard(v *Dashboard6) Dashboard {
	return Dashboard{
		Dashboard6: v,
	}
}

// Dashboard7AsDashboard is a convenience function that returns Dashboard7 wrapped in Dashboard
func Dashboard7AsDashboard(v *Dashboard7) Dashboard {
	return Dashboard{
		Dashboard7: v,
	}
}

// Dashboard8AsDashboard is a convenience function that returns Dashboard8 wrapped in Dashboard
func Dashboard8AsDashboard(v *Dashboard8) Dashboard {
	return Dashboard{
		Dashboard8: v,
	}
}

// Dashboard9AsDashboard is a convenience function that returns Dashboard9 wrapped in Dashboard
func Dashboard9AsDashboard(v *Dashboard9) Dashboard {
	return Dashboard{
		Dashboard9: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Dashboard) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Dashboard1
	err = newStrictDecoder(data).Decode(&dst.Dashboard1)
	if err == nil {
		jsonDashboard1, _ := json.Marshal(dst.Dashboard1)
		if string(jsonDashboard1) == "{}" { // empty struct
			dst.Dashboard1 = nil
		} else {
			if err = validator.Validate(dst.Dashboard1); err != nil {
				dst.Dashboard1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Dashboard1 = nil
	}

	// try to unmarshal data into Dashboard10
	err = newStrictDecoder(data).Decode(&dst.Dashboard10)
	if err == nil {
		jsonDashboard10, _ := json.Marshal(dst.Dashboard10)
		if string(jsonDashboard10) == "{}" { // empty struct
			dst.Dashboard10 = nil
		} else {
			if err = validator.Validate(dst.Dashboard10); err != nil {
				dst.Dashboard10 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Dashboard10 = nil
	}

	// try to unmarshal data into Dashboard11
	err = newStrictDecoder(data).Decode(&dst.Dashboard11)
	if err == nil {
		jsonDashboard11, _ := json.Marshal(dst.Dashboard11)
		if string(jsonDashboard11) == "{}" { // empty struct
			dst.Dashboard11 = nil
		} else {
			if err = validator.Validate(dst.Dashboard11); err != nil {
				dst.Dashboard11 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Dashboard11 = nil
	}

	// try to unmarshal data into Dashboard12
	err = newStrictDecoder(data).Decode(&dst.Dashboard12)
	if err == nil {
		jsonDashboard12, _ := json.Marshal(dst.Dashboard12)
		if string(jsonDashboard12) == "{}" { // empty struct
			dst.Dashboard12 = nil
		} else {
			if err = validator.Validate(dst.Dashboard12); err != nil {
				dst.Dashboard12 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Dashboard12 = nil
	}

	// try to unmarshal data into Dashboard2
	err = newStrictDecoder(data).Decode(&dst.Dashboard2)
	if err == nil {
		jsonDashboard2, _ := json.Marshal(dst.Dashboard2)
		if string(jsonDashboard2) == "{}" { // empty struct
			dst.Dashboard2 = nil
		} else {
			if err = validator.Validate(dst.Dashboard2); err != nil {
				dst.Dashboard2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Dashboard2 = nil
	}

	// try to unmarshal data into Dashboard3
	err = newStrictDecoder(data).Decode(&dst.Dashboard3)
	if err == nil {
		jsonDashboard3, _ := json.Marshal(dst.Dashboard3)
		if string(jsonDashboard3) == "{}" { // empty struct
			dst.Dashboard3 = nil
		} else {
			if err = validator.Validate(dst.Dashboard3); err != nil {
				dst.Dashboard3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Dashboard3 = nil
	}

	// try to unmarshal data into Dashboard4
	err = newStrictDecoder(data).Decode(&dst.Dashboard4)
	if err == nil {
		jsonDashboard4, _ := json.Marshal(dst.Dashboard4)
		if string(jsonDashboard4) == "{}" { // empty struct
			dst.Dashboard4 = nil
		} else {
			if err = validator.Validate(dst.Dashboard4); err != nil {
				dst.Dashboard4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Dashboard4 = nil
	}

	// try to unmarshal data into Dashboard5
	err = newStrictDecoder(data).Decode(&dst.Dashboard5)
	if err == nil {
		jsonDashboard5, _ := json.Marshal(dst.Dashboard5)
		if string(jsonDashboard5) == "{}" { // empty struct
			dst.Dashboard5 = nil
		} else {
			if err = validator.Validate(dst.Dashboard5); err != nil {
				dst.Dashboard5 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Dashboard5 = nil
	}

	// try to unmarshal data into Dashboard6
	err = newStrictDecoder(data).Decode(&dst.Dashboard6)
	if err == nil {
		jsonDashboard6, _ := json.Marshal(dst.Dashboard6)
		if string(jsonDashboard6) == "{}" { // empty struct
			dst.Dashboard6 = nil
		} else {
			if err = validator.Validate(dst.Dashboard6); err != nil {
				dst.Dashboard6 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Dashboard6 = nil
	}

	// try to unmarshal data into Dashboard7
	err = newStrictDecoder(data).Decode(&dst.Dashboard7)
	if err == nil {
		jsonDashboard7, _ := json.Marshal(dst.Dashboard7)
		if string(jsonDashboard7) == "{}" { // empty struct
			dst.Dashboard7 = nil
		} else {
			if err = validator.Validate(dst.Dashboard7); err != nil {
				dst.Dashboard7 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Dashboard7 = nil
	}

	// try to unmarshal data into Dashboard8
	err = newStrictDecoder(data).Decode(&dst.Dashboard8)
	if err == nil {
		jsonDashboard8, _ := json.Marshal(dst.Dashboard8)
		if string(jsonDashboard8) == "{}" { // empty struct
			dst.Dashboard8 = nil
		} else {
			if err = validator.Validate(dst.Dashboard8); err != nil {
				dst.Dashboard8 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Dashboard8 = nil
	}

	// try to unmarshal data into Dashboard9
	err = newStrictDecoder(data).Decode(&dst.Dashboard9)
	if err == nil {
		jsonDashboard9, _ := json.Marshal(dst.Dashboard9)
		if string(jsonDashboard9) == "{}" { // empty struct
			dst.Dashboard9 = nil
		} else {
			if err = validator.Validate(dst.Dashboard9); err != nil {
				dst.Dashboard9 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Dashboard9 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Dashboard1 = nil
		dst.Dashboard10 = nil
		dst.Dashboard11 = nil
		dst.Dashboard12 = nil
		dst.Dashboard2 = nil
		dst.Dashboard3 = nil
		dst.Dashboard4 = nil
		dst.Dashboard5 = nil
		dst.Dashboard6 = nil
		dst.Dashboard7 = nil
		dst.Dashboard8 = nil
		dst.Dashboard9 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Dashboard)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Dashboard)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Dashboard) MarshalJSON() ([]byte, error) {
	if src.Dashboard1 != nil {
		return json.Marshal(&src.Dashboard1)
	}

	if src.Dashboard10 != nil {
		return json.Marshal(&src.Dashboard10)
	}

	if src.Dashboard11 != nil {
		return json.Marshal(&src.Dashboard11)
	}

	if src.Dashboard12 != nil {
		return json.Marshal(&src.Dashboard12)
	}

	if src.Dashboard2 != nil {
		return json.Marshal(&src.Dashboard2)
	}

	if src.Dashboard3 != nil {
		return json.Marshal(&src.Dashboard3)
	}

	if src.Dashboard4 != nil {
		return json.Marshal(&src.Dashboard4)
	}

	if src.Dashboard5 != nil {
		return json.Marshal(&src.Dashboard5)
	}

	if src.Dashboard6 != nil {
		return json.Marshal(&src.Dashboard6)
	}

	if src.Dashboard7 != nil {
		return json.Marshal(&src.Dashboard7)
	}

	if src.Dashboard8 != nil {
		return json.Marshal(&src.Dashboard8)
	}

	if src.Dashboard9 != nil {
		return json.Marshal(&src.Dashboard9)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Dashboard) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Dashboard1 != nil {
		return obj.Dashboard1
	}

	if obj.Dashboard10 != nil {
		return obj.Dashboard10
	}

	if obj.Dashboard11 != nil {
		return obj.Dashboard11
	}

	if obj.Dashboard12 != nil {
		return obj.Dashboard12
	}

	if obj.Dashboard2 != nil {
		return obj.Dashboard2
	}

	if obj.Dashboard3 != nil {
		return obj.Dashboard3
	}

	if obj.Dashboard4 != nil {
		return obj.Dashboard4
	}

	if obj.Dashboard5 != nil {
		return obj.Dashboard5
	}

	if obj.Dashboard6 != nil {
		return obj.Dashboard6
	}

	if obj.Dashboard7 != nil {
		return obj.Dashboard7
	}

	if obj.Dashboard8 != nil {
		return obj.Dashboard8
	}

	if obj.Dashboard9 != nil {
		return obj.Dashboard9
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Dashboard) GetActualInstanceValue() (interface{}) {
	if obj.Dashboard1 != nil {
		return *obj.Dashboard1
	}

	if obj.Dashboard10 != nil {
		return *obj.Dashboard10
	}

	if obj.Dashboard11 != nil {
		return *obj.Dashboard11
	}

	if obj.Dashboard12 != nil {
		return *obj.Dashboard12
	}

	if obj.Dashboard2 != nil {
		return *obj.Dashboard2
	}

	if obj.Dashboard3 != nil {
		return *obj.Dashboard3
	}

	if obj.Dashboard4 != nil {
		return *obj.Dashboard4
	}

	if obj.Dashboard5 != nil {
		return *obj.Dashboard5
	}

	if obj.Dashboard6 != nil {
		return *obj.Dashboard6
	}

	if obj.Dashboard7 != nil {
		return *obj.Dashboard7
	}

	if obj.Dashboard8 != nil {
		return *obj.Dashboard8
	}

	if obj.Dashboard9 != nil {
		return *obj.Dashboard9
	}

	// all schemas are nil
	return nil
}

type NullableDashboard struct {
	value *Dashboard
	isSet bool
}

func (v NullableDashboard) Get() *Dashboard {
	return v.value
}

func (v *NullableDashboard) Set(val *Dashboard) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboard) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboard(val *Dashboard) *NullableDashboard {
	return &NullableDashboard{value: val, isSet: true}
}

func (v NullableDashboard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


