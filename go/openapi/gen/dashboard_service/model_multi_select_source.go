/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// MultiSelectSource - struct for MultiSelectSource
type MultiSelectSource struct {
	MultiSelectSourceConstantList *MultiSelectSourceConstantList
	MultiSelectSourceLogsPath *MultiSelectSourceLogsPath
	MultiSelectSourceMetricLabel *MultiSelectSourceMetricLabel
	MultiSelectSourceQuery *MultiSelectSourceQuery
	MultiSelectSourceSpanField *MultiSelectSourceSpanField
}

// MultiSelectSourceConstantListAsMultiSelectSource is a convenience function that returns MultiSelectSourceConstantList wrapped in MultiSelectSource
func MultiSelectSourceConstantListAsMultiSelectSource(v *MultiSelectSourceConstantList) MultiSelectSource {
	return MultiSelectSource{
		MultiSelectSourceConstantList: v,
	}
}

// MultiSelectSourceLogsPathAsMultiSelectSource is a convenience function that returns MultiSelectSourceLogsPath wrapped in MultiSelectSource
func MultiSelectSourceLogsPathAsMultiSelectSource(v *MultiSelectSourceLogsPath) MultiSelectSource {
	return MultiSelectSource{
		MultiSelectSourceLogsPath: v,
	}
}

// MultiSelectSourceMetricLabelAsMultiSelectSource is a convenience function that returns MultiSelectSourceMetricLabel wrapped in MultiSelectSource
func MultiSelectSourceMetricLabelAsMultiSelectSource(v *MultiSelectSourceMetricLabel) MultiSelectSource {
	return MultiSelectSource{
		MultiSelectSourceMetricLabel: v,
	}
}

// MultiSelectSourceQueryAsMultiSelectSource is a convenience function that returns MultiSelectSourceQuery wrapped in MultiSelectSource
func MultiSelectSourceQueryAsMultiSelectSource(v *MultiSelectSourceQuery) MultiSelectSource {
	return MultiSelectSource{
		MultiSelectSourceQuery: v,
	}
}

// MultiSelectSourceSpanFieldAsMultiSelectSource is a convenience function that returns MultiSelectSourceSpanField wrapped in MultiSelectSource
func MultiSelectSourceSpanFieldAsMultiSelectSource(v *MultiSelectSourceSpanField) MultiSelectSource {
	return MultiSelectSource{
		MultiSelectSourceSpanField: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MultiSelectSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MultiSelectSourceConstantList
	err = newStrictDecoder(data).Decode(&dst.MultiSelectSourceConstantList)
	if err == nil {
		jsonMultiSelectSourceConstantList, _ := json.Marshal(dst.MultiSelectSourceConstantList)
		if string(jsonMultiSelectSourceConstantList) == "{}" { // empty struct
			dst.MultiSelectSourceConstantList = nil
		} else {
			if err = validator.Validate(dst.MultiSelectSourceConstantList); err != nil {
				dst.MultiSelectSourceConstantList = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultiSelectSourceConstantList = nil
	}

	// try to unmarshal data into MultiSelectSourceLogsPath
	err = newStrictDecoder(data).Decode(&dst.MultiSelectSourceLogsPath)
	if err == nil {
		jsonMultiSelectSourceLogsPath, _ := json.Marshal(dst.MultiSelectSourceLogsPath)
		if string(jsonMultiSelectSourceLogsPath) == "{}" { // empty struct
			dst.MultiSelectSourceLogsPath = nil
		} else {
			if err = validator.Validate(dst.MultiSelectSourceLogsPath); err != nil {
				dst.MultiSelectSourceLogsPath = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultiSelectSourceLogsPath = nil
	}

	// try to unmarshal data into MultiSelectSourceMetricLabel
	err = newStrictDecoder(data).Decode(&dst.MultiSelectSourceMetricLabel)
	if err == nil {
		jsonMultiSelectSourceMetricLabel, _ := json.Marshal(dst.MultiSelectSourceMetricLabel)
		if string(jsonMultiSelectSourceMetricLabel) == "{}" { // empty struct
			dst.MultiSelectSourceMetricLabel = nil
		} else {
			if err = validator.Validate(dst.MultiSelectSourceMetricLabel); err != nil {
				dst.MultiSelectSourceMetricLabel = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultiSelectSourceMetricLabel = nil
	}

	// try to unmarshal data into MultiSelectSourceQuery
	err = newStrictDecoder(data).Decode(&dst.MultiSelectSourceQuery)
	if err == nil {
		jsonMultiSelectSourceQuery, _ := json.Marshal(dst.MultiSelectSourceQuery)
		if string(jsonMultiSelectSourceQuery) == "{}" { // empty struct
			dst.MultiSelectSourceQuery = nil
		} else {
			if err = validator.Validate(dst.MultiSelectSourceQuery); err != nil {
				dst.MultiSelectSourceQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultiSelectSourceQuery = nil
	}

	// try to unmarshal data into MultiSelectSourceSpanField
	err = newStrictDecoder(data).Decode(&dst.MultiSelectSourceSpanField)
	if err == nil {
		jsonMultiSelectSourceSpanField, _ := json.Marshal(dst.MultiSelectSourceSpanField)
		if string(jsonMultiSelectSourceSpanField) == "{}" { // empty struct
			dst.MultiSelectSourceSpanField = nil
		} else {
			if err = validator.Validate(dst.MultiSelectSourceSpanField); err != nil {
				dst.MultiSelectSourceSpanField = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultiSelectSourceSpanField = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MultiSelectSourceConstantList = nil
		dst.MultiSelectSourceLogsPath = nil
		dst.MultiSelectSourceMetricLabel = nil
		dst.MultiSelectSourceQuery = nil
		dst.MultiSelectSourceSpanField = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MultiSelectSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MultiSelectSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MultiSelectSource) MarshalJSON() ([]byte, error) {
	if src.MultiSelectSourceConstantList != nil {
		return json.Marshal(&src.MultiSelectSourceConstantList)
	}

	if src.MultiSelectSourceLogsPath != nil {
		return json.Marshal(&src.MultiSelectSourceLogsPath)
	}

	if src.MultiSelectSourceMetricLabel != nil {
		return json.Marshal(&src.MultiSelectSourceMetricLabel)
	}

	if src.MultiSelectSourceQuery != nil {
		return json.Marshal(&src.MultiSelectSourceQuery)
	}

	if src.MultiSelectSourceSpanField != nil {
		return json.Marshal(&src.MultiSelectSourceSpanField)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MultiSelectSource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MultiSelectSourceConstantList != nil {
		return obj.MultiSelectSourceConstantList
	}

	if obj.MultiSelectSourceLogsPath != nil {
		return obj.MultiSelectSourceLogsPath
	}

	if obj.MultiSelectSourceMetricLabel != nil {
		return obj.MultiSelectSourceMetricLabel
	}

	if obj.MultiSelectSourceQuery != nil {
		return obj.MultiSelectSourceQuery
	}

	if obj.MultiSelectSourceSpanField != nil {
		return obj.MultiSelectSourceSpanField
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj MultiSelectSource) GetActualInstanceValue() (interface{}) {
	if obj.MultiSelectSourceConstantList != nil {
		return *obj.MultiSelectSourceConstantList
	}

	if obj.MultiSelectSourceLogsPath != nil {
		return *obj.MultiSelectSourceLogsPath
	}

	if obj.MultiSelectSourceMetricLabel != nil {
		return *obj.MultiSelectSourceMetricLabel
	}

	if obj.MultiSelectSourceQuery != nil {
		return *obj.MultiSelectSourceQuery
	}

	if obj.MultiSelectSourceSpanField != nil {
		return *obj.MultiSelectSourceSpanField
	}

	// all schemas are nil
	return nil
}

type NullableMultiSelectSource struct {
	value *MultiSelectSource
	isSet bool
}

func (v NullableMultiSelectSource) Get() *MultiSelectSource {
	return v.value
}

func (v *NullableMultiSelectSource) Set(val *MultiSelectSource) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiSelectSource) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiSelectSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiSelectSource(val *MultiSelectSource) *NullableMultiSelectSource {
	return &NullableMultiSelectSource{value: val, isSet: true}
}

func (v NullableMultiSelectSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiSelectSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


