/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// MultiSelectSource - struct for MultiSelectSource
type MultiSelectSource struct {
	MultiSelectSourceOneOf *MultiSelectSourceOneOf
	MultiSelectSourceOneOf1 *MultiSelectSourceOneOf1
	MultiSelectSourceOneOf2 *MultiSelectSourceOneOf2
	MultiSelectSourceOneOf3 *MultiSelectSourceOneOf3
	MultiSelectSourceOneOf4 *MultiSelectSourceOneOf4
}

// MultiSelectSourceOneOfAsMultiSelectSource is a convenience function that returns MultiSelectSourceOneOf wrapped in MultiSelectSource
func MultiSelectSourceOneOfAsMultiSelectSource(v *MultiSelectSourceOneOf) MultiSelectSource {
	return MultiSelectSource{
		MultiSelectSourceOneOf: v,
	}
}

// MultiSelectSourceOneOf1AsMultiSelectSource is a convenience function that returns MultiSelectSourceOneOf1 wrapped in MultiSelectSource
func MultiSelectSourceOneOf1AsMultiSelectSource(v *MultiSelectSourceOneOf1) MultiSelectSource {
	return MultiSelectSource{
		MultiSelectSourceOneOf1: v,
	}
}

// MultiSelectSourceOneOf2AsMultiSelectSource is a convenience function that returns MultiSelectSourceOneOf2 wrapped in MultiSelectSource
func MultiSelectSourceOneOf2AsMultiSelectSource(v *MultiSelectSourceOneOf2) MultiSelectSource {
	return MultiSelectSource{
		MultiSelectSourceOneOf2: v,
	}
}

// MultiSelectSourceOneOf3AsMultiSelectSource is a convenience function that returns MultiSelectSourceOneOf3 wrapped in MultiSelectSource
func MultiSelectSourceOneOf3AsMultiSelectSource(v *MultiSelectSourceOneOf3) MultiSelectSource {
	return MultiSelectSource{
		MultiSelectSourceOneOf3: v,
	}
}

// MultiSelectSourceOneOf4AsMultiSelectSource is a convenience function that returns MultiSelectSourceOneOf4 wrapped in MultiSelectSource
func MultiSelectSourceOneOf4AsMultiSelectSource(v *MultiSelectSourceOneOf4) MultiSelectSource {
	return MultiSelectSource{
		MultiSelectSourceOneOf4: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MultiSelectSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MultiSelectSourceOneOf
	err = newStrictDecoder(data).Decode(&dst.MultiSelectSourceOneOf)
	if err == nil {
		jsonMultiSelectSourceOneOf, _ := json.Marshal(dst.MultiSelectSourceOneOf)
		if string(jsonMultiSelectSourceOneOf) == "{}" { // empty struct
			dst.MultiSelectSourceOneOf = nil
		} else {
			if err = validator.Validate(dst.MultiSelectSourceOneOf); err != nil {
				dst.MultiSelectSourceOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultiSelectSourceOneOf = nil
	}

	// try to unmarshal data into MultiSelectSourceOneOf1
	err = newStrictDecoder(data).Decode(&dst.MultiSelectSourceOneOf1)
	if err == nil {
		jsonMultiSelectSourceOneOf1, _ := json.Marshal(dst.MultiSelectSourceOneOf1)
		if string(jsonMultiSelectSourceOneOf1) == "{}" { // empty struct
			dst.MultiSelectSourceOneOf1 = nil
		} else {
			if err = validator.Validate(dst.MultiSelectSourceOneOf1); err != nil {
				dst.MultiSelectSourceOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultiSelectSourceOneOf1 = nil
	}

	// try to unmarshal data into MultiSelectSourceOneOf2
	err = newStrictDecoder(data).Decode(&dst.MultiSelectSourceOneOf2)
	if err == nil {
		jsonMultiSelectSourceOneOf2, _ := json.Marshal(dst.MultiSelectSourceOneOf2)
		if string(jsonMultiSelectSourceOneOf2) == "{}" { // empty struct
			dst.MultiSelectSourceOneOf2 = nil
		} else {
			if err = validator.Validate(dst.MultiSelectSourceOneOf2); err != nil {
				dst.MultiSelectSourceOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultiSelectSourceOneOf2 = nil
	}

	// try to unmarshal data into MultiSelectSourceOneOf3
	err = newStrictDecoder(data).Decode(&dst.MultiSelectSourceOneOf3)
	if err == nil {
		jsonMultiSelectSourceOneOf3, _ := json.Marshal(dst.MultiSelectSourceOneOf3)
		if string(jsonMultiSelectSourceOneOf3) == "{}" { // empty struct
			dst.MultiSelectSourceOneOf3 = nil
		} else {
			if err = validator.Validate(dst.MultiSelectSourceOneOf3); err != nil {
				dst.MultiSelectSourceOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultiSelectSourceOneOf3 = nil
	}

	// try to unmarshal data into MultiSelectSourceOneOf4
	err = newStrictDecoder(data).Decode(&dst.MultiSelectSourceOneOf4)
	if err == nil {
		jsonMultiSelectSourceOneOf4, _ := json.Marshal(dst.MultiSelectSourceOneOf4)
		if string(jsonMultiSelectSourceOneOf4) == "{}" { // empty struct
			dst.MultiSelectSourceOneOf4 = nil
		} else {
			if err = validator.Validate(dst.MultiSelectSourceOneOf4); err != nil {
				dst.MultiSelectSourceOneOf4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultiSelectSourceOneOf4 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MultiSelectSourceOneOf = nil
		dst.MultiSelectSourceOneOf1 = nil
		dst.MultiSelectSourceOneOf2 = nil
		dst.MultiSelectSourceOneOf3 = nil
		dst.MultiSelectSourceOneOf4 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MultiSelectSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MultiSelectSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MultiSelectSource) MarshalJSON() ([]byte, error) {
	if src.MultiSelectSourceOneOf != nil {
		return json.Marshal(&src.MultiSelectSourceOneOf)
	}

	if src.MultiSelectSourceOneOf1 != nil {
		return json.Marshal(&src.MultiSelectSourceOneOf1)
	}

	if src.MultiSelectSourceOneOf2 != nil {
		return json.Marshal(&src.MultiSelectSourceOneOf2)
	}

	if src.MultiSelectSourceOneOf3 != nil {
		return json.Marshal(&src.MultiSelectSourceOneOf3)
	}

	if src.MultiSelectSourceOneOf4 != nil {
		return json.Marshal(&src.MultiSelectSourceOneOf4)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MultiSelectSource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MultiSelectSourceOneOf != nil {
		return obj.MultiSelectSourceOneOf
	}

	if obj.MultiSelectSourceOneOf1 != nil {
		return obj.MultiSelectSourceOneOf1
	}

	if obj.MultiSelectSourceOneOf2 != nil {
		return obj.MultiSelectSourceOneOf2
	}

	if obj.MultiSelectSourceOneOf3 != nil {
		return obj.MultiSelectSourceOneOf3
	}

	if obj.MultiSelectSourceOneOf4 != nil {
		return obj.MultiSelectSourceOneOf4
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj MultiSelectSource) GetActualInstanceValue() (interface{}) {
	if obj.MultiSelectSourceOneOf != nil {
		return *obj.MultiSelectSourceOneOf
	}

	if obj.MultiSelectSourceOneOf1 != nil {
		return *obj.MultiSelectSourceOneOf1
	}

	if obj.MultiSelectSourceOneOf2 != nil {
		return *obj.MultiSelectSourceOneOf2
	}

	if obj.MultiSelectSourceOneOf3 != nil {
		return *obj.MultiSelectSourceOneOf3
	}

	if obj.MultiSelectSourceOneOf4 != nil {
		return *obj.MultiSelectSourceOneOf4
	}

	// all schemas are nil
	return nil
}

type NullableMultiSelectSource struct {
	value *MultiSelectSource
	isSet bool
}

func (v NullableMultiSelectSource) Get() *MultiSelectSource {
	return v.value
}

func (v *NullableMultiSelectSource) Set(val *MultiSelectSource) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiSelectSource) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiSelectSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiSelectSource(val *MultiSelectSource) *NullableMultiSelectSource {
	return &NullableMultiSelectSource{value: val, isSet: true}
}

func (v NullableMultiSelectSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiSelectSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


