/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// MultiSelectSource - struct for MultiSelectSource
type MultiSelectSource struct {
	SourceConstantList *SourceConstantList
	SourceLogsPath *SourceLogsPath
	SourceMetricLabel *SourceMetricLabel
	SourceQuery *SourceQuery
	SourceSpanField *SourceSpanField
}

// SourceConstantListAsMultiSelectSource is a convenience function that returns SourceConstantList wrapped in MultiSelectSource
func SourceConstantListAsMultiSelectSource(v *SourceConstantList) MultiSelectSource {
	return MultiSelectSource{
		SourceConstantList: v,
	}
}

// SourceLogsPathAsMultiSelectSource is a convenience function that returns SourceLogsPath wrapped in MultiSelectSource
func SourceLogsPathAsMultiSelectSource(v *SourceLogsPath) MultiSelectSource {
	return MultiSelectSource{
		SourceLogsPath: v,
	}
}

// SourceMetricLabelAsMultiSelectSource is a convenience function that returns SourceMetricLabel wrapped in MultiSelectSource
func SourceMetricLabelAsMultiSelectSource(v *SourceMetricLabel) MultiSelectSource {
	return MultiSelectSource{
		SourceMetricLabel: v,
	}
}

// SourceQueryAsMultiSelectSource is a convenience function that returns SourceQuery wrapped in MultiSelectSource
func SourceQueryAsMultiSelectSource(v *SourceQuery) MultiSelectSource {
	return MultiSelectSource{
		SourceQuery: v,
	}
}

// SourceSpanFieldAsMultiSelectSource is a convenience function that returns SourceSpanField wrapped in MultiSelectSource
func SourceSpanFieldAsMultiSelectSource(v *SourceSpanField) MultiSelectSource {
	return MultiSelectSource{
		SourceSpanField: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MultiSelectSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SourceConstantList
	err = newStrictDecoder(data).Decode(&dst.SourceConstantList)
	if err == nil {
		jsonSourceConstantList, _ := json.Marshal(dst.SourceConstantList)
		if string(jsonSourceConstantList) == "{}" { // empty struct
			dst.SourceConstantList = nil
		} else {
			if err = validator.Validate(dst.SourceConstantList); err != nil {
				dst.SourceConstantList = nil
			} else {
				match++
			}
		}
	} else {
		dst.SourceConstantList = nil
	}

	// try to unmarshal data into SourceLogsPath
	err = newStrictDecoder(data).Decode(&dst.SourceLogsPath)
	if err == nil {
		jsonSourceLogsPath, _ := json.Marshal(dst.SourceLogsPath)
		if string(jsonSourceLogsPath) == "{}" { // empty struct
			dst.SourceLogsPath = nil
		} else {
			if err = validator.Validate(dst.SourceLogsPath); err != nil {
				dst.SourceLogsPath = nil
			} else {
				match++
			}
		}
	} else {
		dst.SourceLogsPath = nil
	}

	// try to unmarshal data into SourceMetricLabel
	err = newStrictDecoder(data).Decode(&dst.SourceMetricLabel)
	if err == nil {
		jsonSourceMetricLabel, _ := json.Marshal(dst.SourceMetricLabel)
		if string(jsonSourceMetricLabel) == "{}" { // empty struct
			dst.SourceMetricLabel = nil
		} else {
			if err = validator.Validate(dst.SourceMetricLabel); err != nil {
				dst.SourceMetricLabel = nil
			} else {
				match++
			}
		}
	} else {
		dst.SourceMetricLabel = nil
	}

	// try to unmarshal data into SourceQuery
	err = newStrictDecoder(data).Decode(&dst.SourceQuery)
	if err == nil {
		jsonSourceQuery, _ := json.Marshal(dst.SourceQuery)
		if string(jsonSourceQuery) == "{}" { // empty struct
			dst.SourceQuery = nil
		} else {
			if err = validator.Validate(dst.SourceQuery); err != nil {
				dst.SourceQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.SourceQuery = nil
	}

	// try to unmarshal data into SourceSpanField
	err = newStrictDecoder(data).Decode(&dst.SourceSpanField)
	if err == nil {
		jsonSourceSpanField, _ := json.Marshal(dst.SourceSpanField)
		if string(jsonSourceSpanField) == "{}" { // empty struct
			dst.SourceSpanField = nil
		} else {
			if err = validator.Validate(dst.SourceSpanField); err != nil {
				dst.SourceSpanField = nil
			} else {
				match++
			}
		}
	} else {
		dst.SourceSpanField = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SourceConstantList = nil
		dst.SourceLogsPath = nil
		dst.SourceMetricLabel = nil
		dst.SourceQuery = nil
		dst.SourceSpanField = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MultiSelectSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MultiSelectSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MultiSelectSource) MarshalJSON() ([]byte, error) {
	if src.SourceConstantList != nil {
		return json.Marshal(&src.SourceConstantList)
	}

	if src.SourceLogsPath != nil {
		return json.Marshal(&src.SourceLogsPath)
	}

	if src.SourceMetricLabel != nil {
		return json.Marshal(&src.SourceMetricLabel)
	}

	if src.SourceQuery != nil {
		return json.Marshal(&src.SourceQuery)
	}

	if src.SourceSpanField != nil {
		return json.Marshal(&src.SourceSpanField)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MultiSelectSource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SourceConstantList != nil {
		return obj.SourceConstantList
	}

	if obj.SourceLogsPath != nil {
		return obj.SourceLogsPath
	}

	if obj.SourceMetricLabel != nil {
		return obj.SourceMetricLabel
	}

	if obj.SourceQuery != nil {
		return obj.SourceQuery
	}

	if obj.SourceSpanField != nil {
		return obj.SourceSpanField
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj MultiSelectSource) GetActualInstanceValue() (interface{}) {
	if obj.SourceConstantList != nil {
		return *obj.SourceConstantList
	}

	if obj.SourceLogsPath != nil {
		return *obj.SourceLogsPath
	}

	if obj.SourceMetricLabel != nil {
		return *obj.SourceMetricLabel
	}

	if obj.SourceQuery != nil {
		return *obj.SourceQuery
	}

	if obj.SourceSpanField != nil {
		return *obj.SourceSpanField
	}

	// all schemas are nil
	return nil
}

type NullableMultiSelectSource struct {
	value *MultiSelectSource
	isSet bool
}

func (v NullableMultiSelectSource) Get() *MultiSelectSource {
	return v.value
}

func (v *NullableMultiSelectSource) Set(val *MultiSelectSource) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiSelectSource) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiSelectSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiSelectSource(val *MultiSelectSource) *NullableMultiSelectSource {
	return &NullableMultiSelectSource{value: val, isSet: true}
}

func (v NullableMultiSelectSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiSelectSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


