/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// SectionPredefinedColor the model 'SectionPredefinedColor'
type SectionPredefinedColor string

// List of SectionPredefinedColor
const (
	SECTIONPREDEFINEDCOLOR_SECTION_PREDEFINED_COLOR_UNSPECIFIED SectionPredefinedColor = "SECTION_PREDEFINED_COLOR_UNSPECIFIED"
	SECTIONPREDEFINEDCOLOR_SECTION_PREDEFINED_COLOR_CYAN SectionPredefinedColor = "SECTION_PREDEFINED_COLOR_CYAN"
	SECTIONPREDEFINEDCOLOR_SECTION_PREDEFINED_COLOR_GREEN SectionPredefinedColor = "SECTION_PREDEFINED_COLOR_GREEN"
	SECTIONPREDEFINEDCOLOR_SECTION_PREDEFINED_COLOR_BLUE SectionPredefinedColor = "SECTION_PREDEFINED_COLOR_BLUE"
	SECTIONPREDEFINEDCOLOR_SECTION_PREDEFINED_COLOR_PURPLE SectionPredefinedColor = "SECTION_PREDEFINED_COLOR_PURPLE"
	SECTIONPREDEFINEDCOLOR_SECTION_PREDEFINED_COLOR_MAGENTA SectionPredefinedColor = "SECTION_PREDEFINED_COLOR_MAGENTA"
	SECTIONPREDEFINEDCOLOR_SECTION_PREDEFINED_COLOR_PINK SectionPredefinedColor = "SECTION_PREDEFINED_COLOR_PINK"
	SECTIONPREDEFINEDCOLOR_SECTION_PREDEFINED_COLOR_ORANGE SectionPredefinedColor = "SECTION_PREDEFINED_COLOR_ORANGE"
)

// All allowed values of SectionPredefinedColor enum
var AllowedSectionPredefinedColorEnumValues = []SectionPredefinedColor{
	"SECTION_PREDEFINED_COLOR_UNSPECIFIED",
	"SECTION_PREDEFINED_COLOR_CYAN",
	"SECTION_PREDEFINED_COLOR_GREEN",
	"SECTION_PREDEFINED_COLOR_BLUE",
	"SECTION_PREDEFINED_COLOR_PURPLE",
	"SECTION_PREDEFINED_COLOR_MAGENTA",
	"SECTION_PREDEFINED_COLOR_PINK",
	"SECTION_PREDEFINED_COLOR_ORANGE",
}

func (v *SectionPredefinedColor) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SectionPredefinedColor(value)
	for _, existing := range AllowedSectionPredefinedColorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SectionPredefinedColor", value)
}

// NewSectionPredefinedColorFromValue returns a pointer to a valid SectionPredefinedColor
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSectionPredefinedColorFromValue(v string) (*SectionPredefinedColor, error) {
	ev := SectionPredefinedColor(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SectionPredefinedColor: valid values are %v", v, AllowedSectionPredefinedColorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SectionPredefinedColor) IsValid() bool {
	for _, existing := range AllowedSectionPredefinedColorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SectionPredefinedColor value
func (v SectionPredefinedColor) Ptr() *SectionPredefinedColor {
	return &v
}

type NullableSectionPredefinedColor struct {
	value *SectionPredefinedColor
	isSet bool
}

func (v NullableSectionPredefinedColor) Get() *SectionPredefinedColor {
	return v.value
}

func (v *NullableSectionPredefinedColor) Set(val *SectionPredefinedColor) {
	v.value = val
	v.isSet = true
}

func (v NullableSectionPredefinedColor) IsSet() bool {
	return v.isSet
}

func (v *NullableSectionPredefinedColor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSectionPredefinedColor(val *SectionPredefinedColor) *NullableSectionPredefinedColor {
	return &NullableSectionPredefinedColor{value: val, isSet: true}
}

func (v NullableSectionPredefinedColor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSectionPredefinedColor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

