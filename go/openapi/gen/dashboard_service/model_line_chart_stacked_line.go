/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// LineChartStackedLine the model 'LineChartStackedLine'
type LineChartStackedLine string

// List of LineChart.StackedLine
const (
	LINECHARTSTACKEDLINE_STACKED_LINE_UNSPECIFIED LineChartStackedLine = "STACKED_LINE_UNSPECIFIED"
	LINECHARTSTACKEDLINE_STACKED_LINE_ABSOLUTE LineChartStackedLine = "STACKED_LINE_ABSOLUTE"
	LINECHARTSTACKEDLINE_STACKED_LINE_RELATIVE LineChartStackedLine = "STACKED_LINE_RELATIVE"
)

// All allowed values of LineChartStackedLine enum
var AllowedLineChartStackedLineEnumValues = []LineChartStackedLine{
	"STACKED_LINE_UNSPECIFIED",
	"STACKED_LINE_ABSOLUTE",
	"STACKED_LINE_RELATIVE",
}

func (v *LineChartStackedLine) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LineChartStackedLine(value)
	for _, existing := range AllowedLineChartStackedLineEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LineChartStackedLine", value)
}

// NewLineChartStackedLineFromValue returns a pointer to a valid LineChartStackedLine
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLineChartStackedLineFromValue(v string) (*LineChartStackedLine, error) {
	ev := LineChartStackedLine(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LineChartStackedLine: valid values are %v", v, AllowedLineChartStackedLineEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LineChartStackedLine) IsValid() bool {
	for _, existing := range AllowedLineChartStackedLineEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LineChart.StackedLine value
func (v LineChartStackedLine) Ptr() *LineChartStackedLine {
	return &v
}

type NullableLineChartStackedLine struct {
	value *LineChartStackedLine
	isSet bool
}

func (v NullableLineChartStackedLine) Get() *LineChartStackedLine {
	return v.value
}

func (v *NullableLineChartStackedLine) Set(val *LineChartStackedLine) {
	v.value = val
	v.isSet = true
}

func (v NullableLineChartStackedLine) IsSet() bool {
	return v.isSet
}

func (v *NullableLineChartStackedLine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLineChartStackedLine(val *LineChartStackedLine) *NullableLineChartStackedLine {
	return &NullableLineChartStackedLine{value: val, isSet: true}
}

func (v NullableLineChartStackedLine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLineChartStackedLine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

