/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// LineChartQuery - struct for LineChartQuery
type LineChartQuery struct {
	LineChartQueryOneOf *LineChartQueryOneOf
	LineChartQueryOneOf1 *LineChartQueryOneOf1
	LineChartQueryOneOf2 *LineChartQueryOneOf2
	LineChartQueryOneOf3 *LineChartQueryOneOf3
}

// LineChartQueryOneOfAsLineChartQuery is a convenience function that returns LineChartQueryOneOf wrapped in LineChartQuery
func LineChartQueryOneOfAsLineChartQuery(v *LineChartQueryOneOf) LineChartQuery {
	return LineChartQuery{
		LineChartQueryOneOf: v,
	}
}

// LineChartQueryOneOf1AsLineChartQuery is a convenience function that returns LineChartQueryOneOf1 wrapped in LineChartQuery
func LineChartQueryOneOf1AsLineChartQuery(v *LineChartQueryOneOf1) LineChartQuery {
	return LineChartQuery{
		LineChartQueryOneOf1: v,
	}
}

// LineChartQueryOneOf2AsLineChartQuery is a convenience function that returns LineChartQueryOneOf2 wrapped in LineChartQuery
func LineChartQueryOneOf2AsLineChartQuery(v *LineChartQueryOneOf2) LineChartQuery {
	return LineChartQuery{
		LineChartQueryOneOf2: v,
	}
}

// LineChartQueryOneOf3AsLineChartQuery is a convenience function that returns LineChartQueryOneOf3 wrapped in LineChartQuery
func LineChartQueryOneOf3AsLineChartQuery(v *LineChartQueryOneOf3) LineChartQuery {
	return LineChartQuery{
		LineChartQueryOneOf3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *LineChartQuery) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LineChartQueryOneOf
	err = newStrictDecoder(data).Decode(&dst.LineChartQueryOneOf)
	if err == nil {
		jsonLineChartQueryOneOf, _ := json.Marshal(dst.LineChartQueryOneOf)
		if string(jsonLineChartQueryOneOf) == "{}" { // empty struct
			dst.LineChartQueryOneOf = nil
		} else {
			if err = validator.Validate(dst.LineChartQueryOneOf); err != nil {
				dst.LineChartQueryOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.LineChartQueryOneOf = nil
	}

	// try to unmarshal data into LineChartQueryOneOf1
	err = newStrictDecoder(data).Decode(&dst.LineChartQueryOneOf1)
	if err == nil {
		jsonLineChartQueryOneOf1, _ := json.Marshal(dst.LineChartQueryOneOf1)
		if string(jsonLineChartQueryOneOf1) == "{}" { // empty struct
			dst.LineChartQueryOneOf1 = nil
		} else {
			if err = validator.Validate(dst.LineChartQueryOneOf1); err != nil {
				dst.LineChartQueryOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.LineChartQueryOneOf1 = nil
	}

	// try to unmarshal data into LineChartQueryOneOf2
	err = newStrictDecoder(data).Decode(&dst.LineChartQueryOneOf2)
	if err == nil {
		jsonLineChartQueryOneOf2, _ := json.Marshal(dst.LineChartQueryOneOf2)
		if string(jsonLineChartQueryOneOf2) == "{}" { // empty struct
			dst.LineChartQueryOneOf2 = nil
		} else {
			if err = validator.Validate(dst.LineChartQueryOneOf2); err != nil {
				dst.LineChartQueryOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.LineChartQueryOneOf2 = nil
	}

	// try to unmarshal data into LineChartQueryOneOf3
	err = newStrictDecoder(data).Decode(&dst.LineChartQueryOneOf3)
	if err == nil {
		jsonLineChartQueryOneOf3, _ := json.Marshal(dst.LineChartQueryOneOf3)
		if string(jsonLineChartQueryOneOf3) == "{}" { // empty struct
			dst.LineChartQueryOneOf3 = nil
		} else {
			if err = validator.Validate(dst.LineChartQueryOneOf3); err != nil {
				dst.LineChartQueryOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.LineChartQueryOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LineChartQueryOneOf = nil
		dst.LineChartQueryOneOf1 = nil
		dst.LineChartQueryOneOf2 = nil
		dst.LineChartQueryOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(LineChartQuery)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(LineChartQuery)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src LineChartQuery) MarshalJSON() ([]byte, error) {
	if src.LineChartQueryOneOf != nil {
		return json.Marshal(&src.LineChartQueryOneOf)
	}

	if src.LineChartQueryOneOf1 != nil {
		return json.Marshal(&src.LineChartQueryOneOf1)
	}

	if src.LineChartQueryOneOf2 != nil {
		return json.Marshal(&src.LineChartQueryOneOf2)
	}

	if src.LineChartQueryOneOf3 != nil {
		return json.Marshal(&src.LineChartQueryOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *LineChartQuery) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.LineChartQueryOneOf != nil {
		return obj.LineChartQueryOneOf
	}

	if obj.LineChartQueryOneOf1 != nil {
		return obj.LineChartQueryOneOf1
	}

	if obj.LineChartQueryOneOf2 != nil {
		return obj.LineChartQueryOneOf2
	}

	if obj.LineChartQueryOneOf3 != nil {
		return obj.LineChartQueryOneOf3
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj LineChartQuery) GetActualInstanceValue() (interface{}) {
	if obj.LineChartQueryOneOf != nil {
		return *obj.LineChartQueryOneOf
	}

	if obj.LineChartQueryOneOf1 != nil {
		return *obj.LineChartQueryOneOf1
	}

	if obj.LineChartQueryOneOf2 != nil {
		return *obj.LineChartQueryOneOf2
	}

	if obj.LineChartQueryOneOf3 != nil {
		return *obj.LineChartQueryOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableLineChartQuery struct {
	value *LineChartQuery
	isSet bool
}

func (v NullableLineChartQuery) Get() *LineChartQuery {
	return v.value
}

func (v *NullableLineChartQuery) Set(val *LineChartQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableLineChartQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableLineChartQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLineChartQuery(val *LineChartQuery) *NullableLineChartQuery {
	return &NullableLineChartQuery{value: val, isSet: true}
}

func (v NullableLineChartQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLineChartQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


