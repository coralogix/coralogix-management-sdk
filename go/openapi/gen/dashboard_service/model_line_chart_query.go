/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// LineChartQuery - struct for LineChartQuery
type LineChartQuery struct {
	LineChartQueryDataprime *LineChartQueryDataprime
	LineChartQueryLogs *LineChartQueryLogs
	LineChartQueryMetrics *LineChartQueryMetrics
	LineChartQuerySpans *LineChartQuerySpans
}

// LineChartQueryDataprimeAsLineChartQuery is a convenience function that returns LineChartQueryDataprime wrapped in LineChartQuery
func LineChartQueryDataprimeAsLineChartQuery(v *LineChartQueryDataprime) LineChartQuery {
	return LineChartQuery{
		LineChartQueryDataprime: v,
	}
}

// LineChartQueryLogsAsLineChartQuery is a convenience function that returns LineChartQueryLogs wrapped in LineChartQuery
func LineChartQueryLogsAsLineChartQuery(v *LineChartQueryLogs) LineChartQuery {
	return LineChartQuery{
		LineChartQueryLogs: v,
	}
}

// LineChartQueryMetricsAsLineChartQuery is a convenience function that returns LineChartQueryMetrics wrapped in LineChartQuery
func LineChartQueryMetricsAsLineChartQuery(v *LineChartQueryMetrics) LineChartQuery {
	return LineChartQuery{
		LineChartQueryMetrics: v,
	}
}

// LineChartQuerySpansAsLineChartQuery is a convenience function that returns LineChartQuerySpans wrapped in LineChartQuery
func LineChartQuerySpansAsLineChartQuery(v *LineChartQuerySpans) LineChartQuery {
	return LineChartQuery{
		LineChartQuerySpans: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *LineChartQuery) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LineChartQueryDataprime
	err = newStrictDecoder(data).Decode(&dst.LineChartQueryDataprime)
	if err == nil {
		jsonLineChartQueryDataprime, _ := json.Marshal(dst.LineChartQueryDataprime)
		if string(jsonLineChartQueryDataprime) == "{}" { // empty struct
			dst.LineChartQueryDataprime = nil
		} else {
			if err = validator.Validate(dst.LineChartQueryDataprime); err != nil {
				dst.LineChartQueryDataprime = nil
			} else {
				match++
			}
		}
	} else {
		dst.LineChartQueryDataprime = nil
	}

	// try to unmarshal data into LineChartQueryLogs
	err = newStrictDecoder(data).Decode(&dst.LineChartQueryLogs)
	if err == nil {
		jsonLineChartQueryLogs, _ := json.Marshal(dst.LineChartQueryLogs)
		if string(jsonLineChartQueryLogs) == "{}" { // empty struct
			dst.LineChartQueryLogs = nil
		} else {
			if err = validator.Validate(dst.LineChartQueryLogs); err != nil {
				dst.LineChartQueryLogs = nil
			} else {
				match++
			}
		}
	} else {
		dst.LineChartQueryLogs = nil
	}

	// try to unmarshal data into LineChartQueryMetrics
	err = newStrictDecoder(data).Decode(&dst.LineChartQueryMetrics)
	if err == nil {
		jsonLineChartQueryMetrics, _ := json.Marshal(dst.LineChartQueryMetrics)
		if string(jsonLineChartQueryMetrics) == "{}" { // empty struct
			dst.LineChartQueryMetrics = nil
		} else {
			if err = validator.Validate(dst.LineChartQueryMetrics); err != nil {
				dst.LineChartQueryMetrics = nil
			} else {
				match++
			}
		}
	} else {
		dst.LineChartQueryMetrics = nil
	}

	// try to unmarshal data into LineChartQuerySpans
	err = newStrictDecoder(data).Decode(&dst.LineChartQuerySpans)
	if err == nil {
		jsonLineChartQuerySpans, _ := json.Marshal(dst.LineChartQuerySpans)
		if string(jsonLineChartQuerySpans) == "{}" { // empty struct
			dst.LineChartQuerySpans = nil
		} else {
			if err = validator.Validate(dst.LineChartQuerySpans); err != nil {
				dst.LineChartQuerySpans = nil
			} else {
				match++
			}
		}
	} else {
		dst.LineChartQuerySpans = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LineChartQueryDataprime = nil
		dst.LineChartQueryLogs = nil
		dst.LineChartQueryMetrics = nil
		dst.LineChartQuerySpans = nil

		return fmt.Errorf("data matches more than one schema in oneOf(LineChartQuery)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(LineChartQuery)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src LineChartQuery) MarshalJSON() ([]byte, error) {
	if src.LineChartQueryDataprime != nil {
		return json.Marshal(&src.LineChartQueryDataprime)
	}

	if src.LineChartQueryLogs != nil {
		return json.Marshal(&src.LineChartQueryLogs)
	}

	if src.LineChartQueryMetrics != nil {
		return json.Marshal(&src.LineChartQueryMetrics)
	}

	if src.LineChartQuerySpans != nil {
		return json.Marshal(&src.LineChartQuerySpans)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *LineChartQuery) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.LineChartQueryDataprime != nil {
		return obj.LineChartQueryDataprime
	}

	if obj.LineChartQueryLogs != nil {
		return obj.LineChartQueryLogs
	}

	if obj.LineChartQueryMetrics != nil {
		return obj.LineChartQueryMetrics
	}

	if obj.LineChartQuerySpans != nil {
		return obj.LineChartQuerySpans
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj LineChartQuery) GetActualInstanceValue() (interface{}) {
	if obj.LineChartQueryDataprime != nil {
		return *obj.LineChartQueryDataprime
	}

	if obj.LineChartQueryLogs != nil {
		return *obj.LineChartQueryLogs
	}

	if obj.LineChartQueryMetrics != nil {
		return *obj.LineChartQueryMetrics
	}

	if obj.LineChartQuerySpans != nil {
		return *obj.LineChartQuerySpans
	}

	// all schemas are nil
	return nil
}

type NullableLineChartQuery struct {
	value *LineChartQuery
	isSet bool
}

func (v NullableLineChartQuery) Get() *LineChartQuery {
	return v.value
}

func (v *NullableLineChartQuery) Set(val *LineChartQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableLineChartQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableLineChartQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLineChartQuery(val *LineChartQuery) *NullableLineChartQuery {
	return &NullableLineChartQuery{value: val, isSet: true}
}

func (v NullableLineChartQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLineChartQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


