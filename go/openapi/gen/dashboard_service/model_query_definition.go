/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QueryDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryDefinition{}

// QueryDefinition LineChart represents the configuration of a line chart widget.
type QueryDefinition struct {
	// Applied color scheme for this query, one of the predefined values
	ColorScheme *string `json:"colorScheme,omitempty"`
	// Custom unit (requires to have unit field as 'custom' to take effect)
	CustomUnit *string `json:"customUnit,omitempty"`
	DataModeType *WidgetsCommonDataModeType `json:"dataModeType,omitempty"`
	// Number indicating the decimal precision of the numeric values, within range 0-15
	Decimal *int32 `json:"decimal,omitempty"`
	// Whether to render numeric value without abbreviation
	DecimalPrecision *bool `json:"decimalPrecision,omitempty"`
	// Whether to ignore color scheme and derive colors from algorithm
	HashColors *bool `json:"hashColors,omitempty"`
	// Unique id of the query definition
	Id string `json:"id"`
	// Is the query visible
	IsVisible *bool `json:"isVisible,omitempty"`
	// Custom name of the query
	Name *string `json:"name,omitempty"`
	Query LineChartQuery `json:"query"`
	Resolution *LineChartResolution `json:"resolution,omitempty"`
	ScaleType *ScaleType `json:"scaleType,omitempty"`
	// Max count of the series per query
	SeriesCountLimit *string `json:"seriesCountLimit,omitempty"`
	// Custom template for the series name
	SeriesNameTemplate *string `json:"seriesNameTemplate,omitempty"`
	Unit *CommonUnit `json:"unit,omitempty"`
	// Number indicating the upper band for y axis
	YAxisMax *float32 `json:"yAxisMax,omitempty"`
	// Number indicating the lower band for y axis
	YAxisMin *float32 `json:"yAxisMin,omitempty"`
}

type _QueryDefinition QueryDefinition

// NewQueryDefinition instantiates a new QueryDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryDefinition(id string, query LineChartQuery) *QueryDefinition {
	this := QueryDefinition{}
	this.Id = id
	this.Query = query
	return &this
}

// NewQueryDefinitionWithDefaults instantiates a new QueryDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryDefinitionWithDefaults() *QueryDefinition {
	this := QueryDefinition{}
	return &this
}

// GetColorScheme returns the ColorScheme field value if set, zero value otherwise.
func (o *QueryDefinition) GetColorScheme() string {
	if o == nil || IsNil(o.ColorScheme) {
		var ret string
		return ret
	}
	return *o.ColorScheme
}

// GetColorSchemeOk returns a tuple with the ColorScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDefinition) GetColorSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.ColorScheme) {
		return nil, false
	}
	return o.ColorScheme, true
}

// HasColorScheme returns a boolean if a field has been set.
func (o *QueryDefinition) HasColorScheme() bool {
	if o != nil && !IsNil(o.ColorScheme) {
		return true
	}

	return false
}

// SetColorScheme gets a reference to the given string and assigns it to the ColorScheme field.
func (o *QueryDefinition) SetColorScheme(v string) {
	o.ColorScheme = &v
}

// GetCustomUnit returns the CustomUnit field value if set, zero value otherwise.
func (o *QueryDefinition) GetCustomUnit() string {
	if o == nil || IsNil(o.CustomUnit) {
		var ret string
		return ret
	}
	return *o.CustomUnit
}

// GetCustomUnitOk returns a tuple with the CustomUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDefinition) GetCustomUnitOk() (*string, bool) {
	if o == nil || IsNil(o.CustomUnit) {
		return nil, false
	}
	return o.CustomUnit, true
}

// HasCustomUnit returns a boolean if a field has been set.
func (o *QueryDefinition) HasCustomUnit() bool {
	if o != nil && !IsNil(o.CustomUnit) {
		return true
	}

	return false
}

// SetCustomUnit gets a reference to the given string and assigns it to the CustomUnit field.
func (o *QueryDefinition) SetCustomUnit(v string) {
	o.CustomUnit = &v
}

// GetDataModeType returns the DataModeType field value if set, zero value otherwise.
func (o *QueryDefinition) GetDataModeType() WidgetsCommonDataModeType {
	if o == nil || IsNil(o.DataModeType) {
		var ret WidgetsCommonDataModeType
		return ret
	}
	return *o.DataModeType
}

// GetDataModeTypeOk returns a tuple with the DataModeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDefinition) GetDataModeTypeOk() (*WidgetsCommonDataModeType, bool) {
	if o == nil || IsNil(o.DataModeType) {
		return nil, false
	}
	return o.DataModeType, true
}

// HasDataModeType returns a boolean if a field has been set.
func (o *QueryDefinition) HasDataModeType() bool {
	if o != nil && !IsNil(o.DataModeType) {
		return true
	}

	return false
}

// SetDataModeType gets a reference to the given WidgetsCommonDataModeType and assigns it to the DataModeType field.
func (o *QueryDefinition) SetDataModeType(v WidgetsCommonDataModeType) {
	o.DataModeType = &v
}

// GetDecimal returns the Decimal field value if set, zero value otherwise.
func (o *QueryDefinition) GetDecimal() int32 {
	if o == nil || IsNil(o.Decimal) {
		var ret int32
		return ret
	}
	return *o.Decimal
}

// GetDecimalOk returns a tuple with the Decimal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDefinition) GetDecimalOk() (*int32, bool) {
	if o == nil || IsNil(o.Decimal) {
		return nil, false
	}
	return o.Decimal, true
}

// HasDecimal returns a boolean if a field has been set.
func (o *QueryDefinition) HasDecimal() bool {
	if o != nil && !IsNil(o.Decimal) {
		return true
	}

	return false
}

// SetDecimal gets a reference to the given int32 and assigns it to the Decimal field.
func (o *QueryDefinition) SetDecimal(v int32) {
	o.Decimal = &v
}

// GetDecimalPrecision returns the DecimalPrecision field value if set, zero value otherwise.
func (o *QueryDefinition) GetDecimalPrecision() bool {
	if o == nil || IsNil(o.DecimalPrecision) {
		var ret bool
		return ret
	}
	return *o.DecimalPrecision
}

// GetDecimalPrecisionOk returns a tuple with the DecimalPrecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDefinition) GetDecimalPrecisionOk() (*bool, bool) {
	if o == nil || IsNil(o.DecimalPrecision) {
		return nil, false
	}
	return o.DecimalPrecision, true
}

// HasDecimalPrecision returns a boolean if a field has been set.
func (o *QueryDefinition) HasDecimalPrecision() bool {
	if o != nil && !IsNil(o.DecimalPrecision) {
		return true
	}

	return false
}

// SetDecimalPrecision gets a reference to the given bool and assigns it to the DecimalPrecision field.
func (o *QueryDefinition) SetDecimalPrecision(v bool) {
	o.DecimalPrecision = &v
}

// GetHashColors returns the HashColors field value if set, zero value otherwise.
func (o *QueryDefinition) GetHashColors() bool {
	if o == nil || IsNil(o.HashColors) {
		var ret bool
		return ret
	}
	return *o.HashColors
}

// GetHashColorsOk returns a tuple with the HashColors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDefinition) GetHashColorsOk() (*bool, bool) {
	if o == nil || IsNil(o.HashColors) {
		return nil, false
	}
	return o.HashColors, true
}

// HasHashColors returns a boolean if a field has been set.
func (o *QueryDefinition) HasHashColors() bool {
	if o != nil && !IsNil(o.HashColors) {
		return true
	}

	return false
}

// SetHashColors gets a reference to the given bool and assigns it to the HashColors field.
func (o *QueryDefinition) SetHashColors(v bool) {
	o.HashColors = &v
}

// GetId returns the Id field value
func (o *QueryDefinition) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *QueryDefinition) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *QueryDefinition) SetId(v string) {
	o.Id = v
}

// GetIsVisible returns the IsVisible field value if set, zero value otherwise.
func (o *QueryDefinition) GetIsVisible() bool {
	if o == nil || IsNil(o.IsVisible) {
		var ret bool
		return ret
	}
	return *o.IsVisible
}

// GetIsVisibleOk returns a tuple with the IsVisible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDefinition) GetIsVisibleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVisible) {
		return nil, false
	}
	return o.IsVisible, true
}

// HasIsVisible returns a boolean if a field has been set.
func (o *QueryDefinition) HasIsVisible() bool {
	if o != nil && !IsNil(o.IsVisible) {
		return true
	}

	return false
}

// SetIsVisible gets a reference to the given bool and assigns it to the IsVisible field.
func (o *QueryDefinition) SetIsVisible(v bool) {
	o.IsVisible = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *QueryDefinition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDefinition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *QueryDefinition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *QueryDefinition) SetName(v string) {
	o.Name = &v
}

// GetQuery returns the Query field value
func (o *QueryDefinition) GetQuery() LineChartQuery {
	if o == nil {
		var ret LineChartQuery
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *QueryDefinition) GetQueryOk() (*LineChartQuery, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *QueryDefinition) SetQuery(v LineChartQuery) {
	o.Query = v
}

// GetResolution returns the Resolution field value if set, zero value otherwise.
func (o *QueryDefinition) GetResolution() LineChartResolution {
	if o == nil || IsNil(o.Resolution) {
		var ret LineChartResolution
		return ret
	}
	return *o.Resolution
}

// GetResolutionOk returns a tuple with the Resolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDefinition) GetResolutionOk() (*LineChartResolution, bool) {
	if o == nil || IsNil(o.Resolution) {
		return nil, false
	}
	return o.Resolution, true
}

// HasResolution returns a boolean if a field has been set.
func (o *QueryDefinition) HasResolution() bool {
	if o != nil && !IsNil(o.Resolution) {
		return true
	}

	return false
}

// SetResolution gets a reference to the given LineChartResolution and assigns it to the Resolution field.
func (o *QueryDefinition) SetResolution(v LineChartResolution) {
	o.Resolution = &v
}

// GetScaleType returns the ScaleType field value if set, zero value otherwise.
func (o *QueryDefinition) GetScaleType() ScaleType {
	if o == nil || IsNil(o.ScaleType) {
		var ret ScaleType
		return ret
	}
	return *o.ScaleType
}

// GetScaleTypeOk returns a tuple with the ScaleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDefinition) GetScaleTypeOk() (*ScaleType, bool) {
	if o == nil || IsNil(o.ScaleType) {
		return nil, false
	}
	return o.ScaleType, true
}

// HasScaleType returns a boolean if a field has been set.
func (o *QueryDefinition) HasScaleType() bool {
	if o != nil && !IsNil(o.ScaleType) {
		return true
	}

	return false
}

// SetScaleType gets a reference to the given ScaleType and assigns it to the ScaleType field.
func (o *QueryDefinition) SetScaleType(v ScaleType) {
	o.ScaleType = &v
}

// GetSeriesCountLimit returns the SeriesCountLimit field value if set, zero value otherwise.
func (o *QueryDefinition) GetSeriesCountLimit() string {
	if o == nil || IsNil(o.SeriesCountLimit) {
		var ret string
		return ret
	}
	return *o.SeriesCountLimit
}

// GetSeriesCountLimitOk returns a tuple with the SeriesCountLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDefinition) GetSeriesCountLimitOk() (*string, bool) {
	if o == nil || IsNil(o.SeriesCountLimit) {
		return nil, false
	}
	return o.SeriesCountLimit, true
}

// HasSeriesCountLimit returns a boolean if a field has been set.
func (o *QueryDefinition) HasSeriesCountLimit() bool {
	if o != nil && !IsNil(o.SeriesCountLimit) {
		return true
	}

	return false
}

// SetSeriesCountLimit gets a reference to the given string and assigns it to the SeriesCountLimit field.
func (o *QueryDefinition) SetSeriesCountLimit(v string) {
	o.SeriesCountLimit = &v
}

// GetSeriesNameTemplate returns the SeriesNameTemplate field value if set, zero value otherwise.
func (o *QueryDefinition) GetSeriesNameTemplate() string {
	if o == nil || IsNil(o.SeriesNameTemplate) {
		var ret string
		return ret
	}
	return *o.SeriesNameTemplate
}

// GetSeriesNameTemplateOk returns a tuple with the SeriesNameTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDefinition) GetSeriesNameTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.SeriesNameTemplate) {
		return nil, false
	}
	return o.SeriesNameTemplate, true
}

// HasSeriesNameTemplate returns a boolean if a field has been set.
func (o *QueryDefinition) HasSeriesNameTemplate() bool {
	if o != nil && !IsNil(o.SeriesNameTemplate) {
		return true
	}

	return false
}

// SetSeriesNameTemplate gets a reference to the given string and assigns it to the SeriesNameTemplate field.
func (o *QueryDefinition) SetSeriesNameTemplate(v string) {
	o.SeriesNameTemplate = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *QueryDefinition) GetUnit() CommonUnit {
	if o == nil || IsNil(o.Unit) {
		var ret CommonUnit
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDefinition) GetUnitOk() (*CommonUnit, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *QueryDefinition) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given CommonUnit and assigns it to the Unit field.
func (o *QueryDefinition) SetUnit(v CommonUnit) {
	o.Unit = &v
}

// GetYAxisMax returns the YAxisMax field value if set, zero value otherwise.
func (o *QueryDefinition) GetYAxisMax() float32 {
	if o == nil || IsNil(o.YAxisMax) {
		var ret float32
		return ret
	}
	return *o.YAxisMax
}

// GetYAxisMaxOk returns a tuple with the YAxisMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDefinition) GetYAxisMaxOk() (*float32, bool) {
	if o == nil || IsNil(o.YAxisMax) {
		return nil, false
	}
	return o.YAxisMax, true
}

// HasYAxisMax returns a boolean if a field has been set.
func (o *QueryDefinition) HasYAxisMax() bool {
	if o != nil && !IsNil(o.YAxisMax) {
		return true
	}

	return false
}

// SetYAxisMax gets a reference to the given float32 and assigns it to the YAxisMax field.
func (o *QueryDefinition) SetYAxisMax(v float32) {
	o.YAxisMax = &v
}

// GetYAxisMin returns the YAxisMin field value if set, zero value otherwise.
func (o *QueryDefinition) GetYAxisMin() float32 {
	if o == nil || IsNil(o.YAxisMin) {
		var ret float32
		return ret
	}
	return *o.YAxisMin
}

// GetYAxisMinOk returns a tuple with the YAxisMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDefinition) GetYAxisMinOk() (*float32, bool) {
	if o == nil || IsNil(o.YAxisMin) {
		return nil, false
	}
	return o.YAxisMin, true
}

// HasYAxisMin returns a boolean if a field has been set.
func (o *QueryDefinition) HasYAxisMin() bool {
	if o != nil && !IsNil(o.YAxisMin) {
		return true
	}

	return false
}

// SetYAxisMin gets a reference to the given float32 and assigns it to the YAxisMin field.
func (o *QueryDefinition) SetYAxisMin(v float32) {
	o.YAxisMin = &v
}

func (o QueryDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ColorScheme) {
		toSerialize["colorScheme"] = o.ColorScheme
	}
	if !IsNil(o.CustomUnit) {
		toSerialize["customUnit"] = o.CustomUnit
	}
	if !IsNil(o.DataModeType) {
		toSerialize["dataModeType"] = o.DataModeType
	}
	if !IsNil(o.Decimal) {
		toSerialize["decimal"] = o.Decimal
	}
	if !IsNil(o.DecimalPrecision) {
		toSerialize["decimalPrecision"] = o.DecimalPrecision
	}
	if !IsNil(o.HashColors) {
		toSerialize["hashColors"] = o.HashColors
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.IsVisible) {
		toSerialize["isVisible"] = o.IsVisible
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["query"] = o.Query
	if !IsNil(o.Resolution) {
		toSerialize["resolution"] = o.Resolution
	}
	if !IsNil(o.ScaleType) {
		toSerialize["scaleType"] = o.ScaleType
	}
	if !IsNil(o.SeriesCountLimit) {
		toSerialize["seriesCountLimit"] = o.SeriesCountLimit
	}
	if !IsNil(o.SeriesNameTemplate) {
		toSerialize["seriesNameTemplate"] = o.SeriesNameTemplate
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.YAxisMax) {
		toSerialize["yAxisMax"] = o.YAxisMax
	}
	if !IsNil(o.YAxisMin) {
		toSerialize["yAxisMin"] = o.YAxisMin
	}
	return toSerialize, nil
}

func (o *QueryDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"query",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueryDefinition := _QueryDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQueryDefinition)

	if err != nil {
		return err
	}

	*o = QueryDefinition(varQueryDefinition)

	return err
}

type NullableQueryDefinition struct {
	value *QueryDefinition
	isSet bool
}

func (v NullableQueryDefinition) Get() *QueryDefinition {
	return v.value
}

func (v *NullableQueryDefinition) Set(val *QueryDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryDefinition(val *QueryDefinition) *NullableQueryDefinition {
	return &NullableQueryDefinition{value: val, isSet: true}
}

func (v NullableQueryDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


