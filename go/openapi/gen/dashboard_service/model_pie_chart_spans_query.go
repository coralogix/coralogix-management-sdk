/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the PieChartSpansQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PieChartSpansQuery{}

// PieChartSpansQuery A spans variant of the query
type PieChartSpansQuery struct {
	Aggregation *SpansAggregation `json:"aggregation,omitempty"`
	Filters []SpansFilter `json:"filters,omitempty"`
	GroupNames []SpanField `json:"groupNames,omitempty"`
	GroupNamesFields []SpanObservationField `json:"groupNamesFields,omitempty"`
	LuceneQuery *LuceneQuery `json:"luceneQuery,omitempty"`
	StackedGroupName *SpanField `json:"stackedGroupName,omitempty"`
	StackedGroupNameField *SpanObservationField `json:"stackedGroupNameField,omitempty"`
	TimeFrame *TimeFrameSelect `json:"timeFrame,omitempty"`
}

// NewPieChartSpansQuery instantiates a new PieChartSpansQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPieChartSpansQuery() *PieChartSpansQuery {
	this := PieChartSpansQuery{}
	return &this
}

// NewPieChartSpansQueryWithDefaults instantiates a new PieChartSpansQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPieChartSpansQueryWithDefaults() *PieChartSpansQuery {
	this := PieChartSpansQuery{}
	return &this
}

// GetAggregation returns the Aggregation field value if set, zero value otherwise.
func (o *PieChartSpansQuery) GetAggregation() SpansAggregation {
	if o == nil || IsNil(o.Aggregation) {
		var ret SpansAggregation
		return ret
	}
	return *o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PieChartSpansQuery) GetAggregationOk() (*SpansAggregation, bool) {
	if o == nil || IsNil(o.Aggregation) {
		return nil, false
	}
	return o.Aggregation, true
}

// HasAggregation returns a boolean if a field has been set.
func (o *PieChartSpansQuery) HasAggregation() bool {
	if o != nil && !IsNil(o.Aggregation) {
		return true
	}

	return false
}

// SetAggregation gets a reference to the given SpansAggregation and assigns it to the Aggregation field.
func (o *PieChartSpansQuery) SetAggregation(v SpansAggregation) {
	o.Aggregation = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *PieChartSpansQuery) GetFilters() []SpansFilter {
	if o == nil || IsNil(o.Filters) {
		var ret []SpansFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PieChartSpansQuery) GetFiltersOk() ([]SpansFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *PieChartSpansQuery) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []SpansFilter and assigns it to the Filters field.
func (o *PieChartSpansQuery) SetFilters(v []SpansFilter) {
	o.Filters = v
}

// GetGroupNames returns the GroupNames field value if set, zero value otherwise.
func (o *PieChartSpansQuery) GetGroupNames() []SpanField {
	if o == nil || IsNil(o.GroupNames) {
		var ret []SpanField
		return ret
	}
	return o.GroupNames
}

// GetGroupNamesOk returns a tuple with the GroupNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PieChartSpansQuery) GetGroupNamesOk() ([]SpanField, bool) {
	if o == nil || IsNil(o.GroupNames) {
		return nil, false
	}
	return o.GroupNames, true
}

// HasGroupNames returns a boolean if a field has been set.
func (o *PieChartSpansQuery) HasGroupNames() bool {
	if o != nil && !IsNil(o.GroupNames) {
		return true
	}

	return false
}

// SetGroupNames gets a reference to the given []SpanField and assigns it to the GroupNames field.
func (o *PieChartSpansQuery) SetGroupNames(v []SpanField) {
	o.GroupNames = v
}

// GetGroupNamesFields returns the GroupNamesFields field value if set, zero value otherwise.
func (o *PieChartSpansQuery) GetGroupNamesFields() []SpanObservationField {
	if o == nil || IsNil(o.GroupNamesFields) {
		var ret []SpanObservationField
		return ret
	}
	return o.GroupNamesFields
}

// GetGroupNamesFieldsOk returns a tuple with the GroupNamesFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PieChartSpansQuery) GetGroupNamesFieldsOk() ([]SpanObservationField, bool) {
	if o == nil || IsNil(o.GroupNamesFields) {
		return nil, false
	}
	return o.GroupNamesFields, true
}

// HasGroupNamesFields returns a boolean if a field has been set.
func (o *PieChartSpansQuery) HasGroupNamesFields() bool {
	if o != nil && !IsNil(o.GroupNamesFields) {
		return true
	}

	return false
}

// SetGroupNamesFields gets a reference to the given []SpanObservationField and assigns it to the GroupNamesFields field.
func (o *PieChartSpansQuery) SetGroupNamesFields(v []SpanObservationField) {
	o.GroupNamesFields = v
}

// GetLuceneQuery returns the LuceneQuery field value if set, zero value otherwise.
func (o *PieChartSpansQuery) GetLuceneQuery() LuceneQuery {
	if o == nil || IsNil(o.LuceneQuery) {
		var ret LuceneQuery
		return ret
	}
	return *o.LuceneQuery
}

// GetLuceneQueryOk returns a tuple with the LuceneQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PieChartSpansQuery) GetLuceneQueryOk() (*LuceneQuery, bool) {
	if o == nil || IsNil(o.LuceneQuery) {
		return nil, false
	}
	return o.LuceneQuery, true
}

// HasLuceneQuery returns a boolean if a field has been set.
func (o *PieChartSpansQuery) HasLuceneQuery() bool {
	if o != nil && !IsNil(o.LuceneQuery) {
		return true
	}

	return false
}

// SetLuceneQuery gets a reference to the given LuceneQuery and assigns it to the LuceneQuery field.
func (o *PieChartSpansQuery) SetLuceneQuery(v LuceneQuery) {
	o.LuceneQuery = &v
}

// GetStackedGroupName returns the StackedGroupName field value if set, zero value otherwise.
func (o *PieChartSpansQuery) GetStackedGroupName() SpanField {
	if o == nil || IsNil(o.StackedGroupName) {
		var ret SpanField
		return ret
	}
	return *o.StackedGroupName
}

// GetStackedGroupNameOk returns a tuple with the StackedGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PieChartSpansQuery) GetStackedGroupNameOk() (*SpanField, bool) {
	if o == nil || IsNil(o.StackedGroupName) {
		return nil, false
	}
	return o.StackedGroupName, true
}

// HasStackedGroupName returns a boolean if a field has been set.
func (o *PieChartSpansQuery) HasStackedGroupName() bool {
	if o != nil && !IsNil(o.StackedGroupName) {
		return true
	}

	return false
}

// SetStackedGroupName gets a reference to the given SpanField and assigns it to the StackedGroupName field.
func (o *PieChartSpansQuery) SetStackedGroupName(v SpanField) {
	o.StackedGroupName = &v
}

// GetStackedGroupNameField returns the StackedGroupNameField field value if set, zero value otherwise.
func (o *PieChartSpansQuery) GetStackedGroupNameField() SpanObservationField {
	if o == nil || IsNil(o.StackedGroupNameField) {
		var ret SpanObservationField
		return ret
	}
	return *o.StackedGroupNameField
}

// GetStackedGroupNameFieldOk returns a tuple with the StackedGroupNameField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PieChartSpansQuery) GetStackedGroupNameFieldOk() (*SpanObservationField, bool) {
	if o == nil || IsNil(o.StackedGroupNameField) {
		return nil, false
	}
	return o.StackedGroupNameField, true
}

// HasStackedGroupNameField returns a boolean if a field has been set.
func (o *PieChartSpansQuery) HasStackedGroupNameField() bool {
	if o != nil && !IsNil(o.StackedGroupNameField) {
		return true
	}

	return false
}

// SetStackedGroupNameField gets a reference to the given SpanObservationField and assigns it to the StackedGroupNameField field.
func (o *PieChartSpansQuery) SetStackedGroupNameField(v SpanObservationField) {
	o.StackedGroupNameField = &v
}

// GetTimeFrame returns the TimeFrame field value if set, zero value otherwise.
func (o *PieChartSpansQuery) GetTimeFrame() TimeFrameSelect {
	if o == nil || IsNil(o.TimeFrame) {
		var ret TimeFrameSelect
		return ret
	}
	return *o.TimeFrame
}

// GetTimeFrameOk returns a tuple with the TimeFrame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PieChartSpansQuery) GetTimeFrameOk() (*TimeFrameSelect, bool) {
	if o == nil || IsNil(o.TimeFrame) {
		return nil, false
	}
	return o.TimeFrame, true
}

// HasTimeFrame returns a boolean if a field has been set.
func (o *PieChartSpansQuery) HasTimeFrame() bool {
	if o != nil && !IsNil(o.TimeFrame) {
		return true
	}

	return false
}

// SetTimeFrame gets a reference to the given TimeFrameSelect and assigns it to the TimeFrame field.
func (o *PieChartSpansQuery) SetTimeFrame(v TimeFrameSelect) {
	o.TimeFrame = &v
}

func (o PieChartSpansQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PieChartSpansQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aggregation) {
		toSerialize["aggregation"] = o.Aggregation
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.GroupNames) {
		toSerialize["groupNames"] = o.GroupNames
	}
	if !IsNil(o.GroupNamesFields) {
		toSerialize["groupNamesFields"] = o.GroupNamesFields
	}
	if !IsNil(o.LuceneQuery) {
		toSerialize["luceneQuery"] = o.LuceneQuery
	}
	if !IsNil(o.StackedGroupName) {
		toSerialize["stackedGroupName"] = o.StackedGroupName
	}
	if !IsNil(o.StackedGroupNameField) {
		toSerialize["stackedGroupNameField"] = o.StackedGroupNameField
	}
	if !IsNil(o.TimeFrame) {
		toSerialize["timeFrame"] = o.TimeFrame
	}
	return toSerialize, nil
}

type NullablePieChartSpansQuery struct {
	value *PieChartSpansQuery
	isSet bool
}

func (v NullablePieChartSpansQuery) Get() *PieChartSpansQuery {
	return v.value
}

func (v *NullablePieChartSpansQuery) Set(val *PieChartSpansQuery) {
	v.value = val
	v.isSet = true
}

func (v NullablePieChartSpansQuery) IsSet() bool {
	return v.isSet
}

func (v *NullablePieChartSpansQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePieChartSpansQuery(val *PieChartSpansQuery) *NullablePieChartSpansQuery {
	return &NullablePieChartSpansQuery{value: val, isSet: true}
}

func (v NullablePieChartSpansQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePieChartSpansQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


