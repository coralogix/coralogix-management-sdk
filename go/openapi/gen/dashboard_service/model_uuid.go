/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the UUID type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UUID{}

// UUID struct for UUID
type UUID struct {
	Value *string `json:"value,omitempty"`
}

// NewUUID instantiates a new UUID object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUUID() *UUID {
	this := UUID{}
	return &this
}

// NewUUIDWithDefaults instantiates a new UUID object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUUIDWithDefaults() *UUID {
	this := UUID{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *UUID) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UUID) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *UUID) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *UUID) SetValue(v string) {
	o.Value = &v
}

func (o UUID) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UUID) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableUUID struct {
	value *UUID
	isSet bool
}

func (v NullableUUID) Get() *UUID {
	return v.value
}

func (v *NullableUUID) Set(val *UUID) {
	v.value = val
	v.isSet = true
}

func (v NullableUUID) IsSet() bool {
	return v.isSet
}

func (v *NullableUUID) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUUID(val *UUID) *NullableUUID {
	return &NullableUUID{value: val, isSet: true}
}

func (v NullableUUID) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUUID) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


