/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the ValueLabel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValueLabel{}

// ValueLabel struct for ValueLabel
type ValueLabel struct {
	IsDefault *bool `json:"isDefault,omitempty"`
	Label *string `json:"label,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NewValueLabel instantiates a new ValueLabel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValueLabel() *ValueLabel {
	this := ValueLabel{}
	return &this
}

// NewValueLabelWithDefaults instantiates a new ValueLabel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValueLabelWithDefaults() *ValueLabel {
	this := ValueLabel{}
	return &this
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *ValueLabel) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueLabel) GetIsDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *ValueLabel) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *ValueLabel) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ValueLabel) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueLabel) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ValueLabel) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ValueLabel) SetLabel(v string) {
	o.Label = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ValueLabel) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueLabel) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ValueLabel) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ValueLabel) SetValue(v string) {
	o.Value = &v
}

func (o ValueLabel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValueLabel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsDefault) {
		toSerialize["isDefault"] = o.IsDefault
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableValueLabel struct {
	value *ValueLabel
	isSet bool
}

func (v NullableValueLabel) Get() *ValueLabel {
	return v.value
}

func (v *NullableValueLabel) Set(val *ValueLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableValueLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableValueLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueLabel(val *ValueLabel) *NullableValueLabel {
	return &NullableValueLabel{value: val, isSet: true}
}

func (v NullableValueLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


