/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the SpanFieldSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpanFieldSource{}

// SpanFieldSource struct for SpanFieldSource
type SpanFieldSource struct {
	Value *SpanField `json:"value,omitempty"`
}

// NewSpanFieldSource instantiates a new SpanFieldSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanFieldSource() *SpanFieldSource {
	this := SpanFieldSource{}
	return &this
}

// NewSpanFieldSourceWithDefaults instantiates a new SpanFieldSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanFieldSourceWithDefaults() *SpanFieldSource {
	this := SpanFieldSource{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SpanFieldSource) GetValue() SpanField {
	if o == nil || IsNil(o.Value) {
		var ret SpanField
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanFieldSource) GetValueOk() (*SpanField, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SpanFieldSource) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given SpanField and assigns it to the Value field.
func (o *SpanFieldSource) SetValue(v SpanField) {
	o.Value = &v
}

func (o SpanFieldSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpanFieldSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableSpanFieldSource struct {
	value *SpanFieldSource
	isSet bool
}

func (v NullableSpanFieldSource) Get() *SpanFieldSource {
	return v.value
}

func (v *NullableSpanFieldSource) Set(val *SpanFieldSource) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanFieldSource) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanFieldSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanFieldSource(val *SpanFieldSource) *NullableSpanFieldSource {
	return &NullableSpanFieldSource{value: val, isSet: true}
}

func (v NullableSpanFieldSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanFieldSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


