/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the DefinitionDynamic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefinitionDynamic{}

// DefinitionDynamic struct for DefinitionDynamic
type DefinitionDynamic struct {
	Dynamic *WidgetsDynamic `json:"dynamic,omitempty"`
}

// NewDefinitionDynamic instantiates a new DefinitionDynamic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefinitionDynamic() *DefinitionDynamic {
	this := DefinitionDynamic{}
	return &this
}

// NewDefinitionDynamicWithDefaults instantiates a new DefinitionDynamic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefinitionDynamicWithDefaults() *DefinitionDynamic {
	this := DefinitionDynamic{}
	return &this
}

// GetDynamic returns the Dynamic field value if set, zero value otherwise.
func (o *DefinitionDynamic) GetDynamic() WidgetsDynamic {
	if o == nil || IsNil(o.Dynamic) {
		var ret WidgetsDynamic
		return ret
	}
	return *o.Dynamic
}

// GetDynamicOk returns a tuple with the Dynamic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinitionDynamic) GetDynamicOk() (*WidgetsDynamic, bool) {
	if o == nil || IsNil(o.Dynamic) {
		return nil, false
	}
	return o.Dynamic, true
}

// HasDynamic returns a boolean if a field has been set.
func (o *DefinitionDynamic) HasDynamic() bool {
	if o != nil && !IsNil(o.Dynamic) {
		return true
	}

	return false
}

// SetDynamic gets a reference to the given WidgetsDynamic and assigns it to the Dynamic field.
func (o *DefinitionDynamic) SetDynamic(v WidgetsDynamic) {
	o.Dynamic = &v
}

func (o DefinitionDynamic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefinitionDynamic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dynamic) {
		toSerialize["dynamic"] = o.Dynamic
	}
	return toSerialize, nil
}

type NullableDefinitionDynamic struct {
	value *DefinitionDynamic
	isSet bool
}

func (v NullableDefinitionDynamic) Get() *DefinitionDynamic {
	return v.value
}

func (v *NullableDefinitionDynamic) Set(val *DefinitionDynamic) {
	v.value = val
	v.isSet = true
}

func (v NullableDefinitionDynamic) IsSet() bool {
	return v.isSet
}

func (v *NullableDefinitionDynamic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefinitionDynamic(val *DefinitionDynamic) *NullableDefinitionDynamic {
	return &NullableDefinitionDynamic{value: val, isSet: true}
}

func (v NullableDefinitionDynamic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefinitionDynamic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


