/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the QuerySourceDataprimeQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuerySourceDataprimeQuery{}

// QuerySourceDataprimeQuery struct for QuerySourceDataprimeQuery
type QuerySourceDataprimeQuery struct {
	Type *DataprimeQueryType `json:"type,omitempty"`
}

// NewQuerySourceDataprimeQuery instantiates a new QuerySourceDataprimeQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuerySourceDataprimeQuery() *QuerySourceDataprimeQuery {
	this := QuerySourceDataprimeQuery{}
	return &this
}

// NewQuerySourceDataprimeQueryWithDefaults instantiates a new QuerySourceDataprimeQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuerySourceDataprimeQueryWithDefaults() *QuerySourceDataprimeQuery {
	this := QuerySourceDataprimeQuery{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *QuerySourceDataprimeQuery) GetType() DataprimeQueryType {
	if o == nil || IsNil(o.Type) {
		var ret DataprimeQueryType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuerySourceDataprimeQuery) GetTypeOk() (*DataprimeQueryType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *QuerySourceDataprimeQuery) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given DataprimeQueryType and assigns it to the Type field.
func (o *QuerySourceDataprimeQuery) SetType(v DataprimeQueryType) {
	o.Type = &v
}

func (o QuerySourceDataprimeQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuerySourceDataprimeQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableQuerySourceDataprimeQuery struct {
	value *QuerySourceDataprimeQuery
	isSet bool
}

func (v NullableQuerySourceDataprimeQuery) Get() *QuerySourceDataprimeQuery {
	return v.value
}

func (v *NullableQuerySourceDataprimeQuery) Set(val *QuerySourceDataprimeQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableQuerySourceDataprimeQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableQuerySourceDataprimeQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuerySourceDataprimeQuery(val *QuerySourceDataprimeQuery) *NullableQuerySourceDataprimeQuery {
	return &NullableQuerySourceDataprimeQuery{value: val, isSet: true}
}

func (v NullableQuerySourceDataprimeQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuerySourceDataprimeQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


