/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// BarChartQuery - struct for BarChartQuery
type BarChartQuery struct {
	BarChartQueryOneOf *BarChartQueryOneOf
	BarChartQueryOneOf1 *BarChartQueryOneOf1
	BarChartQueryOneOf2 *BarChartQueryOneOf2
	BarChartQueryOneOf3 *BarChartQueryOneOf3
}

// BarChartQueryOneOfAsBarChartQuery is a convenience function that returns BarChartQueryOneOf wrapped in BarChartQuery
func BarChartQueryOneOfAsBarChartQuery(v *BarChartQueryOneOf) BarChartQuery {
	return BarChartQuery{
		BarChartQueryOneOf: v,
	}
}

// BarChartQueryOneOf1AsBarChartQuery is a convenience function that returns BarChartQueryOneOf1 wrapped in BarChartQuery
func BarChartQueryOneOf1AsBarChartQuery(v *BarChartQueryOneOf1) BarChartQuery {
	return BarChartQuery{
		BarChartQueryOneOf1: v,
	}
}

// BarChartQueryOneOf2AsBarChartQuery is a convenience function that returns BarChartQueryOneOf2 wrapped in BarChartQuery
func BarChartQueryOneOf2AsBarChartQuery(v *BarChartQueryOneOf2) BarChartQuery {
	return BarChartQuery{
		BarChartQueryOneOf2: v,
	}
}

// BarChartQueryOneOf3AsBarChartQuery is a convenience function that returns BarChartQueryOneOf3 wrapped in BarChartQuery
func BarChartQueryOneOf3AsBarChartQuery(v *BarChartQueryOneOf3) BarChartQuery {
	return BarChartQuery{
		BarChartQueryOneOf3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *BarChartQuery) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BarChartQueryOneOf
	err = newStrictDecoder(data).Decode(&dst.BarChartQueryOneOf)
	if err == nil {
		jsonBarChartQueryOneOf, _ := json.Marshal(dst.BarChartQueryOneOf)
		if string(jsonBarChartQueryOneOf) == "{}" { // empty struct
			dst.BarChartQueryOneOf = nil
		} else {
			if err = validator.Validate(dst.BarChartQueryOneOf); err != nil {
				dst.BarChartQueryOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.BarChartQueryOneOf = nil
	}

	// try to unmarshal data into BarChartQueryOneOf1
	err = newStrictDecoder(data).Decode(&dst.BarChartQueryOneOf1)
	if err == nil {
		jsonBarChartQueryOneOf1, _ := json.Marshal(dst.BarChartQueryOneOf1)
		if string(jsonBarChartQueryOneOf1) == "{}" { // empty struct
			dst.BarChartQueryOneOf1 = nil
		} else {
			if err = validator.Validate(dst.BarChartQueryOneOf1); err != nil {
				dst.BarChartQueryOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.BarChartQueryOneOf1 = nil
	}

	// try to unmarshal data into BarChartQueryOneOf2
	err = newStrictDecoder(data).Decode(&dst.BarChartQueryOneOf2)
	if err == nil {
		jsonBarChartQueryOneOf2, _ := json.Marshal(dst.BarChartQueryOneOf2)
		if string(jsonBarChartQueryOneOf2) == "{}" { // empty struct
			dst.BarChartQueryOneOf2 = nil
		} else {
			if err = validator.Validate(dst.BarChartQueryOneOf2); err != nil {
				dst.BarChartQueryOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.BarChartQueryOneOf2 = nil
	}

	// try to unmarshal data into BarChartQueryOneOf3
	err = newStrictDecoder(data).Decode(&dst.BarChartQueryOneOf3)
	if err == nil {
		jsonBarChartQueryOneOf3, _ := json.Marshal(dst.BarChartQueryOneOf3)
		if string(jsonBarChartQueryOneOf3) == "{}" { // empty struct
			dst.BarChartQueryOneOf3 = nil
		} else {
			if err = validator.Validate(dst.BarChartQueryOneOf3); err != nil {
				dst.BarChartQueryOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.BarChartQueryOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BarChartQueryOneOf = nil
		dst.BarChartQueryOneOf1 = nil
		dst.BarChartQueryOneOf2 = nil
		dst.BarChartQueryOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BarChartQuery)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BarChartQuery)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BarChartQuery) MarshalJSON() ([]byte, error) {
	if src.BarChartQueryOneOf != nil {
		return json.Marshal(&src.BarChartQueryOneOf)
	}

	if src.BarChartQueryOneOf1 != nil {
		return json.Marshal(&src.BarChartQueryOneOf1)
	}

	if src.BarChartQueryOneOf2 != nil {
		return json.Marshal(&src.BarChartQueryOneOf2)
	}

	if src.BarChartQueryOneOf3 != nil {
		return json.Marshal(&src.BarChartQueryOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BarChartQuery) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BarChartQueryOneOf != nil {
		return obj.BarChartQueryOneOf
	}

	if obj.BarChartQueryOneOf1 != nil {
		return obj.BarChartQueryOneOf1
	}

	if obj.BarChartQueryOneOf2 != nil {
		return obj.BarChartQueryOneOf2
	}

	if obj.BarChartQueryOneOf3 != nil {
		return obj.BarChartQueryOneOf3
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj BarChartQuery) GetActualInstanceValue() (interface{}) {
	if obj.BarChartQueryOneOf != nil {
		return *obj.BarChartQueryOneOf
	}

	if obj.BarChartQueryOneOf1 != nil {
		return *obj.BarChartQueryOneOf1
	}

	if obj.BarChartQueryOneOf2 != nil {
		return *obj.BarChartQueryOneOf2
	}

	if obj.BarChartQueryOneOf3 != nil {
		return *obj.BarChartQueryOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableBarChartQuery struct {
	value *BarChartQuery
	isSet bool
}

func (v NullableBarChartQuery) Get() *BarChartQuery {
	return v.value
}

func (v *NullableBarChartQuery) Set(val *BarChartQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableBarChartQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableBarChartQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBarChartQuery(val *BarChartQuery) *NullableBarChartQuery {
	return &NullableBarChartQuery{value: val, isSet: true}
}

func (v NullableBarChartQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBarChartQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


