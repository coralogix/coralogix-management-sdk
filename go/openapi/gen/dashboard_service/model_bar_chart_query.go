/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// BarChartQuery - struct for BarChartQuery
type BarChartQuery struct {
	BarChartQueryDataprime *BarChartQueryDataprime
	BarChartQueryLogs *BarChartQueryLogs
	BarChartQueryMetrics *BarChartQueryMetrics
	BarChartQuerySpans *BarChartQuerySpans
}

// BarChartQueryDataprimeAsBarChartQuery is a convenience function that returns BarChartQueryDataprime wrapped in BarChartQuery
func BarChartQueryDataprimeAsBarChartQuery(v *BarChartQueryDataprime) BarChartQuery {
	return BarChartQuery{
		BarChartQueryDataprime: v,
	}
}

// BarChartQueryLogsAsBarChartQuery is a convenience function that returns BarChartQueryLogs wrapped in BarChartQuery
func BarChartQueryLogsAsBarChartQuery(v *BarChartQueryLogs) BarChartQuery {
	return BarChartQuery{
		BarChartQueryLogs: v,
	}
}

// BarChartQueryMetricsAsBarChartQuery is a convenience function that returns BarChartQueryMetrics wrapped in BarChartQuery
func BarChartQueryMetricsAsBarChartQuery(v *BarChartQueryMetrics) BarChartQuery {
	return BarChartQuery{
		BarChartQueryMetrics: v,
	}
}

// BarChartQuerySpansAsBarChartQuery is a convenience function that returns BarChartQuerySpans wrapped in BarChartQuery
func BarChartQuerySpansAsBarChartQuery(v *BarChartQuerySpans) BarChartQuery {
	return BarChartQuery{
		BarChartQuerySpans: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *BarChartQuery) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BarChartQueryDataprime
	err = newStrictDecoder(data).Decode(&dst.BarChartQueryDataprime)
	if err == nil {
		jsonBarChartQueryDataprime, _ := json.Marshal(dst.BarChartQueryDataprime)
		if string(jsonBarChartQueryDataprime) == "{}" { // empty struct
			dst.BarChartQueryDataprime = nil
		} else {
			if err = validator.Validate(dst.BarChartQueryDataprime); err != nil {
				dst.BarChartQueryDataprime = nil
			} else {
				match++
			}
		}
	} else {
		dst.BarChartQueryDataprime = nil
	}

	// try to unmarshal data into BarChartQueryLogs
	err = newStrictDecoder(data).Decode(&dst.BarChartQueryLogs)
	if err == nil {
		jsonBarChartQueryLogs, _ := json.Marshal(dst.BarChartQueryLogs)
		if string(jsonBarChartQueryLogs) == "{}" { // empty struct
			dst.BarChartQueryLogs = nil
		} else {
			if err = validator.Validate(dst.BarChartQueryLogs); err != nil {
				dst.BarChartQueryLogs = nil
			} else {
				match++
			}
		}
	} else {
		dst.BarChartQueryLogs = nil
	}

	// try to unmarshal data into BarChartQueryMetrics
	err = newStrictDecoder(data).Decode(&dst.BarChartQueryMetrics)
	if err == nil {
		jsonBarChartQueryMetrics, _ := json.Marshal(dst.BarChartQueryMetrics)
		if string(jsonBarChartQueryMetrics) == "{}" { // empty struct
			dst.BarChartQueryMetrics = nil
		} else {
			if err = validator.Validate(dst.BarChartQueryMetrics); err != nil {
				dst.BarChartQueryMetrics = nil
			} else {
				match++
			}
		}
	} else {
		dst.BarChartQueryMetrics = nil
	}

	// try to unmarshal data into BarChartQuerySpans
	err = newStrictDecoder(data).Decode(&dst.BarChartQuerySpans)
	if err == nil {
		jsonBarChartQuerySpans, _ := json.Marshal(dst.BarChartQuerySpans)
		if string(jsonBarChartQuerySpans) == "{}" { // empty struct
			dst.BarChartQuerySpans = nil
		} else {
			if err = validator.Validate(dst.BarChartQuerySpans); err != nil {
				dst.BarChartQuerySpans = nil
			} else {
				match++
			}
		}
	} else {
		dst.BarChartQuerySpans = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BarChartQueryDataprime = nil
		dst.BarChartQueryLogs = nil
		dst.BarChartQueryMetrics = nil
		dst.BarChartQuerySpans = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BarChartQuery)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BarChartQuery)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BarChartQuery) MarshalJSON() ([]byte, error) {
	if src.BarChartQueryDataprime != nil {
		return json.Marshal(&src.BarChartQueryDataprime)
	}

	if src.BarChartQueryLogs != nil {
		return json.Marshal(&src.BarChartQueryLogs)
	}

	if src.BarChartQueryMetrics != nil {
		return json.Marshal(&src.BarChartQueryMetrics)
	}

	if src.BarChartQuerySpans != nil {
		return json.Marshal(&src.BarChartQuerySpans)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BarChartQuery) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BarChartQueryDataprime != nil {
		return obj.BarChartQueryDataprime
	}

	if obj.BarChartQueryLogs != nil {
		return obj.BarChartQueryLogs
	}

	if obj.BarChartQueryMetrics != nil {
		return obj.BarChartQueryMetrics
	}

	if obj.BarChartQuerySpans != nil {
		return obj.BarChartQuerySpans
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj BarChartQuery) GetActualInstanceValue() (interface{}) {
	if obj.BarChartQueryDataprime != nil {
		return *obj.BarChartQueryDataprime
	}

	if obj.BarChartQueryLogs != nil {
		return *obj.BarChartQueryLogs
	}

	if obj.BarChartQueryMetrics != nil {
		return *obj.BarChartQueryMetrics
	}

	if obj.BarChartQuerySpans != nil {
		return *obj.BarChartQuerySpans
	}

	// all schemas are nil
	return nil
}

type NullableBarChartQuery struct {
	value *BarChartQuery
	isSet bool
}

func (v NullableBarChartQuery) Get() *BarChartQuery {
	return v.value
}

func (v *NullableBarChartQuery) Set(val *BarChartQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableBarChartQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableBarChartQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBarChartQuery(val *BarChartQuery) *NullableBarChartQuery {
	return &NullableBarChartQuery{value: val, isSet: true}
}

func (v NullableBarChartQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBarChartQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


