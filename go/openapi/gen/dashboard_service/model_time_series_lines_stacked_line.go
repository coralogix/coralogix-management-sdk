/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// TimeSeriesLinesStackedLine the model 'TimeSeriesLinesStackedLine'
type TimeSeriesLinesStackedLine string

// List of TimeSeriesLines.StackedLine
const (
	TIMESERIESLINESSTACKEDLINE_STACKED_LINE_UNSPECIFIED TimeSeriesLinesStackedLine = "STACKED_LINE_UNSPECIFIED"
	TIMESERIESLINESSTACKEDLINE_STACKED_LINE_ABSOLUTE TimeSeriesLinesStackedLine = "STACKED_LINE_ABSOLUTE"
	TIMESERIESLINESSTACKEDLINE_STACKED_LINE_RELATIVE TimeSeriesLinesStackedLine = "STACKED_LINE_RELATIVE"
)

// All allowed values of TimeSeriesLinesStackedLine enum
var AllowedTimeSeriesLinesStackedLineEnumValues = []TimeSeriesLinesStackedLine{
	"STACKED_LINE_UNSPECIFIED",
	"STACKED_LINE_ABSOLUTE",
	"STACKED_LINE_RELATIVE",
}

func (v *TimeSeriesLinesStackedLine) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TimeSeriesLinesStackedLine(value)
	for _, existing := range AllowedTimeSeriesLinesStackedLineEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TimeSeriesLinesStackedLine", value)
}

// NewTimeSeriesLinesStackedLineFromValue returns a pointer to a valid TimeSeriesLinesStackedLine
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimeSeriesLinesStackedLineFromValue(v string) (*TimeSeriesLinesStackedLine, error) {
	ev := TimeSeriesLinesStackedLine(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TimeSeriesLinesStackedLine: valid values are %v", v, AllowedTimeSeriesLinesStackedLineEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TimeSeriesLinesStackedLine) IsValid() bool {
	for _, existing := range AllowedTimeSeriesLinesStackedLineEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TimeSeriesLines.StackedLine value
func (v TimeSeriesLinesStackedLine) Ptr() *TimeSeriesLinesStackedLine {
	return &v
}

type NullableTimeSeriesLinesStackedLine struct {
	value *TimeSeriesLinesStackedLine
	isSet bool
}

func (v NullableTimeSeriesLinesStackedLine) Get() *TimeSeriesLinesStackedLine {
	return v.value
}

func (v *NullableTimeSeriesLinesStackedLine) Set(val *TimeSeriesLinesStackedLine) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeSeriesLinesStackedLine) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeSeriesLinesStackedLine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeSeriesLinesStackedLine(val *TimeSeriesLinesStackedLine) *NullableTimeSeriesLinesStackedLine {
	return &NullableTimeSeriesLinesStackedLine{value: val, isSet: true}
}

func (v NullableTimeSeriesLinesStackedLine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeSeriesLinesStackedLine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

