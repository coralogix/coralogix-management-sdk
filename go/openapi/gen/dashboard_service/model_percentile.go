/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the Percentile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Percentile{}

// Percentile struct for Percentile
type Percentile struct {
	Field *string `json:"field,omitempty"`
	ObservationField *ObservationField `json:"observationField,omitempty"`
	Percent *float64 `json:"percent,omitempty"`
}

// NewPercentile instantiates a new Percentile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPercentile() *Percentile {
	this := Percentile{}
	return &this
}

// NewPercentileWithDefaults instantiates a new Percentile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPercentileWithDefaults() *Percentile {
	this := Percentile{}
	return &this
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *Percentile) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Percentile) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *Percentile) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *Percentile) SetField(v string) {
	o.Field = &v
}

// GetObservationField returns the ObservationField field value if set, zero value otherwise.
func (o *Percentile) GetObservationField() ObservationField {
	if o == nil || IsNil(o.ObservationField) {
		var ret ObservationField
		return ret
	}
	return *o.ObservationField
}

// GetObservationFieldOk returns a tuple with the ObservationField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Percentile) GetObservationFieldOk() (*ObservationField, bool) {
	if o == nil || IsNil(o.ObservationField) {
		return nil, false
	}
	return o.ObservationField, true
}

// HasObservationField returns a boolean if a field has been set.
func (o *Percentile) HasObservationField() bool {
	if o != nil && !IsNil(o.ObservationField) {
		return true
	}

	return false
}

// SetObservationField gets a reference to the given ObservationField and assigns it to the ObservationField field.
func (o *Percentile) SetObservationField(v ObservationField) {
	o.ObservationField = &v
}

// GetPercent returns the Percent field value if set, zero value otherwise.
func (o *Percentile) GetPercent() float64 {
	if o == nil || IsNil(o.Percent) {
		var ret float64
		return ret
	}
	return *o.Percent
}

// GetPercentOk returns a tuple with the Percent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Percentile) GetPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.Percent) {
		return nil, false
	}
	return o.Percent, true
}

// HasPercent returns a boolean if a field has been set.
func (o *Percentile) HasPercent() bool {
	if o != nil && !IsNil(o.Percent) {
		return true
	}

	return false
}

// SetPercent gets a reference to the given float64 and assigns it to the Percent field.
func (o *Percentile) SetPercent(v float64) {
	o.Percent = &v
}

func (o Percentile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Percentile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.ObservationField) {
		toSerialize["observationField"] = o.ObservationField
	}
	if !IsNil(o.Percent) {
		toSerialize["percent"] = o.Percent
	}
	return toSerialize, nil
}

type NullablePercentile struct {
	value *Percentile
	isSet bool
}

func (v NullablePercentile) Get() *Percentile {
	return v.value
}

func (v *NullablePercentile) Set(val *Percentile) {
	v.value = val
	v.isSet = true
}

func (v NullablePercentile) IsSet() bool {
	return v.isSet
}

func (v *NullablePercentile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePercentile(val *Percentile) *NullablePercentile {
	return &NullablePercentile{value: val, isSet: true}
}

func (v NullablePercentile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePercentile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


