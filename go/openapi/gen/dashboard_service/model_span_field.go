/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SpanField - struct for SpanField
type SpanField struct {
	SpanFieldMetadataField *SpanFieldMetadataField
	SpanFieldProcessTagField *SpanFieldProcessTagField
	SpanFieldTagField *SpanFieldTagField
}

// SpanFieldMetadataFieldAsSpanField is a convenience function that returns SpanFieldMetadataField wrapped in SpanField
func SpanFieldMetadataFieldAsSpanField(v *SpanFieldMetadataField) SpanField {
	return SpanField{
		SpanFieldMetadataField: v,
	}
}

// SpanFieldProcessTagFieldAsSpanField is a convenience function that returns SpanFieldProcessTagField wrapped in SpanField
func SpanFieldProcessTagFieldAsSpanField(v *SpanFieldProcessTagField) SpanField {
	return SpanField{
		SpanFieldProcessTagField: v,
	}
}

// SpanFieldTagFieldAsSpanField is a convenience function that returns SpanFieldTagField wrapped in SpanField
func SpanFieldTagFieldAsSpanField(v *SpanFieldTagField) SpanField {
	return SpanField{
		SpanFieldTagField: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SpanField) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SpanFieldMetadataField
	err = newStrictDecoder(data).Decode(&dst.SpanFieldMetadataField)
	if err == nil {
		jsonSpanFieldMetadataField, _ := json.Marshal(dst.SpanFieldMetadataField)
		if string(jsonSpanFieldMetadataField) == "{}" { // empty struct
			dst.SpanFieldMetadataField = nil
		} else {
			if err = validator.Validate(dst.SpanFieldMetadataField); err != nil {
				dst.SpanFieldMetadataField = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpanFieldMetadataField = nil
	}

	// try to unmarshal data into SpanFieldProcessTagField
	err = newStrictDecoder(data).Decode(&dst.SpanFieldProcessTagField)
	if err == nil {
		jsonSpanFieldProcessTagField, _ := json.Marshal(dst.SpanFieldProcessTagField)
		if string(jsonSpanFieldProcessTagField) == "{}" { // empty struct
			dst.SpanFieldProcessTagField = nil
		} else {
			if err = validator.Validate(dst.SpanFieldProcessTagField); err != nil {
				dst.SpanFieldProcessTagField = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpanFieldProcessTagField = nil
	}

	// try to unmarshal data into SpanFieldTagField
	err = newStrictDecoder(data).Decode(&dst.SpanFieldTagField)
	if err == nil {
		jsonSpanFieldTagField, _ := json.Marshal(dst.SpanFieldTagField)
		if string(jsonSpanFieldTagField) == "{}" { // empty struct
			dst.SpanFieldTagField = nil
		} else {
			if err = validator.Validate(dst.SpanFieldTagField); err != nil {
				dst.SpanFieldTagField = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpanFieldTagField = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SpanFieldMetadataField = nil
		dst.SpanFieldProcessTagField = nil
		dst.SpanFieldTagField = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SpanField)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SpanField)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SpanField) MarshalJSON() ([]byte, error) {
	if src.SpanFieldMetadataField != nil {
		return json.Marshal(&src.SpanFieldMetadataField)
	}

	if src.SpanFieldProcessTagField != nil {
		return json.Marshal(&src.SpanFieldProcessTagField)
	}

	if src.SpanFieldTagField != nil {
		return json.Marshal(&src.SpanFieldTagField)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SpanField) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SpanFieldMetadataField != nil {
		return obj.SpanFieldMetadataField
	}

	if obj.SpanFieldProcessTagField != nil {
		return obj.SpanFieldProcessTagField
	}

	if obj.SpanFieldTagField != nil {
		return obj.SpanFieldTagField
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SpanField) GetActualInstanceValue() (interface{}) {
	if obj.SpanFieldMetadataField != nil {
		return *obj.SpanFieldMetadataField
	}

	if obj.SpanFieldProcessTagField != nil {
		return *obj.SpanFieldProcessTagField
	}

	if obj.SpanFieldTagField != nil {
		return *obj.SpanFieldTagField
	}

	// all schemas are nil
	return nil
}

type NullableSpanField struct {
	value *SpanField
	isSet bool
}

func (v NullableSpanField) Get() *SpanField {
	return v.value
}

func (v *NullableSpanField) Set(val *SpanField) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanField) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanField(val *SpanField) *NullableSpanField {
	return &NullableSpanField{value: val, isSet: true}
}

func (v NullableSpanField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


