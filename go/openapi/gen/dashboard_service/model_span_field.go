/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SpanField - struct for SpanField
type SpanField struct {
	SpanFieldOneOf *SpanFieldOneOf
	SpanFieldOneOf1 *SpanFieldOneOf1
	SpanFieldOneOf2 *SpanFieldOneOf2
}

// SpanFieldOneOfAsSpanField is a convenience function that returns SpanFieldOneOf wrapped in SpanField
func SpanFieldOneOfAsSpanField(v *SpanFieldOneOf) SpanField {
	return SpanField{
		SpanFieldOneOf: v,
	}
}

// SpanFieldOneOf1AsSpanField is a convenience function that returns SpanFieldOneOf1 wrapped in SpanField
func SpanFieldOneOf1AsSpanField(v *SpanFieldOneOf1) SpanField {
	return SpanField{
		SpanFieldOneOf1: v,
	}
}

// SpanFieldOneOf2AsSpanField is a convenience function that returns SpanFieldOneOf2 wrapped in SpanField
func SpanFieldOneOf2AsSpanField(v *SpanFieldOneOf2) SpanField {
	return SpanField{
		SpanFieldOneOf2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SpanField) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SpanFieldOneOf
	err = newStrictDecoder(data).Decode(&dst.SpanFieldOneOf)
	if err == nil {
		jsonSpanFieldOneOf, _ := json.Marshal(dst.SpanFieldOneOf)
		if string(jsonSpanFieldOneOf) == "{}" { // empty struct
			dst.SpanFieldOneOf = nil
		} else {
			if err = validator.Validate(dst.SpanFieldOneOf); err != nil {
				dst.SpanFieldOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpanFieldOneOf = nil
	}

	// try to unmarshal data into SpanFieldOneOf1
	err = newStrictDecoder(data).Decode(&dst.SpanFieldOneOf1)
	if err == nil {
		jsonSpanFieldOneOf1, _ := json.Marshal(dst.SpanFieldOneOf1)
		if string(jsonSpanFieldOneOf1) == "{}" { // empty struct
			dst.SpanFieldOneOf1 = nil
		} else {
			if err = validator.Validate(dst.SpanFieldOneOf1); err != nil {
				dst.SpanFieldOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpanFieldOneOf1 = nil
	}

	// try to unmarshal data into SpanFieldOneOf2
	err = newStrictDecoder(data).Decode(&dst.SpanFieldOneOf2)
	if err == nil {
		jsonSpanFieldOneOf2, _ := json.Marshal(dst.SpanFieldOneOf2)
		if string(jsonSpanFieldOneOf2) == "{}" { // empty struct
			dst.SpanFieldOneOf2 = nil
		} else {
			if err = validator.Validate(dst.SpanFieldOneOf2); err != nil {
				dst.SpanFieldOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpanFieldOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SpanFieldOneOf = nil
		dst.SpanFieldOneOf1 = nil
		dst.SpanFieldOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SpanField)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SpanField)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SpanField) MarshalJSON() ([]byte, error) {
	if src.SpanFieldOneOf != nil {
		return json.Marshal(&src.SpanFieldOneOf)
	}

	if src.SpanFieldOneOf1 != nil {
		return json.Marshal(&src.SpanFieldOneOf1)
	}

	if src.SpanFieldOneOf2 != nil {
		return json.Marshal(&src.SpanFieldOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SpanField) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SpanFieldOneOf != nil {
		return obj.SpanFieldOneOf
	}

	if obj.SpanFieldOneOf1 != nil {
		return obj.SpanFieldOneOf1
	}

	if obj.SpanFieldOneOf2 != nil {
		return obj.SpanFieldOneOf2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SpanField) GetActualInstanceValue() (interface{}) {
	if obj.SpanFieldOneOf != nil {
		return *obj.SpanFieldOneOf
	}

	if obj.SpanFieldOneOf1 != nil {
		return *obj.SpanFieldOneOf1
	}

	if obj.SpanFieldOneOf2 != nil {
		return *obj.SpanFieldOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableSpanField struct {
	value *SpanField
	isSet bool
}

func (v NullableSpanField) Get() *SpanField {
	return v.value
}

func (v *NullableSpanField) Set(val *SpanField) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanField) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanField(val *SpanField) *NullableSpanField {
	return &NullableSpanField{value: val, isSet: true}
}

func (v NullableSpanField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


