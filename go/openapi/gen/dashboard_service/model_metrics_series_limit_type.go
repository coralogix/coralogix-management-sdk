/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// MetricsSeriesLimitType the model 'MetricsSeriesLimitType'
type MetricsSeriesLimitType string

// List of MetricsSeriesLimitType
const (
	METRICSSERIESLIMITTYPE_METRICS_SERIES_LIMIT_TYPE_UNSPECIFIED MetricsSeriesLimitType = "METRICS_SERIES_LIMIT_TYPE_UNSPECIFIED"
	METRICSSERIESLIMITTYPE_METRICS_SERIES_LIMIT_TYPE_BY_SERIES_COUNT MetricsSeriesLimitType = "METRICS_SERIES_LIMIT_TYPE_BY_SERIES_COUNT"
	METRICSSERIESLIMITTYPE_METRICS_SERIES_LIMIT_TYPE_BY_POINT_COUNT MetricsSeriesLimitType = "METRICS_SERIES_LIMIT_TYPE_BY_POINT_COUNT"
)

// All allowed values of MetricsSeriesLimitType enum
var AllowedMetricsSeriesLimitTypeEnumValues = []MetricsSeriesLimitType{
	"METRICS_SERIES_LIMIT_TYPE_UNSPECIFIED",
	"METRICS_SERIES_LIMIT_TYPE_BY_SERIES_COUNT",
	"METRICS_SERIES_LIMIT_TYPE_BY_POINT_COUNT",
}

func (v *MetricsSeriesLimitType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetricsSeriesLimitType(value)
	for _, existing := range AllowedMetricsSeriesLimitTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetricsSeriesLimitType", value)
}

// NewMetricsSeriesLimitTypeFromValue returns a pointer to a valid MetricsSeriesLimitType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetricsSeriesLimitTypeFromValue(v string) (*MetricsSeriesLimitType, error) {
	ev := MetricsSeriesLimitType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetricsSeriesLimitType: valid values are %v", v, AllowedMetricsSeriesLimitTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetricsSeriesLimitType) IsValid() bool {
	for _, existing := range AllowedMetricsSeriesLimitTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetricsSeriesLimitType value
func (v MetricsSeriesLimitType) Ptr() *MetricsSeriesLimitType {
	return &v
}

type NullableMetricsSeriesLimitType struct {
	value *MetricsSeriesLimitType
	isSet bool
}

func (v NullableMetricsSeriesLimitType) Get() *MetricsSeriesLimitType {
	return v.value
}

func (v *NullableMetricsSeriesLimitType) Set(val *MetricsSeriesLimitType) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsSeriesLimitType) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsSeriesLimitType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsSeriesLimitType(val *MetricsSeriesLimitType) *NullableMetricsSeriesLimitType {
	return &NullableMetricsSeriesLimitType{value: val, isSet: true}
}

func (v NullableMetricsSeriesLimitType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsSeriesLimitType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

