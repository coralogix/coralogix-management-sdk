/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ActionDefinition - struct for ActionDefinition
type ActionDefinition struct {
	ActionDefinitionOneOf *ActionDefinitionOneOf
	ActionDefinitionOneOf1 *ActionDefinitionOneOf1
}

// ActionDefinitionOneOfAsActionDefinition is a convenience function that returns ActionDefinitionOneOf wrapped in ActionDefinition
func ActionDefinitionOneOfAsActionDefinition(v *ActionDefinitionOneOf) ActionDefinition {
	return ActionDefinition{
		ActionDefinitionOneOf: v,
	}
}

// ActionDefinitionOneOf1AsActionDefinition is a convenience function that returns ActionDefinitionOneOf1 wrapped in ActionDefinition
func ActionDefinitionOneOf1AsActionDefinition(v *ActionDefinitionOneOf1) ActionDefinition {
	return ActionDefinition{
		ActionDefinitionOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ActionDefinition) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ActionDefinitionOneOf
	err = newStrictDecoder(data).Decode(&dst.ActionDefinitionOneOf)
	if err == nil {
		jsonActionDefinitionOneOf, _ := json.Marshal(dst.ActionDefinitionOneOf)
		if string(jsonActionDefinitionOneOf) == "{}" { // empty struct
			dst.ActionDefinitionOneOf = nil
		} else {
			if err = validator.Validate(dst.ActionDefinitionOneOf); err != nil {
				dst.ActionDefinitionOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.ActionDefinitionOneOf = nil
	}

	// try to unmarshal data into ActionDefinitionOneOf1
	err = newStrictDecoder(data).Decode(&dst.ActionDefinitionOneOf1)
	if err == nil {
		jsonActionDefinitionOneOf1, _ := json.Marshal(dst.ActionDefinitionOneOf1)
		if string(jsonActionDefinitionOneOf1) == "{}" { // empty struct
			dst.ActionDefinitionOneOf1 = nil
		} else {
			if err = validator.Validate(dst.ActionDefinitionOneOf1); err != nil {
				dst.ActionDefinitionOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ActionDefinitionOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ActionDefinitionOneOf = nil
		dst.ActionDefinitionOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ActionDefinition)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ActionDefinition)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ActionDefinition) MarshalJSON() ([]byte, error) {
	if src.ActionDefinitionOneOf != nil {
		return json.Marshal(&src.ActionDefinitionOneOf)
	}

	if src.ActionDefinitionOneOf1 != nil {
		return json.Marshal(&src.ActionDefinitionOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ActionDefinition) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ActionDefinitionOneOf != nil {
		return obj.ActionDefinitionOneOf
	}

	if obj.ActionDefinitionOneOf1 != nil {
		return obj.ActionDefinitionOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ActionDefinition) GetActualInstanceValue() (interface{}) {
	if obj.ActionDefinitionOneOf != nil {
		return *obj.ActionDefinitionOneOf
	}

	if obj.ActionDefinitionOneOf1 != nil {
		return *obj.ActionDefinitionOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableActionDefinition struct {
	value *ActionDefinition
	isSet bool
}

func (v NullableActionDefinition) Get() *ActionDefinition {
	return v.value
}

func (v *NullableActionDefinition) Set(val *ActionDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableActionDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableActionDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionDefinition(val *ActionDefinition) *NullableActionDefinition {
	return &NullableActionDefinition{value: val, isSet: true}
}

func (v NullableActionDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


