/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// WidgetDefinition - struct for WidgetDefinition
type WidgetDefinition struct {
	WidgetDefinitionOneOf *WidgetDefinitionOneOf
	WidgetDefinitionOneOf1 *WidgetDefinitionOneOf1
	WidgetDefinitionOneOf2 *WidgetDefinitionOneOf2
	WidgetDefinitionOneOf3 *WidgetDefinitionOneOf3
	WidgetDefinitionOneOf4 *WidgetDefinitionOneOf4
	WidgetDefinitionOneOf5 *WidgetDefinitionOneOf5
	WidgetDefinitionOneOf6 *WidgetDefinitionOneOf6
	WidgetDefinitionOneOf7 *WidgetDefinitionOneOf7
	WidgetDefinitionOneOf8 *WidgetDefinitionOneOf8
}

// WidgetDefinitionOneOfAsWidgetDefinition is a convenience function that returns WidgetDefinitionOneOf wrapped in WidgetDefinition
func WidgetDefinitionOneOfAsWidgetDefinition(v *WidgetDefinitionOneOf) WidgetDefinition {
	return WidgetDefinition{
		WidgetDefinitionOneOf: v,
	}
}

// WidgetDefinitionOneOf1AsWidgetDefinition is a convenience function that returns WidgetDefinitionOneOf1 wrapped in WidgetDefinition
func WidgetDefinitionOneOf1AsWidgetDefinition(v *WidgetDefinitionOneOf1) WidgetDefinition {
	return WidgetDefinition{
		WidgetDefinitionOneOf1: v,
	}
}

// WidgetDefinitionOneOf2AsWidgetDefinition is a convenience function that returns WidgetDefinitionOneOf2 wrapped in WidgetDefinition
func WidgetDefinitionOneOf2AsWidgetDefinition(v *WidgetDefinitionOneOf2) WidgetDefinition {
	return WidgetDefinition{
		WidgetDefinitionOneOf2: v,
	}
}

// WidgetDefinitionOneOf3AsWidgetDefinition is a convenience function that returns WidgetDefinitionOneOf3 wrapped in WidgetDefinition
func WidgetDefinitionOneOf3AsWidgetDefinition(v *WidgetDefinitionOneOf3) WidgetDefinition {
	return WidgetDefinition{
		WidgetDefinitionOneOf3: v,
	}
}

// WidgetDefinitionOneOf4AsWidgetDefinition is a convenience function that returns WidgetDefinitionOneOf4 wrapped in WidgetDefinition
func WidgetDefinitionOneOf4AsWidgetDefinition(v *WidgetDefinitionOneOf4) WidgetDefinition {
	return WidgetDefinition{
		WidgetDefinitionOneOf4: v,
	}
}

// WidgetDefinitionOneOf5AsWidgetDefinition is a convenience function that returns WidgetDefinitionOneOf5 wrapped in WidgetDefinition
func WidgetDefinitionOneOf5AsWidgetDefinition(v *WidgetDefinitionOneOf5) WidgetDefinition {
	return WidgetDefinition{
		WidgetDefinitionOneOf5: v,
	}
}

// WidgetDefinitionOneOf6AsWidgetDefinition is a convenience function that returns WidgetDefinitionOneOf6 wrapped in WidgetDefinition
func WidgetDefinitionOneOf6AsWidgetDefinition(v *WidgetDefinitionOneOf6) WidgetDefinition {
	return WidgetDefinition{
		WidgetDefinitionOneOf6: v,
	}
}

// WidgetDefinitionOneOf7AsWidgetDefinition is a convenience function that returns WidgetDefinitionOneOf7 wrapped in WidgetDefinition
func WidgetDefinitionOneOf7AsWidgetDefinition(v *WidgetDefinitionOneOf7) WidgetDefinition {
	return WidgetDefinition{
		WidgetDefinitionOneOf7: v,
	}
}

// WidgetDefinitionOneOf8AsWidgetDefinition is a convenience function that returns WidgetDefinitionOneOf8 wrapped in WidgetDefinition
func WidgetDefinitionOneOf8AsWidgetDefinition(v *WidgetDefinitionOneOf8) WidgetDefinition {
	return WidgetDefinition{
		WidgetDefinitionOneOf8: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *WidgetDefinition) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into WidgetDefinitionOneOf
	err = newStrictDecoder(data).Decode(&dst.WidgetDefinitionOneOf)
	if err == nil {
		jsonWidgetDefinitionOneOf, _ := json.Marshal(dst.WidgetDefinitionOneOf)
		if string(jsonWidgetDefinitionOneOf) == "{}" { // empty struct
			dst.WidgetDefinitionOneOf = nil
		} else {
			if err = validator.Validate(dst.WidgetDefinitionOneOf); err != nil {
				dst.WidgetDefinitionOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetDefinitionOneOf = nil
	}

	// try to unmarshal data into WidgetDefinitionOneOf1
	err = newStrictDecoder(data).Decode(&dst.WidgetDefinitionOneOf1)
	if err == nil {
		jsonWidgetDefinitionOneOf1, _ := json.Marshal(dst.WidgetDefinitionOneOf1)
		if string(jsonWidgetDefinitionOneOf1) == "{}" { // empty struct
			dst.WidgetDefinitionOneOf1 = nil
		} else {
			if err = validator.Validate(dst.WidgetDefinitionOneOf1); err != nil {
				dst.WidgetDefinitionOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetDefinitionOneOf1 = nil
	}

	// try to unmarshal data into WidgetDefinitionOneOf2
	err = newStrictDecoder(data).Decode(&dst.WidgetDefinitionOneOf2)
	if err == nil {
		jsonWidgetDefinitionOneOf2, _ := json.Marshal(dst.WidgetDefinitionOneOf2)
		if string(jsonWidgetDefinitionOneOf2) == "{}" { // empty struct
			dst.WidgetDefinitionOneOf2 = nil
		} else {
			if err = validator.Validate(dst.WidgetDefinitionOneOf2); err != nil {
				dst.WidgetDefinitionOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetDefinitionOneOf2 = nil
	}

	// try to unmarshal data into WidgetDefinitionOneOf3
	err = newStrictDecoder(data).Decode(&dst.WidgetDefinitionOneOf3)
	if err == nil {
		jsonWidgetDefinitionOneOf3, _ := json.Marshal(dst.WidgetDefinitionOneOf3)
		if string(jsonWidgetDefinitionOneOf3) == "{}" { // empty struct
			dst.WidgetDefinitionOneOf3 = nil
		} else {
			if err = validator.Validate(dst.WidgetDefinitionOneOf3); err != nil {
				dst.WidgetDefinitionOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetDefinitionOneOf3 = nil
	}

	// try to unmarshal data into WidgetDefinitionOneOf4
	err = newStrictDecoder(data).Decode(&dst.WidgetDefinitionOneOf4)
	if err == nil {
		jsonWidgetDefinitionOneOf4, _ := json.Marshal(dst.WidgetDefinitionOneOf4)
		if string(jsonWidgetDefinitionOneOf4) == "{}" { // empty struct
			dst.WidgetDefinitionOneOf4 = nil
		} else {
			if err = validator.Validate(dst.WidgetDefinitionOneOf4); err != nil {
				dst.WidgetDefinitionOneOf4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetDefinitionOneOf4 = nil
	}

	// try to unmarshal data into WidgetDefinitionOneOf5
	err = newStrictDecoder(data).Decode(&dst.WidgetDefinitionOneOf5)
	if err == nil {
		jsonWidgetDefinitionOneOf5, _ := json.Marshal(dst.WidgetDefinitionOneOf5)
		if string(jsonWidgetDefinitionOneOf5) == "{}" { // empty struct
			dst.WidgetDefinitionOneOf5 = nil
		} else {
			if err = validator.Validate(dst.WidgetDefinitionOneOf5); err != nil {
				dst.WidgetDefinitionOneOf5 = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetDefinitionOneOf5 = nil
	}

	// try to unmarshal data into WidgetDefinitionOneOf6
	err = newStrictDecoder(data).Decode(&dst.WidgetDefinitionOneOf6)
	if err == nil {
		jsonWidgetDefinitionOneOf6, _ := json.Marshal(dst.WidgetDefinitionOneOf6)
		if string(jsonWidgetDefinitionOneOf6) == "{}" { // empty struct
			dst.WidgetDefinitionOneOf6 = nil
		} else {
			if err = validator.Validate(dst.WidgetDefinitionOneOf6); err != nil {
				dst.WidgetDefinitionOneOf6 = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetDefinitionOneOf6 = nil
	}

	// try to unmarshal data into WidgetDefinitionOneOf7
	err = newStrictDecoder(data).Decode(&dst.WidgetDefinitionOneOf7)
	if err == nil {
		jsonWidgetDefinitionOneOf7, _ := json.Marshal(dst.WidgetDefinitionOneOf7)
		if string(jsonWidgetDefinitionOneOf7) == "{}" { // empty struct
			dst.WidgetDefinitionOneOf7 = nil
		} else {
			if err = validator.Validate(dst.WidgetDefinitionOneOf7); err != nil {
				dst.WidgetDefinitionOneOf7 = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetDefinitionOneOf7 = nil
	}

	// try to unmarshal data into WidgetDefinitionOneOf8
	err = newStrictDecoder(data).Decode(&dst.WidgetDefinitionOneOf8)
	if err == nil {
		jsonWidgetDefinitionOneOf8, _ := json.Marshal(dst.WidgetDefinitionOneOf8)
		if string(jsonWidgetDefinitionOneOf8) == "{}" { // empty struct
			dst.WidgetDefinitionOneOf8 = nil
		} else {
			if err = validator.Validate(dst.WidgetDefinitionOneOf8); err != nil {
				dst.WidgetDefinitionOneOf8 = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetDefinitionOneOf8 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.WidgetDefinitionOneOf = nil
		dst.WidgetDefinitionOneOf1 = nil
		dst.WidgetDefinitionOneOf2 = nil
		dst.WidgetDefinitionOneOf3 = nil
		dst.WidgetDefinitionOneOf4 = nil
		dst.WidgetDefinitionOneOf5 = nil
		dst.WidgetDefinitionOneOf6 = nil
		dst.WidgetDefinitionOneOf7 = nil
		dst.WidgetDefinitionOneOf8 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(WidgetDefinition)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(WidgetDefinition)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WidgetDefinition) MarshalJSON() ([]byte, error) {
	if src.WidgetDefinitionOneOf != nil {
		return json.Marshal(&src.WidgetDefinitionOneOf)
	}

	if src.WidgetDefinitionOneOf1 != nil {
		return json.Marshal(&src.WidgetDefinitionOneOf1)
	}

	if src.WidgetDefinitionOneOf2 != nil {
		return json.Marshal(&src.WidgetDefinitionOneOf2)
	}

	if src.WidgetDefinitionOneOf3 != nil {
		return json.Marshal(&src.WidgetDefinitionOneOf3)
	}

	if src.WidgetDefinitionOneOf4 != nil {
		return json.Marshal(&src.WidgetDefinitionOneOf4)
	}

	if src.WidgetDefinitionOneOf5 != nil {
		return json.Marshal(&src.WidgetDefinitionOneOf5)
	}

	if src.WidgetDefinitionOneOf6 != nil {
		return json.Marshal(&src.WidgetDefinitionOneOf6)
	}

	if src.WidgetDefinitionOneOf7 != nil {
		return json.Marshal(&src.WidgetDefinitionOneOf7)
	}

	if src.WidgetDefinitionOneOf8 != nil {
		return json.Marshal(&src.WidgetDefinitionOneOf8)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WidgetDefinition) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.WidgetDefinitionOneOf != nil {
		return obj.WidgetDefinitionOneOf
	}

	if obj.WidgetDefinitionOneOf1 != nil {
		return obj.WidgetDefinitionOneOf1
	}

	if obj.WidgetDefinitionOneOf2 != nil {
		return obj.WidgetDefinitionOneOf2
	}

	if obj.WidgetDefinitionOneOf3 != nil {
		return obj.WidgetDefinitionOneOf3
	}

	if obj.WidgetDefinitionOneOf4 != nil {
		return obj.WidgetDefinitionOneOf4
	}

	if obj.WidgetDefinitionOneOf5 != nil {
		return obj.WidgetDefinitionOneOf5
	}

	if obj.WidgetDefinitionOneOf6 != nil {
		return obj.WidgetDefinitionOneOf6
	}

	if obj.WidgetDefinitionOneOf7 != nil {
		return obj.WidgetDefinitionOneOf7
	}

	if obj.WidgetDefinitionOneOf8 != nil {
		return obj.WidgetDefinitionOneOf8
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj WidgetDefinition) GetActualInstanceValue() (interface{}) {
	if obj.WidgetDefinitionOneOf != nil {
		return *obj.WidgetDefinitionOneOf
	}

	if obj.WidgetDefinitionOneOf1 != nil {
		return *obj.WidgetDefinitionOneOf1
	}

	if obj.WidgetDefinitionOneOf2 != nil {
		return *obj.WidgetDefinitionOneOf2
	}

	if obj.WidgetDefinitionOneOf3 != nil {
		return *obj.WidgetDefinitionOneOf3
	}

	if obj.WidgetDefinitionOneOf4 != nil {
		return *obj.WidgetDefinitionOneOf4
	}

	if obj.WidgetDefinitionOneOf5 != nil {
		return *obj.WidgetDefinitionOneOf5
	}

	if obj.WidgetDefinitionOneOf6 != nil {
		return *obj.WidgetDefinitionOneOf6
	}

	if obj.WidgetDefinitionOneOf7 != nil {
		return *obj.WidgetDefinitionOneOf7
	}

	if obj.WidgetDefinitionOneOf8 != nil {
		return *obj.WidgetDefinitionOneOf8
	}

	// all schemas are nil
	return nil
}

type NullableWidgetDefinition struct {
	value *WidgetDefinition
	isSet bool
}

func (v NullableWidgetDefinition) Get() *WidgetDefinition {
	return v.value
}

func (v *NullableWidgetDefinition) Set(val *WidgetDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetDefinition(val *WidgetDefinition) *NullableWidgetDefinition {
	return &NullableWidgetDefinition{value: val, isSet: true}
}

func (v NullableWidgetDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


