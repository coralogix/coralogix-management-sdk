/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// WidgetDefinition - struct for WidgetDefinition
type WidgetDefinition struct {
	DefinitionBarChart *DefinitionBarChart
	DefinitionDataTable *DefinitionDataTable
	DefinitionDynamic *DefinitionDynamic
	DefinitionGauge *DefinitionGauge
	DefinitionHexagon *DefinitionHexagon
	DefinitionHorizontalBarChart *DefinitionHorizontalBarChart
	DefinitionLineChart *DefinitionLineChart
	DefinitionMarkdown *DefinitionMarkdown
	DefinitionPieChart *DefinitionPieChart
}

// DefinitionBarChartAsWidgetDefinition is a convenience function that returns DefinitionBarChart wrapped in WidgetDefinition
func DefinitionBarChartAsWidgetDefinition(v *DefinitionBarChart) WidgetDefinition {
	return WidgetDefinition{
		DefinitionBarChart: v,
	}
}

// DefinitionDataTableAsWidgetDefinition is a convenience function that returns DefinitionDataTable wrapped in WidgetDefinition
func DefinitionDataTableAsWidgetDefinition(v *DefinitionDataTable) WidgetDefinition {
	return WidgetDefinition{
		DefinitionDataTable: v,
	}
}

// DefinitionDynamicAsWidgetDefinition is a convenience function that returns DefinitionDynamic wrapped in WidgetDefinition
func DefinitionDynamicAsWidgetDefinition(v *DefinitionDynamic) WidgetDefinition {
	return WidgetDefinition{
		DefinitionDynamic: v,
	}
}

// DefinitionGaugeAsWidgetDefinition is a convenience function that returns DefinitionGauge wrapped in WidgetDefinition
func DefinitionGaugeAsWidgetDefinition(v *DefinitionGauge) WidgetDefinition {
	return WidgetDefinition{
		DefinitionGauge: v,
	}
}

// DefinitionHexagonAsWidgetDefinition is a convenience function that returns DefinitionHexagon wrapped in WidgetDefinition
func DefinitionHexagonAsWidgetDefinition(v *DefinitionHexagon) WidgetDefinition {
	return WidgetDefinition{
		DefinitionHexagon: v,
	}
}

// DefinitionHorizontalBarChartAsWidgetDefinition is a convenience function that returns DefinitionHorizontalBarChart wrapped in WidgetDefinition
func DefinitionHorizontalBarChartAsWidgetDefinition(v *DefinitionHorizontalBarChart) WidgetDefinition {
	return WidgetDefinition{
		DefinitionHorizontalBarChart: v,
	}
}

// DefinitionLineChartAsWidgetDefinition is a convenience function that returns DefinitionLineChart wrapped in WidgetDefinition
func DefinitionLineChartAsWidgetDefinition(v *DefinitionLineChart) WidgetDefinition {
	return WidgetDefinition{
		DefinitionLineChart: v,
	}
}

// DefinitionMarkdownAsWidgetDefinition is a convenience function that returns DefinitionMarkdown wrapped in WidgetDefinition
func DefinitionMarkdownAsWidgetDefinition(v *DefinitionMarkdown) WidgetDefinition {
	return WidgetDefinition{
		DefinitionMarkdown: v,
	}
}

// DefinitionPieChartAsWidgetDefinition is a convenience function that returns DefinitionPieChart wrapped in WidgetDefinition
func DefinitionPieChartAsWidgetDefinition(v *DefinitionPieChart) WidgetDefinition {
	return WidgetDefinition{
		DefinitionPieChart: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *WidgetDefinition) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DefinitionBarChart
	err = newStrictDecoder(data).Decode(&dst.DefinitionBarChart)
	if err == nil {
		jsonDefinitionBarChart, _ := json.Marshal(dst.DefinitionBarChart)
		if string(jsonDefinitionBarChart) == "{}" { // empty struct
			dst.DefinitionBarChart = nil
		} else {
			if err = validator.Validate(dst.DefinitionBarChart); err != nil {
				dst.DefinitionBarChart = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefinitionBarChart = nil
	}

	// try to unmarshal data into DefinitionDataTable
	err = newStrictDecoder(data).Decode(&dst.DefinitionDataTable)
	if err == nil {
		jsonDefinitionDataTable, _ := json.Marshal(dst.DefinitionDataTable)
		if string(jsonDefinitionDataTable) == "{}" { // empty struct
			dst.DefinitionDataTable = nil
		} else {
			if err = validator.Validate(dst.DefinitionDataTable); err != nil {
				dst.DefinitionDataTable = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefinitionDataTable = nil
	}

	// try to unmarshal data into DefinitionDynamic
	err = newStrictDecoder(data).Decode(&dst.DefinitionDynamic)
	if err == nil {
		jsonDefinitionDynamic, _ := json.Marshal(dst.DefinitionDynamic)
		if string(jsonDefinitionDynamic) == "{}" { // empty struct
			dst.DefinitionDynamic = nil
		} else {
			if err = validator.Validate(dst.DefinitionDynamic); err != nil {
				dst.DefinitionDynamic = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefinitionDynamic = nil
	}

	// try to unmarshal data into DefinitionGauge
	err = newStrictDecoder(data).Decode(&dst.DefinitionGauge)
	if err == nil {
		jsonDefinitionGauge, _ := json.Marshal(dst.DefinitionGauge)
		if string(jsonDefinitionGauge) == "{}" { // empty struct
			dst.DefinitionGauge = nil
		} else {
			if err = validator.Validate(dst.DefinitionGauge); err != nil {
				dst.DefinitionGauge = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefinitionGauge = nil
	}

	// try to unmarshal data into DefinitionHexagon
	err = newStrictDecoder(data).Decode(&dst.DefinitionHexagon)
	if err == nil {
		jsonDefinitionHexagon, _ := json.Marshal(dst.DefinitionHexagon)
		if string(jsonDefinitionHexagon) == "{}" { // empty struct
			dst.DefinitionHexagon = nil
		} else {
			if err = validator.Validate(dst.DefinitionHexagon); err != nil {
				dst.DefinitionHexagon = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefinitionHexagon = nil
	}

	// try to unmarshal data into DefinitionHorizontalBarChart
	err = newStrictDecoder(data).Decode(&dst.DefinitionHorizontalBarChart)
	if err == nil {
		jsonDefinitionHorizontalBarChart, _ := json.Marshal(dst.DefinitionHorizontalBarChart)
		if string(jsonDefinitionHorizontalBarChart) == "{}" { // empty struct
			dst.DefinitionHorizontalBarChart = nil
		} else {
			if err = validator.Validate(dst.DefinitionHorizontalBarChart); err != nil {
				dst.DefinitionHorizontalBarChart = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefinitionHorizontalBarChart = nil
	}

	// try to unmarshal data into DefinitionLineChart
	err = newStrictDecoder(data).Decode(&dst.DefinitionLineChart)
	if err == nil {
		jsonDefinitionLineChart, _ := json.Marshal(dst.DefinitionLineChart)
		if string(jsonDefinitionLineChart) == "{}" { // empty struct
			dst.DefinitionLineChart = nil
		} else {
			if err = validator.Validate(dst.DefinitionLineChart); err != nil {
				dst.DefinitionLineChart = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefinitionLineChart = nil
	}

	// try to unmarshal data into DefinitionMarkdown
	err = newStrictDecoder(data).Decode(&dst.DefinitionMarkdown)
	if err == nil {
		jsonDefinitionMarkdown, _ := json.Marshal(dst.DefinitionMarkdown)
		if string(jsonDefinitionMarkdown) == "{}" { // empty struct
			dst.DefinitionMarkdown = nil
		} else {
			if err = validator.Validate(dst.DefinitionMarkdown); err != nil {
				dst.DefinitionMarkdown = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefinitionMarkdown = nil
	}

	// try to unmarshal data into DefinitionPieChart
	err = newStrictDecoder(data).Decode(&dst.DefinitionPieChart)
	if err == nil {
		jsonDefinitionPieChart, _ := json.Marshal(dst.DefinitionPieChart)
		if string(jsonDefinitionPieChart) == "{}" { // empty struct
			dst.DefinitionPieChart = nil
		} else {
			if err = validator.Validate(dst.DefinitionPieChart); err != nil {
				dst.DefinitionPieChart = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefinitionPieChart = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DefinitionBarChart = nil
		dst.DefinitionDataTable = nil
		dst.DefinitionDynamic = nil
		dst.DefinitionGauge = nil
		dst.DefinitionHexagon = nil
		dst.DefinitionHorizontalBarChart = nil
		dst.DefinitionLineChart = nil
		dst.DefinitionMarkdown = nil
		dst.DefinitionPieChart = nil

		return fmt.Errorf("data matches more than one schema in oneOf(WidgetDefinition)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(WidgetDefinition)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WidgetDefinition) MarshalJSON() ([]byte, error) {
	if src.DefinitionBarChart != nil {
		return json.Marshal(&src.DefinitionBarChart)
	}

	if src.DefinitionDataTable != nil {
		return json.Marshal(&src.DefinitionDataTable)
	}

	if src.DefinitionDynamic != nil {
		return json.Marshal(&src.DefinitionDynamic)
	}

	if src.DefinitionGauge != nil {
		return json.Marshal(&src.DefinitionGauge)
	}

	if src.DefinitionHexagon != nil {
		return json.Marshal(&src.DefinitionHexagon)
	}

	if src.DefinitionHorizontalBarChart != nil {
		return json.Marshal(&src.DefinitionHorizontalBarChart)
	}

	if src.DefinitionLineChart != nil {
		return json.Marshal(&src.DefinitionLineChart)
	}

	if src.DefinitionMarkdown != nil {
		return json.Marshal(&src.DefinitionMarkdown)
	}

	if src.DefinitionPieChart != nil {
		return json.Marshal(&src.DefinitionPieChart)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WidgetDefinition) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DefinitionBarChart != nil {
		return obj.DefinitionBarChart
	}

	if obj.DefinitionDataTable != nil {
		return obj.DefinitionDataTable
	}

	if obj.DefinitionDynamic != nil {
		return obj.DefinitionDynamic
	}

	if obj.DefinitionGauge != nil {
		return obj.DefinitionGauge
	}

	if obj.DefinitionHexagon != nil {
		return obj.DefinitionHexagon
	}

	if obj.DefinitionHorizontalBarChart != nil {
		return obj.DefinitionHorizontalBarChart
	}

	if obj.DefinitionLineChart != nil {
		return obj.DefinitionLineChart
	}

	if obj.DefinitionMarkdown != nil {
		return obj.DefinitionMarkdown
	}

	if obj.DefinitionPieChart != nil {
		return obj.DefinitionPieChart
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj WidgetDefinition) GetActualInstanceValue() (interface{}) {
	if obj.DefinitionBarChart != nil {
		return *obj.DefinitionBarChart
	}

	if obj.DefinitionDataTable != nil {
		return *obj.DefinitionDataTable
	}

	if obj.DefinitionDynamic != nil {
		return *obj.DefinitionDynamic
	}

	if obj.DefinitionGauge != nil {
		return *obj.DefinitionGauge
	}

	if obj.DefinitionHexagon != nil {
		return *obj.DefinitionHexagon
	}

	if obj.DefinitionHorizontalBarChart != nil {
		return *obj.DefinitionHorizontalBarChart
	}

	if obj.DefinitionLineChart != nil {
		return *obj.DefinitionLineChart
	}

	if obj.DefinitionMarkdown != nil {
		return *obj.DefinitionMarkdown
	}

	if obj.DefinitionPieChart != nil {
		return *obj.DefinitionPieChart
	}

	// all schemas are nil
	return nil
}

type NullableWidgetDefinition struct {
	value *WidgetDefinition
	isSet bool
}

func (v NullableWidgetDefinition) Get() *WidgetDefinition {
	return v.value
}

func (v *NullableWidgetDefinition) Set(val *WidgetDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetDefinition(val *WidgetDefinition) *NullableWidgetDefinition {
	return &NullableWidgetDefinition{value: val, isSet: true}
}

func (v NullableWidgetDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


