/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// WidgetDefinition - struct for WidgetDefinition
type WidgetDefinition struct {
	WidgetDefinitionBarChart *WidgetDefinitionBarChart
	WidgetDefinitionDataTable *WidgetDefinitionDataTable
	WidgetDefinitionDynamic *WidgetDefinitionDynamic
	WidgetDefinitionGauge *WidgetDefinitionGauge
	WidgetDefinitionHexagon *WidgetDefinitionHexagon
	WidgetDefinitionHorizontalBarChart *WidgetDefinitionHorizontalBarChart
	WidgetDefinitionLineChart *WidgetDefinitionLineChart
	WidgetDefinitionMarkdown *WidgetDefinitionMarkdown
	WidgetDefinitionPieChart *WidgetDefinitionPieChart
}

// WidgetDefinitionBarChartAsWidgetDefinition is a convenience function that returns WidgetDefinitionBarChart wrapped in WidgetDefinition
func WidgetDefinitionBarChartAsWidgetDefinition(v *WidgetDefinitionBarChart) WidgetDefinition {
	return WidgetDefinition{
		WidgetDefinitionBarChart: v,
	}
}

// WidgetDefinitionDataTableAsWidgetDefinition is a convenience function that returns WidgetDefinitionDataTable wrapped in WidgetDefinition
func WidgetDefinitionDataTableAsWidgetDefinition(v *WidgetDefinitionDataTable) WidgetDefinition {
	return WidgetDefinition{
		WidgetDefinitionDataTable: v,
	}
}

// WidgetDefinitionDynamicAsWidgetDefinition is a convenience function that returns WidgetDefinitionDynamic wrapped in WidgetDefinition
func WidgetDefinitionDynamicAsWidgetDefinition(v *WidgetDefinitionDynamic) WidgetDefinition {
	return WidgetDefinition{
		WidgetDefinitionDynamic: v,
	}
}

// WidgetDefinitionGaugeAsWidgetDefinition is a convenience function that returns WidgetDefinitionGauge wrapped in WidgetDefinition
func WidgetDefinitionGaugeAsWidgetDefinition(v *WidgetDefinitionGauge) WidgetDefinition {
	return WidgetDefinition{
		WidgetDefinitionGauge: v,
	}
}

// WidgetDefinitionHexagonAsWidgetDefinition is a convenience function that returns WidgetDefinitionHexagon wrapped in WidgetDefinition
func WidgetDefinitionHexagonAsWidgetDefinition(v *WidgetDefinitionHexagon) WidgetDefinition {
	return WidgetDefinition{
		WidgetDefinitionHexagon: v,
	}
}

// WidgetDefinitionHorizontalBarChartAsWidgetDefinition is a convenience function that returns WidgetDefinitionHorizontalBarChart wrapped in WidgetDefinition
func WidgetDefinitionHorizontalBarChartAsWidgetDefinition(v *WidgetDefinitionHorizontalBarChart) WidgetDefinition {
	return WidgetDefinition{
		WidgetDefinitionHorizontalBarChart: v,
	}
}

// WidgetDefinitionLineChartAsWidgetDefinition is a convenience function that returns WidgetDefinitionLineChart wrapped in WidgetDefinition
func WidgetDefinitionLineChartAsWidgetDefinition(v *WidgetDefinitionLineChart) WidgetDefinition {
	return WidgetDefinition{
		WidgetDefinitionLineChart: v,
	}
}

// WidgetDefinitionMarkdownAsWidgetDefinition is a convenience function that returns WidgetDefinitionMarkdown wrapped in WidgetDefinition
func WidgetDefinitionMarkdownAsWidgetDefinition(v *WidgetDefinitionMarkdown) WidgetDefinition {
	return WidgetDefinition{
		WidgetDefinitionMarkdown: v,
	}
}

// WidgetDefinitionPieChartAsWidgetDefinition is a convenience function that returns WidgetDefinitionPieChart wrapped in WidgetDefinition
func WidgetDefinitionPieChartAsWidgetDefinition(v *WidgetDefinitionPieChart) WidgetDefinition {
	return WidgetDefinition{
		WidgetDefinitionPieChart: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *WidgetDefinition) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into WidgetDefinitionBarChart
	err = newStrictDecoder(data).Decode(&dst.WidgetDefinitionBarChart)
	if err == nil {
		jsonWidgetDefinitionBarChart, _ := json.Marshal(dst.WidgetDefinitionBarChart)
		if string(jsonWidgetDefinitionBarChart) == "{}" { // empty struct
			dst.WidgetDefinitionBarChart = nil
		} else {
			if err = validator.Validate(dst.WidgetDefinitionBarChart); err != nil {
				dst.WidgetDefinitionBarChart = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetDefinitionBarChart = nil
	}

	// try to unmarshal data into WidgetDefinitionDataTable
	err = newStrictDecoder(data).Decode(&dst.WidgetDefinitionDataTable)
	if err == nil {
		jsonWidgetDefinitionDataTable, _ := json.Marshal(dst.WidgetDefinitionDataTable)
		if string(jsonWidgetDefinitionDataTable) == "{}" { // empty struct
			dst.WidgetDefinitionDataTable = nil
		} else {
			if err = validator.Validate(dst.WidgetDefinitionDataTable); err != nil {
				dst.WidgetDefinitionDataTable = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetDefinitionDataTable = nil
	}

	// try to unmarshal data into WidgetDefinitionDynamic
	err = newStrictDecoder(data).Decode(&dst.WidgetDefinitionDynamic)
	if err == nil {
		jsonWidgetDefinitionDynamic, _ := json.Marshal(dst.WidgetDefinitionDynamic)
		if string(jsonWidgetDefinitionDynamic) == "{}" { // empty struct
			dst.WidgetDefinitionDynamic = nil
		} else {
			if err = validator.Validate(dst.WidgetDefinitionDynamic); err != nil {
				dst.WidgetDefinitionDynamic = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetDefinitionDynamic = nil
	}

	// try to unmarshal data into WidgetDefinitionGauge
	err = newStrictDecoder(data).Decode(&dst.WidgetDefinitionGauge)
	if err == nil {
		jsonWidgetDefinitionGauge, _ := json.Marshal(dst.WidgetDefinitionGauge)
		if string(jsonWidgetDefinitionGauge) == "{}" { // empty struct
			dst.WidgetDefinitionGauge = nil
		} else {
			if err = validator.Validate(dst.WidgetDefinitionGauge); err != nil {
				dst.WidgetDefinitionGauge = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetDefinitionGauge = nil
	}

	// try to unmarshal data into WidgetDefinitionHexagon
	err = newStrictDecoder(data).Decode(&dst.WidgetDefinitionHexagon)
	if err == nil {
		jsonWidgetDefinitionHexagon, _ := json.Marshal(dst.WidgetDefinitionHexagon)
		if string(jsonWidgetDefinitionHexagon) == "{}" { // empty struct
			dst.WidgetDefinitionHexagon = nil
		} else {
			if err = validator.Validate(dst.WidgetDefinitionHexagon); err != nil {
				dst.WidgetDefinitionHexagon = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetDefinitionHexagon = nil
	}

	// try to unmarshal data into WidgetDefinitionHorizontalBarChart
	err = newStrictDecoder(data).Decode(&dst.WidgetDefinitionHorizontalBarChart)
	if err == nil {
		jsonWidgetDefinitionHorizontalBarChart, _ := json.Marshal(dst.WidgetDefinitionHorizontalBarChart)
		if string(jsonWidgetDefinitionHorizontalBarChart) == "{}" { // empty struct
			dst.WidgetDefinitionHorizontalBarChart = nil
		} else {
			if err = validator.Validate(dst.WidgetDefinitionHorizontalBarChart); err != nil {
				dst.WidgetDefinitionHorizontalBarChart = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetDefinitionHorizontalBarChart = nil
	}

	// try to unmarshal data into WidgetDefinitionLineChart
	err = newStrictDecoder(data).Decode(&dst.WidgetDefinitionLineChart)
	if err == nil {
		jsonWidgetDefinitionLineChart, _ := json.Marshal(dst.WidgetDefinitionLineChart)
		if string(jsonWidgetDefinitionLineChart) == "{}" { // empty struct
			dst.WidgetDefinitionLineChart = nil
		} else {
			if err = validator.Validate(dst.WidgetDefinitionLineChart); err != nil {
				dst.WidgetDefinitionLineChart = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetDefinitionLineChart = nil
	}

	// try to unmarshal data into WidgetDefinitionMarkdown
	err = newStrictDecoder(data).Decode(&dst.WidgetDefinitionMarkdown)
	if err == nil {
		jsonWidgetDefinitionMarkdown, _ := json.Marshal(dst.WidgetDefinitionMarkdown)
		if string(jsonWidgetDefinitionMarkdown) == "{}" { // empty struct
			dst.WidgetDefinitionMarkdown = nil
		} else {
			if err = validator.Validate(dst.WidgetDefinitionMarkdown); err != nil {
				dst.WidgetDefinitionMarkdown = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetDefinitionMarkdown = nil
	}

	// try to unmarshal data into WidgetDefinitionPieChart
	err = newStrictDecoder(data).Decode(&dst.WidgetDefinitionPieChart)
	if err == nil {
		jsonWidgetDefinitionPieChart, _ := json.Marshal(dst.WidgetDefinitionPieChart)
		if string(jsonWidgetDefinitionPieChart) == "{}" { // empty struct
			dst.WidgetDefinitionPieChart = nil
		} else {
			if err = validator.Validate(dst.WidgetDefinitionPieChart); err != nil {
				dst.WidgetDefinitionPieChart = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetDefinitionPieChart = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.WidgetDefinitionBarChart = nil
		dst.WidgetDefinitionDataTable = nil
		dst.WidgetDefinitionDynamic = nil
		dst.WidgetDefinitionGauge = nil
		dst.WidgetDefinitionHexagon = nil
		dst.WidgetDefinitionHorizontalBarChart = nil
		dst.WidgetDefinitionLineChart = nil
		dst.WidgetDefinitionMarkdown = nil
		dst.WidgetDefinitionPieChart = nil

		return fmt.Errorf("data matches more than one schema in oneOf(WidgetDefinition)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(WidgetDefinition)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WidgetDefinition) MarshalJSON() ([]byte, error) {
	if src.WidgetDefinitionBarChart != nil {
		return json.Marshal(&src.WidgetDefinitionBarChart)
	}

	if src.WidgetDefinitionDataTable != nil {
		return json.Marshal(&src.WidgetDefinitionDataTable)
	}

	if src.WidgetDefinitionDynamic != nil {
		return json.Marshal(&src.WidgetDefinitionDynamic)
	}

	if src.WidgetDefinitionGauge != nil {
		return json.Marshal(&src.WidgetDefinitionGauge)
	}

	if src.WidgetDefinitionHexagon != nil {
		return json.Marshal(&src.WidgetDefinitionHexagon)
	}

	if src.WidgetDefinitionHorizontalBarChart != nil {
		return json.Marshal(&src.WidgetDefinitionHorizontalBarChart)
	}

	if src.WidgetDefinitionLineChart != nil {
		return json.Marshal(&src.WidgetDefinitionLineChart)
	}

	if src.WidgetDefinitionMarkdown != nil {
		return json.Marshal(&src.WidgetDefinitionMarkdown)
	}

	if src.WidgetDefinitionPieChart != nil {
		return json.Marshal(&src.WidgetDefinitionPieChart)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WidgetDefinition) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.WidgetDefinitionBarChart != nil {
		return obj.WidgetDefinitionBarChart
	}

	if obj.WidgetDefinitionDataTable != nil {
		return obj.WidgetDefinitionDataTable
	}

	if obj.WidgetDefinitionDynamic != nil {
		return obj.WidgetDefinitionDynamic
	}

	if obj.WidgetDefinitionGauge != nil {
		return obj.WidgetDefinitionGauge
	}

	if obj.WidgetDefinitionHexagon != nil {
		return obj.WidgetDefinitionHexagon
	}

	if obj.WidgetDefinitionHorizontalBarChart != nil {
		return obj.WidgetDefinitionHorizontalBarChart
	}

	if obj.WidgetDefinitionLineChart != nil {
		return obj.WidgetDefinitionLineChart
	}

	if obj.WidgetDefinitionMarkdown != nil {
		return obj.WidgetDefinitionMarkdown
	}

	if obj.WidgetDefinitionPieChart != nil {
		return obj.WidgetDefinitionPieChart
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj WidgetDefinition) GetActualInstanceValue() (interface{}) {
	if obj.WidgetDefinitionBarChart != nil {
		return *obj.WidgetDefinitionBarChart
	}

	if obj.WidgetDefinitionDataTable != nil {
		return *obj.WidgetDefinitionDataTable
	}

	if obj.WidgetDefinitionDynamic != nil {
		return *obj.WidgetDefinitionDynamic
	}

	if obj.WidgetDefinitionGauge != nil {
		return *obj.WidgetDefinitionGauge
	}

	if obj.WidgetDefinitionHexagon != nil {
		return *obj.WidgetDefinitionHexagon
	}

	if obj.WidgetDefinitionHorizontalBarChart != nil {
		return *obj.WidgetDefinitionHorizontalBarChart
	}

	if obj.WidgetDefinitionLineChart != nil {
		return *obj.WidgetDefinitionLineChart
	}

	if obj.WidgetDefinitionMarkdown != nil {
		return *obj.WidgetDefinitionMarkdown
	}

	if obj.WidgetDefinitionPieChart != nil {
		return *obj.WidgetDefinitionPieChart
	}

	// all schemas are nil
	return nil
}

type NullableWidgetDefinition struct {
	value *WidgetDefinition
	isSet bool
}

func (v NullableWidgetDefinition) Get() *WidgetDefinition {
	return v.value
}

func (v *NullableWidgetDefinition) Set(val *WidgetDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetDefinition(val *WidgetDefinition) *NullableWidgetDefinition {
	return &NullableWidgetDefinition{value: val, isSet: true}
}

func (v NullableWidgetDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


