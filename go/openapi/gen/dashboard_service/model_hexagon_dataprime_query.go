/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the HexagonDataprimeQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HexagonDataprimeQuery{}

// HexagonDataprimeQuery A Dataprime variant of the query
type HexagonDataprimeQuery struct {
	DataprimeQuery *CommonDataprimeQuery `json:"dataprimeQuery,omitempty"`
	Filters []FilterSource `json:"filters,omitempty"`
	TimeFrame *TimeFrameSelect `json:"timeFrame,omitempty"`
}

// NewHexagonDataprimeQuery instantiates a new HexagonDataprimeQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHexagonDataprimeQuery() *HexagonDataprimeQuery {
	this := HexagonDataprimeQuery{}
	return &this
}

// NewHexagonDataprimeQueryWithDefaults instantiates a new HexagonDataprimeQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHexagonDataprimeQueryWithDefaults() *HexagonDataprimeQuery {
	this := HexagonDataprimeQuery{}
	return &this
}

// GetDataprimeQuery returns the DataprimeQuery field value if set, zero value otherwise.
func (o *HexagonDataprimeQuery) GetDataprimeQuery() CommonDataprimeQuery {
	if o == nil || IsNil(o.DataprimeQuery) {
		var ret CommonDataprimeQuery
		return ret
	}
	return *o.DataprimeQuery
}

// GetDataprimeQueryOk returns a tuple with the DataprimeQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HexagonDataprimeQuery) GetDataprimeQueryOk() (*CommonDataprimeQuery, bool) {
	if o == nil || IsNil(o.DataprimeQuery) {
		return nil, false
	}
	return o.DataprimeQuery, true
}

// HasDataprimeQuery returns a boolean if a field has been set.
func (o *HexagonDataprimeQuery) HasDataprimeQuery() bool {
	if o != nil && !IsNil(o.DataprimeQuery) {
		return true
	}

	return false
}

// SetDataprimeQuery gets a reference to the given CommonDataprimeQuery and assigns it to the DataprimeQuery field.
func (o *HexagonDataprimeQuery) SetDataprimeQuery(v CommonDataprimeQuery) {
	o.DataprimeQuery = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *HexagonDataprimeQuery) GetFilters() []FilterSource {
	if o == nil || IsNil(o.Filters) {
		var ret []FilterSource
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HexagonDataprimeQuery) GetFiltersOk() ([]FilterSource, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *HexagonDataprimeQuery) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []FilterSource and assigns it to the Filters field.
func (o *HexagonDataprimeQuery) SetFilters(v []FilterSource) {
	o.Filters = v
}

// GetTimeFrame returns the TimeFrame field value if set, zero value otherwise.
func (o *HexagonDataprimeQuery) GetTimeFrame() TimeFrameSelect {
	if o == nil || IsNil(o.TimeFrame) {
		var ret TimeFrameSelect
		return ret
	}
	return *o.TimeFrame
}

// GetTimeFrameOk returns a tuple with the TimeFrame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HexagonDataprimeQuery) GetTimeFrameOk() (*TimeFrameSelect, bool) {
	if o == nil || IsNil(o.TimeFrame) {
		return nil, false
	}
	return o.TimeFrame, true
}

// HasTimeFrame returns a boolean if a field has been set.
func (o *HexagonDataprimeQuery) HasTimeFrame() bool {
	if o != nil && !IsNil(o.TimeFrame) {
		return true
	}

	return false
}

// SetTimeFrame gets a reference to the given TimeFrameSelect and assigns it to the TimeFrame field.
func (o *HexagonDataprimeQuery) SetTimeFrame(v TimeFrameSelect) {
	o.TimeFrame = &v
}

func (o HexagonDataprimeQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HexagonDataprimeQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataprimeQuery) {
		toSerialize["dataprimeQuery"] = o.DataprimeQuery
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.TimeFrame) {
		toSerialize["timeFrame"] = o.TimeFrame
	}
	return toSerialize, nil
}

type NullableHexagonDataprimeQuery struct {
	value *HexagonDataprimeQuery
	isSet bool
}

func (v NullableHexagonDataprimeQuery) Get() *HexagonDataprimeQuery {
	return v.value
}

func (v *NullableHexagonDataprimeQuery) Set(val *HexagonDataprimeQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableHexagonDataprimeQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableHexagonDataprimeQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHexagonDataprimeQuery(val *HexagonDataprimeQuery) *NullableHexagonDataprimeQuery {
	return &NullableHexagonDataprimeQuery{value: val, isSet: true}
}

func (v NullableHexagonDataprimeQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHexagonDataprimeQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


