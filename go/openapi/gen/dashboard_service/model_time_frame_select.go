/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// TimeFrameSelect - struct for TimeFrameSelect
type TimeFrameSelect struct {
	TimeFrameSelectOneOf *TimeFrameSelectOneOf
	TimeFrameSelectOneOf1 *TimeFrameSelectOneOf1
}

// TimeFrameSelectOneOfAsTimeFrameSelect is a convenience function that returns TimeFrameSelectOneOf wrapped in TimeFrameSelect
func TimeFrameSelectOneOfAsTimeFrameSelect(v *TimeFrameSelectOneOf) TimeFrameSelect {
	return TimeFrameSelect{
		TimeFrameSelectOneOf: v,
	}
}

// TimeFrameSelectOneOf1AsTimeFrameSelect is a convenience function that returns TimeFrameSelectOneOf1 wrapped in TimeFrameSelect
func TimeFrameSelectOneOf1AsTimeFrameSelect(v *TimeFrameSelectOneOf1) TimeFrameSelect {
	return TimeFrameSelect{
		TimeFrameSelectOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TimeFrameSelect) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TimeFrameSelectOneOf
	err = newStrictDecoder(data).Decode(&dst.TimeFrameSelectOneOf)
	if err == nil {
		jsonTimeFrameSelectOneOf, _ := json.Marshal(dst.TimeFrameSelectOneOf)
		if string(jsonTimeFrameSelectOneOf) == "{}" { // empty struct
			dst.TimeFrameSelectOneOf = nil
		} else {
			if err = validator.Validate(dst.TimeFrameSelectOneOf); err != nil {
				dst.TimeFrameSelectOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimeFrameSelectOneOf = nil
	}

	// try to unmarshal data into TimeFrameSelectOneOf1
	err = newStrictDecoder(data).Decode(&dst.TimeFrameSelectOneOf1)
	if err == nil {
		jsonTimeFrameSelectOneOf1, _ := json.Marshal(dst.TimeFrameSelectOneOf1)
		if string(jsonTimeFrameSelectOneOf1) == "{}" { // empty struct
			dst.TimeFrameSelectOneOf1 = nil
		} else {
			if err = validator.Validate(dst.TimeFrameSelectOneOf1); err != nil {
				dst.TimeFrameSelectOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimeFrameSelectOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TimeFrameSelectOneOf = nil
		dst.TimeFrameSelectOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TimeFrameSelect)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TimeFrameSelect)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TimeFrameSelect) MarshalJSON() ([]byte, error) {
	if src.TimeFrameSelectOneOf != nil {
		return json.Marshal(&src.TimeFrameSelectOneOf)
	}

	if src.TimeFrameSelectOneOf1 != nil {
		return json.Marshal(&src.TimeFrameSelectOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TimeFrameSelect) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TimeFrameSelectOneOf != nil {
		return obj.TimeFrameSelectOneOf
	}

	if obj.TimeFrameSelectOneOf1 != nil {
		return obj.TimeFrameSelectOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj TimeFrameSelect) GetActualInstanceValue() (interface{}) {
	if obj.TimeFrameSelectOneOf != nil {
		return *obj.TimeFrameSelectOneOf
	}

	if obj.TimeFrameSelectOneOf1 != nil {
		return *obj.TimeFrameSelectOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableTimeFrameSelect struct {
	value *TimeFrameSelect
	isSet bool
}

func (v NullableTimeFrameSelect) Get() *TimeFrameSelect {
	return v.value
}

func (v *NullableTimeFrameSelect) Set(val *TimeFrameSelect) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeFrameSelect) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeFrameSelect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeFrameSelect(val *TimeFrameSelect) *NullableTimeFrameSelect {
	return &NullableTimeFrameSelect{value: val, isSet: true}
}

func (v NullableTimeFrameSelect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeFrameSelect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


