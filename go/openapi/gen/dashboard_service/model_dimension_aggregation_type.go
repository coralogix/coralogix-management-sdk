/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// DimensionAggregationType the model 'DimensionAggregationType'
type DimensionAggregationType string

// List of DimensionAggregationType
const (
	DIMENSIONAGGREGATIONTYPE_DIMENSION_AGGREGATION_TYPE_UNSPECIFIED DimensionAggregationType = "DIMENSION_AGGREGATION_TYPE_UNSPECIFIED"
	DIMENSIONAGGREGATIONTYPE_DIMENSION_AGGREGATION_TYPE_UNIQUE_COUNT DimensionAggregationType = "DIMENSION_AGGREGATION_TYPE_UNIQUE_COUNT"
	DIMENSIONAGGREGATIONTYPE_DIMENSION_AGGREGATION_TYPE_ERROR_COUNT DimensionAggregationType = "DIMENSION_AGGREGATION_TYPE_ERROR_COUNT"
)

// All allowed values of DimensionAggregationType enum
var AllowedDimensionAggregationTypeEnumValues = []DimensionAggregationType{
	"DIMENSION_AGGREGATION_TYPE_UNSPECIFIED",
	"DIMENSION_AGGREGATION_TYPE_UNIQUE_COUNT",
	"DIMENSION_AGGREGATION_TYPE_ERROR_COUNT",
}

func (v *DimensionAggregationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DimensionAggregationType(value)
	for _, existing := range AllowedDimensionAggregationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DimensionAggregationType", value)
}

// NewDimensionAggregationTypeFromValue returns a pointer to a valid DimensionAggregationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDimensionAggregationTypeFromValue(v string) (*DimensionAggregationType, error) {
	ev := DimensionAggregationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DimensionAggregationType: valid values are %v", v, AllowedDimensionAggregationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DimensionAggregationType) IsValid() bool {
	for _, existing := range AllowedDimensionAggregationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DimensionAggregationType value
func (v DimensionAggregationType) Ptr() *DimensionAggregationType {
	return &v
}

type NullableDimensionAggregationType struct {
	value *DimensionAggregationType
	isSet bool
}

func (v NullableDimensionAggregationType) Get() *DimensionAggregationType {
	return v.value
}

func (v *NullableDimensionAggregationType) Set(val *DimensionAggregationType) {
	v.value = val
	v.isSet = true
}

func (v NullableDimensionAggregationType) IsSet() bool {
	return v.isSet
}

func (v *NullableDimensionAggregationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDimensionAggregationType(val *DimensionAggregationType) *NullableDimensionAggregationType {
	return &NullableDimensionAggregationType{value: val, isSet: true}
}

func (v NullableDimensionAggregationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDimensionAggregationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

