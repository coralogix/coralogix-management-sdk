/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the PieChartDataprimeQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PieChartDataprimeQuery{}

// PieChartDataprimeQuery A Dataprime variant of the query
type PieChartDataprimeQuery struct {
	DataprimeQuery *CommonDataprimeQuery `json:"dataprimeQuery,omitempty"`
	Filters []FilterSource `json:"filters,omitempty"`
	GroupNames []string `json:"groupNames,omitempty"`
	// Field name by which results in groups are divided into subgroups
	StackedGroupName *string `json:"stackedGroupName,omitempty"`
	TimeFrame *TimeFrameSelect `json:"timeFrame,omitempty"`
}

// NewPieChartDataprimeQuery instantiates a new PieChartDataprimeQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPieChartDataprimeQuery() *PieChartDataprimeQuery {
	this := PieChartDataprimeQuery{}
	return &this
}

// NewPieChartDataprimeQueryWithDefaults instantiates a new PieChartDataprimeQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPieChartDataprimeQueryWithDefaults() *PieChartDataprimeQuery {
	this := PieChartDataprimeQuery{}
	return &this
}

// GetDataprimeQuery returns the DataprimeQuery field value if set, zero value otherwise.
func (o *PieChartDataprimeQuery) GetDataprimeQuery() CommonDataprimeQuery {
	if o == nil || IsNil(o.DataprimeQuery) {
		var ret CommonDataprimeQuery
		return ret
	}
	return *o.DataprimeQuery
}

// GetDataprimeQueryOk returns a tuple with the DataprimeQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PieChartDataprimeQuery) GetDataprimeQueryOk() (*CommonDataprimeQuery, bool) {
	if o == nil || IsNil(o.DataprimeQuery) {
		return nil, false
	}
	return o.DataprimeQuery, true
}

// HasDataprimeQuery returns a boolean if a field has been set.
func (o *PieChartDataprimeQuery) HasDataprimeQuery() bool {
	if o != nil && !IsNil(o.DataprimeQuery) {
		return true
	}

	return false
}

// SetDataprimeQuery gets a reference to the given CommonDataprimeQuery and assigns it to the DataprimeQuery field.
func (o *PieChartDataprimeQuery) SetDataprimeQuery(v CommonDataprimeQuery) {
	o.DataprimeQuery = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *PieChartDataprimeQuery) GetFilters() []FilterSource {
	if o == nil || IsNil(o.Filters) {
		var ret []FilterSource
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PieChartDataprimeQuery) GetFiltersOk() ([]FilterSource, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *PieChartDataprimeQuery) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []FilterSource and assigns it to the Filters field.
func (o *PieChartDataprimeQuery) SetFilters(v []FilterSource) {
	o.Filters = v
}

// GetGroupNames returns the GroupNames field value if set, zero value otherwise.
func (o *PieChartDataprimeQuery) GetGroupNames() []string {
	if o == nil || IsNil(o.GroupNames) {
		var ret []string
		return ret
	}
	return o.GroupNames
}

// GetGroupNamesOk returns a tuple with the GroupNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PieChartDataprimeQuery) GetGroupNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.GroupNames) {
		return nil, false
	}
	return o.GroupNames, true
}

// HasGroupNames returns a boolean if a field has been set.
func (o *PieChartDataprimeQuery) HasGroupNames() bool {
	if o != nil && !IsNil(o.GroupNames) {
		return true
	}

	return false
}

// SetGroupNames gets a reference to the given []string and assigns it to the GroupNames field.
func (o *PieChartDataprimeQuery) SetGroupNames(v []string) {
	o.GroupNames = v
}

// GetStackedGroupName returns the StackedGroupName field value if set, zero value otherwise.
func (o *PieChartDataprimeQuery) GetStackedGroupName() string {
	if o == nil || IsNil(o.StackedGroupName) {
		var ret string
		return ret
	}
	return *o.StackedGroupName
}

// GetStackedGroupNameOk returns a tuple with the StackedGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PieChartDataprimeQuery) GetStackedGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.StackedGroupName) {
		return nil, false
	}
	return o.StackedGroupName, true
}

// HasStackedGroupName returns a boolean if a field has been set.
func (o *PieChartDataprimeQuery) HasStackedGroupName() bool {
	if o != nil && !IsNil(o.StackedGroupName) {
		return true
	}

	return false
}

// SetStackedGroupName gets a reference to the given string and assigns it to the StackedGroupName field.
func (o *PieChartDataprimeQuery) SetStackedGroupName(v string) {
	o.StackedGroupName = &v
}

// GetTimeFrame returns the TimeFrame field value if set, zero value otherwise.
func (o *PieChartDataprimeQuery) GetTimeFrame() TimeFrameSelect {
	if o == nil || IsNil(o.TimeFrame) {
		var ret TimeFrameSelect
		return ret
	}
	return *o.TimeFrame
}

// GetTimeFrameOk returns a tuple with the TimeFrame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PieChartDataprimeQuery) GetTimeFrameOk() (*TimeFrameSelect, bool) {
	if o == nil || IsNil(o.TimeFrame) {
		return nil, false
	}
	return o.TimeFrame, true
}

// HasTimeFrame returns a boolean if a field has been set.
func (o *PieChartDataprimeQuery) HasTimeFrame() bool {
	if o != nil && !IsNil(o.TimeFrame) {
		return true
	}

	return false
}

// SetTimeFrame gets a reference to the given TimeFrameSelect and assigns it to the TimeFrame field.
func (o *PieChartDataprimeQuery) SetTimeFrame(v TimeFrameSelect) {
	o.TimeFrame = &v
}

func (o PieChartDataprimeQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PieChartDataprimeQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataprimeQuery) {
		toSerialize["dataprimeQuery"] = o.DataprimeQuery
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.GroupNames) {
		toSerialize["groupNames"] = o.GroupNames
	}
	if !IsNil(o.StackedGroupName) {
		toSerialize["stackedGroupName"] = o.StackedGroupName
	}
	if !IsNil(o.TimeFrame) {
		toSerialize["timeFrame"] = o.TimeFrame
	}
	return toSerialize, nil
}

type NullablePieChartDataprimeQuery struct {
	value *PieChartDataprimeQuery
	isSet bool
}

func (v NullablePieChartDataprimeQuery) Get() *PieChartDataprimeQuery {
	return v.value
}

func (v *NullablePieChartDataprimeQuery) Set(val *PieChartDataprimeQuery) {
	v.value = val
	v.isSet = true
}

func (v NullablePieChartDataprimeQuery) IsSet() bool {
	return v.isSet
}

func (v *NullablePieChartDataprimeQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePieChartDataprimeQuery(val *PieChartDataprimeQuery) *NullablePieChartDataprimeQuery {
	return &NullablePieChartDataprimeQuery{value: val, isSet: true}
}

func (v NullablePieChartDataprimeQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePieChartDataprimeQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


