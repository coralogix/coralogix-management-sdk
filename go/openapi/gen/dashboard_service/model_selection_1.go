/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the Selection1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Selection1{}

// Selection1 This data structure defines the values for the equality comparison.
type Selection1 struct {
	List *EqualsSelectionListSelection `json:"list,omitempty"`
}

// NewSelection1 instantiates a new Selection1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelection1() *Selection1 {
	this := Selection1{}
	return &this
}

// NewSelection1WithDefaults instantiates a new Selection1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelection1WithDefaults() *Selection1 {
	this := Selection1{}
	return &this
}

// GetList returns the List field value if set, zero value otherwise.
func (o *Selection1) GetList() EqualsSelectionListSelection {
	if o == nil || IsNil(o.List) {
		var ret EqualsSelectionListSelection
		return ret
	}
	return *o.List
}

// GetListOk returns a tuple with the List field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Selection1) GetListOk() (*EqualsSelectionListSelection, bool) {
	if o == nil || IsNil(o.List) {
		return nil, false
	}
	return o.List, true
}

// HasList returns a boolean if a field has been set.
func (o *Selection1) HasList() bool {
	if o != nil && !IsNil(o.List) {
		return true
	}

	return false
}

// SetList gets a reference to the given EqualsSelectionListSelection and assigns it to the List field.
func (o *Selection1) SetList(v EqualsSelectionListSelection) {
	o.List = &v
}

func (o Selection1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Selection1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.List) {
		toSerialize["list"] = o.List
	}
	return toSerialize, nil
}

type NullableSelection1 struct {
	value *Selection1
	isSet bool
}

func (v NullableSelection1) Get() *Selection1 {
	return v.value
}

func (v *NullableSelection1) Set(val *Selection1) {
	v.value = val
	v.isSet = true
}

func (v NullableSelection1) IsSet() bool {
	return v.isSet
}

func (v *NullableSelection1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelection1(val *Selection1) *NullableSelection1 {
	return &NullableSelection1{value: val, isSet: true}
}

func (v NullableSelection1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelection1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


