/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the GaugeQueryDataprime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GaugeQueryDataprime{}

// GaugeQueryDataprime struct for GaugeQueryDataprime
type GaugeQueryDataprime struct {
	Dataprime *GaugeDataprimeQuery `json:"dataprime,omitempty"`
}

// NewGaugeQueryDataprime instantiates a new GaugeQueryDataprime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGaugeQueryDataprime() *GaugeQueryDataprime {
	this := GaugeQueryDataprime{}
	return &this
}

// NewGaugeQueryDataprimeWithDefaults instantiates a new GaugeQueryDataprime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGaugeQueryDataprimeWithDefaults() *GaugeQueryDataprime {
	this := GaugeQueryDataprime{}
	return &this
}

// GetDataprime returns the Dataprime field value if set, zero value otherwise.
func (o *GaugeQueryDataprime) GetDataprime() GaugeDataprimeQuery {
	if o == nil || IsNil(o.Dataprime) {
		var ret GaugeDataprimeQuery
		return ret
	}
	return *o.Dataprime
}

// GetDataprimeOk returns a tuple with the Dataprime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GaugeQueryDataprime) GetDataprimeOk() (*GaugeDataprimeQuery, bool) {
	if o == nil || IsNil(o.Dataprime) {
		return nil, false
	}
	return o.Dataprime, true
}

// HasDataprime returns a boolean if a field has been set.
func (o *GaugeQueryDataprime) HasDataprime() bool {
	if o != nil && !IsNil(o.Dataprime) {
		return true
	}

	return false
}

// SetDataprime gets a reference to the given GaugeDataprimeQuery and assigns it to the Dataprime field.
func (o *GaugeQueryDataprime) SetDataprime(v GaugeDataprimeQuery) {
	o.Dataprime = &v
}

func (o GaugeQueryDataprime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GaugeQueryDataprime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dataprime) {
		toSerialize["dataprime"] = o.Dataprime
	}
	return toSerialize, nil
}

type NullableGaugeQueryDataprime struct {
	value *GaugeQueryDataprime
	isSet bool
}

func (v NullableGaugeQueryDataprime) Get() *GaugeQueryDataprime {
	return v.value
}

func (v *NullableGaugeQueryDataprime) Set(val *GaugeQueryDataprime) {
	v.value = val
	v.isSet = true
}

func (v NullableGaugeQueryDataprime) IsSet() bool {
	return v.isSet
}

func (v *NullableGaugeQueryDataprime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGaugeQueryDataprime(val *GaugeQueryDataprime) *NullableGaugeQueryDataprime {
	return &NullableGaugeQueryDataprime{value: val, isSet: true}
}

func (v NullableGaugeQueryDataprime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGaugeQueryDataprime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


