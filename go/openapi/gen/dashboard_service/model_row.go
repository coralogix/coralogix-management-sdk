/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the Row type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Row{}

// Row struct for Row
type Row struct {
	Appearance *RowAppearance `json:"appearance,omitempty"`
	Id *UUID `json:"id,omitempty"`
	Widgets []Widget `json:"widgets,omitempty"`
}

// NewRow instantiates a new Row object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRow() *Row {
	this := Row{}
	return &this
}

// NewRowWithDefaults instantiates a new Row object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRowWithDefaults() *Row {
	this := Row{}
	return &this
}

// GetAppearance returns the Appearance field value if set, zero value otherwise.
func (o *Row) GetAppearance() RowAppearance {
	if o == nil || IsNil(o.Appearance) {
		var ret RowAppearance
		return ret
	}
	return *o.Appearance
}

// GetAppearanceOk returns a tuple with the Appearance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Row) GetAppearanceOk() (*RowAppearance, bool) {
	if o == nil || IsNil(o.Appearance) {
		return nil, false
	}
	return o.Appearance, true
}

// HasAppearance returns a boolean if a field has been set.
func (o *Row) HasAppearance() bool {
	if o != nil && !IsNil(o.Appearance) {
		return true
	}

	return false
}

// SetAppearance gets a reference to the given RowAppearance and assigns it to the Appearance field.
func (o *Row) SetAppearance(v RowAppearance) {
	o.Appearance = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Row) GetId() UUID {
	if o == nil || IsNil(o.Id) {
		var ret UUID
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Row) GetIdOk() (*UUID, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Row) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given UUID and assigns it to the Id field.
func (o *Row) SetId(v UUID) {
	o.Id = &v
}

// GetWidgets returns the Widgets field value if set, zero value otherwise.
func (o *Row) GetWidgets() []Widget {
	if o == nil || IsNil(o.Widgets) {
		var ret []Widget
		return ret
	}
	return o.Widgets
}

// GetWidgetsOk returns a tuple with the Widgets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Row) GetWidgetsOk() ([]Widget, bool) {
	if o == nil || IsNil(o.Widgets) {
		return nil, false
	}
	return o.Widgets, true
}

// HasWidgets returns a boolean if a field has been set.
func (o *Row) HasWidgets() bool {
	if o != nil && !IsNil(o.Widgets) {
		return true
	}

	return false
}

// SetWidgets gets a reference to the given []Widget and assigns it to the Widgets field.
func (o *Row) SetWidgets(v []Widget) {
	o.Widgets = v
}

func (o Row) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Row) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Appearance) {
		toSerialize["appearance"] = o.Appearance
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Widgets) {
		toSerialize["widgets"] = o.Widgets
	}
	return toSerialize, nil
}

type NullableRow struct {
	value *Row
	isSet bool
}

func (v NullableRow) Get() *Row {
	return v.value
}

func (v *NullableRow) Set(val *Row) {
	v.value = val
	v.isSet = true
}

func (v NullableRow) IsSet() bool {
	return v.isSet
}

func (v *NullableRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRow(val *Row) *NullableRow {
	return &NullableRow{value: val, isSet: true}
}

func (v NullableRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


