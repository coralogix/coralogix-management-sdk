/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the DataTableColumn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataTableColumn{}

// DataTableColumn struct for DataTableColumn
type DataTableColumn struct {
	// Name of the field to display in the column
	Field *string `json:"field,omitempty"`
	// Custom width of the column, by default it's automatically adjusted
	Width *int32 `json:"width,omitempty"`
}

// NewDataTableColumn instantiates a new DataTableColumn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTableColumn() *DataTableColumn {
	this := DataTableColumn{}
	return &this
}

// NewDataTableColumnWithDefaults instantiates a new DataTableColumn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTableColumnWithDefaults() *DataTableColumn {
	this := DataTableColumn{}
	return &this
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *DataTableColumn) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTableColumn) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *DataTableColumn) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *DataTableColumn) SetField(v string) {
	o.Field = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *DataTableColumn) GetWidth() int32 {
	if o == nil || IsNil(o.Width) {
		var ret int32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTableColumn) GetWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *DataTableColumn) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int32 and assigns it to the Width field.
func (o *DataTableColumn) SetWidth(v int32) {
	o.Width = &v
}

func (o DataTableColumn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataTableColumn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	return toSerialize, nil
}

type NullableDataTableColumn struct {
	value *DataTableColumn
	isSet bool
}

func (v NullableDataTableColumn) Get() *DataTableColumn {
	return v.value
}

func (v *NullableDataTableColumn) Set(val *DataTableColumn) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTableColumn) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTableColumn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTableColumn(val *DataTableColumn) *NullableDataTableColumn {
	return &NullableDataTableColumn{value: val, isSet: true}
}

func (v NullableDataTableColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTableColumn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


