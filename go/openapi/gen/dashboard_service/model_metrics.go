/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the Metrics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Metrics{}

// Metrics A metrics variant of the query
type Metrics struct {
	EditorMode *MetricsQueryEditorMode `json:"editorMode,omitempty"`
	PromqlQuery *PromQlQuery `json:"promqlQuery,omitempty"`
	PromqlQueryType *PromQLQueryType `json:"promqlQueryType,omitempty"`
	SeriesLimitType *MetricsSeriesLimitType `json:"seriesLimitType,omitempty"`
}

// NewMetrics instantiates a new Metrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetrics() *Metrics {
	this := Metrics{}
	return &this
}

// NewMetricsWithDefaults instantiates a new Metrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsWithDefaults() *Metrics {
	this := Metrics{}
	return &this
}

// GetEditorMode returns the EditorMode field value if set, zero value otherwise.
func (o *Metrics) GetEditorMode() MetricsQueryEditorMode {
	if o == nil || IsNil(o.EditorMode) {
		var ret MetricsQueryEditorMode
		return ret
	}
	return *o.EditorMode
}

// GetEditorModeOk returns a tuple with the EditorMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metrics) GetEditorModeOk() (*MetricsQueryEditorMode, bool) {
	if o == nil || IsNil(o.EditorMode) {
		return nil, false
	}
	return o.EditorMode, true
}

// HasEditorMode returns a boolean if a field has been set.
func (o *Metrics) HasEditorMode() bool {
	if o != nil && !IsNil(o.EditorMode) {
		return true
	}

	return false
}

// SetEditorMode gets a reference to the given MetricsQueryEditorMode and assigns it to the EditorMode field.
func (o *Metrics) SetEditorMode(v MetricsQueryEditorMode) {
	o.EditorMode = &v
}

// GetPromqlQuery returns the PromqlQuery field value if set, zero value otherwise.
func (o *Metrics) GetPromqlQuery() PromQlQuery {
	if o == nil || IsNil(o.PromqlQuery) {
		var ret PromQlQuery
		return ret
	}
	return *o.PromqlQuery
}

// GetPromqlQueryOk returns a tuple with the PromqlQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metrics) GetPromqlQueryOk() (*PromQlQuery, bool) {
	if o == nil || IsNil(o.PromqlQuery) {
		return nil, false
	}
	return o.PromqlQuery, true
}

// HasPromqlQuery returns a boolean if a field has been set.
func (o *Metrics) HasPromqlQuery() bool {
	if o != nil && !IsNil(o.PromqlQuery) {
		return true
	}

	return false
}

// SetPromqlQuery gets a reference to the given PromQlQuery and assigns it to the PromqlQuery field.
func (o *Metrics) SetPromqlQuery(v PromQlQuery) {
	o.PromqlQuery = &v
}

// GetPromqlQueryType returns the PromqlQueryType field value if set, zero value otherwise.
func (o *Metrics) GetPromqlQueryType() PromQLQueryType {
	if o == nil || IsNil(o.PromqlQueryType) {
		var ret PromQLQueryType
		return ret
	}
	return *o.PromqlQueryType
}

// GetPromqlQueryTypeOk returns a tuple with the PromqlQueryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metrics) GetPromqlQueryTypeOk() (*PromQLQueryType, bool) {
	if o == nil || IsNil(o.PromqlQueryType) {
		return nil, false
	}
	return o.PromqlQueryType, true
}

// HasPromqlQueryType returns a boolean if a field has been set.
func (o *Metrics) HasPromqlQueryType() bool {
	if o != nil && !IsNil(o.PromqlQueryType) {
		return true
	}

	return false
}

// SetPromqlQueryType gets a reference to the given PromQLQueryType and assigns it to the PromqlQueryType field.
func (o *Metrics) SetPromqlQueryType(v PromQLQueryType) {
	o.PromqlQueryType = &v
}

// GetSeriesLimitType returns the SeriesLimitType field value if set, zero value otherwise.
func (o *Metrics) GetSeriesLimitType() MetricsSeriesLimitType {
	if o == nil || IsNil(o.SeriesLimitType) {
		var ret MetricsSeriesLimitType
		return ret
	}
	return *o.SeriesLimitType
}

// GetSeriesLimitTypeOk returns a tuple with the SeriesLimitType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metrics) GetSeriesLimitTypeOk() (*MetricsSeriesLimitType, bool) {
	if o == nil || IsNil(o.SeriesLimitType) {
		return nil, false
	}
	return o.SeriesLimitType, true
}

// HasSeriesLimitType returns a boolean if a field has been set.
func (o *Metrics) HasSeriesLimitType() bool {
	if o != nil && !IsNil(o.SeriesLimitType) {
		return true
	}

	return false
}

// SetSeriesLimitType gets a reference to the given MetricsSeriesLimitType and assigns it to the SeriesLimitType field.
func (o *Metrics) SetSeriesLimitType(v MetricsSeriesLimitType) {
	o.SeriesLimitType = &v
}

func (o Metrics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Metrics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EditorMode) {
		toSerialize["editorMode"] = o.EditorMode
	}
	if !IsNil(o.PromqlQuery) {
		toSerialize["promqlQuery"] = o.PromqlQuery
	}
	if !IsNil(o.PromqlQueryType) {
		toSerialize["promqlQueryType"] = o.PromqlQueryType
	}
	if !IsNil(o.SeriesLimitType) {
		toSerialize["seriesLimitType"] = o.SeriesLimitType
	}
	return toSerialize, nil
}

type NullableMetrics struct {
	value *Metrics
	isSet bool
}

func (v NullableMetrics) Get() *Metrics {
	return v.value
}

func (v *NullableMetrics) Set(val *Metrics) {
	v.value = val
	v.isSet = true
}

func (v NullableMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullableMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetrics(val *Metrics) *NullableMetrics {
	return &NullableMetrics{value: val, isSet: true}
}

func (v NullableMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


