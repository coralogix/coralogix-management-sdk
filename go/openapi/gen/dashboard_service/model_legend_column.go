/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// LegendColumn the model 'LegendColumn'
type LegendColumn string

// List of LegendColumn
const (
	LEGENDCOLUMN_LEGEND_COLUMN_UNSPECIFIED LegendColumn = "LEGEND_COLUMN_UNSPECIFIED"
	LEGENDCOLUMN_LEGEND_COLUMN_MIN LegendColumn = "LEGEND_COLUMN_MIN"
	LEGENDCOLUMN_LEGEND_COLUMN_MAX LegendColumn = "LEGEND_COLUMN_MAX"
	LEGENDCOLUMN_LEGEND_COLUMN_SUM LegendColumn = "LEGEND_COLUMN_SUM"
	LEGENDCOLUMN_LEGEND_COLUMN_AVG LegendColumn = "LEGEND_COLUMN_AVG"
	LEGENDCOLUMN_LEGEND_COLUMN_LAST LegendColumn = "LEGEND_COLUMN_LAST"
	LEGENDCOLUMN_LEGEND_COLUMN_NAME LegendColumn = "LEGEND_COLUMN_NAME"
	LEGENDCOLUMN_LEGEND_COLUMN_SIMPLE_VALUE LegendColumn = "LEGEND_COLUMN_SIMPLE_VALUE"
)

// All allowed values of LegendColumn enum
var AllowedLegendColumnEnumValues = []LegendColumn{
	"LEGEND_COLUMN_UNSPECIFIED",
	"LEGEND_COLUMN_MIN",
	"LEGEND_COLUMN_MAX",
	"LEGEND_COLUMN_SUM",
	"LEGEND_COLUMN_AVG",
	"LEGEND_COLUMN_LAST",
	"LEGEND_COLUMN_NAME",
	"LEGEND_COLUMN_SIMPLE_VALUE",
}

func (v *LegendColumn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LegendColumn(value)
	for _, existing := range AllowedLegendColumnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LegendColumn", value)
}

// NewLegendColumnFromValue returns a pointer to a valid LegendColumn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLegendColumnFromValue(v string) (*LegendColumn, error) {
	ev := LegendColumn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LegendColumn: valid values are %v", v, AllowedLegendColumnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LegendColumn) IsValid() bool {
	for _, existing := range AllowedLegendColumnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LegendColumn value
func (v LegendColumn) Ptr() *LegendColumn {
	return &v
}

type NullableLegendColumn struct {
	value *LegendColumn
	isSet bool
}

func (v NullableLegendColumn) Get() *LegendColumn {
	return v.value
}

func (v *NullableLegendColumn) Set(val *LegendColumn) {
	v.value = val
	v.isSet = true
}

func (v NullableLegendColumn) IsSet() bool {
	return v.isSet
}

func (v *NullableLegendColumn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegendColumn(val *LegendColumn) *NullableLegendColumn {
	return &NullableLegendColumn{value: val, isSet: true}
}

func (v NullableLegendColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegendColumn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

