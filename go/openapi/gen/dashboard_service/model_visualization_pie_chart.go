/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the VisualizationPieChart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VisualizationPieChart{}

// VisualizationPieChart struct for VisualizationPieChart
type VisualizationPieChart struct {
	// Whether to render numeric value without abbreviation
	AllowAbbreviation *bool `json:"allowAbbreviation,omitempty"`
	CategoryFields []ObservationField `json:"categoryFields,omitempty"`
	// Applied color scheme, one of the predefined values
	ColorScheme *string `json:"colorScheme,omitempty"`
	// Custom unit (requires the unit field to be set to custom to take effect)
	CustomUnit *string `json:"customUnit,omitempty"`
	// Number indicating the decimal precision of the numeric values, within range 0-15
	DecimalPrecision *int32 `json:"decimalPrecision,omitempty"`
	// Custom template name for a group, can contain variables
	GroupNameTemplate *string `json:"groupNameTemplate,omitempty"`
	// Whether to ignore color scheme and derive colors from algorithm
	HashColors *bool `json:"hashColors,omitempty"`
	LabelDefinition *VisualizationPieChartLabelDefinition `json:"labelDefinition,omitempty"`
	Legend *Legend `json:"legend,omitempty"`
	// Maximum number of slices on a chart
	MaxSlicesPerChart *int32 `json:"maxSlicesPerChart,omitempty"`
	// How many slices can fit in a single slice stack
	MaxSlicesPerStack *int32 `json:"maxSlicesPerStack,omitempty"`
	// Minimum percentage threshold for slices to be displayed
	MinSlicePercentage *int32 `json:"minSlicePercentage,omitempty"`
	// Whether to show the total amount as a title
	ShowTotal *bool `json:"showTotal,omitempty"`
	// Custom template name of an individual slice in the stack
	StackNameTemplate *string `json:"stackNameTemplate,omitempty"`
	SubCategoryFields []ObservationField `json:"subCategoryFields,omitempty"`
	Unit *CommonUnit `json:"unit,omitempty"`
	ValueField *ObservationField `json:"valueField,omitempty"`
}

// NewVisualizationPieChart instantiates a new VisualizationPieChart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisualizationPieChart() *VisualizationPieChart {
	this := VisualizationPieChart{}
	return &this
}

// NewVisualizationPieChartWithDefaults instantiates a new VisualizationPieChart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisualizationPieChartWithDefaults() *VisualizationPieChart {
	this := VisualizationPieChart{}
	return &this
}

// GetAllowAbbreviation returns the AllowAbbreviation field value if set, zero value otherwise.
func (o *VisualizationPieChart) GetAllowAbbreviation() bool {
	if o == nil || IsNil(o.AllowAbbreviation) {
		var ret bool
		return ret
	}
	return *o.AllowAbbreviation
}

// GetAllowAbbreviationOk returns a tuple with the AllowAbbreviation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationPieChart) GetAllowAbbreviationOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowAbbreviation) {
		return nil, false
	}
	return o.AllowAbbreviation, true
}

// HasAllowAbbreviation returns a boolean if a field has been set.
func (o *VisualizationPieChart) HasAllowAbbreviation() bool {
	if o != nil && !IsNil(o.AllowAbbreviation) {
		return true
	}

	return false
}

// SetAllowAbbreviation gets a reference to the given bool and assigns it to the AllowAbbreviation field.
func (o *VisualizationPieChart) SetAllowAbbreviation(v bool) {
	o.AllowAbbreviation = &v
}

// GetCategoryFields returns the CategoryFields field value if set, zero value otherwise.
func (o *VisualizationPieChart) GetCategoryFields() []ObservationField {
	if o == nil || IsNil(o.CategoryFields) {
		var ret []ObservationField
		return ret
	}
	return o.CategoryFields
}

// GetCategoryFieldsOk returns a tuple with the CategoryFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationPieChart) GetCategoryFieldsOk() ([]ObservationField, bool) {
	if o == nil || IsNil(o.CategoryFields) {
		return nil, false
	}
	return o.CategoryFields, true
}

// HasCategoryFields returns a boolean if a field has been set.
func (o *VisualizationPieChart) HasCategoryFields() bool {
	if o != nil && !IsNil(o.CategoryFields) {
		return true
	}

	return false
}

// SetCategoryFields gets a reference to the given []ObservationField and assigns it to the CategoryFields field.
func (o *VisualizationPieChart) SetCategoryFields(v []ObservationField) {
	o.CategoryFields = v
}

// GetColorScheme returns the ColorScheme field value if set, zero value otherwise.
func (o *VisualizationPieChart) GetColorScheme() string {
	if o == nil || IsNil(o.ColorScheme) {
		var ret string
		return ret
	}
	return *o.ColorScheme
}

// GetColorSchemeOk returns a tuple with the ColorScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationPieChart) GetColorSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.ColorScheme) {
		return nil, false
	}
	return o.ColorScheme, true
}

// HasColorScheme returns a boolean if a field has been set.
func (o *VisualizationPieChart) HasColorScheme() bool {
	if o != nil && !IsNil(o.ColorScheme) {
		return true
	}

	return false
}

// SetColorScheme gets a reference to the given string and assigns it to the ColorScheme field.
func (o *VisualizationPieChart) SetColorScheme(v string) {
	o.ColorScheme = &v
}

// GetCustomUnit returns the CustomUnit field value if set, zero value otherwise.
func (o *VisualizationPieChart) GetCustomUnit() string {
	if o == nil || IsNil(o.CustomUnit) {
		var ret string
		return ret
	}
	return *o.CustomUnit
}

// GetCustomUnitOk returns a tuple with the CustomUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationPieChart) GetCustomUnitOk() (*string, bool) {
	if o == nil || IsNil(o.CustomUnit) {
		return nil, false
	}
	return o.CustomUnit, true
}

// HasCustomUnit returns a boolean if a field has been set.
func (o *VisualizationPieChart) HasCustomUnit() bool {
	if o != nil && !IsNil(o.CustomUnit) {
		return true
	}

	return false
}

// SetCustomUnit gets a reference to the given string and assigns it to the CustomUnit field.
func (o *VisualizationPieChart) SetCustomUnit(v string) {
	o.CustomUnit = &v
}

// GetDecimalPrecision returns the DecimalPrecision field value if set, zero value otherwise.
func (o *VisualizationPieChart) GetDecimalPrecision() int32 {
	if o == nil || IsNil(o.DecimalPrecision) {
		var ret int32
		return ret
	}
	return *o.DecimalPrecision
}

// GetDecimalPrecisionOk returns a tuple with the DecimalPrecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationPieChart) GetDecimalPrecisionOk() (*int32, bool) {
	if o == nil || IsNil(o.DecimalPrecision) {
		return nil, false
	}
	return o.DecimalPrecision, true
}

// HasDecimalPrecision returns a boolean if a field has been set.
func (o *VisualizationPieChart) HasDecimalPrecision() bool {
	if o != nil && !IsNil(o.DecimalPrecision) {
		return true
	}

	return false
}

// SetDecimalPrecision gets a reference to the given int32 and assigns it to the DecimalPrecision field.
func (o *VisualizationPieChart) SetDecimalPrecision(v int32) {
	o.DecimalPrecision = &v
}

// GetGroupNameTemplate returns the GroupNameTemplate field value if set, zero value otherwise.
func (o *VisualizationPieChart) GetGroupNameTemplate() string {
	if o == nil || IsNil(o.GroupNameTemplate) {
		var ret string
		return ret
	}
	return *o.GroupNameTemplate
}

// GetGroupNameTemplateOk returns a tuple with the GroupNameTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationPieChart) GetGroupNameTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.GroupNameTemplate) {
		return nil, false
	}
	return o.GroupNameTemplate, true
}

// HasGroupNameTemplate returns a boolean if a field has been set.
func (o *VisualizationPieChart) HasGroupNameTemplate() bool {
	if o != nil && !IsNil(o.GroupNameTemplate) {
		return true
	}

	return false
}

// SetGroupNameTemplate gets a reference to the given string and assigns it to the GroupNameTemplate field.
func (o *VisualizationPieChart) SetGroupNameTemplate(v string) {
	o.GroupNameTemplate = &v
}

// GetHashColors returns the HashColors field value if set, zero value otherwise.
func (o *VisualizationPieChart) GetHashColors() bool {
	if o == nil || IsNil(o.HashColors) {
		var ret bool
		return ret
	}
	return *o.HashColors
}

// GetHashColorsOk returns a tuple with the HashColors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationPieChart) GetHashColorsOk() (*bool, bool) {
	if o == nil || IsNil(o.HashColors) {
		return nil, false
	}
	return o.HashColors, true
}

// HasHashColors returns a boolean if a field has been set.
func (o *VisualizationPieChart) HasHashColors() bool {
	if o != nil && !IsNil(o.HashColors) {
		return true
	}

	return false
}

// SetHashColors gets a reference to the given bool and assigns it to the HashColors field.
func (o *VisualizationPieChart) SetHashColors(v bool) {
	o.HashColors = &v
}

// GetLabelDefinition returns the LabelDefinition field value if set, zero value otherwise.
func (o *VisualizationPieChart) GetLabelDefinition() VisualizationPieChartLabelDefinition {
	if o == nil || IsNil(o.LabelDefinition) {
		var ret VisualizationPieChartLabelDefinition
		return ret
	}
	return *o.LabelDefinition
}

// GetLabelDefinitionOk returns a tuple with the LabelDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationPieChart) GetLabelDefinitionOk() (*VisualizationPieChartLabelDefinition, bool) {
	if o == nil || IsNil(o.LabelDefinition) {
		return nil, false
	}
	return o.LabelDefinition, true
}

// HasLabelDefinition returns a boolean if a field has been set.
func (o *VisualizationPieChart) HasLabelDefinition() bool {
	if o != nil && !IsNil(o.LabelDefinition) {
		return true
	}

	return false
}

// SetLabelDefinition gets a reference to the given VisualizationPieChartLabelDefinition and assigns it to the LabelDefinition field.
func (o *VisualizationPieChart) SetLabelDefinition(v VisualizationPieChartLabelDefinition) {
	o.LabelDefinition = &v
}

// GetLegend returns the Legend field value if set, zero value otherwise.
func (o *VisualizationPieChart) GetLegend() Legend {
	if o == nil || IsNil(o.Legend) {
		var ret Legend
		return ret
	}
	return *o.Legend
}

// GetLegendOk returns a tuple with the Legend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationPieChart) GetLegendOk() (*Legend, bool) {
	if o == nil || IsNil(o.Legend) {
		return nil, false
	}
	return o.Legend, true
}

// HasLegend returns a boolean if a field has been set.
func (o *VisualizationPieChart) HasLegend() bool {
	if o != nil && !IsNil(o.Legend) {
		return true
	}

	return false
}

// SetLegend gets a reference to the given Legend and assigns it to the Legend field.
func (o *VisualizationPieChart) SetLegend(v Legend) {
	o.Legend = &v
}

// GetMaxSlicesPerChart returns the MaxSlicesPerChart field value if set, zero value otherwise.
func (o *VisualizationPieChart) GetMaxSlicesPerChart() int32 {
	if o == nil || IsNil(o.MaxSlicesPerChart) {
		var ret int32
		return ret
	}
	return *o.MaxSlicesPerChart
}

// GetMaxSlicesPerChartOk returns a tuple with the MaxSlicesPerChart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationPieChart) GetMaxSlicesPerChartOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxSlicesPerChart) {
		return nil, false
	}
	return o.MaxSlicesPerChart, true
}

// HasMaxSlicesPerChart returns a boolean if a field has been set.
func (o *VisualizationPieChart) HasMaxSlicesPerChart() bool {
	if o != nil && !IsNil(o.MaxSlicesPerChart) {
		return true
	}

	return false
}

// SetMaxSlicesPerChart gets a reference to the given int32 and assigns it to the MaxSlicesPerChart field.
func (o *VisualizationPieChart) SetMaxSlicesPerChart(v int32) {
	o.MaxSlicesPerChart = &v
}

// GetMaxSlicesPerStack returns the MaxSlicesPerStack field value if set, zero value otherwise.
func (o *VisualizationPieChart) GetMaxSlicesPerStack() int32 {
	if o == nil || IsNil(o.MaxSlicesPerStack) {
		var ret int32
		return ret
	}
	return *o.MaxSlicesPerStack
}

// GetMaxSlicesPerStackOk returns a tuple with the MaxSlicesPerStack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationPieChart) GetMaxSlicesPerStackOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxSlicesPerStack) {
		return nil, false
	}
	return o.MaxSlicesPerStack, true
}

// HasMaxSlicesPerStack returns a boolean if a field has been set.
func (o *VisualizationPieChart) HasMaxSlicesPerStack() bool {
	if o != nil && !IsNil(o.MaxSlicesPerStack) {
		return true
	}

	return false
}

// SetMaxSlicesPerStack gets a reference to the given int32 and assigns it to the MaxSlicesPerStack field.
func (o *VisualizationPieChart) SetMaxSlicesPerStack(v int32) {
	o.MaxSlicesPerStack = &v
}

// GetMinSlicePercentage returns the MinSlicePercentage field value if set, zero value otherwise.
func (o *VisualizationPieChart) GetMinSlicePercentage() int32 {
	if o == nil || IsNil(o.MinSlicePercentage) {
		var ret int32
		return ret
	}
	return *o.MinSlicePercentage
}

// GetMinSlicePercentageOk returns a tuple with the MinSlicePercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationPieChart) GetMinSlicePercentageOk() (*int32, bool) {
	if o == nil || IsNil(o.MinSlicePercentage) {
		return nil, false
	}
	return o.MinSlicePercentage, true
}

// HasMinSlicePercentage returns a boolean if a field has been set.
func (o *VisualizationPieChart) HasMinSlicePercentage() bool {
	if o != nil && !IsNil(o.MinSlicePercentage) {
		return true
	}

	return false
}

// SetMinSlicePercentage gets a reference to the given int32 and assigns it to the MinSlicePercentage field.
func (o *VisualizationPieChart) SetMinSlicePercentage(v int32) {
	o.MinSlicePercentage = &v
}

// GetShowTotal returns the ShowTotal field value if set, zero value otherwise.
func (o *VisualizationPieChart) GetShowTotal() bool {
	if o == nil || IsNil(o.ShowTotal) {
		var ret bool
		return ret
	}
	return *o.ShowTotal
}

// GetShowTotalOk returns a tuple with the ShowTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationPieChart) GetShowTotalOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowTotal) {
		return nil, false
	}
	return o.ShowTotal, true
}

// HasShowTotal returns a boolean if a field has been set.
func (o *VisualizationPieChart) HasShowTotal() bool {
	if o != nil && !IsNil(o.ShowTotal) {
		return true
	}

	return false
}

// SetShowTotal gets a reference to the given bool and assigns it to the ShowTotal field.
func (o *VisualizationPieChart) SetShowTotal(v bool) {
	o.ShowTotal = &v
}

// GetStackNameTemplate returns the StackNameTemplate field value if set, zero value otherwise.
func (o *VisualizationPieChart) GetStackNameTemplate() string {
	if o == nil || IsNil(o.StackNameTemplate) {
		var ret string
		return ret
	}
	return *o.StackNameTemplate
}

// GetStackNameTemplateOk returns a tuple with the StackNameTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationPieChart) GetStackNameTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.StackNameTemplate) {
		return nil, false
	}
	return o.StackNameTemplate, true
}

// HasStackNameTemplate returns a boolean if a field has been set.
func (o *VisualizationPieChart) HasStackNameTemplate() bool {
	if o != nil && !IsNil(o.StackNameTemplate) {
		return true
	}

	return false
}

// SetStackNameTemplate gets a reference to the given string and assigns it to the StackNameTemplate field.
func (o *VisualizationPieChart) SetStackNameTemplate(v string) {
	o.StackNameTemplate = &v
}

// GetSubCategoryFields returns the SubCategoryFields field value if set, zero value otherwise.
func (o *VisualizationPieChart) GetSubCategoryFields() []ObservationField {
	if o == nil || IsNil(o.SubCategoryFields) {
		var ret []ObservationField
		return ret
	}
	return o.SubCategoryFields
}

// GetSubCategoryFieldsOk returns a tuple with the SubCategoryFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationPieChart) GetSubCategoryFieldsOk() ([]ObservationField, bool) {
	if o == nil || IsNil(o.SubCategoryFields) {
		return nil, false
	}
	return o.SubCategoryFields, true
}

// HasSubCategoryFields returns a boolean if a field has been set.
func (o *VisualizationPieChart) HasSubCategoryFields() bool {
	if o != nil && !IsNil(o.SubCategoryFields) {
		return true
	}

	return false
}

// SetSubCategoryFields gets a reference to the given []ObservationField and assigns it to the SubCategoryFields field.
func (o *VisualizationPieChart) SetSubCategoryFields(v []ObservationField) {
	o.SubCategoryFields = v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *VisualizationPieChart) GetUnit() CommonUnit {
	if o == nil || IsNil(o.Unit) {
		var ret CommonUnit
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationPieChart) GetUnitOk() (*CommonUnit, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *VisualizationPieChart) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given CommonUnit and assigns it to the Unit field.
func (o *VisualizationPieChart) SetUnit(v CommonUnit) {
	o.Unit = &v
}

// GetValueField returns the ValueField field value if set, zero value otherwise.
func (o *VisualizationPieChart) GetValueField() ObservationField {
	if o == nil || IsNil(o.ValueField) {
		var ret ObservationField
		return ret
	}
	return *o.ValueField
}

// GetValueFieldOk returns a tuple with the ValueField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationPieChart) GetValueFieldOk() (*ObservationField, bool) {
	if o == nil || IsNil(o.ValueField) {
		return nil, false
	}
	return o.ValueField, true
}

// HasValueField returns a boolean if a field has been set.
func (o *VisualizationPieChart) HasValueField() bool {
	if o != nil && !IsNil(o.ValueField) {
		return true
	}

	return false
}

// SetValueField gets a reference to the given ObservationField and assigns it to the ValueField field.
func (o *VisualizationPieChart) SetValueField(v ObservationField) {
	o.ValueField = &v
}

func (o VisualizationPieChart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VisualizationPieChart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowAbbreviation) {
		toSerialize["allowAbbreviation"] = o.AllowAbbreviation
	}
	if !IsNil(o.CategoryFields) {
		toSerialize["categoryFields"] = o.CategoryFields
	}
	if !IsNil(o.ColorScheme) {
		toSerialize["colorScheme"] = o.ColorScheme
	}
	if !IsNil(o.CustomUnit) {
		toSerialize["customUnit"] = o.CustomUnit
	}
	if !IsNil(o.DecimalPrecision) {
		toSerialize["decimalPrecision"] = o.DecimalPrecision
	}
	if !IsNil(o.GroupNameTemplate) {
		toSerialize["groupNameTemplate"] = o.GroupNameTemplate
	}
	if !IsNil(o.HashColors) {
		toSerialize["hashColors"] = o.HashColors
	}
	if !IsNil(o.LabelDefinition) {
		toSerialize["labelDefinition"] = o.LabelDefinition
	}
	if !IsNil(o.Legend) {
		toSerialize["legend"] = o.Legend
	}
	if !IsNil(o.MaxSlicesPerChart) {
		toSerialize["maxSlicesPerChart"] = o.MaxSlicesPerChart
	}
	if !IsNil(o.MaxSlicesPerStack) {
		toSerialize["maxSlicesPerStack"] = o.MaxSlicesPerStack
	}
	if !IsNil(o.MinSlicePercentage) {
		toSerialize["minSlicePercentage"] = o.MinSlicePercentage
	}
	if !IsNil(o.ShowTotal) {
		toSerialize["showTotal"] = o.ShowTotal
	}
	if !IsNil(o.StackNameTemplate) {
		toSerialize["stackNameTemplate"] = o.StackNameTemplate
	}
	if !IsNil(o.SubCategoryFields) {
		toSerialize["subCategoryFields"] = o.SubCategoryFields
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.ValueField) {
		toSerialize["valueField"] = o.ValueField
	}
	return toSerialize, nil
}

type NullableVisualizationPieChart struct {
	value *VisualizationPieChart
	isSet bool
}

func (v NullableVisualizationPieChart) Get() *VisualizationPieChart {
	return v.value
}

func (v *NullableVisualizationPieChart) Set(val *VisualizationPieChart) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualizationPieChart) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualizationPieChart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualizationPieChart(val *VisualizationPieChart) *NullableVisualizationPieChart {
	return &NullableVisualizationPieChart{value: val, isSet: true}
}

func (v NullableVisualizationPieChart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualizationPieChart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


