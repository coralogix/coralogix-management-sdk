/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the VisualizationPieChart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VisualizationPieChart{}

// VisualizationPieChart struct for VisualizationPieChart
type VisualizationPieChart struct {
	PieChart *VisualizationPieChart `json:"pieChart,omitempty"`
}

// NewVisualizationPieChart instantiates a new VisualizationPieChart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisualizationPieChart() *VisualizationPieChart {
	this := VisualizationPieChart{}
	return &this
}

// NewVisualizationPieChartWithDefaults instantiates a new VisualizationPieChart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisualizationPieChartWithDefaults() *VisualizationPieChart {
	this := VisualizationPieChart{}
	return &this
}

// GetPieChart returns the PieChart field value if set, zero value otherwise.
func (o *VisualizationPieChart) GetPieChart() VisualizationPieChart {
	if o == nil || IsNil(o.PieChart) {
		var ret VisualizationPieChart
		return ret
	}
	return *o.PieChart
}

// GetPieChartOk returns a tuple with the PieChart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationPieChart) GetPieChartOk() (*VisualizationPieChart, bool) {
	if o == nil || IsNil(o.PieChart) {
		return nil, false
	}
	return o.PieChart, true
}

// HasPieChart returns a boolean if a field has been set.
func (o *VisualizationPieChart) HasPieChart() bool {
	if o != nil && !IsNil(o.PieChart) {
		return true
	}

	return false
}

// SetPieChart gets a reference to the given VisualizationPieChart and assigns it to the PieChart field.
func (o *VisualizationPieChart) SetPieChart(v VisualizationPieChart) {
	o.PieChart = &v
}

func (o VisualizationPieChart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VisualizationPieChart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PieChart) {
		toSerialize["pieChart"] = o.PieChart
	}
	return toSerialize, nil
}

type NullableVisualizationPieChart struct {
	value *VisualizationPieChart
	isSet bool
}

func (v NullableVisualizationPieChart) Get() *VisualizationPieChart {
	return v.value
}

func (v *NullableVisualizationPieChart) Set(val *VisualizationPieChart) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualizationPieChart) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualizationPieChart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualizationPieChart(val *VisualizationPieChart) *NullableVisualizationPieChart {
	return &NullableVisualizationPieChart{value: val, isSet: true}
}

func (v NullableVisualizationPieChart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualizationPieChart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


