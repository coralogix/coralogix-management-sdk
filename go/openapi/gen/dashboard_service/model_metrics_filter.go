/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the MetricsFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricsFilter{}

// MetricsFilter This data structure represents the filter criteria for metrics.
type MetricsFilter struct {
	// The label associated with the metric.
	Label *string `json:"label,omitempty"`
	// The name of the metric to which the filter is applied.
	Metric *string `json:"metric,omitempty"`
	Operator *FilterOperator `json:"operator,omitempty"`
}

// NewMetricsFilter instantiates a new MetricsFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricsFilter() *MetricsFilter {
	this := MetricsFilter{}
	return &this
}

// NewMetricsFilterWithDefaults instantiates a new MetricsFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsFilterWithDefaults() *MetricsFilter {
	this := MetricsFilter{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *MetricsFilter) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsFilter) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *MetricsFilter) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *MetricsFilter) SetLabel(v string) {
	o.Label = &v
}

// GetMetric returns the Metric field value if set, zero value otherwise.
func (o *MetricsFilter) GetMetric() string {
	if o == nil || IsNil(o.Metric) {
		var ret string
		return ret
	}
	return *o.Metric
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsFilter) GetMetricOk() (*string, bool) {
	if o == nil || IsNil(o.Metric) {
		return nil, false
	}
	return o.Metric, true
}

// HasMetric returns a boolean if a field has been set.
func (o *MetricsFilter) HasMetric() bool {
	if o != nil && !IsNil(o.Metric) {
		return true
	}

	return false
}

// SetMetric gets a reference to the given string and assigns it to the Metric field.
func (o *MetricsFilter) SetMetric(v string) {
	o.Metric = &v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *MetricsFilter) GetOperator() FilterOperator {
	if o == nil || IsNil(o.Operator) {
		var ret FilterOperator
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsFilter) GetOperatorOk() (*FilterOperator, bool) {
	if o == nil || IsNil(o.Operator) {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *MetricsFilter) HasOperator() bool {
	if o != nil && !IsNil(o.Operator) {
		return true
	}

	return false
}

// SetOperator gets a reference to the given FilterOperator and assigns it to the Operator field.
func (o *MetricsFilter) SetOperator(v FilterOperator) {
	o.Operator = &v
}

func (o MetricsFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricsFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Metric) {
		toSerialize["metric"] = o.Metric
	}
	if !IsNil(o.Operator) {
		toSerialize["operator"] = o.Operator
	}
	return toSerialize, nil
}

type NullableMetricsFilter struct {
	value *MetricsFilter
	isSet bool
}

func (v NullableMetricsFilter) Get() *MetricsFilter {
	return v.value
}

func (v *NullableMetricsFilter) Set(val *MetricsFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsFilter(val *MetricsFilter) *NullableMetricsFilter {
	return &NullableMetricsFilter{value: val, isSet: true}
}

func (v NullableMetricsFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


