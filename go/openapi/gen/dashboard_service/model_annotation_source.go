/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// AnnotationSource - struct for AnnotationSource
type AnnotationSource struct {
	AnnotationSourceDataprime *AnnotationSourceDataprime
	AnnotationSourceLogs *AnnotationSourceLogs
	AnnotationSourceManual *AnnotationSourceManual
	AnnotationSourceMetrics *AnnotationSourceMetrics
	AnnotationSourceSpans *AnnotationSourceSpans
}

// AnnotationSourceDataprimeAsAnnotationSource is a convenience function that returns AnnotationSourceDataprime wrapped in AnnotationSource
func AnnotationSourceDataprimeAsAnnotationSource(v *AnnotationSourceDataprime) AnnotationSource {
	return AnnotationSource{
		AnnotationSourceDataprime: v,
	}
}

// AnnotationSourceLogsAsAnnotationSource is a convenience function that returns AnnotationSourceLogs wrapped in AnnotationSource
func AnnotationSourceLogsAsAnnotationSource(v *AnnotationSourceLogs) AnnotationSource {
	return AnnotationSource{
		AnnotationSourceLogs: v,
	}
}

// AnnotationSourceManualAsAnnotationSource is a convenience function that returns AnnotationSourceManual wrapped in AnnotationSource
func AnnotationSourceManualAsAnnotationSource(v *AnnotationSourceManual) AnnotationSource {
	return AnnotationSource{
		AnnotationSourceManual: v,
	}
}

// AnnotationSourceMetricsAsAnnotationSource is a convenience function that returns AnnotationSourceMetrics wrapped in AnnotationSource
func AnnotationSourceMetricsAsAnnotationSource(v *AnnotationSourceMetrics) AnnotationSource {
	return AnnotationSource{
		AnnotationSourceMetrics: v,
	}
}

// AnnotationSourceSpansAsAnnotationSource is a convenience function that returns AnnotationSourceSpans wrapped in AnnotationSource
func AnnotationSourceSpansAsAnnotationSource(v *AnnotationSourceSpans) AnnotationSource {
	return AnnotationSource{
		AnnotationSourceSpans: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AnnotationSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AnnotationSourceDataprime
	err = newStrictDecoder(data).Decode(&dst.AnnotationSourceDataprime)
	if err == nil {
		jsonAnnotationSourceDataprime, _ := json.Marshal(dst.AnnotationSourceDataprime)
		if string(jsonAnnotationSourceDataprime) == "{}" { // empty struct
			dst.AnnotationSourceDataprime = nil
		} else {
			if err = validator.Validate(dst.AnnotationSourceDataprime); err != nil {
				dst.AnnotationSourceDataprime = nil
			} else {
				match++
			}
		}
	} else {
		dst.AnnotationSourceDataprime = nil
	}

	// try to unmarshal data into AnnotationSourceLogs
	err = newStrictDecoder(data).Decode(&dst.AnnotationSourceLogs)
	if err == nil {
		jsonAnnotationSourceLogs, _ := json.Marshal(dst.AnnotationSourceLogs)
		if string(jsonAnnotationSourceLogs) == "{}" { // empty struct
			dst.AnnotationSourceLogs = nil
		} else {
			if err = validator.Validate(dst.AnnotationSourceLogs); err != nil {
				dst.AnnotationSourceLogs = nil
			} else {
				match++
			}
		}
	} else {
		dst.AnnotationSourceLogs = nil
	}

	// try to unmarshal data into AnnotationSourceManual
	err = newStrictDecoder(data).Decode(&dst.AnnotationSourceManual)
	if err == nil {
		jsonAnnotationSourceManual, _ := json.Marshal(dst.AnnotationSourceManual)
		if string(jsonAnnotationSourceManual) == "{}" { // empty struct
			dst.AnnotationSourceManual = nil
		} else {
			if err = validator.Validate(dst.AnnotationSourceManual); err != nil {
				dst.AnnotationSourceManual = nil
			} else {
				match++
			}
		}
	} else {
		dst.AnnotationSourceManual = nil
	}

	// try to unmarshal data into AnnotationSourceMetrics
	err = newStrictDecoder(data).Decode(&dst.AnnotationSourceMetrics)
	if err == nil {
		jsonAnnotationSourceMetrics, _ := json.Marshal(dst.AnnotationSourceMetrics)
		if string(jsonAnnotationSourceMetrics) == "{}" { // empty struct
			dst.AnnotationSourceMetrics = nil
		} else {
			if err = validator.Validate(dst.AnnotationSourceMetrics); err != nil {
				dst.AnnotationSourceMetrics = nil
			} else {
				match++
			}
		}
	} else {
		dst.AnnotationSourceMetrics = nil
	}

	// try to unmarshal data into AnnotationSourceSpans
	err = newStrictDecoder(data).Decode(&dst.AnnotationSourceSpans)
	if err == nil {
		jsonAnnotationSourceSpans, _ := json.Marshal(dst.AnnotationSourceSpans)
		if string(jsonAnnotationSourceSpans) == "{}" { // empty struct
			dst.AnnotationSourceSpans = nil
		} else {
			if err = validator.Validate(dst.AnnotationSourceSpans); err != nil {
				dst.AnnotationSourceSpans = nil
			} else {
				match++
			}
		}
	} else {
		dst.AnnotationSourceSpans = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AnnotationSourceDataprime = nil
		dst.AnnotationSourceLogs = nil
		dst.AnnotationSourceManual = nil
		dst.AnnotationSourceMetrics = nil
		dst.AnnotationSourceSpans = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AnnotationSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AnnotationSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AnnotationSource) MarshalJSON() ([]byte, error) {
	if src.AnnotationSourceDataprime != nil {
		return json.Marshal(&src.AnnotationSourceDataprime)
	}

	if src.AnnotationSourceLogs != nil {
		return json.Marshal(&src.AnnotationSourceLogs)
	}

	if src.AnnotationSourceManual != nil {
		return json.Marshal(&src.AnnotationSourceManual)
	}

	if src.AnnotationSourceMetrics != nil {
		return json.Marshal(&src.AnnotationSourceMetrics)
	}

	if src.AnnotationSourceSpans != nil {
		return json.Marshal(&src.AnnotationSourceSpans)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AnnotationSource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AnnotationSourceDataprime != nil {
		return obj.AnnotationSourceDataprime
	}

	if obj.AnnotationSourceLogs != nil {
		return obj.AnnotationSourceLogs
	}

	if obj.AnnotationSourceManual != nil {
		return obj.AnnotationSourceManual
	}

	if obj.AnnotationSourceMetrics != nil {
		return obj.AnnotationSourceMetrics
	}

	if obj.AnnotationSourceSpans != nil {
		return obj.AnnotationSourceSpans
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj AnnotationSource) GetActualInstanceValue() (interface{}) {
	if obj.AnnotationSourceDataprime != nil {
		return *obj.AnnotationSourceDataprime
	}

	if obj.AnnotationSourceLogs != nil {
		return *obj.AnnotationSourceLogs
	}

	if obj.AnnotationSourceManual != nil {
		return *obj.AnnotationSourceManual
	}

	if obj.AnnotationSourceMetrics != nil {
		return *obj.AnnotationSourceMetrics
	}

	if obj.AnnotationSourceSpans != nil {
		return *obj.AnnotationSourceSpans
	}

	// all schemas are nil
	return nil
}

type NullableAnnotationSource struct {
	value *AnnotationSource
	isSet bool
}

func (v NullableAnnotationSource) Get() *AnnotationSource {
	return v.value
}

func (v *NullableAnnotationSource) Set(val *AnnotationSource) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnotationSource) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnotationSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnotationSource(val *AnnotationSource) *NullableAnnotationSource {
	return &NullableAnnotationSource{value: val, isSet: true}
}

func (v NullableAnnotationSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnotationSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


