/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// AnnotationSource - struct for AnnotationSource
type AnnotationSource struct {
	AnnotationSourceOneOf *AnnotationSourceOneOf
	AnnotationSourceOneOf1 *AnnotationSourceOneOf1
	AnnotationSourceOneOf2 *AnnotationSourceOneOf2
	AnnotationSourceOneOf3 *AnnotationSourceOneOf3
	AnnotationSourceOneOf4 *AnnotationSourceOneOf4
}

// AnnotationSourceOneOfAsAnnotationSource is a convenience function that returns AnnotationSourceOneOf wrapped in AnnotationSource
func AnnotationSourceOneOfAsAnnotationSource(v *AnnotationSourceOneOf) AnnotationSource {
	return AnnotationSource{
		AnnotationSourceOneOf: v,
	}
}

// AnnotationSourceOneOf1AsAnnotationSource is a convenience function that returns AnnotationSourceOneOf1 wrapped in AnnotationSource
func AnnotationSourceOneOf1AsAnnotationSource(v *AnnotationSourceOneOf1) AnnotationSource {
	return AnnotationSource{
		AnnotationSourceOneOf1: v,
	}
}

// AnnotationSourceOneOf2AsAnnotationSource is a convenience function that returns AnnotationSourceOneOf2 wrapped in AnnotationSource
func AnnotationSourceOneOf2AsAnnotationSource(v *AnnotationSourceOneOf2) AnnotationSource {
	return AnnotationSource{
		AnnotationSourceOneOf2: v,
	}
}

// AnnotationSourceOneOf3AsAnnotationSource is a convenience function that returns AnnotationSourceOneOf3 wrapped in AnnotationSource
func AnnotationSourceOneOf3AsAnnotationSource(v *AnnotationSourceOneOf3) AnnotationSource {
	return AnnotationSource{
		AnnotationSourceOneOf3: v,
	}
}

// AnnotationSourceOneOf4AsAnnotationSource is a convenience function that returns AnnotationSourceOneOf4 wrapped in AnnotationSource
func AnnotationSourceOneOf4AsAnnotationSource(v *AnnotationSourceOneOf4) AnnotationSource {
	return AnnotationSource{
		AnnotationSourceOneOf4: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AnnotationSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AnnotationSourceOneOf
	err = newStrictDecoder(data).Decode(&dst.AnnotationSourceOneOf)
	if err == nil {
		jsonAnnotationSourceOneOf, _ := json.Marshal(dst.AnnotationSourceOneOf)
		if string(jsonAnnotationSourceOneOf) == "{}" { // empty struct
			dst.AnnotationSourceOneOf = nil
		} else {
			if err = validator.Validate(dst.AnnotationSourceOneOf); err != nil {
				dst.AnnotationSourceOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.AnnotationSourceOneOf = nil
	}

	// try to unmarshal data into AnnotationSourceOneOf1
	err = newStrictDecoder(data).Decode(&dst.AnnotationSourceOneOf1)
	if err == nil {
		jsonAnnotationSourceOneOf1, _ := json.Marshal(dst.AnnotationSourceOneOf1)
		if string(jsonAnnotationSourceOneOf1) == "{}" { // empty struct
			dst.AnnotationSourceOneOf1 = nil
		} else {
			if err = validator.Validate(dst.AnnotationSourceOneOf1); err != nil {
				dst.AnnotationSourceOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AnnotationSourceOneOf1 = nil
	}

	// try to unmarshal data into AnnotationSourceOneOf2
	err = newStrictDecoder(data).Decode(&dst.AnnotationSourceOneOf2)
	if err == nil {
		jsonAnnotationSourceOneOf2, _ := json.Marshal(dst.AnnotationSourceOneOf2)
		if string(jsonAnnotationSourceOneOf2) == "{}" { // empty struct
			dst.AnnotationSourceOneOf2 = nil
		} else {
			if err = validator.Validate(dst.AnnotationSourceOneOf2); err != nil {
				dst.AnnotationSourceOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AnnotationSourceOneOf2 = nil
	}

	// try to unmarshal data into AnnotationSourceOneOf3
	err = newStrictDecoder(data).Decode(&dst.AnnotationSourceOneOf3)
	if err == nil {
		jsonAnnotationSourceOneOf3, _ := json.Marshal(dst.AnnotationSourceOneOf3)
		if string(jsonAnnotationSourceOneOf3) == "{}" { // empty struct
			dst.AnnotationSourceOneOf3 = nil
		} else {
			if err = validator.Validate(dst.AnnotationSourceOneOf3); err != nil {
				dst.AnnotationSourceOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AnnotationSourceOneOf3 = nil
	}

	// try to unmarshal data into AnnotationSourceOneOf4
	err = newStrictDecoder(data).Decode(&dst.AnnotationSourceOneOf4)
	if err == nil {
		jsonAnnotationSourceOneOf4, _ := json.Marshal(dst.AnnotationSourceOneOf4)
		if string(jsonAnnotationSourceOneOf4) == "{}" { // empty struct
			dst.AnnotationSourceOneOf4 = nil
		} else {
			if err = validator.Validate(dst.AnnotationSourceOneOf4); err != nil {
				dst.AnnotationSourceOneOf4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AnnotationSourceOneOf4 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AnnotationSourceOneOf = nil
		dst.AnnotationSourceOneOf1 = nil
		dst.AnnotationSourceOneOf2 = nil
		dst.AnnotationSourceOneOf3 = nil
		dst.AnnotationSourceOneOf4 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AnnotationSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AnnotationSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AnnotationSource) MarshalJSON() ([]byte, error) {
	if src.AnnotationSourceOneOf != nil {
		return json.Marshal(&src.AnnotationSourceOneOf)
	}

	if src.AnnotationSourceOneOf1 != nil {
		return json.Marshal(&src.AnnotationSourceOneOf1)
	}

	if src.AnnotationSourceOneOf2 != nil {
		return json.Marshal(&src.AnnotationSourceOneOf2)
	}

	if src.AnnotationSourceOneOf3 != nil {
		return json.Marshal(&src.AnnotationSourceOneOf3)
	}

	if src.AnnotationSourceOneOf4 != nil {
		return json.Marshal(&src.AnnotationSourceOneOf4)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AnnotationSource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AnnotationSourceOneOf != nil {
		return obj.AnnotationSourceOneOf
	}

	if obj.AnnotationSourceOneOf1 != nil {
		return obj.AnnotationSourceOneOf1
	}

	if obj.AnnotationSourceOneOf2 != nil {
		return obj.AnnotationSourceOneOf2
	}

	if obj.AnnotationSourceOneOf3 != nil {
		return obj.AnnotationSourceOneOf3
	}

	if obj.AnnotationSourceOneOf4 != nil {
		return obj.AnnotationSourceOneOf4
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj AnnotationSource) GetActualInstanceValue() (interface{}) {
	if obj.AnnotationSourceOneOf != nil {
		return *obj.AnnotationSourceOneOf
	}

	if obj.AnnotationSourceOneOf1 != nil {
		return *obj.AnnotationSourceOneOf1
	}

	if obj.AnnotationSourceOneOf2 != nil {
		return *obj.AnnotationSourceOneOf2
	}

	if obj.AnnotationSourceOneOf3 != nil {
		return *obj.AnnotationSourceOneOf3
	}

	if obj.AnnotationSourceOneOf4 != nil {
		return *obj.AnnotationSourceOneOf4
	}

	// all schemas are nil
	return nil
}

type NullableAnnotationSource struct {
	value *AnnotationSource
	isSet bool
}

func (v NullableAnnotationSource) Get() *AnnotationSource {
	return v.value
}

func (v *NullableAnnotationSource) Set(val *AnnotationSource) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnotationSource) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnotationSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnotationSource(val *AnnotationSource) *NullableAnnotationSource {
	return &NullableAnnotationSource{value: val, isSet: true}
}

func (v NullableAnnotationSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnotationSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


