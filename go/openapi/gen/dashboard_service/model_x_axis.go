/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// XAxis - struct for XAxis
type XAxis struct {
	XAxisOneOf *XAxisOneOf
	XAxisOneOf1 *XAxisOneOf1
}

// XAxisOneOfAsXAxis is a convenience function that returns XAxisOneOf wrapped in XAxis
func XAxisOneOfAsXAxis(v *XAxisOneOf) XAxis {
	return XAxis{
		XAxisOneOf: v,
	}
}

// XAxisOneOf1AsXAxis is a convenience function that returns XAxisOneOf1 wrapped in XAxis
func XAxisOneOf1AsXAxis(v *XAxisOneOf1) XAxis {
	return XAxis{
		XAxisOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *XAxis) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into XAxisOneOf
	err = newStrictDecoder(data).Decode(&dst.XAxisOneOf)
	if err == nil {
		jsonXAxisOneOf, _ := json.Marshal(dst.XAxisOneOf)
		if string(jsonXAxisOneOf) == "{}" { // empty struct
			dst.XAxisOneOf = nil
		} else {
			if err = validator.Validate(dst.XAxisOneOf); err != nil {
				dst.XAxisOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.XAxisOneOf = nil
	}

	// try to unmarshal data into XAxisOneOf1
	err = newStrictDecoder(data).Decode(&dst.XAxisOneOf1)
	if err == nil {
		jsonXAxisOneOf1, _ := json.Marshal(dst.XAxisOneOf1)
		if string(jsonXAxisOneOf1) == "{}" { // empty struct
			dst.XAxisOneOf1 = nil
		} else {
			if err = validator.Validate(dst.XAxisOneOf1); err != nil {
				dst.XAxisOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.XAxisOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.XAxisOneOf = nil
		dst.XAxisOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(XAxis)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(XAxis)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src XAxis) MarshalJSON() ([]byte, error) {
	if src.XAxisOneOf != nil {
		return json.Marshal(&src.XAxisOneOf)
	}

	if src.XAxisOneOf1 != nil {
		return json.Marshal(&src.XAxisOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *XAxis) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.XAxisOneOf != nil {
		return obj.XAxisOneOf
	}

	if obj.XAxisOneOf1 != nil {
		return obj.XAxisOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj XAxis) GetActualInstanceValue() (interface{}) {
	if obj.XAxisOneOf != nil {
		return *obj.XAxisOneOf
	}

	if obj.XAxisOneOf1 != nil {
		return *obj.XAxisOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableXAxis struct {
	value *XAxis
	isSet bool
}

func (v NullableXAxis) Get() *XAxis {
	return v.value
}

func (v *NullableXAxis) Set(val *XAxis) {
	v.value = val
	v.isSet = true
}

func (v NullableXAxis) IsSet() bool {
	return v.isSet
}

func (v *NullableXAxis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableXAxis(val *XAxis) *NullableXAxis {
	return &NullableXAxis{value: val, isSet: true}
}

func (v NullableXAxis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableXAxis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


