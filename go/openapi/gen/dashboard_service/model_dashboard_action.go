/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the DashboardAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DashboardAction{}

// DashboardAction Public actions that are always available within specific dashboard's context.
type DashboardAction struct {
	DataSource *ActionDataSourceType `json:"dataSource,omitempty"`
	Definition *ActionDefinition `json:"definition,omitempty"`
	// A unique identifier of the action
	Id *string `json:"id,omitempty"`
	// The display name of the action
	Name *string `json:"name,omitempty"`
	// Defines if the action should open in a new window or current window in the browser
	ShouldOpenInNewWindow *bool `json:"shouldOpenInNewWindow,omitempty"`
	// Reference to specific widget within a dashboard, can be null if the action is dashboard wide
	WidgetId *string `json:"widgetId,omitempty"`
}

// NewDashboardAction instantiates a new DashboardAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardAction() *DashboardAction {
	this := DashboardAction{}
	return &this
}

// NewDashboardActionWithDefaults instantiates a new DashboardAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardActionWithDefaults() *DashboardAction {
	this := DashboardAction{}
	return &this
}

// GetDataSource returns the DataSource field value if set, zero value otherwise.
func (o *DashboardAction) GetDataSource() ActionDataSourceType {
	if o == nil || IsNil(o.DataSource) {
		var ret ActionDataSourceType
		return ret
	}
	return *o.DataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardAction) GetDataSourceOk() (*ActionDataSourceType, bool) {
	if o == nil || IsNil(o.DataSource) {
		return nil, false
	}
	return o.DataSource, true
}

// HasDataSource returns a boolean if a field has been set.
func (o *DashboardAction) HasDataSource() bool {
	if o != nil && !IsNil(o.DataSource) {
		return true
	}

	return false
}

// SetDataSource gets a reference to the given ActionDataSourceType and assigns it to the DataSource field.
func (o *DashboardAction) SetDataSource(v ActionDataSourceType) {
	o.DataSource = &v
}

// GetDefinition returns the Definition field value if set, zero value otherwise.
func (o *DashboardAction) GetDefinition() ActionDefinition {
	if o == nil || IsNil(o.Definition) {
		var ret ActionDefinition
		return ret
	}
	return *o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardAction) GetDefinitionOk() (*ActionDefinition, bool) {
	if o == nil || IsNil(o.Definition) {
		return nil, false
	}
	return o.Definition, true
}

// HasDefinition returns a boolean if a field has been set.
func (o *DashboardAction) HasDefinition() bool {
	if o != nil && !IsNil(o.Definition) {
		return true
	}

	return false
}

// SetDefinition gets a reference to the given ActionDefinition and assigns it to the Definition field.
func (o *DashboardAction) SetDefinition(v ActionDefinition) {
	o.Definition = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DashboardAction) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardAction) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DashboardAction) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DashboardAction) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DashboardAction) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardAction) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DashboardAction) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DashboardAction) SetName(v string) {
	o.Name = &v
}

// GetShouldOpenInNewWindow returns the ShouldOpenInNewWindow field value if set, zero value otherwise.
func (o *DashboardAction) GetShouldOpenInNewWindow() bool {
	if o == nil || IsNil(o.ShouldOpenInNewWindow) {
		var ret bool
		return ret
	}
	return *o.ShouldOpenInNewWindow
}

// GetShouldOpenInNewWindowOk returns a tuple with the ShouldOpenInNewWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardAction) GetShouldOpenInNewWindowOk() (*bool, bool) {
	if o == nil || IsNil(o.ShouldOpenInNewWindow) {
		return nil, false
	}
	return o.ShouldOpenInNewWindow, true
}

// HasShouldOpenInNewWindow returns a boolean if a field has been set.
func (o *DashboardAction) HasShouldOpenInNewWindow() bool {
	if o != nil && !IsNil(o.ShouldOpenInNewWindow) {
		return true
	}

	return false
}

// SetShouldOpenInNewWindow gets a reference to the given bool and assigns it to the ShouldOpenInNewWindow field.
func (o *DashboardAction) SetShouldOpenInNewWindow(v bool) {
	o.ShouldOpenInNewWindow = &v
}

// GetWidgetId returns the WidgetId field value if set, zero value otherwise.
func (o *DashboardAction) GetWidgetId() string {
	if o == nil || IsNil(o.WidgetId) {
		var ret string
		return ret
	}
	return *o.WidgetId
}

// GetWidgetIdOk returns a tuple with the WidgetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardAction) GetWidgetIdOk() (*string, bool) {
	if o == nil || IsNil(o.WidgetId) {
		return nil, false
	}
	return o.WidgetId, true
}

// HasWidgetId returns a boolean if a field has been set.
func (o *DashboardAction) HasWidgetId() bool {
	if o != nil && !IsNil(o.WidgetId) {
		return true
	}

	return false
}

// SetWidgetId gets a reference to the given string and assigns it to the WidgetId field.
func (o *DashboardAction) SetWidgetId(v string) {
	o.WidgetId = &v
}

func (o DashboardAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DashboardAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataSource) {
		toSerialize["dataSource"] = o.DataSource
	}
	if !IsNil(o.Definition) {
		toSerialize["definition"] = o.Definition
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ShouldOpenInNewWindow) {
		toSerialize["shouldOpenInNewWindow"] = o.ShouldOpenInNewWindow
	}
	if !IsNil(o.WidgetId) {
		toSerialize["widgetId"] = o.WidgetId
	}
	return toSerialize, nil
}

type NullableDashboardAction struct {
	value *DashboardAction
	isSet bool
}

func (v NullableDashboardAction) Get() *DashboardAction {
	return v.value
}

func (v *NullableDashboardAction) Set(val *DashboardAction) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardAction) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardAction(val *DashboardAction) *NullableDashboardAction {
	return &NullableDashboardAction{value: val, isSet: true}
}

func (v NullableDashboardAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


