/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SpansSourceStrategy - struct for SpansSourceStrategy
type SpansSourceStrategy struct {
	SpansSourceStrategyDuration *SpansSourceStrategyDuration
	SpansSourceStrategyInstant *SpansSourceStrategyInstant
	SpansSourceStrategyRange *SpansSourceStrategyRange
}

// SpansSourceStrategyDurationAsSpansSourceStrategy is a convenience function that returns SpansSourceStrategyDuration wrapped in SpansSourceStrategy
func SpansSourceStrategyDurationAsSpansSourceStrategy(v *SpansSourceStrategyDuration) SpansSourceStrategy {
	return SpansSourceStrategy{
		SpansSourceStrategyDuration: v,
	}
}

// SpansSourceStrategyInstantAsSpansSourceStrategy is a convenience function that returns SpansSourceStrategyInstant wrapped in SpansSourceStrategy
func SpansSourceStrategyInstantAsSpansSourceStrategy(v *SpansSourceStrategyInstant) SpansSourceStrategy {
	return SpansSourceStrategy{
		SpansSourceStrategyInstant: v,
	}
}

// SpansSourceStrategyRangeAsSpansSourceStrategy is a convenience function that returns SpansSourceStrategyRange wrapped in SpansSourceStrategy
func SpansSourceStrategyRangeAsSpansSourceStrategy(v *SpansSourceStrategyRange) SpansSourceStrategy {
	return SpansSourceStrategy{
		SpansSourceStrategyRange: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SpansSourceStrategy) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SpansSourceStrategyDuration
	err = newStrictDecoder(data).Decode(&dst.SpansSourceStrategyDuration)
	if err == nil {
		jsonSpansSourceStrategyDuration, _ := json.Marshal(dst.SpansSourceStrategyDuration)
		if string(jsonSpansSourceStrategyDuration) == "{}" { // empty struct
			dst.SpansSourceStrategyDuration = nil
		} else {
			if err = validator.Validate(dst.SpansSourceStrategyDuration); err != nil {
				dst.SpansSourceStrategyDuration = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpansSourceStrategyDuration = nil
	}

	// try to unmarshal data into SpansSourceStrategyInstant
	err = newStrictDecoder(data).Decode(&dst.SpansSourceStrategyInstant)
	if err == nil {
		jsonSpansSourceStrategyInstant, _ := json.Marshal(dst.SpansSourceStrategyInstant)
		if string(jsonSpansSourceStrategyInstant) == "{}" { // empty struct
			dst.SpansSourceStrategyInstant = nil
		} else {
			if err = validator.Validate(dst.SpansSourceStrategyInstant); err != nil {
				dst.SpansSourceStrategyInstant = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpansSourceStrategyInstant = nil
	}

	// try to unmarshal data into SpansSourceStrategyRange
	err = newStrictDecoder(data).Decode(&dst.SpansSourceStrategyRange)
	if err == nil {
		jsonSpansSourceStrategyRange, _ := json.Marshal(dst.SpansSourceStrategyRange)
		if string(jsonSpansSourceStrategyRange) == "{}" { // empty struct
			dst.SpansSourceStrategyRange = nil
		} else {
			if err = validator.Validate(dst.SpansSourceStrategyRange); err != nil {
				dst.SpansSourceStrategyRange = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpansSourceStrategyRange = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SpansSourceStrategyDuration = nil
		dst.SpansSourceStrategyInstant = nil
		dst.SpansSourceStrategyRange = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SpansSourceStrategy)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SpansSourceStrategy)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SpansSourceStrategy) MarshalJSON() ([]byte, error) {
	if src.SpansSourceStrategyDuration != nil {
		return json.Marshal(&src.SpansSourceStrategyDuration)
	}

	if src.SpansSourceStrategyInstant != nil {
		return json.Marshal(&src.SpansSourceStrategyInstant)
	}

	if src.SpansSourceStrategyRange != nil {
		return json.Marshal(&src.SpansSourceStrategyRange)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SpansSourceStrategy) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SpansSourceStrategyDuration != nil {
		return obj.SpansSourceStrategyDuration
	}

	if obj.SpansSourceStrategyInstant != nil {
		return obj.SpansSourceStrategyInstant
	}

	if obj.SpansSourceStrategyRange != nil {
		return obj.SpansSourceStrategyRange
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SpansSourceStrategy) GetActualInstanceValue() (interface{}) {
	if obj.SpansSourceStrategyDuration != nil {
		return *obj.SpansSourceStrategyDuration
	}

	if obj.SpansSourceStrategyInstant != nil {
		return *obj.SpansSourceStrategyInstant
	}

	if obj.SpansSourceStrategyRange != nil {
		return *obj.SpansSourceStrategyRange
	}

	// all schemas are nil
	return nil
}

type NullableSpansSourceStrategy struct {
	value *SpansSourceStrategy
	isSet bool
}

func (v NullableSpansSourceStrategy) Get() *SpansSourceStrategy {
	return v.value
}

func (v *NullableSpansSourceStrategy) Set(val *SpansSourceStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableSpansSourceStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableSpansSourceStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpansSourceStrategy(val *SpansSourceStrategy) *NullableSpansSourceStrategy {
	return &NullableSpansSourceStrategy{value: val, isSet: true}
}

func (v NullableSpansSourceStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpansSourceStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


