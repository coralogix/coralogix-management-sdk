/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the AllOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllOption{}

// AllOption struct for AllOption
type AllOption struct {
	IncludeAll *bool `json:"includeAll,omitempty"`
	Label *string `json:"label,omitempty"`
}

// NewAllOption instantiates a new AllOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllOption() *AllOption {
	this := AllOption{}
	return &this
}

// NewAllOptionWithDefaults instantiates a new AllOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllOptionWithDefaults() *AllOption {
	this := AllOption{}
	return &this
}

// GetIncludeAll returns the IncludeAll field value if set, zero value otherwise.
func (o *AllOption) GetIncludeAll() bool {
	if o == nil || IsNil(o.IncludeAll) {
		var ret bool
		return ret
	}
	return *o.IncludeAll
}

// GetIncludeAllOk returns a tuple with the IncludeAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllOption) GetIncludeAllOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeAll) {
		return nil, false
	}
	return o.IncludeAll, true
}

// HasIncludeAll returns a boolean if a field has been set.
func (o *AllOption) HasIncludeAll() bool {
	if o != nil && !IsNil(o.IncludeAll) {
		return true
	}

	return false
}

// SetIncludeAll gets a reference to the given bool and assigns it to the IncludeAll field.
func (o *AllOption) SetIncludeAll(v bool) {
	o.IncludeAll = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *AllOption) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllOption) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *AllOption) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *AllOption) SetLabel(v string) {
	o.Label = &v
}

func (o AllOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IncludeAll) {
		toSerialize["includeAll"] = o.IncludeAll
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	return toSerialize, nil
}

type NullableAllOption struct {
	value *AllOption
	isSet bool
}

func (v NullableAllOption) Get() *AllOption {
	return v.value
}

func (v *NullableAllOption) Set(val *AllOption) {
	v.value = val
	v.isSet = true
}

func (v NullableAllOption) IsSet() bool {
	return v.isSet
}

func (v *NullableAllOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllOption(val *AllOption) *NullableAllOption {
	return &NullableAllOption{value: val, isSet: true}
}

func (v NullableAllOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


