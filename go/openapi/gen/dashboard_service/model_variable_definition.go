/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// VariableDefinition - struct for VariableDefinition
type VariableDefinition struct {
	VariableDefinitionOneOf *VariableDefinitionOneOf
	VariableDefinitionOneOf1 *VariableDefinitionOneOf1
}

// VariableDefinitionOneOfAsVariableDefinition is a convenience function that returns VariableDefinitionOneOf wrapped in VariableDefinition
func VariableDefinitionOneOfAsVariableDefinition(v *VariableDefinitionOneOf) VariableDefinition {
	return VariableDefinition{
		VariableDefinitionOneOf: v,
	}
}

// VariableDefinitionOneOf1AsVariableDefinition is a convenience function that returns VariableDefinitionOneOf1 wrapped in VariableDefinition
func VariableDefinitionOneOf1AsVariableDefinition(v *VariableDefinitionOneOf1) VariableDefinition {
	return VariableDefinition{
		VariableDefinitionOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *VariableDefinition) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into VariableDefinitionOneOf
	err = newStrictDecoder(data).Decode(&dst.VariableDefinitionOneOf)
	if err == nil {
		jsonVariableDefinitionOneOf, _ := json.Marshal(dst.VariableDefinitionOneOf)
		if string(jsonVariableDefinitionOneOf) == "{}" { // empty struct
			dst.VariableDefinitionOneOf = nil
		} else {
			if err = validator.Validate(dst.VariableDefinitionOneOf); err != nil {
				dst.VariableDefinitionOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableDefinitionOneOf = nil
	}

	// try to unmarshal data into VariableDefinitionOneOf1
	err = newStrictDecoder(data).Decode(&dst.VariableDefinitionOneOf1)
	if err == nil {
		jsonVariableDefinitionOneOf1, _ := json.Marshal(dst.VariableDefinitionOneOf1)
		if string(jsonVariableDefinitionOneOf1) == "{}" { // empty struct
			dst.VariableDefinitionOneOf1 = nil
		} else {
			if err = validator.Validate(dst.VariableDefinitionOneOf1); err != nil {
				dst.VariableDefinitionOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableDefinitionOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.VariableDefinitionOneOf = nil
		dst.VariableDefinitionOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(VariableDefinition)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(VariableDefinition)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src VariableDefinition) MarshalJSON() ([]byte, error) {
	if src.VariableDefinitionOneOf != nil {
		return json.Marshal(&src.VariableDefinitionOneOf)
	}

	if src.VariableDefinitionOneOf1 != nil {
		return json.Marshal(&src.VariableDefinitionOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *VariableDefinition) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.VariableDefinitionOneOf != nil {
		return obj.VariableDefinitionOneOf
	}

	if obj.VariableDefinitionOneOf1 != nil {
		return obj.VariableDefinitionOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj VariableDefinition) GetActualInstanceValue() (interface{}) {
	if obj.VariableDefinitionOneOf != nil {
		return *obj.VariableDefinitionOneOf
	}

	if obj.VariableDefinitionOneOf1 != nil {
		return *obj.VariableDefinitionOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableVariableDefinition struct {
	value *VariableDefinition
	isSet bool
}

func (v NullableVariableDefinition) Get() *VariableDefinition {
	return v.value
}

func (v *NullableVariableDefinition) Set(val *VariableDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableDefinition(val *VariableDefinition) *NullableVariableDefinition {
	return &NullableVariableDefinition{value: val, isSet: true}
}

func (v NullableVariableDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


