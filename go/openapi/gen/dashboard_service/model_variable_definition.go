/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// VariableDefinition - struct for VariableDefinition
type VariableDefinition struct {
	DefinitionConstant *DefinitionConstant
	DefinitionMultiSelect *DefinitionMultiSelect
}

// DefinitionConstantAsVariableDefinition is a convenience function that returns DefinitionConstant wrapped in VariableDefinition
func DefinitionConstantAsVariableDefinition(v *DefinitionConstant) VariableDefinition {
	return VariableDefinition{
		DefinitionConstant: v,
	}
}

// DefinitionMultiSelectAsVariableDefinition is a convenience function that returns DefinitionMultiSelect wrapped in VariableDefinition
func DefinitionMultiSelectAsVariableDefinition(v *DefinitionMultiSelect) VariableDefinition {
	return VariableDefinition{
		DefinitionMultiSelect: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *VariableDefinition) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DefinitionConstant
	err = newStrictDecoder(data).Decode(&dst.DefinitionConstant)
	if err == nil {
		jsonDefinitionConstant, _ := json.Marshal(dst.DefinitionConstant)
		if string(jsonDefinitionConstant) == "{}" { // empty struct
			dst.DefinitionConstant = nil
		} else {
			if err = validator.Validate(dst.DefinitionConstant); err != nil {
				dst.DefinitionConstant = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefinitionConstant = nil
	}

	// try to unmarshal data into DefinitionMultiSelect
	err = newStrictDecoder(data).Decode(&dst.DefinitionMultiSelect)
	if err == nil {
		jsonDefinitionMultiSelect, _ := json.Marshal(dst.DefinitionMultiSelect)
		if string(jsonDefinitionMultiSelect) == "{}" { // empty struct
			dst.DefinitionMultiSelect = nil
		} else {
			if err = validator.Validate(dst.DefinitionMultiSelect); err != nil {
				dst.DefinitionMultiSelect = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefinitionMultiSelect = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DefinitionConstant = nil
		dst.DefinitionMultiSelect = nil

		return fmt.Errorf("data matches more than one schema in oneOf(VariableDefinition)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(VariableDefinition)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src VariableDefinition) MarshalJSON() ([]byte, error) {
	if src.DefinitionConstant != nil {
		return json.Marshal(&src.DefinitionConstant)
	}

	if src.DefinitionMultiSelect != nil {
		return json.Marshal(&src.DefinitionMultiSelect)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *VariableDefinition) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DefinitionConstant != nil {
		return obj.DefinitionConstant
	}

	if obj.DefinitionMultiSelect != nil {
		return obj.DefinitionMultiSelect
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj VariableDefinition) GetActualInstanceValue() (interface{}) {
	if obj.DefinitionConstant != nil {
		return *obj.DefinitionConstant
	}

	if obj.DefinitionMultiSelect != nil {
		return *obj.DefinitionMultiSelect
	}

	// all schemas are nil
	return nil
}

type NullableVariableDefinition struct {
	value *VariableDefinition
	isSet bool
}

func (v NullableVariableDefinition) Get() *VariableDefinition {
	return v.value
}

func (v *NullableVariableDefinition) Set(val *VariableDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableDefinition(val *VariableDefinition) *NullableVariableDefinition {
	return &NullableVariableDefinition{value: val, isSet: true}
}

func (v NullableVariableDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


