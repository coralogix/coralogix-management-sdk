/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// VariableDefinition - struct for VariableDefinition
type VariableDefinition struct {
	VariableDefinitionConstant *VariableDefinitionConstant
	VariableDefinitionMultiSelect *VariableDefinitionMultiSelect
}

// VariableDefinitionConstantAsVariableDefinition is a convenience function that returns VariableDefinitionConstant wrapped in VariableDefinition
func VariableDefinitionConstantAsVariableDefinition(v *VariableDefinitionConstant) VariableDefinition {
	return VariableDefinition{
		VariableDefinitionConstant: v,
	}
}

// VariableDefinitionMultiSelectAsVariableDefinition is a convenience function that returns VariableDefinitionMultiSelect wrapped in VariableDefinition
func VariableDefinitionMultiSelectAsVariableDefinition(v *VariableDefinitionMultiSelect) VariableDefinition {
	return VariableDefinition{
		VariableDefinitionMultiSelect: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *VariableDefinition) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into VariableDefinitionConstant
	err = newStrictDecoder(data).Decode(&dst.VariableDefinitionConstant)
	if err == nil {
		jsonVariableDefinitionConstant, _ := json.Marshal(dst.VariableDefinitionConstant)
		if string(jsonVariableDefinitionConstant) == "{}" { // empty struct
			dst.VariableDefinitionConstant = nil
		} else {
			if err = validator.Validate(dst.VariableDefinitionConstant); err != nil {
				dst.VariableDefinitionConstant = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableDefinitionConstant = nil
	}

	// try to unmarshal data into VariableDefinitionMultiSelect
	err = newStrictDecoder(data).Decode(&dst.VariableDefinitionMultiSelect)
	if err == nil {
		jsonVariableDefinitionMultiSelect, _ := json.Marshal(dst.VariableDefinitionMultiSelect)
		if string(jsonVariableDefinitionMultiSelect) == "{}" { // empty struct
			dst.VariableDefinitionMultiSelect = nil
		} else {
			if err = validator.Validate(dst.VariableDefinitionMultiSelect); err != nil {
				dst.VariableDefinitionMultiSelect = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableDefinitionMultiSelect = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.VariableDefinitionConstant = nil
		dst.VariableDefinitionMultiSelect = nil

		return fmt.Errorf("data matches more than one schema in oneOf(VariableDefinition)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(VariableDefinition)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src VariableDefinition) MarshalJSON() ([]byte, error) {
	if src.VariableDefinitionConstant != nil {
		return json.Marshal(&src.VariableDefinitionConstant)
	}

	if src.VariableDefinitionMultiSelect != nil {
		return json.Marshal(&src.VariableDefinitionMultiSelect)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *VariableDefinition) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.VariableDefinitionConstant != nil {
		return obj.VariableDefinitionConstant
	}

	if obj.VariableDefinitionMultiSelect != nil {
		return obj.VariableDefinitionMultiSelect
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj VariableDefinition) GetActualInstanceValue() (interface{}) {
	if obj.VariableDefinitionConstant != nil {
		return *obj.VariableDefinitionConstant
	}

	if obj.VariableDefinitionMultiSelect != nil {
		return *obj.VariableDefinitionMultiSelect
	}

	// all schemas are nil
	return nil
}

type NullableVariableDefinition struct {
	value *VariableDefinition
	isSet bool
}

func (v NullableVariableDefinition) Get() *VariableDefinition {
	return v.value
}

func (v *NullableVariableDefinition) Set(val *VariableDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableDefinition(val *VariableDefinition) *NullableVariableDefinition {
	return &NullableVariableDefinition{value: val, isSet: true}
}

func (v NullableVariableDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


