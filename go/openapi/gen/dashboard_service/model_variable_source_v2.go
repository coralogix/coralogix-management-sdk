/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// VariableSourceV2 - struct for VariableSourceV2
type VariableSourceV2 struct {
	VariableSourceV2Query *VariableSourceV2Query
	VariableSourceV2Static *VariableSourceV2Static
	VariableSourceV2Textbox *VariableSourceV2Textbox
}

// VariableSourceV2QueryAsVariableSourceV2 is a convenience function that returns VariableSourceV2Query wrapped in VariableSourceV2
func VariableSourceV2QueryAsVariableSourceV2(v *VariableSourceV2Query) VariableSourceV2 {
	return VariableSourceV2{
		VariableSourceV2Query: v,
	}
}

// VariableSourceV2StaticAsVariableSourceV2 is a convenience function that returns VariableSourceV2Static wrapped in VariableSourceV2
func VariableSourceV2StaticAsVariableSourceV2(v *VariableSourceV2Static) VariableSourceV2 {
	return VariableSourceV2{
		VariableSourceV2Static: v,
	}
}

// VariableSourceV2TextboxAsVariableSourceV2 is a convenience function that returns VariableSourceV2Textbox wrapped in VariableSourceV2
func VariableSourceV2TextboxAsVariableSourceV2(v *VariableSourceV2Textbox) VariableSourceV2 {
	return VariableSourceV2{
		VariableSourceV2Textbox: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *VariableSourceV2) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into VariableSourceV2Query
	err = newStrictDecoder(data).Decode(&dst.VariableSourceV2Query)
	if err == nil {
		jsonVariableSourceV2Query, _ := json.Marshal(dst.VariableSourceV2Query)
		if string(jsonVariableSourceV2Query) == "{}" { // empty struct
			dst.VariableSourceV2Query = nil
		} else {
			if err = validator.Validate(dst.VariableSourceV2Query); err != nil {
				dst.VariableSourceV2Query = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableSourceV2Query = nil
	}

	// try to unmarshal data into VariableSourceV2Static
	err = newStrictDecoder(data).Decode(&dst.VariableSourceV2Static)
	if err == nil {
		jsonVariableSourceV2Static, _ := json.Marshal(dst.VariableSourceV2Static)
		if string(jsonVariableSourceV2Static) == "{}" { // empty struct
			dst.VariableSourceV2Static = nil
		} else {
			if err = validator.Validate(dst.VariableSourceV2Static); err != nil {
				dst.VariableSourceV2Static = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableSourceV2Static = nil
	}

	// try to unmarshal data into VariableSourceV2Textbox
	err = newStrictDecoder(data).Decode(&dst.VariableSourceV2Textbox)
	if err == nil {
		jsonVariableSourceV2Textbox, _ := json.Marshal(dst.VariableSourceV2Textbox)
		if string(jsonVariableSourceV2Textbox) == "{}" { // empty struct
			dst.VariableSourceV2Textbox = nil
		} else {
			if err = validator.Validate(dst.VariableSourceV2Textbox); err != nil {
				dst.VariableSourceV2Textbox = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableSourceV2Textbox = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.VariableSourceV2Query = nil
		dst.VariableSourceV2Static = nil
		dst.VariableSourceV2Textbox = nil

		return fmt.Errorf("data matches more than one schema in oneOf(VariableSourceV2)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(VariableSourceV2)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src VariableSourceV2) MarshalJSON() ([]byte, error) {
	if src.VariableSourceV2Query != nil {
		return json.Marshal(&src.VariableSourceV2Query)
	}

	if src.VariableSourceV2Static != nil {
		return json.Marshal(&src.VariableSourceV2Static)
	}

	if src.VariableSourceV2Textbox != nil {
		return json.Marshal(&src.VariableSourceV2Textbox)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *VariableSourceV2) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.VariableSourceV2Query != nil {
		return obj.VariableSourceV2Query
	}

	if obj.VariableSourceV2Static != nil {
		return obj.VariableSourceV2Static
	}

	if obj.VariableSourceV2Textbox != nil {
		return obj.VariableSourceV2Textbox
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj VariableSourceV2) GetActualInstanceValue() (interface{}) {
	if obj.VariableSourceV2Query != nil {
		return *obj.VariableSourceV2Query
	}

	if obj.VariableSourceV2Static != nil {
		return *obj.VariableSourceV2Static
	}

	if obj.VariableSourceV2Textbox != nil {
		return *obj.VariableSourceV2Textbox
	}

	// all schemas are nil
	return nil
}

type NullableVariableSourceV2 struct {
	value *VariableSourceV2
	isSet bool
}

func (v NullableVariableSourceV2) Get() *VariableSourceV2 {
	return v.value
}

func (v *NullableVariableSourceV2) Set(val *VariableSourceV2) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableSourceV2) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableSourceV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableSourceV2(val *VariableSourceV2) *NullableVariableSourceV2 {
	return &NullableVariableSourceV2{value: val, isSet: true}
}

func (v NullableVariableSourceV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableSourceV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


