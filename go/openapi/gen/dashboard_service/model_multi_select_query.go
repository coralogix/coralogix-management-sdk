/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// MultiSelectQuery - struct for MultiSelectQuery
type MultiSelectQuery struct {
	MultiSelectQueryLogsQuery *MultiSelectQueryLogsQuery
	MultiSelectQueryMetricsQuery *MultiSelectQueryMetricsQuery
	MultiSelectQuerySpansQuery *MultiSelectQuerySpansQuery
}

// MultiSelectQueryLogsQueryAsMultiSelectQuery is a convenience function that returns MultiSelectQueryLogsQuery wrapped in MultiSelectQuery
func MultiSelectQueryLogsQueryAsMultiSelectQuery(v *MultiSelectQueryLogsQuery) MultiSelectQuery {
	return MultiSelectQuery{
		MultiSelectQueryLogsQuery: v,
	}
}

// MultiSelectQueryMetricsQueryAsMultiSelectQuery is a convenience function that returns MultiSelectQueryMetricsQuery wrapped in MultiSelectQuery
func MultiSelectQueryMetricsQueryAsMultiSelectQuery(v *MultiSelectQueryMetricsQuery) MultiSelectQuery {
	return MultiSelectQuery{
		MultiSelectQueryMetricsQuery: v,
	}
}

// MultiSelectQuerySpansQueryAsMultiSelectQuery is a convenience function that returns MultiSelectQuerySpansQuery wrapped in MultiSelectQuery
func MultiSelectQuerySpansQueryAsMultiSelectQuery(v *MultiSelectQuerySpansQuery) MultiSelectQuery {
	return MultiSelectQuery{
		MultiSelectQuerySpansQuery: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MultiSelectQuery) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MultiSelectQueryLogsQuery
	err = newStrictDecoder(data).Decode(&dst.MultiSelectQueryLogsQuery)
	if err == nil {
		jsonMultiSelectQueryLogsQuery, _ := json.Marshal(dst.MultiSelectQueryLogsQuery)
		if string(jsonMultiSelectQueryLogsQuery) == "{}" { // empty struct
			dst.MultiSelectQueryLogsQuery = nil
		} else {
			if err = validator.Validate(dst.MultiSelectQueryLogsQuery); err != nil {
				dst.MultiSelectQueryLogsQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultiSelectQueryLogsQuery = nil
	}

	// try to unmarshal data into MultiSelectQueryMetricsQuery
	err = newStrictDecoder(data).Decode(&dst.MultiSelectQueryMetricsQuery)
	if err == nil {
		jsonMultiSelectQueryMetricsQuery, _ := json.Marshal(dst.MultiSelectQueryMetricsQuery)
		if string(jsonMultiSelectQueryMetricsQuery) == "{}" { // empty struct
			dst.MultiSelectQueryMetricsQuery = nil
		} else {
			if err = validator.Validate(dst.MultiSelectQueryMetricsQuery); err != nil {
				dst.MultiSelectQueryMetricsQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultiSelectQueryMetricsQuery = nil
	}

	// try to unmarshal data into MultiSelectQuerySpansQuery
	err = newStrictDecoder(data).Decode(&dst.MultiSelectQuerySpansQuery)
	if err == nil {
		jsonMultiSelectQuerySpansQuery, _ := json.Marshal(dst.MultiSelectQuerySpansQuery)
		if string(jsonMultiSelectQuerySpansQuery) == "{}" { // empty struct
			dst.MultiSelectQuerySpansQuery = nil
		} else {
			if err = validator.Validate(dst.MultiSelectQuerySpansQuery); err != nil {
				dst.MultiSelectQuerySpansQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultiSelectQuerySpansQuery = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MultiSelectQueryLogsQuery = nil
		dst.MultiSelectQueryMetricsQuery = nil
		dst.MultiSelectQuerySpansQuery = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MultiSelectQuery)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MultiSelectQuery)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MultiSelectQuery) MarshalJSON() ([]byte, error) {
	if src.MultiSelectQueryLogsQuery != nil {
		return json.Marshal(&src.MultiSelectQueryLogsQuery)
	}

	if src.MultiSelectQueryMetricsQuery != nil {
		return json.Marshal(&src.MultiSelectQueryMetricsQuery)
	}

	if src.MultiSelectQuerySpansQuery != nil {
		return json.Marshal(&src.MultiSelectQuerySpansQuery)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MultiSelectQuery) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MultiSelectQueryLogsQuery != nil {
		return obj.MultiSelectQueryLogsQuery
	}

	if obj.MultiSelectQueryMetricsQuery != nil {
		return obj.MultiSelectQueryMetricsQuery
	}

	if obj.MultiSelectQuerySpansQuery != nil {
		return obj.MultiSelectQuerySpansQuery
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj MultiSelectQuery) GetActualInstanceValue() (interface{}) {
	if obj.MultiSelectQueryLogsQuery != nil {
		return *obj.MultiSelectQueryLogsQuery
	}

	if obj.MultiSelectQueryMetricsQuery != nil {
		return *obj.MultiSelectQueryMetricsQuery
	}

	if obj.MultiSelectQuerySpansQuery != nil {
		return *obj.MultiSelectQuerySpansQuery
	}

	// all schemas are nil
	return nil
}

type NullableMultiSelectQuery struct {
	value *MultiSelectQuery
	isSet bool
}

func (v NullableMultiSelectQuery) Get() *MultiSelectQuery {
	return v.value
}

func (v *NullableMultiSelectQuery) Set(val *MultiSelectQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiSelectQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiSelectQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiSelectQuery(val *MultiSelectQuery) *NullableMultiSelectQuery {
	return &NullableMultiSelectQuery{value: val, isSet: true}
}

func (v NullableMultiSelectQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiSelectQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


