/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// MultiSelectQuery - struct for MultiSelectQuery
type MultiSelectQuery struct {
	QueryLogsQuery *QueryLogsQuery
	QueryMetricsQuery *QueryMetricsQuery
	QuerySpansQuery *QuerySpansQuery
}

// QueryLogsQueryAsMultiSelectQuery is a convenience function that returns QueryLogsQuery wrapped in MultiSelectQuery
func QueryLogsQueryAsMultiSelectQuery(v *QueryLogsQuery) MultiSelectQuery {
	return MultiSelectQuery{
		QueryLogsQuery: v,
	}
}

// QueryMetricsQueryAsMultiSelectQuery is a convenience function that returns QueryMetricsQuery wrapped in MultiSelectQuery
func QueryMetricsQueryAsMultiSelectQuery(v *QueryMetricsQuery) MultiSelectQuery {
	return MultiSelectQuery{
		QueryMetricsQuery: v,
	}
}

// QuerySpansQueryAsMultiSelectQuery is a convenience function that returns QuerySpansQuery wrapped in MultiSelectQuery
func QuerySpansQueryAsMultiSelectQuery(v *QuerySpansQuery) MultiSelectQuery {
	return MultiSelectQuery{
		QuerySpansQuery: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MultiSelectQuery) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into QueryLogsQuery
	err = newStrictDecoder(data).Decode(&dst.QueryLogsQuery)
	if err == nil {
		jsonQueryLogsQuery, _ := json.Marshal(dst.QueryLogsQuery)
		if string(jsonQueryLogsQuery) == "{}" { // empty struct
			dst.QueryLogsQuery = nil
		} else {
			if err = validator.Validate(dst.QueryLogsQuery); err != nil {
				dst.QueryLogsQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.QueryLogsQuery = nil
	}

	// try to unmarshal data into QueryMetricsQuery
	err = newStrictDecoder(data).Decode(&dst.QueryMetricsQuery)
	if err == nil {
		jsonQueryMetricsQuery, _ := json.Marshal(dst.QueryMetricsQuery)
		if string(jsonQueryMetricsQuery) == "{}" { // empty struct
			dst.QueryMetricsQuery = nil
		} else {
			if err = validator.Validate(dst.QueryMetricsQuery); err != nil {
				dst.QueryMetricsQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.QueryMetricsQuery = nil
	}

	// try to unmarshal data into QuerySpansQuery
	err = newStrictDecoder(data).Decode(&dst.QuerySpansQuery)
	if err == nil {
		jsonQuerySpansQuery, _ := json.Marshal(dst.QuerySpansQuery)
		if string(jsonQuerySpansQuery) == "{}" { // empty struct
			dst.QuerySpansQuery = nil
		} else {
			if err = validator.Validate(dst.QuerySpansQuery); err != nil {
				dst.QuerySpansQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.QuerySpansQuery = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.QueryLogsQuery = nil
		dst.QueryMetricsQuery = nil
		dst.QuerySpansQuery = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MultiSelectQuery)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MultiSelectQuery)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MultiSelectQuery) MarshalJSON() ([]byte, error) {
	if src.QueryLogsQuery != nil {
		return json.Marshal(&src.QueryLogsQuery)
	}

	if src.QueryMetricsQuery != nil {
		return json.Marshal(&src.QueryMetricsQuery)
	}

	if src.QuerySpansQuery != nil {
		return json.Marshal(&src.QuerySpansQuery)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MultiSelectQuery) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.QueryLogsQuery != nil {
		return obj.QueryLogsQuery
	}

	if obj.QueryMetricsQuery != nil {
		return obj.QueryMetricsQuery
	}

	if obj.QuerySpansQuery != nil {
		return obj.QuerySpansQuery
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj MultiSelectQuery) GetActualInstanceValue() (interface{}) {
	if obj.QueryLogsQuery != nil {
		return *obj.QueryLogsQuery
	}

	if obj.QueryMetricsQuery != nil {
		return *obj.QueryMetricsQuery
	}

	if obj.QuerySpansQuery != nil {
		return *obj.QuerySpansQuery
	}

	// all schemas are nil
	return nil
}

type NullableMultiSelectQuery struct {
	value *MultiSelectQuery
	isSet bool
}

func (v NullableMultiSelectQuery) Get() *MultiSelectQuery {
	return v.value
}

func (v *NullableMultiSelectQuery) Set(val *MultiSelectQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiSelectQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiSelectQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiSelectQuery(val *MultiSelectQuery) *NullableMultiSelectQuery {
	return &NullableMultiSelectQuery{value: val, isSet: true}
}

func (v NullableMultiSelectQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiSelectQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


