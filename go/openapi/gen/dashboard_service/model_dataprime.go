/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the Dataprime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dataprime{}

// Dataprime A Dataprime variant of the query
type Dataprime struct {
	DataModeType *WidgetsCommonDataModeType `json:"dataModeType,omitempty"`
	DataprimeQuery *CommonDataprimeQuery `json:"dataprimeQuery,omitempty"`
}

// NewDataprime instantiates a new Dataprime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataprime() *Dataprime {
	this := Dataprime{}
	return &this
}

// NewDataprimeWithDefaults instantiates a new Dataprime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataprimeWithDefaults() *Dataprime {
	this := Dataprime{}
	return &this
}

// GetDataModeType returns the DataModeType field value if set, zero value otherwise.
func (o *Dataprime) GetDataModeType() WidgetsCommonDataModeType {
	if o == nil || IsNil(o.DataModeType) {
		var ret WidgetsCommonDataModeType
		return ret
	}
	return *o.DataModeType
}

// GetDataModeTypeOk returns a tuple with the DataModeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataprime) GetDataModeTypeOk() (*WidgetsCommonDataModeType, bool) {
	if o == nil || IsNil(o.DataModeType) {
		return nil, false
	}
	return o.DataModeType, true
}

// HasDataModeType returns a boolean if a field has been set.
func (o *Dataprime) HasDataModeType() bool {
	if o != nil && !IsNil(o.DataModeType) {
		return true
	}

	return false
}

// SetDataModeType gets a reference to the given WidgetsCommonDataModeType and assigns it to the DataModeType field.
func (o *Dataprime) SetDataModeType(v WidgetsCommonDataModeType) {
	o.DataModeType = &v
}

// GetDataprimeQuery returns the DataprimeQuery field value if set, zero value otherwise.
func (o *Dataprime) GetDataprimeQuery() CommonDataprimeQuery {
	if o == nil || IsNil(o.DataprimeQuery) {
		var ret CommonDataprimeQuery
		return ret
	}
	return *o.DataprimeQuery
}

// GetDataprimeQueryOk returns a tuple with the DataprimeQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataprime) GetDataprimeQueryOk() (*CommonDataprimeQuery, bool) {
	if o == nil || IsNil(o.DataprimeQuery) {
		return nil, false
	}
	return o.DataprimeQuery, true
}

// HasDataprimeQuery returns a boolean if a field has been set.
func (o *Dataprime) HasDataprimeQuery() bool {
	if o != nil && !IsNil(o.DataprimeQuery) {
		return true
	}

	return false
}

// SetDataprimeQuery gets a reference to the given CommonDataprimeQuery and assigns it to the DataprimeQuery field.
func (o *Dataprime) SetDataprimeQuery(v CommonDataprimeQuery) {
	o.DataprimeQuery = &v
}

func (o Dataprime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dataprime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataModeType) {
		toSerialize["dataModeType"] = o.DataModeType
	}
	if !IsNil(o.DataprimeQuery) {
		toSerialize["dataprimeQuery"] = o.DataprimeQuery
	}
	return toSerialize, nil
}

type NullableDataprime struct {
	value *Dataprime
	isSet bool
}

func (v NullableDataprime) Get() *Dataprime {
	return v.value
}

func (v *NullableDataprime) Set(val *Dataprime) {
	v.value = val
	v.isSet = true
}

func (v NullableDataprime) IsSet() bool {
	return v.isSet
}

func (v *NullableDataprime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataprime(val *Dataprime) *NullableDataprime {
	return &NullableDataprime{value: val, isSet: true}
}

func (v NullableDataprime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataprime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


