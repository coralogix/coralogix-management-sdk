/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the SelectionAll type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelectionAll{}

// SelectionAll struct for SelectionAll
type SelectionAll struct {
	All map[string]interface{} `json:"all,omitempty"`
}

// NewSelectionAll instantiates a new SelectionAll object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectionAll() *SelectionAll {
	this := SelectionAll{}
	return &this
}

// NewSelectionAllWithDefaults instantiates a new SelectionAll object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectionAllWithDefaults() *SelectionAll {
	this := SelectionAll{}
	return &this
}

// GetAll returns the All field value if set, zero value otherwise.
func (o *SelectionAll) GetAll() map[string]interface{} {
	if o == nil || IsNil(o.All) {
		var ret map[string]interface{}
		return ret
	}
	return o.All
}

// GetAllOk returns a tuple with the All field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectionAll) GetAllOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.All) {
		return map[string]interface{}{}, false
	}
	return o.All, true
}

// HasAll returns a boolean if a field has been set.
func (o *SelectionAll) HasAll() bool {
	if o != nil && !IsNil(o.All) {
		return true
	}

	return false
}

// SetAll gets a reference to the given map[string]interface{} and assigns it to the All field.
func (o *SelectionAll) SetAll(v map[string]interface{}) {
	o.All = v
}

func (o SelectionAll) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelectionAll) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.All) {
		toSerialize["all"] = o.All
	}
	return toSerialize, nil
}

type NullableSelectionAll struct {
	value *SelectionAll
	isSet bool
}

func (v NullableSelectionAll) Get() *SelectionAll {
	return v.value
}

func (v *NullableSelectionAll) Set(val *SelectionAll) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectionAll) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectionAll) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectionAll(val *SelectionAll) *NullableSelectionAll {
	return &NullableSelectionAll{value: val, isSet: true}
}

func (v NullableSelectionAll) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectionAll) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


