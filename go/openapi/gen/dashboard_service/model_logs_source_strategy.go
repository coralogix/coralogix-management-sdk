/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// LogsSourceStrategy - struct for LogsSourceStrategy
type LogsSourceStrategy struct {
	LogsSourceStrategyOneOf *LogsSourceStrategyOneOf
	LogsSourceStrategyOneOf1 *LogsSourceStrategyOneOf1
	LogsSourceStrategyOneOf2 *LogsSourceStrategyOneOf2
}

// LogsSourceStrategyOneOfAsLogsSourceStrategy is a convenience function that returns LogsSourceStrategyOneOf wrapped in LogsSourceStrategy
func LogsSourceStrategyOneOfAsLogsSourceStrategy(v *LogsSourceStrategyOneOf) LogsSourceStrategy {
	return LogsSourceStrategy{
		LogsSourceStrategyOneOf: v,
	}
}

// LogsSourceStrategyOneOf1AsLogsSourceStrategy is a convenience function that returns LogsSourceStrategyOneOf1 wrapped in LogsSourceStrategy
func LogsSourceStrategyOneOf1AsLogsSourceStrategy(v *LogsSourceStrategyOneOf1) LogsSourceStrategy {
	return LogsSourceStrategy{
		LogsSourceStrategyOneOf1: v,
	}
}

// LogsSourceStrategyOneOf2AsLogsSourceStrategy is a convenience function that returns LogsSourceStrategyOneOf2 wrapped in LogsSourceStrategy
func LogsSourceStrategyOneOf2AsLogsSourceStrategy(v *LogsSourceStrategyOneOf2) LogsSourceStrategy {
	return LogsSourceStrategy{
		LogsSourceStrategyOneOf2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *LogsSourceStrategy) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LogsSourceStrategyOneOf
	err = newStrictDecoder(data).Decode(&dst.LogsSourceStrategyOneOf)
	if err == nil {
		jsonLogsSourceStrategyOneOf, _ := json.Marshal(dst.LogsSourceStrategyOneOf)
		if string(jsonLogsSourceStrategyOneOf) == "{}" { // empty struct
			dst.LogsSourceStrategyOneOf = nil
		} else {
			if err = validator.Validate(dst.LogsSourceStrategyOneOf); err != nil {
				dst.LogsSourceStrategyOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogsSourceStrategyOneOf = nil
	}

	// try to unmarshal data into LogsSourceStrategyOneOf1
	err = newStrictDecoder(data).Decode(&dst.LogsSourceStrategyOneOf1)
	if err == nil {
		jsonLogsSourceStrategyOneOf1, _ := json.Marshal(dst.LogsSourceStrategyOneOf1)
		if string(jsonLogsSourceStrategyOneOf1) == "{}" { // empty struct
			dst.LogsSourceStrategyOneOf1 = nil
		} else {
			if err = validator.Validate(dst.LogsSourceStrategyOneOf1); err != nil {
				dst.LogsSourceStrategyOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogsSourceStrategyOneOf1 = nil
	}

	// try to unmarshal data into LogsSourceStrategyOneOf2
	err = newStrictDecoder(data).Decode(&dst.LogsSourceStrategyOneOf2)
	if err == nil {
		jsonLogsSourceStrategyOneOf2, _ := json.Marshal(dst.LogsSourceStrategyOneOf2)
		if string(jsonLogsSourceStrategyOneOf2) == "{}" { // empty struct
			dst.LogsSourceStrategyOneOf2 = nil
		} else {
			if err = validator.Validate(dst.LogsSourceStrategyOneOf2); err != nil {
				dst.LogsSourceStrategyOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogsSourceStrategyOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LogsSourceStrategyOneOf = nil
		dst.LogsSourceStrategyOneOf1 = nil
		dst.LogsSourceStrategyOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(LogsSourceStrategy)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(LogsSourceStrategy)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src LogsSourceStrategy) MarshalJSON() ([]byte, error) {
	if src.LogsSourceStrategyOneOf != nil {
		return json.Marshal(&src.LogsSourceStrategyOneOf)
	}

	if src.LogsSourceStrategyOneOf1 != nil {
		return json.Marshal(&src.LogsSourceStrategyOneOf1)
	}

	if src.LogsSourceStrategyOneOf2 != nil {
		return json.Marshal(&src.LogsSourceStrategyOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *LogsSourceStrategy) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.LogsSourceStrategyOneOf != nil {
		return obj.LogsSourceStrategyOneOf
	}

	if obj.LogsSourceStrategyOneOf1 != nil {
		return obj.LogsSourceStrategyOneOf1
	}

	if obj.LogsSourceStrategyOneOf2 != nil {
		return obj.LogsSourceStrategyOneOf2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj LogsSourceStrategy) GetActualInstanceValue() (interface{}) {
	if obj.LogsSourceStrategyOneOf != nil {
		return *obj.LogsSourceStrategyOneOf
	}

	if obj.LogsSourceStrategyOneOf1 != nil {
		return *obj.LogsSourceStrategyOneOf1
	}

	if obj.LogsSourceStrategyOneOf2 != nil {
		return *obj.LogsSourceStrategyOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableLogsSourceStrategy struct {
	value *LogsSourceStrategy
	isSet bool
}

func (v NullableLogsSourceStrategy) Get() *LogsSourceStrategy {
	return v.value
}

func (v *NullableLogsSourceStrategy) Set(val *LogsSourceStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsSourceStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsSourceStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsSourceStrategy(val *LogsSourceStrategy) *NullableLogsSourceStrategy {
	return &NullableLogsSourceStrategy{value: val, isSet: true}
}

func (v NullableLogsSourceStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsSourceStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


