/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// LogsSourceStrategy - struct for LogsSourceStrategy
type LogsSourceStrategy struct {
	LogsSourceStrategyDuration *LogsSourceStrategyDuration
	LogsSourceStrategyInstant *LogsSourceStrategyInstant
	LogsSourceStrategyRange *LogsSourceStrategyRange
}

// LogsSourceStrategyDurationAsLogsSourceStrategy is a convenience function that returns LogsSourceStrategyDuration wrapped in LogsSourceStrategy
func LogsSourceStrategyDurationAsLogsSourceStrategy(v *LogsSourceStrategyDuration) LogsSourceStrategy {
	return LogsSourceStrategy{
		LogsSourceStrategyDuration: v,
	}
}

// LogsSourceStrategyInstantAsLogsSourceStrategy is a convenience function that returns LogsSourceStrategyInstant wrapped in LogsSourceStrategy
func LogsSourceStrategyInstantAsLogsSourceStrategy(v *LogsSourceStrategyInstant) LogsSourceStrategy {
	return LogsSourceStrategy{
		LogsSourceStrategyInstant: v,
	}
}

// LogsSourceStrategyRangeAsLogsSourceStrategy is a convenience function that returns LogsSourceStrategyRange wrapped in LogsSourceStrategy
func LogsSourceStrategyRangeAsLogsSourceStrategy(v *LogsSourceStrategyRange) LogsSourceStrategy {
	return LogsSourceStrategy{
		LogsSourceStrategyRange: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *LogsSourceStrategy) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LogsSourceStrategyDuration
	err = newStrictDecoder(data).Decode(&dst.LogsSourceStrategyDuration)
	if err == nil {
		jsonLogsSourceStrategyDuration, _ := json.Marshal(dst.LogsSourceStrategyDuration)
		if string(jsonLogsSourceStrategyDuration) == "{}" { // empty struct
			dst.LogsSourceStrategyDuration = nil
		} else {
			if err = validator.Validate(dst.LogsSourceStrategyDuration); err != nil {
				dst.LogsSourceStrategyDuration = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogsSourceStrategyDuration = nil
	}

	// try to unmarshal data into LogsSourceStrategyInstant
	err = newStrictDecoder(data).Decode(&dst.LogsSourceStrategyInstant)
	if err == nil {
		jsonLogsSourceStrategyInstant, _ := json.Marshal(dst.LogsSourceStrategyInstant)
		if string(jsonLogsSourceStrategyInstant) == "{}" { // empty struct
			dst.LogsSourceStrategyInstant = nil
		} else {
			if err = validator.Validate(dst.LogsSourceStrategyInstant); err != nil {
				dst.LogsSourceStrategyInstant = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogsSourceStrategyInstant = nil
	}

	// try to unmarshal data into LogsSourceStrategyRange
	err = newStrictDecoder(data).Decode(&dst.LogsSourceStrategyRange)
	if err == nil {
		jsonLogsSourceStrategyRange, _ := json.Marshal(dst.LogsSourceStrategyRange)
		if string(jsonLogsSourceStrategyRange) == "{}" { // empty struct
			dst.LogsSourceStrategyRange = nil
		} else {
			if err = validator.Validate(dst.LogsSourceStrategyRange); err != nil {
				dst.LogsSourceStrategyRange = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogsSourceStrategyRange = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LogsSourceStrategyDuration = nil
		dst.LogsSourceStrategyInstant = nil
		dst.LogsSourceStrategyRange = nil

		return fmt.Errorf("data matches more than one schema in oneOf(LogsSourceStrategy)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(LogsSourceStrategy)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src LogsSourceStrategy) MarshalJSON() ([]byte, error) {
	if src.LogsSourceStrategyDuration != nil {
		return json.Marshal(&src.LogsSourceStrategyDuration)
	}

	if src.LogsSourceStrategyInstant != nil {
		return json.Marshal(&src.LogsSourceStrategyInstant)
	}

	if src.LogsSourceStrategyRange != nil {
		return json.Marshal(&src.LogsSourceStrategyRange)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *LogsSourceStrategy) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.LogsSourceStrategyDuration != nil {
		return obj.LogsSourceStrategyDuration
	}

	if obj.LogsSourceStrategyInstant != nil {
		return obj.LogsSourceStrategyInstant
	}

	if obj.LogsSourceStrategyRange != nil {
		return obj.LogsSourceStrategyRange
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj LogsSourceStrategy) GetActualInstanceValue() (interface{}) {
	if obj.LogsSourceStrategyDuration != nil {
		return *obj.LogsSourceStrategyDuration
	}

	if obj.LogsSourceStrategyInstant != nil {
		return *obj.LogsSourceStrategyInstant
	}

	if obj.LogsSourceStrategyRange != nil {
		return *obj.LogsSourceStrategyRange
	}

	// all schemas are nil
	return nil
}

type NullableLogsSourceStrategy struct {
	value *LogsSourceStrategy
	isSet bool
}

func (v NullableLogsSourceStrategy) Get() *LogsSourceStrategy {
	return v.value
}

func (v *NullableLogsSourceStrategy) Set(val *LogsSourceStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsSourceStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsSourceStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsSourceStrategy(val *LogsSourceStrategy) *NullableLogsSourceStrategy {
	return &NullableLogsSourceStrategy{value: val, isSet: true}
}

func (v NullableLogsSourceStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsSourceStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


