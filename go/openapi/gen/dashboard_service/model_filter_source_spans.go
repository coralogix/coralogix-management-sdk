/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the FilterSourceSpans type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterSourceSpans{}

// FilterSourceSpans Defines the type of data the filter applies to.
type FilterSourceSpans struct {
	Spans *SpansFilter `json:"spans,omitempty"`
}

// NewFilterSourceSpans instantiates a new FilterSourceSpans object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterSourceSpans() *FilterSourceSpans {
	this := FilterSourceSpans{}
	return &this
}

// NewFilterSourceSpansWithDefaults instantiates a new FilterSourceSpans object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterSourceSpansWithDefaults() *FilterSourceSpans {
	this := FilterSourceSpans{}
	return &this
}

// GetSpans returns the Spans field value if set, zero value otherwise.
func (o *FilterSourceSpans) GetSpans() SpansFilter {
	if o == nil || IsNil(o.Spans) {
		var ret SpansFilter
		return ret
	}
	return *o.Spans
}

// GetSpansOk returns a tuple with the Spans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterSourceSpans) GetSpansOk() (*SpansFilter, bool) {
	if o == nil || IsNil(o.Spans) {
		return nil, false
	}
	return o.Spans, true
}

// HasSpans returns a boolean if a field has been set.
func (o *FilterSourceSpans) HasSpans() bool {
	if o != nil && !IsNil(o.Spans) {
		return true
	}

	return false
}

// SetSpans gets a reference to the given SpansFilter and assigns it to the Spans field.
func (o *FilterSourceSpans) SetSpans(v SpansFilter) {
	o.Spans = &v
}

func (o FilterSourceSpans) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterSourceSpans) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Spans) {
		toSerialize["spans"] = o.Spans
	}
	return toSerialize, nil
}

type NullableFilterSourceSpans struct {
	value *FilterSourceSpans
	isSet bool
}

func (v NullableFilterSourceSpans) Get() *FilterSourceSpans {
	return v.value
}

func (v *NullableFilterSourceSpans) Set(val *FilterSourceSpans) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterSourceSpans) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterSourceSpans) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterSourceSpans(val *FilterSourceSpans) *NullableFilterSourceSpans {
	return &NullableFilterSourceSpans{value: val, isSet: true}
}

func (v NullableFilterSourceSpans) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterSourceSpans) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


