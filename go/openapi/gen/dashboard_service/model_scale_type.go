/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// ScaleType the model 'ScaleType'
type ScaleType string

// List of ScaleType
const (
	SCALETYPE_SCALE_TYPE_UNSPECIFIED ScaleType = "SCALE_TYPE_UNSPECIFIED"
	SCALETYPE_SCALE_TYPE_LINEAR ScaleType = "SCALE_TYPE_LINEAR"
	SCALETYPE_SCALE_TYPE_LOGARITHMIC ScaleType = "SCALE_TYPE_LOGARITHMIC"
)

// All allowed values of ScaleType enum
var AllowedScaleTypeEnumValues = []ScaleType{
	"SCALE_TYPE_UNSPECIFIED",
	"SCALE_TYPE_LINEAR",
	"SCALE_TYPE_LOGARITHMIC",
}

func (v *ScaleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ScaleType(value)
	for _, existing := range AllowedScaleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ScaleType", value)
}

// NewScaleTypeFromValue returns a pointer to a valid ScaleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewScaleTypeFromValue(v string) (*ScaleType, error) {
	ev := ScaleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ScaleType: valid values are %v", v, AllowedScaleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ScaleType) IsValid() bool {
	for _, existing := range AllowedScaleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ScaleType value
func (v ScaleType) Ptr() *ScaleType {
	return &v
}

type NullableScaleType struct {
	value *ScaleType
	isSet bool
}

func (v NullableScaleType) Get() *ScaleType {
	return v.value
}

func (v *NullableScaleType) Set(val *ScaleType) {
	v.value = val
	v.isSet = true
}

func (v NullableScaleType) IsSet() bool {
	return v.isSet
}

func (v *NullableScaleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScaleType(val *ScaleType) *NullableScaleType {
	return &NullableScaleType{value: val, isSet: true}
}

func (v NullableScaleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScaleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

