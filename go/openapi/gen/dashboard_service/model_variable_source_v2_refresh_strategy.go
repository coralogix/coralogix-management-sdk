/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// VariableSourceV2RefreshStrategy the model 'VariableSourceV2RefreshStrategy'
type VariableSourceV2RefreshStrategy string

// List of VariableSourceV2.RefreshStrategy
const (
	VARIABLESOURCEV2REFRESHSTRATEGY_REFRESH_STRATEGY_UNSPECIFIED VariableSourceV2RefreshStrategy = "REFRESH_STRATEGY_UNSPECIFIED"
	VARIABLESOURCEV2REFRESHSTRATEGY_REFRESH_STRATEGY_ON_DASHBOARD_LOAD VariableSourceV2RefreshStrategy = "REFRESH_STRATEGY_ON_DASHBOARD_LOAD"
	VARIABLESOURCEV2REFRESHSTRATEGY_REFRESH_STRATEGY_ON_TIME_FRAME_CHANGE VariableSourceV2RefreshStrategy = "REFRESH_STRATEGY_ON_TIME_FRAME_CHANGE"
)

// All allowed values of VariableSourceV2RefreshStrategy enum
var AllowedVariableSourceV2RefreshStrategyEnumValues = []VariableSourceV2RefreshStrategy{
	"REFRESH_STRATEGY_UNSPECIFIED",
	"REFRESH_STRATEGY_ON_DASHBOARD_LOAD",
	"REFRESH_STRATEGY_ON_TIME_FRAME_CHANGE",
}

func (v *VariableSourceV2RefreshStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VariableSourceV2RefreshStrategy(value)
	for _, existing := range AllowedVariableSourceV2RefreshStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VariableSourceV2RefreshStrategy", value)
}

// NewVariableSourceV2RefreshStrategyFromValue returns a pointer to a valid VariableSourceV2RefreshStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVariableSourceV2RefreshStrategyFromValue(v string) (*VariableSourceV2RefreshStrategy, error) {
	ev := VariableSourceV2RefreshStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VariableSourceV2RefreshStrategy: valid values are %v", v, AllowedVariableSourceV2RefreshStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VariableSourceV2RefreshStrategy) IsValid() bool {
	for _, existing := range AllowedVariableSourceV2RefreshStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VariableSourceV2.RefreshStrategy value
func (v VariableSourceV2RefreshStrategy) Ptr() *VariableSourceV2RefreshStrategy {
	return &v
}

type NullableVariableSourceV2RefreshStrategy struct {
	value *VariableSourceV2RefreshStrategy
	isSet bool
}

func (v NullableVariableSourceV2RefreshStrategy) Get() *VariableSourceV2RefreshStrategy {
	return v.value
}

func (v *NullableVariableSourceV2RefreshStrategy) Set(val *VariableSourceV2RefreshStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableSourceV2RefreshStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableSourceV2RefreshStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableSourceV2RefreshStrategy(val *VariableSourceV2RefreshStrategy) *NullableVariableSourceV2RefreshStrategy {
	return &NullableVariableSourceV2RefreshStrategy{value: val, isSet: true}
}

func (v NullableVariableSourceV2RefreshStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableSourceV2RefreshStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

