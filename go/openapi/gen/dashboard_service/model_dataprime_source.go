/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
)

// checks if the DataprimeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataprimeSource{}

// DataprimeSource struct for DataprimeSource
type DataprimeSource struct {
	DataModeType *V1CommonDataModeType `json:"dataModeType,omitempty"`
	LabelFields []ObservationField `json:"labelFields,omitempty"`
	MessageTemplate *string `json:"messageTemplate,omitempty"`
	Orientation *AnnotationOrientation `json:"orientation,omitempty"`
	Query *CommonDataprimeQuery `json:"query,omitempty"`
	Strategy *DataprimeSourceStrategy `json:"strategy,omitempty"`
}

// NewDataprimeSource instantiates a new DataprimeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataprimeSource() *DataprimeSource {
	this := DataprimeSource{}
	return &this
}

// NewDataprimeSourceWithDefaults instantiates a new DataprimeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataprimeSourceWithDefaults() *DataprimeSource {
	this := DataprimeSource{}
	return &this
}

// GetDataModeType returns the DataModeType field value if set, zero value otherwise.
func (o *DataprimeSource) GetDataModeType() V1CommonDataModeType {
	if o == nil || IsNil(o.DataModeType) {
		var ret V1CommonDataModeType
		return ret
	}
	return *o.DataModeType
}

// GetDataModeTypeOk returns a tuple with the DataModeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataprimeSource) GetDataModeTypeOk() (*V1CommonDataModeType, bool) {
	if o == nil || IsNil(o.DataModeType) {
		return nil, false
	}
	return o.DataModeType, true
}

// HasDataModeType returns a boolean if a field has been set.
func (o *DataprimeSource) HasDataModeType() bool {
	if o != nil && !IsNil(o.DataModeType) {
		return true
	}

	return false
}

// SetDataModeType gets a reference to the given V1CommonDataModeType and assigns it to the DataModeType field.
func (o *DataprimeSource) SetDataModeType(v V1CommonDataModeType) {
	o.DataModeType = &v
}

// GetLabelFields returns the LabelFields field value if set, zero value otherwise.
func (o *DataprimeSource) GetLabelFields() []ObservationField {
	if o == nil || IsNil(o.LabelFields) {
		var ret []ObservationField
		return ret
	}
	return o.LabelFields
}

// GetLabelFieldsOk returns a tuple with the LabelFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataprimeSource) GetLabelFieldsOk() ([]ObservationField, bool) {
	if o == nil || IsNil(o.LabelFields) {
		return nil, false
	}
	return o.LabelFields, true
}

// HasLabelFields returns a boolean if a field has been set.
func (o *DataprimeSource) HasLabelFields() bool {
	if o != nil && !IsNil(o.LabelFields) {
		return true
	}

	return false
}

// SetLabelFields gets a reference to the given []ObservationField and assigns it to the LabelFields field.
func (o *DataprimeSource) SetLabelFields(v []ObservationField) {
	o.LabelFields = v
}

// GetMessageTemplate returns the MessageTemplate field value if set, zero value otherwise.
func (o *DataprimeSource) GetMessageTemplate() string {
	if o == nil || IsNil(o.MessageTemplate) {
		var ret string
		return ret
	}
	return *o.MessageTemplate
}

// GetMessageTemplateOk returns a tuple with the MessageTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataprimeSource) GetMessageTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.MessageTemplate) {
		return nil, false
	}
	return o.MessageTemplate, true
}

// HasMessageTemplate returns a boolean if a field has been set.
func (o *DataprimeSource) HasMessageTemplate() bool {
	if o != nil && !IsNil(o.MessageTemplate) {
		return true
	}

	return false
}

// SetMessageTemplate gets a reference to the given string and assigns it to the MessageTemplate field.
func (o *DataprimeSource) SetMessageTemplate(v string) {
	o.MessageTemplate = &v
}

// GetOrientation returns the Orientation field value if set, zero value otherwise.
func (o *DataprimeSource) GetOrientation() AnnotationOrientation {
	if o == nil || IsNil(o.Orientation) {
		var ret AnnotationOrientation
		return ret
	}
	return *o.Orientation
}

// GetOrientationOk returns a tuple with the Orientation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataprimeSource) GetOrientationOk() (*AnnotationOrientation, bool) {
	if o == nil || IsNil(o.Orientation) {
		return nil, false
	}
	return o.Orientation, true
}

// HasOrientation returns a boolean if a field has been set.
func (o *DataprimeSource) HasOrientation() bool {
	if o != nil && !IsNil(o.Orientation) {
		return true
	}

	return false
}

// SetOrientation gets a reference to the given AnnotationOrientation and assigns it to the Orientation field.
func (o *DataprimeSource) SetOrientation(v AnnotationOrientation) {
	o.Orientation = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *DataprimeSource) GetQuery() CommonDataprimeQuery {
	if o == nil || IsNil(o.Query) {
		var ret CommonDataprimeQuery
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataprimeSource) GetQueryOk() (*CommonDataprimeQuery, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *DataprimeSource) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given CommonDataprimeQuery and assigns it to the Query field.
func (o *DataprimeSource) SetQuery(v CommonDataprimeQuery) {
	o.Query = &v
}

// GetStrategy returns the Strategy field value if set, zero value otherwise.
func (o *DataprimeSource) GetStrategy() DataprimeSourceStrategy {
	if o == nil || IsNil(o.Strategy) {
		var ret DataprimeSourceStrategy
		return ret
	}
	return *o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataprimeSource) GetStrategyOk() (*DataprimeSourceStrategy, bool) {
	if o == nil || IsNil(o.Strategy) {
		return nil, false
	}
	return o.Strategy, true
}

// HasStrategy returns a boolean if a field has been set.
func (o *DataprimeSource) HasStrategy() bool {
	if o != nil && !IsNil(o.Strategy) {
		return true
	}

	return false
}

// SetStrategy gets a reference to the given DataprimeSourceStrategy and assigns it to the Strategy field.
func (o *DataprimeSource) SetStrategy(v DataprimeSourceStrategy) {
	o.Strategy = &v
}

func (o DataprimeSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataprimeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataModeType) {
		toSerialize["dataModeType"] = o.DataModeType
	}
	if !IsNil(o.LabelFields) {
		toSerialize["labelFields"] = o.LabelFields
	}
	if !IsNil(o.MessageTemplate) {
		toSerialize["messageTemplate"] = o.MessageTemplate
	}
	if !IsNil(o.Orientation) {
		toSerialize["orientation"] = o.Orientation
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.Strategy) {
		toSerialize["strategy"] = o.Strategy
	}
	return toSerialize, nil
}

type NullableDataprimeSource struct {
	value *DataprimeSource
	isSet bool
}

func (v NullableDataprimeSource) Get() *DataprimeSource {
	return v.value
}

func (v *NullableDataprimeSource) Set(val *DataprimeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableDataprimeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableDataprimeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataprimeSource(val *DataprimeSource) *NullableDataprimeSource {
	return &NullableDataprimeSource{value: val, isSet: true}
}

func (v NullableDataprimeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataprimeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


