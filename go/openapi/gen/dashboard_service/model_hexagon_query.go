/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// HexagonQuery - struct for HexagonQuery
type HexagonQuery struct {
	QueryDataprime *QueryDataprime
	QueryLogs *QueryLogs
	QueryMetrics *QueryMetrics
	QuerySpans *QuerySpans
}

// QueryDataprimeAsHexagonQuery is a convenience function that returns QueryDataprime wrapped in HexagonQuery
func QueryDataprimeAsHexagonQuery(v *QueryDataprime) HexagonQuery {
	return HexagonQuery{
		QueryDataprime: v,
	}
}

// QueryLogsAsHexagonQuery is a convenience function that returns QueryLogs wrapped in HexagonQuery
func QueryLogsAsHexagonQuery(v *QueryLogs) HexagonQuery {
	return HexagonQuery{
		QueryLogs: v,
	}
}

// QueryMetricsAsHexagonQuery is a convenience function that returns QueryMetrics wrapped in HexagonQuery
func QueryMetricsAsHexagonQuery(v *QueryMetrics) HexagonQuery {
	return HexagonQuery{
		QueryMetrics: v,
	}
}

// QuerySpansAsHexagonQuery is a convenience function that returns QuerySpans wrapped in HexagonQuery
func QuerySpansAsHexagonQuery(v *QuerySpans) HexagonQuery {
	return HexagonQuery{
		QuerySpans: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *HexagonQuery) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into QueryDataprime
	err = newStrictDecoder(data).Decode(&dst.QueryDataprime)
	if err == nil {
		jsonQueryDataprime, _ := json.Marshal(dst.QueryDataprime)
		if string(jsonQueryDataprime) == "{}" { // empty struct
			dst.QueryDataprime = nil
		} else {
			if err = validator.Validate(dst.QueryDataprime); err != nil {
				dst.QueryDataprime = nil
			} else {
				match++
			}
		}
	} else {
		dst.QueryDataprime = nil
	}

	// try to unmarshal data into QueryLogs
	err = newStrictDecoder(data).Decode(&dst.QueryLogs)
	if err == nil {
		jsonQueryLogs, _ := json.Marshal(dst.QueryLogs)
		if string(jsonQueryLogs) == "{}" { // empty struct
			dst.QueryLogs = nil
		} else {
			if err = validator.Validate(dst.QueryLogs); err != nil {
				dst.QueryLogs = nil
			} else {
				match++
			}
		}
	} else {
		dst.QueryLogs = nil
	}

	// try to unmarshal data into QueryMetrics
	err = newStrictDecoder(data).Decode(&dst.QueryMetrics)
	if err == nil {
		jsonQueryMetrics, _ := json.Marshal(dst.QueryMetrics)
		if string(jsonQueryMetrics) == "{}" { // empty struct
			dst.QueryMetrics = nil
		} else {
			if err = validator.Validate(dst.QueryMetrics); err != nil {
				dst.QueryMetrics = nil
			} else {
				match++
			}
		}
	} else {
		dst.QueryMetrics = nil
	}

	// try to unmarshal data into QuerySpans
	err = newStrictDecoder(data).Decode(&dst.QuerySpans)
	if err == nil {
		jsonQuerySpans, _ := json.Marshal(dst.QuerySpans)
		if string(jsonQuerySpans) == "{}" { // empty struct
			dst.QuerySpans = nil
		} else {
			if err = validator.Validate(dst.QuerySpans); err != nil {
				dst.QuerySpans = nil
			} else {
				match++
			}
		}
	} else {
		dst.QuerySpans = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.QueryDataprime = nil
		dst.QueryLogs = nil
		dst.QueryMetrics = nil
		dst.QuerySpans = nil

		return fmt.Errorf("data matches more than one schema in oneOf(HexagonQuery)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(HexagonQuery)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src HexagonQuery) MarshalJSON() ([]byte, error) {
	if src.QueryDataprime != nil {
		return json.Marshal(&src.QueryDataprime)
	}

	if src.QueryLogs != nil {
		return json.Marshal(&src.QueryLogs)
	}

	if src.QueryMetrics != nil {
		return json.Marshal(&src.QueryMetrics)
	}

	if src.QuerySpans != nil {
		return json.Marshal(&src.QuerySpans)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *HexagonQuery) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.QueryDataprime != nil {
		return obj.QueryDataprime
	}

	if obj.QueryLogs != nil {
		return obj.QueryLogs
	}

	if obj.QueryMetrics != nil {
		return obj.QueryMetrics
	}

	if obj.QuerySpans != nil {
		return obj.QuerySpans
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj HexagonQuery) GetActualInstanceValue() (interface{}) {
	if obj.QueryDataprime != nil {
		return *obj.QueryDataprime
	}

	if obj.QueryLogs != nil {
		return *obj.QueryLogs
	}

	if obj.QueryMetrics != nil {
		return *obj.QueryMetrics
	}

	if obj.QuerySpans != nil {
		return *obj.QuerySpans
	}

	// all schemas are nil
	return nil
}

type NullableHexagonQuery struct {
	value *HexagonQuery
	isSet bool
}

func (v NullableHexagonQuery) Get() *HexagonQuery {
	return v.value
}

func (v *NullableHexagonQuery) Set(val *HexagonQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableHexagonQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableHexagonQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHexagonQuery(val *HexagonQuery) *NullableHexagonQuery {
	return &NullableHexagonQuery{value: val, isSet: true}
}

func (v NullableHexagonQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHexagonQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


