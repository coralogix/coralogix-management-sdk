/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// HexagonQuery - struct for HexagonQuery
type HexagonQuery struct {
	HexagonQueryOneOf *HexagonQueryOneOf
	HexagonQueryOneOf1 *HexagonQueryOneOf1
	HexagonQueryOneOf2 *HexagonQueryOneOf2
	HexagonQueryOneOf3 *HexagonQueryOneOf3
}

// HexagonQueryOneOfAsHexagonQuery is a convenience function that returns HexagonQueryOneOf wrapped in HexagonQuery
func HexagonQueryOneOfAsHexagonQuery(v *HexagonQueryOneOf) HexagonQuery {
	return HexagonQuery{
		HexagonQueryOneOf: v,
	}
}

// HexagonQueryOneOf1AsHexagonQuery is a convenience function that returns HexagonQueryOneOf1 wrapped in HexagonQuery
func HexagonQueryOneOf1AsHexagonQuery(v *HexagonQueryOneOf1) HexagonQuery {
	return HexagonQuery{
		HexagonQueryOneOf1: v,
	}
}

// HexagonQueryOneOf2AsHexagonQuery is a convenience function that returns HexagonQueryOneOf2 wrapped in HexagonQuery
func HexagonQueryOneOf2AsHexagonQuery(v *HexagonQueryOneOf2) HexagonQuery {
	return HexagonQuery{
		HexagonQueryOneOf2: v,
	}
}

// HexagonQueryOneOf3AsHexagonQuery is a convenience function that returns HexagonQueryOneOf3 wrapped in HexagonQuery
func HexagonQueryOneOf3AsHexagonQuery(v *HexagonQueryOneOf3) HexagonQuery {
	return HexagonQuery{
		HexagonQueryOneOf3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *HexagonQuery) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into HexagonQueryOneOf
	err = newStrictDecoder(data).Decode(&dst.HexagonQueryOneOf)
	if err == nil {
		jsonHexagonQueryOneOf, _ := json.Marshal(dst.HexagonQueryOneOf)
		if string(jsonHexagonQueryOneOf) == "{}" { // empty struct
			dst.HexagonQueryOneOf = nil
		} else {
			if err = validator.Validate(dst.HexagonQueryOneOf); err != nil {
				dst.HexagonQueryOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.HexagonQueryOneOf = nil
	}

	// try to unmarshal data into HexagonQueryOneOf1
	err = newStrictDecoder(data).Decode(&dst.HexagonQueryOneOf1)
	if err == nil {
		jsonHexagonQueryOneOf1, _ := json.Marshal(dst.HexagonQueryOneOf1)
		if string(jsonHexagonQueryOneOf1) == "{}" { // empty struct
			dst.HexagonQueryOneOf1 = nil
		} else {
			if err = validator.Validate(dst.HexagonQueryOneOf1); err != nil {
				dst.HexagonQueryOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.HexagonQueryOneOf1 = nil
	}

	// try to unmarshal data into HexagonQueryOneOf2
	err = newStrictDecoder(data).Decode(&dst.HexagonQueryOneOf2)
	if err == nil {
		jsonHexagonQueryOneOf2, _ := json.Marshal(dst.HexagonQueryOneOf2)
		if string(jsonHexagonQueryOneOf2) == "{}" { // empty struct
			dst.HexagonQueryOneOf2 = nil
		} else {
			if err = validator.Validate(dst.HexagonQueryOneOf2); err != nil {
				dst.HexagonQueryOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.HexagonQueryOneOf2 = nil
	}

	// try to unmarshal data into HexagonQueryOneOf3
	err = newStrictDecoder(data).Decode(&dst.HexagonQueryOneOf3)
	if err == nil {
		jsonHexagonQueryOneOf3, _ := json.Marshal(dst.HexagonQueryOneOf3)
		if string(jsonHexagonQueryOneOf3) == "{}" { // empty struct
			dst.HexagonQueryOneOf3 = nil
		} else {
			if err = validator.Validate(dst.HexagonQueryOneOf3); err != nil {
				dst.HexagonQueryOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.HexagonQueryOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.HexagonQueryOneOf = nil
		dst.HexagonQueryOneOf1 = nil
		dst.HexagonQueryOneOf2 = nil
		dst.HexagonQueryOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(HexagonQuery)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(HexagonQuery)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src HexagonQuery) MarshalJSON() ([]byte, error) {
	if src.HexagonQueryOneOf != nil {
		return json.Marshal(&src.HexagonQueryOneOf)
	}

	if src.HexagonQueryOneOf1 != nil {
		return json.Marshal(&src.HexagonQueryOneOf1)
	}

	if src.HexagonQueryOneOf2 != nil {
		return json.Marshal(&src.HexagonQueryOneOf2)
	}

	if src.HexagonQueryOneOf3 != nil {
		return json.Marshal(&src.HexagonQueryOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *HexagonQuery) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.HexagonQueryOneOf != nil {
		return obj.HexagonQueryOneOf
	}

	if obj.HexagonQueryOneOf1 != nil {
		return obj.HexagonQueryOneOf1
	}

	if obj.HexagonQueryOneOf2 != nil {
		return obj.HexagonQueryOneOf2
	}

	if obj.HexagonQueryOneOf3 != nil {
		return obj.HexagonQueryOneOf3
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj HexagonQuery) GetActualInstanceValue() (interface{}) {
	if obj.HexagonQueryOneOf != nil {
		return *obj.HexagonQueryOneOf
	}

	if obj.HexagonQueryOneOf1 != nil {
		return *obj.HexagonQueryOneOf1
	}

	if obj.HexagonQueryOneOf2 != nil {
		return *obj.HexagonQueryOneOf2
	}

	if obj.HexagonQueryOneOf3 != nil {
		return *obj.HexagonQueryOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableHexagonQuery struct {
	value *HexagonQuery
	isSet bool
}

func (v NullableHexagonQuery) Get() *HexagonQuery {
	return v.value
}

func (v *NullableHexagonQuery) Set(val *HexagonQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableHexagonQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableHexagonQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHexagonQuery(val *HexagonQuery) *NullableHexagonQuery {
	return &NullableHexagonQuery{value: val, isSet: true}
}

func (v NullableHexagonQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHexagonQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


