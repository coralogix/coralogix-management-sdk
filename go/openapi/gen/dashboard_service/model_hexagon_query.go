/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// HexagonQuery - struct for HexagonQuery
type HexagonQuery struct {
	HexagonQueryDataprime *HexagonQueryDataprime
	HexagonQueryLogs *HexagonQueryLogs
	HexagonQueryMetrics *HexagonQueryMetrics
	HexagonQuerySpans *HexagonQuerySpans
}

// HexagonQueryDataprimeAsHexagonQuery is a convenience function that returns HexagonQueryDataprime wrapped in HexagonQuery
func HexagonQueryDataprimeAsHexagonQuery(v *HexagonQueryDataprime) HexagonQuery {
	return HexagonQuery{
		HexagonQueryDataprime: v,
	}
}

// HexagonQueryLogsAsHexagonQuery is a convenience function that returns HexagonQueryLogs wrapped in HexagonQuery
func HexagonQueryLogsAsHexagonQuery(v *HexagonQueryLogs) HexagonQuery {
	return HexagonQuery{
		HexagonQueryLogs: v,
	}
}

// HexagonQueryMetricsAsHexagonQuery is a convenience function that returns HexagonQueryMetrics wrapped in HexagonQuery
func HexagonQueryMetricsAsHexagonQuery(v *HexagonQueryMetrics) HexagonQuery {
	return HexagonQuery{
		HexagonQueryMetrics: v,
	}
}

// HexagonQuerySpansAsHexagonQuery is a convenience function that returns HexagonQuerySpans wrapped in HexagonQuery
func HexagonQuerySpansAsHexagonQuery(v *HexagonQuerySpans) HexagonQuery {
	return HexagonQuery{
		HexagonQuerySpans: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *HexagonQuery) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into HexagonQueryDataprime
	err = newStrictDecoder(data).Decode(&dst.HexagonQueryDataprime)
	if err == nil {
		jsonHexagonQueryDataprime, _ := json.Marshal(dst.HexagonQueryDataprime)
		if string(jsonHexagonQueryDataprime) == "{}" { // empty struct
			dst.HexagonQueryDataprime = nil
		} else {
			if err = validator.Validate(dst.HexagonQueryDataprime); err != nil {
				dst.HexagonQueryDataprime = nil
			} else {
				match++
			}
		}
	} else {
		dst.HexagonQueryDataprime = nil
	}

	// try to unmarshal data into HexagonQueryLogs
	err = newStrictDecoder(data).Decode(&dst.HexagonQueryLogs)
	if err == nil {
		jsonHexagonQueryLogs, _ := json.Marshal(dst.HexagonQueryLogs)
		if string(jsonHexagonQueryLogs) == "{}" { // empty struct
			dst.HexagonQueryLogs = nil
		} else {
			if err = validator.Validate(dst.HexagonQueryLogs); err != nil {
				dst.HexagonQueryLogs = nil
			} else {
				match++
			}
		}
	} else {
		dst.HexagonQueryLogs = nil
	}

	// try to unmarshal data into HexagonQueryMetrics
	err = newStrictDecoder(data).Decode(&dst.HexagonQueryMetrics)
	if err == nil {
		jsonHexagonQueryMetrics, _ := json.Marshal(dst.HexagonQueryMetrics)
		if string(jsonHexagonQueryMetrics) == "{}" { // empty struct
			dst.HexagonQueryMetrics = nil
		} else {
			if err = validator.Validate(dst.HexagonQueryMetrics); err != nil {
				dst.HexagonQueryMetrics = nil
			} else {
				match++
			}
		}
	} else {
		dst.HexagonQueryMetrics = nil
	}

	// try to unmarshal data into HexagonQuerySpans
	err = newStrictDecoder(data).Decode(&dst.HexagonQuerySpans)
	if err == nil {
		jsonHexagonQuerySpans, _ := json.Marshal(dst.HexagonQuerySpans)
		if string(jsonHexagonQuerySpans) == "{}" { // empty struct
			dst.HexagonQuerySpans = nil
		} else {
			if err = validator.Validate(dst.HexagonQuerySpans); err != nil {
				dst.HexagonQuerySpans = nil
			} else {
				match++
			}
		}
	} else {
		dst.HexagonQuerySpans = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.HexagonQueryDataprime = nil
		dst.HexagonQueryLogs = nil
		dst.HexagonQueryMetrics = nil
		dst.HexagonQuerySpans = nil

		return fmt.Errorf("data matches more than one schema in oneOf(HexagonQuery)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(HexagonQuery)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src HexagonQuery) MarshalJSON() ([]byte, error) {
	if src.HexagonQueryDataprime != nil {
		return json.Marshal(&src.HexagonQueryDataprime)
	}

	if src.HexagonQueryLogs != nil {
		return json.Marshal(&src.HexagonQueryLogs)
	}

	if src.HexagonQueryMetrics != nil {
		return json.Marshal(&src.HexagonQueryMetrics)
	}

	if src.HexagonQuerySpans != nil {
		return json.Marshal(&src.HexagonQuerySpans)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *HexagonQuery) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.HexagonQueryDataprime != nil {
		return obj.HexagonQueryDataprime
	}

	if obj.HexagonQueryLogs != nil {
		return obj.HexagonQueryLogs
	}

	if obj.HexagonQueryMetrics != nil {
		return obj.HexagonQueryMetrics
	}

	if obj.HexagonQuerySpans != nil {
		return obj.HexagonQuerySpans
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj HexagonQuery) GetActualInstanceValue() (interface{}) {
	if obj.HexagonQueryDataprime != nil {
		return *obj.HexagonQueryDataprime
	}

	if obj.HexagonQueryLogs != nil {
		return *obj.HexagonQueryLogs
	}

	if obj.HexagonQueryMetrics != nil {
		return *obj.HexagonQueryMetrics
	}

	if obj.HexagonQuerySpans != nil {
		return *obj.HexagonQuerySpans
	}

	// all schemas are nil
	return nil
}

type NullableHexagonQuery struct {
	value *HexagonQuery
	isSet bool
}

func (v NullableHexagonQuery) Get() *HexagonQuery {
	return v.value
}

func (v *NullableHexagonQuery) Set(val *HexagonQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableHexagonQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableHexagonQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHexagonQuery(val *HexagonQuery) *NullableHexagonQuery {
	return &NullableHexagonQuery{value: val, isSet: true}
}

func (v NullableHexagonQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHexagonQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


