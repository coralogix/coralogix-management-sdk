/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// TextboxDefaultValue - struct for TextboxDefaultValue
type TextboxDefaultValue struct {
	TextboxDefaultValueOneOf *TextboxDefaultValueOneOf
	TextboxDefaultValueOneOf1 *TextboxDefaultValueOneOf1
	TextboxDefaultValueOneOf2 *TextboxDefaultValueOneOf2
	TextboxDefaultValueOneOf3 *TextboxDefaultValueOneOf3
	TextboxDefaultValueOneOf4 *TextboxDefaultValueOneOf4
	TextboxDefaultValueOneOf5 *TextboxDefaultValueOneOf5
	TextboxDefaultValueOneOf6 *TextboxDefaultValueOneOf6
}

// TextboxDefaultValueOneOfAsTextboxDefaultValue is a convenience function that returns TextboxDefaultValueOneOf wrapped in TextboxDefaultValue
func TextboxDefaultValueOneOfAsTextboxDefaultValue(v *TextboxDefaultValueOneOf) TextboxDefaultValue {
	return TextboxDefaultValue{
		TextboxDefaultValueOneOf: v,
	}
}

// TextboxDefaultValueOneOf1AsTextboxDefaultValue is a convenience function that returns TextboxDefaultValueOneOf1 wrapped in TextboxDefaultValue
func TextboxDefaultValueOneOf1AsTextboxDefaultValue(v *TextboxDefaultValueOneOf1) TextboxDefaultValue {
	return TextboxDefaultValue{
		TextboxDefaultValueOneOf1: v,
	}
}

// TextboxDefaultValueOneOf2AsTextboxDefaultValue is a convenience function that returns TextboxDefaultValueOneOf2 wrapped in TextboxDefaultValue
func TextboxDefaultValueOneOf2AsTextboxDefaultValue(v *TextboxDefaultValueOneOf2) TextboxDefaultValue {
	return TextboxDefaultValue{
		TextboxDefaultValueOneOf2: v,
	}
}

// TextboxDefaultValueOneOf3AsTextboxDefaultValue is a convenience function that returns TextboxDefaultValueOneOf3 wrapped in TextboxDefaultValue
func TextboxDefaultValueOneOf3AsTextboxDefaultValue(v *TextboxDefaultValueOneOf3) TextboxDefaultValue {
	return TextboxDefaultValue{
		TextboxDefaultValueOneOf3: v,
	}
}

// TextboxDefaultValueOneOf4AsTextboxDefaultValue is a convenience function that returns TextboxDefaultValueOneOf4 wrapped in TextboxDefaultValue
func TextboxDefaultValueOneOf4AsTextboxDefaultValue(v *TextboxDefaultValueOneOf4) TextboxDefaultValue {
	return TextboxDefaultValue{
		TextboxDefaultValueOneOf4: v,
	}
}

// TextboxDefaultValueOneOf5AsTextboxDefaultValue is a convenience function that returns TextboxDefaultValueOneOf5 wrapped in TextboxDefaultValue
func TextboxDefaultValueOneOf5AsTextboxDefaultValue(v *TextboxDefaultValueOneOf5) TextboxDefaultValue {
	return TextboxDefaultValue{
		TextboxDefaultValueOneOf5: v,
	}
}

// TextboxDefaultValueOneOf6AsTextboxDefaultValue is a convenience function that returns TextboxDefaultValueOneOf6 wrapped in TextboxDefaultValue
func TextboxDefaultValueOneOf6AsTextboxDefaultValue(v *TextboxDefaultValueOneOf6) TextboxDefaultValue {
	return TextboxDefaultValue{
		TextboxDefaultValueOneOf6: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TextboxDefaultValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TextboxDefaultValueOneOf
	err = newStrictDecoder(data).Decode(&dst.TextboxDefaultValueOneOf)
	if err == nil {
		jsonTextboxDefaultValueOneOf, _ := json.Marshal(dst.TextboxDefaultValueOneOf)
		if string(jsonTextboxDefaultValueOneOf) == "{}" { // empty struct
			dst.TextboxDefaultValueOneOf = nil
		} else {
			if err = validator.Validate(dst.TextboxDefaultValueOneOf); err != nil {
				dst.TextboxDefaultValueOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextboxDefaultValueOneOf = nil
	}

	// try to unmarshal data into TextboxDefaultValueOneOf1
	err = newStrictDecoder(data).Decode(&dst.TextboxDefaultValueOneOf1)
	if err == nil {
		jsonTextboxDefaultValueOneOf1, _ := json.Marshal(dst.TextboxDefaultValueOneOf1)
		if string(jsonTextboxDefaultValueOneOf1) == "{}" { // empty struct
			dst.TextboxDefaultValueOneOf1 = nil
		} else {
			if err = validator.Validate(dst.TextboxDefaultValueOneOf1); err != nil {
				dst.TextboxDefaultValueOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextboxDefaultValueOneOf1 = nil
	}

	// try to unmarshal data into TextboxDefaultValueOneOf2
	err = newStrictDecoder(data).Decode(&dst.TextboxDefaultValueOneOf2)
	if err == nil {
		jsonTextboxDefaultValueOneOf2, _ := json.Marshal(dst.TextboxDefaultValueOneOf2)
		if string(jsonTextboxDefaultValueOneOf2) == "{}" { // empty struct
			dst.TextboxDefaultValueOneOf2 = nil
		} else {
			if err = validator.Validate(dst.TextboxDefaultValueOneOf2); err != nil {
				dst.TextboxDefaultValueOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextboxDefaultValueOneOf2 = nil
	}

	// try to unmarshal data into TextboxDefaultValueOneOf3
	err = newStrictDecoder(data).Decode(&dst.TextboxDefaultValueOneOf3)
	if err == nil {
		jsonTextboxDefaultValueOneOf3, _ := json.Marshal(dst.TextboxDefaultValueOneOf3)
		if string(jsonTextboxDefaultValueOneOf3) == "{}" { // empty struct
			dst.TextboxDefaultValueOneOf3 = nil
		} else {
			if err = validator.Validate(dst.TextboxDefaultValueOneOf3); err != nil {
				dst.TextboxDefaultValueOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextboxDefaultValueOneOf3 = nil
	}

	// try to unmarshal data into TextboxDefaultValueOneOf4
	err = newStrictDecoder(data).Decode(&dst.TextboxDefaultValueOneOf4)
	if err == nil {
		jsonTextboxDefaultValueOneOf4, _ := json.Marshal(dst.TextboxDefaultValueOneOf4)
		if string(jsonTextboxDefaultValueOneOf4) == "{}" { // empty struct
			dst.TextboxDefaultValueOneOf4 = nil
		} else {
			if err = validator.Validate(dst.TextboxDefaultValueOneOf4); err != nil {
				dst.TextboxDefaultValueOneOf4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextboxDefaultValueOneOf4 = nil
	}

	// try to unmarshal data into TextboxDefaultValueOneOf5
	err = newStrictDecoder(data).Decode(&dst.TextboxDefaultValueOneOf5)
	if err == nil {
		jsonTextboxDefaultValueOneOf5, _ := json.Marshal(dst.TextboxDefaultValueOneOf5)
		if string(jsonTextboxDefaultValueOneOf5) == "{}" { // empty struct
			dst.TextboxDefaultValueOneOf5 = nil
		} else {
			if err = validator.Validate(dst.TextboxDefaultValueOneOf5); err != nil {
				dst.TextboxDefaultValueOneOf5 = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextboxDefaultValueOneOf5 = nil
	}

	// try to unmarshal data into TextboxDefaultValueOneOf6
	err = newStrictDecoder(data).Decode(&dst.TextboxDefaultValueOneOf6)
	if err == nil {
		jsonTextboxDefaultValueOneOf6, _ := json.Marshal(dst.TextboxDefaultValueOneOf6)
		if string(jsonTextboxDefaultValueOneOf6) == "{}" { // empty struct
			dst.TextboxDefaultValueOneOf6 = nil
		} else {
			if err = validator.Validate(dst.TextboxDefaultValueOneOf6); err != nil {
				dst.TextboxDefaultValueOneOf6 = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextboxDefaultValueOneOf6 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TextboxDefaultValueOneOf = nil
		dst.TextboxDefaultValueOneOf1 = nil
		dst.TextboxDefaultValueOneOf2 = nil
		dst.TextboxDefaultValueOneOf3 = nil
		dst.TextboxDefaultValueOneOf4 = nil
		dst.TextboxDefaultValueOneOf5 = nil
		dst.TextboxDefaultValueOneOf6 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TextboxDefaultValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TextboxDefaultValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TextboxDefaultValue) MarshalJSON() ([]byte, error) {
	if src.TextboxDefaultValueOneOf != nil {
		return json.Marshal(&src.TextboxDefaultValueOneOf)
	}

	if src.TextboxDefaultValueOneOf1 != nil {
		return json.Marshal(&src.TextboxDefaultValueOneOf1)
	}

	if src.TextboxDefaultValueOneOf2 != nil {
		return json.Marshal(&src.TextboxDefaultValueOneOf2)
	}

	if src.TextboxDefaultValueOneOf3 != nil {
		return json.Marshal(&src.TextboxDefaultValueOneOf3)
	}

	if src.TextboxDefaultValueOneOf4 != nil {
		return json.Marshal(&src.TextboxDefaultValueOneOf4)
	}

	if src.TextboxDefaultValueOneOf5 != nil {
		return json.Marshal(&src.TextboxDefaultValueOneOf5)
	}

	if src.TextboxDefaultValueOneOf6 != nil {
		return json.Marshal(&src.TextboxDefaultValueOneOf6)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TextboxDefaultValue) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TextboxDefaultValueOneOf != nil {
		return obj.TextboxDefaultValueOneOf
	}

	if obj.TextboxDefaultValueOneOf1 != nil {
		return obj.TextboxDefaultValueOneOf1
	}

	if obj.TextboxDefaultValueOneOf2 != nil {
		return obj.TextboxDefaultValueOneOf2
	}

	if obj.TextboxDefaultValueOneOf3 != nil {
		return obj.TextboxDefaultValueOneOf3
	}

	if obj.TextboxDefaultValueOneOf4 != nil {
		return obj.TextboxDefaultValueOneOf4
	}

	if obj.TextboxDefaultValueOneOf5 != nil {
		return obj.TextboxDefaultValueOneOf5
	}

	if obj.TextboxDefaultValueOneOf6 != nil {
		return obj.TextboxDefaultValueOneOf6
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj TextboxDefaultValue) GetActualInstanceValue() (interface{}) {
	if obj.TextboxDefaultValueOneOf != nil {
		return *obj.TextboxDefaultValueOneOf
	}

	if obj.TextboxDefaultValueOneOf1 != nil {
		return *obj.TextboxDefaultValueOneOf1
	}

	if obj.TextboxDefaultValueOneOf2 != nil {
		return *obj.TextboxDefaultValueOneOf2
	}

	if obj.TextboxDefaultValueOneOf3 != nil {
		return *obj.TextboxDefaultValueOneOf3
	}

	if obj.TextboxDefaultValueOneOf4 != nil {
		return *obj.TextboxDefaultValueOneOf4
	}

	if obj.TextboxDefaultValueOneOf5 != nil {
		return *obj.TextboxDefaultValueOneOf5
	}

	if obj.TextboxDefaultValueOneOf6 != nil {
		return *obj.TextboxDefaultValueOneOf6
	}

	// all schemas are nil
	return nil
}

type NullableTextboxDefaultValue struct {
	value *TextboxDefaultValue
	isSet bool
}

func (v NullableTextboxDefaultValue) Get() *TextboxDefaultValue {
	return v.value
}

func (v *NullableTextboxDefaultValue) Set(val *TextboxDefaultValue) {
	v.value = val
	v.isSet = true
}

func (v NullableTextboxDefaultValue) IsSet() bool {
	return v.isSet
}

func (v *NullableTextboxDefaultValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextboxDefaultValue(val *TextboxDefaultValue) *NullableTextboxDefaultValue {
	return &NullableTextboxDefaultValue{value: val, isSet: true}
}

func (v NullableTextboxDefaultValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextboxDefaultValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


