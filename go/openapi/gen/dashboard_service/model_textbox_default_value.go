/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// TextboxDefaultValue - struct for TextboxDefaultValue
type TextboxDefaultValue struct {
	TextboxDefaultValueDefaultIntervalValue *TextboxDefaultValueDefaultIntervalValue
	TextboxDefaultValueDefaultLuceneValue *TextboxDefaultValueDefaultLuceneValue
	TextboxDefaultValueDefaultNumericValue *TextboxDefaultValueDefaultNumericValue
	TextboxDefaultValueDefaultRegexValue *TextboxDefaultValueDefaultRegexValue
	TextboxDefaultValueDefaultStringValue *TextboxDefaultValueDefaultStringValue
	TextboxDefaultValueSingleNumeric *TextboxDefaultValueSingleNumeric
	TextboxDefaultValueSingleString *TextboxDefaultValueSingleString
}

// TextboxDefaultValueDefaultIntervalValueAsTextboxDefaultValue is a convenience function that returns TextboxDefaultValueDefaultIntervalValue wrapped in TextboxDefaultValue
func TextboxDefaultValueDefaultIntervalValueAsTextboxDefaultValue(v *TextboxDefaultValueDefaultIntervalValue) TextboxDefaultValue {
	return TextboxDefaultValue{
		TextboxDefaultValueDefaultIntervalValue: v,
	}
}

// TextboxDefaultValueDefaultLuceneValueAsTextboxDefaultValue is a convenience function that returns TextboxDefaultValueDefaultLuceneValue wrapped in TextboxDefaultValue
func TextboxDefaultValueDefaultLuceneValueAsTextboxDefaultValue(v *TextboxDefaultValueDefaultLuceneValue) TextboxDefaultValue {
	return TextboxDefaultValue{
		TextboxDefaultValueDefaultLuceneValue: v,
	}
}

// TextboxDefaultValueDefaultNumericValueAsTextboxDefaultValue is a convenience function that returns TextboxDefaultValueDefaultNumericValue wrapped in TextboxDefaultValue
func TextboxDefaultValueDefaultNumericValueAsTextboxDefaultValue(v *TextboxDefaultValueDefaultNumericValue) TextboxDefaultValue {
	return TextboxDefaultValue{
		TextboxDefaultValueDefaultNumericValue: v,
	}
}

// TextboxDefaultValueDefaultRegexValueAsTextboxDefaultValue is a convenience function that returns TextboxDefaultValueDefaultRegexValue wrapped in TextboxDefaultValue
func TextboxDefaultValueDefaultRegexValueAsTextboxDefaultValue(v *TextboxDefaultValueDefaultRegexValue) TextboxDefaultValue {
	return TextboxDefaultValue{
		TextboxDefaultValueDefaultRegexValue: v,
	}
}

// TextboxDefaultValueDefaultStringValueAsTextboxDefaultValue is a convenience function that returns TextboxDefaultValueDefaultStringValue wrapped in TextboxDefaultValue
func TextboxDefaultValueDefaultStringValueAsTextboxDefaultValue(v *TextboxDefaultValueDefaultStringValue) TextboxDefaultValue {
	return TextboxDefaultValue{
		TextboxDefaultValueDefaultStringValue: v,
	}
}

// TextboxDefaultValueSingleNumericAsTextboxDefaultValue is a convenience function that returns TextboxDefaultValueSingleNumeric wrapped in TextboxDefaultValue
func TextboxDefaultValueSingleNumericAsTextboxDefaultValue(v *TextboxDefaultValueSingleNumeric) TextboxDefaultValue {
	return TextboxDefaultValue{
		TextboxDefaultValueSingleNumeric: v,
	}
}

// TextboxDefaultValueSingleStringAsTextboxDefaultValue is a convenience function that returns TextboxDefaultValueSingleString wrapped in TextboxDefaultValue
func TextboxDefaultValueSingleStringAsTextboxDefaultValue(v *TextboxDefaultValueSingleString) TextboxDefaultValue {
	return TextboxDefaultValue{
		TextboxDefaultValueSingleString: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TextboxDefaultValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TextboxDefaultValueDefaultIntervalValue
	err = newStrictDecoder(data).Decode(&dst.TextboxDefaultValueDefaultIntervalValue)
	if err == nil {
		jsonTextboxDefaultValueDefaultIntervalValue, _ := json.Marshal(dst.TextboxDefaultValueDefaultIntervalValue)
		if string(jsonTextboxDefaultValueDefaultIntervalValue) == "{}" { // empty struct
			dst.TextboxDefaultValueDefaultIntervalValue = nil
		} else {
			if err = validator.Validate(dst.TextboxDefaultValueDefaultIntervalValue); err != nil {
				dst.TextboxDefaultValueDefaultIntervalValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextboxDefaultValueDefaultIntervalValue = nil
	}

	// try to unmarshal data into TextboxDefaultValueDefaultLuceneValue
	err = newStrictDecoder(data).Decode(&dst.TextboxDefaultValueDefaultLuceneValue)
	if err == nil {
		jsonTextboxDefaultValueDefaultLuceneValue, _ := json.Marshal(dst.TextboxDefaultValueDefaultLuceneValue)
		if string(jsonTextboxDefaultValueDefaultLuceneValue) == "{}" { // empty struct
			dst.TextboxDefaultValueDefaultLuceneValue = nil
		} else {
			if err = validator.Validate(dst.TextboxDefaultValueDefaultLuceneValue); err != nil {
				dst.TextboxDefaultValueDefaultLuceneValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextboxDefaultValueDefaultLuceneValue = nil
	}

	// try to unmarshal data into TextboxDefaultValueDefaultNumericValue
	err = newStrictDecoder(data).Decode(&dst.TextboxDefaultValueDefaultNumericValue)
	if err == nil {
		jsonTextboxDefaultValueDefaultNumericValue, _ := json.Marshal(dst.TextboxDefaultValueDefaultNumericValue)
		if string(jsonTextboxDefaultValueDefaultNumericValue) == "{}" { // empty struct
			dst.TextboxDefaultValueDefaultNumericValue = nil
		} else {
			if err = validator.Validate(dst.TextboxDefaultValueDefaultNumericValue); err != nil {
				dst.TextboxDefaultValueDefaultNumericValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextboxDefaultValueDefaultNumericValue = nil
	}

	// try to unmarshal data into TextboxDefaultValueDefaultRegexValue
	err = newStrictDecoder(data).Decode(&dst.TextboxDefaultValueDefaultRegexValue)
	if err == nil {
		jsonTextboxDefaultValueDefaultRegexValue, _ := json.Marshal(dst.TextboxDefaultValueDefaultRegexValue)
		if string(jsonTextboxDefaultValueDefaultRegexValue) == "{}" { // empty struct
			dst.TextboxDefaultValueDefaultRegexValue = nil
		} else {
			if err = validator.Validate(dst.TextboxDefaultValueDefaultRegexValue); err != nil {
				dst.TextboxDefaultValueDefaultRegexValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextboxDefaultValueDefaultRegexValue = nil
	}

	// try to unmarshal data into TextboxDefaultValueDefaultStringValue
	err = newStrictDecoder(data).Decode(&dst.TextboxDefaultValueDefaultStringValue)
	if err == nil {
		jsonTextboxDefaultValueDefaultStringValue, _ := json.Marshal(dst.TextboxDefaultValueDefaultStringValue)
		if string(jsonTextboxDefaultValueDefaultStringValue) == "{}" { // empty struct
			dst.TextboxDefaultValueDefaultStringValue = nil
		} else {
			if err = validator.Validate(dst.TextboxDefaultValueDefaultStringValue); err != nil {
				dst.TextboxDefaultValueDefaultStringValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextboxDefaultValueDefaultStringValue = nil
	}

	// try to unmarshal data into TextboxDefaultValueSingleNumeric
	err = newStrictDecoder(data).Decode(&dst.TextboxDefaultValueSingleNumeric)
	if err == nil {
		jsonTextboxDefaultValueSingleNumeric, _ := json.Marshal(dst.TextboxDefaultValueSingleNumeric)
		if string(jsonTextboxDefaultValueSingleNumeric) == "{}" { // empty struct
			dst.TextboxDefaultValueSingleNumeric = nil
		} else {
			if err = validator.Validate(dst.TextboxDefaultValueSingleNumeric); err != nil {
				dst.TextboxDefaultValueSingleNumeric = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextboxDefaultValueSingleNumeric = nil
	}

	// try to unmarshal data into TextboxDefaultValueSingleString
	err = newStrictDecoder(data).Decode(&dst.TextboxDefaultValueSingleString)
	if err == nil {
		jsonTextboxDefaultValueSingleString, _ := json.Marshal(dst.TextboxDefaultValueSingleString)
		if string(jsonTextboxDefaultValueSingleString) == "{}" { // empty struct
			dst.TextboxDefaultValueSingleString = nil
		} else {
			if err = validator.Validate(dst.TextboxDefaultValueSingleString); err != nil {
				dst.TextboxDefaultValueSingleString = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextboxDefaultValueSingleString = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TextboxDefaultValueDefaultIntervalValue = nil
		dst.TextboxDefaultValueDefaultLuceneValue = nil
		dst.TextboxDefaultValueDefaultNumericValue = nil
		dst.TextboxDefaultValueDefaultRegexValue = nil
		dst.TextboxDefaultValueDefaultStringValue = nil
		dst.TextboxDefaultValueSingleNumeric = nil
		dst.TextboxDefaultValueSingleString = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TextboxDefaultValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TextboxDefaultValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TextboxDefaultValue) MarshalJSON() ([]byte, error) {
	if src.TextboxDefaultValueDefaultIntervalValue != nil {
		return json.Marshal(&src.TextboxDefaultValueDefaultIntervalValue)
	}

	if src.TextboxDefaultValueDefaultLuceneValue != nil {
		return json.Marshal(&src.TextboxDefaultValueDefaultLuceneValue)
	}

	if src.TextboxDefaultValueDefaultNumericValue != nil {
		return json.Marshal(&src.TextboxDefaultValueDefaultNumericValue)
	}

	if src.TextboxDefaultValueDefaultRegexValue != nil {
		return json.Marshal(&src.TextboxDefaultValueDefaultRegexValue)
	}

	if src.TextboxDefaultValueDefaultStringValue != nil {
		return json.Marshal(&src.TextboxDefaultValueDefaultStringValue)
	}

	if src.TextboxDefaultValueSingleNumeric != nil {
		return json.Marshal(&src.TextboxDefaultValueSingleNumeric)
	}

	if src.TextboxDefaultValueSingleString != nil {
		return json.Marshal(&src.TextboxDefaultValueSingleString)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TextboxDefaultValue) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TextboxDefaultValueDefaultIntervalValue != nil {
		return obj.TextboxDefaultValueDefaultIntervalValue
	}

	if obj.TextboxDefaultValueDefaultLuceneValue != nil {
		return obj.TextboxDefaultValueDefaultLuceneValue
	}

	if obj.TextboxDefaultValueDefaultNumericValue != nil {
		return obj.TextboxDefaultValueDefaultNumericValue
	}

	if obj.TextboxDefaultValueDefaultRegexValue != nil {
		return obj.TextboxDefaultValueDefaultRegexValue
	}

	if obj.TextboxDefaultValueDefaultStringValue != nil {
		return obj.TextboxDefaultValueDefaultStringValue
	}

	if obj.TextboxDefaultValueSingleNumeric != nil {
		return obj.TextboxDefaultValueSingleNumeric
	}

	if obj.TextboxDefaultValueSingleString != nil {
		return obj.TextboxDefaultValueSingleString
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj TextboxDefaultValue) GetActualInstanceValue() (interface{}) {
	if obj.TextboxDefaultValueDefaultIntervalValue != nil {
		return *obj.TextboxDefaultValueDefaultIntervalValue
	}

	if obj.TextboxDefaultValueDefaultLuceneValue != nil {
		return *obj.TextboxDefaultValueDefaultLuceneValue
	}

	if obj.TextboxDefaultValueDefaultNumericValue != nil {
		return *obj.TextboxDefaultValueDefaultNumericValue
	}

	if obj.TextboxDefaultValueDefaultRegexValue != nil {
		return *obj.TextboxDefaultValueDefaultRegexValue
	}

	if obj.TextboxDefaultValueDefaultStringValue != nil {
		return *obj.TextboxDefaultValueDefaultStringValue
	}

	if obj.TextboxDefaultValueSingleNumeric != nil {
		return *obj.TextboxDefaultValueSingleNumeric
	}

	if obj.TextboxDefaultValueSingleString != nil {
		return *obj.TextboxDefaultValueSingleString
	}

	// all schemas are nil
	return nil
}

type NullableTextboxDefaultValue struct {
	value *TextboxDefaultValue
	isSet bool
}

func (v NullableTextboxDefaultValue) Get() *TextboxDefaultValue {
	return v.value
}

func (v *NullableTextboxDefaultValue) Set(val *TextboxDefaultValue) {
	v.value = val
	v.isSet = true
}

func (v NullableTextboxDefaultValue) IsSet() bool {
	return v.isSet
}

func (v *NullableTextboxDefaultValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextboxDefaultValue(val *TextboxDefaultValue) *NullableTextboxDefaultValue {
	return &NullableTextboxDefaultValue{value: val, isSet: true}
}

func (v NullableTextboxDefaultValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextboxDefaultValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


