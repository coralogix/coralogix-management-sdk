/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard_service

import (
	"encoding/json"
	"fmt"
)

// MultiSelectRefreshStrategy the model 'MultiSelectRefreshStrategy'
type MultiSelectRefreshStrategy string

// List of MultiSelect.RefreshStrategy
const (
	MULTISELECTREFRESHSTRATEGY_REFRESH_STRATEGY_UNSPECIFIED MultiSelectRefreshStrategy = "REFRESH_STRATEGY_UNSPECIFIED"
	MULTISELECTREFRESHSTRATEGY_REFRESH_STRATEGY_ON_DASHBOARD_LOAD MultiSelectRefreshStrategy = "REFRESH_STRATEGY_ON_DASHBOARD_LOAD"
	MULTISELECTREFRESHSTRATEGY_REFRESH_STRATEGY_ON_TIME_FRAME_CHANGE MultiSelectRefreshStrategy = "REFRESH_STRATEGY_ON_TIME_FRAME_CHANGE"
)

// All allowed values of MultiSelectRefreshStrategy enum
var AllowedMultiSelectRefreshStrategyEnumValues = []MultiSelectRefreshStrategy{
	"REFRESH_STRATEGY_UNSPECIFIED",
	"REFRESH_STRATEGY_ON_DASHBOARD_LOAD",
	"REFRESH_STRATEGY_ON_TIME_FRAME_CHANGE",
}

func (v *MultiSelectRefreshStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MultiSelectRefreshStrategy(value)
	for _, existing := range AllowedMultiSelectRefreshStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MultiSelectRefreshStrategy", value)
}

// NewMultiSelectRefreshStrategyFromValue returns a pointer to a valid MultiSelectRefreshStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMultiSelectRefreshStrategyFromValue(v string) (*MultiSelectRefreshStrategy, error) {
	ev := MultiSelectRefreshStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MultiSelectRefreshStrategy: valid values are %v", v, AllowedMultiSelectRefreshStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MultiSelectRefreshStrategy) IsValid() bool {
	for _, existing := range AllowedMultiSelectRefreshStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MultiSelect.RefreshStrategy value
func (v MultiSelectRefreshStrategy) Ptr() *MultiSelectRefreshStrategy {
	return &v
}

type NullableMultiSelectRefreshStrategy struct {
	value *MultiSelectRefreshStrategy
	isSet bool
}

func (v NullableMultiSelectRefreshStrategy) Get() *MultiSelectRefreshStrategy {
	return v.value
}

func (v *NullableMultiSelectRefreshStrategy) Set(val *MultiSelectRefreshStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiSelectRefreshStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiSelectRefreshStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiSelectRefreshStrategy(val *MultiSelectRefreshStrategy) *NullableMultiSelectRefreshStrategy {
	return &NullableMultiSelectRefreshStrategy{value: val, isSet: true}
}

func (v NullableMultiSelectRefreshStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiSelectRefreshStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

