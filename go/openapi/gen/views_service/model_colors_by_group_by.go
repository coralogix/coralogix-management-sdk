/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package views_service

import (
	"encoding/json"
)

// checks if the ColorsByGroupBy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ColorsByGroupBy{}

// ColorsByGroupBy struct for ColorsByGroupBy
type ColorsByGroupBy struct {
	GroupBy *ColorsByGroupBy `json:"groupBy,omitempty"`
}

// NewColorsByGroupBy instantiates a new ColorsByGroupBy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColorsByGroupBy() *ColorsByGroupBy {
	this := ColorsByGroupBy{}
	return &this
}

// NewColorsByGroupByWithDefaults instantiates a new ColorsByGroupBy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColorsByGroupByWithDefaults() *ColorsByGroupBy {
	this := ColorsByGroupBy{}
	return &this
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *ColorsByGroupBy) GetGroupBy() ColorsByGroupBy {
	if o == nil || IsNil(o.GroupBy) {
		var ret ColorsByGroupBy
		return ret
	}
	return *o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorsByGroupBy) GetGroupByOk() (*ColorsByGroupBy, bool) {
	if o == nil || IsNil(o.GroupBy) {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *ColorsByGroupBy) HasGroupBy() bool {
	if o != nil && !IsNil(o.GroupBy) {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given ColorsByGroupBy and assigns it to the GroupBy field.
func (o *ColorsByGroupBy) SetGroupBy(v ColorsByGroupBy) {
	o.GroupBy = &v
}

func (o ColorsByGroupBy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ColorsByGroupBy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupBy) {
		toSerialize["groupBy"] = o.GroupBy
	}
	return toSerialize, nil
}

type NullableColorsByGroupBy struct {
	value *ColorsByGroupBy
	isSet bool
}

func (v NullableColorsByGroupBy) Get() *ColorsByGroupBy {
	return v.value
}

func (v *NullableColorsByGroupBy) Set(val *ColorsByGroupBy) {
	v.value = val
	v.isSet = true
}

func (v NullableColorsByGroupBy) IsSet() bool {
	return v.isSet
}

func (v *NullableColorsByGroupBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColorsByGroupBy(val *ColorsByGroupBy) *NullableColorsByGroupBy {
	return &NullableColorsByGroupBy{value: val, isSet: true}
}

func (v NullableColorsByGroupBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColorsByGroupBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


