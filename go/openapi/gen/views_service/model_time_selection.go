/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package views_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// TimeSelection - struct for TimeSelection
type TimeSelection struct {
	TimeSelectionCustomSelection *TimeSelectionCustomSelection
	TimeSelectionQuickSelection *TimeSelectionQuickSelection
}

// TimeSelectionCustomSelectionAsTimeSelection is a convenience function that returns TimeSelectionCustomSelection wrapped in TimeSelection
func TimeSelectionCustomSelectionAsTimeSelection(v *TimeSelectionCustomSelection) TimeSelection {
	return TimeSelection{
		TimeSelectionCustomSelection: v,
	}
}

// TimeSelectionQuickSelectionAsTimeSelection is a convenience function that returns TimeSelectionQuickSelection wrapped in TimeSelection
func TimeSelectionQuickSelectionAsTimeSelection(v *TimeSelectionQuickSelection) TimeSelection {
	return TimeSelection{
		TimeSelectionQuickSelection: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TimeSelection) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TimeSelectionCustomSelection
	err = newStrictDecoder(data).Decode(&dst.TimeSelectionCustomSelection)
	if err == nil {
		jsonTimeSelectionCustomSelection, _ := json.Marshal(dst.TimeSelectionCustomSelection)
		if string(jsonTimeSelectionCustomSelection) == "{}" { // empty struct
			dst.TimeSelectionCustomSelection = nil
		} else {
			if err = validator.Validate(dst.TimeSelectionCustomSelection); err != nil {
				dst.TimeSelectionCustomSelection = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimeSelectionCustomSelection = nil
	}

	// try to unmarshal data into TimeSelectionQuickSelection
	err = newStrictDecoder(data).Decode(&dst.TimeSelectionQuickSelection)
	if err == nil {
		jsonTimeSelectionQuickSelection, _ := json.Marshal(dst.TimeSelectionQuickSelection)
		if string(jsonTimeSelectionQuickSelection) == "{}" { // empty struct
			dst.TimeSelectionQuickSelection = nil
		} else {
			if err = validator.Validate(dst.TimeSelectionQuickSelection); err != nil {
				dst.TimeSelectionQuickSelection = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimeSelectionQuickSelection = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TimeSelectionCustomSelection = nil
		dst.TimeSelectionQuickSelection = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TimeSelection)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TimeSelection)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TimeSelection) MarshalJSON() ([]byte, error) {
	if src.TimeSelectionCustomSelection != nil {
		return json.Marshal(&src.TimeSelectionCustomSelection)
	}

	if src.TimeSelectionQuickSelection != nil {
		return json.Marshal(&src.TimeSelectionQuickSelection)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TimeSelection) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TimeSelectionCustomSelection != nil {
		return obj.TimeSelectionCustomSelection
	}

	if obj.TimeSelectionQuickSelection != nil {
		return obj.TimeSelectionQuickSelection
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj TimeSelection) GetActualInstanceValue() (interface{}) {
	if obj.TimeSelectionCustomSelection != nil {
		return *obj.TimeSelectionCustomSelection
	}

	if obj.TimeSelectionQuickSelection != nil {
		return *obj.TimeSelectionQuickSelection
	}

	// all schemas are nil
	return nil
}

type NullableTimeSelection struct {
	value *TimeSelection
	isSet bool
}

func (v NullableTimeSelection) Get() *TimeSelection {
	return v.value
}

func (v *NullableTimeSelection) Set(val *TimeSelection) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeSelection) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeSelection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeSelection(val *TimeSelection) *NullableTimeSelection {
	return &NullableTimeSelection{value: val, isSet: true}
}

func (v NullableTimeSelection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeSelection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


