/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package views_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ViewsV1Filter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewsV1Filter{}

// ViewsV1Filter View folder.
type ViewsV1Filter struct {
	// Filter name
	Name string `json:"name"`
	// Filter selected values
	SelectedValues map[string]bool `json:"selectedValues"`
}

type _ViewsV1Filter ViewsV1Filter

// NewViewsV1Filter instantiates a new ViewsV1Filter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewsV1Filter(name string, selectedValues map[string]bool) *ViewsV1Filter {
	this := ViewsV1Filter{}
	this.Name = name
	this.SelectedValues = selectedValues
	return &this
}

// NewViewsV1FilterWithDefaults instantiates a new ViewsV1Filter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewsV1FilterWithDefaults() *ViewsV1Filter {
	this := ViewsV1Filter{}
	return &this
}

// GetName returns the Name field value
func (o *ViewsV1Filter) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ViewsV1Filter) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ViewsV1Filter) SetName(v string) {
	o.Name = v
}

// GetSelectedValues returns the SelectedValues field value
func (o *ViewsV1Filter) GetSelectedValues() map[string]bool {
	if o == nil {
		var ret map[string]bool
		return ret
	}

	return o.SelectedValues
}

// GetSelectedValuesOk returns a tuple with the SelectedValues field value
// and a boolean to check if the value has been set.
func (o *ViewsV1Filter) GetSelectedValuesOk() (*map[string]bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SelectedValues, true
}

// SetSelectedValues sets field value
func (o *ViewsV1Filter) SetSelectedValues(v map[string]bool) {
	o.SelectedValues = v
}

func (o ViewsV1Filter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewsV1Filter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["selectedValues"] = o.SelectedValues
	return toSerialize, nil
}

func (o *ViewsV1Filter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"selectedValues",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varViewsV1Filter := _ViewsV1Filter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varViewsV1Filter)

	if err != nil {
		return err
	}

	*o = ViewsV1Filter(varViewsV1Filter)

	return err
}

type NullableViewsV1Filter struct {
	value *ViewsV1Filter
	isSet bool
}

func (v NullableViewsV1Filter) Get() *ViewsV1Filter {
	return v.value
}

func (v *NullableViewsV1Filter) Set(val *ViewsV1Filter) {
	v.value = val
	v.isSet = true
}

func (v NullableViewsV1Filter) IsSet() bool {
	return v.isSet
}

func (v *NullableViewsV1Filter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewsV1Filter(val *ViewsV1Filter) *NullableViewsV1Filter {
	return &NullableViewsV1Filter{value: val, isSet: true}
}

func (v NullableViewsV1Filter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewsV1Filter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


