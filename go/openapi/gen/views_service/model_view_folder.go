/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package views_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ViewFolder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewFolder{}

// ViewFolder View folder.
type ViewFolder struct {
	Filters *SelectedFilters `json:"filters,omitempty"`
	// Unique identifier for folders
	FolderId *string `json:"folderId,omitempty" validate:"regexp=^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"`
	// View name
	Name string `json:"name"`
	SearchQuery *SearchQuery `json:"searchQuery,omitempty"`
	TimeSelection TimeSelection `json:"timeSelection"`
	ViewType *ViewType `json:"viewType,omitempty"`
}

type _ViewFolder ViewFolder

// NewViewFolder instantiates a new ViewFolder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewFolder(name string, timeSelection TimeSelection) *ViewFolder {
	this := ViewFolder{}
	this.Name = name
	this.TimeSelection = timeSelection
	return &this
}

// NewViewFolderWithDefaults instantiates a new ViewFolder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewFolderWithDefaults() *ViewFolder {
	this := ViewFolder{}
	return &this
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *ViewFolder) GetFilters() SelectedFilters {
	if o == nil || IsNil(o.Filters) {
		var ret SelectedFilters
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFolder) GetFiltersOk() (*SelectedFilters, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *ViewFolder) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given SelectedFilters and assigns it to the Filters field.
func (o *ViewFolder) SetFilters(v SelectedFilters) {
	o.Filters = &v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *ViewFolder) GetFolderId() string {
	if o == nil || IsNil(o.FolderId) {
		var ret string
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFolder) GetFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.FolderId) {
		return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *ViewFolder) HasFolderId() bool {
	if o != nil && !IsNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given string and assigns it to the FolderId field.
func (o *ViewFolder) SetFolderId(v string) {
	o.FolderId = &v
}

// GetName returns the Name field value
func (o *ViewFolder) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ViewFolder) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ViewFolder) SetName(v string) {
	o.Name = v
}

// GetSearchQuery returns the SearchQuery field value if set, zero value otherwise.
func (o *ViewFolder) GetSearchQuery() SearchQuery {
	if o == nil || IsNil(o.SearchQuery) {
		var ret SearchQuery
		return ret
	}
	return *o.SearchQuery
}

// GetSearchQueryOk returns a tuple with the SearchQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFolder) GetSearchQueryOk() (*SearchQuery, bool) {
	if o == nil || IsNil(o.SearchQuery) {
		return nil, false
	}
	return o.SearchQuery, true
}

// HasSearchQuery returns a boolean if a field has been set.
func (o *ViewFolder) HasSearchQuery() bool {
	if o != nil && !IsNil(o.SearchQuery) {
		return true
	}

	return false
}

// SetSearchQuery gets a reference to the given SearchQuery and assigns it to the SearchQuery field.
func (o *ViewFolder) SetSearchQuery(v SearchQuery) {
	o.SearchQuery = &v
}

// GetTimeSelection returns the TimeSelection field value
func (o *ViewFolder) GetTimeSelection() TimeSelection {
	if o == nil {
		var ret TimeSelection
		return ret
	}

	return o.TimeSelection
}

// GetTimeSelectionOk returns a tuple with the TimeSelection field value
// and a boolean to check if the value has been set.
func (o *ViewFolder) GetTimeSelectionOk() (*TimeSelection, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeSelection, true
}

// SetTimeSelection sets field value
func (o *ViewFolder) SetTimeSelection(v TimeSelection) {
	o.TimeSelection = v
}

// GetViewType returns the ViewType field value if set, zero value otherwise.
func (o *ViewFolder) GetViewType() ViewType {
	if o == nil || IsNil(o.ViewType) {
		var ret ViewType
		return ret
	}
	return *o.ViewType
}

// GetViewTypeOk returns a tuple with the ViewType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFolder) GetViewTypeOk() (*ViewType, bool) {
	if o == nil || IsNil(o.ViewType) {
		return nil, false
	}
	return o.ViewType, true
}

// HasViewType returns a boolean if a field has been set.
func (o *ViewFolder) HasViewType() bool {
	if o != nil && !IsNil(o.ViewType) {
		return true
	}

	return false
}

// SetViewType gets a reference to the given ViewType and assigns it to the ViewType field.
func (o *ViewFolder) SetViewType(v ViewType) {
	o.ViewType = &v
}

func (o ViewFolder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewFolder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.FolderId) {
		toSerialize["folderId"] = o.FolderId
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.SearchQuery) {
		toSerialize["searchQuery"] = o.SearchQuery
	}
	toSerialize["timeSelection"] = o.TimeSelection
	if !IsNil(o.ViewType) {
		toSerialize["viewType"] = o.ViewType
	}
	return toSerialize, nil
}

func (o *ViewFolder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"timeSelection",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varViewFolder := _ViewFolder{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varViewFolder)

	if err != nil {
		return err
	}

	*o = ViewFolder(varViewFolder)

	return err
}

type NullableViewFolder struct {
	value *ViewFolder
	isSet bool
}

func (v NullableViewFolder) Get() *ViewFolder {
	return v.value
}

func (v *NullableViewFolder) Set(val *ViewFolder) {
	v.value = val
	v.isSet = true
}

func (v NullableViewFolder) IsSet() bool {
	return v.isSet
}

func (v *NullableViewFolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewFolder(val *ViewFolder) *NullableViewFolder {
	return &NullableViewFolder{value: val, isSet: true}
}

func (v NullableViewFolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewFolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


