openapi: 3.0.0
info:
  title: ""
  version: 1.0.0
servers:
- url: /
paths:
  /v1/views:
    get:
      description: Lists all company public views
      externalDocs:
        url: ""
      operationId: ViewsService_ListViews
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListViewsResponse"
          description: ""
      summary: List views service
      tags:
      - Views service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v1/views';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v1/views"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.coralogix.com/mgmt/openapi/v1/views \
            --header 'Authorization: Bearer <API_KEY>'
    post:
      description: Creates a new view
      externalDocs:
        url: ""
      operationId: ViewsService_CreateView
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ViewFolder"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/View"
          description: ""
      summary: Create a view service
      tags:
      - Views service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v1/views';

          let options = {
            method: 'POST',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"filters":{"filters":[{"name":"applicationName","selectedValues":{"demo":true,"cs-rest-test1":true}}]},"folderId":"3dc02998-0b50-4ea8-b68a-4779d716fa1f","name":"Logs view","searchQuery":{"query":"string"},"timeSelection":{"quickSelection":{"caption":"Last Hour","seconds":3600}},"viewType":"VIEW_TYPE_UNSPECIFIED"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v1/views"

          payload = {
              "filters": {"filters": [
                      {
                          "name": "applicationName",
                          "selectedValues": {
                              "demo": True,
                              "cs-rest-test1": True
                          }
                      }
                  ]},
              "folderId": "3dc02998-0b50-4ea8-b68a-4779d716fa1f",
              "name": "Logs view",
              "searchQuery": {"query": "string"},
              "timeSelection": {"quickSelection": {
                      "caption": "Last Hour",
                      "seconds": 3600
                  }},
              "viewType": "VIEW_TYPE_UNSPECIFIED"
          }
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/v1/views \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"filters":{"filters":[{"name":"applicationName","selectedValues":{"demo":true,"cs-rest-test1":true}}]},"folderId":"3dc02998-0b50-4ea8-b68a-4779d716fa1f","name":"Logs view","searchQuery":{"query":"string"},"timeSelection":{"quickSelection":{"caption":"Last Hour","seconds":3600}},"viewType":"VIEW_TYPE_UNSPECIFIED"}'
  /v1/views/{id}:
    delete:
      description: Deletes a view by ID
      externalDocs:
        url: ""
      operationId: ViewsService_DeleteView
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: id
          example: 52
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteViewResponse"
          description: ""
      summary: Delete view service
      tags:
      - Views service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v1/views/52';

          let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v1/views/52"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("DELETE", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://api.coralogix.com/mgmt/openapi/v1/views/52 \
            --header 'Authorization: Bearer <API_KEY>'
    get:
      description: Gets a view by ID
      externalDocs:
        url: ""
      operationId: ViewsService_GetView
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: id
          example: 52
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/View"
          description: ""
      summary: Get view service
      tags:
      - Views service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v1/views/52';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v1/views/52"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.coralogix.com/mgmt/openapi/v1/views/52 \
            --header 'Authorization: Bearer <API_KEY>'
  /v1/views/{view.id}:
    put:
      description: Replaces an existing view
      externalDocs:
        url: ""
      operationId: ViewsService_ReplaceView
      parameters:
      - explode: false
        in: path
        name: view.id
        required: true
        schema:
          description: id
          example: 52
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/View_1"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/View"
          description: ""
      summary: Replace a view service
      tags:
      - Views service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v1/views/52';

          let options = {
            method: 'PUT',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"filters":{"filters":[{"name":"applicationName","selectedValues":{"demo":true,"cs-rest-test1":true}}]},"folderId":"3dc02998-0b50-4ea8-b68a-4779d716fa1f","isCompactMode":true,"name":"Logs view","searchQuery":{"query":"string"},"timeSelection":{"quickSelection":{"caption":"Last Hour","seconds":3600}},"viewType":"VIEW_TYPE_UNSPECIFIED"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v1/views/52"

          payload = {
              "filters": {"filters": [
                      {
                          "name": "applicationName",
                          "selectedValues": {
                              "demo": True,
                              "cs-rest-test1": True
                          }
                      }
                  ]},
              "folderId": "3dc02998-0b50-4ea8-b68a-4779d716fa1f",
              "isCompactMode": True,
              "name": "Logs view",
              "searchQuery": {"query": "string"},
              "timeSelection": {"quickSelection": {
                      "caption": "Last Hour",
                      "seconds": 3600
                  }},
              "viewType": "VIEW_TYPE_UNSPECIFIED"
          }
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("PUT", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://api.coralogix.com/mgmt/openapi/v1/views/52 \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"filters":{"filters":[{"name":"applicationName","selectedValues":{"demo":true,"cs-rest-test1":true}}]},"folderId":"3dc02998-0b50-4ea8-b68a-4779d716fa1f","isCompactMode":true,"name":"Logs view","searchQuery":{"query":"string"},"timeSelection":{"quickSelection":{"caption":"Last Hour","seconds":3600}},"viewType":"VIEW_TYPE_UNSPECIFIED"}'
components:
  schemas:
    CustomTimeSelection:
      externalDocs:
        url: ""
      properties:
        fromTime:
          example: 2024-01-25T11:31:43.152Z
          format: date-time
          minLength: 1
          type: string
        toTime:
          example: 2024-01-25T11:35:43.152Z
          format: date-time
          minLength: 1
          type: string
      required:
      - fromTime
      - toTime
      type: object
    DeleteViewResponse:
      type: object
    FieldGroup:
      properties:
        name:
          type: string
        value:
          type: string
      type: object
    FilterPathAndValues:
      oneOf:
      - $ref: "#/components/schemas/FilterPathAndValues_1"
      - $ref: "#/components/schemas/FilterPathAndValues_2"
    Filters:
      description: This data structure represents a filter
      externalDocs:
        url: ""
      properties:
        operator:
          $ref: "#/components/schemas/v3.FilterOperator"
        pathAndValues:
          items:
            $ref: "#/components/schemas/FilterPathAndValues"
          type: array
      required:
      - pathAndValues
      title: Filters
      type: object
    ListViewsResponse:
      example:
        views:
        - isCompactMode: true
          searchQuery:
            query: query
          name: Logs view
          viewType: VIEW_TYPE_UNSPECIFIED
          filters:
            filters:
            - selectedValues:
                cs-rest-test1: true
                demo: true
              name: applicationName
            - selectedValues:
                cs-rest-test1: true
                demo: true
              name: applicationName
          id: 52
          folderId: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
          timeSelection:
            quickSelection:
              seconds: 3600
              caption: Last Hour
        - isCompactMode: true
          searchQuery:
            query: query
          name: Logs view
          viewType: VIEW_TYPE_UNSPECIFIED
          filters:
            filters:
            - selectedValues:
                cs-rest-test1: true
                demo: true
              name: applicationName
            - selectedValues:
                cs-rest-test1: true
                demo: true
              name: applicationName
          id: 52
          folderId: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
          timeSelection:
            quickSelection:
              seconds: 3600
              caption: Last Hour
      properties:
        views:
          items:
            $ref: "#/components/schemas/View"
          type: array
      type: object
    MultipleValues:
      properties:
        matcher:
          $ref: "#/components/schemas/events.v3.FilterMatcher"
        values:
          items:
            type: string
          type: array
      type: object
    QuickTimeSelection:
      example:
        seconds: 3600
        caption: Last Hour
      externalDocs:
        url: ""
      properties:
        caption:
          deprecated: true
          description: Folder name
          example: Last Hour
          minLength: 1
          type: string
        seconds:
          description: Folder name
          example: 3600
          format: int64
          type: integer
      required:
      - seconds
      type: object
    SearchQuery:
      example:
        query: query
      externalDocs:
        url: ""
      properties:
        query:
          minLength: 1
          type: string
      required:
      - query
      title: SearchQuery
      type: object
    SelectedFilters:
      example:
        filters:
        - selectedValues:
            cs-rest-test1: true
            demo: true
          name: applicationName
        - selectedValues:
            cs-rest-test1: true
            demo: true
          name: applicationName
      properties:
        filters:
          items:
            $ref: "#/components/schemas/views.v1.Filter"
          type: array
      type: object
    TimeSelection:
      oneOf:
      - $ref: "#/components/schemas/TimeSelection_oneOf"
      - $ref: "#/components/schemas/TimeSelection_oneOf_1"
    View:
      description: Response for views.
      example:
        isCompactMode: true
        searchQuery:
          query: query
        name: Logs view
        viewType: VIEW_TYPE_UNSPECIFIED
        filters:
          filters:
          - selectedValues:
              cs-rest-test1: true
              demo: true
            name: applicationName
          - selectedValues:
              cs-rest-test1: true
              demo: true
            name: applicationName
        id: 52
        folderId: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
        timeSelection:
          quickSelection:
            seconds: 3600
            caption: Last Hour
      externalDocs:
        url: ""
      properties:
        filters:
          $ref: "#/components/schemas/SelectedFilters"
        folderId:
          description: Unique identifier for folders
          example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
          maxLength: 36
          minLength: 36
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          type: string
        id:
          description: id
          example: 52
          format: int32
          type: integer
        isCompactMode:
          type: boolean
        name:
          description: View name
          example: Logs view
          minLength: 1
          type: string
        searchQuery:
          $ref: "#/components/schemas/SearchQuery"
        timeSelection:
          $ref: "#/components/schemas/TimeSelection"
        viewType:
          $ref: "#/components/schemas/ViewType"
      required:
      - id
      - name
      - timeSelection
      title: View
      type: object
    ViewType:
      enum:
      - VIEW_TYPE_UNSPECIFIED
      - VIEW_TYPE_LOGS
      - VIEW_TYPE_TEMPLATES
      - VIEW_TYPE_ARCHIVE_LOGS
      - VIEW_TYPE_ARCHIVE_TEMPLATES
      type: string
    common.Group:
      properties:
        field:
          $ref: "#/components/schemas/FieldGroup"
        groups:
          items:
            $ref: "#/components/schemas/common.Group"
          type: array
        value:
          format: double
          type: number
      type: object
    events.v3.FilterMatcher:
      enum:
      - FILTER_MATCHER_TEXT_OR_UNSPECIFIED
      - FILTER_MATCHER_REGEXP
      type: string
    v3.FilterOperator:
      enum:
      - FILTER_OPERATOR_AND_OR_UNSPECIFIED
      - FILTER_OPERATOR_OR
      type: string
    views.v1.Filter:
      description: View folder.
      example:
        selectedValues:
          cs-rest-test1: true
          demo: true
        name: applicationName
      externalDocs:
        url: ""
      properties:
        name:
          description: Filter name
          example: applicationName
          minLength: 1
          type: string
        selectedValues:
          additionalProperties:
            type: boolean
          description: Filter selected values
          example:
            cs-rest-test1: true
            demo: true
          type: object
      required:
      - name
      - selectedValues
      title: ViewFolder
      type: object
    ViewFolder:
      additionalProperties: false
      description: View folder.
      example:
        searchQuery:
          query: query
        name: Logs view
        viewType: VIEW_TYPE_UNSPECIFIED
        filters:
          filters:
          - selectedValues:
              cs-rest-test1: true
              demo: true
            name: applicationName
          - selectedValues:
              cs-rest-test1: true
              demo: true
            name: applicationName
        folderId: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
        timeSelection:
          quickSelection:
            seconds: 3600
            caption: Last Hour
      properties:
        filters:
          $ref: "#/components/schemas/SelectedFilters"
        folderId:
          description: Unique identifier for folders
          example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
          maxLength: 36
          minLength: 36
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          type: string
        name:
          description: View name
          example: Logs view
          minLength: 1
          type: string
        searchQuery:
          $ref: "#/components/schemas/SearchQuery"
        timeSelection:
          $ref: "#/components/schemas/TimeSelection"
        viewType:
          $ref: "#/components/schemas/ViewType"
      required:
      - name
      - timeSelection
      title: ViewFolder
      type: object
    View_1:
      additionalProperties: false
      description: Response for views.
      properties:
        filters:
          $ref: "#/components/schemas/SelectedFilters"
        folderId:
          description: Unique identifier for folders
          example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
          maxLength: 36
          minLength: 36
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          type: string
        isCompactMode:
          type: boolean
        name:
          description: View name
          example: Logs view
          minLength: 1
          type: string
        searchQuery:
          $ref: "#/components/schemas/SearchQuery"
        timeSelection:
          $ref: "#/components/schemas/TimeSelection"
        viewType:
          $ref: "#/components/schemas/ViewType"
      required:
      - id
      - name
      - timeSelection
      title: View
      type: object
    FilterPathAndValues_1:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        multipleValues:
          $ref: "#/components/schemas/MultipleValues"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
    FilterPathAndValues_2:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        filters:
          $ref: "#/components/schemas/Filters"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
    TimeSelection_oneOf:
      additionalProperties: false
      example:
        quickSelection:
          seconds: 3600
          caption: Last Hour
      properties:
        quickSelection:
          $ref: "#/components/schemas/QuickTimeSelection"
      type: object
    TimeSelection_oneOf_1:
      additionalProperties: false
      properties:
        customSelection:
          $ref: "#/components/schemas/CustomTimeSelection"
      type: object
  securitySchemes:
    apiKeyAuth:
      description: API key authentication
      in: header
      name: Authorization
      type: apiKey
