/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package views_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the View type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &View{}

// View Response for views.
type View struct {
	Filters *SelectedFilters `json:"filters,omitempty"`
	// Unique identifier for folders
	FolderId *string `json:"folderId,omitempty" validate:"regexp=^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"`
	// id
	Id int32 `json:"id"`
	IsCompactMode *bool `json:"isCompactMode,omitempty"`
	// View name
	Name string `json:"name"`
	SearchQuery *SearchQuery `json:"searchQuery,omitempty"`
	TimeSelection TimeSelection `json:"timeSelection"`
	ViewType *ViewType `json:"viewType,omitempty"`
}

type _View View

// NewView instantiates a new View object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewView(id int32, name string, timeSelection TimeSelection) *View {
	this := View{}
	this.Id = id
	this.Name = name
	this.TimeSelection = timeSelection
	return &this
}

// NewViewWithDefaults instantiates a new View object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewWithDefaults() *View {
	this := View{}
	return &this
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *View) GetFilters() SelectedFilters {
	if o == nil || IsNil(o.Filters) {
		var ret SelectedFilters
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetFiltersOk() (*SelectedFilters, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *View) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given SelectedFilters and assigns it to the Filters field.
func (o *View) SetFilters(v SelectedFilters) {
	o.Filters = &v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *View) GetFolderId() string {
	if o == nil || IsNil(o.FolderId) {
		var ret string
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.FolderId) {
		return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *View) HasFolderId() bool {
	if o != nil && !IsNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given string and assigns it to the FolderId field.
func (o *View) SetFolderId(v string) {
	o.FolderId = &v
}

// GetId returns the Id field value
func (o *View) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *View) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *View) SetId(v int32) {
	o.Id = v
}

// GetIsCompactMode returns the IsCompactMode field value if set, zero value otherwise.
func (o *View) GetIsCompactMode() bool {
	if o == nil || IsNil(o.IsCompactMode) {
		var ret bool
		return ret
	}
	return *o.IsCompactMode
}

// GetIsCompactModeOk returns a tuple with the IsCompactMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetIsCompactModeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCompactMode) {
		return nil, false
	}
	return o.IsCompactMode, true
}

// HasIsCompactMode returns a boolean if a field has been set.
func (o *View) HasIsCompactMode() bool {
	if o != nil && !IsNil(o.IsCompactMode) {
		return true
	}

	return false
}

// SetIsCompactMode gets a reference to the given bool and assigns it to the IsCompactMode field.
func (o *View) SetIsCompactMode(v bool) {
	o.IsCompactMode = &v
}

// GetName returns the Name field value
func (o *View) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *View) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *View) SetName(v string) {
	o.Name = v
}

// GetSearchQuery returns the SearchQuery field value if set, zero value otherwise.
func (o *View) GetSearchQuery() SearchQuery {
	if o == nil || IsNil(o.SearchQuery) {
		var ret SearchQuery
		return ret
	}
	return *o.SearchQuery
}

// GetSearchQueryOk returns a tuple with the SearchQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetSearchQueryOk() (*SearchQuery, bool) {
	if o == nil || IsNil(o.SearchQuery) {
		return nil, false
	}
	return o.SearchQuery, true
}

// HasSearchQuery returns a boolean if a field has been set.
func (o *View) HasSearchQuery() bool {
	if o != nil && !IsNil(o.SearchQuery) {
		return true
	}

	return false
}

// SetSearchQuery gets a reference to the given SearchQuery and assigns it to the SearchQuery field.
func (o *View) SetSearchQuery(v SearchQuery) {
	o.SearchQuery = &v
}

// GetTimeSelection returns the TimeSelection field value
func (o *View) GetTimeSelection() TimeSelection {
	if o == nil {
		var ret TimeSelection
		return ret
	}

	return o.TimeSelection
}

// GetTimeSelectionOk returns a tuple with the TimeSelection field value
// and a boolean to check if the value has been set.
func (o *View) GetTimeSelectionOk() (*TimeSelection, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeSelection, true
}

// SetTimeSelection sets field value
func (o *View) SetTimeSelection(v TimeSelection) {
	o.TimeSelection = v
}

// GetViewType returns the ViewType field value if set, zero value otherwise.
func (o *View) GetViewType() ViewType {
	if o == nil || IsNil(o.ViewType) {
		var ret ViewType
		return ret
	}
	return *o.ViewType
}

// GetViewTypeOk returns a tuple with the ViewType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetViewTypeOk() (*ViewType, bool) {
	if o == nil || IsNil(o.ViewType) {
		return nil, false
	}
	return o.ViewType, true
}

// HasViewType returns a boolean if a field has been set.
func (o *View) HasViewType() bool {
	if o != nil && !IsNil(o.ViewType) {
		return true
	}

	return false
}

// SetViewType gets a reference to the given ViewType and assigns it to the ViewType field.
func (o *View) SetViewType(v ViewType) {
	o.ViewType = &v
}

func (o View) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o View) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.FolderId) {
		toSerialize["folderId"] = o.FolderId
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.IsCompactMode) {
		toSerialize["isCompactMode"] = o.IsCompactMode
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.SearchQuery) {
		toSerialize["searchQuery"] = o.SearchQuery
	}
	toSerialize["timeSelection"] = o.TimeSelection
	if !IsNil(o.ViewType) {
		toSerialize["viewType"] = o.ViewType
	}
	return toSerialize, nil
}

func (o *View) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"timeSelection",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varView := _View{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varView)

	if err != nil {
		return err
	}

	*o = View(varView)

	return err
}

type NullableView struct {
	value *View
	isSet bool
}

func (v NullableView) Get() *View {
	return v.value
}

func (v *NullableView) Set(val *View) {
	v.value = val
	v.isSet = true
}

func (v NullableView) IsSet() bool {
	return v.isSet
}

func (v *NullableView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableView(val *View) *NullableView {
	return &NullableView{value: val, isSet: true}
}

func (v NullableView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


