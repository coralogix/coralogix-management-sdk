/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package views_service

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CustomTimeSelection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomTimeSelection{}

// CustomTimeSelection struct for CustomTimeSelection
type CustomTimeSelection struct {
	FromTime time.Time `json:"fromTime"`
	ToTime time.Time `json:"toTime"`
}

type _CustomTimeSelection CustomTimeSelection

// NewCustomTimeSelection instantiates a new CustomTimeSelection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomTimeSelection(fromTime time.Time, toTime time.Time) *CustomTimeSelection {
	this := CustomTimeSelection{}
	this.FromTime = fromTime
	this.ToTime = toTime
	return &this
}

// NewCustomTimeSelectionWithDefaults instantiates a new CustomTimeSelection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomTimeSelectionWithDefaults() *CustomTimeSelection {
	this := CustomTimeSelection{}
	return &this
}

// GetFromTime returns the FromTime field value
func (o *CustomTimeSelection) GetFromTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.FromTime
}

// GetFromTimeOk returns a tuple with the FromTime field value
// and a boolean to check if the value has been set.
func (o *CustomTimeSelection) GetFromTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromTime, true
}

// SetFromTime sets field value
func (o *CustomTimeSelection) SetFromTime(v time.Time) {
	o.FromTime = v
}

// GetToTime returns the ToTime field value
func (o *CustomTimeSelection) GetToTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ToTime
}

// GetToTimeOk returns a tuple with the ToTime field value
// and a boolean to check if the value has been set.
func (o *CustomTimeSelection) GetToTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToTime, true
}

// SetToTime sets field value
func (o *CustomTimeSelection) SetToTime(v time.Time) {
	o.ToTime = v
}

func (o CustomTimeSelection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomTimeSelection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fromTime"] = o.FromTime
	toSerialize["toTime"] = o.ToTime
	return toSerialize, nil
}

func (o *CustomTimeSelection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fromTime",
		"toTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomTimeSelection := _CustomTimeSelection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomTimeSelection)

	if err != nil {
		return err
	}

	*o = CustomTimeSelection(varCustomTimeSelection)

	return err
}

type NullableCustomTimeSelection struct {
	value *CustomTimeSelection
	isSet bool
}

func (v NullableCustomTimeSelection) Get() *CustomTimeSelection {
	return v.value
}

func (v *NullableCustomTimeSelection) Set(val *CustomTimeSelection) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomTimeSelection) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomTimeSelection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomTimeSelection(val *CustomTimeSelection) *NullableCustomTimeSelection {
	return &NullableCustomTimeSelection{value: val, isSet: true}
}

func (v NullableCustomTimeSelection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomTimeSelection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


