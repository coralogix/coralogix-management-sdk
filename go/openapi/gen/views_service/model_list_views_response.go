/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package views_service

import (
	"encoding/json"
)

// checks if the ListViewsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListViewsResponse{}

// ListViewsResponse struct for ListViewsResponse
type ListViewsResponse struct {
	Views []View `json:"views,omitempty"`
}

// NewListViewsResponse instantiates a new ListViewsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListViewsResponse() *ListViewsResponse {
	this := ListViewsResponse{}
	return &this
}

// NewListViewsResponseWithDefaults instantiates a new ListViewsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListViewsResponseWithDefaults() *ListViewsResponse {
	this := ListViewsResponse{}
	return &this
}

// GetViews returns the Views field value if set, zero value otherwise.
func (o *ListViewsResponse) GetViews() []View {
	if o == nil || IsNil(o.Views) {
		var ret []View
		return ret
	}
	return o.Views
}

// GetViewsOk returns a tuple with the Views field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListViewsResponse) GetViewsOk() ([]View, bool) {
	if o == nil || IsNil(o.Views) {
		return nil, false
	}
	return o.Views, true
}

// HasViews returns a boolean if a field has been set.
func (o *ListViewsResponse) HasViews() bool {
	if o != nil && !IsNil(o.Views) {
		return true
	}

	return false
}

// SetViews gets a reference to the given []View and assigns it to the Views field.
func (o *ListViewsResponse) SetViews(v []View) {
	o.Views = v
}

func (o ListViewsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListViewsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Views) {
		toSerialize["views"] = o.Views
	}
	return toSerialize, nil
}

type NullableListViewsResponse struct {
	value *ListViewsResponse
	isSet bool
}

func (v NullableListViewsResponse) Get() *ListViewsResponse {
	return v.value
}

func (v *NullableListViewsResponse) Set(val *ListViewsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListViewsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListViewsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListViewsResponse(val *ListViewsResponse) *NullableListViewsResponse {
	return &NullableListViewsResponse{value: val, isSet: true}
}

func (v NullableListViewsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListViewsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


