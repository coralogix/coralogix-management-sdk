/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package views_service

import (
	"encoding/json"
	"fmt"
)

// ViewType the model 'ViewType'
type ViewType string

// List of ViewType
const (
	VIEWTYPE_VIEW_TYPE_UNSPECIFIED ViewType = "VIEW_TYPE_UNSPECIFIED"
	VIEWTYPE_VIEW_TYPE_LOGS ViewType = "VIEW_TYPE_LOGS"
	VIEWTYPE_VIEW_TYPE_TEMPLATES ViewType = "VIEW_TYPE_TEMPLATES"
	VIEWTYPE_VIEW_TYPE_ARCHIVE_LOGS ViewType = "VIEW_TYPE_ARCHIVE_LOGS"
	VIEWTYPE_VIEW_TYPE_ARCHIVE_TEMPLATES ViewType = "VIEW_TYPE_ARCHIVE_TEMPLATES"
)

// All allowed values of ViewType enum
var AllowedViewTypeEnumValues = []ViewType{
	"VIEW_TYPE_UNSPECIFIED",
	"VIEW_TYPE_LOGS",
	"VIEW_TYPE_TEMPLATES",
	"VIEW_TYPE_ARCHIVE_LOGS",
	"VIEW_TYPE_ARCHIVE_TEMPLATES",
}

func (v *ViewType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ViewType(value)
	for _, existing := range AllowedViewTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ViewType", value)
}

// NewViewTypeFromValue returns a pointer to a valid ViewType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewViewTypeFromValue(v string) (*ViewType, error) {
	ev := ViewType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ViewType: valid values are %v", v, AllowedViewTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ViewType) IsValid() bool {
	for _, existing := range AllowedViewTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ViewType value
func (v ViewType) Ptr() *ViewType {
	return &v
}

type NullableViewType struct {
	value *ViewType
	isSet bool
}

func (v NullableViewType) Get() *ViewType {
	return v.value
}

func (v *NullableViewType) Set(val *ViewType) {
	v.value = val
	v.isSet = true
}

func (v NullableViewType) IsSet() bool {
	return v.isSet
}

func (v *NullableViewType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewType(val *ViewType) *NullableViewType {
	return &NullableViewType{value: val, isSet: true}
}

func (v NullableViewType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

