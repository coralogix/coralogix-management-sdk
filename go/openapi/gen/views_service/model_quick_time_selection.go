/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package views_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QuickTimeSelection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickTimeSelection{}

// QuickTimeSelection struct for QuickTimeSelection
type QuickTimeSelection struct {
	// Folder name
	// Deprecated
	Caption *string `json:"caption,omitempty"`
	// Folder name
	Seconds int64 `json:"seconds"`
}

type _QuickTimeSelection QuickTimeSelection

// NewQuickTimeSelection instantiates a new QuickTimeSelection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickTimeSelection(seconds int64) *QuickTimeSelection {
	this := QuickTimeSelection{}
	this.Seconds = seconds
	return &this
}

// NewQuickTimeSelectionWithDefaults instantiates a new QuickTimeSelection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickTimeSelectionWithDefaults() *QuickTimeSelection {
	this := QuickTimeSelection{}
	return &this
}

// GetCaption returns the Caption field value if set, zero value otherwise.
// Deprecated
func (o *QuickTimeSelection) GetCaption() string {
	if o == nil || IsNil(o.Caption) {
		var ret string
		return ret
	}
	return *o.Caption
}

// GetCaptionOk returns a tuple with the Caption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *QuickTimeSelection) GetCaptionOk() (*string, bool) {
	if o == nil || IsNil(o.Caption) {
		return nil, false
	}
	return o.Caption, true
}

// HasCaption returns a boolean if a field has been set.
func (o *QuickTimeSelection) HasCaption() bool {
	if o != nil && !IsNil(o.Caption) {
		return true
	}

	return false
}

// SetCaption gets a reference to the given string and assigns it to the Caption field.
// Deprecated
func (o *QuickTimeSelection) SetCaption(v string) {
	o.Caption = &v
}

// GetSeconds returns the Seconds field value
func (o *QuickTimeSelection) GetSeconds() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Seconds
}

// GetSecondsOk returns a tuple with the Seconds field value
// and a boolean to check if the value has been set.
func (o *QuickTimeSelection) GetSecondsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Seconds, true
}

// SetSeconds sets field value
func (o *QuickTimeSelection) SetSeconds(v int64) {
	o.Seconds = v
}

func (o QuickTimeSelection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickTimeSelection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Caption) {
		toSerialize["caption"] = o.Caption
	}
	toSerialize["seconds"] = o.Seconds
	return toSerialize, nil
}

func (o *QuickTimeSelection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"seconds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuickTimeSelection := _QuickTimeSelection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQuickTimeSelection)

	if err != nil {
		return err
	}

	*o = QuickTimeSelection(varQuickTimeSelection)

	return err
}

type NullableQuickTimeSelection struct {
	value *QuickTimeSelection
	isSet bool
}

func (v NullableQuickTimeSelection) Get() *QuickTimeSelection {
	return v.value
}

func (v *NullableQuickTimeSelection) Set(val *QuickTimeSelection) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickTimeSelection) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickTimeSelection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickTimeSelection(val *QuickTimeSelection) *NullableQuickTimeSelection {
	return &NullableQuickTimeSelection{value: val, isSet: true}
}

func (v NullableQuickTimeSelection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickTimeSelection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


