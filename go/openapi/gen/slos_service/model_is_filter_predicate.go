/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
)

// checks if the IsFilterPredicate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IsFilterPredicate{}

// IsFilterPredicate Predicate for SLO filters that checks if a field is equal to one of multiple values
type IsFilterPredicate struct {
	Is []string `json:"is,omitempty"`
}

// NewIsFilterPredicate instantiates a new IsFilterPredicate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIsFilterPredicate() *IsFilterPredicate {
	this := IsFilterPredicate{}
	return &this
}

// NewIsFilterPredicateWithDefaults instantiates a new IsFilterPredicate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIsFilterPredicateWithDefaults() *IsFilterPredicate {
	this := IsFilterPredicate{}
	return &this
}

// GetIs returns the Is field value if set, zero value otherwise.
func (o *IsFilterPredicate) GetIs() []string {
	if o == nil || IsNil(o.Is) {
		var ret []string
		return ret
	}
	return o.Is
}

// GetIsOk returns a tuple with the Is field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsFilterPredicate) GetIsOk() ([]string, bool) {
	if o == nil || IsNil(o.Is) {
		return nil, false
	}
	return o.Is, true
}

// HasIs returns a boolean if a field has been set.
func (o *IsFilterPredicate) HasIs() bool {
	if o != nil && !IsNil(o.Is) {
		return true
	}

	return false
}

// SetIs gets a reference to the given []string and assigns it to the Is field.
func (o *IsFilterPredicate) SetIs(v []string) {
	o.Is = v
}

func (o IsFilterPredicate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IsFilterPredicate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Is) {
		toSerialize["is"] = o.Is
	}
	return toSerialize, nil
}

type NullableIsFilterPredicate struct {
	value *IsFilterPredicate
	isSet bool
}

func (v NullableIsFilterPredicate) Get() *IsFilterPredicate {
	return v.value
}

func (v *NullableIsFilterPredicate) Set(val *IsFilterPredicate) {
	v.value = val
	v.isSet = true
}

func (v NullableIsFilterPredicate) IsSet() bool {
	return v.isSet
}

func (v *NullableIsFilterPredicate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIsFilterPredicate(val *IsFilterPredicate) *NullableIsFilterPredicate {
	return &NullableIsFilterPredicate{value: val, isSet: true}
}

func (v NullableIsFilterPredicate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIsFilterPredicate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


