/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
)

// checks if the SloFilterField1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloFilterField1{}

// SloFilterField1 Field used for filtering SLOs
type SloFilterField1 struct {
	LabelName *string `json:"labelName,omitempty"`
}

// NewSloFilterField1 instantiates a new SloFilterField1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloFilterField1() *SloFilterField1 {
	this := SloFilterField1{}
	return &this
}

// NewSloFilterField1WithDefaults instantiates a new SloFilterField1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloFilterField1WithDefaults() *SloFilterField1 {
	this := SloFilterField1{}
	return &this
}

// GetLabelName returns the LabelName field value if set, zero value otherwise.
func (o *SloFilterField1) GetLabelName() string {
	if o == nil || IsNil(o.LabelName) {
		var ret string
		return ret
	}
	return *o.LabelName
}

// GetLabelNameOk returns a tuple with the LabelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloFilterField1) GetLabelNameOk() (*string, bool) {
	if o == nil || IsNil(o.LabelName) {
		return nil, false
	}
	return o.LabelName, true
}

// HasLabelName returns a boolean if a field has been set.
func (o *SloFilterField1) HasLabelName() bool {
	if o != nil && !IsNil(o.LabelName) {
		return true
	}

	return false
}

// SetLabelName gets a reference to the given string and assigns it to the LabelName field.
func (o *SloFilterField1) SetLabelName(v string) {
	o.LabelName = &v
}

func (o SloFilterField1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloFilterField1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LabelName) {
		toSerialize["labelName"] = o.LabelName
	}
	return toSerialize, nil
}

type NullableSloFilterField1 struct {
	value *SloFilterField1
	isSet bool
}

func (v NullableSloFilterField1) Get() *SloFilterField1 {
	return v.value
}

func (v *NullableSloFilterField1) Set(val *SloFilterField1) {
	v.value = val
	v.isSet = true
}

func (v NullableSloFilterField1) IsSet() bool {
	return v.isSet
}

func (v *NullableSloFilterField1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloFilterField1(val *SloFilterField1) *NullableSloFilterField1 {
	return &NullableSloFilterField1{value: val, isSet: true}
}

func (v NullableSloFilterField1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloFilterField1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


