/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CreateSloRequestSlo - struct for CreateSloRequestSlo
type CreateSloRequestSlo struct {
	Slo3 *Slo3
	Slo4 *Slo4
}

// Slo3AsCreateSloRequestSlo is a convenience function that returns Slo3 wrapped in CreateSloRequestSlo
func Slo3AsCreateSloRequestSlo(v *Slo3) CreateSloRequestSlo {
	return CreateSloRequestSlo{
		Slo3: v,
	}
}

// Slo4AsCreateSloRequestSlo is a convenience function that returns Slo4 wrapped in CreateSloRequestSlo
func Slo4AsCreateSloRequestSlo(v *Slo4) CreateSloRequestSlo {
	return CreateSloRequestSlo{
		Slo4: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateSloRequestSlo) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Slo3
	err = newStrictDecoder(data).Decode(&dst.Slo3)
	if err == nil {
		jsonSlo3, _ := json.Marshal(dst.Slo3)
		if string(jsonSlo3) == "{}" { // empty struct
			dst.Slo3 = nil
		} else {
			if err = validator.Validate(dst.Slo3); err != nil {
				dst.Slo3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Slo3 = nil
	}

	// try to unmarshal data into Slo4
	err = newStrictDecoder(data).Decode(&dst.Slo4)
	if err == nil {
		jsonSlo4, _ := json.Marshal(dst.Slo4)
		if string(jsonSlo4) == "{}" { // empty struct
			dst.Slo4 = nil
		} else {
			if err = validator.Validate(dst.Slo4); err != nil {
				dst.Slo4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Slo4 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Slo3 = nil
		dst.Slo4 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateSloRequestSlo)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateSloRequestSlo)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateSloRequestSlo) MarshalJSON() ([]byte, error) {
	if src.Slo3 != nil {
		return json.Marshal(&src.Slo3)
	}

	if src.Slo4 != nil {
		return json.Marshal(&src.Slo4)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateSloRequestSlo) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Slo3 != nil {
		return obj.Slo3
	}

	if obj.Slo4 != nil {
		return obj.Slo4
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CreateSloRequestSlo) GetActualInstanceValue() (interface{}) {
	if obj.Slo3 != nil {
		return *obj.Slo3
	}

	if obj.Slo4 != nil {
		return *obj.Slo4
	}

	// all schemas are nil
	return nil
}

type NullableCreateSloRequestSlo struct {
	value *CreateSloRequestSlo
	isSet bool
}

func (v NullableCreateSloRequestSlo) Get() *CreateSloRequestSlo {
	return v.value
}

func (v *NullableCreateSloRequestSlo) Set(val *CreateSloRequestSlo) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSloRequestSlo) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSloRequestSlo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSloRequestSlo(val *CreateSloRequestSlo) *NullableCreateSloRequestSlo {
	return &NullableCreateSloRequestSlo{value: val, isSet: true}
}

func (v NullableCreateSloRequestSlo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSloRequestSlo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


