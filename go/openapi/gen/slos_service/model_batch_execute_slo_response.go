/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BatchExecuteSloResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchExecuteSloResponse{}

// BatchExecuteSloResponse Response containing the results of batch executed SLO operations.
type BatchExecuteSloResponse struct {
	MatchingResponses []SloExecutionResponse `json:"matchingResponses"`
	Status *ResponseStatus `json:"status,omitempty"`
}

type _BatchExecuteSloResponse BatchExecuteSloResponse

// NewBatchExecuteSloResponse instantiates a new BatchExecuteSloResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchExecuteSloResponse(matchingResponses []SloExecutionResponse) *BatchExecuteSloResponse {
	this := BatchExecuteSloResponse{}
	this.MatchingResponses = matchingResponses
	return &this
}

// NewBatchExecuteSloResponseWithDefaults instantiates a new BatchExecuteSloResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchExecuteSloResponseWithDefaults() *BatchExecuteSloResponse {
	this := BatchExecuteSloResponse{}
	return &this
}

// GetMatchingResponses returns the MatchingResponses field value
func (o *BatchExecuteSloResponse) GetMatchingResponses() []SloExecutionResponse {
	if o == nil {
		var ret []SloExecutionResponse
		return ret
	}

	return o.MatchingResponses
}

// GetMatchingResponsesOk returns a tuple with the MatchingResponses field value
// and a boolean to check if the value has been set.
func (o *BatchExecuteSloResponse) GetMatchingResponsesOk() ([]SloExecutionResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.MatchingResponses, true
}

// SetMatchingResponses sets field value
func (o *BatchExecuteSloResponse) SetMatchingResponses(v []SloExecutionResponse) {
	o.MatchingResponses = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BatchExecuteSloResponse) GetStatus() ResponseStatus {
	if o == nil || IsNil(o.Status) {
		var ret ResponseStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchExecuteSloResponse) GetStatusOk() (*ResponseStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BatchExecuteSloResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ResponseStatus and assigns it to the Status field.
func (o *BatchExecuteSloResponse) SetStatus(v ResponseStatus) {
	o.Status = &v
}

func (o BatchExecuteSloResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchExecuteSloResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["matchingResponses"] = o.MatchingResponses
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

func (o *BatchExecuteSloResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"matchingResponses",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBatchExecuteSloResponse := _BatchExecuteSloResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBatchExecuteSloResponse)

	if err != nil {
		return err
	}

	*o = BatchExecuteSloResponse(varBatchExecuteSloResponse)

	return err
}

type NullableBatchExecuteSloResponse struct {
	value *BatchExecuteSloResponse
	isSet bool
}

func (v NullableBatchExecuteSloResponse) Get() *BatchExecuteSloResponse {
	return v.value
}

func (v *NullableBatchExecuteSloResponse) Set(val *BatchExecuteSloResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchExecuteSloResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchExecuteSloResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchExecuteSloResponse(val *BatchExecuteSloResponse) *NullableBatchExecuteSloResponse {
	return &NullableBatchExecuteSloResponse{value: val, isSet: true}
}

func (v NullableBatchExecuteSloResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchExecuteSloResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


