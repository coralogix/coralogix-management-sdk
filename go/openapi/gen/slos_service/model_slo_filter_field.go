/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SloFilterField - struct for SloFilterField
type SloFilterField struct {
	SloFilterField *SloFilterField
	SloFilterField1 *SloFilterField1
}

// SloFilterFieldAsSloFilterField is a convenience function that returns SloFilterField wrapped in SloFilterField
func SloFilterFieldAsSloFilterField(v *SloFilterField) SloFilterField {
	return SloFilterField{
		SloFilterField: v,
	}
}

// SloFilterField1AsSloFilterField is a convenience function that returns SloFilterField1 wrapped in SloFilterField
func SloFilterField1AsSloFilterField(v *SloFilterField1) SloFilterField {
	return SloFilterField{
		SloFilterField1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SloFilterField) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SloFilterField
	err = newStrictDecoder(data).Decode(&dst.SloFilterField)
	if err == nil {
		jsonSloFilterField, _ := json.Marshal(dst.SloFilterField)
		if string(jsonSloFilterField) == "{}" { // empty struct
			dst.SloFilterField = nil
		} else {
			if err = validator.Validate(dst.SloFilterField); err != nil {
				dst.SloFilterField = nil
			} else {
				match++
			}
		}
	} else {
		dst.SloFilterField = nil
	}

	// try to unmarshal data into SloFilterField1
	err = newStrictDecoder(data).Decode(&dst.SloFilterField1)
	if err == nil {
		jsonSloFilterField1, _ := json.Marshal(dst.SloFilterField1)
		if string(jsonSloFilterField1) == "{}" { // empty struct
			dst.SloFilterField1 = nil
		} else {
			if err = validator.Validate(dst.SloFilterField1); err != nil {
				dst.SloFilterField1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.SloFilterField1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SloFilterField = nil
		dst.SloFilterField1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SloFilterField)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SloFilterField)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SloFilterField) MarshalJSON() ([]byte, error) {
	if src.SloFilterField != nil {
		return json.Marshal(&src.SloFilterField)
	}

	if src.SloFilterField1 != nil {
		return json.Marshal(&src.SloFilterField1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SloFilterField) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SloFilterField != nil {
		return obj.SloFilterField
	}

	if obj.SloFilterField1 != nil {
		return obj.SloFilterField1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SloFilterField) GetActualInstanceValue() (interface{}) {
	if obj.SloFilterField != nil {
		return *obj.SloFilterField
	}

	if obj.SloFilterField1 != nil {
		return *obj.SloFilterField1
	}

	// all schemas are nil
	return nil
}

type NullableSloFilterField struct {
	value *SloFilterField
	isSet bool
}

func (v NullableSloFilterField) Get() *SloFilterField {
	return v.value
}

func (v *NullableSloFilterField) Set(val *SloFilterField) {
	v.value = val
	v.isSet = true
}

func (v NullableSloFilterField) IsSet() bool {
	return v.isSet
}

func (v *NullableSloFilterField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloFilterField(val *SloFilterField) *NullableSloFilterField {
	return &NullableSloFilterField{value: val, isSet: true}
}

func (v NullableSloFilterField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloFilterField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


