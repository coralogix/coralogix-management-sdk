/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SloFilterField - struct for SloFilterField
type SloFilterField struct {
	SloFilterFieldConstFilter *SloFilterFieldConstFilter
	SloFilterFieldLabelName *SloFilterFieldLabelName
}

// SloFilterFieldConstFilterAsSloFilterField is a convenience function that returns SloFilterFieldConstFilter wrapped in SloFilterField
func SloFilterFieldConstFilterAsSloFilterField(v *SloFilterFieldConstFilter) SloFilterField {
	return SloFilterField{
		SloFilterFieldConstFilter: v,
	}
}

// SloFilterFieldLabelNameAsSloFilterField is a convenience function that returns SloFilterFieldLabelName wrapped in SloFilterField
func SloFilterFieldLabelNameAsSloFilterField(v *SloFilterFieldLabelName) SloFilterField {
	return SloFilterField{
		SloFilterFieldLabelName: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SloFilterField) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SloFilterFieldConstFilter
	err = newStrictDecoder(data).Decode(&dst.SloFilterFieldConstFilter)
	if err == nil {
		jsonSloFilterFieldConstFilter, _ := json.Marshal(dst.SloFilterFieldConstFilter)
		if string(jsonSloFilterFieldConstFilter) == "{}" { // empty struct
			dst.SloFilterFieldConstFilter = nil
		} else {
			if err = validator.Validate(dst.SloFilterFieldConstFilter); err != nil {
				dst.SloFilterFieldConstFilter = nil
			} else {
				match++
			}
		}
	} else {
		dst.SloFilterFieldConstFilter = nil
	}

	// try to unmarshal data into SloFilterFieldLabelName
	err = newStrictDecoder(data).Decode(&dst.SloFilterFieldLabelName)
	if err == nil {
		jsonSloFilterFieldLabelName, _ := json.Marshal(dst.SloFilterFieldLabelName)
		if string(jsonSloFilterFieldLabelName) == "{}" { // empty struct
			dst.SloFilterFieldLabelName = nil
		} else {
			if err = validator.Validate(dst.SloFilterFieldLabelName); err != nil {
				dst.SloFilterFieldLabelName = nil
			} else {
				match++
			}
		}
	} else {
		dst.SloFilterFieldLabelName = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SloFilterFieldConstFilter = nil
		dst.SloFilterFieldLabelName = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SloFilterField)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SloFilterField)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SloFilterField) MarshalJSON() ([]byte, error) {
	if src.SloFilterFieldConstFilter != nil {
		return json.Marshal(&src.SloFilterFieldConstFilter)
	}

	if src.SloFilterFieldLabelName != nil {
		return json.Marshal(&src.SloFilterFieldLabelName)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SloFilterField) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SloFilterFieldConstFilter != nil {
		return obj.SloFilterFieldConstFilter
	}

	if obj.SloFilterFieldLabelName != nil {
		return obj.SloFilterFieldLabelName
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SloFilterField) GetActualInstanceValue() (interface{}) {
	if obj.SloFilterFieldConstFilter != nil {
		return *obj.SloFilterFieldConstFilter
	}

	if obj.SloFilterFieldLabelName != nil {
		return *obj.SloFilterFieldLabelName
	}

	// all schemas are nil
	return nil
}

type NullableSloFilterField struct {
	value *SloFilterField
	isSet bool
}

func (v NullableSloFilterField) Get() *SloFilterField {
	return v.value
}

func (v *NullableSloFilterField) Set(val *SloFilterField) {
	v.value = val
	v.isSet = true
}

func (v NullableSloFilterField) IsSet() bool {
	return v.isSet
}

func (v *NullableSloFilterField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloFilterField(val *SloFilterField) *NullableSloFilterField {
	return &NullableSloFilterField{value: val, isSet: true}
}

func (v NullableSloFilterField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloFilterField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


