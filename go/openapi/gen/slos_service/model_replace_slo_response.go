/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReplaceSloResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplaceSloResponse{}

// ReplaceSloResponse Response after replacing an existing SLO.
type ReplaceSloResponse struct {
	EffectedSloAlertIds []string `json:"effectedSloAlertIds,omitempty"`
	Slo Slo `json:"slo"`
}

type _ReplaceSloResponse ReplaceSloResponse

// NewReplaceSloResponse instantiates a new ReplaceSloResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplaceSloResponse(slo Slo) *ReplaceSloResponse {
	this := ReplaceSloResponse{}
	this.Slo = slo
	return &this
}

// NewReplaceSloResponseWithDefaults instantiates a new ReplaceSloResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplaceSloResponseWithDefaults() *ReplaceSloResponse {
	this := ReplaceSloResponse{}
	return &this
}

// GetEffectedSloAlertIds returns the EffectedSloAlertIds field value if set, zero value otherwise.
func (o *ReplaceSloResponse) GetEffectedSloAlertIds() []string {
	if o == nil || IsNil(o.EffectedSloAlertIds) {
		var ret []string
		return ret
	}
	return o.EffectedSloAlertIds
}

// GetEffectedSloAlertIdsOk returns a tuple with the EffectedSloAlertIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceSloResponse) GetEffectedSloAlertIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.EffectedSloAlertIds) {
		return nil, false
	}
	return o.EffectedSloAlertIds, true
}

// HasEffectedSloAlertIds returns a boolean if a field has been set.
func (o *ReplaceSloResponse) HasEffectedSloAlertIds() bool {
	if o != nil && !IsNil(o.EffectedSloAlertIds) {
		return true
	}

	return false
}

// SetEffectedSloAlertIds gets a reference to the given []string and assigns it to the EffectedSloAlertIds field.
func (o *ReplaceSloResponse) SetEffectedSloAlertIds(v []string) {
	o.EffectedSloAlertIds = v
}

// GetSlo returns the Slo field value
func (o *ReplaceSloResponse) GetSlo() Slo {
	if o == nil {
		var ret Slo
		return ret
	}

	return o.Slo
}

// GetSloOk returns a tuple with the Slo field value
// and a boolean to check if the value has been set.
func (o *ReplaceSloResponse) GetSloOk() (*Slo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slo, true
}

// SetSlo sets field value
func (o *ReplaceSloResponse) SetSlo(v Slo) {
	o.Slo = v
}

func (o ReplaceSloResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplaceSloResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EffectedSloAlertIds) {
		toSerialize["effectedSloAlertIds"] = o.EffectedSloAlertIds
	}
	toSerialize["slo"] = o.Slo
	return toSerialize, nil
}

func (o *ReplaceSloResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"slo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReplaceSloResponse := _ReplaceSloResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReplaceSloResponse)

	if err != nil {
		return err
	}

	*o = ReplaceSloResponse(varReplaceSloResponse)

	return err
}

type NullableReplaceSloResponse struct {
	value *ReplaceSloResponse
	isSet bool
}

func (v NullableReplaceSloResponse) Get() *ReplaceSloResponse {
	return v.value
}

func (v *NullableReplaceSloResponse) Set(val *ReplaceSloResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceSloResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceSloResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceSloResponse(val *ReplaceSloResponse) *NullableReplaceSloResponse {
	return &NullableReplaceSloResponse{value: val, isSet: true}
}

func (v NullableReplaceSloResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceSloResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


