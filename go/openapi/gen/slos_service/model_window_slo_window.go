/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
	"fmt"
)

// WindowSloWindow the model 'WindowSloWindow'
type WindowSloWindow string

// List of WindowSloWindow
const (
	WINDOWSLOWINDOW_WINDOW_SLO_WINDOW_UNSPECIFIED WindowSloWindow = "WINDOW_SLO_WINDOW_UNSPECIFIED"
	WINDOWSLOWINDOW_WINDOW_SLO_WINDOW_1_MINUTE WindowSloWindow = "WINDOW_SLO_WINDOW_1_MINUTE"
	WINDOWSLOWINDOW_WINDOW_SLO_WINDOW_5_MINUTES WindowSloWindow = "WINDOW_SLO_WINDOW_5_MINUTES"
)

// All allowed values of WindowSloWindow enum
var AllowedWindowSloWindowEnumValues = []WindowSloWindow{
	"WINDOW_SLO_WINDOW_UNSPECIFIED",
	"WINDOW_SLO_WINDOW_1_MINUTE",
	"WINDOW_SLO_WINDOW_5_MINUTES",
}

func (v *WindowSloWindow) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WindowSloWindow(value)
	for _, existing := range AllowedWindowSloWindowEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WindowSloWindow", value)
}

// NewWindowSloWindowFromValue returns a pointer to a valid WindowSloWindow
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWindowSloWindowFromValue(v string) (*WindowSloWindow, error) {
	ev := WindowSloWindow(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WindowSloWindow: valid values are %v", v, AllowedWindowSloWindowEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WindowSloWindow) IsValid() bool {
	for _, existing := range AllowedWindowSloWindowEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WindowSloWindow value
func (v WindowSloWindow) Ptr() *WindowSloWindow {
	return &v
}

type NullableWindowSloWindow struct {
	value *WindowSloWindow
	isSet bool
}

func (v NullableWindowSloWindow) Get() *WindowSloWindow {
	return v.value
}

func (v *NullableWindowSloWindow) Set(val *WindowSloWindow) {
	v.value = val
	v.isSet = true
}

func (v NullableWindowSloWindow) IsSet() bool {
	return v.isSet
}

func (v *NullableWindowSloWindow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWindowSloWindow(val *WindowSloWindow) *NullableWindowSloWindow {
	return &NullableWindowSloWindow{value: val, isSet: true}
}

func (v NullableWindowSloWindow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWindowSloWindow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

