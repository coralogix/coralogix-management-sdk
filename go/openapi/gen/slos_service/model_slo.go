/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Slo - struct for Slo
type Slo struct {
	Slo5 *Slo5
	Slo6 *Slo6
}

// Slo5AsSlo is a convenience function that returns Slo5 wrapped in Slo
func Slo5AsSlo(v *Slo5) Slo {
	return Slo{
		Slo5: v,
	}
}

// Slo6AsSlo is a convenience function that returns Slo6 wrapped in Slo
func Slo6AsSlo(v *Slo6) Slo {
	return Slo{
		Slo6: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Slo) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Slo5
	err = newStrictDecoder(data).Decode(&dst.Slo5)
	if err == nil {
		jsonSlo5, _ := json.Marshal(dst.Slo5)
		if string(jsonSlo5) == "{}" { // empty struct
			dst.Slo5 = nil
		} else {
			if err = validator.Validate(dst.Slo5); err != nil {
				dst.Slo5 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Slo5 = nil
	}

	// try to unmarshal data into Slo6
	err = newStrictDecoder(data).Decode(&dst.Slo6)
	if err == nil {
		jsonSlo6, _ := json.Marshal(dst.Slo6)
		if string(jsonSlo6) == "{}" { // empty struct
			dst.Slo6 = nil
		} else {
			if err = validator.Validate(dst.Slo6); err != nil {
				dst.Slo6 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Slo6 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Slo5 = nil
		dst.Slo6 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Slo)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Slo)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Slo) MarshalJSON() ([]byte, error) {
	if src.Slo5 != nil {
		return json.Marshal(&src.Slo5)
	}

	if src.Slo6 != nil {
		return json.Marshal(&src.Slo6)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Slo) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Slo5 != nil {
		return obj.Slo5
	}

	if obj.Slo6 != nil {
		return obj.Slo6
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Slo) GetActualInstanceValue() (interface{}) {
	if obj.Slo5 != nil {
		return *obj.Slo5
	}

	if obj.Slo6 != nil {
		return *obj.Slo6
	}

	// all schemas are nil
	return nil
}

type NullableSlo struct {
	value *Slo
	isSet bool
}

func (v NullableSlo) Get() *Slo {
	return v.value
}

func (v *NullableSlo) Set(val *Slo) {
	v.value = val
	v.isSet = true
}

func (v NullableSlo) IsSet() bool {
	return v.isSet
}

func (v *NullableSlo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlo(val *Slo) *NullableSlo {
	return &NullableSlo{value: val, isSet: true}
}

func (v NullableSlo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


