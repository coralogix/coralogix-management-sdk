/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SloFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloFilter{}

// SloFilter A filter for SLOs, consisting of a field and a predicate
type SloFilter struct {
	Field SloFilterField `json:"field"`
	Predicate SloFilterPredicate `json:"predicate"`
}

type _SloFilter SloFilter

// NewSloFilter instantiates a new SloFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloFilter(field SloFilterField, predicate SloFilterPredicate) *SloFilter {
	this := SloFilter{}
	this.Field = field
	this.Predicate = predicate
	return &this
}

// NewSloFilterWithDefaults instantiates a new SloFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloFilterWithDefaults() *SloFilter {
	this := SloFilter{}
	return &this
}

// GetField returns the Field field value
func (o *SloFilter) GetField() SloFilterField {
	if o == nil {
		var ret SloFilterField
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *SloFilter) GetFieldOk() (*SloFilterField, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *SloFilter) SetField(v SloFilterField) {
	o.Field = v
}

// GetPredicate returns the Predicate field value
func (o *SloFilter) GetPredicate() SloFilterPredicate {
	if o == nil {
		var ret SloFilterPredicate
		return ret
	}

	return o.Predicate
}

// GetPredicateOk returns a tuple with the Predicate field value
// and a boolean to check if the value has been set.
func (o *SloFilter) GetPredicateOk() (*SloFilterPredicate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Predicate, true
}

// SetPredicate sets field value
func (o *SloFilter) SetPredicate(v SloFilterPredicate) {
	o.Predicate = v
}

func (o SloFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field"] = o.Field
	toSerialize["predicate"] = o.Predicate
	return toSerialize, nil
}

func (o *SloFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"field",
		"predicate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSloFilter := _SloFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSloFilter)

	if err != nil {
		return err
	}

	*o = SloFilter(varSloFilter)

	return err
}

type NullableSloFilter struct {
	value *SloFilter
	isSet bool
}

func (v NullableSloFilter) Get() *SloFilter {
	return v.value
}

func (v *NullableSloFilter) Set(val *SloFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableSloFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableSloFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloFilter(val *SloFilter) *NullableSloFilter {
	return &NullableSloFilter{value: val, isSet: true}
}

func (v NullableSloFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


