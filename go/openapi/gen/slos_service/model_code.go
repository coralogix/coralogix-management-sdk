/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
	"fmt"
)

// Code the model 'Code'
type Code string

// List of Code
const (
	CODE_OK Code = "OK"
	CODE_CANCELLED Code = "CANCELLED"
	CODE_UNKNOWN Code = "UNKNOWN"
	CODE_INVALID_ARGUMENT Code = "INVALID_ARGUMENT"
	CODE_DEADLINE_EXCEEDED Code = "DEADLINE_EXCEEDED"
	CODE_NOT_FOUND Code = "NOT_FOUND"
	CODE_ALREADY_EXISTS Code = "ALREADY_EXISTS"
	CODE_PERMISSION_DENIED Code = "PERMISSION_DENIED"
	CODE_UNAUTHENTICATED Code = "UNAUTHENTICATED"
	CODE_RESOURCE_EXHAUSTED Code = "RESOURCE_EXHAUSTED"
	CODE_FAILED_PRECONDITION Code = "FAILED_PRECONDITION"
	CODE_ABORTED Code = "ABORTED"
	CODE_OUT_OF_RANGE Code = "OUT_OF_RANGE"
	CODE_UNIMPLEMENTED Code = "UNIMPLEMENTED"
	CODE_INTERNAL Code = "INTERNAL"
	CODE_UNAVAILABLE Code = "UNAVAILABLE"
	CODE_DATA_LOSS Code = "DATA_LOSS"
)

// All allowed values of Code enum
var AllowedCodeEnumValues = []Code{
	"OK",
	"CANCELLED",
	"UNKNOWN",
	"INVALID_ARGUMENT",
	"DEADLINE_EXCEEDED",
	"NOT_FOUND",
	"ALREADY_EXISTS",
	"PERMISSION_DENIED",
	"UNAUTHENTICATED",
	"RESOURCE_EXHAUSTED",
	"FAILED_PRECONDITION",
	"ABORTED",
	"OUT_OF_RANGE",
	"UNIMPLEMENTED",
	"INTERNAL",
	"UNAVAILABLE",
	"DATA_LOSS",
}

func (v *Code) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Code(value)
	for _, existing := range AllowedCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Code", value)
}

// NewCodeFromValue returns a pointer to a valid Code
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCodeFromValue(v string) (*Code, error) {
	ev := Code(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Code: valid values are %v", v, AllowedCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Code) IsValid() bool {
	for _, existing := range AllowedCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Code value
func (v Code) Ptr() *Code {
	return &v
}

type NullableCode struct {
	value *Code
	isSet bool
}

func (v NullableCode) Get() *Code {
	return v.value
}

func (v *NullableCode) Set(val *Code) {
	v.value = val
	v.isSet = true
}

func (v NullableCode) IsSet() bool {
	return v.isSet
}

func (v *NullableCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCode(val *Code) *NullableCode {
	return &NullableCode{value: val, isSet: true}
}

func (v NullableCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

