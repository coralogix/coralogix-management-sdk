/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
)

// checks if the V1Grouping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1Grouping{}

// V1Grouping Definition of the SLO grouping fields
type V1Grouping struct {
	Labels []string `json:"labels,omitempty"`
}

// NewV1Grouping instantiates a new V1Grouping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Grouping() *V1Grouping {
	this := V1Grouping{}
	return &this
}

// NewV1GroupingWithDefaults instantiates a new V1Grouping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1GroupingWithDefaults() *V1Grouping {
	this := V1Grouping{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *V1Grouping) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Grouping) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *V1Grouping) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *V1Grouping) SetLabels(v []string) {
	o.Labels = v
}

func (o V1Grouping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1Grouping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	return toSerialize, nil
}

type NullableV1Grouping struct {
	value *V1Grouping
	isSet bool
}

func (v NullableV1Grouping) Get() *V1Grouping {
	return v.value
}

func (v *NullableV1Grouping) Set(val *V1Grouping) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Grouping) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Grouping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Grouping(val *V1Grouping) *NullableV1Grouping {
	return &NullableV1Grouping{value: val, isSet: true}
}

func (v NullableV1Grouping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Grouping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


