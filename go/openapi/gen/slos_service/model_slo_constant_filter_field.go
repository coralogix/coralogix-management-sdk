/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
	"fmt"
)

// SloConstantFilterField the model 'SloConstantFilterField'
type SloConstantFilterField string

// List of SloConstantFilterField
const (
	SLOCONSTANTFILTERFIELD_SLO_CONST_FILTER_FIELD_UNSPECIFIED SloConstantFilterField = "SLO_CONST_FILTER_FIELD_UNSPECIFIED"
	SLOCONSTANTFILTERFIELD_SLO_CONST_FILTER_FIELD_USER_NAME SloConstantFilterField = "SLO_CONST_FILTER_FIELD_USER_NAME"
	SLOCONSTANTFILTERFIELD_SLO_CONST_FILTER_FIELD_SLO_NAME SloConstantFilterField = "SLO_CONST_FILTER_FIELD_SLO_NAME"
)

// All allowed values of SloConstantFilterField enum
var AllowedSloConstantFilterFieldEnumValues = []SloConstantFilterField{
	"SLO_CONST_FILTER_FIELD_UNSPECIFIED",
	"SLO_CONST_FILTER_FIELD_USER_NAME",
	"SLO_CONST_FILTER_FIELD_SLO_NAME",
}

func (v *SloConstantFilterField) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SloConstantFilterField(value)
	for _, existing := range AllowedSloConstantFilterFieldEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SloConstantFilterField", value)
}

// NewSloConstantFilterFieldFromValue returns a pointer to a valid SloConstantFilterField
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSloConstantFilterFieldFromValue(v string) (*SloConstantFilterField, error) {
	ev := SloConstantFilterField(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SloConstantFilterField: valid values are %v", v, AllowedSloConstantFilterFieldEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SloConstantFilterField) IsValid() bool {
	for _, existing := range AllowedSloConstantFilterFieldEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SloConstantFilterField value
func (v SloConstantFilterField) Ptr() *SloConstantFilterField {
	return &v
}

type NullableSloConstantFilterField struct {
	value *SloConstantFilterField
	isSet bool
}

func (v NullableSloConstantFilterField) Get() *SloConstantFilterField {
	return v.value
}

func (v *NullableSloConstantFilterField) Set(val *SloConstantFilterField) {
	v.value = val
	v.isSet = true
}

func (v NullableSloConstantFilterField) IsSet() bool {
	return v.isSet
}

func (v *NullableSloConstantFilterField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloConstantFilterField(val *SloConstantFilterField) *NullableSloConstantFilterField {
	return &NullableSloConstantFilterField{value: val, isSet: true}
}

func (v NullableSloConstantFilterField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloConstantFilterField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

