/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
	"fmt"
)

// SloTimeFrame the model 'SloTimeFrame'
type SloTimeFrame string

// List of SloTimeFrame
const (
	SLOTIMEFRAME_SLO_TIME_FRAME_UNSPECIFIED SloTimeFrame = "SLO_TIME_FRAME_UNSPECIFIED"
	SLOTIMEFRAME_SLO_TIME_FRAME_7_DAYS SloTimeFrame = "SLO_TIME_FRAME_7_DAYS"
	SLOTIMEFRAME_SLO_TIME_FRAME_14_DAYS SloTimeFrame = "SLO_TIME_FRAME_14_DAYS"
	SLOTIMEFRAME_SLO_TIME_FRAME_21_DAYS SloTimeFrame = "SLO_TIME_FRAME_21_DAYS"
	SLOTIMEFRAME_SLO_TIME_FRAME_28_DAYS SloTimeFrame = "SLO_TIME_FRAME_28_DAYS"
)

// All allowed values of SloTimeFrame enum
var AllowedSloTimeFrameEnumValues = []SloTimeFrame{
	"SLO_TIME_FRAME_UNSPECIFIED",
	"SLO_TIME_FRAME_7_DAYS",
	"SLO_TIME_FRAME_14_DAYS",
	"SLO_TIME_FRAME_21_DAYS",
	"SLO_TIME_FRAME_28_DAYS",
}

func (v *SloTimeFrame) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SloTimeFrame(value)
	for _, existing := range AllowedSloTimeFrameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SloTimeFrame", value)
}

// NewSloTimeFrameFromValue returns a pointer to a valid SloTimeFrame
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSloTimeFrameFromValue(v string) (*SloTimeFrame, error) {
	ev := SloTimeFrame(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SloTimeFrame: valid values are %v", v, AllowedSloTimeFrameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SloTimeFrame) IsValid() bool {
	for _, existing := range AllowedSloTimeFrameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SloTimeFrame value
func (v SloTimeFrame) Ptr() *SloTimeFrame {
	return &v
}

type NullableSloTimeFrame struct {
	value *SloTimeFrame
	isSet bool
}

func (v NullableSloTimeFrame) Get() *SloTimeFrame {
	return v.value
}

func (v *NullableSloTimeFrame) Set(val *SloTimeFrame) {
	v.value = val
	v.isSet = true
}

func (v NullableSloTimeFrame) IsSet() bool {
	return v.isSet
}

func (v *NullableSloTimeFrame) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloTimeFrame(val *SloTimeFrame) *NullableSloTimeFrame {
	return &NullableSloTimeFrame{value: val, isSet: true}
}

func (v NullableSloTimeFrame) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloTimeFrame) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

