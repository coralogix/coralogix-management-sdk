/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
	"fmt"
)

// MissingDataStrategy the model 'MissingDataStrategy'
type MissingDataStrategy string

// List of MissingDataStrategy
const (
	MISSINGDATASTRATEGY_MISSING_DATA_STRATEGY_UNCOUNTED MissingDataStrategy = "MISSING_DATA_STRATEGY_UNCOUNTED"
	MISSINGDATASTRATEGY_MISSING_DATA_STRATEGY_GOOD MissingDataStrategy = "MISSING_DATA_STRATEGY_GOOD"
	MISSINGDATASTRATEGY_MISSING_DATA_STRATEGY_BAD MissingDataStrategy = "MISSING_DATA_STRATEGY_BAD"
)

// All allowed values of MissingDataStrategy enum
var AllowedMissingDataStrategyEnumValues = []MissingDataStrategy{
	"MISSING_DATA_STRATEGY_UNCOUNTED",
	"MISSING_DATA_STRATEGY_GOOD",
	"MISSING_DATA_STRATEGY_BAD",
}

func (v *MissingDataStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MissingDataStrategy(value)
	for _, existing := range AllowedMissingDataStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MissingDataStrategy", value)
}

// NewMissingDataStrategyFromValue returns a pointer to a valid MissingDataStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMissingDataStrategyFromValue(v string) (*MissingDataStrategy, error) {
	ev := MissingDataStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MissingDataStrategy: valid values are %v", v, AllowedMissingDataStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MissingDataStrategy) IsValid() bool {
	for _, existing := range AllowedMissingDataStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MissingDataStrategy value
func (v MissingDataStrategy) Ptr() *MissingDataStrategy {
	return &v
}

type NullableMissingDataStrategy struct {
	value *MissingDataStrategy
	isSet bool
}

func (v NullableMissingDataStrategy) Get() *MissingDataStrategy {
	return v.value
}

func (v *NullableMissingDataStrategy) Set(val *MissingDataStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableMissingDataStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableMissingDataStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMissingDataStrategy(val *MissingDataStrategy) *NullableMissingDataStrategy {
	return &NullableMissingDataStrategy{value: val, isSet: true}
}

func (v NullableMissingDataStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMissingDataStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

