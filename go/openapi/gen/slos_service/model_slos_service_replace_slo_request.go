/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SlosServiceReplaceSloRequest - struct for SlosServiceReplaceSloRequest
type SlosServiceReplaceSloRequest struct {
	SloRequestBasedMetricSli *SloRequestBasedMetricSli
	SloWindowBasedMetricSli *SloWindowBasedMetricSli
}

// SloRequestBasedMetricSliAsSlosServiceReplaceSloRequest is a convenience function that returns SloRequestBasedMetricSli wrapped in SlosServiceReplaceSloRequest
func SloRequestBasedMetricSliAsSlosServiceReplaceSloRequest(v *SloRequestBasedMetricSli) SlosServiceReplaceSloRequest {
	return SlosServiceReplaceSloRequest{
		SloRequestBasedMetricSli: v,
	}
}

// SloWindowBasedMetricSliAsSlosServiceReplaceSloRequest is a convenience function that returns SloWindowBasedMetricSli wrapped in SlosServiceReplaceSloRequest
func SloWindowBasedMetricSliAsSlosServiceReplaceSloRequest(v *SloWindowBasedMetricSli) SlosServiceReplaceSloRequest {
	return SlosServiceReplaceSloRequest{
		SloWindowBasedMetricSli: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SlosServiceReplaceSloRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SloRequestBasedMetricSli
	err = newStrictDecoder(data).Decode(&dst.SloRequestBasedMetricSli)
	if err == nil {
		jsonSloRequestBasedMetricSli, _ := json.Marshal(dst.SloRequestBasedMetricSli)
		if string(jsonSloRequestBasedMetricSli) == "{}" { // empty struct
			dst.SloRequestBasedMetricSli = nil
		} else {
			if err = validator.Validate(dst.SloRequestBasedMetricSli); err != nil {
				dst.SloRequestBasedMetricSli = nil
			} else {
				match++
			}
		}
	} else {
		dst.SloRequestBasedMetricSli = nil
	}

	// try to unmarshal data into SloWindowBasedMetricSli
	err = newStrictDecoder(data).Decode(&dst.SloWindowBasedMetricSli)
	if err == nil {
		jsonSloWindowBasedMetricSli, _ := json.Marshal(dst.SloWindowBasedMetricSli)
		if string(jsonSloWindowBasedMetricSli) == "{}" { // empty struct
			dst.SloWindowBasedMetricSli = nil
		} else {
			if err = validator.Validate(dst.SloWindowBasedMetricSli); err != nil {
				dst.SloWindowBasedMetricSli = nil
			} else {
				match++
			}
		}
	} else {
		dst.SloWindowBasedMetricSli = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SloRequestBasedMetricSli = nil
		dst.SloWindowBasedMetricSli = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SlosServiceReplaceSloRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SlosServiceReplaceSloRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SlosServiceReplaceSloRequest) MarshalJSON() ([]byte, error) {
	if src.SloRequestBasedMetricSli != nil {
		return json.Marshal(&src.SloRequestBasedMetricSli)
	}

	if src.SloWindowBasedMetricSli != nil {
		return json.Marshal(&src.SloWindowBasedMetricSli)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SlosServiceReplaceSloRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SloRequestBasedMetricSli != nil {
		return obj.SloRequestBasedMetricSli
	}

	if obj.SloWindowBasedMetricSli != nil {
		return obj.SloWindowBasedMetricSli
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SlosServiceReplaceSloRequest) GetActualInstanceValue() (interface{}) {
	if obj.SloRequestBasedMetricSli != nil {
		return *obj.SloRequestBasedMetricSli
	}

	if obj.SloWindowBasedMetricSli != nil {
		return *obj.SloWindowBasedMetricSli
	}

	// all schemas are nil
	return nil
}

type NullableSlosServiceReplaceSloRequest struct {
	value *SlosServiceReplaceSloRequest
	isSet bool
}

func (v NullableSlosServiceReplaceSloRequest) Get() *SlosServiceReplaceSloRequest {
	return v.value
}

func (v *NullableSlosServiceReplaceSloRequest) Set(val *SlosServiceReplaceSloRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSlosServiceReplaceSloRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSlosServiceReplaceSloRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlosServiceReplaceSloRequest(val *SlosServiceReplaceSloRequest) *NullableSlosServiceReplaceSloRequest {
	return &NullableSlosServiceReplaceSloRequest{value: val, isSet: true}
}

func (v NullableSlosServiceReplaceSloRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlosServiceReplaceSloRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


