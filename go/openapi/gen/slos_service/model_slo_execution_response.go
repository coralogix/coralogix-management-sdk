/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SloExecutionResponse - struct for SloExecutionResponse
type SloExecutionResponse struct {
	SloExecutionResponseCreateSloResponse *SloExecutionResponseCreateSloResponse
	SloExecutionResponseDeleteSloResponse *SloExecutionResponseDeleteSloResponse
	SloExecutionResponseReplaceSloResponse *SloExecutionResponseReplaceSloResponse
}

// SloExecutionResponseCreateSloResponseAsSloExecutionResponse is a convenience function that returns SloExecutionResponseCreateSloResponse wrapped in SloExecutionResponse
func SloExecutionResponseCreateSloResponseAsSloExecutionResponse(v *SloExecutionResponseCreateSloResponse) SloExecutionResponse {
	return SloExecutionResponse{
		SloExecutionResponseCreateSloResponse: v,
	}
}

// SloExecutionResponseDeleteSloResponseAsSloExecutionResponse is a convenience function that returns SloExecutionResponseDeleteSloResponse wrapped in SloExecutionResponse
func SloExecutionResponseDeleteSloResponseAsSloExecutionResponse(v *SloExecutionResponseDeleteSloResponse) SloExecutionResponse {
	return SloExecutionResponse{
		SloExecutionResponseDeleteSloResponse: v,
	}
}

// SloExecutionResponseReplaceSloResponseAsSloExecutionResponse is a convenience function that returns SloExecutionResponseReplaceSloResponse wrapped in SloExecutionResponse
func SloExecutionResponseReplaceSloResponseAsSloExecutionResponse(v *SloExecutionResponseReplaceSloResponse) SloExecutionResponse {
	return SloExecutionResponse{
		SloExecutionResponseReplaceSloResponse: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SloExecutionResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SloExecutionResponseCreateSloResponse
	err = newStrictDecoder(data).Decode(&dst.SloExecutionResponseCreateSloResponse)
	if err == nil {
		jsonSloExecutionResponseCreateSloResponse, _ := json.Marshal(dst.SloExecutionResponseCreateSloResponse)
		if string(jsonSloExecutionResponseCreateSloResponse) == "{}" { // empty struct
			dst.SloExecutionResponseCreateSloResponse = nil
		} else {
			if err = validator.Validate(dst.SloExecutionResponseCreateSloResponse); err != nil {
				dst.SloExecutionResponseCreateSloResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.SloExecutionResponseCreateSloResponse = nil
	}

	// try to unmarshal data into SloExecutionResponseDeleteSloResponse
	err = newStrictDecoder(data).Decode(&dst.SloExecutionResponseDeleteSloResponse)
	if err == nil {
		jsonSloExecutionResponseDeleteSloResponse, _ := json.Marshal(dst.SloExecutionResponseDeleteSloResponse)
		if string(jsonSloExecutionResponseDeleteSloResponse) == "{}" { // empty struct
			dst.SloExecutionResponseDeleteSloResponse = nil
		} else {
			if err = validator.Validate(dst.SloExecutionResponseDeleteSloResponse); err != nil {
				dst.SloExecutionResponseDeleteSloResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.SloExecutionResponseDeleteSloResponse = nil
	}

	// try to unmarshal data into SloExecutionResponseReplaceSloResponse
	err = newStrictDecoder(data).Decode(&dst.SloExecutionResponseReplaceSloResponse)
	if err == nil {
		jsonSloExecutionResponseReplaceSloResponse, _ := json.Marshal(dst.SloExecutionResponseReplaceSloResponse)
		if string(jsonSloExecutionResponseReplaceSloResponse) == "{}" { // empty struct
			dst.SloExecutionResponseReplaceSloResponse = nil
		} else {
			if err = validator.Validate(dst.SloExecutionResponseReplaceSloResponse); err != nil {
				dst.SloExecutionResponseReplaceSloResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.SloExecutionResponseReplaceSloResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SloExecutionResponseCreateSloResponse = nil
		dst.SloExecutionResponseDeleteSloResponse = nil
		dst.SloExecutionResponseReplaceSloResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SloExecutionResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SloExecutionResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SloExecutionResponse) MarshalJSON() ([]byte, error) {
	if src.SloExecutionResponseCreateSloResponse != nil {
		return json.Marshal(&src.SloExecutionResponseCreateSloResponse)
	}

	if src.SloExecutionResponseDeleteSloResponse != nil {
		return json.Marshal(&src.SloExecutionResponseDeleteSloResponse)
	}

	if src.SloExecutionResponseReplaceSloResponse != nil {
		return json.Marshal(&src.SloExecutionResponseReplaceSloResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SloExecutionResponse) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SloExecutionResponseCreateSloResponse != nil {
		return obj.SloExecutionResponseCreateSloResponse
	}

	if obj.SloExecutionResponseDeleteSloResponse != nil {
		return obj.SloExecutionResponseDeleteSloResponse
	}

	if obj.SloExecutionResponseReplaceSloResponse != nil {
		return obj.SloExecutionResponseReplaceSloResponse
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SloExecutionResponse) GetActualInstanceValue() (interface{}) {
	if obj.SloExecutionResponseCreateSloResponse != nil {
		return *obj.SloExecutionResponseCreateSloResponse
	}

	if obj.SloExecutionResponseDeleteSloResponse != nil {
		return *obj.SloExecutionResponseDeleteSloResponse
	}

	if obj.SloExecutionResponseReplaceSloResponse != nil {
		return *obj.SloExecutionResponseReplaceSloResponse
	}

	// all schemas are nil
	return nil
}

type NullableSloExecutionResponse struct {
	value *SloExecutionResponse
	isSet bool
}

func (v NullableSloExecutionResponse) Get() *SloExecutionResponse {
	return v.value
}

func (v *NullableSloExecutionResponse) Set(val *SloExecutionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSloExecutionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSloExecutionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloExecutionResponse(val *SloExecutionResponse) *NullableSloExecutionResponse {
	return &NullableSloExecutionResponse{value: val, isSet: true}
}

func (v NullableSloExecutionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloExecutionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


