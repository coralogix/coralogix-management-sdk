/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SloExecutionResponse - struct for SloExecutionResponse
type SloExecutionResponse struct {
	SloExecutionResponse1 *SloExecutionResponse1
	SloExecutionResponse2 *SloExecutionResponse2
	SloExecutionResponse3 *SloExecutionResponse3
}

// SloExecutionResponse1AsSloExecutionResponse is a convenience function that returns SloExecutionResponse1 wrapped in SloExecutionResponse
func SloExecutionResponse1AsSloExecutionResponse(v *SloExecutionResponse1) SloExecutionResponse {
	return SloExecutionResponse{
		SloExecutionResponse1: v,
	}
}

// SloExecutionResponse2AsSloExecutionResponse is a convenience function that returns SloExecutionResponse2 wrapped in SloExecutionResponse
func SloExecutionResponse2AsSloExecutionResponse(v *SloExecutionResponse2) SloExecutionResponse {
	return SloExecutionResponse{
		SloExecutionResponse2: v,
	}
}

// SloExecutionResponse3AsSloExecutionResponse is a convenience function that returns SloExecutionResponse3 wrapped in SloExecutionResponse
func SloExecutionResponse3AsSloExecutionResponse(v *SloExecutionResponse3) SloExecutionResponse {
	return SloExecutionResponse{
		SloExecutionResponse3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SloExecutionResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SloExecutionResponse1
	err = newStrictDecoder(data).Decode(&dst.SloExecutionResponse1)
	if err == nil {
		jsonSloExecutionResponse1, _ := json.Marshal(dst.SloExecutionResponse1)
		if string(jsonSloExecutionResponse1) == "{}" { // empty struct
			dst.SloExecutionResponse1 = nil
		} else {
			if err = validator.Validate(dst.SloExecutionResponse1); err != nil {
				dst.SloExecutionResponse1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.SloExecutionResponse1 = nil
	}

	// try to unmarshal data into SloExecutionResponse2
	err = newStrictDecoder(data).Decode(&dst.SloExecutionResponse2)
	if err == nil {
		jsonSloExecutionResponse2, _ := json.Marshal(dst.SloExecutionResponse2)
		if string(jsonSloExecutionResponse2) == "{}" { // empty struct
			dst.SloExecutionResponse2 = nil
		} else {
			if err = validator.Validate(dst.SloExecutionResponse2); err != nil {
				dst.SloExecutionResponse2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.SloExecutionResponse2 = nil
	}

	// try to unmarshal data into SloExecutionResponse3
	err = newStrictDecoder(data).Decode(&dst.SloExecutionResponse3)
	if err == nil {
		jsonSloExecutionResponse3, _ := json.Marshal(dst.SloExecutionResponse3)
		if string(jsonSloExecutionResponse3) == "{}" { // empty struct
			dst.SloExecutionResponse3 = nil
		} else {
			if err = validator.Validate(dst.SloExecutionResponse3); err != nil {
				dst.SloExecutionResponse3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.SloExecutionResponse3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SloExecutionResponse1 = nil
		dst.SloExecutionResponse2 = nil
		dst.SloExecutionResponse3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SloExecutionResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SloExecutionResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SloExecutionResponse) MarshalJSON() ([]byte, error) {
	if src.SloExecutionResponse1 != nil {
		return json.Marshal(&src.SloExecutionResponse1)
	}

	if src.SloExecutionResponse2 != nil {
		return json.Marshal(&src.SloExecutionResponse2)
	}

	if src.SloExecutionResponse3 != nil {
		return json.Marshal(&src.SloExecutionResponse3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SloExecutionResponse) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SloExecutionResponse1 != nil {
		return obj.SloExecutionResponse1
	}

	if obj.SloExecutionResponse2 != nil {
		return obj.SloExecutionResponse2
	}

	if obj.SloExecutionResponse3 != nil {
		return obj.SloExecutionResponse3
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SloExecutionResponse) GetActualInstanceValue() (interface{}) {
	if obj.SloExecutionResponse1 != nil {
		return *obj.SloExecutionResponse1
	}

	if obj.SloExecutionResponse2 != nil {
		return *obj.SloExecutionResponse2
	}

	if obj.SloExecutionResponse3 != nil {
		return *obj.SloExecutionResponse3
	}

	// all schemas are nil
	return nil
}

type NullableSloExecutionResponse struct {
	value *SloExecutionResponse
	isSet bool
}

func (v NullableSloExecutionResponse) Get() *SloExecutionResponse {
	return v.value
}

func (v *NullableSloExecutionResponse) Set(val *SloExecutionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSloExecutionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSloExecutionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloExecutionResponse(val *SloExecutionResponse) *NullableSloExecutionResponse {
	return &NullableSloExecutionResponse{value: val, isSet: true}
}

func (v NullableSloExecutionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloExecutionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


