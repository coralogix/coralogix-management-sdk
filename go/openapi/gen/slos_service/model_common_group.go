/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
)

// checks if the CommonGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonGroup{}

// CommonGroup struct for CommonGroup
type CommonGroup struct {
	Field *FieldGroup `json:"field,omitempty"`
	Groups []CommonGroup `json:"groups,omitempty"`
	Value *float64 `json:"value,omitempty"`
}

// NewCommonGroup instantiates a new CommonGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonGroup() *CommonGroup {
	this := CommonGroup{}
	return &this
}

// NewCommonGroupWithDefaults instantiates a new CommonGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonGroupWithDefaults() *CommonGroup {
	this := CommonGroup{}
	return &this
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *CommonGroup) GetField() FieldGroup {
	if o == nil || IsNil(o.Field) {
		var ret FieldGroup
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonGroup) GetFieldOk() (*FieldGroup, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *CommonGroup) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given FieldGroup and assigns it to the Field field.
func (o *CommonGroup) SetField(v FieldGroup) {
	o.Field = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *CommonGroup) GetGroups() []CommonGroup {
	if o == nil || IsNil(o.Groups) {
		var ret []CommonGroup
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonGroup) GetGroupsOk() ([]CommonGroup, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *CommonGroup) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []CommonGroup and assigns it to the Groups field.
func (o *CommonGroup) SetGroups(v []CommonGroup) {
	o.Groups = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *CommonGroup) GetValue() float64 {
	if o == nil || IsNil(o.Value) {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonGroup) GetValueOk() (*float64, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *CommonGroup) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *CommonGroup) SetValue(v float64) {
	o.Value = &v
}

func (o CommonGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableCommonGroup struct {
	value *CommonGroup
	isSet bool
}

func (v NullableCommonGroup) Get() *CommonGroup {
	return v.value
}

func (v *NullableCommonGroup) Set(val *CommonGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonGroup(val *CommonGroup) *NullableCommonGroup {
	return &NullableCommonGroup{value: val, isSet: true}
}

func (v NullableCommonGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


