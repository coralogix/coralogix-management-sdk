/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RequestBasedMetricSli type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestBasedMetricSli{}

// RequestBasedMetricSli Definition of a request-based SLI based on metrics
type RequestBasedMetricSli struct {
	GoodEvents Metric `json:"goodEvents"`
	TotalEvents Metric `json:"totalEvents"`
}

type _RequestBasedMetricSli RequestBasedMetricSli

// NewRequestBasedMetricSli instantiates a new RequestBasedMetricSli object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestBasedMetricSli(goodEvents Metric, totalEvents Metric) *RequestBasedMetricSli {
	this := RequestBasedMetricSli{}
	this.GoodEvents = goodEvents
	this.TotalEvents = totalEvents
	return &this
}

// NewRequestBasedMetricSliWithDefaults instantiates a new RequestBasedMetricSli object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestBasedMetricSliWithDefaults() *RequestBasedMetricSli {
	this := RequestBasedMetricSli{}
	return &this
}

// GetGoodEvents returns the GoodEvents field value
func (o *RequestBasedMetricSli) GetGoodEvents() Metric {
	if o == nil {
		var ret Metric
		return ret
	}

	return o.GoodEvents
}

// GetGoodEventsOk returns a tuple with the GoodEvents field value
// and a boolean to check if the value has been set.
func (o *RequestBasedMetricSli) GetGoodEventsOk() (*Metric, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GoodEvents, true
}

// SetGoodEvents sets field value
func (o *RequestBasedMetricSli) SetGoodEvents(v Metric) {
	o.GoodEvents = v
}

// GetTotalEvents returns the TotalEvents field value
func (o *RequestBasedMetricSli) GetTotalEvents() Metric {
	if o == nil {
		var ret Metric
		return ret
	}

	return o.TotalEvents
}

// GetTotalEventsOk returns a tuple with the TotalEvents field value
// and a boolean to check if the value has been set.
func (o *RequestBasedMetricSli) GetTotalEventsOk() (*Metric, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalEvents, true
}

// SetTotalEvents sets field value
func (o *RequestBasedMetricSli) SetTotalEvents(v Metric) {
	o.TotalEvents = v
}

func (o RequestBasedMetricSli) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestBasedMetricSli) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["goodEvents"] = o.GoodEvents
	toSerialize["totalEvents"] = o.TotalEvents
	return toSerialize, nil
}

func (o *RequestBasedMetricSli) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"goodEvents",
		"totalEvents",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRequestBasedMetricSli := _RequestBasedMetricSli{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRequestBasedMetricSli)

	if err != nil {
		return err
	}

	*o = RequestBasedMetricSli(varRequestBasedMetricSli)

	return err
}

type NullableRequestBasedMetricSli struct {
	value *RequestBasedMetricSli
	isSet bool
}

func (v NullableRequestBasedMetricSli) Get() *RequestBasedMetricSli {
	return v.value
}

func (v *NullableRequestBasedMetricSli) Set(val *RequestBasedMetricSli) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestBasedMetricSli) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestBasedMetricSli) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestBasedMetricSli(val *RequestBasedMetricSli) *NullableRequestBasedMetricSli {
	return &NullableRequestBasedMetricSli{value: val, isSet: true}
}

func (v NullableRequestBasedMetricSli) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestBasedMetricSli) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


