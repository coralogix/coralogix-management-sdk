/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WindowBasedMetricSli type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WindowBasedMetricSli{}

// WindowBasedMetricSli Definition of a window-based SLI based on metrics
type WindowBasedMetricSli struct {
	ComparisonOperator ComparisonOperator `json:"comparisonOperator"`
	MissingDataStrategy *MissingDataStrategy `json:"missingDataStrategy,omitempty"`
	Query Metric `json:"query"`
	Threshold float32 `json:"threshold"`
	Window WindowSloWindow `json:"window"`
}

type _WindowBasedMetricSli WindowBasedMetricSli

// NewWindowBasedMetricSli instantiates a new WindowBasedMetricSli object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWindowBasedMetricSli(comparisonOperator ComparisonOperator, query Metric, threshold float32, window WindowSloWindow) *WindowBasedMetricSli {
	this := WindowBasedMetricSli{}
	this.ComparisonOperator = comparisonOperator
	this.Query = query
	this.Threshold = threshold
	this.Window = window
	return &this
}

// NewWindowBasedMetricSliWithDefaults instantiates a new WindowBasedMetricSli object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWindowBasedMetricSliWithDefaults() *WindowBasedMetricSli {
	this := WindowBasedMetricSli{}
	return &this
}

// GetComparisonOperator returns the ComparisonOperator field value
func (o *WindowBasedMetricSli) GetComparisonOperator() ComparisonOperator {
	if o == nil {
		var ret ComparisonOperator
		return ret
	}

	return o.ComparisonOperator
}

// GetComparisonOperatorOk returns a tuple with the ComparisonOperator field value
// and a boolean to check if the value has been set.
func (o *WindowBasedMetricSli) GetComparisonOperatorOk() (*ComparisonOperator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComparisonOperator, true
}

// SetComparisonOperator sets field value
func (o *WindowBasedMetricSli) SetComparisonOperator(v ComparisonOperator) {
	o.ComparisonOperator = v
}

// GetMissingDataStrategy returns the MissingDataStrategy field value if set, zero value otherwise.
func (o *WindowBasedMetricSli) GetMissingDataStrategy() MissingDataStrategy {
	if o == nil || IsNil(o.MissingDataStrategy) {
		var ret MissingDataStrategy
		return ret
	}
	return *o.MissingDataStrategy
}

// GetMissingDataStrategyOk returns a tuple with the MissingDataStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WindowBasedMetricSli) GetMissingDataStrategyOk() (*MissingDataStrategy, bool) {
	if o == nil || IsNil(o.MissingDataStrategy) {
		return nil, false
	}
	return o.MissingDataStrategy, true
}

// HasMissingDataStrategy returns a boolean if a field has been set.
func (o *WindowBasedMetricSli) HasMissingDataStrategy() bool {
	if o != nil && !IsNil(o.MissingDataStrategy) {
		return true
	}

	return false
}

// SetMissingDataStrategy gets a reference to the given MissingDataStrategy and assigns it to the MissingDataStrategy field.
func (o *WindowBasedMetricSli) SetMissingDataStrategy(v MissingDataStrategy) {
	o.MissingDataStrategy = &v
}

// GetQuery returns the Query field value
func (o *WindowBasedMetricSli) GetQuery() Metric {
	if o == nil {
		var ret Metric
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *WindowBasedMetricSli) GetQueryOk() (*Metric, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *WindowBasedMetricSli) SetQuery(v Metric) {
	o.Query = v
}

// GetThreshold returns the Threshold field value
func (o *WindowBasedMetricSli) GetThreshold() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value
// and a boolean to check if the value has been set.
func (o *WindowBasedMetricSli) GetThresholdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Threshold, true
}

// SetThreshold sets field value
func (o *WindowBasedMetricSli) SetThreshold(v float32) {
	o.Threshold = v
}

// GetWindow returns the Window field value
func (o *WindowBasedMetricSli) GetWindow() WindowSloWindow {
	if o == nil {
		var ret WindowSloWindow
		return ret
	}

	return o.Window
}

// GetWindowOk returns a tuple with the Window field value
// and a boolean to check if the value has been set.
func (o *WindowBasedMetricSli) GetWindowOk() (*WindowSloWindow, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Window, true
}

// SetWindow sets field value
func (o *WindowBasedMetricSli) SetWindow(v WindowSloWindow) {
	o.Window = v
}

func (o WindowBasedMetricSli) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WindowBasedMetricSli) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["comparisonOperator"] = o.ComparisonOperator
	if !IsNil(o.MissingDataStrategy) {
		toSerialize["missingDataStrategy"] = o.MissingDataStrategy
	}
	toSerialize["query"] = o.Query
	toSerialize["threshold"] = o.Threshold
	toSerialize["window"] = o.Window
	return toSerialize, nil
}

func (o *WindowBasedMetricSli) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"comparisonOperator",
		"query",
		"threshold",
		"window",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWindowBasedMetricSli := _WindowBasedMetricSli{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWindowBasedMetricSli)

	if err != nil {
		return err
	}

	*o = WindowBasedMetricSli(varWindowBasedMetricSli)

	return err
}

type NullableWindowBasedMetricSli struct {
	value *WindowBasedMetricSli
	isSet bool
}

func (v NullableWindowBasedMetricSli) Get() *WindowBasedMetricSli {
	return v.value
}

func (v *NullableWindowBasedMetricSli) Set(val *WindowBasedMetricSli) {
	v.value = val
	v.isSet = true
}

func (v NullableWindowBasedMetricSli) IsSet() bool {
	return v.isSet
}

func (v *NullableWindowBasedMetricSli) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWindowBasedMetricSli(val *WindowBasedMetricSli) *NullableWindowBasedMetricSli {
	return &NullableWindowBasedMetricSli{value: val, isSet: true}
}

func (v NullableWindowBasedMetricSli) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWindowBasedMetricSli) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


