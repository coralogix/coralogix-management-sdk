/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slos_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResponseStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseStatus{}

// ResponseStatus Status of the response, including error code and message.
type ResponseStatus struct {
	Details *map[string]string `json:"details,omitempty"`
	Message *string `json:"message,omitempty"`
	StatusCode Code `json:"statusCode"`
}

type _ResponseStatus ResponseStatus

// NewResponseStatus instantiates a new ResponseStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseStatus(statusCode Code) *ResponseStatus {
	this := ResponseStatus{}
	this.StatusCode = statusCode
	return &this
}

// NewResponseStatusWithDefaults instantiates a new ResponseStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseStatusWithDefaults() *ResponseStatus {
	this := ResponseStatus{}
	return &this
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *ResponseStatus) GetDetails() map[string]string {
	if o == nil || IsNil(o.Details) {
		var ret map[string]string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseStatus) GetDetailsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *ResponseStatus) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given map[string]string and assigns it to the Details field.
func (o *ResponseStatus) SetDetails(v map[string]string) {
	o.Details = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ResponseStatus) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseStatus) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ResponseStatus) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ResponseStatus) SetMessage(v string) {
	o.Message = &v
}

// GetStatusCode returns the StatusCode field value
func (o *ResponseStatus) GetStatusCode() Code {
	if o == nil {
		var ret Code
		return ret
	}

	return o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value
// and a boolean to check if the value has been set.
func (o *ResponseStatus) GetStatusCodeOk() (*Code, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusCode, true
}

// SetStatusCode sets field value
func (o *ResponseStatus) SetStatusCode(v Code) {
	o.StatusCode = v
}

func (o ResponseStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	toSerialize["statusCode"] = o.StatusCode
	return toSerialize, nil
}

func (o *ResponseStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"statusCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponseStatus := _ResponseStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResponseStatus)

	if err != nil {
		return err
	}

	*o = ResponseStatus(varResponseStatus)

	return err
}

type NullableResponseStatus struct {
	value *ResponseStatus
	isSet bool
}

func (v NullableResponseStatus) Get() *ResponseStatus {
	return v.value
}

func (v *NullableResponseStatus) Set(val *ResponseStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseStatus(val *ResponseStatus) *NullableResponseStatus {
	return &NullableResponseStatus{value: val, isSet: true}
}

func (v NullableResponseStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


