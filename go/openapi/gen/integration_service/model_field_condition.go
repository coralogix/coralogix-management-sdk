/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FieldCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FieldCondition{}

// FieldCondition struct for FieldCondition
type FieldCondition struct {
	Type FieldConditionConditionType `json:"type"`
	Values []FieldConditionFieldValue `json:"values,omitempty"`
}

type _FieldCondition FieldCondition

// NewFieldCondition instantiates a new FieldCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldCondition(type_ FieldConditionConditionType) *FieldCondition {
	this := FieldCondition{}
	this.Type = type_
	return &this
}

// NewFieldConditionWithDefaults instantiates a new FieldCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldConditionWithDefaults() *FieldCondition {
	this := FieldCondition{}
	return &this
}

// GetType returns the Type field value
func (o *FieldCondition) GetType() FieldConditionConditionType {
	if o == nil {
		var ret FieldConditionConditionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FieldCondition) GetTypeOk() (*FieldConditionConditionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FieldCondition) SetType(v FieldConditionConditionType) {
	o.Type = v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *FieldCondition) GetValues() []FieldConditionFieldValue {
	if o == nil || IsNil(o.Values) {
		var ret []FieldConditionFieldValue
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldCondition) GetValuesOk() ([]FieldConditionFieldValue, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *FieldCondition) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []FieldConditionFieldValue and assigns it to the Values field.
func (o *FieldCondition) SetValues(v []FieldConditionFieldValue) {
	o.Values = v
}

func (o FieldCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

func (o *FieldCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFieldCondition := _FieldCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFieldCondition)

	if err != nil {
		return err
	}

	*o = FieldCondition(varFieldCondition)

	return err
}

type NullableFieldCondition struct {
	value *FieldCondition
	isSet bool
}

func (v NullableFieldCondition) Get() *FieldCondition {
	return v.value
}

func (v *NullableFieldCondition) Set(val *FieldCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldCondition(val *FieldCondition) *NullableFieldCondition {
	return &NullableFieldCondition{value: val, isSet: true}
}

func (v NullableFieldCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


