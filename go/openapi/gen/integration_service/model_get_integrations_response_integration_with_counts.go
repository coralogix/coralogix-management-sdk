/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
)

// checks if the GetIntegrationsResponseIntegrationWithCounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetIntegrationsResponseIntegrationWithCounts{}

// GetIntegrationsResponseIntegrationWithCounts struct for GetIntegrationsResponseIntegrationWithCounts
type GetIntegrationsResponseIntegrationWithCounts struct {
	AmountIntegrations *int64 `json:"amountIntegrations,omitempty"`
	Errors []string `json:"errors,omitempty"`
	Integration *Integration `json:"integration,omitempty"`
	IsNew *bool `json:"isNew,omitempty"`
	UpgradeAvailable *bool `json:"upgradeAvailable,omitempty"`
}

// NewGetIntegrationsResponseIntegrationWithCounts instantiates a new GetIntegrationsResponseIntegrationWithCounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetIntegrationsResponseIntegrationWithCounts() *GetIntegrationsResponseIntegrationWithCounts {
	this := GetIntegrationsResponseIntegrationWithCounts{}
	return &this
}

// NewGetIntegrationsResponseIntegrationWithCountsWithDefaults instantiates a new GetIntegrationsResponseIntegrationWithCounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetIntegrationsResponseIntegrationWithCountsWithDefaults() *GetIntegrationsResponseIntegrationWithCounts {
	this := GetIntegrationsResponseIntegrationWithCounts{}
	return &this
}

// GetAmountIntegrations returns the AmountIntegrations field value if set, zero value otherwise.
func (o *GetIntegrationsResponseIntegrationWithCounts) GetAmountIntegrations() int64 {
	if o == nil || IsNil(o.AmountIntegrations) {
		var ret int64
		return ret
	}
	return *o.AmountIntegrations
}

// GetAmountIntegrationsOk returns a tuple with the AmountIntegrations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIntegrationsResponseIntegrationWithCounts) GetAmountIntegrationsOk() (*int64, bool) {
	if o == nil || IsNil(o.AmountIntegrations) {
		return nil, false
	}
	return o.AmountIntegrations, true
}

// HasAmountIntegrations returns a boolean if a field has been set.
func (o *GetIntegrationsResponseIntegrationWithCounts) HasAmountIntegrations() bool {
	if o != nil && !IsNil(o.AmountIntegrations) {
		return true
	}

	return false
}

// SetAmountIntegrations gets a reference to the given int64 and assigns it to the AmountIntegrations field.
func (o *GetIntegrationsResponseIntegrationWithCounts) SetAmountIntegrations(v int64) {
	o.AmountIntegrations = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *GetIntegrationsResponseIntegrationWithCounts) GetErrors() []string {
	if o == nil || IsNil(o.Errors) {
		var ret []string
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIntegrationsResponseIntegrationWithCounts) GetErrorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *GetIntegrationsResponseIntegrationWithCounts) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *GetIntegrationsResponseIntegrationWithCounts) SetErrors(v []string) {
	o.Errors = v
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *GetIntegrationsResponseIntegrationWithCounts) GetIntegration() Integration {
	if o == nil || IsNil(o.Integration) {
		var ret Integration
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIntegrationsResponseIntegrationWithCounts) GetIntegrationOk() (*Integration, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *GetIntegrationsResponseIntegrationWithCounts) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given Integration and assigns it to the Integration field.
func (o *GetIntegrationsResponseIntegrationWithCounts) SetIntegration(v Integration) {
	o.Integration = &v
}

// GetIsNew returns the IsNew field value if set, zero value otherwise.
func (o *GetIntegrationsResponseIntegrationWithCounts) GetIsNew() bool {
	if o == nil || IsNil(o.IsNew) {
		var ret bool
		return ret
	}
	return *o.IsNew
}

// GetIsNewOk returns a tuple with the IsNew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIntegrationsResponseIntegrationWithCounts) GetIsNewOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNew) {
		return nil, false
	}
	return o.IsNew, true
}

// HasIsNew returns a boolean if a field has been set.
func (o *GetIntegrationsResponseIntegrationWithCounts) HasIsNew() bool {
	if o != nil && !IsNil(o.IsNew) {
		return true
	}

	return false
}

// SetIsNew gets a reference to the given bool and assigns it to the IsNew field.
func (o *GetIntegrationsResponseIntegrationWithCounts) SetIsNew(v bool) {
	o.IsNew = &v
}

// GetUpgradeAvailable returns the UpgradeAvailable field value if set, zero value otherwise.
func (o *GetIntegrationsResponseIntegrationWithCounts) GetUpgradeAvailable() bool {
	if o == nil || IsNil(o.UpgradeAvailable) {
		var ret bool
		return ret
	}
	return *o.UpgradeAvailable
}

// GetUpgradeAvailableOk returns a tuple with the UpgradeAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIntegrationsResponseIntegrationWithCounts) GetUpgradeAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.UpgradeAvailable) {
		return nil, false
	}
	return o.UpgradeAvailable, true
}

// HasUpgradeAvailable returns a boolean if a field has been set.
func (o *GetIntegrationsResponseIntegrationWithCounts) HasUpgradeAvailable() bool {
	if o != nil && !IsNil(o.UpgradeAvailable) {
		return true
	}

	return false
}

// SetUpgradeAvailable gets a reference to the given bool and assigns it to the UpgradeAvailable field.
func (o *GetIntegrationsResponseIntegrationWithCounts) SetUpgradeAvailable(v bool) {
	o.UpgradeAvailable = &v
}

func (o GetIntegrationsResponseIntegrationWithCounts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetIntegrationsResponseIntegrationWithCounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AmountIntegrations) {
		toSerialize["amountIntegrations"] = o.AmountIntegrations
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	if !IsNil(o.IsNew) {
		toSerialize["isNew"] = o.IsNew
	}
	if !IsNil(o.UpgradeAvailable) {
		toSerialize["upgradeAvailable"] = o.UpgradeAvailable
	}
	return toSerialize, nil
}

type NullableGetIntegrationsResponseIntegrationWithCounts struct {
	value *GetIntegrationsResponseIntegrationWithCounts
	isSet bool
}

func (v NullableGetIntegrationsResponseIntegrationWithCounts) Get() *GetIntegrationsResponseIntegrationWithCounts {
	return v.value
}

func (v *NullableGetIntegrationsResponseIntegrationWithCounts) Set(val *GetIntegrationsResponseIntegrationWithCounts) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIntegrationsResponseIntegrationWithCounts) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIntegrationsResponseIntegrationWithCounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIntegrationsResponseIntegrationWithCounts(val *GetIntegrationsResponseIntegrationWithCounts) *NullableGetIntegrationsResponseIntegrationWithCounts {
	return &NullableGetIntegrationsResponseIntegrationWithCounts{value: val, isSet: true}
}

func (v NullableGetIntegrationsResponseIntegrationWithCounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIntegrationsResponseIntegrationWithCounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


