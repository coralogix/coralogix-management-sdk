/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
	"time"
)

// checks if the RumVersionData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RumVersionData{}

// RumVersionData struct for RumVersionData
type RumVersionData struct {
	SyncedAt *time.Time `json:"syncedAt,omitempty"`
	Versions []RumVersionDataVersion `json:"versions,omitempty"`
}

// NewRumVersionData instantiates a new RumVersionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRumVersionData() *RumVersionData {
	this := RumVersionData{}
	return &this
}

// NewRumVersionDataWithDefaults instantiates a new RumVersionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRumVersionDataWithDefaults() *RumVersionData {
	this := RumVersionData{}
	return &this
}

// GetSyncedAt returns the SyncedAt field value if set, zero value otherwise.
func (o *RumVersionData) GetSyncedAt() time.Time {
	if o == nil || IsNil(o.SyncedAt) {
		var ret time.Time
		return ret
	}
	return *o.SyncedAt
}

// GetSyncedAtOk returns a tuple with the SyncedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RumVersionData) GetSyncedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SyncedAt) {
		return nil, false
	}
	return o.SyncedAt, true
}

// HasSyncedAt returns a boolean if a field has been set.
func (o *RumVersionData) HasSyncedAt() bool {
	if o != nil && !IsNil(o.SyncedAt) {
		return true
	}

	return false
}

// SetSyncedAt gets a reference to the given time.Time and assigns it to the SyncedAt field.
func (o *RumVersionData) SetSyncedAt(v time.Time) {
	o.SyncedAt = &v
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *RumVersionData) GetVersions() []RumVersionDataVersion {
	if o == nil || IsNil(o.Versions) {
		var ret []RumVersionDataVersion
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RumVersionData) GetVersionsOk() ([]RumVersionDataVersion, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *RumVersionData) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []RumVersionDataVersion and assigns it to the Versions field.
func (o *RumVersionData) SetVersions(v []RumVersionDataVersion) {
	o.Versions = v
}

func (o RumVersionData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RumVersionData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SyncedAt) {
		toSerialize["syncedAt"] = o.SyncedAt
	}
	if !IsNil(o.Versions) {
		toSerialize["versions"] = o.Versions
	}
	return toSerialize, nil
}

type NullableRumVersionData struct {
	value *RumVersionData
	isSet bool
}

func (v NullableRumVersionData) Get() *RumVersionData {
	return v.value
}

func (v *NullableRumVersionData) Set(val *RumVersionData) {
	v.value = val
	v.isSet = true
}

func (v NullableRumVersionData) IsSet() bool {
	return v.isSet
}

func (v *NullableRumVersionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRumVersionData(val *RumVersionData) *NullableRumVersionData {
	return &NullableRumVersionData{value: val, isSet: true}
}

func (v NullableRumVersionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRumVersionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


