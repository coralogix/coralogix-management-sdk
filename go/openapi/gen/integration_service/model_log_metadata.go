/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
	"time"
)

// checks if the LogMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogMetadata{}

// LogMetadata struct for LogMetadata
type LogMetadata struct {
	FirstOccurrence *time.Time `json:"firstOccurrence,omitempty"`
	LastOccurrence *time.Time `json:"lastOccurrence,omitempty"`
}

// NewLogMetadata instantiates a new LogMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogMetadata() *LogMetadata {
	this := LogMetadata{}
	return &this
}

// NewLogMetadataWithDefaults instantiates a new LogMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogMetadataWithDefaults() *LogMetadata {
	this := LogMetadata{}
	return &this
}

// GetFirstOccurrence returns the FirstOccurrence field value if set, zero value otherwise.
func (o *LogMetadata) GetFirstOccurrence() time.Time {
	if o == nil || IsNil(o.FirstOccurrence) {
		var ret time.Time
		return ret
	}
	return *o.FirstOccurrence
}

// GetFirstOccurrenceOk returns a tuple with the FirstOccurrence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogMetadata) GetFirstOccurrenceOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FirstOccurrence) {
		return nil, false
	}
	return o.FirstOccurrence, true
}

// HasFirstOccurrence returns a boolean if a field has been set.
func (o *LogMetadata) HasFirstOccurrence() bool {
	if o != nil && !IsNil(o.FirstOccurrence) {
		return true
	}

	return false
}

// SetFirstOccurrence gets a reference to the given time.Time and assigns it to the FirstOccurrence field.
func (o *LogMetadata) SetFirstOccurrence(v time.Time) {
	o.FirstOccurrence = &v
}

// GetLastOccurrence returns the LastOccurrence field value if set, zero value otherwise.
func (o *LogMetadata) GetLastOccurrence() time.Time {
	if o == nil || IsNil(o.LastOccurrence) {
		var ret time.Time
		return ret
	}
	return *o.LastOccurrence
}

// GetLastOccurrenceOk returns a tuple with the LastOccurrence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogMetadata) GetLastOccurrenceOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastOccurrence) {
		return nil, false
	}
	return o.LastOccurrence, true
}

// HasLastOccurrence returns a boolean if a field has been set.
func (o *LogMetadata) HasLastOccurrence() bool {
	if o != nil && !IsNil(o.LastOccurrence) {
		return true
	}

	return false
}

// SetLastOccurrence gets a reference to the given time.Time and assigns it to the LastOccurrence field.
func (o *LogMetadata) SetLastOccurrence(v time.Time) {
	o.LastOccurrence = &v
}

func (o LogMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FirstOccurrence) {
		toSerialize["firstOccurrence"] = o.FirstOccurrence
	}
	if !IsNil(o.LastOccurrence) {
		toSerialize["lastOccurrence"] = o.LastOccurrence
	}
	return toSerialize, nil
}

type NullableLogMetadata struct {
	value *LogMetadata
	isSet bool
}

func (v NullableLogMetadata) Get() *LogMetadata {
	return v.value
}

func (v *NullableLogMetadata) Set(val *LogMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableLogMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableLogMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogMetadata(val *LogMetadata) *NullableLogMetadata {
	return &NullableLogMetadata{value: val, isSet: true}
}

func (v NullableLogMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


