/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
)

// checks if the V1IntegrationTypeManaged type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1IntegrationTypeManaged{}

// V1IntegrationTypeManaged This data structure represents an integration type.
type V1IntegrationTypeManaged struct {
	Managed *Managed `json:"managed,omitempty"`
}

// NewV1IntegrationTypeManaged instantiates a new V1IntegrationTypeManaged object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1IntegrationTypeManaged() *V1IntegrationTypeManaged {
	this := V1IntegrationTypeManaged{}
	return &this
}

// NewV1IntegrationTypeManagedWithDefaults instantiates a new V1IntegrationTypeManaged object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1IntegrationTypeManagedWithDefaults() *V1IntegrationTypeManaged {
	this := V1IntegrationTypeManaged{}
	return &this
}

// GetManaged returns the Managed field value if set, zero value otherwise.
func (o *V1IntegrationTypeManaged) GetManaged() Managed {
	if o == nil || IsNil(o.Managed) {
		var ret Managed
		return ret
	}
	return *o.Managed
}

// GetManagedOk returns a tuple with the Managed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1IntegrationTypeManaged) GetManagedOk() (*Managed, bool) {
	if o == nil || IsNil(o.Managed) {
		return nil, false
	}
	return o.Managed, true
}

// HasManaged returns a boolean if a field has been set.
func (o *V1IntegrationTypeManaged) HasManaged() bool {
	if o != nil && !IsNil(o.Managed) {
		return true
	}

	return false
}

// SetManaged gets a reference to the given Managed and assigns it to the Managed field.
func (o *V1IntegrationTypeManaged) SetManaged(v Managed) {
	o.Managed = &v
}

func (o V1IntegrationTypeManaged) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1IntegrationTypeManaged) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Managed) {
		toSerialize["managed"] = o.Managed
	}
	return toSerialize, nil
}

type NullableV1IntegrationTypeManaged struct {
	value *V1IntegrationTypeManaged
	isSet bool
}

func (v NullableV1IntegrationTypeManaged) Get() *V1IntegrationTypeManaged {
	return v.value
}

func (v *NullableV1IntegrationTypeManaged) Set(val *V1IntegrationTypeManaged) {
	v.value = val
	v.isSet = true
}

func (v NullableV1IntegrationTypeManaged) IsSet() bool {
	return v.isSet
}

func (v *NullableV1IntegrationTypeManaged) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1IntegrationTypeManaged(val *V1IntegrationTypeManaged) *NullableV1IntegrationTypeManaged {
	return &NullableV1IntegrationTypeManaged{value: val, isSet: true}
}

func (v NullableV1IntegrationTypeManaged) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1IntegrationTypeManaged) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


