/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// FieldInformation - struct for FieldInformation
type FieldInformation struct {
	FieldInformationMultiText *FieldInformationMultiText
	FieldInformationMultipleSelection *FieldInformationMultipleSelection
	FieldInformationSelection *FieldInformationSelection
	FieldInformationSingle *FieldInformationSingle
	FieldInformationSingleBoolean *FieldInformationSingleBoolean
	FieldInformationSingleNumber *FieldInformationSingleNumber
}

// FieldInformationMultiTextAsFieldInformation is a convenience function that returns FieldInformationMultiText wrapped in FieldInformation
func FieldInformationMultiTextAsFieldInformation(v *FieldInformationMultiText) FieldInformation {
	return FieldInformation{
		FieldInformationMultiText: v,
	}
}

// FieldInformationMultipleSelectionAsFieldInformation is a convenience function that returns FieldInformationMultipleSelection wrapped in FieldInformation
func FieldInformationMultipleSelectionAsFieldInformation(v *FieldInformationMultipleSelection) FieldInformation {
	return FieldInformation{
		FieldInformationMultipleSelection: v,
	}
}

// FieldInformationSelectionAsFieldInformation is a convenience function that returns FieldInformationSelection wrapped in FieldInformation
func FieldInformationSelectionAsFieldInformation(v *FieldInformationSelection) FieldInformation {
	return FieldInformation{
		FieldInformationSelection: v,
	}
}

// FieldInformationSingleAsFieldInformation is a convenience function that returns FieldInformationSingle wrapped in FieldInformation
func FieldInformationSingleAsFieldInformation(v *FieldInformationSingle) FieldInformation {
	return FieldInformation{
		FieldInformationSingle: v,
	}
}

// FieldInformationSingleBooleanAsFieldInformation is a convenience function that returns FieldInformationSingleBoolean wrapped in FieldInformation
func FieldInformationSingleBooleanAsFieldInformation(v *FieldInformationSingleBoolean) FieldInformation {
	return FieldInformation{
		FieldInformationSingleBoolean: v,
	}
}

// FieldInformationSingleNumberAsFieldInformation is a convenience function that returns FieldInformationSingleNumber wrapped in FieldInformation
func FieldInformationSingleNumberAsFieldInformation(v *FieldInformationSingleNumber) FieldInformation {
	return FieldInformation{
		FieldInformationSingleNumber: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FieldInformation) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FieldInformationMultiText
	err = newStrictDecoder(data).Decode(&dst.FieldInformationMultiText)
	if err == nil {
		jsonFieldInformationMultiText, _ := json.Marshal(dst.FieldInformationMultiText)
		if string(jsonFieldInformationMultiText) == "{}" { // empty struct
			dst.FieldInformationMultiText = nil
		} else {
			if err = validator.Validate(dst.FieldInformationMultiText); err != nil {
				dst.FieldInformationMultiText = nil
			} else {
				match++
			}
		}
	} else {
		dst.FieldInformationMultiText = nil
	}

	// try to unmarshal data into FieldInformationMultipleSelection
	err = newStrictDecoder(data).Decode(&dst.FieldInformationMultipleSelection)
	if err == nil {
		jsonFieldInformationMultipleSelection, _ := json.Marshal(dst.FieldInformationMultipleSelection)
		if string(jsonFieldInformationMultipleSelection) == "{}" { // empty struct
			dst.FieldInformationMultipleSelection = nil
		} else {
			if err = validator.Validate(dst.FieldInformationMultipleSelection); err != nil {
				dst.FieldInformationMultipleSelection = nil
			} else {
				match++
			}
		}
	} else {
		dst.FieldInformationMultipleSelection = nil
	}

	// try to unmarshal data into FieldInformationSelection
	err = newStrictDecoder(data).Decode(&dst.FieldInformationSelection)
	if err == nil {
		jsonFieldInformationSelection, _ := json.Marshal(dst.FieldInformationSelection)
		if string(jsonFieldInformationSelection) == "{}" { // empty struct
			dst.FieldInformationSelection = nil
		} else {
			if err = validator.Validate(dst.FieldInformationSelection); err != nil {
				dst.FieldInformationSelection = nil
			} else {
				match++
			}
		}
	} else {
		dst.FieldInformationSelection = nil
	}

	// try to unmarshal data into FieldInformationSingle
	err = newStrictDecoder(data).Decode(&dst.FieldInformationSingle)
	if err == nil {
		jsonFieldInformationSingle, _ := json.Marshal(dst.FieldInformationSingle)
		if string(jsonFieldInformationSingle) == "{}" { // empty struct
			dst.FieldInformationSingle = nil
		} else {
			if err = validator.Validate(dst.FieldInformationSingle); err != nil {
				dst.FieldInformationSingle = nil
			} else {
				match++
			}
		}
	} else {
		dst.FieldInformationSingle = nil
	}

	// try to unmarshal data into FieldInformationSingleBoolean
	err = newStrictDecoder(data).Decode(&dst.FieldInformationSingleBoolean)
	if err == nil {
		jsonFieldInformationSingleBoolean, _ := json.Marshal(dst.FieldInformationSingleBoolean)
		if string(jsonFieldInformationSingleBoolean) == "{}" { // empty struct
			dst.FieldInformationSingleBoolean = nil
		} else {
			if err = validator.Validate(dst.FieldInformationSingleBoolean); err != nil {
				dst.FieldInformationSingleBoolean = nil
			} else {
				match++
			}
		}
	} else {
		dst.FieldInformationSingleBoolean = nil
	}

	// try to unmarshal data into FieldInformationSingleNumber
	err = newStrictDecoder(data).Decode(&dst.FieldInformationSingleNumber)
	if err == nil {
		jsonFieldInformationSingleNumber, _ := json.Marshal(dst.FieldInformationSingleNumber)
		if string(jsonFieldInformationSingleNumber) == "{}" { // empty struct
			dst.FieldInformationSingleNumber = nil
		} else {
			if err = validator.Validate(dst.FieldInformationSingleNumber); err != nil {
				dst.FieldInformationSingleNumber = nil
			} else {
				match++
			}
		}
	} else {
		dst.FieldInformationSingleNumber = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FieldInformationMultiText = nil
		dst.FieldInformationMultipleSelection = nil
		dst.FieldInformationSelection = nil
		dst.FieldInformationSingle = nil
		dst.FieldInformationSingleBoolean = nil
		dst.FieldInformationSingleNumber = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FieldInformation)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FieldInformation)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FieldInformation) MarshalJSON() ([]byte, error) {
	if src.FieldInformationMultiText != nil {
		return json.Marshal(&src.FieldInformationMultiText)
	}

	if src.FieldInformationMultipleSelection != nil {
		return json.Marshal(&src.FieldInformationMultipleSelection)
	}

	if src.FieldInformationSelection != nil {
		return json.Marshal(&src.FieldInformationSelection)
	}

	if src.FieldInformationSingle != nil {
		return json.Marshal(&src.FieldInformationSingle)
	}

	if src.FieldInformationSingleBoolean != nil {
		return json.Marshal(&src.FieldInformationSingleBoolean)
	}

	if src.FieldInformationSingleNumber != nil {
		return json.Marshal(&src.FieldInformationSingleNumber)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FieldInformation) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FieldInformationMultiText != nil {
		return obj.FieldInformationMultiText
	}

	if obj.FieldInformationMultipleSelection != nil {
		return obj.FieldInformationMultipleSelection
	}

	if obj.FieldInformationSelection != nil {
		return obj.FieldInformationSelection
	}

	if obj.FieldInformationSingle != nil {
		return obj.FieldInformationSingle
	}

	if obj.FieldInformationSingleBoolean != nil {
		return obj.FieldInformationSingleBoolean
	}

	if obj.FieldInformationSingleNumber != nil {
		return obj.FieldInformationSingleNumber
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj FieldInformation) GetActualInstanceValue() (interface{}) {
	if obj.FieldInformationMultiText != nil {
		return *obj.FieldInformationMultiText
	}

	if obj.FieldInformationMultipleSelection != nil {
		return *obj.FieldInformationMultipleSelection
	}

	if obj.FieldInformationSelection != nil {
		return *obj.FieldInformationSelection
	}

	if obj.FieldInformationSingle != nil {
		return *obj.FieldInformationSingle
	}

	if obj.FieldInformationSingleBoolean != nil {
		return *obj.FieldInformationSingleBoolean
	}

	if obj.FieldInformationSingleNumber != nil {
		return *obj.FieldInformationSingleNumber
	}

	// all schemas are nil
	return nil
}

type NullableFieldInformation struct {
	value *FieldInformation
	isSet bool
}

func (v NullableFieldInformation) Get() *FieldInformation {
	return v.value
}

func (v *NullableFieldInformation) Set(val *FieldInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldInformation(val *FieldInformation) *NullableFieldInformation {
	return &NullableFieldInformation{value: val, isSet: true}
}

func (v NullableFieldInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


