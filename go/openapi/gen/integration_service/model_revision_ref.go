/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
)

// checks if the RevisionRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RevisionRef{}

// RevisionRef struct for RevisionRef
type RevisionRef struct {
	DescriptionMd *string `json:"descriptionMd,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewRevisionRef instantiates a new RevisionRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevisionRef() *RevisionRef {
	this := RevisionRef{}
	return &this
}

// NewRevisionRefWithDefaults instantiates a new RevisionRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevisionRefWithDefaults() *RevisionRef {
	this := RevisionRef{}
	return &this
}

// GetDescriptionMd returns the DescriptionMd field value if set, zero value otherwise.
func (o *RevisionRef) GetDescriptionMd() string {
	if o == nil || IsNil(o.DescriptionMd) {
		var ret string
		return ret
	}
	return *o.DescriptionMd
}

// GetDescriptionMdOk returns a tuple with the DescriptionMd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevisionRef) GetDescriptionMdOk() (*string, bool) {
	if o == nil || IsNil(o.DescriptionMd) {
		return nil, false
	}
	return o.DescriptionMd, true
}

// HasDescriptionMd returns a boolean if a field has been set.
func (o *RevisionRef) HasDescriptionMd() bool {
	if o != nil && !IsNil(o.DescriptionMd) {
		return true
	}

	return false
}

// SetDescriptionMd gets a reference to the given string and assigns it to the DescriptionMd field.
func (o *RevisionRef) SetDescriptionMd(v string) {
	o.DescriptionMd = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *RevisionRef) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevisionRef) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *RevisionRef) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *RevisionRef) SetVersion(v string) {
	o.Version = &v
}

func (o RevisionRef) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RevisionRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DescriptionMd) {
		toSerialize["descriptionMd"] = o.DescriptionMd
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableRevisionRef struct {
	value *RevisionRef
	isSet bool
}

func (v NullableRevisionRef) Get() *RevisionRef {
	return v.value
}

func (v *NullableRevisionRef) Set(val *RevisionRef) {
	v.value = val
	v.isSet = true
}

func (v NullableRevisionRef) IsSet() bool {
	return v.isSet
}

func (v *NullableRevisionRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevisionRef(val *RevisionRef) *NullableRevisionRef {
	return &NullableRevisionRef{value: val, isSet: true}
}

func (v NullableRevisionRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevisionRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


