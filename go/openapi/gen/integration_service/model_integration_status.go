/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IntegrationStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationStatus{}

// IntegrationStatus This data structure represents an integration status.
type IntegrationStatus struct {
	ConnectionStatus ConnectionStatus `json:"connectionStatus"`
	Details *map[string]string `json:"details,omitempty"`
	Messages []string `json:"messages,omitempty"`
}

type _IntegrationStatus IntegrationStatus

// NewIntegrationStatus instantiates a new IntegrationStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationStatus(connectionStatus ConnectionStatus) *IntegrationStatus {
	this := IntegrationStatus{}
	this.ConnectionStatus = connectionStatus
	return &this
}

// NewIntegrationStatusWithDefaults instantiates a new IntegrationStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationStatusWithDefaults() *IntegrationStatus {
	this := IntegrationStatus{}
	return &this
}

// GetConnectionStatus returns the ConnectionStatus field value
func (o *IntegrationStatus) GetConnectionStatus() ConnectionStatus {
	if o == nil {
		var ret ConnectionStatus
		return ret
	}

	return o.ConnectionStatus
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value
// and a boolean to check if the value has been set.
func (o *IntegrationStatus) GetConnectionStatusOk() (*ConnectionStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionStatus, true
}

// SetConnectionStatus sets field value
func (o *IntegrationStatus) SetConnectionStatus(v ConnectionStatus) {
	o.ConnectionStatus = v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *IntegrationStatus) GetDetails() map[string]string {
	if o == nil || IsNil(o.Details) {
		var ret map[string]string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationStatus) GetDetailsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *IntegrationStatus) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given map[string]string and assigns it to the Details field.
func (o *IntegrationStatus) SetDetails(v map[string]string) {
	o.Details = &v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *IntegrationStatus) GetMessages() []string {
	if o == nil || IsNil(o.Messages) {
		var ret []string
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationStatus) GetMessagesOk() ([]string, bool) {
	if o == nil || IsNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *IntegrationStatus) HasMessages() bool {
	if o != nil && !IsNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []string and assigns it to the Messages field.
func (o *IntegrationStatus) SetMessages(v []string) {
	o.Messages = v
}

func (o IntegrationStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connectionStatus"] = o.ConnectionStatus
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Messages) {
		toSerialize["messages"] = o.Messages
	}
	return toSerialize, nil
}

func (o *IntegrationStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connectionStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIntegrationStatus := _IntegrationStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIntegrationStatus)

	if err != nil {
		return err
	}

	*o = IntegrationStatus(varIntegrationStatus)

	return err
}

type NullableIntegrationStatus struct {
	value *IntegrationStatus
	isSet bool
}

func (v NullableIntegrationStatus) Get() *IntegrationStatus {
	return v.value
}

func (v *NullableIntegrationStatus) Set(val *IntegrationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationStatus(val *IntegrationStatus) *NullableIntegrationStatus {
	return &NullableIntegrationStatus{value: val, isSet: true}
}

func (v NullableIntegrationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


