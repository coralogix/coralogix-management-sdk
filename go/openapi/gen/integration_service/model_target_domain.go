/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
	"fmt"
)

// TargetDomain the model 'TargetDomain'
type TargetDomain string

// List of TargetDomain
const (
	TARGETDOMAIN_ACTION TargetDomain = "ACTION"
	TARGETDOMAIN_ALERT TargetDomain = "ALERT"
	TARGETDOMAIN_ENRICHMENT TargetDomain = "ENRICHMENT"
	TARGETDOMAIN_GRAFANA_DASHBOARD TargetDomain = "GRAFANA_DASHBOARD"
	TARGETDOMAIN_KIBANA_DASHBOARD TargetDomain = "KIBANA_DASHBOARD"
	TARGETDOMAIN_PARSING_RULE TargetDomain = "PARSING_RULE"
	TARGETDOMAIN_SAVED_VIEW TargetDomain = "SAVED_VIEW"
	TARGETDOMAIN_CX_CUSTOM_DASHBOARD TargetDomain = "CX_CUSTOM_DASHBOARD"
	TARGETDOMAIN_METRICS_RULE_GROUP TargetDomain = "METRICS_RULE_GROUP"
	TARGETDOMAIN_EVENTS_TO_METRICS TargetDomain = "EVENTS_TO_METRICS"
	TARGETDOMAIN_ALERT_V3 TargetDomain = "ALERT_V3"
)

// All allowed values of TargetDomain enum
var AllowedTargetDomainEnumValues = []TargetDomain{
	"ACTION",
	"ALERT",
	"ENRICHMENT",
	"GRAFANA_DASHBOARD",
	"KIBANA_DASHBOARD",
	"PARSING_RULE",
	"SAVED_VIEW",
	"CX_CUSTOM_DASHBOARD",
	"METRICS_RULE_GROUP",
	"EVENTS_TO_METRICS",
	"ALERT_V3",
}

func (v *TargetDomain) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TargetDomain(value)
	for _, existing := range AllowedTargetDomainEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TargetDomain", value)
}

// NewTargetDomainFromValue returns a pointer to a valid TargetDomain
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTargetDomainFromValue(v string) (*TargetDomain, error) {
	ev := TargetDomain(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TargetDomain: valid values are %v", v, AllowedTargetDomainEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TargetDomain) IsValid() bool {
	for _, existing := range AllowedTargetDomainEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TargetDomain value
func (v TargetDomain) Ptr() *TargetDomain {
	return &v
}

type NullableTargetDomain struct {
	value *TargetDomain
	isSet bool
}

func (v NullableTargetDomain) Get() *TargetDomain {
	return v.value
}

func (v *NullableTargetDomain) Set(val *TargetDomain) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetDomain) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetDomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetDomain(val *TargetDomain) *NullableTargetDomain {
	return &NullableTargetDomain{value: val, isSet: true}
}

func (v NullableTargetDomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetDomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

