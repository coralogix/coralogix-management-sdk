/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
)

// checks if the SelectionValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelectionValue{}

// SelectionValue struct for SelectionValue
type SelectionValue struct {
	DefaultValue *string `json:"defaultValue,omitempty"`
	Options []string `json:"options,omitempty"`
}

// NewSelectionValue instantiates a new SelectionValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectionValue() *SelectionValue {
	this := SelectionValue{}
	return &this
}

// NewSelectionValueWithDefaults instantiates a new SelectionValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectionValueWithDefaults() *SelectionValue {
	this := SelectionValue{}
	return &this
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *SelectionValue) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue) {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectionValue) GetDefaultValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *SelectionValue) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *SelectionValue) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *SelectionValue) GetOptions() []string {
	if o == nil || IsNil(o.Options) {
		var ret []string
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectionValue) GetOptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *SelectionValue) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []string and assigns it to the Options field.
func (o *SelectionValue) SetOptions(v []string) {
	o.Options = v
}

func (o SelectionValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelectionValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultValue) {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableSelectionValue struct {
	value *SelectionValue
	isSet bool
}

func (v NullableSelectionValue) Get() *SelectionValue {
	return v.value
}

func (v *NullableSelectionValue) Set(val *SelectionValue) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectionValue) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectionValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectionValue(val *SelectionValue) *NullableSelectionValue {
	return &NullableSelectionValue{value: val, isSet: true}
}

func (v NullableSelectionValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectionValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


