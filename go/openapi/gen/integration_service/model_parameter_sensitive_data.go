/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
)

// checks if the ParameterSensitiveData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParameterSensitiveData{}

// ParameterSensitiveData struct for ParameterSensitiveData
type ParameterSensitiveData struct {
	Key *string `json:"key,omitempty"`
	SensitiveData map[string]interface{} `json:"sensitiveData,omitempty"`
}

// NewParameterSensitiveData instantiates a new ParameterSensitiveData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameterSensitiveData() *ParameterSensitiveData {
	this := ParameterSensitiveData{}
	return &this
}

// NewParameterSensitiveDataWithDefaults instantiates a new ParameterSensitiveData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParameterSensitiveDataWithDefaults() *ParameterSensitiveData {
	this := ParameterSensitiveData{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ParameterSensitiveData) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterSensitiveData) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ParameterSensitiveData) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ParameterSensitiveData) SetKey(v string) {
	o.Key = &v
}

// GetSensitiveData returns the SensitiveData field value if set, zero value otherwise.
func (o *ParameterSensitiveData) GetSensitiveData() map[string]interface{} {
	if o == nil || IsNil(o.SensitiveData) {
		var ret map[string]interface{}
		return ret
	}
	return o.SensitiveData
}

// GetSensitiveDataOk returns a tuple with the SensitiveData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterSensitiveData) GetSensitiveDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.SensitiveData) {
		return map[string]interface{}{}, false
	}
	return o.SensitiveData, true
}

// HasSensitiveData returns a boolean if a field has been set.
func (o *ParameterSensitiveData) HasSensitiveData() bool {
	if o != nil && !IsNil(o.SensitiveData) {
		return true
	}

	return false
}

// SetSensitiveData gets a reference to the given map[string]interface{} and assigns it to the SensitiveData field.
func (o *ParameterSensitiveData) SetSensitiveData(v map[string]interface{}) {
	o.SensitiveData = v
}

func (o ParameterSensitiveData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParameterSensitiveData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.SensitiveData) {
		toSerialize["sensitiveData"] = o.SensitiveData
	}
	return toSerialize, nil
}

type NullableParameterSensitiveData struct {
	value *ParameterSensitiveData
	isSet bool
}

func (v NullableParameterSensitiveData) Get() *ParameterSensitiveData {
	return v.value
}

func (v *NullableParameterSensitiveData) Set(val *ParameterSensitiveData) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterSensitiveData) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterSensitiveData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterSensitiveData(val *ParameterSensitiveData) *NullableParameterSensitiveData {
	return &NullableParameterSensitiveData{value: val, isSet: true}
}

func (v NullableParameterSensitiveData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterSensitiveData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


