/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
)

// checks if the RumVersionDataVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RumVersionDataVersion{}

// RumVersionDataVersion struct for RumVersionDataVersion
type RumVersionDataVersion struct {
	LogMetadata *LogMetadata `json:"logMetadata,omitempty"`
	SourceMapMetadata *SourceMapMetadata `json:"sourceMapMetadata,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewRumVersionDataVersion instantiates a new RumVersionDataVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRumVersionDataVersion() *RumVersionDataVersion {
	this := RumVersionDataVersion{}
	return &this
}

// NewRumVersionDataVersionWithDefaults instantiates a new RumVersionDataVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRumVersionDataVersionWithDefaults() *RumVersionDataVersion {
	this := RumVersionDataVersion{}
	return &this
}

// GetLogMetadata returns the LogMetadata field value if set, zero value otherwise.
func (o *RumVersionDataVersion) GetLogMetadata() LogMetadata {
	if o == nil || IsNil(o.LogMetadata) {
		var ret LogMetadata
		return ret
	}
	return *o.LogMetadata
}

// GetLogMetadataOk returns a tuple with the LogMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RumVersionDataVersion) GetLogMetadataOk() (*LogMetadata, bool) {
	if o == nil || IsNil(o.LogMetadata) {
		return nil, false
	}
	return o.LogMetadata, true
}

// HasLogMetadata returns a boolean if a field has been set.
func (o *RumVersionDataVersion) HasLogMetadata() bool {
	if o != nil && !IsNil(o.LogMetadata) {
		return true
	}

	return false
}

// SetLogMetadata gets a reference to the given LogMetadata and assigns it to the LogMetadata field.
func (o *RumVersionDataVersion) SetLogMetadata(v LogMetadata) {
	o.LogMetadata = &v
}

// GetSourceMapMetadata returns the SourceMapMetadata field value if set, zero value otherwise.
func (o *RumVersionDataVersion) GetSourceMapMetadata() SourceMapMetadata {
	if o == nil || IsNil(o.SourceMapMetadata) {
		var ret SourceMapMetadata
		return ret
	}
	return *o.SourceMapMetadata
}

// GetSourceMapMetadataOk returns a tuple with the SourceMapMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RumVersionDataVersion) GetSourceMapMetadataOk() (*SourceMapMetadata, bool) {
	if o == nil || IsNil(o.SourceMapMetadata) {
		return nil, false
	}
	return o.SourceMapMetadata, true
}

// HasSourceMapMetadata returns a boolean if a field has been set.
func (o *RumVersionDataVersion) HasSourceMapMetadata() bool {
	if o != nil && !IsNil(o.SourceMapMetadata) {
		return true
	}

	return false
}

// SetSourceMapMetadata gets a reference to the given SourceMapMetadata and assigns it to the SourceMapMetadata field.
func (o *RumVersionDataVersion) SetSourceMapMetadata(v SourceMapMetadata) {
	o.SourceMapMetadata = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *RumVersionDataVersion) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RumVersionDataVersion) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *RumVersionDataVersion) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *RumVersionDataVersion) SetVersion(v string) {
	o.Version = &v
}

func (o RumVersionDataVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RumVersionDataVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LogMetadata) {
		toSerialize["logMetadata"] = o.LogMetadata
	}
	if !IsNil(o.SourceMapMetadata) {
		toSerialize["sourceMapMetadata"] = o.SourceMapMetadata
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableRumVersionDataVersion struct {
	value *RumVersionDataVersion
	isSet bool
}

func (v NullableRumVersionDataVersion) Get() *RumVersionDataVersion {
	return v.value
}

func (v *NullableRumVersionDataVersion) Set(val *RumVersionDataVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableRumVersionDataVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableRumVersionDataVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRumVersionDataVersion(val *RumVersionDataVersion) *NullableRumVersionDataVersion {
	return &NullableRumVersionDataVersion{value: val, isSet: true}
}

func (v NullableRumVersionDataVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRumVersionDataVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


