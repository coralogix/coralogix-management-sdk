/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
	"fmt"
)

// ConnectionStatus the model 'ConnectionStatus'
type ConnectionStatus string

// List of ConnectionStatus
const (
	CONNECTIONSTATUS_PENDING ConnectionStatus = "PENDING"
	CONNECTIONSTATUS_ACTIVE ConnectionStatus = "ACTIVE"
	CONNECTIONSTATUS_FAILING ConnectionStatus = "FAILING"
	CONNECTIONSTATUS_STATUS_UNKNOWN ConnectionStatus = "STATUS_UNKNOWN"
)

// All allowed values of ConnectionStatus enum
var AllowedConnectionStatusEnumValues = []ConnectionStatus{
	"PENDING",
	"ACTIVE",
	"FAILING",
	"STATUS_UNKNOWN",
}

func (v *ConnectionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectionStatus(value)
	for _, existing := range AllowedConnectionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectionStatus", value)
}

// NewConnectionStatusFromValue returns a pointer to a valid ConnectionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectionStatusFromValue(v string) (*ConnectionStatus, error) {
	ev := ConnectionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectionStatus: valid values are %v", v, AllowedConnectionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectionStatus) IsValid() bool {
	for _, existing := range AllowedConnectionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectionStatus value
func (v ConnectionStatus) Ptr() *ConnectionStatus {
	return &v
}

type NullableConnectionStatus struct {
	value *ConnectionStatus
	isSet bool
}

func (v NullableConnectionStatus) Get() *ConnectionStatus {
	return v.value
}

func (v *NullableConnectionStatus) Set(val *ConnectionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionStatus(val *ConnectionStatus) *NullableConnectionStatus {
	return &NullableConnectionStatus{value: val, isSet: true}
}

func (v NullableConnectionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

