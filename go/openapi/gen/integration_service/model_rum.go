/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
)

// checks if the Rum type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Rum{}

// Rum This data structure represents a RUM integration.
type Rum struct {
	BrowserSdkCommands []CommandInformation `json:"browserSdkCommands,omitempty"`
	SourceMapCommands []CommandInformation `json:"sourceMapCommands,omitempty"`
}

// NewRum instantiates a new Rum object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRum() *Rum {
	this := Rum{}
	return &this
}

// NewRumWithDefaults instantiates a new Rum object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRumWithDefaults() *Rum {
	this := Rum{}
	return &this
}

// GetBrowserSdkCommands returns the BrowserSdkCommands field value if set, zero value otherwise.
func (o *Rum) GetBrowserSdkCommands() []CommandInformation {
	if o == nil || IsNil(o.BrowserSdkCommands) {
		var ret []CommandInformation
		return ret
	}
	return o.BrowserSdkCommands
}

// GetBrowserSdkCommandsOk returns a tuple with the BrowserSdkCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rum) GetBrowserSdkCommandsOk() ([]CommandInformation, bool) {
	if o == nil || IsNil(o.BrowserSdkCommands) {
		return nil, false
	}
	return o.BrowserSdkCommands, true
}

// HasBrowserSdkCommands returns a boolean if a field has been set.
func (o *Rum) HasBrowserSdkCommands() bool {
	if o != nil && !IsNil(o.BrowserSdkCommands) {
		return true
	}

	return false
}

// SetBrowserSdkCommands gets a reference to the given []CommandInformation and assigns it to the BrowserSdkCommands field.
func (o *Rum) SetBrowserSdkCommands(v []CommandInformation) {
	o.BrowserSdkCommands = v
}

// GetSourceMapCommands returns the SourceMapCommands field value if set, zero value otherwise.
func (o *Rum) GetSourceMapCommands() []CommandInformation {
	if o == nil || IsNil(o.SourceMapCommands) {
		var ret []CommandInformation
		return ret
	}
	return o.SourceMapCommands
}

// GetSourceMapCommandsOk returns a tuple with the SourceMapCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rum) GetSourceMapCommandsOk() ([]CommandInformation, bool) {
	if o == nil || IsNil(o.SourceMapCommands) {
		return nil, false
	}
	return o.SourceMapCommands, true
}

// HasSourceMapCommands returns a boolean if a field has been set.
func (o *Rum) HasSourceMapCommands() bool {
	if o != nil && !IsNil(o.SourceMapCommands) {
		return true
	}

	return false
}

// SetSourceMapCommands gets a reference to the given []CommandInformation and assigns it to the SourceMapCommands field.
func (o *Rum) SetSourceMapCommands(v []CommandInformation) {
	o.SourceMapCommands = v
}

func (o Rum) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Rum) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BrowserSdkCommands) {
		toSerialize["browserSdkCommands"] = o.BrowserSdkCommands
	}
	if !IsNil(o.SourceMapCommands) {
		toSerialize["sourceMapCommands"] = o.SourceMapCommands
	}
	return toSerialize, nil
}

type NullableRum struct {
	value *Rum
	isSet bool
}

func (v NullableRum) Get() *Rum {
	return v.value
}

func (v *NullableRum) Set(val *Rum) {
	v.value = val
	v.isSet = true
}

func (v NullableRum) IsSet() bool {
	return v.isSet
}

func (v *NullableRum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRum(val *Rum) *NullableRum {
	return &NullableRum{value: val, isSet: true}
}

func (v NullableRum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


