/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
)

// checks if the IntegrationDetailsLocal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationDetailsLocal{}

// IntegrationDetailsLocal This data structure represents a set of integration details.
type IntegrationDetailsLocal struct {
	Default *DefaultIntegrationDetails `json:"default,omitempty"`
	Docs []IntegrationDoc `json:"docs,omitempty"`
	Extensions []V1Extension `json:"extensions,omitempty"`
	Integration *Integration `json:"integration,omitempty"`
	Local *LocalChangelog `json:"local,omitempty"`
}

// NewIntegrationDetailsLocal instantiates a new IntegrationDetailsLocal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationDetailsLocal() *IntegrationDetailsLocal {
	this := IntegrationDetailsLocal{}
	return &this
}

// NewIntegrationDetailsLocalWithDefaults instantiates a new IntegrationDetailsLocal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationDetailsLocalWithDefaults() *IntegrationDetailsLocal {
	this := IntegrationDetailsLocal{}
	return &this
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *IntegrationDetailsLocal) GetDefault() DefaultIntegrationDetails {
	if o == nil || IsNil(o.Default) {
		var ret DefaultIntegrationDetails
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationDetailsLocal) GetDefaultOk() (*DefaultIntegrationDetails, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *IntegrationDetailsLocal) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given DefaultIntegrationDetails and assigns it to the Default field.
func (o *IntegrationDetailsLocal) SetDefault(v DefaultIntegrationDetails) {
	o.Default = &v
}

// GetDocs returns the Docs field value if set, zero value otherwise.
func (o *IntegrationDetailsLocal) GetDocs() []IntegrationDoc {
	if o == nil || IsNil(o.Docs) {
		var ret []IntegrationDoc
		return ret
	}
	return o.Docs
}

// GetDocsOk returns a tuple with the Docs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationDetailsLocal) GetDocsOk() ([]IntegrationDoc, bool) {
	if o == nil || IsNil(o.Docs) {
		return nil, false
	}
	return o.Docs, true
}

// HasDocs returns a boolean if a field has been set.
func (o *IntegrationDetailsLocal) HasDocs() bool {
	if o != nil && !IsNil(o.Docs) {
		return true
	}

	return false
}

// SetDocs gets a reference to the given []IntegrationDoc and assigns it to the Docs field.
func (o *IntegrationDetailsLocal) SetDocs(v []IntegrationDoc) {
	o.Docs = v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *IntegrationDetailsLocal) GetExtensions() []V1Extension {
	if o == nil || IsNil(o.Extensions) {
		var ret []V1Extension
		return ret
	}
	return o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationDetailsLocal) GetExtensionsOk() ([]V1Extension, bool) {
	if o == nil || IsNil(o.Extensions) {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *IntegrationDetailsLocal) HasExtensions() bool {
	if o != nil && !IsNil(o.Extensions) {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given []V1Extension and assigns it to the Extensions field.
func (o *IntegrationDetailsLocal) SetExtensions(v []V1Extension) {
	o.Extensions = v
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *IntegrationDetailsLocal) GetIntegration() Integration {
	if o == nil || IsNil(o.Integration) {
		var ret Integration
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationDetailsLocal) GetIntegrationOk() (*Integration, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *IntegrationDetailsLocal) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given Integration and assigns it to the Integration field.
func (o *IntegrationDetailsLocal) SetIntegration(v Integration) {
	o.Integration = &v
}

// GetLocal returns the Local field value if set, zero value otherwise.
func (o *IntegrationDetailsLocal) GetLocal() LocalChangelog {
	if o == nil || IsNil(o.Local) {
		var ret LocalChangelog
		return ret
	}
	return *o.Local
}

// GetLocalOk returns a tuple with the Local field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationDetailsLocal) GetLocalOk() (*LocalChangelog, bool) {
	if o == nil || IsNil(o.Local) {
		return nil, false
	}
	return o.Local, true
}

// HasLocal returns a boolean if a field has been set.
func (o *IntegrationDetailsLocal) HasLocal() bool {
	if o != nil && !IsNil(o.Local) {
		return true
	}

	return false
}

// SetLocal gets a reference to the given LocalChangelog and assigns it to the Local field.
func (o *IntegrationDetailsLocal) SetLocal(v LocalChangelog) {
	o.Local = &v
}

func (o IntegrationDetailsLocal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationDetailsLocal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.Docs) {
		toSerialize["docs"] = o.Docs
	}
	if !IsNil(o.Extensions) {
		toSerialize["extensions"] = o.Extensions
	}
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	if !IsNil(o.Local) {
		toSerialize["local"] = o.Local
	}
	return toSerialize, nil
}

type NullableIntegrationDetailsLocal struct {
	value *IntegrationDetailsLocal
	isSet bool
}

func (v NullableIntegrationDetailsLocal) Get() *IntegrationDetailsLocal {
	return v.value
}

func (v *NullableIntegrationDetailsLocal) Set(val *IntegrationDetailsLocal) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationDetailsLocal) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationDetailsLocal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationDetailsLocal(val *IntegrationDetailsLocal) *NullableIntegrationDetailsLocal {
	return &NullableIntegrationDetailsLocal{value: val, isSet: true}
}

func (v NullableIntegrationDetailsLocal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationDetailsLocal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


