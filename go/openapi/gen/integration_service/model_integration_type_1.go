/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
)

// checks if the IntegrationType1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationType1{}

// IntegrationType1 This data structure represents an integration type.
type IntegrationType1 struct {
	// This data structure represents an untracked integration.
	Untracked map[string]interface{} `json:"untracked,omitempty"`
}

// NewIntegrationType1 instantiates a new IntegrationType1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationType1() *IntegrationType1 {
	this := IntegrationType1{}
	return &this
}

// NewIntegrationType1WithDefaults instantiates a new IntegrationType1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationType1WithDefaults() *IntegrationType1 {
	this := IntegrationType1{}
	return &this
}

// GetUntracked returns the Untracked field value if set, zero value otherwise.
func (o *IntegrationType1) GetUntracked() map[string]interface{} {
	if o == nil || IsNil(o.Untracked) {
		var ret map[string]interface{}
		return ret
	}
	return o.Untracked
}

// GetUntrackedOk returns a tuple with the Untracked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationType1) GetUntrackedOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Untracked) {
		return map[string]interface{}{}, false
	}
	return o.Untracked, true
}

// HasUntracked returns a boolean if a field has been set.
func (o *IntegrationType1) HasUntracked() bool {
	if o != nil && !IsNil(o.Untracked) {
		return true
	}

	return false
}

// SetUntracked gets a reference to the given map[string]interface{} and assigns it to the Untracked field.
func (o *IntegrationType1) SetUntracked(v map[string]interface{}) {
	o.Untracked = v
}

func (o IntegrationType1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationType1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Untracked) {
		toSerialize["untracked"] = o.Untracked
	}
	return toSerialize, nil
}

type NullableIntegrationType1 struct {
	value *IntegrationType1
	isSet bool
}

func (v NullableIntegrationType1) Get() *IntegrationType1 {
	return v.value
}

func (v *NullableIntegrationType1) Set(val *IntegrationType1) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationType1) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationType1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationType1(val *IntegrationType1) *NullableIntegrationType1 {
	return &NullableIntegrationType1{value: val, isSet: true}
}

func (v NullableIntegrationType1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationType1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


