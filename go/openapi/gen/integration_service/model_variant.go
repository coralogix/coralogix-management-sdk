/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
	"fmt"
)

// Variant the model 'Variant'
type Variant string

// List of Variant
const (
	VARIANT_DEFAULT Variant = "DEFAULT"
	VARIANT_GCP Variant = "GCP"
	VARIANT_OAUTH Variant = "OAUTH"
	VARIANT_CUSTOM Variant = "CUSTOM"
)

// All allowed values of Variant enum
var AllowedVariantEnumValues = []Variant{
	"DEFAULT",
	"GCP",
	"OAUTH",
	"CUSTOM",
}

func (v *Variant) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Variant(value)
	for _, existing := range AllowedVariantEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Variant", value)
}

// NewVariantFromValue returns a pointer to a valid Variant
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVariantFromValue(v string) (*Variant, error) {
	ev := Variant(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Variant: valid values are %v", v, AllowedVariantEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Variant) IsValid() bool {
	for _, existing := range AllowedVariantEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Variant value
func (v Variant) Ptr() *Variant {
	return &v
}

type NullableVariant struct {
	value *Variant
	isSet bool
}

func (v NullableVariant) Get() *Variant {
	return v.value
}

func (v *NullableVariant) Set(val *Variant) {
	v.value = val
	v.isSet = true
}

func (v NullableVariant) IsSet() bool {
	return v.isSet
}

func (v *NullableVariant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariant(val *Variant) *NullableVariant {
	return &NullableVariant{value: val, isSet: true}
}

func (v NullableVariant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

