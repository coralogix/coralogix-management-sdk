/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
)

// checks if the ARMStack type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ARMStack{}

// ARMStack This data structure represents an Azure Resource Manager stack.
type ARMStack struct {
	ResourceGroupName *string `json:"resourceGroupName,omitempty"`
	SubscriptionId *string `json:"subscriptionId,omitempty"`
}

// NewARMStack instantiates a new ARMStack object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewARMStack() *ARMStack {
	this := ARMStack{}
	return &this
}

// NewARMStackWithDefaults instantiates a new ARMStack object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewARMStackWithDefaults() *ARMStack {
	this := ARMStack{}
	return &this
}

// GetResourceGroupName returns the ResourceGroupName field value if set, zero value otherwise.
func (o *ARMStack) GetResourceGroupName() string {
	if o == nil || IsNil(o.ResourceGroupName) {
		var ret string
		return ret
	}
	return *o.ResourceGroupName
}

// GetResourceGroupNameOk returns a tuple with the ResourceGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARMStack) GetResourceGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceGroupName) {
		return nil, false
	}
	return o.ResourceGroupName, true
}

// HasResourceGroupName returns a boolean if a field has been set.
func (o *ARMStack) HasResourceGroupName() bool {
	if o != nil && !IsNil(o.ResourceGroupName) {
		return true
	}

	return false
}

// SetResourceGroupName gets a reference to the given string and assigns it to the ResourceGroupName field.
func (o *ARMStack) SetResourceGroupName(v string) {
	o.ResourceGroupName = &v
}

// GetSubscriptionId returns the SubscriptionId field value if set, zero value otherwise.
func (o *ARMStack) GetSubscriptionId() string {
	if o == nil || IsNil(o.SubscriptionId) {
		var ret string
		return ret
	}
	return *o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARMStack) GetSubscriptionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionId) {
		return nil, false
	}
	return o.SubscriptionId, true
}

// HasSubscriptionId returns a boolean if a field has been set.
func (o *ARMStack) HasSubscriptionId() bool {
	if o != nil && !IsNil(o.SubscriptionId) {
		return true
	}

	return false
}

// SetSubscriptionId gets a reference to the given string and assigns it to the SubscriptionId field.
func (o *ARMStack) SetSubscriptionId(v string) {
	o.SubscriptionId = &v
}

func (o ARMStack) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ARMStack) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResourceGroupName) {
		toSerialize["resourceGroupName"] = o.ResourceGroupName
	}
	if !IsNil(o.SubscriptionId) {
		toSerialize["subscriptionId"] = o.SubscriptionId
	}
	return toSerialize, nil
}

type NullableARMStack struct {
	value *ARMStack
	isSet bool
}

func (v NullableARMStack) Get() *ARMStack {
	return v.value
}

func (v *NullableARMStack) Set(val *ARMStack) {
	v.value = val
	v.isSet = true
}

func (v NullableARMStack) IsSet() bool {
	return v.isSet
}

func (v *NullableARMStack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableARMStack(val *ARMStack) *NullableARMStack {
	return &NullableARMStack{value: val, isSet: true}
}

func (v NullableARMStack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableARMStack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


