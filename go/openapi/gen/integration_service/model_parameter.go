/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Parameter - struct for Parameter
type Parameter struct {
	ParameterApiKey *ParameterApiKey
	ParameterBooleanValue *ParameterBooleanValue
	ParameterNumericValue *ParameterNumericValue
	ParameterSensitiveData *ParameterSensitiveData
	ParameterStringList *ParameterStringList
	ParameterStringValue *ParameterStringValue
}

// ParameterApiKeyAsParameter is a convenience function that returns ParameterApiKey wrapped in Parameter
func ParameterApiKeyAsParameter(v *ParameterApiKey) Parameter {
	return Parameter{
		ParameterApiKey: v,
	}
}

// ParameterBooleanValueAsParameter is a convenience function that returns ParameterBooleanValue wrapped in Parameter
func ParameterBooleanValueAsParameter(v *ParameterBooleanValue) Parameter {
	return Parameter{
		ParameterBooleanValue: v,
	}
}

// ParameterNumericValueAsParameter is a convenience function that returns ParameterNumericValue wrapped in Parameter
func ParameterNumericValueAsParameter(v *ParameterNumericValue) Parameter {
	return Parameter{
		ParameterNumericValue: v,
	}
}

// ParameterSensitiveDataAsParameter is a convenience function that returns ParameterSensitiveData wrapped in Parameter
func ParameterSensitiveDataAsParameter(v *ParameterSensitiveData) Parameter {
	return Parameter{
		ParameterSensitiveData: v,
	}
}

// ParameterStringListAsParameter is a convenience function that returns ParameterStringList wrapped in Parameter
func ParameterStringListAsParameter(v *ParameterStringList) Parameter {
	return Parameter{
		ParameterStringList: v,
	}
}

// ParameterStringValueAsParameter is a convenience function that returns ParameterStringValue wrapped in Parameter
func ParameterStringValueAsParameter(v *ParameterStringValue) Parameter {
	return Parameter{
		ParameterStringValue: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Parameter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ParameterApiKey
	err = newStrictDecoder(data).Decode(&dst.ParameterApiKey)
	if err == nil {
		jsonParameterApiKey, _ := json.Marshal(dst.ParameterApiKey)
		if string(jsonParameterApiKey) == "{}" { // empty struct
			dst.ParameterApiKey = nil
		} else {
			if err = validator.Validate(dst.ParameterApiKey); err != nil {
				dst.ParameterApiKey = nil
			} else {
				match++
			}
		}
	} else {
		dst.ParameterApiKey = nil
	}

	// try to unmarshal data into ParameterBooleanValue
	err = newStrictDecoder(data).Decode(&dst.ParameterBooleanValue)
	if err == nil {
		jsonParameterBooleanValue, _ := json.Marshal(dst.ParameterBooleanValue)
		if string(jsonParameterBooleanValue) == "{}" { // empty struct
			dst.ParameterBooleanValue = nil
		} else {
			if err = validator.Validate(dst.ParameterBooleanValue); err != nil {
				dst.ParameterBooleanValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.ParameterBooleanValue = nil
	}

	// try to unmarshal data into ParameterNumericValue
	err = newStrictDecoder(data).Decode(&dst.ParameterNumericValue)
	if err == nil {
		jsonParameterNumericValue, _ := json.Marshal(dst.ParameterNumericValue)
		if string(jsonParameterNumericValue) == "{}" { // empty struct
			dst.ParameterNumericValue = nil
		} else {
			if err = validator.Validate(dst.ParameterNumericValue); err != nil {
				dst.ParameterNumericValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.ParameterNumericValue = nil
	}

	// try to unmarshal data into ParameterSensitiveData
	err = newStrictDecoder(data).Decode(&dst.ParameterSensitiveData)
	if err == nil {
		jsonParameterSensitiveData, _ := json.Marshal(dst.ParameterSensitiveData)
		if string(jsonParameterSensitiveData) == "{}" { // empty struct
			dst.ParameterSensitiveData = nil
		} else {
			if err = validator.Validate(dst.ParameterSensitiveData); err != nil {
				dst.ParameterSensitiveData = nil
			} else {
				match++
			}
		}
	} else {
		dst.ParameterSensitiveData = nil
	}

	// try to unmarshal data into ParameterStringList
	err = newStrictDecoder(data).Decode(&dst.ParameterStringList)
	if err == nil {
		jsonParameterStringList, _ := json.Marshal(dst.ParameterStringList)
		if string(jsonParameterStringList) == "{}" { // empty struct
			dst.ParameterStringList = nil
		} else {
			if err = validator.Validate(dst.ParameterStringList); err != nil {
				dst.ParameterStringList = nil
			} else {
				match++
			}
		}
	} else {
		dst.ParameterStringList = nil
	}

	// try to unmarshal data into ParameterStringValue
	err = newStrictDecoder(data).Decode(&dst.ParameterStringValue)
	if err == nil {
		jsonParameterStringValue, _ := json.Marshal(dst.ParameterStringValue)
		if string(jsonParameterStringValue) == "{}" { // empty struct
			dst.ParameterStringValue = nil
		} else {
			if err = validator.Validate(dst.ParameterStringValue); err != nil {
				dst.ParameterStringValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.ParameterStringValue = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ParameterApiKey = nil
		dst.ParameterBooleanValue = nil
		dst.ParameterNumericValue = nil
		dst.ParameterSensitiveData = nil
		dst.ParameterStringList = nil
		dst.ParameterStringValue = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Parameter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Parameter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Parameter) MarshalJSON() ([]byte, error) {
	if src.ParameterApiKey != nil {
		return json.Marshal(&src.ParameterApiKey)
	}

	if src.ParameterBooleanValue != nil {
		return json.Marshal(&src.ParameterBooleanValue)
	}

	if src.ParameterNumericValue != nil {
		return json.Marshal(&src.ParameterNumericValue)
	}

	if src.ParameterSensitiveData != nil {
		return json.Marshal(&src.ParameterSensitiveData)
	}

	if src.ParameterStringList != nil {
		return json.Marshal(&src.ParameterStringList)
	}

	if src.ParameterStringValue != nil {
		return json.Marshal(&src.ParameterStringValue)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Parameter) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ParameterApiKey != nil {
		return obj.ParameterApiKey
	}

	if obj.ParameterBooleanValue != nil {
		return obj.ParameterBooleanValue
	}

	if obj.ParameterNumericValue != nil {
		return obj.ParameterNumericValue
	}

	if obj.ParameterSensitiveData != nil {
		return obj.ParameterSensitiveData
	}

	if obj.ParameterStringList != nil {
		return obj.ParameterStringList
	}

	if obj.ParameterStringValue != nil {
		return obj.ParameterStringValue
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Parameter) GetActualInstanceValue() (interface{}) {
	if obj.ParameterApiKey != nil {
		return *obj.ParameterApiKey
	}

	if obj.ParameterBooleanValue != nil {
		return *obj.ParameterBooleanValue
	}

	if obj.ParameterNumericValue != nil {
		return *obj.ParameterNumericValue
	}

	if obj.ParameterSensitiveData != nil {
		return *obj.ParameterSensitiveData
	}

	if obj.ParameterStringList != nil {
		return *obj.ParameterStringList
	}

	if obj.ParameterStringValue != nil {
		return *obj.ParameterStringValue
	}

	// all schemas are nil
	return nil
}

type NullableParameter struct {
	value *Parameter
	isSet bool
}

func (v NullableParameter) Get() *Parameter {
	return v.value
}

func (v *NullableParameter) Set(val *Parameter) {
	v.value = val
	v.isSet = true
}

func (v NullableParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameter(val *Parameter) *NullableParameter {
	return &NullableParameter{value: val, isSet: true}
}

func (v NullableParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


