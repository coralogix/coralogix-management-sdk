/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Parameter - struct for Parameter
type Parameter struct {
	Parameter1 *Parameter1
	Parameter2 *Parameter2
	Parameter3 *Parameter3
	Parameter4 *Parameter4
	Parameter5 *Parameter5
	Parameter6 *Parameter6
}

// Parameter1AsParameter is a convenience function that returns Parameter1 wrapped in Parameter
func Parameter1AsParameter(v *Parameter1) Parameter {
	return Parameter{
		Parameter1: v,
	}
}

// Parameter2AsParameter is a convenience function that returns Parameter2 wrapped in Parameter
func Parameter2AsParameter(v *Parameter2) Parameter {
	return Parameter{
		Parameter2: v,
	}
}

// Parameter3AsParameter is a convenience function that returns Parameter3 wrapped in Parameter
func Parameter3AsParameter(v *Parameter3) Parameter {
	return Parameter{
		Parameter3: v,
	}
}

// Parameter4AsParameter is a convenience function that returns Parameter4 wrapped in Parameter
func Parameter4AsParameter(v *Parameter4) Parameter {
	return Parameter{
		Parameter4: v,
	}
}

// Parameter5AsParameter is a convenience function that returns Parameter5 wrapped in Parameter
func Parameter5AsParameter(v *Parameter5) Parameter {
	return Parameter{
		Parameter5: v,
	}
}

// Parameter6AsParameter is a convenience function that returns Parameter6 wrapped in Parameter
func Parameter6AsParameter(v *Parameter6) Parameter {
	return Parameter{
		Parameter6: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Parameter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Parameter1
	err = newStrictDecoder(data).Decode(&dst.Parameter1)
	if err == nil {
		jsonParameter1, _ := json.Marshal(dst.Parameter1)
		if string(jsonParameter1) == "{}" { // empty struct
			dst.Parameter1 = nil
		} else {
			if err = validator.Validate(dst.Parameter1); err != nil {
				dst.Parameter1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Parameter1 = nil
	}

	// try to unmarshal data into Parameter2
	err = newStrictDecoder(data).Decode(&dst.Parameter2)
	if err == nil {
		jsonParameter2, _ := json.Marshal(dst.Parameter2)
		if string(jsonParameter2) == "{}" { // empty struct
			dst.Parameter2 = nil
		} else {
			if err = validator.Validate(dst.Parameter2); err != nil {
				dst.Parameter2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Parameter2 = nil
	}

	// try to unmarshal data into Parameter3
	err = newStrictDecoder(data).Decode(&dst.Parameter3)
	if err == nil {
		jsonParameter3, _ := json.Marshal(dst.Parameter3)
		if string(jsonParameter3) == "{}" { // empty struct
			dst.Parameter3 = nil
		} else {
			if err = validator.Validate(dst.Parameter3); err != nil {
				dst.Parameter3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Parameter3 = nil
	}

	// try to unmarshal data into Parameter4
	err = newStrictDecoder(data).Decode(&dst.Parameter4)
	if err == nil {
		jsonParameter4, _ := json.Marshal(dst.Parameter4)
		if string(jsonParameter4) == "{}" { // empty struct
			dst.Parameter4 = nil
		} else {
			if err = validator.Validate(dst.Parameter4); err != nil {
				dst.Parameter4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Parameter4 = nil
	}

	// try to unmarshal data into Parameter5
	err = newStrictDecoder(data).Decode(&dst.Parameter5)
	if err == nil {
		jsonParameter5, _ := json.Marshal(dst.Parameter5)
		if string(jsonParameter5) == "{}" { // empty struct
			dst.Parameter5 = nil
		} else {
			if err = validator.Validate(dst.Parameter5); err != nil {
				dst.Parameter5 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Parameter5 = nil
	}

	// try to unmarshal data into Parameter6
	err = newStrictDecoder(data).Decode(&dst.Parameter6)
	if err == nil {
		jsonParameter6, _ := json.Marshal(dst.Parameter6)
		if string(jsonParameter6) == "{}" { // empty struct
			dst.Parameter6 = nil
		} else {
			if err = validator.Validate(dst.Parameter6); err != nil {
				dst.Parameter6 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Parameter6 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Parameter1 = nil
		dst.Parameter2 = nil
		dst.Parameter3 = nil
		dst.Parameter4 = nil
		dst.Parameter5 = nil
		dst.Parameter6 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Parameter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Parameter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Parameter) MarshalJSON() ([]byte, error) {
	if src.Parameter1 != nil {
		return json.Marshal(&src.Parameter1)
	}

	if src.Parameter2 != nil {
		return json.Marshal(&src.Parameter2)
	}

	if src.Parameter3 != nil {
		return json.Marshal(&src.Parameter3)
	}

	if src.Parameter4 != nil {
		return json.Marshal(&src.Parameter4)
	}

	if src.Parameter5 != nil {
		return json.Marshal(&src.Parameter5)
	}

	if src.Parameter6 != nil {
		return json.Marshal(&src.Parameter6)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Parameter) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Parameter1 != nil {
		return obj.Parameter1
	}

	if obj.Parameter2 != nil {
		return obj.Parameter2
	}

	if obj.Parameter3 != nil {
		return obj.Parameter3
	}

	if obj.Parameter4 != nil {
		return obj.Parameter4
	}

	if obj.Parameter5 != nil {
		return obj.Parameter5
	}

	if obj.Parameter6 != nil {
		return obj.Parameter6
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Parameter) GetActualInstanceValue() (interface{}) {
	if obj.Parameter1 != nil {
		return *obj.Parameter1
	}

	if obj.Parameter2 != nil {
		return *obj.Parameter2
	}

	if obj.Parameter3 != nil {
		return *obj.Parameter3
	}

	if obj.Parameter4 != nil {
		return *obj.Parameter4
	}

	if obj.Parameter5 != nil {
		return *obj.Parameter5
	}

	if obj.Parameter6 != nil {
		return *obj.Parameter6
	}

	// all schemas are nil
	return nil
}

type NullableParameter struct {
	value *Parameter
	isSet bool
}

func (v NullableParameter) Get() *Parameter {
	return v.value
}

func (v *NullableParameter) Set(val *Parameter) {
	v.value = val
	v.isSet = true
}

func (v NullableParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameter(val *Parameter) *NullableParameter {
	return &NullableParameter{value: val, isSet: true}
}

func (v NullableParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


