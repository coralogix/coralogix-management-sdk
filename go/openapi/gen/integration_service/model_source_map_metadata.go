/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
	"time"
)

// checks if the SourceMapMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceMapMetadata{}

// SourceMapMetadata struct for SourceMapMetadata
type SourceMapMetadata struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	IsUploadedSuccessful *bool `json:"isUploadedSuccessful,omitempty"`
}

// NewSourceMapMetadata instantiates a new SourceMapMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceMapMetadata() *SourceMapMetadata {
	this := SourceMapMetadata{}
	return &this
}

// NewSourceMapMetadataWithDefaults instantiates a new SourceMapMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceMapMetadataWithDefaults() *SourceMapMetadata {
	this := SourceMapMetadata{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SourceMapMetadata) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceMapMetadata) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SourceMapMetadata) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SourceMapMetadata) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetIsUploadedSuccessful returns the IsUploadedSuccessful field value if set, zero value otherwise.
func (o *SourceMapMetadata) GetIsUploadedSuccessful() bool {
	if o == nil || IsNil(o.IsUploadedSuccessful) {
		var ret bool
		return ret
	}
	return *o.IsUploadedSuccessful
}

// GetIsUploadedSuccessfulOk returns a tuple with the IsUploadedSuccessful field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceMapMetadata) GetIsUploadedSuccessfulOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUploadedSuccessful) {
		return nil, false
	}
	return o.IsUploadedSuccessful, true
}

// HasIsUploadedSuccessful returns a boolean if a field has been set.
func (o *SourceMapMetadata) HasIsUploadedSuccessful() bool {
	if o != nil && !IsNil(o.IsUploadedSuccessful) {
		return true
	}

	return false
}

// SetIsUploadedSuccessful gets a reference to the given bool and assigns it to the IsUploadedSuccessful field.
func (o *SourceMapMetadata) SetIsUploadedSuccessful(v bool) {
	o.IsUploadedSuccessful = &v
}

func (o SourceMapMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceMapMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.IsUploadedSuccessful) {
		toSerialize["isUploadedSuccessful"] = o.IsUploadedSuccessful
	}
	return toSerialize, nil
}

type NullableSourceMapMetadata struct {
	value *SourceMapMetadata
	isSet bool
}

func (v NullableSourceMapMetadata) Get() *SourceMapMetadata {
	return v.value
}

func (v *NullableSourceMapMetadata) Set(val *SourceMapMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceMapMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceMapMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceMapMetadata(val *SourceMapMetadata) *NullableSourceMapMetadata {
	return &NullableSourceMapMetadata{value: val, isSet: true}
}

func (v NullableSourceMapMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceMapMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


