/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
	"fmt"
)

// FieldConditionConditionType the model 'FieldConditionConditionType'
type FieldConditionConditionType string

// List of FieldCondition.ConditionType
const (
	FIELDCONDITIONCONDITIONTYPE_UNKNOWN FieldConditionConditionType = "UNKNOWN"
	FIELDCONDITIONCONDITIONTYPE_OR FieldConditionConditionType = "OR"
	FIELDCONDITIONCONDITIONTYPE_AND FieldConditionConditionType = "AND"
)

// All allowed values of FieldConditionConditionType enum
var AllowedFieldConditionConditionTypeEnumValues = []FieldConditionConditionType{
	"UNKNOWN",
	"OR",
	"AND",
}

func (v *FieldConditionConditionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldConditionConditionType(value)
	for _, existing := range AllowedFieldConditionConditionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldConditionConditionType", value)
}

// NewFieldConditionConditionTypeFromValue returns a pointer to a valid FieldConditionConditionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldConditionConditionTypeFromValue(v string) (*FieldConditionConditionType, error) {
	ev := FieldConditionConditionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldConditionConditionType: valid values are %v", v, AllowedFieldConditionConditionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldConditionConditionType) IsValid() bool {
	for _, existing := range AllowedFieldConditionConditionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FieldCondition.ConditionType value
func (v FieldConditionConditionType) Ptr() *FieldConditionConditionType {
	return &v
}

type NullableFieldConditionConditionType struct {
	value *FieldConditionConditionType
	isSet bool
}

func (v NullableFieldConditionConditionType) Get() *FieldConditionConditionType {
	return v.value
}

func (v *NullableFieldConditionConditionType) Set(val *FieldConditionConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldConditionConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldConditionConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldConditionConditionType(val *FieldConditionConditionType) *NullableFieldConditionConditionType {
	return &NullableFieldConditionConditionType{value: val, isSet: true}
}

func (v NullableFieldConditionConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldConditionConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

