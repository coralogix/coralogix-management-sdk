/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
)

// checks if the IntegrationTypeContextualData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationTypeContextualData{}

// IntegrationTypeContextualData This data structure represents an integration type.
type IntegrationTypeContextualData struct {
	// This data structure represents a contextual data integration.
	ContextualData map[string]interface{} `json:"contextualData,omitempty"`
}

// NewIntegrationTypeContextualData instantiates a new IntegrationTypeContextualData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationTypeContextualData() *IntegrationTypeContextualData {
	this := IntegrationTypeContextualData{}
	return &this
}

// NewIntegrationTypeContextualDataWithDefaults instantiates a new IntegrationTypeContextualData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationTypeContextualDataWithDefaults() *IntegrationTypeContextualData {
	this := IntegrationTypeContextualData{}
	return &this
}

// GetContextualData returns the ContextualData field value if set, zero value otherwise.
func (o *IntegrationTypeContextualData) GetContextualData() map[string]interface{} {
	if o == nil || IsNil(o.ContextualData) {
		var ret map[string]interface{}
		return ret
	}
	return o.ContextualData
}

// GetContextualDataOk returns a tuple with the ContextualData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationTypeContextualData) GetContextualDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ContextualData) {
		return map[string]interface{}{}, false
	}
	return o.ContextualData, true
}

// HasContextualData returns a boolean if a field has been set.
func (o *IntegrationTypeContextualData) HasContextualData() bool {
	if o != nil && !IsNil(o.ContextualData) {
		return true
	}

	return false
}

// SetContextualData gets a reference to the given map[string]interface{} and assigns it to the ContextualData field.
func (o *IntegrationTypeContextualData) SetContextualData(v map[string]interface{}) {
	o.ContextualData = v
}

func (o IntegrationTypeContextualData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationTypeContextualData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContextualData) {
		toSerialize["contextualData"] = o.ContextualData
	}
	return toSerialize, nil
}

type NullableIntegrationTypeContextualData struct {
	value *IntegrationTypeContextualData
	isSet bool
}

func (v NullableIntegrationTypeContextualData) Get() *IntegrationTypeContextualData {
	return v.value
}

func (v *NullableIntegrationTypeContextualData) Set(val *IntegrationTypeContextualData) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationTypeContextualData) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationTypeContextualData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationTypeContextualData(val *IntegrationTypeContextualData) *NullableIntegrationTypeContextualData {
	return &NullableIntegrationTypeContextualData{value: val, isSet: true}
}

func (v NullableIntegrationTypeContextualData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationTypeContextualData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


