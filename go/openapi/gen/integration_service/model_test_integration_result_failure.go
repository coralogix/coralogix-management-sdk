/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
)

// checks if the TestIntegrationResultFailure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestIntegrationResultFailure{}

// TestIntegrationResultFailure struct for TestIntegrationResultFailure
type TestIntegrationResultFailure struct {
	Failure *TestIntegrationResultFailure `json:"failure,omitempty"`
}

// NewTestIntegrationResultFailure instantiates a new TestIntegrationResultFailure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestIntegrationResultFailure() *TestIntegrationResultFailure {
	this := TestIntegrationResultFailure{}
	return &this
}

// NewTestIntegrationResultFailureWithDefaults instantiates a new TestIntegrationResultFailure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestIntegrationResultFailureWithDefaults() *TestIntegrationResultFailure {
	this := TestIntegrationResultFailure{}
	return &this
}

// GetFailure returns the Failure field value if set, zero value otherwise.
func (o *TestIntegrationResultFailure) GetFailure() TestIntegrationResultFailure {
	if o == nil || IsNil(o.Failure) {
		var ret TestIntegrationResultFailure
		return ret
	}
	return *o.Failure
}

// GetFailureOk returns a tuple with the Failure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestIntegrationResultFailure) GetFailureOk() (*TestIntegrationResultFailure, bool) {
	if o == nil || IsNil(o.Failure) {
		return nil, false
	}
	return o.Failure, true
}

// HasFailure returns a boolean if a field has been set.
func (o *TestIntegrationResultFailure) HasFailure() bool {
	if o != nil && !IsNil(o.Failure) {
		return true
	}

	return false
}

// SetFailure gets a reference to the given TestIntegrationResultFailure and assigns it to the Failure field.
func (o *TestIntegrationResultFailure) SetFailure(v TestIntegrationResultFailure) {
	o.Failure = &v
}

func (o TestIntegrationResultFailure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestIntegrationResultFailure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Failure) {
		toSerialize["failure"] = o.Failure
	}
	return toSerialize, nil
}

type NullableTestIntegrationResultFailure struct {
	value *TestIntegrationResultFailure
	isSet bool
}

func (v NullableTestIntegrationResultFailure) Get() *TestIntegrationResultFailure {
	return v.value
}

func (v *NullableTestIntegrationResultFailure) Set(val *TestIntegrationResultFailure) {
	v.value = val
	v.isSet = true
}

func (v NullableTestIntegrationResultFailure) IsSet() bool {
	return v.isSet
}

func (v *NullableTestIntegrationResultFailure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestIntegrationResultFailure(val *TestIntegrationResultFailure) *NullableTestIntegrationResultFailure {
	return &NullableTestIntegrationResultFailure{value: val, isSet: true}
}

func (v NullableTestIntegrationResultFailure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestIntegrationResultFailure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


