/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integration_service

import (
	"encoding/json"
)

// checks if the CommandInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommandInformation{}

// CommandInformation struct for CommandInformation
type CommandInformation struct {
	Command *string `json:"command,omitempty"`
	Description *string `json:"description,omitempty"`
	Language *Language `json:"language,omitempty"`
	Links []Link `json:"links,omitempty"`
	Name *string `json:"name,omitempty"`
	TooltipText *string `json:"tooltipText,omitempty"`
}

// NewCommandInformation instantiates a new CommandInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommandInformation() *CommandInformation {
	this := CommandInformation{}
	return &this
}

// NewCommandInformationWithDefaults instantiates a new CommandInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommandInformationWithDefaults() *CommandInformation {
	this := CommandInformation{}
	return &this
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *CommandInformation) GetCommand() string {
	if o == nil || IsNil(o.Command) {
		var ret string
		return ret
	}
	return *o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommandInformation) GetCommandOk() (*string, bool) {
	if o == nil || IsNil(o.Command) {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *CommandInformation) HasCommand() bool {
	if o != nil && !IsNil(o.Command) {
		return true
	}

	return false
}

// SetCommand gets a reference to the given string and assigns it to the Command field.
func (o *CommandInformation) SetCommand(v string) {
	o.Command = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CommandInformation) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommandInformation) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CommandInformation) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CommandInformation) SetDescription(v string) {
	o.Description = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *CommandInformation) GetLanguage() Language {
	if o == nil || IsNil(o.Language) {
		var ret Language
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommandInformation) GetLanguageOk() (*Language, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *CommandInformation) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given Language and assigns it to the Language field.
func (o *CommandInformation) SetLanguage(v Language) {
	o.Language = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *CommandInformation) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommandInformation) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *CommandInformation) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *CommandInformation) SetLinks(v []Link) {
	o.Links = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CommandInformation) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommandInformation) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CommandInformation) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CommandInformation) SetName(v string) {
	o.Name = &v
}

// GetTooltipText returns the TooltipText field value if set, zero value otherwise.
func (o *CommandInformation) GetTooltipText() string {
	if o == nil || IsNil(o.TooltipText) {
		var ret string
		return ret
	}
	return *o.TooltipText
}

// GetTooltipTextOk returns a tuple with the TooltipText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommandInformation) GetTooltipTextOk() (*string, bool) {
	if o == nil || IsNil(o.TooltipText) {
		return nil, false
	}
	return o.TooltipText, true
}

// HasTooltipText returns a boolean if a field has been set.
func (o *CommandInformation) HasTooltipText() bool {
	if o != nil && !IsNil(o.TooltipText) {
		return true
	}

	return false
}

// SetTooltipText gets a reference to the given string and assigns it to the TooltipText field.
func (o *CommandInformation) SetTooltipText(v string) {
	o.TooltipText = &v
}

func (o CommandInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommandInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Command) {
		toSerialize["command"] = o.Command
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.TooltipText) {
		toSerialize["tooltipText"] = o.TooltipText
	}
	return toSerialize, nil
}

type NullableCommandInformation struct {
	value *CommandInformation
	isSet bool
}

func (v NullableCommandInformation) Get() *CommandInformation {
	return v.value
}

func (v *NullableCommandInformation) Set(val *CommandInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableCommandInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableCommandInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommandInformation(val *CommandInformation) *NullableCommandInformation {
	return &NullableCommandInformation{value: val, isSet: true}
}

func (v NullableCommandInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommandInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


