/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_deployment_service

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// ExtensionDeploymentServiceAPIService ExtensionDeploymentServiceAPI service
type ExtensionDeploymentServiceAPIService service

type ApiExtensionDeploymentServiceDeployExtensionRequest struct {
	ctx context.Context
	ApiService *ExtensionDeploymentServiceAPIService
	id *string
	version *string
	itemIds *[]string
	applications *[]string
	subsystems *[]string
	extensionDeployment *ExtensionDeployment
}

func (r ApiExtensionDeploymentServiceDeployExtensionRequest) Id(id string) ApiExtensionDeploymentServiceDeployExtensionRequest {
	r.id = &id
	return r
}

func (r ApiExtensionDeploymentServiceDeployExtensionRequest) Version(version string) ApiExtensionDeploymentServiceDeployExtensionRequest {
	r.version = &version
	return r
}

func (r ApiExtensionDeploymentServiceDeployExtensionRequest) ItemIds(itemIds []string) ApiExtensionDeploymentServiceDeployExtensionRequest {
	r.itemIds = &itemIds
	return r
}

func (r ApiExtensionDeploymentServiceDeployExtensionRequest) Applications(applications []string) ApiExtensionDeploymentServiceDeployExtensionRequest {
	r.applications = &applications
	return r
}

func (r ApiExtensionDeploymentServiceDeployExtensionRequest) Subsystems(subsystems []string) ApiExtensionDeploymentServiceDeployExtensionRequest {
	r.subsystems = &subsystems
	return r
}

func (r ApiExtensionDeploymentServiceDeployExtensionRequest) ExtensionDeployment(extensionDeployment ExtensionDeployment) ApiExtensionDeploymentServiceDeployExtensionRequest {
	r.extensionDeployment = &extensionDeployment
	return r
}

func (r ApiExtensionDeploymentServiceDeployExtensionRequest) Execute() (*DeployExtensionResponse, *http.Response, error) {
	return r.ApiService.ExtensionDeploymentServiceDeployExtensionExecute(r)
}

/*
ExtensionDeploymentServiceDeployExtension Deploy extension

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtensionDeploymentServiceDeployExtensionRequest
*/
func (a *ExtensionDeploymentServiceAPIService) ExtensionDeploymentServiceDeployExtension(ctx context.Context) ApiExtensionDeploymentServiceDeployExtensionRequest {
	return ApiExtensionDeploymentServiceDeployExtensionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeployExtensionResponse
func (a *ExtensionDeploymentServiceAPIService) ExtensionDeploymentServiceDeployExtensionExecute(r ApiExtensionDeploymentServiceDeployExtensionRequest) (*DeployExtensionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeployExtensionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtensionDeploymentServiceAPIService.ExtensionDeploymentServiceDeployExtension")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/extensions/v1/deployed"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "form", "")
	}
	if r.itemIds != nil {
		t := *r.itemIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "item_ids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "item_ids", t, "form", "multi")
		}
	}
	if r.applications != nil {
		t := *r.applications
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "applications", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "applications", t, "form", "multi")
		}
	}
	if r.subsystems != nil {
		t := *r.subsystems
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "subsystems", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "subsystems", t, "form", "multi")
		}
	}
	if r.extensionDeployment != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "extension_deployment", r.extensionDeployment, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtensionDeploymentServiceGetDeployedExtensionsRequest struct {
	ctx context.Context
	ApiService *ExtensionDeploymentServiceAPIService
}

func (r ApiExtensionDeploymentServiceGetDeployedExtensionsRequest) Execute() (*GetDeployedExtensionsResponse, *http.Response, error) {
	return r.ApiService.ExtensionDeploymentServiceGetDeployedExtensionsExecute(r)
}

/*
ExtensionDeploymentServiceGetDeployedExtensions Get deployed extensions

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtensionDeploymentServiceGetDeployedExtensionsRequest
*/
func (a *ExtensionDeploymentServiceAPIService) ExtensionDeploymentServiceGetDeployedExtensions(ctx context.Context) ApiExtensionDeploymentServiceGetDeployedExtensionsRequest {
	return ApiExtensionDeploymentServiceGetDeployedExtensionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetDeployedExtensionsResponse
func (a *ExtensionDeploymentServiceAPIService) ExtensionDeploymentServiceGetDeployedExtensionsExecute(r ApiExtensionDeploymentServiceGetDeployedExtensionsRequest) (*GetDeployedExtensionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetDeployedExtensionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtensionDeploymentServiceAPIService.ExtensionDeploymentServiceGetDeployedExtensions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/extensions/v1/deployed"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtensionDeploymentServiceUndeployExtensionRequest struct {
	ctx context.Context
	ApiService *ExtensionDeploymentServiceAPIService
	revertDeploymentOfExtensionRequest *RevertDeploymentOfExtensionRequest
}

func (r ApiExtensionDeploymentServiceUndeployExtensionRequest) RevertDeploymentOfExtensionRequest(revertDeploymentOfExtensionRequest RevertDeploymentOfExtensionRequest) ApiExtensionDeploymentServiceUndeployExtensionRequest {
	r.revertDeploymentOfExtensionRequest = &revertDeploymentOfExtensionRequest
	return r
}

func (r ApiExtensionDeploymentServiceUndeployExtensionRequest) Execute() (*UndeployExtensionResponse, *http.Response, error) {
	return r.ApiService.ExtensionDeploymentServiceUndeployExtensionExecute(r)
}

/*
ExtensionDeploymentServiceUndeployExtension Revert deployment of extension

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtensionDeploymentServiceUndeployExtensionRequest
*/
func (a *ExtensionDeploymentServiceAPIService) ExtensionDeploymentServiceUndeployExtension(ctx context.Context) ApiExtensionDeploymentServiceUndeployExtensionRequest {
	return ApiExtensionDeploymentServiceUndeployExtensionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UndeployExtensionResponse
func (a *ExtensionDeploymentServiceAPIService) ExtensionDeploymentServiceUndeployExtensionExecute(r ApiExtensionDeploymentServiceUndeployExtensionRequest) (*UndeployExtensionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UndeployExtensionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtensionDeploymentServiceAPIService.ExtensionDeploymentServiceUndeployExtension")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/extensions/v1/deployed"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.revertDeploymentOfExtensionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtensionDeploymentServiceUpdateExtensionRequest struct {
	ctx context.Context
	ApiService *ExtensionDeploymentServiceAPIService
	id *string
	version *string
	itemIds *[]string
	applications *[]string
	subsystems *[]string
	extensionDeployment *ExtensionDeployment
}

func (r ApiExtensionDeploymentServiceUpdateExtensionRequest) Id(id string) ApiExtensionDeploymentServiceUpdateExtensionRequest {
	r.id = &id
	return r
}

func (r ApiExtensionDeploymentServiceUpdateExtensionRequest) Version(version string) ApiExtensionDeploymentServiceUpdateExtensionRequest {
	r.version = &version
	return r
}

func (r ApiExtensionDeploymentServiceUpdateExtensionRequest) ItemIds(itemIds []string) ApiExtensionDeploymentServiceUpdateExtensionRequest {
	r.itemIds = &itemIds
	return r
}

func (r ApiExtensionDeploymentServiceUpdateExtensionRequest) Applications(applications []string) ApiExtensionDeploymentServiceUpdateExtensionRequest {
	r.applications = &applications
	return r
}

func (r ApiExtensionDeploymentServiceUpdateExtensionRequest) Subsystems(subsystems []string) ApiExtensionDeploymentServiceUpdateExtensionRequest {
	r.subsystems = &subsystems
	return r
}

func (r ApiExtensionDeploymentServiceUpdateExtensionRequest) ExtensionDeployment(extensionDeployment ExtensionDeployment) ApiExtensionDeploymentServiceUpdateExtensionRequest {
	r.extensionDeployment = &extensionDeployment
	return r
}

func (r ApiExtensionDeploymentServiceUpdateExtensionRequest) Execute() (*UpdateExtensionResponse, *http.Response, error) {
	return r.ApiService.ExtensionDeploymentServiceUpdateExtensionExecute(r)
}

/*
ExtensionDeploymentServiceUpdateExtension Update extension

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtensionDeploymentServiceUpdateExtensionRequest
*/
func (a *ExtensionDeploymentServiceAPIService) ExtensionDeploymentServiceUpdateExtension(ctx context.Context) ApiExtensionDeploymentServiceUpdateExtensionRequest {
	return ApiExtensionDeploymentServiceUpdateExtensionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UpdateExtensionResponse
func (a *ExtensionDeploymentServiceAPIService) ExtensionDeploymentServiceUpdateExtensionExecute(r ApiExtensionDeploymentServiceUpdateExtensionRequest) (*UpdateExtensionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateExtensionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtensionDeploymentServiceAPIService.ExtensionDeploymentServiceUpdateExtension")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/extensions/v1/deployed"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "form", "")
	}
	if r.itemIds != nil {
		t := *r.itemIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "item_ids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "item_ids", t, "form", "multi")
		}
	}
	if r.applications != nil {
		t := *r.applications
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "applications", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "applications", t, "form", "multi")
		}
	}
	if r.subsystems != nil {
		t := *r.subsystems
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "subsystems", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "subsystems", t, "form", "multi")
		}
	}
	if r.extensionDeployment != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "extension_deployment", r.extensionDeployment, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
