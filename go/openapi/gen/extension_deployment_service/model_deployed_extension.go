/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_deployment_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeployedExtension type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeployedExtension{}

// DeployedExtension struct for DeployedExtension
type DeployedExtension struct {
	Applications []string `json:"applications,omitempty"`
	Id string `json:"id"`
	ItemIds []string `json:"itemIds"`
	Subsystems []string `json:"subsystems,omitempty"`
	Summary DeployedExtensionSummary `json:"summary"`
	Version string `json:"version"`
}

type _DeployedExtension DeployedExtension

// NewDeployedExtension instantiates a new DeployedExtension object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeployedExtension(id string, itemIds []string, summary DeployedExtensionSummary, version string) *DeployedExtension {
	this := DeployedExtension{}
	this.Id = id
	this.ItemIds = itemIds
	this.Summary = summary
	this.Version = version
	return &this
}

// NewDeployedExtensionWithDefaults instantiates a new DeployedExtension object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeployedExtensionWithDefaults() *DeployedExtension {
	this := DeployedExtension{}
	return &this
}

// GetApplications returns the Applications field value if set, zero value otherwise.
func (o *DeployedExtension) GetApplications() []string {
	if o == nil || IsNil(o.Applications) {
		var ret []string
		return ret
	}
	return o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeployedExtension) GetApplicationsOk() ([]string, bool) {
	if o == nil || IsNil(o.Applications) {
		return nil, false
	}
	return o.Applications, true
}

// HasApplications returns a boolean if a field has been set.
func (o *DeployedExtension) HasApplications() bool {
	if o != nil && !IsNil(o.Applications) {
		return true
	}

	return false
}

// SetApplications gets a reference to the given []string and assigns it to the Applications field.
func (o *DeployedExtension) SetApplications(v []string) {
	o.Applications = v
}

// GetId returns the Id field value
func (o *DeployedExtension) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeployedExtension) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeployedExtension) SetId(v string) {
	o.Id = v
}

// GetItemIds returns the ItemIds field value
func (o *DeployedExtension) GetItemIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ItemIds
}

// GetItemIdsOk returns a tuple with the ItemIds field value
// and a boolean to check if the value has been set.
func (o *DeployedExtension) GetItemIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemIds, true
}

// SetItemIds sets field value
func (o *DeployedExtension) SetItemIds(v []string) {
	o.ItemIds = v
}

// GetSubsystems returns the Subsystems field value if set, zero value otherwise.
func (o *DeployedExtension) GetSubsystems() []string {
	if o == nil || IsNil(o.Subsystems) {
		var ret []string
		return ret
	}
	return o.Subsystems
}

// GetSubsystemsOk returns a tuple with the Subsystems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeployedExtension) GetSubsystemsOk() ([]string, bool) {
	if o == nil || IsNil(o.Subsystems) {
		return nil, false
	}
	return o.Subsystems, true
}

// HasSubsystems returns a boolean if a field has been set.
func (o *DeployedExtension) HasSubsystems() bool {
	if o != nil && !IsNil(o.Subsystems) {
		return true
	}

	return false
}

// SetSubsystems gets a reference to the given []string and assigns it to the Subsystems field.
func (o *DeployedExtension) SetSubsystems(v []string) {
	o.Subsystems = v
}

// GetSummary returns the Summary field value
func (o *DeployedExtension) GetSummary() DeployedExtensionSummary {
	if o == nil {
		var ret DeployedExtensionSummary
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *DeployedExtension) GetSummaryOk() (*DeployedExtensionSummary, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary, true
}

// SetSummary sets field value
func (o *DeployedExtension) SetSummary(v DeployedExtensionSummary) {
	o.Summary = v
}

// GetVersion returns the Version field value
func (o *DeployedExtension) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *DeployedExtension) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *DeployedExtension) SetVersion(v string) {
	o.Version = v
}

func (o DeployedExtension) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeployedExtension) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Applications) {
		toSerialize["applications"] = o.Applications
	}
	toSerialize["id"] = o.Id
	toSerialize["itemIds"] = o.ItemIds
	if !IsNil(o.Subsystems) {
		toSerialize["subsystems"] = o.Subsystems
	}
	toSerialize["summary"] = o.Summary
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *DeployedExtension) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"itemIds",
		"summary",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeployedExtension := _DeployedExtension{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeployedExtension)

	if err != nil {
		return err
	}

	*o = DeployedExtension(varDeployedExtension)

	return err
}

type NullableDeployedExtension struct {
	value *DeployedExtension
	isSet bool
}

func (v NullableDeployedExtension) Get() *DeployedExtension {
	return v.value
}

func (v *NullableDeployedExtension) Set(val *DeployedExtension) {
	v.value = val
	v.isSet = true
}

func (v NullableDeployedExtension) IsSet() bool {
	return v.isSet
}

func (v *NullableDeployedExtension) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeployedExtension(val *DeployedExtension) *NullableDeployedExtension {
	return &NullableDeployedExtension{value: val, isSet: true}
}

func (v NullableDeployedExtension) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeployedExtension) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


