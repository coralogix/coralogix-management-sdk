/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_deployment_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FailedItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FailedItem{}

// FailedItem struct for FailedItem
type FailedItem struct {
	ItemId string `json:"itemId"`
	Reason string `json:"reason"`
	RemoteId string `json:"remoteId"`
}

type _FailedItem FailedItem

// NewFailedItem instantiates a new FailedItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailedItem(itemId string, reason string, remoteId string) *FailedItem {
	this := FailedItem{}
	this.ItemId = itemId
	this.Reason = reason
	this.RemoteId = remoteId
	return &this
}

// NewFailedItemWithDefaults instantiates a new FailedItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailedItemWithDefaults() *FailedItem {
	this := FailedItem{}
	return &this
}

// GetItemId returns the ItemId field value
func (o *FailedItem) GetItemId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value
// and a boolean to check if the value has been set.
func (o *FailedItem) GetItemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemId, true
}

// SetItemId sets field value
func (o *FailedItem) SetItemId(v string) {
	o.ItemId = v
}

// GetReason returns the Reason field value
func (o *FailedItem) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *FailedItem) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *FailedItem) SetReason(v string) {
	o.Reason = v
}

// GetRemoteId returns the RemoteId field value
func (o *FailedItem) GetRemoteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteId
}

// GetRemoteIdOk returns a tuple with the RemoteId field value
// and a boolean to check if the value has been set.
func (o *FailedItem) GetRemoteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteId, true
}

// SetRemoteId sets field value
func (o *FailedItem) SetRemoteId(v string) {
	o.RemoteId = v
}

func (o FailedItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FailedItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["itemId"] = o.ItemId
	toSerialize["reason"] = o.Reason
	toSerialize["remoteId"] = o.RemoteId
	return toSerialize, nil
}

func (o *FailedItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"itemId",
		"reason",
		"remoteId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFailedItem := _FailedItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFailedItem)

	if err != nil {
		return err
	}

	*o = FailedItem(varFailedItem)

	return err
}

type NullableFailedItem struct {
	value *FailedItem
	isSet bool
}

func (v NullableFailedItem) Get() *FailedItem {
	return v.value
}

func (v *NullableFailedItem) Set(val *FailedItem) {
	v.value = val
	v.isSet = true
}

func (v NullableFailedItem) IsSet() bool {
	return v.isSet
}

func (v *NullableFailedItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailedItem(val *FailedItem) *NullableFailedItem {
	return &NullableFailedItem{value: val, isSet: true}
}

func (v NullableFailedItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailedItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


