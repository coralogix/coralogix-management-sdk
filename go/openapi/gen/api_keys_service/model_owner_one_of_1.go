/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_keys_service

import (
	"encoding/json"
)

// checks if the OwnerOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OwnerOneOf1{}

// OwnerOneOf1 struct for OwnerOneOf1
type OwnerOneOf1 struct {
	TeamId *int64 `json:"teamId,omitempty"`
}

// NewOwnerOneOf1 instantiates a new OwnerOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOwnerOneOf1() *OwnerOneOf1 {
	this := OwnerOneOf1{}
	return &this
}

// NewOwnerOneOf1WithDefaults instantiates a new OwnerOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOwnerOneOf1WithDefaults() *OwnerOneOf1 {
	this := OwnerOneOf1{}
	return &this
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *OwnerOneOf1) GetTeamId() int64 {
	if o == nil || IsNil(o.TeamId) {
		var ret int64
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnerOneOf1) GetTeamIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TeamId) {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *OwnerOneOf1) HasTeamId() bool {
	if o != nil && !IsNil(o.TeamId) {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given int64 and assigns it to the TeamId field.
func (o *OwnerOneOf1) SetTeamId(v int64) {
	o.TeamId = &v
}

func (o OwnerOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OwnerOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TeamId) {
		toSerialize["teamId"] = o.TeamId
	}
	return toSerialize, nil
}

type NullableOwnerOneOf1 struct {
	value *OwnerOneOf1
	isSet bool
}

func (v NullableOwnerOneOf1) Get() *OwnerOneOf1 {
	return v.value
}

func (v *NullableOwnerOneOf1) Set(val *OwnerOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableOwnerOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableOwnerOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOwnerOneOf1(val *OwnerOneOf1) *NullableOwnerOneOf1 {
	return &NullableOwnerOneOf1{value: val, isSet: true}
}

func (v NullableOwnerOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOwnerOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


