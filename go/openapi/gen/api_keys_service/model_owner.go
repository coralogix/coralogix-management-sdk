/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_keys_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Owner - struct for Owner
type Owner struct {
	OwnerOrganisationId *OwnerOrganisationId
	OwnerTeamId *OwnerTeamId
	OwnerUserId *OwnerUserId
}

// OwnerOrganisationIdAsOwner is a convenience function that returns OwnerOrganisationId wrapped in Owner
func OwnerOrganisationIdAsOwner(v *OwnerOrganisationId) Owner {
	return Owner{
		OwnerOrganisationId: v,
	}
}

// OwnerTeamIdAsOwner is a convenience function that returns OwnerTeamId wrapped in Owner
func OwnerTeamIdAsOwner(v *OwnerTeamId) Owner {
	return Owner{
		OwnerTeamId: v,
	}
}

// OwnerUserIdAsOwner is a convenience function that returns OwnerUserId wrapped in Owner
func OwnerUserIdAsOwner(v *OwnerUserId) Owner {
	return Owner{
		OwnerUserId: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Owner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into OwnerOrganisationId
	err = newStrictDecoder(data).Decode(&dst.OwnerOrganisationId)
	if err == nil {
		jsonOwnerOrganisationId, _ := json.Marshal(dst.OwnerOrganisationId)
		if string(jsonOwnerOrganisationId) == "{}" { // empty struct
			dst.OwnerOrganisationId = nil
		} else {
			if err = validator.Validate(dst.OwnerOrganisationId); err != nil {
				dst.OwnerOrganisationId = nil
			} else {
				match++
			}
		}
	} else {
		dst.OwnerOrganisationId = nil
	}

	// try to unmarshal data into OwnerTeamId
	err = newStrictDecoder(data).Decode(&dst.OwnerTeamId)
	if err == nil {
		jsonOwnerTeamId, _ := json.Marshal(dst.OwnerTeamId)
		if string(jsonOwnerTeamId) == "{}" { // empty struct
			dst.OwnerTeamId = nil
		} else {
			if err = validator.Validate(dst.OwnerTeamId); err != nil {
				dst.OwnerTeamId = nil
			} else {
				match++
			}
		}
	} else {
		dst.OwnerTeamId = nil
	}

	// try to unmarshal data into OwnerUserId
	err = newStrictDecoder(data).Decode(&dst.OwnerUserId)
	if err == nil {
		jsonOwnerUserId, _ := json.Marshal(dst.OwnerUserId)
		if string(jsonOwnerUserId) == "{}" { // empty struct
			dst.OwnerUserId = nil
		} else {
			if err = validator.Validate(dst.OwnerUserId); err != nil {
				dst.OwnerUserId = nil
			} else {
				match++
			}
		}
	} else {
		dst.OwnerUserId = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.OwnerOrganisationId = nil
		dst.OwnerTeamId = nil
		dst.OwnerUserId = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Owner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Owner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Owner) MarshalJSON() ([]byte, error) {
	if src.OwnerOrganisationId != nil {
		return json.Marshal(&src.OwnerOrganisationId)
	}

	if src.OwnerTeamId != nil {
		return json.Marshal(&src.OwnerTeamId)
	}

	if src.OwnerUserId != nil {
		return json.Marshal(&src.OwnerUserId)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Owner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.OwnerOrganisationId != nil {
		return obj.OwnerOrganisationId
	}

	if obj.OwnerTeamId != nil {
		return obj.OwnerTeamId
	}

	if obj.OwnerUserId != nil {
		return obj.OwnerUserId
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Owner) GetActualInstanceValue() (interface{}) {
	if obj.OwnerOrganisationId != nil {
		return *obj.OwnerOrganisationId
	}

	if obj.OwnerTeamId != nil {
		return *obj.OwnerTeamId
	}

	if obj.OwnerUserId != nil {
		return *obj.OwnerUserId
	}

	// all schemas are nil
	return nil
}

type NullableOwner struct {
	value *Owner
	isSet bool
}

func (v NullableOwner) Get() *Owner {
	return v.value
}

func (v *NullableOwner) Set(val *Owner) {
	v.value = val
	v.isSet = true
}

func (v NullableOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOwner(val *Owner) *NullableOwner {
	return &NullableOwner{value: val, isSet: true}
}

func (v NullableOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


