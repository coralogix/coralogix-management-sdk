/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_keys_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Owner - struct for Owner
type Owner struct {
	OwnerOneOf *OwnerOneOf
	OwnerOneOf1 *OwnerOneOf1
	OwnerOneOf2 *OwnerOneOf2
}

// OwnerOneOfAsOwner is a convenience function that returns OwnerOneOf wrapped in Owner
func OwnerOneOfAsOwner(v *OwnerOneOf) Owner {
	return Owner{
		OwnerOneOf: v,
	}
}

// OwnerOneOf1AsOwner is a convenience function that returns OwnerOneOf1 wrapped in Owner
func OwnerOneOf1AsOwner(v *OwnerOneOf1) Owner {
	return Owner{
		OwnerOneOf1: v,
	}
}

// OwnerOneOf2AsOwner is a convenience function that returns OwnerOneOf2 wrapped in Owner
func OwnerOneOf2AsOwner(v *OwnerOneOf2) Owner {
	return Owner{
		OwnerOneOf2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Owner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into OwnerOneOf
	err = newStrictDecoder(data).Decode(&dst.OwnerOneOf)
	if err == nil {
		jsonOwnerOneOf, _ := json.Marshal(dst.OwnerOneOf)
		if string(jsonOwnerOneOf) == "{}" { // empty struct
			dst.OwnerOneOf = nil
		} else {
			if err = validator.Validate(dst.OwnerOneOf); err != nil {
				dst.OwnerOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.OwnerOneOf = nil
	}

	// try to unmarshal data into OwnerOneOf1
	err = newStrictDecoder(data).Decode(&dst.OwnerOneOf1)
	if err == nil {
		jsonOwnerOneOf1, _ := json.Marshal(dst.OwnerOneOf1)
		if string(jsonOwnerOneOf1) == "{}" { // empty struct
			dst.OwnerOneOf1 = nil
		} else {
			if err = validator.Validate(dst.OwnerOneOf1); err != nil {
				dst.OwnerOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.OwnerOneOf1 = nil
	}

	// try to unmarshal data into OwnerOneOf2
	err = newStrictDecoder(data).Decode(&dst.OwnerOneOf2)
	if err == nil {
		jsonOwnerOneOf2, _ := json.Marshal(dst.OwnerOneOf2)
		if string(jsonOwnerOneOf2) == "{}" { // empty struct
			dst.OwnerOneOf2 = nil
		} else {
			if err = validator.Validate(dst.OwnerOneOf2); err != nil {
				dst.OwnerOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.OwnerOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.OwnerOneOf = nil
		dst.OwnerOneOf1 = nil
		dst.OwnerOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Owner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Owner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Owner) MarshalJSON() ([]byte, error) {
	if src.OwnerOneOf != nil {
		return json.Marshal(&src.OwnerOneOf)
	}

	if src.OwnerOneOf1 != nil {
		return json.Marshal(&src.OwnerOneOf1)
	}

	if src.OwnerOneOf2 != nil {
		return json.Marshal(&src.OwnerOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Owner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.OwnerOneOf != nil {
		return obj.OwnerOneOf
	}

	if obj.OwnerOneOf1 != nil {
		return obj.OwnerOneOf1
	}

	if obj.OwnerOneOf2 != nil {
		return obj.OwnerOneOf2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Owner) GetActualInstanceValue() (interface{}) {
	if obj.OwnerOneOf != nil {
		return *obj.OwnerOneOf
	}

	if obj.OwnerOneOf1 != nil {
		return *obj.OwnerOneOf1
	}

	if obj.OwnerOneOf2 != nil {
		return *obj.OwnerOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableOwner struct {
	value *Owner
	isSet bool
}

func (v NullableOwner) Get() *Owner {
	return v.value
}

func (v *NullableOwner) Set(val *Owner) {
	v.value = val
	v.isSet = true
}

func (v NullableOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOwner(val *Owner) *NullableOwner {
	return &NullableOwner{value: val, isSet: true}
}

func (v NullableOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


