/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_keys_service

import (
	"encoding/json"
)

// checks if the OwnerOrganisationId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OwnerOrganisationId{}

// OwnerOrganisationId struct for OwnerOrganisationId
type OwnerOrganisationId struct {
	OrganisationId *string `json:"organisationId,omitempty"`
}

// NewOwnerOrganisationId instantiates a new OwnerOrganisationId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOwnerOrganisationId() *OwnerOrganisationId {
	this := OwnerOrganisationId{}
	return &this
}

// NewOwnerOrganisationIdWithDefaults instantiates a new OwnerOrganisationId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOwnerOrganisationIdWithDefaults() *OwnerOrganisationId {
	this := OwnerOrganisationId{}
	return &this
}

// GetOrganisationId returns the OrganisationId field value if set, zero value otherwise.
func (o *OwnerOrganisationId) GetOrganisationId() string {
	if o == nil || IsNil(o.OrganisationId) {
		var ret string
		return ret
	}
	return *o.OrganisationId
}

// GetOrganisationIdOk returns a tuple with the OrganisationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnerOrganisationId) GetOrganisationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganisationId) {
		return nil, false
	}
	return o.OrganisationId, true
}

// HasOrganisationId returns a boolean if a field has been set.
func (o *OwnerOrganisationId) HasOrganisationId() bool {
	if o != nil && !IsNil(o.OrganisationId) {
		return true
	}

	return false
}

// SetOrganisationId gets a reference to the given string and assigns it to the OrganisationId field.
func (o *OwnerOrganisationId) SetOrganisationId(v string) {
	o.OrganisationId = &v
}

func (o OwnerOrganisationId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OwnerOrganisationId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OrganisationId) {
		toSerialize["organisationId"] = o.OrganisationId
	}
	return toSerialize, nil
}

type NullableOwnerOrganisationId struct {
	value *OwnerOrganisationId
	isSet bool
}

func (v NullableOwnerOrganisationId) Get() *OwnerOrganisationId {
	return v.value
}

func (v *NullableOwnerOrganisationId) Set(val *OwnerOrganisationId) {
	v.value = val
	v.isSet = true
}

func (v NullableOwnerOrganisationId) IsSet() bool {
	return v.isSet
}

func (v *NullableOwnerOrganisationId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOwnerOrganisationId(val *OwnerOrganisationId) *NullableOwnerOrganisationId {
	return &NullableOwnerOrganisationId{value: val, isSet: true}
}

func (v NullableOwnerOrganisationId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOwnerOrganisationId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


