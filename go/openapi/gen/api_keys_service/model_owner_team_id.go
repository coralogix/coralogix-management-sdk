/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_keys_service

import (
	"encoding/json"
)

// checks if the OwnerTeamId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OwnerTeamId{}

// OwnerTeamId struct for OwnerTeamId
type OwnerTeamId struct {
	TeamId *int64 `json:"teamId,omitempty"`
}

// NewOwnerTeamId instantiates a new OwnerTeamId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOwnerTeamId() *OwnerTeamId {
	this := OwnerTeamId{}
	return &this
}

// NewOwnerTeamIdWithDefaults instantiates a new OwnerTeamId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOwnerTeamIdWithDefaults() *OwnerTeamId {
	this := OwnerTeamId{}
	return &this
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *OwnerTeamId) GetTeamId() int64 {
	if o == nil || IsNil(o.TeamId) {
		var ret int64
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnerTeamId) GetTeamIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TeamId) {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *OwnerTeamId) HasTeamId() bool {
	if o != nil && !IsNil(o.TeamId) {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given int64 and assigns it to the TeamId field.
func (o *OwnerTeamId) SetTeamId(v int64) {
	o.TeamId = &v
}

func (o OwnerTeamId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OwnerTeamId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TeamId) {
		toSerialize["teamId"] = o.TeamId
	}
	return toSerialize, nil
}

type NullableOwnerTeamId struct {
	value *OwnerTeamId
	isSet bool
}

func (v NullableOwnerTeamId) Get() *OwnerTeamId {
	return v.value
}

func (v *NullableOwnerTeamId) Set(val *OwnerTeamId) {
	v.value = val
	v.isSet = true
}

func (v NullableOwnerTeamId) IsSet() bool {
	return v.isSet
}

func (v *NullableOwnerTeamId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOwnerTeamId(val *OwnerTeamId) *NullableOwnerTeamId {
	return &NullableOwnerTeamId{value: val, isSet: true}
}

func (v NullableOwnerTeamId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOwnerTeamId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


