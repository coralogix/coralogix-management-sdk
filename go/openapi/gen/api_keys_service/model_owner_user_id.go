/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_keys_service

import (
	"encoding/json"
)

// checks if the OwnerUserId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OwnerUserId{}

// OwnerUserId struct for OwnerUserId
type OwnerUserId struct {
	UserId *string `json:"userId,omitempty"`
}

// NewOwnerUserId instantiates a new OwnerUserId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOwnerUserId() *OwnerUserId {
	this := OwnerUserId{}
	return &this
}

// NewOwnerUserIdWithDefaults instantiates a new OwnerUserId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOwnerUserIdWithDefaults() *OwnerUserId {
	this := OwnerUserId{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *OwnerUserId) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnerUserId) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *OwnerUserId) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *OwnerUserId) SetUserId(v string) {
	o.UserId = &v
}

func (o OwnerUserId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OwnerUserId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	return toSerialize, nil
}

type NullableOwnerUserId struct {
	value *OwnerUserId
	isSet bool
}

func (v NullableOwnerUserId) Get() *OwnerUserId {
	return v.value
}

func (v *NullableOwnerUserId) Set(val *OwnerUserId) {
	v.value = val
	v.isSet = true
}

func (v NullableOwnerUserId) IsSet() bool {
	return v.isSet
}

func (v *NullableOwnerUserId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOwnerUserId(val *OwnerUserId) *NullableOwnerUserId {
	return &NullableOwnerUserId{value: val, isSet: true}
}

func (v NullableOwnerUserId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOwnerUserId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


