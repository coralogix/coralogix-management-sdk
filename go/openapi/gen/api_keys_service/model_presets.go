/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_keys_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Presets type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Presets{}

// Presets This data structure represents a set of permissions presets on an API key.
type Presets struct {
	Presets []string `json:"presets"`
}

type _Presets Presets

// NewPresets instantiates a new Presets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPresets(presets []string) *Presets {
	this := Presets{}
	this.Presets = presets
	return &this
}

// NewPresetsWithDefaults instantiates a new Presets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPresetsWithDefaults() *Presets {
	this := Presets{}
	return &this
}

// GetPresets returns the Presets field value
func (o *Presets) GetPresets() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Presets
}

// GetPresetsOk returns a tuple with the Presets field value
// and a boolean to check if the value has been set.
func (o *Presets) GetPresetsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Presets, true
}

// SetPresets sets field value
func (o *Presets) SetPresets(v []string) {
	o.Presets = v
}

func (o Presets) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Presets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["presets"] = o.Presets
	return toSerialize, nil
}

func (o *Presets) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"presets",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPresets := _Presets{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPresets)

	if err != nil {
		return err
	}

	*o = Presets(varPresets)

	return err
}

type NullablePresets struct {
	value *Presets
	isSet bool
}

func (v NullablePresets) Get() *Presets {
	return v.value
}

func (v *NullablePresets) Set(val *Presets) {
	v.value = val
	v.isSet = true
}

func (v NullablePresets) IsSet() bool {
	return v.isSet
}

func (v *NullablePresets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePresets(val *Presets) *NullablePresets {
	return &NullablePresets{value: val, isSet: true}
}

func (v NullablePresets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePresets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


