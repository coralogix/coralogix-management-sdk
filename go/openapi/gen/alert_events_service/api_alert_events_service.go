/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_events_service

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// AlertEventsServiceAPIService AlertEventsServiceAPI service
type AlertEventsServiceAPIService service

type ApiAlertEventServiceGetAlertEventRequest struct {
	ctx context.Context
	ApiService *AlertEventsServiceAPIService
	id string
	orderBys *[]AlertEventServiceGetAlertEventsStatsOrderBysParameterInner
	pagination *AlertEventServiceGetAlertEventPaginationParameter
}

func (r ApiAlertEventServiceGetAlertEventRequest) OrderBys(orderBys []AlertEventServiceGetAlertEventsStatsOrderBysParameterInner) ApiAlertEventServiceGetAlertEventRequest {
	r.orderBys = &orderBys
	return r
}

func (r ApiAlertEventServiceGetAlertEventRequest) Pagination(pagination AlertEventServiceGetAlertEventPaginationParameter) ApiAlertEventServiceGetAlertEventRequest {
	r.pagination = &pagination
	return r
}

func (r ApiAlertEventServiceGetAlertEventRequest) Execute() (*GetAlertEventResponse, *http.Response, error) {
	return r.ApiService.AlertEventServiceGetAlertEventExecute(r)
}

/*
AlertEventServiceGetAlertEvent Get alert event by ID

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAlertEventServiceGetAlertEventRequest
*/
func (a *AlertEventsServiceAPIService) AlertEventServiceGetAlertEvent(ctx context.Context, id string) ApiAlertEventServiceGetAlertEventRequest {
	return ApiAlertEventServiceGetAlertEventRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetAlertEventResponse
func (a *AlertEventsServiceAPIService) AlertEventServiceGetAlertEventExecute(r ApiAlertEventServiceGetAlertEventRequest) (*GetAlertEventResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAlertEventResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertEventsServiceAPIService.AlertEventServiceGetAlertEvent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alert-event/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.orderBys != nil {
		t := *r.orderBys
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "order_bys", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "order_bys", t, "form", "multi")
		}
	}
	if r.pagination != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagination", r.pagination, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlertEventServiceGetAlertEventsStatsRequest struct {
	ctx context.Context
	ApiService *AlertEventsServiceAPIService
	ids *[]string
	orderBys *[]AlertEventServiceGetAlertEventsStatsOrderBysParameterInner
}

func (r ApiAlertEventServiceGetAlertEventsStatsRequest) Ids(ids []string) ApiAlertEventServiceGetAlertEventsStatsRequest {
	r.ids = &ids
	return r
}

func (r ApiAlertEventServiceGetAlertEventsStatsRequest) OrderBys(orderBys []AlertEventServiceGetAlertEventsStatsOrderBysParameterInner) ApiAlertEventServiceGetAlertEventsStatsRequest {
	r.orderBys = &orderBys
	return r
}

func (r ApiAlertEventServiceGetAlertEventsStatsRequest) Execute() (*GetAlertEventStatsResponse, *http.Response, error) {
	return r.ApiService.AlertEventServiceGetAlertEventsStatsExecute(r)
}

/*
AlertEventServiceGetAlertEventsStats Get alert events statistics

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAlertEventServiceGetAlertEventsStatsRequest
*/
func (a *AlertEventsServiceAPIService) AlertEventServiceGetAlertEventsStats(ctx context.Context) ApiAlertEventServiceGetAlertEventsStatsRequest {
	return ApiAlertEventServiceGetAlertEventsStatsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAlertEventStatsResponse
func (a *AlertEventsServiceAPIService) AlertEventServiceGetAlertEventsStatsExecute(r ApiAlertEventServiceGetAlertEventsStatsRequest) (*GetAlertEventStatsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAlertEventStatsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertEventsServiceAPIService.AlertEventServiceGetAlertEventsStats")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alert-event-stats"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ids != nil {
		t := *r.ids
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ids", t, "form", "multi")
		}
	}
	if r.orderBys != nil {
		t := *r.orderBys
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "order_bys", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "order_bys", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
