/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_events_service

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AlertEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertEvent{}

// AlertEvent struct for AlertEvent
type AlertEvent struct {
	ActivityAnalysis ActivityAnalysis `json:"activityAnalysis"`
	AlertId string `json:"alertId"`
	GroupLabels map[string]string `json:"groupLabels"`
	IncidentCorrelationKey string `json:"incidentCorrelationKey"`
	Payload map[string]interface{} `json:"payload"`
	PayloadType string `json:"payloadType"`
	PermutationId string `json:"permutationId"`
	PermutationLabels map[string]string `json:"permutationLabels"`
	PreGroupingEventId string `json:"preGroupingEventId"`
	Status AlertStatus `json:"status"`
	Timestamp time.Time `json:"timestamp"`
}

type _AlertEvent AlertEvent

// NewAlertEvent instantiates a new AlertEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertEvent(activityAnalysis ActivityAnalysis, alertId string, groupLabels map[string]string, incidentCorrelationKey string, payload map[string]interface{}, payloadType string, permutationId string, permutationLabels map[string]string, preGroupingEventId string, status AlertStatus, timestamp time.Time) *AlertEvent {
	this := AlertEvent{}
	this.ActivityAnalysis = activityAnalysis
	this.AlertId = alertId
	this.GroupLabels = groupLabels
	this.IncidentCorrelationKey = incidentCorrelationKey
	this.Payload = payload
	this.PayloadType = payloadType
	this.PermutationId = permutationId
	this.PermutationLabels = permutationLabels
	this.PreGroupingEventId = preGroupingEventId
	this.Status = status
	this.Timestamp = timestamp
	return &this
}

// NewAlertEventWithDefaults instantiates a new AlertEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertEventWithDefaults() *AlertEvent {
	this := AlertEvent{}
	return &this
}

// GetActivityAnalysis returns the ActivityAnalysis field value
func (o *AlertEvent) GetActivityAnalysis() ActivityAnalysis {
	if o == nil {
		var ret ActivityAnalysis
		return ret
	}

	return o.ActivityAnalysis
}

// GetActivityAnalysisOk returns a tuple with the ActivityAnalysis field value
// and a boolean to check if the value has been set.
func (o *AlertEvent) GetActivityAnalysisOk() (*ActivityAnalysis, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActivityAnalysis, true
}

// SetActivityAnalysis sets field value
func (o *AlertEvent) SetActivityAnalysis(v ActivityAnalysis) {
	o.ActivityAnalysis = v
}

// GetAlertId returns the AlertId field value
func (o *AlertEvent) GetAlertId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AlertId
}

// GetAlertIdOk returns a tuple with the AlertId field value
// and a boolean to check if the value has been set.
func (o *AlertEvent) GetAlertIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlertId, true
}

// SetAlertId sets field value
func (o *AlertEvent) SetAlertId(v string) {
	o.AlertId = v
}

// GetGroupLabels returns the GroupLabels field value
func (o *AlertEvent) GetGroupLabels() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.GroupLabels
}

// GetGroupLabelsOk returns a tuple with the GroupLabels field value
// and a boolean to check if the value has been set.
func (o *AlertEvent) GetGroupLabelsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupLabels, true
}

// SetGroupLabels sets field value
func (o *AlertEvent) SetGroupLabels(v map[string]string) {
	o.GroupLabels = v
}

// GetIncidentCorrelationKey returns the IncidentCorrelationKey field value
func (o *AlertEvent) GetIncidentCorrelationKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IncidentCorrelationKey
}

// GetIncidentCorrelationKeyOk returns a tuple with the IncidentCorrelationKey field value
// and a boolean to check if the value has been set.
func (o *AlertEvent) GetIncidentCorrelationKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncidentCorrelationKey, true
}

// SetIncidentCorrelationKey sets field value
func (o *AlertEvent) SetIncidentCorrelationKey(v string) {
	o.IncidentCorrelationKey = v
}

// GetPayload returns the Payload field value
func (o *AlertEvent) GetPayload() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *AlertEvent) GetPayloadOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Payload, true
}

// SetPayload sets field value
func (o *AlertEvent) SetPayload(v map[string]interface{}) {
	o.Payload = v
}

// GetPayloadType returns the PayloadType field value
func (o *AlertEvent) GetPayloadType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PayloadType
}

// GetPayloadTypeOk returns a tuple with the PayloadType field value
// and a boolean to check if the value has been set.
func (o *AlertEvent) GetPayloadTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayloadType, true
}

// SetPayloadType sets field value
func (o *AlertEvent) SetPayloadType(v string) {
	o.PayloadType = v
}

// GetPermutationId returns the PermutationId field value
func (o *AlertEvent) GetPermutationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PermutationId
}

// GetPermutationIdOk returns a tuple with the PermutationId field value
// and a boolean to check if the value has been set.
func (o *AlertEvent) GetPermutationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PermutationId, true
}

// SetPermutationId sets field value
func (o *AlertEvent) SetPermutationId(v string) {
	o.PermutationId = v
}

// GetPermutationLabels returns the PermutationLabels field value
func (o *AlertEvent) GetPermutationLabels() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.PermutationLabels
}

// GetPermutationLabelsOk returns a tuple with the PermutationLabels field value
// and a boolean to check if the value has been set.
func (o *AlertEvent) GetPermutationLabelsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PermutationLabels, true
}

// SetPermutationLabels sets field value
func (o *AlertEvent) SetPermutationLabels(v map[string]string) {
	o.PermutationLabels = v
}

// GetPreGroupingEventId returns the PreGroupingEventId field value
func (o *AlertEvent) GetPreGroupingEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PreGroupingEventId
}

// GetPreGroupingEventIdOk returns a tuple with the PreGroupingEventId field value
// and a boolean to check if the value has been set.
func (o *AlertEvent) GetPreGroupingEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreGroupingEventId, true
}

// SetPreGroupingEventId sets field value
func (o *AlertEvent) SetPreGroupingEventId(v string) {
	o.PreGroupingEventId = v
}

// GetStatus returns the Status field value
func (o *AlertEvent) GetStatus() AlertStatus {
	if o == nil {
		var ret AlertStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *AlertEvent) GetStatusOk() (*AlertStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *AlertEvent) SetStatus(v AlertStatus) {
	o.Status = v
}

// GetTimestamp returns the Timestamp field value
func (o *AlertEvent) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *AlertEvent) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *AlertEvent) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

func (o AlertEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["activityAnalysis"] = o.ActivityAnalysis
	toSerialize["alertId"] = o.AlertId
	toSerialize["groupLabels"] = o.GroupLabels
	toSerialize["incidentCorrelationKey"] = o.IncidentCorrelationKey
	toSerialize["payload"] = o.Payload
	toSerialize["payloadType"] = o.PayloadType
	toSerialize["permutationId"] = o.PermutationId
	toSerialize["permutationLabels"] = o.PermutationLabels
	toSerialize["preGroupingEventId"] = o.PreGroupingEventId
	toSerialize["status"] = o.Status
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

func (o *AlertEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"activityAnalysis",
		"alertId",
		"groupLabels",
		"incidentCorrelationKey",
		"payload",
		"payloadType",
		"permutationId",
		"permutationLabels",
		"preGroupingEventId",
		"status",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAlertEvent := _AlertEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAlertEvent)

	if err != nil {
		return err
	}

	*o = AlertEvent(varAlertEvent)

	return err
}

type NullableAlertEvent struct {
	value *AlertEvent
	isSet bool
}

func (v NullableAlertEvent) Get() *AlertEvent {
	return v.value
}

func (v *NullableAlertEvent) Set(val *AlertEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertEvent(val *AlertEvent) *NullableAlertEvent {
	return &NullableAlertEvent{value: val, isSet: true}
}

func (v NullableAlertEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


