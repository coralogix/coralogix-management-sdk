openapi: 3.0.0
info:
  title: ""
  version: 1.0.0
servers:
- url: /
paths:
  /v3/alert-event-stats:
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: AlertEventService_GetAlertEventsStats
      parameters:
      - explode: true
        in: query
        name: ids
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: order_bys
        required: false
        schema:
          items:
            $ref: "#/components/schemas/AlertEventService_GetAlertEventsStats_order_bys_parameter_inner"
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAlertEventStatsResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get alert events statistics
      tags:
      - Alert events service
      x-coralogixPermissions:
      - alerts:ReadConfig
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v3/alert-event-stats?ids=SOME_ARRAY_VALUE&order_bys=SOME_ARRAY_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v3/alert-event-stats"

          querystring = {"ids":"SOME_ARRAY_VALUE","order_bys":"SOME_ARRAY_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/v3/alert-event-stats?ids=SOME_ARRAY_VALUE&order_bys=SOME_ARRAY_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
  /v3/alert-event/{id}:
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: AlertEventService_GetAlertEvent
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order_bys
        required: false
        schema:
          items:
            $ref: "#/components/schemas/AlertEventService_GetAlertEventsStats_order_bys_parameter_inner"
          type: array
        style: form
      - explode: true
        in: query
        name: pagination
        required: false
        schema:
          $ref: "#/components/schemas/AlertEventService_GetAlertEvent_pagination_parameter"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAlertEventResponse"
          description: ""
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized request
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get alert event by ID
      tags:
      - Alert events service
      x-coralogixPermissions:
      - alerts:ReadConfig
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v3/alert-event/%7Bid%7D?order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v3/alert-event/%7Bid%7D"

          querystring = {"order_bys":"SOME_ARRAY_VALUE","pagination":"SOME_OBJECT_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/v3/alert-event/%7Bid%7D?order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
components:
  schemas:
    ActivityAnalysis:
      description: "Configuration for alert activity analysis, containing rules and\
        \ status."
      example:
        rules:
        - rules
        - rules
        status: ACTIVITY_ANALYSIS_STATUS_ACTIVATE_OR_UNSPECIFIED
      externalDocs:
        url: ""
      properties:
        rules:
          items:
            type: string
          type: array
        status:
          $ref: "#/components/schemas/ActivityAnalysisStatus"
      required:
      - rules
      - status
      title: Activity analysis data structure
      type: object
    ActivityAnalysisStats:
      example:
        isMutedCount: 0
        rules:
        - rules
        - rules
      externalDocs:
        url: ""
      properties:
        isMutedCount:
          format: int64
          type: integer
        rules:
          items:
            type: string
          type: array
      title: Event activity analysis statistics
      type: object
    ActivityAnalysisStatus:
      enum:
      - ACTIVITY_ANALYSIS_STATUS_ACTIVATE_OR_UNSPECIFIED
      - ACTIVITY_ANALYSIS_STATUS_MUTE
      type: string
    AlertEvent:
      additionalProperties: false
      example:
        preGroupingEventId: preGroupingEventId
        incidentCorrelationKey: incidentCorrelationKey
        groupLabels:
          key: groupLabels
        payloadType: payloadType
        payload: "{}"
        alertId: alertId
        activityAnalysis:
          rules:
          - rules
          - rules
          status: ACTIVITY_ANALYSIS_STATUS_ACTIVATE_OR_UNSPECIFIED
        permutationLabels:
          key: permutationLabels
        permutationId: permutationId
        status: ALERT_STATUS_RESOLVED_OR_UNSPECIFIED
        timestamp: 2000-01-23T04:56:07.000+00:00
      externalDocs:
        url: ""
      properties:
        activityAnalysis:
          $ref: "#/components/schemas/ActivityAnalysis"
        alertId:
          type: string
        groupLabels:
          additionalProperties:
            type: string
          type: object
        incidentCorrelationKey:
          type: string
        payload:
          type: object
        payloadType:
          type: string
        permutationId:
          type: string
        permutationLabels:
          additionalProperties:
            type: string
          type: object
        preGroupingEventId:
          type: string
        status:
          $ref: "#/components/schemas/AlertStatus"
        timestamp:
          format: date-time
          type: string
      required:
      - activityAnalysis
      - alertId
      - groupLabels
      - incidentCorrelationKey
      - payload
      - payloadType
      - permutationId
      - permutationLabels
      - preGroupingEventId
      - status
      - timestamp
      title: Alert event
      type: object
    AlertEventMultiplePermutation:
      properties:
        alertEventMultiplePermutation:
          items:
            $ref: "#/components/schemas/AlertEvent"
          type: array
      type: object
    AlertStatus:
      enum:
      - ALERT_STATUS_RESOLVED_OR_UNSPECIFIED
      - ALERT_STATUS_TRIGGERED
      type: string
    EventStats:
      example:
        resolvedPermutationsSamples:
        - permutationLabels:
            key: permutationLabels
        - permutationLabels:
            key: permutationLabels
        activityAnalysisStats:
          isMutedCount: 0
          rules:
          - rules
          - rules
        triggeredCount: 5
        count: 6
        triggeredPermutationsSamples:
        - permutationLabels:
            key: permutationLabels
        - permutationLabels:
            key: permutationLabels
        resolvedCount: 1
      externalDocs:
        url: ""
      properties:
        activityAnalysisStats:
          $ref: "#/components/schemas/ActivityAnalysisStats"
        count:
          format: int64
          type: integer
        resolvedCount:
          format: int64
          type: integer
        resolvedPermutationsSamples:
          items:
            $ref: "#/components/schemas/Permutation"
          type: array
        triggeredCount:
          format: int64
          type: integer
        triggeredPermutationsSamples:
          items:
            $ref: "#/components/schemas/Permutation"
          type: array
      title: Alert event statistics data structure
      type: object
    FieldGroup:
      properties:
        name:
          type: string
        value:
          type: string
      type: object
    FilterPathAndValues:
      oneOf:
      - $ref: "#/components/schemas/FilterPathAndValues_1"
      - $ref: "#/components/schemas/FilterPathAndValues_2"
    Filters:
      description: This data structure represents a filter
      externalDocs:
        url: ""
      properties:
        operator:
          $ref: "#/components/schemas/v3.FilterOperator"
        pathAndValues:
          items:
            $ref: "#/components/schemas/FilterPathAndValues"
          type: array
      required:
      - pathAndValues
      title: Filters
      type: object
    GetAlertEventResponse:
      oneOf:
      - $ref: "#/components/schemas/Get_alert_event_response"
      - $ref: "#/components/schemas/Get_alert_event_response_1"
    GetAlertEventStatsResponse:
      example:
        eventsStats:
          key:
            resolvedPermutationsSamples:
            - permutationLabels:
                key: permutationLabels
            - permutationLabels:
                key: permutationLabels
            activityAnalysisStats:
              isMutedCount: 0
              rules:
              - rules
              - rules
            triggeredCount: 5
            count: 6
            triggeredPermutationsSamples:
            - permutationLabels:
                key: permutationLabels
            - permutationLabels:
                key: permutationLabels
            resolvedCount: 1
      externalDocs:
        url: ""
      properties:
        eventsStats:
          additionalProperties:
            $ref: "#/components/schemas/EventStats"
          type: object
      title: Get alert event statistics response
      type: object
    MultipleValues:
      properties:
        matcher:
          $ref: "#/components/schemas/events.v3.FilterMatcher"
        values:
          items:
            type: string
          type: array
      type: object
    Permutation:
      example:
        permutationLabels:
          key: permutationLabels
      externalDocs:
        url: ""
      properties:
        permutationLabels:
          additionalProperties:
            type: string
          type: object
      title: Permutation data structure
      type: object
    alerts.v3.PaginationResponse:
      example:
        totalSize: 0
        nextPageToken: nextPageToken
      properties:
        nextPageToken:
          type: string
        totalSize:
          format: int64
          type: integer
      type: object
    common.Group:
      properties:
        field:
          $ref: "#/components/schemas/FieldGroup"
        groups:
          items:
            $ref: "#/components/schemas/common.Group"
          type: array
        value:
          format: double
          type: number
      type: object
    events.v3.FilterMatcher:
      enum:
      - FILTER_MATCHER_TEXT_OR_UNSPECIFIED
      - FILTER_MATCHER_REGEXP
      type: string
    v3.FilterOperator:
      enum:
      - FILTER_OPERATOR_AND_OR_UNSPECIFIED
      - FILTER_OPERATOR_OR
      type: string
    AlertEventService_GetAlertEventsStats_order_bys_parameter_inner:
      properties:
        direction:
          enum:
          - ORDER_BY_ALERT_EVENT_DIRECTION_UNSPECIFIED
          - ORDER_BY_ALERT_EVENT_DIRECTION_ASC
          - ORDER_BY_ALERT_EVENT_DIRECTION_DESC
          type: string
        fieldName:
          enum:
          - ORDER_BY_ALERT_EVENT_FIELDS_UNSPECIFIED
          - ORDER_BY_ALERT_EVENT_FIELDS_TIMESTAMP
          type: string
      type: object
    AlertEventService_GetAlertEvent_pagination_parameter:
      properties:
        pageSize:
          format: int64
          type: integer
        pageToken:
          type: string
      type: object
    FilterPathAndValues_1:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        multipleValues:
          $ref: "#/components/schemas/MultipleValues"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
    FilterPathAndValues_2:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        filters:
          $ref: "#/components/schemas/Filters"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
    Get_alert_event_response:
      additionalProperties: false
      example:
        pagination:
          totalSize: 0
          nextPageToken: nextPageToken
        singlePermutation:
          preGroupingEventId: preGroupingEventId
          incidentCorrelationKey: incidentCorrelationKey
          groupLabels:
            key: groupLabels
          payloadType: payloadType
          payload: "{}"
          alertId: alertId
          activityAnalysis:
            rules:
            - rules
            - rules
            status: ACTIVITY_ANALYSIS_STATUS_ACTIVATE_OR_UNSPECIFIED
          permutationLabels:
            key: permutationLabels
          permutationId: permutationId
          status: ALERT_STATUS_RESOLVED_OR_UNSPECIFIED
          timestamp: 2000-01-23T04:56:07.000+00:00
        id: id
      externalDocs:
        url: ""
      properties:
        id:
          type: string
        pagination:
          $ref: "#/components/schemas/alerts.v3.PaginationResponse"
        singlePermutation:
          $ref: "#/components/schemas/AlertEvent"
      title: Get alert event response
      type: object
    Get_alert_event_response_1:
      additionalProperties: false
      externalDocs:
        url: ""
      properties:
        id:
          type: string
        multiplePermutation:
          $ref: "#/components/schemas/AlertEventMultiplePermutation"
        pagination:
          $ref: "#/components/schemas/alerts.v3.PaginationResponse"
      title: Get alert event response
      type: object
  securitySchemes:
    apiKeyAuth:
      description: API key authentication
      in: header
      name: Authorization
      type: apiKey
