/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_events_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// GetAlertEventResponse - struct for GetAlertEventResponse
type GetAlertEventResponse struct {
	GetAlertEventResponseMultiplePermutation *GetAlertEventResponseMultiplePermutation
	GetAlertEventResponseSinglePermutation *GetAlertEventResponseSinglePermutation
}

// GetAlertEventResponseMultiplePermutationAsGetAlertEventResponse is a convenience function that returns GetAlertEventResponseMultiplePermutation wrapped in GetAlertEventResponse
func GetAlertEventResponseMultiplePermutationAsGetAlertEventResponse(v *GetAlertEventResponseMultiplePermutation) GetAlertEventResponse {
	return GetAlertEventResponse{
		GetAlertEventResponseMultiplePermutation: v,
	}
}

// GetAlertEventResponseSinglePermutationAsGetAlertEventResponse is a convenience function that returns GetAlertEventResponseSinglePermutation wrapped in GetAlertEventResponse
func GetAlertEventResponseSinglePermutationAsGetAlertEventResponse(v *GetAlertEventResponseSinglePermutation) GetAlertEventResponse {
	return GetAlertEventResponse{
		GetAlertEventResponseSinglePermutation: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetAlertEventResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetAlertEventResponseMultiplePermutation
	err = newStrictDecoder(data).Decode(&dst.GetAlertEventResponseMultiplePermutation)
	if err == nil {
		jsonGetAlertEventResponseMultiplePermutation, _ := json.Marshal(dst.GetAlertEventResponseMultiplePermutation)
		if string(jsonGetAlertEventResponseMultiplePermutation) == "{}" { // empty struct
			dst.GetAlertEventResponseMultiplePermutation = nil
		} else {
			if err = validator.Validate(dst.GetAlertEventResponseMultiplePermutation); err != nil {
				dst.GetAlertEventResponseMultiplePermutation = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetAlertEventResponseMultiplePermutation = nil
	}

	// try to unmarshal data into GetAlertEventResponseSinglePermutation
	err = newStrictDecoder(data).Decode(&dst.GetAlertEventResponseSinglePermutation)
	if err == nil {
		jsonGetAlertEventResponseSinglePermutation, _ := json.Marshal(dst.GetAlertEventResponseSinglePermutation)
		if string(jsonGetAlertEventResponseSinglePermutation) == "{}" { // empty struct
			dst.GetAlertEventResponseSinglePermutation = nil
		} else {
			if err = validator.Validate(dst.GetAlertEventResponseSinglePermutation); err != nil {
				dst.GetAlertEventResponseSinglePermutation = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetAlertEventResponseSinglePermutation = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetAlertEventResponseMultiplePermutation = nil
		dst.GetAlertEventResponseSinglePermutation = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetAlertEventResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetAlertEventResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetAlertEventResponse) MarshalJSON() ([]byte, error) {
	if src.GetAlertEventResponseMultiplePermutation != nil {
		return json.Marshal(&src.GetAlertEventResponseMultiplePermutation)
	}

	if src.GetAlertEventResponseSinglePermutation != nil {
		return json.Marshal(&src.GetAlertEventResponseSinglePermutation)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetAlertEventResponse) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GetAlertEventResponseMultiplePermutation != nil {
		return obj.GetAlertEventResponseMultiplePermutation
	}

	if obj.GetAlertEventResponseSinglePermutation != nil {
		return obj.GetAlertEventResponseSinglePermutation
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GetAlertEventResponse) GetActualInstanceValue() (interface{}) {
	if obj.GetAlertEventResponseMultiplePermutation != nil {
		return *obj.GetAlertEventResponseMultiplePermutation
	}

	if obj.GetAlertEventResponseSinglePermutation != nil {
		return *obj.GetAlertEventResponseSinglePermutation
	}

	// all schemas are nil
	return nil
}

type NullableGetAlertEventResponse struct {
	value *GetAlertEventResponse
	isSet bool
}

func (v NullableGetAlertEventResponse) Get() *GetAlertEventResponse {
	return v.value
}

func (v *NullableGetAlertEventResponse) Set(val *GetAlertEventResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAlertEventResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAlertEventResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAlertEventResponse(val *GetAlertEventResponse) *NullableGetAlertEventResponse {
	return &NullableGetAlertEventResponse{value: val, isSet: true}
}

func (v NullableGetAlertEventResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAlertEventResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


