/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_events_service

import (
	"encoding/json"
)

// checks if the EventStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventStats{}

// EventStats struct for EventStats
type EventStats struct {
	ActivityAnalysisStats *ActivityAnalysisStats `json:"activityAnalysisStats,omitempty"`
	Count *int64 `json:"count,omitempty"`
	ResolvedCount *int64 `json:"resolvedCount,omitempty"`
	ResolvedPermutationsSamples []Permutation `json:"resolvedPermutationsSamples,omitempty"`
	TriggeredCount *int64 `json:"triggeredCount,omitempty"`
	TriggeredPermutationsSamples []Permutation `json:"triggeredPermutationsSamples,omitempty"`
}

// NewEventStats instantiates a new EventStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventStats() *EventStats {
	this := EventStats{}
	return &this
}

// NewEventStatsWithDefaults instantiates a new EventStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventStatsWithDefaults() *EventStats {
	this := EventStats{}
	return &this
}

// GetActivityAnalysisStats returns the ActivityAnalysisStats field value if set, zero value otherwise.
func (o *EventStats) GetActivityAnalysisStats() ActivityAnalysisStats {
	if o == nil || IsNil(o.ActivityAnalysisStats) {
		var ret ActivityAnalysisStats
		return ret
	}
	return *o.ActivityAnalysisStats
}

// GetActivityAnalysisStatsOk returns a tuple with the ActivityAnalysisStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventStats) GetActivityAnalysisStatsOk() (*ActivityAnalysisStats, bool) {
	if o == nil || IsNil(o.ActivityAnalysisStats) {
		return nil, false
	}
	return o.ActivityAnalysisStats, true
}

// HasActivityAnalysisStats returns a boolean if a field has been set.
func (o *EventStats) HasActivityAnalysisStats() bool {
	if o != nil && !IsNil(o.ActivityAnalysisStats) {
		return true
	}

	return false
}

// SetActivityAnalysisStats gets a reference to the given ActivityAnalysisStats and assigns it to the ActivityAnalysisStats field.
func (o *EventStats) SetActivityAnalysisStats(v ActivityAnalysisStats) {
	o.ActivityAnalysisStats = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *EventStats) GetCount() int64 {
	if o == nil || IsNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventStats) GetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *EventStats) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *EventStats) SetCount(v int64) {
	o.Count = &v
}

// GetResolvedCount returns the ResolvedCount field value if set, zero value otherwise.
func (o *EventStats) GetResolvedCount() int64 {
	if o == nil || IsNil(o.ResolvedCount) {
		var ret int64
		return ret
	}
	return *o.ResolvedCount
}

// GetResolvedCountOk returns a tuple with the ResolvedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventStats) GetResolvedCountOk() (*int64, bool) {
	if o == nil || IsNil(o.ResolvedCount) {
		return nil, false
	}
	return o.ResolvedCount, true
}

// HasResolvedCount returns a boolean if a field has been set.
func (o *EventStats) HasResolvedCount() bool {
	if o != nil && !IsNil(o.ResolvedCount) {
		return true
	}

	return false
}

// SetResolvedCount gets a reference to the given int64 and assigns it to the ResolvedCount field.
func (o *EventStats) SetResolvedCount(v int64) {
	o.ResolvedCount = &v
}

// GetResolvedPermutationsSamples returns the ResolvedPermutationsSamples field value if set, zero value otherwise.
func (o *EventStats) GetResolvedPermutationsSamples() []Permutation {
	if o == nil || IsNil(o.ResolvedPermutationsSamples) {
		var ret []Permutation
		return ret
	}
	return o.ResolvedPermutationsSamples
}

// GetResolvedPermutationsSamplesOk returns a tuple with the ResolvedPermutationsSamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventStats) GetResolvedPermutationsSamplesOk() ([]Permutation, bool) {
	if o == nil || IsNil(o.ResolvedPermutationsSamples) {
		return nil, false
	}
	return o.ResolvedPermutationsSamples, true
}

// HasResolvedPermutationsSamples returns a boolean if a field has been set.
func (o *EventStats) HasResolvedPermutationsSamples() bool {
	if o != nil && !IsNil(o.ResolvedPermutationsSamples) {
		return true
	}

	return false
}

// SetResolvedPermutationsSamples gets a reference to the given []Permutation and assigns it to the ResolvedPermutationsSamples field.
func (o *EventStats) SetResolvedPermutationsSamples(v []Permutation) {
	o.ResolvedPermutationsSamples = v
}

// GetTriggeredCount returns the TriggeredCount field value if set, zero value otherwise.
func (o *EventStats) GetTriggeredCount() int64 {
	if o == nil || IsNil(o.TriggeredCount) {
		var ret int64
		return ret
	}
	return *o.TriggeredCount
}

// GetTriggeredCountOk returns a tuple with the TriggeredCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventStats) GetTriggeredCountOk() (*int64, bool) {
	if o == nil || IsNil(o.TriggeredCount) {
		return nil, false
	}
	return o.TriggeredCount, true
}

// HasTriggeredCount returns a boolean if a field has been set.
func (o *EventStats) HasTriggeredCount() bool {
	if o != nil && !IsNil(o.TriggeredCount) {
		return true
	}

	return false
}

// SetTriggeredCount gets a reference to the given int64 and assigns it to the TriggeredCount field.
func (o *EventStats) SetTriggeredCount(v int64) {
	o.TriggeredCount = &v
}

// GetTriggeredPermutationsSamples returns the TriggeredPermutationsSamples field value if set, zero value otherwise.
func (o *EventStats) GetTriggeredPermutationsSamples() []Permutation {
	if o == nil || IsNil(o.TriggeredPermutationsSamples) {
		var ret []Permutation
		return ret
	}
	return o.TriggeredPermutationsSamples
}

// GetTriggeredPermutationsSamplesOk returns a tuple with the TriggeredPermutationsSamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventStats) GetTriggeredPermutationsSamplesOk() ([]Permutation, bool) {
	if o == nil || IsNil(o.TriggeredPermutationsSamples) {
		return nil, false
	}
	return o.TriggeredPermutationsSamples, true
}

// HasTriggeredPermutationsSamples returns a boolean if a field has been set.
func (o *EventStats) HasTriggeredPermutationsSamples() bool {
	if o != nil && !IsNil(o.TriggeredPermutationsSamples) {
		return true
	}

	return false
}

// SetTriggeredPermutationsSamples gets a reference to the given []Permutation and assigns it to the TriggeredPermutationsSamples field.
func (o *EventStats) SetTriggeredPermutationsSamples(v []Permutation) {
	o.TriggeredPermutationsSamples = v
}

func (o EventStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActivityAnalysisStats) {
		toSerialize["activityAnalysisStats"] = o.ActivityAnalysisStats
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.ResolvedCount) {
		toSerialize["resolvedCount"] = o.ResolvedCount
	}
	if !IsNil(o.ResolvedPermutationsSamples) {
		toSerialize["resolvedPermutationsSamples"] = o.ResolvedPermutationsSamples
	}
	if !IsNil(o.TriggeredCount) {
		toSerialize["triggeredCount"] = o.TriggeredCount
	}
	if !IsNil(o.TriggeredPermutationsSamples) {
		toSerialize["triggeredPermutationsSamples"] = o.TriggeredPermutationsSamples
	}
	return toSerialize, nil
}

type NullableEventStats struct {
	value *EventStats
	isSet bool
}

func (v NullableEventStats) Get() *EventStats {
	return v.value
}

func (v *NullableEventStats) Set(val *EventStats) {
	v.value = val
	v.isSet = true
}

func (v NullableEventStats) IsSet() bool {
	return v.isSet
}

func (v *NullableEventStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventStats(val *EventStats) *NullableEventStats {
	return &NullableEventStats{value: val, isSet: true}
}

func (v NullableEventStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


