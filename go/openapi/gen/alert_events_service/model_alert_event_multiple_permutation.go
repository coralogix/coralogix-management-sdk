/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_events_service

import (
	"encoding/json"
)

// checks if the AlertEventMultiplePermutation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertEventMultiplePermutation{}

// AlertEventMultiplePermutation struct for AlertEventMultiplePermutation
type AlertEventMultiplePermutation struct {
	AlertEventMultiplePermutation []AlertEvent `json:"alertEventMultiplePermutation,omitempty"`
}

// NewAlertEventMultiplePermutation instantiates a new AlertEventMultiplePermutation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertEventMultiplePermutation() *AlertEventMultiplePermutation {
	this := AlertEventMultiplePermutation{}
	return &this
}

// NewAlertEventMultiplePermutationWithDefaults instantiates a new AlertEventMultiplePermutation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertEventMultiplePermutationWithDefaults() *AlertEventMultiplePermutation {
	this := AlertEventMultiplePermutation{}
	return &this
}

// GetAlertEventMultiplePermutation returns the AlertEventMultiplePermutation field value if set, zero value otherwise.
func (o *AlertEventMultiplePermutation) GetAlertEventMultiplePermutation() []AlertEvent {
	if o == nil || IsNil(o.AlertEventMultiplePermutation) {
		var ret []AlertEvent
		return ret
	}
	return o.AlertEventMultiplePermutation
}

// GetAlertEventMultiplePermutationOk returns a tuple with the AlertEventMultiplePermutation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertEventMultiplePermutation) GetAlertEventMultiplePermutationOk() ([]AlertEvent, bool) {
	if o == nil || IsNil(o.AlertEventMultiplePermutation) {
		return nil, false
	}
	return o.AlertEventMultiplePermutation, true
}

// HasAlertEventMultiplePermutation returns a boolean if a field has been set.
func (o *AlertEventMultiplePermutation) HasAlertEventMultiplePermutation() bool {
	if o != nil && !IsNil(o.AlertEventMultiplePermutation) {
		return true
	}

	return false
}

// SetAlertEventMultiplePermutation gets a reference to the given []AlertEvent and assigns it to the AlertEventMultiplePermutation field.
func (o *AlertEventMultiplePermutation) SetAlertEventMultiplePermutation(v []AlertEvent) {
	o.AlertEventMultiplePermutation = v
}

func (o AlertEventMultiplePermutation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertEventMultiplePermutation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AlertEventMultiplePermutation) {
		toSerialize["alertEventMultiplePermutation"] = o.AlertEventMultiplePermutation
	}
	return toSerialize, nil
}

type NullableAlertEventMultiplePermutation struct {
	value *AlertEventMultiplePermutation
	isSet bool
}

func (v NullableAlertEventMultiplePermutation) Get() *AlertEventMultiplePermutation {
	return v.value
}

func (v *NullableAlertEventMultiplePermutation) Set(val *AlertEventMultiplePermutation) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertEventMultiplePermutation) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertEventMultiplePermutation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertEventMultiplePermutation(val *AlertEventMultiplePermutation) *NullableAlertEventMultiplePermutation {
	return &NullableAlertEventMultiplePermutation{value: val, isSet: true}
}

func (v NullableAlertEventMultiplePermutation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertEventMultiplePermutation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


