/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_events_service

import (
	"encoding/json"
)

// checks if the Permutation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Permutation{}

// Permutation struct for Permutation
type Permutation struct {
	PermutationLabels *map[string]string `json:"permutationLabels,omitempty"`
}

// NewPermutation instantiates a new Permutation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermutation() *Permutation {
	this := Permutation{}
	return &this
}

// NewPermutationWithDefaults instantiates a new Permutation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermutationWithDefaults() *Permutation {
	this := Permutation{}
	return &this
}

// GetPermutationLabels returns the PermutationLabels field value if set, zero value otherwise.
func (o *Permutation) GetPermutationLabels() map[string]string {
	if o == nil || IsNil(o.PermutationLabels) {
		var ret map[string]string
		return ret
	}
	return *o.PermutationLabels
}

// GetPermutationLabelsOk returns a tuple with the PermutationLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permutation) GetPermutationLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.PermutationLabels) {
		return nil, false
	}
	return o.PermutationLabels, true
}

// HasPermutationLabels returns a boolean if a field has been set.
func (o *Permutation) HasPermutationLabels() bool {
	if o != nil && !IsNil(o.PermutationLabels) {
		return true
	}

	return false
}

// SetPermutationLabels gets a reference to the given map[string]string and assigns it to the PermutationLabels field.
func (o *Permutation) SetPermutationLabels(v map[string]string) {
	o.PermutationLabels = &v
}

func (o Permutation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Permutation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PermutationLabels) {
		toSerialize["permutationLabels"] = o.PermutationLabels
	}
	return toSerialize, nil
}

type NullablePermutation struct {
	value *Permutation
	isSet bool
}

func (v NullablePermutation) Get() *Permutation {
	return v.value
}

func (v *NullablePermutation) Set(val *Permutation) {
	v.value = val
	v.isSet = true
}

func (v NullablePermutation) IsSet() bool {
	return v.isSet
}

func (v *NullablePermutation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermutation(val *Permutation) *NullablePermutation {
	return &NullablePermutation{value: val, isSet: true}
}

func (v NullablePermutation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermutation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


