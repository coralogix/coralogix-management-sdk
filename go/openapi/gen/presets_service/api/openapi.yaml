openapi: 3.0.0
info:
  title: ""
  version: 1.0.0
servers:
- url: /
paths:
  /notifications/notification-center/v1/presets/custom:
    post:
      description: No description available
      externalDocs:
        url: ""
      operationId: PresetsService_CreateCustomPreset
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Preset_1"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCustomPresetResponse"
          description: ""
      summary: Create Custom Preset
      tags:
      - Presets service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom';

          let options = {
            method: 'POST',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"configOverrides":[{"conditionType":{"matchEntityType":{}},"messageConfig":{"fields":[{"fieldName":"title","template":"{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"}]},"payloadType":"string"}],"connectorType":"CONNECTOR_TYPE_UNSPECIFIED","createTime":"2019-08-24T14:15:22Z","description":"Custom preset for alerts","entityType":"ENTITY_TYPE_UNSPECIFIED","id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","name":"My Preset","parentId":"preset_system_slack_alerts_basic","presetType":"PRESET_TYPE_UNSPECIFIED","updateTime":"2019-08-24T14:15:22Z"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom"

          payload = {
              "configOverrides": [
                  {
                      "conditionType": {"matchEntityType": {}},
                      "messageConfig": {"fields": [
                              {
                                  "fieldName": "title",
                                  "template": "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                              }
                          ]},
                      "payloadType": "string"
                  }
              ],
              "connectorType": "CONNECTOR_TYPE_UNSPECIFIED",
              "createTime": "2019-08-24T14:15:22Z",
              "description": "Custom preset for alerts",
              "entityType": "ENTITY_TYPE_UNSPECIFIED",
              "id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
              "name": "My Preset",
              "parentId": "preset_system_slack_alerts_basic",
              "presetType": "PRESET_TYPE_UNSPECIFIED",
              "updateTime": "2019-08-24T14:15:22Z"
          }
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"configOverrides":[{"conditionType":{"matchEntityType":{}},"messageConfig":{"fields":[{"fieldName":"title","template":"{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"}]},"payloadType":"string"}],"connectorType":"CONNECTOR_TYPE_UNSPECIFIED","createTime":"2019-08-24T14:15:22Z","description":"Custom preset for alerts","entityType":"ENTITY_TYPE_UNSPECIFIED","id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","name":"My Preset","parentId":"preset_system_slack_alerts_basic","presetType":"PRESET_TYPE_UNSPECIFIED","updateTime":"2019-08-24T14:15:22Z"}'
    put:
      description: No description available
      externalDocs:
        url: ""
      operationId: PresetsService_ReplaceCustomPreset
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Preset_1"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplaceCustomPresetResponse"
          description: ""
      summary: Replace Custom Preset
      tags:
      - Presets service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom';

          let options = {
            method: 'PUT',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"configOverrides":[{"conditionType":{"matchEntityType":{}},"messageConfig":{"fields":[{"fieldName":"title","template":"{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"}]},"payloadType":"string"}],"connectorType":"CONNECTOR_TYPE_UNSPECIFIED","createTime":"2019-08-24T14:15:22Z","description":"Custom preset for alerts","entityType":"ENTITY_TYPE_UNSPECIFIED","id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","name":"My Preset","parentId":"preset_system_slack_alerts_basic","presetType":"PRESET_TYPE_UNSPECIFIED","updateTime":"2019-08-24T14:15:22Z"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom"

          payload = {
              "configOverrides": [
                  {
                      "conditionType": {"matchEntityType": {}},
                      "messageConfig": {"fields": [
                              {
                                  "fieldName": "title",
                                  "template": "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                              }
                          ]},
                      "payloadType": "string"
                  }
              ],
              "connectorType": "CONNECTOR_TYPE_UNSPECIFIED",
              "createTime": "2019-08-24T14:15:22Z",
              "description": "Custom preset for alerts",
              "entityType": "ENTITY_TYPE_UNSPECIFIED",
              "id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
              "name": "My Preset",
              "parentId": "preset_system_slack_alerts_basic",
              "presetType": "PRESET_TYPE_UNSPECIFIED",
              "updateTime": "2019-08-24T14:15:22Z"
          }
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("PUT", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"configOverrides":[{"conditionType":{"matchEntityType":{}},"messageConfig":{"fields":[{"fieldName":"title","template":"{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"}]},"payloadType":"string"}],"connectorType":"CONNECTOR_TYPE_UNSPECIFIED","createTime":"2019-08-24T14:15:22Z","description":"Custom preset for alerts","entityType":"ENTITY_TYPE_UNSPECIFIED","id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","name":"My Preset","parentId":"preset_system_slack_alerts_basic","presetType":"PRESET_TYPE_UNSPECIFIED","updateTime":"2019-08-24T14:15:22Z"}'
  /notifications/notification-center/v1/presets/custom/{id}:
    delete:
      description: No description available
      externalDocs:
        url: ""
      operationId: PresetsService_DeleteCustomPreset
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteCustomPresetResponse"
          description: ""
      summary: Delete Custom Preset
      tags:
      - Presets service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom/%7Bid%7D';

          let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom/%7Bid%7D"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("DELETE", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom/%7Bid%7D \
            --header 'Authorization: Bearer <API_KEY>'
  /notifications/notification-center/v1/presets/custom/{id}:defaultSet:
    post:
      description: No description available
      externalDocs:
        url: ""
      operationId: PresetsService_SetCustomPresetAsDefault
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetCustomPresetAsDefaultResponse"
          description: ""
      summary: Set Custom Preset As Default
      tags:
      - Presets service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom/%7Bid%7D:defaultSet';

          let options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom/%7Bid%7D:defaultSet"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("POST", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom/%7Bid%7D:defaultSet \
            --header 'Authorization: Bearer <API_KEY>'
  /notifications/notification-center/v1/presets/{id}:
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: PresetsService_GetPreset
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPresetResponse"
          description: ""
      summary: Get Preset
      tags:
      - Presets service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/%7Bid%7D';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/%7Bid%7D"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/%7Bid%7D \
            --header 'Authorization: Bearer <API_KEY>'
  /notifications/notification-center/v1/presets/{id}:defaultSet:
    post:
      description: No description available
      externalDocs:
        url: ""
      operationId: PresetsService_SetPresetAsDefault
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetPresetAsDefaultResponse"
          description: ""
      summary: Set Preset As Default
      tags:
      - Presets service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/%7Bid%7D:defaultSet';

          let options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/%7Bid%7D:defaultSet"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("POST", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/%7Bid%7D:defaultSet \
            --header 'Authorization: Bearer <API_KEY>'
  /notifications/notification-center/v1/presets:batchGet:
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: PresetsService_BatchGetPresets
      parameters:
      - explode: true
        in: query
        name: preset_ids
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchGetPresetsResponse"
          description: ""
      summary: Batch Get Presets
      tags:
      - Presets service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:batchGet?preset_ids=SOME_ARRAY_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:batchGet"

          querystring = {"preset_ids":"SOME_ARRAY_VALUE"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:batchGet?preset_ids=SOME_ARRAY_VALUE' \
            --header 'Authorization: Bearer <API_KEY>'
  /notifications/notification-center/v1/presets:defaultSummaryGet:
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: PresetsService_GetDefaultPresetSummary
      parameters:
      - explode: true
        in: query
        name: connector_type
        required: false
        schema:
          enum:
          - CONNECTOR_TYPE_UNSPECIFIED
          - SLACK
          - GENERIC_HTTPS
          - PAGERDUTY
          - IBM_EVENT_NOTIFICATIONS
          type: string
        style: form
      - explode: true
        in: query
        name: entity_type
        required: false
        schema:
          enum:
          - ENTITY_TYPE_UNSPECIFIED
          - ALERTS
          - TEST_NOTIFICATIONS
          - CASES
          example: ALERTS
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDefaultPresetSummaryResponse"
          description: ""
      summary: Get Default Preset Summary
      tags:
      - Presets service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:defaultSummaryGet?connector_type=SOME_STRING_VALUE&entity_type=ALERTS';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:defaultSummaryGet"

          querystring = {"connector_type":"SOME_STRING_VALUE","entity_type":"ALERTS"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:defaultSummaryGet?connector_type=SOME_STRING_VALUE&entity_type=ALERTS' \
            --header 'Authorization: Bearer <API_KEY>'
  /notifications/notification-center/v1/presets:summariesList:
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: PresetsService_ListPresetSummaries
      parameters:
      - explode: true
        in: query
        name: connector_type
        required: false
        schema:
          enum:
          - CONNECTOR_TYPE_UNSPECIFIED
          - SLACK
          - GENERIC_HTTPS
          - PAGERDUTY
          - IBM_EVENT_NOTIFICATIONS
          type: string
        style: form
      - explode: true
        in: query
        name: entity_type
        required: false
        schema:
          enum:
          - ENTITY_TYPE_UNSPECIFIED
          - ALERTS
          - TEST_NOTIFICATIONS
          - CASES
          example: ALERTS
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListPresetSummariesResponse"
          description: ""
      summary: List Preset Summaries
      tags:
      - Presets service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:summariesList?connector_type=SOME_STRING_VALUE&entity_type=ALERTS';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:summariesList"

          querystring = {"connector_type":"SOME_STRING_VALUE","entity_type":"ALERTS"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:summariesList?connector_type=SOME_STRING_VALUE&entity_type=ALERTS' \
            --header 'Authorization: Bearer <API_KEY>'
  /notifications/notification-center/v1/presets:systemDefaultSummaryGet:
    get:
      description: No description available
      externalDocs:
        url: ""
      operationId: PresetsService_GetSystemDefaultPresetSummary
      parameters:
      - explode: true
        in: query
        name: connector_type
        required: false
        schema:
          enum:
          - CONNECTOR_TYPE_UNSPECIFIED
          - SLACK
          - GENERIC_HTTPS
          - PAGERDUTY
          - IBM_EVENT_NOTIFICATIONS
          type: string
        style: form
      - explode: true
        in: query
        name: entity_type
        required: false
        schema:
          enum:
          - ENTITY_TYPE_UNSPECIFIED
          - ALERTS
          - TEST_NOTIFICATIONS
          - CASES
          example: ALERTS
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSystemDefaultPresetSummaryResponse"
          description: ""
      summary: Get System Default Preset Summary
      tags:
      - Presets service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:systemDefaultSummaryGet?connector_type=SOME_STRING_VALUE&entity_type=ALERTS';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:systemDefaultSummaryGet"

          querystring = {"connector_type":"SOME_STRING_VALUE","entity_type":"ALERTS"}

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:systemDefaultSummaryGet?connector_type=SOME_STRING_VALUE&entity_type=ALERTS' \
            --header 'Authorization: Bearer <API_KEY>'
components:
  schemas:
    BatchGetPresetsResponse:
      description: Response containing the requested presets and any IDs not found
      example:
        notFoundIds:
        - notFoundIds
        - notFoundIds
        presets:
          key:
            connectorType: CONNECTOR_TYPE_UNSPECIFIED
            configOverrides:
            - messageConfig:
                fields:
                - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                  fieldName: title
                - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                  fieldName: title
              payloadType: payloadType
              conditionType:
                matchEntityType: "{}"
            - messageConfig:
                fields:
                - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                  fieldName: title
                - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                  fieldName: title
              payloadType: payloadType
              conditionType:
                matchEntityType: "{}"
            createTime: 2000-01-23T04:56:07.000+00:00
            entityType: ENTITY_TYPE_UNSPECIFIED
            name: My Preset
            description: Custom preset for alerts
            updateTime: 2000-01-23T04:56:07.000+00:00
            id: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
            presetType: PRESET_TYPE_UNSPECIFIED
            parentId: preset_system_slack_alerts_basic
      externalDocs:
        description: Find out more about notification center
        url: https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
      properties:
        notFoundIds:
          items:
            type: string
          type: array
        presets:
          additionalProperties:
            $ref: "#/components/schemas/Preset"
          type: object
      title: Batch Get Presets Response
      type: object
    ConfigOverrides:
      additionalProperties: false
      example:
        messageConfig:
          fields:
          - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
            fieldName: title
          - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
            fieldName: title
        payloadType: payloadType
        conditionType:
          matchEntityType: "{}"
      properties:
        conditionType:
          $ref: "#/components/schemas/notification_center.ConditionType"
        messageConfig:
          $ref: "#/components/schemas/MessageConfig"
        payloadType:
          type: string
      type: object
    ConnectorType:
      enum:
      - CONNECTOR_TYPE_UNSPECIFIED
      - SLACK
      - GENERIC_HTTPS
      - PAGERDUTY
      - IBM_EVENT_NOTIFICATIONS
      type: string
    CreateCustomPresetResponse:
      description: Response containing the created custom preset
      example:
        preset:
          connectorType: CONNECTOR_TYPE_UNSPECIFIED
          configOverrides:
          - messageConfig:
              fields:
              - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                fieldName: title
              - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                fieldName: title
            payloadType: payloadType
            conditionType:
              matchEntityType: "{}"
          - messageConfig:
              fields:
              - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                fieldName: title
              - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                fieldName: title
            payloadType: payloadType
            conditionType:
              matchEntityType: "{}"
          createTime: 2000-01-23T04:56:07.000+00:00
          entityType: ENTITY_TYPE_UNSPECIFIED
          name: My Preset
          description: Custom preset for alerts
          updateTime: 2000-01-23T04:56:07.000+00:00
          id: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
          presetType: PRESET_TYPE_UNSPECIFIED
          parentId: preset_system_slack_alerts_basic
      externalDocs:
        description: Find out more about notification center
        url: https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
      properties:
        preset:
          $ref: "#/components/schemas/Preset"
      title: Create Custom Preset Response
      type: object
    DeleteCustomPresetResponse:
      type: object
    FieldGroup:
      properties:
        name:
          type: string
        value:
          type: string
      type: object
    FilterPathAndValues:
      oneOf:
      - $ref: "#/components/schemas/FilterPathAndValues_1"
      - $ref: "#/components/schemas/FilterPathAndValues_2"
    Filters:
      description: This data structure represents a filter
      externalDocs:
        url: ""
      properties:
        operator:
          $ref: "#/components/schemas/v3.FilterOperator"
        pathAndValues:
          items:
            $ref: "#/components/schemas/FilterPathAndValues"
          type: array
      required:
      - pathAndValues
      title: Filters
      type: object
    GetDefaultPresetSummaryResponse:
      example:
        presetSummary:
          connectorType: CONNECTOR_TYPE_UNSPECIFIED
          createTime: 2000-01-23T04:56:07.000+00:00
          entityType: ENTITY_TYPE_UNSPECIFIED
          name: My Preset
          description: Custom preset for alerts
          updateTime: 2000-01-23T04:56:07.000+00:00
          id: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
          presetType: PRESET_TYPE_UNSPECIFIED
          parentId: c246e826-10c2-405e-8d3f-afcc24ad4d15
      properties:
        presetSummary:
          $ref: "#/components/schemas/PresetSummary"
      type: object
    GetPresetResponse:
      example:
        preset:
          connectorType: CONNECTOR_TYPE_UNSPECIFIED
          configOverrides:
          - messageConfig:
              fields:
              - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                fieldName: title
              - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                fieldName: title
            payloadType: payloadType
            conditionType:
              matchEntityType: "{}"
          - messageConfig:
              fields:
              - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                fieldName: title
              - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                fieldName: title
            payloadType: payloadType
            conditionType:
              matchEntityType: "{}"
          createTime: 2000-01-23T04:56:07.000+00:00
          entityType: ENTITY_TYPE_UNSPECIFIED
          name: My Preset
          description: Custom preset for alerts
          updateTime: 2000-01-23T04:56:07.000+00:00
          id: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
          presetType: PRESET_TYPE_UNSPECIFIED
          parentId: preset_system_slack_alerts_basic
      properties:
        preset:
          $ref: "#/components/schemas/Preset"
      type: object
    GetSystemDefaultPresetSummaryResponse:
      example:
        presetSummary:
          connectorType: CONNECTOR_TYPE_UNSPECIFIED
          createTime: 2000-01-23T04:56:07.000+00:00
          entityType: ENTITY_TYPE_UNSPECIFIED
          name: My Preset
          description: Custom preset for alerts
          updateTime: 2000-01-23T04:56:07.000+00:00
          id: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
          presetType: PRESET_TYPE_UNSPECIFIED
          parentId: c246e826-10c2-405e-8d3f-afcc24ad4d15
      properties:
        presetSummary:
          $ref: "#/components/schemas/PresetSummary"
      type: object
    ListPresetSummariesResponse:
      example:
        presetSummaries:
        - connectorType: CONNECTOR_TYPE_UNSPECIFIED
          createTime: 2000-01-23T04:56:07.000+00:00
          entityType: ENTITY_TYPE_UNSPECIFIED
          name: My Preset
          description: Custom preset for alerts
          updateTime: 2000-01-23T04:56:07.000+00:00
          id: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
          presetType: PRESET_TYPE_UNSPECIFIED
          parentId: c246e826-10c2-405e-8d3f-afcc24ad4d15
        - connectorType: CONNECTOR_TYPE_UNSPECIFIED
          createTime: 2000-01-23T04:56:07.000+00:00
          entityType: ENTITY_TYPE_UNSPECIFIED
          name: My Preset
          description: Custom preset for alerts
          updateTime: 2000-01-23T04:56:07.000+00:00
          id: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
          presetType: PRESET_TYPE_UNSPECIFIED
          parentId: c246e826-10c2-405e-8d3f-afcc24ad4d15
      properties:
        presetSummaries:
          items:
            $ref: "#/components/schemas/PresetSummary"
          type: array
      type: object
    MatchEntityTypeAndSubTypeCondition:
      properties:
        entitySubType:
          type: string
      type: object
    MatchEntityTypeCondition:
      type: object
    MessageConfig:
      example:
        fields:
        - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
          fieldName: title
        - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
          fieldName: title
      properties:
        fields:
          items:
            $ref: "#/components/schemas/notification_center.MessageConfigField"
          type: array
      type: object
    MultipleValues:
      properties:
        matcher:
          $ref: "#/components/schemas/events.v3.FilterMatcher"
        values:
          items:
            type: string
          type: array
      type: object
    Preset:
      additionalProperties: false
      description: Set of preconfigured templates for notification content rendering
      example:
        connectorType: CONNECTOR_TYPE_UNSPECIFIED
        configOverrides:
        - messageConfig:
            fields:
            - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
              fieldName: title
            - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
              fieldName: title
          payloadType: payloadType
          conditionType:
            matchEntityType: "{}"
        - messageConfig:
            fields:
            - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
              fieldName: title
            - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
              fieldName: title
          payloadType: payloadType
          conditionType:
            matchEntityType: "{}"
        createTime: 2000-01-23T04:56:07.000+00:00
        entityType: ENTITY_TYPE_UNSPECIFIED
        name: My Preset
        description: Custom preset for alerts
        updateTime: 2000-01-23T04:56:07.000+00:00
        id: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
        presetType: PRESET_TYPE_UNSPECIFIED
        parentId: preset_system_slack_alerts_basic
      externalDocs:
        description: Find out more about notification center
        url: https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
      properties:
        configOverrides:
          items:
            $ref: "#/components/schemas/ConfigOverrides"
          type: array
        connectorType:
          $ref: "#/components/schemas/ConnectorType"
        createTime:
          format: date-time
          type: string
        description:
          example: Custom preset for alerts
          type: string
        entityType:
          $ref: "#/components/schemas/notification_center.EntityType"
        id:
          example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
          type: string
        name:
          example: My Preset
          type: string
        parentId:
          example: preset_system_slack_alerts_basic
          type: string
        presetType:
          $ref: "#/components/schemas/PresetType"
        updateTime:
          format: date-time
          type: string
      required:
      - configOverrides
      - entityType
      - name
      title: Preset
      type: object
    PresetSummary:
      additionalProperties: false
      description: Provides a concise overview of a preset
      example:
        connectorType: CONNECTOR_TYPE_UNSPECIFIED
        createTime: 2000-01-23T04:56:07.000+00:00
        entityType: ENTITY_TYPE_UNSPECIFIED
        name: My Preset
        description: Custom preset for alerts
        updateTime: 2000-01-23T04:56:07.000+00:00
        id: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
        presetType: PRESET_TYPE_UNSPECIFIED
        parentId: c246e826-10c2-405e-8d3f-afcc24ad4d15
      externalDocs:
        description: Find out more about notification center
        url: https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
      properties:
        connectorType:
          $ref: "#/components/schemas/ConnectorType"
        createTime:
          format: date-time
          type: string
        description:
          example: Custom preset for alerts
          maxLength: 5000
          type: string
        entityType:
          $ref: "#/components/schemas/notification_center.EntityType"
        id:
          example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
          type: string
        name:
          example: My Preset
          maxLength: 200
          type: string
        parentId:
          example: c246e826-10c2-405e-8d3f-afcc24ad4d15
          type: string
        presetType:
          $ref: "#/components/schemas/PresetType"
        updateTime:
          format: date-time
          type: string
      title: Preset Summary
      type: object
    PresetType:
      enum:
      - PRESET_TYPE_UNSPECIFIED
      - SYSTEM
      - CUSTOM
      type: string
    ReplaceCustomPresetResponse:
      description: Response containing the updated custom preset
      example:
        preset:
          connectorType: CONNECTOR_TYPE_UNSPECIFIED
          configOverrides:
          - messageConfig:
              fields:
              - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                fieldName: title
              - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                fieldName: title
            payloadType: payloadType
            conditionType:
              matchEntityType: "{}"
          - messageConfig:
              fields:
              - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                fieldName: title
              - template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                fieldName: title
            payloadType: payloadType
            conditionType:
              matchEntityType: "{}"
          createTime: 2000-01-23T04:56:07.000+00:00
          entityType: ENTITY_TYPE_UNSPECIFIED
          name: My Preset
          description: Custom preset for alerts
          updateTime: 2000-01-23T04:56:07.000+00:00
          id: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
          presetType: PRESET_TYPE_UNSPECIFIED
          parentId: preset_system_slack_alerts_basic
      externalDocs:
        description: Find out more about notification center
        url: https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
      properties:
        preset:
          $ref: "#/components/schemas/Preset"
      title: Replace Custom Preset Response
      type: object
    SetCustomPresetAsDefaultResponse:
      type: object
    SetPresetAsDefaultResponse:
      type: object
    common.Group:
      properties:
        field:
          $ref: "#/components/schemas/FieldGroup"
        groups:
          items:
            $ref: "#/components/schemas/common.Group"
          type: array
        value:
          format: double
          type: number
      type: object
    events.v3.FilterMatcher:
      enum:
      - FILTER_MATCHER_TEXT_OR_UNSPECIFIED
      - FILTER_MATCHER_REGEXP
      type: string
    notification_center.ConditionType:
      oneOf:
      - $ref: "#/components/schemas/notification_center_ConditionType_oneOf"
      - $ref: "#/components/schemas/notification_center_ConditionType_oneOf_1"
    notification_center.EntityType:
      enum:
      - ENTITY_TYPE_UNSPECIFIED
      - ALERTS
      - TEST_NOTIFICATIONS
      - CASES
      type: string
    notification_center.MessageConfigField:
      description: Message config field provides a way to define a template that can
        be used to render the notification content
      example:
        template: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
        fieldName: title
      externalDocs:
        description: Find out more about notification center
        url: https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
      properties:
        fieldName:
          example: title
          type: string
        template:
          example: "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
          type: string
      required:
      - fieldName
      - template
      title: Message Config Field
      type: object
    v3.FilterOperator:
      enum:
      - FILTER_OPERATOR_AND_OR_UNSPECIFIED
      - FILTER_OPERATOR_OR
      type: string
    Preset_1:
      additionalProperties: false
      description: Set of preconfigured templates for notification content rendering
      properties:
        configOverrides:
          items:
            $ref: "#/components/schemas/ConfigOverrides"
          type: array
        connectorType:
          $ref: "#/components/schemas/ConnectorType"
        createTime:
          format: date-time
          type: string
        description:
          example: Custom preset for alerts
          type: string
        entityType:
          $ref: "#/components/schemas/notification_center.EntityType"
        id:
          example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
          type: string
        name:
          example: My Preset
          type: string
        parentId:
          example: preset_system_slack_alerts_basic
          type: string
        presetType:
          $ref: "#/components/schemas/PresetType"
        updateTime:
          format: date-time
          type: string
      required:
      - configOverrides
      - entityType
      - name
      title: Preset
      type: object
    FilterPathAndValues_1:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        multipleValues:
          $ref: "#/components/schemas/MultipleValues"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
    FilterPathAndValues_2:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        filters:
          $ref: "#/components/schemas/Filters"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
    notification_center_ConditionType_oneOf:
      additionalProperties: false
      example:
        matchEntityType: "{}"
      properties:
        matchEntityType:
          type: object
      type: object
    notification_center_ConditionType_oneOf_1:
      additionalProperties: false
      properties:
        matchEntityTypeAndSubType:
          $ref: "#/components/schemas/MatchEntityTypeAndSubTypeCondition"
      type: object
  securitySchemes:
    apiKeyAuth:
      description: API key authentication
      in: header
      name: Authorization
      type: apiKey
