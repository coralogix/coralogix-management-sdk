/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package presets_service

import (
	"encoding/json"
)

// checks if the NotificationCenterConditionTypeMatchEntityType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationCenterConditionTypeMatchEntityType{}

// NotificationCenterConditionTypeMatchEntityType struct for NotificationCenterConditionTypeMatchEntityType
type NotificationCenterConditionTypeMatchEntityType struct {
	MatchEntityType map[string]interface{} `json:"matchEntityType,omitempty"`
}

// NewNotificationCenterConditionTypeMatchEntityType instantiates a new NotificationCenterConditionTypeMatchEntityType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationCenterConditionTypeMatchEntityType() *NotificationCenterConditionTypeMatchEntityType {
	this := NotificationCenterConditionTypeMatchEntityType{}
	return &this
}

// NewNotificationCenterConditionTypeMatchEntityTypeWithDefaults instantiates a new NotificationCenterConditionTypeMatchEntityType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationCenterConditionTypeMatchEntityTypeWithDefaults() *NotificationCenterConditionTypeMatchEntityType {
	this := NotificationCenterConditionTypeMatchEntityType{}
	return &this
}

// GetMatchEntityType returns the MatchEntityType field value if set, zero value otherwise.
func (o *NotificationCenterConditionTypeMatchEntityType) GetMatchEntityType() map[string]interface{} {
	if o == nil || IsNil(o.MatchEntityType) {
		var ret map[string]interface{}
		return ret
	}
	return o.MatchEntityType
}

// GetMatchEntityTypeOk returns a tuple with the MatchEntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationCenterConditionTypeMatchEntityType) GetMatchEntityTypeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.MatchEntityType) {
		return map[string]interface{}{}, false
	}
	return o.MatchEntityType, true
}

// HasMatchEntityType returns a boolean if a field has been set.
func (o *NotificationCenterConditionTypeMatchEntityType) HasMatchEntityType() bool {
	if o != nil && !IsNil(o.MatchEntityType) {
		return true
	}

	return false
}

// SetMatchEntityType gets a reference to the given map[string]interface{} and assigns it to the MatchEntityType field.
func (o *NotificationCenterConditionTypeMatchEntityType) SetMatchEntityType(v map[string]interface{}) {
	o.MatchEntityType = v
}

func (o NotificationCenterConditionTypeMatchEntityType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationCenterConditionTypeMatchEntityType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MatchEntityType) {
		toSerialize["matchEntityType"] = o.MatchEntityType
	}
	return toSerialize, nil
}

type NullableNotificationCenterConditionTypeMatchEntityType struct {
	value *NotificationCenterConditionTypeMatchEntityType
	isSet bool
}

func (v NullableNotificationCenterConditionTypeMatchEntityType) Get() *NotificationCenterConditionTypeMatchEntityType {
	return v.value
}

func (v *NullableNotificationCenterConditionTypeMatchEntityType) Set(val *NotificationCenterConditionTypeMatchEntityType) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationCenterConditionTypeMatchEntityType) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationCenterConditionTypeMatchEntityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationCenterConditionTypeMatchEntityType(val *NotificationCenterConditionTypeMatchEntityType) *NullableNotificationCenterConditionTypeMatchEntityType {
	return &NullableNotificationCenterConditionTypeMatchEntityType{value: val, isSet: true}
}

func (v NullableNotificationCenterConditionTypeMatchEntityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationCenterConditionTypeMatchEntityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


