/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package presets_service

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Preset1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Preset1{}

// Preset1 Set of preconfigured templates for notification content rendering
type Preset1 struct {
	ConfigOverrides []ConfigOverrides `json:"configOverrides"`
	ConnectorType *ConnectorType `json:"connectorType,omitempty"`
	CreateTime *time.Time `json:"createTime,omitempty"`
	Description *string `json:"description,omitempty"`
	EntityType NotificationCenterEntityType `json:"entityType"`
	Id *string `json:"id,omitempty"`
	Name string `json:"name"`
	ParentId *string `json:"parentId,omitempty"`
	PresetType *PresetType `json:"presetType,omitempty"`
	UpdateTime *time.Time `json:"updateTime,omitempty"`
}

type _Preset1 Preset1

// NewPreset1 instantiates a new Preset1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreset1(configOverrides []ConfigOverrides, entityType NotificationCenterEntityType, name string) *Preset1 {
	this := Preset1{}
	this.ConfigOverrides = configOverrides
	this.EntityType = entityType
	this.Name = name
	return &this
}

// NewPreset1WithDefaults instantiates a new Preset1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreset1WithDefaults() *Preset1 {
	this := Preset1{}
	return &this
}

// GetConfigOverrides returns the ConfigOverrides field value
func (o *Preset1) GetConfigOverrides() []ConfigOverrides {
	if o == nil {
		var ret []ConfigOverrides
		return ret
	}

	return o.ConfigOverrides
}

// GetConfigOverridesOk returns a tuple with the ConfigOverrides field value
// and a boolean to check if the value has been set.
func (o *Preset1) GetConfigOverridesOk() ([]ConfigOverrides, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConfigOverrides, true
}

// SetConfigOverrides sets field value
func (o *Preset1) SetConfigOverrides(v []ConfigOverrides) {
	o.ConfigOverrides = v
}

// GetConnectorType returns the ConnectorType field value if set, zero value otherwise.
func (o *Preset1) GetConnectorType() ConnectorType {
	if o == nil || IsNil(o.ConnectorType) {
		var ret ConnectorType
		return ret
	}
	return *o.ConnectorType
}

// GetConnectorTypeOk returns a tuple with the ConnectorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preset1) GetConnectorTypeOk() (*ConnectorType, bool) {
	if o == nil || IsNil(o.ConnectorType) {
		return nil, false
	}
	return o.ConnectorType, true
}

// HasConnectorType returns a boolean if a field has been set.
func (o *Preset1) HasConnectorType() bool {
	if o != nil && !IsNil(o.ConnectorType) {
		return true
	}

	return false
}

// SetConnectorType gets a reference to the given ConnectorType and assigns it to the ConnectorType field.
func (o *Preset1) SetConnectorType(v ConnectorType) {
	o.ConnectorType = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *Preset1) GetCreateTime() time.Time {
	if o == nil || IsNil(o.CreateTime) {
		var ret time.Time
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preset1) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateTime) {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *Preset1) HasCreateTime() bool {
	if o != nil && !IsNil(o.CreateTime) {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given time.Time and assigns it to the CreateTime field.
func (o *Preset1) SetCreateTime(v time.Time) {
	o.CreateTime = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Preset1) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preset1) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Preset1) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Preset1) SetDescription(v string) {
	o.Description = &v
}

// GetEntityType returns the EntityType field value
func (o *Preset1) GetEntityType() NotificationCenterEntityType {
	if o == nil {
		var ret NotificationCenterEntityType
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *Preset1) GetEntityTypeOk() (*NotificationCenterEntityType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *Preset1) SetEntityType(v NotificationCenterEntityType) {
	o.EntityType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Preset1) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preset1) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Preset1) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Preset1) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Preset1) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Preset1) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Preset1) SetName(v string) {
	o.Name = v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *Preset1) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preset1) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *Preset1) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *Preset1) SetParentId(v string) {
	o.ParentId = &v
}

// GetPresetType returns the PresetType field value if set, zero value otherwise.
func (o *Preset1) GetPresetType() PresetType {
	if o == nil || IsNil(o.PresetType) {
		var ret PresetType
		return ret
	}
	return *o.PresetType
}

// GetPresetTypeOk returns a tuple with the PresetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preset1) GetPresetTypeOk() (*PresetType, bool) {
	if o == nil || IsNil(o.PresetType) {
		return nil, false
	}
	return o.PresetType, true
}

// HasPresetType returns a boolean if a field has been set.
func (o *Preset1) HasPresetType() bool {
	if o != nil && !IsNil(o.PresetType) {
		return true
	}

	return false
}

// SetPresetType gets a reference to the given PresetType and assigns it to the PresetType field.
func (o *Preset1) SetPresetType(v PresetType) {
	o.PresetType = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *Preset1) GetUpdateTime() time.Time {
	if o == nil || IsNil(o.UpdateTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preset1) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *Preset1) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given time.Time and assigns it to the UpdateTime field.
func (o *Preset1) SetUpdateTime(v time.Time) {
	o.UpdateTime = &v
}

func (o Preset1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Preset1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["configOverrides"] = o.ConfigOverrides
	if !IsNil(o.ConnectorType) {
		toSerialize["connectorType"] = o.ConnectorType
	}
	if !IsNil(o.CreateTime) {
		toSerialize["createTime"] = o.CreateTime
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["entityType"] = o.EntityType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !IsNil(o.PresetType) {
		toSerialize["presetType"] = o.PresetType
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["updateTime"] = o.UpdateTime
	}
	return toSerialize, nil
}

func (o *Preset1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"configOverrides",
		"entityType",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPreset1 := _Preset1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPreset1)

	if err != nil {
		return err
	}

	*o = Preset1(varPreset1)

	return err
}

type NullablePreset1 struct {
	value *Preset1
	isSet bool
}

func (v NullablePreset1) Get() *Preset1 {
	return v.value
}

func (v *NullablePreset1) Set(val *Preset1) {
	v.value = val
	v.isSet = true
}

func (v NullablePreset1) IsSet() bool {
	return v.isSet
}

func (v *NullablePreset1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreset1(val *Preset1) *NullablePreset1 {
	return &NullablePreset1{value: val, isSet: true}
}

func (v NullablePreset1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreset1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


