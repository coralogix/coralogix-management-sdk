/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package presets_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// NotificationCenterConditionType - struct for NotificationCenterConditionType
type NotificationCenterConditionType struct {
	ConditionTypeMatchEntityType *ConditionTypeMatchEntityType
	ConditionTypeMatchEntityTypeAndSubType *ConditionTypeMatchEntityTypeAndSubType
}

// ConditionTypeMatchEntityTypeAsNotificationCenterConditionType is a convenience function that returns ConditionTypeMatchEntityType wrapped in NotificationCenterConditionType
func ConditionTypeMatchEntityTypeAsNotificationCenterConditionType(v *ConditionTypeMatchEntityType) NotificationCenterConditionType {
	return NotificationCenterConditionType{
		ConditionTypeMatchEntityType: v,
	}
}

// ConditionTypeMatchEntityTypeAndSubTypeAsNotificationCenterConditionType is a convenience function that returns ConditionTypeMatchEntityTypeAndSubType wrapped in NotificationCenterConditionType
func ConditionTypeMatchEntityTypeAndSubTypeAsNotificationCenterConditionType(v *ConditionTypeMatchEntityTypeAndSubType) NotificationCenterConditionType {
	return NotificationCenterConditionType{
		ConditionTypeMatchEntityTypeAndSubType: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *NotificationCenterConditionType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ConditionTypeMatchEntityType
	err = newStrictDecoder(data).Decode(&dst.ConditionTypeMatchEntityType)
	if err == nil {
		jsonConditionTypeMatchEntityType, _ := json.Marshal(dst.ConditionTypeMatchEntityType)
		if string(jsonConditionTypeMatchEntityType) == "{}" { // empty struct
			dst.ConditionTypeMatchEntityType = nil
		} else {
			if err = validator.Validate(dst.ConditionTypeMatchEntityType); err != nil {
				dst.ConditionTypeMatchEntityType = nil
			} else {
				match++
			}
		}
	} else {
		dst.ConditionTypeMatchEntityType = nil
	}

	// try to unmarshal data into ConditionTypeMatchEntityTypeAndSubType
	err = newStrictDecoder(data).Decode(&dst.ConditionTypeMatchEntityTypeAndSubType)
	if err == nil {
		jsonConditionTypeMatchEntityTypeAndSubType, _ := json.Marshal(dst.ConditionTypeMatchEntityTypeAndSubType)
		if string(jsonConditionTypeMatchEntityTypeAndSubType) == "{}" { // empty struct
			dst.ConditionTypeMatchEntityTypeAndSubType = nil
		} else {
			if err = validator.Validate(dst.ConditionTypeMatchEntityTypeAndSubType); err != nil {
				dst.ConditionTypeMatchEntityTypeAndSubType = nil
			} else {
				match++
			}
		}
	} else {
		dst.ConditionTypeMatchEntityTypeAndSubType = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ConditionTypeMatchEntityType = nil
		dst.ConditionTypeMatchEntityTypeAndSubType = nil

		return fmt.Errorf("data matches more than one schema in oneOf(NotificationCenterConditionType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(NotificationCenterConditionType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NotificationCenterConditionType) MarshalJSON() ([]byte, error) {
	if src.ConditionTypeMatchEntityType != nil {
		return json.Marshal(&src.ConditionTypeMatchEntityType)
	}

	if src.ConditionTypeMatchEntityTypeAndSubType != nil {
		return json.Marshal(&src.ConditionTypeMatchEntityTypeAndSubType)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NotificationCenterConditionType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ConditionTypeMatchEntityType != nil {
		return obj.ConditionTypeMatchEntityType
	}

	if obj.ConditionTypeMatchEntityTypeAndSubType != nil {
		return obj.ConditionTypeMatchEntityTypeAndSubType
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj NotificationCenterConditionType) GetActualInstanceValue() (interface{}) {
	if obj.ConditionTypeMatchEntityType != nil {
		return *obj.ConditionTypeMatchEntityType
	}

	if obj.ConditionTypeMatchEntityTypeAndSubType != nil {
		return *obj.ConditionTypeMatchEntityTypeAndSubType
	}

	// all schemas are nil
	return nil
}

type NullableNotificationCenterConditionType struct {
	value *NotificationCenterConditionType
	isSet bool
}

func (v NullableNotificationCenterConditionType) Get() *NotificationCenterConditionType {
	return v.value
}

func (v *NullableNotificationCenterConditionType) Set(val *NotificationCenterConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationCenterConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationCenterConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationCenterConditionType(val *NotificationCenterConditionType) *NullableNotificationCenterConditionType {
	return &NullableNotificationCenterConditionType{value: val, isSet: true}
}

func (v NullableNotificationCenterConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationCenterConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


