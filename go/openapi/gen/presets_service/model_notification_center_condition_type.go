/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package presets_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// NotificationCenterConditionType - struct for NotificationCenterConditionType
type NotificationCenterConditionType struct {
	NotificationCenterConditionTypeOneOf *NotificationCenterConditionTypeOneOf
	NotificationCenterConditionTypeOneOf1 *NotificationCenterConditionTypeOneOf1
}

// NotificationCenterConditionTypeOneOfAsNotificationCenterConditionType is a convenience function that returns NotificationCenterConditionTypeOneOf wrapped in NotificationCenterConditionType
func NotificationCenterConditionTypeOneOfAsNotificationCenterConditionType(v *NotificationCenterConditionTypeOneOf) NotificationCenterConditionType {
	return NotificationCenterConditionType{
		NotificationCenterConditionTypeOneOf: v,
	}
}

// NotificationCenterConditionTypeOneOf1AsNotificationCenterConditionType is a convenience function that returns NotificationCenterConditionTypeOneOf1 wrapped in NotificationCenterConditionType
func NotificationCenterConditionTypeOneOf1AsNotificationCenterConditionType(v *NotificationCenterConditionTypeOneOf1) NotificationCenterConditionType {
	return NotificationCenterConditionType{
		NotificationCenterConditionTypeOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *NotificationCenterConditionType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into NotificationCenterConditionTypeOneOf
	err = newStrictDecoder(data).Decode(&dst.NotificationCenterConditionTypeOneOf)
	if err == nil {
		jsonNotificationCenterConditionTypeOneOf, _ := json.Marshal(dst.NotificationCenterConditionTypeOneOf)
		if string(jsonNotificationCenterConditionTypeOneOf) == "{}" { // empty struct
			dst.NotificationCenterConditionTypeOneOf = nil
		} else {
			if err = validator.Validate(dst.NotificationCenterConditionTypeOneOf); err != nil {
				dst.NotificationCenterConditionTypeOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.NotificationCenterConditionTypeOneOf = nil
	}

	// try to unmarshal data into NotificationCenterConditionTypeOneOf1
	err = newStrictDecoder(data).Decode(&dst.NotificationCenterConditionTypeOneOf1)
	if err == nil {
		jsonNotificationCenterConditionTypeOneOf1, _ := json.Marshal(dst.NotificationCenterConditionTypeOneOf1)
		if string(jsonNotificationCenterConditionTypeOneOf1) == "{}" { // empty struct
			dst.NotificationCenterConditionTypeOneOf1 = nil
		} else {
			if err = validator.Validate(dst.NotificationCenterConditionTypeOneOf1); err != nil {
				dst.NotificationCenterConditionTypeOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.NotificationCenterConditionTypeOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.NotificationCenterConditionTypeOneOf = nil
		dst.NotificationCenterConditionTypeOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(NotificationCenterConditionType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(NotificationCenterConditionType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NotificationCenterConditionType) MarshalJSON() ([]byte, error) {
	if src.NotificationCenterConditionTypeOneOf != nil {
		return json.Marshal(&src.NotificationCenterConditionTypeOneOf)
	}

	if src.NotificationCenterConditionTypeOneOf1 != nil {
		return json.Marshal(&src.NotificationCenterConditionTypeOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NotificationCenterConditionType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.NotificationCenterConditionTypeOneOf != nil {
		return obj.NotificationCenterConditionTypeOneOf
	}

	if obj.NotificationCenterConditionTypeOneOf1 != nil {
		return obj.NotificationCenterConditionTypeOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj NotificationCenterConditionType) GetActualInstanceValue() (interface{}) {
	if obj.NotificationCenterConditionTypeOneOf != nil {
		return *obj.NotificationCenterConditionTypeOneOf
	}

	if obj.NotificationCenterConditionTypeOneOf1 != nil {
		return *obj.NotificationCenterConditionTypeOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableNotificationCenterConditionType struct {
	value *NotificationCenterConditionType
	isSet bool
}

func (v NullableNotificationCenterConditionType) Get() *NotificationCenterConditionType {
	return v.value
}

func (v *NullableNotificationCenterConditionType) Set(val *NotificationCenterConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationCenterConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationCenterConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationCenterConditionType(val *NotificationCenterConditionType) *NullableNotificationCenterConditionType {
	return &NullableNotificationCenterConditionType{value: val, isSet: true}
}

func (v NullableNotificationCenterConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationCenterConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


