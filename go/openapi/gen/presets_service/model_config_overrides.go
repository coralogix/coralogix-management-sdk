/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package presets_service

import (
	"encoding/json"
)

// checks if the ConfigOverrides type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigOverrides{}

// ConfigOverrides struct for ConfigOverrides
type ConfigOverrides struct {
	ConditionType *NotificationCenterConditionType `json:"conditionType,omitempty"`
	MessageConfig *MessageConfig `json:"messageConfig,omitempty"`
	PayloadType *string `json:"payloadType,omitempty"`
}

// NewConfigOverrides instantiates a new ConfigOverrides object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigOverrides() *ConfigOverrides {
	this := ConfigOverrides{}
	return &this
}

// NewConfigOverridesWithDefaults instantiates a new ConfigOverrides object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigOverridesWithDefaults() *ConfigOverrides {
	this := ConfigOverrides{}
	return &this
}

// GetConditionType returns the ConditionType field value if set, zero value otherwise.
func (o *ConfigOverrides) GetConditionType() NotificationCenterConditionType {
	if o == nil || IsNil(o.ConditionType) {
		var ret NotificationCenterConditionType
		return ret
	}
	return *o.ConditionType
}

// GetConditionTypeOk returns a tuple with the ConditionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigOverrides) GetConditionTypeOk() (*NotificationCenterConditionType, bool) {
	if o == nil || IsNil(o.ConditionType) {
		return nil, false
	}
	return o.ConditionType, true
}

// HasConditionType returns a boolean if a field has been set.
func (o *ConfigOverrides) HasConditionType() bool {
	if o != nil && !IsNil(o.ConditionType) {
		return true
	}

	return false
}

// SetConditionType gets a reference to the given NotificationCenterConditionType and assigns it to the ConditionType field.
func (o *ConfigOverrides) SetConditionType(v NotificationCenterConditionType) {
	o.ConditionType = &v
}

// GetMessageConfig returns the MessageConfig field value if set, zero value otherwise.
func (o *ConfigOverrides) GetMessageConfig() MessageConfig {
	if o == nil || IsNil(o.MessageConfig) {
		var ret MessageConfig
		return ret
	}
	return *o.MessageConfig
}

// GetMessageConfigOk returns a tuple with the MessageConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigOverrides) GetMessageConfigOk() (*MessageConfig, bool) {
	if o == nil || IsNil(o.MessageConfig) {
		return nil, false
	}
	return o.MessageConfig, true
}

// HasMessageConfig returns a boolean if a field has been set.
func (o *ConfigOverrides) HasMessageConfig() bool {
	if o != nil && !IsNil(o.MessageConfig) {
		return true
	}

	return false
}

// SetMessageConfig gets a reference to the given MessageConfig and assigns it to the MessageConfig field.
func (o *ConfigOverrides) SetMessageConfig(v MessageConfig) {
	o.MessageConfig = &v
}

// GetPayloadType returns the PayloadType field value if set, zero value otherwise.
func (o *ConfigOverrides) GetPayloadType() string {
	if o == nil || IsNil(o.PayloadType) {
		var ret string
		return ret
	}
	return *o.PayloadType
}

// GetPayloadTypeOk returns a tuple with the PayloadType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigOverrides) GetPayloadTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PayloadType) {
		return nil, false
	}
	return o.PayloadType, true
}

// HasPayloadType returns a boolean if a field has been set.
func (o *ConfigOverrides) HasPayloadType() bool {
	if o != nil && !IsNil(o.PayloadType) {
		return true
	}

	return false
}

// SetPayloadType gets a reference to the given string and assigns it to the PayloadType field.
func (o *ConfigOverrides) SetPayloadType(v string) {
	o.PayloadType = &v
}

func (o ConfigOverrides) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigOverrides) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConditionType) {
		toSerialize["conditionType"] = o.ConditionType
	}
	if !IsNil(o.MessageConfig) {
		toSerialize["messageConfig"] = o.MessageConfig
	}
	if !IsNil(o.PayloadType) {
		toSerialize["payloadType"] = o.PayloadType
	}
	return toSerialize, nil
}

type NullableConfigOverrides struct {
	value *ConfigOverrides
	isSet bool
}

func (v NullableConfigOverrides) Get() *ConfigOverrides {
	return v.value
}

func (v *NullableConfigOverrides) Set(val *ConfigOverrides) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigOverrides) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigOverrides) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigOverrides(val *ConfigOverrides) *NullableConfigOverrides {
	return &NullableConfigOverrides{value: val, isSet: true}
}

func (v NullableConfigOverrides) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigOverrides) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


