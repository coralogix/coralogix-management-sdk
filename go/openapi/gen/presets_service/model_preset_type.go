/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package presets_service

import (
	"encoding/json"
	"fmt"
)

// PresetType the model 'PresetType'
type PresetType string

// List of PresetType
const (
	PRESETTYPE_PRESET_TYPE_UNSPECIFIED PresetType = "PRESET_TYPE_UNSPECIFIED"
	PRESETTYPE_SYSTEM PresetType = "SYSTEM"
	PRESETTYPE_CUSTOM PresetType = "CUSTOM"
)

// All allowed values of PresetType enum
var AllowedPresetTypeEnumValues = []PresetType{
	"PRESET_TYPE_UNSPECIFIED",
	"SYSTEM",
	"CUSTOM",
}

func (v *PresetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PresetType(value)
	for _, existing := range AllowedPresetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PresetType", value)
}

// NewPresetTypeFromValue returns a pointer to a valid PresetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPresetTypeFromValue(v string) (*PresetType, error) {
	ev := PresetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PresetType: valid values are %v", v, AllowedPresetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PresetType) IsValid() bool {
	for _, existing := range AllowedPresetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PresetType value
func (v PresetType) Ptr() *PresetType {
	return &v
}

type NullablePresetType struct {
	value *PresetType
	isSet bool
}

func (v NullablePresetType) Get() *PresetType {
	return v.value
}

func (v *NullablePresetType) Set(val *PresetType) {
	v.value = val
	v.isSet = true
}

func (v NullablePresetType) IsSet() bool {
	return v.isSet
}

func (v *NullablePresetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePresetType(val *PresetType) *NullablePresetType {
	return &NullablePresetType{value: val, isSet: true}
}

func (v NullablePresetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePresetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

