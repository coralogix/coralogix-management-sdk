/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package presets_service

import (
	"encoding/json"
)

// checks if the ConditionTypeMatchEntityTypeAndSubType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionTypeMatchEntityTypeAndSubType{}

// ConditionTypeMatchEntityTypeAndSubType struct for ConditionTypeMatchEntityTypeAndSubType
type ConditionTypeMatchEntityTypeAndSubType struct {
	MatchEntityTypeAndSubType *MatchEntityTypeAndSubTypeCondition `json:"matchEntityTypeAndSubType,omitempty"`
}

// NewConditionTypeMatchEntityTypeAndSubType instantiates a new ConditionTypeMatchEntityTypeAndSubType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionTypeMatchEntityTypeAndSubType() *ConditionTypeMatchEntityTypeAndSubType {
	this := ConditionTypeMatchEntityTypeAndSubType{}
	return &this
}

// NewConditionTypeMatchEntityTypeAndSubTypeWithDefaults instantiates a new ConditionTypeMatchEntityTypeAndSubType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionTypeMatchEntityTypeAndSubTypeWithDefaults() *ConditionTypeMatchEntityTypeAndSubType {
	this := ConditionTypeMatchEntityTypeAndSubType{}
	return &this
}

// GetMatchEntityTypeAndSubType returns the MatchEntityTypeAndSubType field value if set, zero value otherwise.
func (o *ConditionTypeMatchEntityTypeAndSubType) GetMatchEntityTypeAndSubType() MatchEntityTypeAndSubTypeCondition {
	if o == nil || IsNil(o.MatchEntityTypeAndSubType) {
		var ret MatchEntityTypeAndSubTypeCondition
		return ret
	}
	return *o.MatchEntityTypeAndSubType
}

// GetMatchEntityTypeAndSubTypeOk returns a tuple with the MatchEntityTypeAndSubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionTypeMatchEntityTypeAndSubType) GetMatchEntityTypeAndSubTypeOk() (*MatchEntityTypeAndSubTypeCondition, bool) {
	if o == nil || IsNil(o.MatchEntityTypeAndSubType) {
		return nil, false
	}
	return o.MatchEntityTypeAndSubType, true
}

// HasMatchEntityTypeAndSubType returns a boolean if a field has been set.
func (o *ConditionTypeMatchEntityTypeAndSubType) HasMatchEntityTypeAndSubType() bool {
	if o != nil && !IsNil(o.MatchEntityTypeAndSubType) {
		return true
	}

	return false
}

// SetMatchEntityTypeAndSubType gets a reference to the given MatchEntityTypeAndSubTypeCondition and assigns it to the MatchEntityTypeAndSubType field.
func (o *ConditionTypeMatchEntityTypeAndSubType) SetMatchEntityTypeAndSubType(v MatchEntityTypeAndSubTypeCondition) {
	o.MatchEntityTypeAndSubType = &v
}

func (o ConditionTypeMatchEntityTypeAndSubType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionTypeMatchEntityTypeAndSubType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MatchEntityTypeAndSubType) {
		toSerialize["matchEntityTypeAndSubType"] = o.MatchEntityTypeAndSubType
	}
	return toSerialize, nil
}

type NullableConditionTypeMatchEntityTypeAndSubType struct {
	value *ConditionTypeMatchEntityTypeAndSubType
	isSet bool
}

func (v NullableConditionTypeMatchEntityTypeAndSubType) Get() *ConditionTypeMatchEntityTypeAndSubType {
	return v.value
}

func (v *NullableConditionTypeMatchEntityTypeAndSubType) Set(val *ConditionTypeMatchEntityTypeAndSubType) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionTypeMatchEntityTypeAndSubType) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionTypeMatchEntityTypeAndSubType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionTypeMatchEntityTypeAndSubType(val *ConditionTypeMatchEntityTypeAndSubType) *NullableConditionTypeMatchEntityTypeAndSubType {
	return &NullableConditionTypeMatchEntityTypeAndSubType{value: val, isSet: true}
}

func (v NullableConditionTypeMatchEntityTypeAndSubType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionTypeMatchEntityTypeAndSubType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


