/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package presets_service

import (
	"encoding/json"
)

// checks if the MatchEntityTypeAndSubTypeCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchEntityTypeAndSubTypeCondition{}

// MatchEntityTypeAndSubTypeCondition struct for MatchEntityTypeAndSubTypeCondition
type MatchEntityTypeAndSubTypeCondition struct {
	EntitySubType *string `json:"entitySubType,omitempty"`
}

// NewMatchEntityTypeAndSubTypeCondition instantiates a new MatchEntityTypeAndSubTypeCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchEntityTypeAndSubTypeCondition() *MatchEntityTypeAndSubTypeCondition {
	this := MatchEntityTypeAndSubTypeCondition{}
	return &this
}

// NewMatchEntityTypeAndSubTypeConditionWithDefaults instantiates a new MatchEntityTypeAndSubTypeCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchEntityTypeAndSubTypeConditionWithDefaults() *MatchEntityTypeAndSubTypeCondition {
	this := MatchEntityTypeAndSubTypeCondition{}
	return &this
}

// GetEntitySubType returns the EntitySubType field value if set, zero value otherwise.
func (o *MatchEntityTypeAndSubTypeCondition) GetEntitySubType() string {
	if o == nil || IsNil(o.EntitySubType) {
		var ret string
		return ret
	}
	return *o.EntitySubType
}

// GetEntitySubTypeOk returns a tuple with the EntitySubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchEntityTypeAndSubTypeCondition) GetEntitySubTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EntitySubType) {
		return nil, false
	}
	return o.EntitySubType, true
}

// HasEntitySubType returns a boolean if a field has been set.
func (o *MatchEntityTypeAndSubTypeCondition) HasEntitySubType() bool {
	if o != nil && !IsNil(o.EntitySubType) {
		return true
	}

	return false
}

// SetEntitySubType gets a reference to the given string and assigns it to the EntitySubType field.
func (o *MatchEntityTypeAndSubTypeCondition) SetEntitySubType(v string) {
	o.EntitySubType = &v
}

func (o MatchEntityTypeAndSubTypeCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchEntityTypeAndSubTypeCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntitySubType) {
		toSerialize["entitySubType"] = o.EntitySubType
	}
	return toSerialize, nil
}

type NullableMatchEntityTypeAndSubTypeCondition struct {
	value *MatchEntityTypeAndSubTypeCondition
	isSet bool
}

func (v NullableMatchEntityTypeAndSubTypeCondition) Get() *MatchEntityTypeAndSubTypeCondition {
	return v.value
}

func (v *NullableMatchEntityTypeAndSubTypeCondition) Set(val *MatchEntityTypeAndSubTypeCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchEntityTypeAndSubTypeCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchEntityTypeAndSubTypeCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchEntityTypeAndSubTypeCondition(val *MatchEntityTypeAndSubTypeCondition) *NullableMatchEntityTypeAndSubTypeCondition {
	return &NullableMatchEntityTypeAndSubTypeCondition{value: val, isSet: true}
}

func (v NullableMatchEntityTypeAndSubTypeCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchEntityTypeAndSubTypeCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


