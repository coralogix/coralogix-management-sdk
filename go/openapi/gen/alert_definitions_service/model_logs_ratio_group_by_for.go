/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
)

// LogsRatioGroupByFor the model 'LogsRatioGroupByFor'
type LogsRatioGroupByFor string

// List of LogsRatioGroupByFor
const (
	LOGSRATIOGROUPBYFOR_LOGS_RATIO_GROUP_BY_FOR_BOTH_OR_UNSPECIFIED LogsRatioGroupByFor = "LOGS_RATIO_GROUP_BY_FOR_BOTH_OR_UNSPECIFIED"
	LOGSRATIOGROUPBYFOR_LOGS_RATIO_GROUP_BY_FOR_NUMERATOR_ONLY LogsRatioGroupByFor = "LOGS_RATIO_GROUP_BY_FOR_NUMERATOR_ONLY"
	LOGSRATIOGROUPBYFOR_LOGS_RATIO_GROUP_BY_FOR_DENUMERATOR_ONLY LogsRatioGroupByFor = "LOGS_RATIO_GROUP_BY_FOR_DENUMERATOR_ONLY"
)

// All allowed values of LogsRatioGroupByFor enum
var AllowedLogsRatioGroupByForEnumValues = []LogsRatioGroupByFor{
	"LOGS_RATIO_GROUP_BY_FOR_BOTH_OR_UNSPECIFIED",
	"LOGS_RATIO_GROUP_BY_FOR_NUMERATOR_ONLY",
	"LOGS_RATIO_GROUP_BY_FOR_DENUMERATOR_ONLY",
}

func (v *LogsRatioGroupByFor) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LogsRatioGroupByFor(value)
	for _, existing := range AllowedLogsRatioGroupByForEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogsRatioGroupByFor", value)
}

// NewLogsRatioGroupByForFromValue returns a pointer to a valid LogsRatioGroupByFor
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogsRatioGroupByForFromValue(v string) (*LogsRatioGroupByFor, error) {
	ev := LogsRatioGroupByFor(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LogsRatioGroupByFor: valid values are %v", v, AllowedLogsRatioGroupByForEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogsRatioGroupByFor) IsValid() bool {
	for _, existing := range AllowedLogsRatioGroupByForEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LogsRatioGroupByFor value
func (v LogsRatioGroupByFor) Ptr() *LogsRatioGroupByFor {
	return &v
}

type NullableLogsRatioGroupByFor struct {
	value *LogsRatioGroupByFor
	isSet bool
}

func (v NullableLogsRatioGroupByFor) Get() *LogsRatioGroupByFor {
	return v.value
}

func (v *NullableLogsRatioGroupByFor) Set(val *LogsRatioGroupByFor) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsRatioGroupByFor) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsRatioGroupByFor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsRatioGroupByFor(val *LogsRatioGroupByFor) *NullableLogsRatioGroupByFor {
	return &NullableLogsRatioGroupByFor{value: val, isSet: true}
}

func (v NullableLogsRatioGroupByFor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsRatioGroupByFor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

