/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// MetricMissingValues - struct for MetricMissingValues
type MetricMissingValues struct {
	MetricMissingValuesConfiguration *MetricMissingValuesConfiguration
	MetricMissingValuesConfiguration1 *MetricMissingValuesConfiguration1
}

// MetricMissingValuesConfigurationAsMetricMissingValues is a convenience function that returns MetricMissingValuesConfiguration wrapped in MetricMissingValues
func MetricMissingValuesConfigurationAsMetricMissingValues(v *MetricMissingValuesConfiguration) MetricMissingValues {
	return MetricMissingValues{
		MetricMissingValuesConfiguration: v,
	}
}

// MetricMissingValuesConfiguration1AsMetricMissingValues is a convenience function that returns MetricMissingValuesConfiguration1 wrapped in MetricMissingValues
func MetricMissingValuesConfiguration1AsMetricMissingValues(v *MetricMissingValuesConfiguration1) MetricMissingValues {
	return MetricMissingValues{
		MetricMissingValuesConfiguration1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MetricMissingValues) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MetricMissingValuesConfiguration
	err = newStrictDecoder(data).Decode(&dst.MetricMissingValuesConfiguration)
	if err == nil {
		jsonMetricMissingValuesConfiguration, _ := json.Marshal(dst.MetricMissingValuesConfiguration)
		if string(jsonMetricMissingValuesConfiguration) == "{}" { // empty struct
			dst.MetricMissingValuesConfiguration = nil
		} else {
			if err = validator.Validate(dst.MetricMissingValuesConfiguration); err != nil {
				dst.MetricMissingValuesConfiguration = nil
			} else {
				match++
			}
		}
	} else {
		dst.MetricMissingValuesConfiguration = nil
	}

	// try to unmarshal data into MetricMissingValuesConfiguration1
	err = newStrictDecoder(data).Decode(&dst.MetricMissingValuesConfiguration1)
	if err == nil {
		jsonMetricMissingValuesConfiguration1, _ := json.Marshal(dst.MetricMissingValuesConfiguration1)
		if string(jsonMetricMissingValuesConfiguration1) == "{}" { // empty struct
			dst.MetricMissingValuesConfiguration1 = nil
		} else {
			if err = validator.Validate(dst.MetricMissingValuesConfiguration1); err != nil {
				dst.MetricMissingValuesConfiguration1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MetricMissingValuesConfiguration1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MetricMissingValuesConfiguration = nil
		dst.MetricMissingValuesConfiguration1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MetricMissingValues)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MetricMissingValues)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MetricMissingValues) MarshalJSON() ([]byte, error) {
	if src.MetricMissingValuesConfiguration != nil {
		return json.Marshal(&src.MetricMissingValuesConfiguration)
	}

	if src.MetricMissingValuesConfiguration1 != nil {
		return json.Marshal(&src.MetricMissingValuesConfiguration1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MetricMissingValues) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MetricMissingValuesConfiguration != nil {
		return obj.MetricMissingValuesConfiguration
	}

	if obj.MetricMissingValuesConfiguration1 != nil {
		return obj.MetricMissingValuesConfiguration1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj MetricMissingValues) GetActualInstanceValue() (interface{}) {
	if obj.MetricMissingValuesConfiguration != nil {
		return *obj.MetricMissingValuesConfiguration
	}

	if obj.MetricMissingValuesConfiguration1 != nil {
		return *obj.MetricMissingValuesConfiguration1
	}

	// all schemas are nil
	return nil
}

type NullableMetricMissingValues struct {
	value *MetricMissingValues
	isSet bool
}

func (v NullableMetricMissingValues) Get() *MetricMissingValues {
	return v.value
}

func (v *NullableMetricMissingValues) Set(val *MetricMissingValues) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricMissingValues) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricMissingValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricMissingValues(val *MetricMissingValues) *NullableMetricMissingValues {
	return &NullableMetricMissingValues{value: val, isSet: true}
}

func (v NullableMetricMissingValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricMissingValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


