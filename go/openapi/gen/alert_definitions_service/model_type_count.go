/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
)

// checks if the TypeCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypeCount{}

// TypeCount Count for a specific alert type
type TypeCount struct {
	// The count for this alert type
	Count *int64 `json:"count,omitempty"`
	Type *AlertDefType `json:"type,omitempty"`
}

// NewTypeCount instantiates a new TypeCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypeCount() *TypeCount {
	this := TypeCount{}
	return &this
}

// NewTypeCountWithDefaults instantiates a new TypeCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypeCountWithDefaults() *TypeCount {
	this := TypeCount{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *TypeCount) GetCount() int64 {
	if o == nil || IsNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeCount) GetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *TypeCount) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *TypeCount) SetCount(v int64) {
	o.Count = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TypeCount) GetType() AlertDefType {
	if o == nil || IsNil(o.Type) {
		var ret AlertDefType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeCount) GetTypeOk() (*AlertDefType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TypeCount) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given AlertDefType and assigns it to the Type field.
func (o *TypeCount) SetType(v AlertDefType) {
	o.Type = &v
}

func (o TypeCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypeCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableTypeCount struct {
	value *TypeCount
	isSet bool
}

func (v NullableTypeCount) Get() *TypeCount {
	return v.value
}

func (v *NullableTypeCount) Set(val *TypeCount) {
	v.value = val
	v.isSet = true
}

func (v NullableTypeCount) IsSet() bool {
	return v.isSet
}

func (v *NullableTypeCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypeCount(val *TypeCount) *NullableTypeCount {
	return &NullableTypeCount{value: val, isSet: true}
}

func (v NullableTypeCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypeCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


