/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
)

// checks if the StatusCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatusCount{}

// StatusCount Count for a specific alert status
type StatusCount struct {
	// The count for this alert status
	Count *int64 `json:"count,omitempty"`
	Status *AlertDefStatus `json:"status,omitempty"`
}

// NewStatusCount instantiates a new StatusCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusCount() *StatusCount {
	this := StatusCount{}
	return &this
}

// NewStatusCountWithDefaults instantiates a new StatusCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusCountWithDefaults() *StatusCount {
	this := StatusCount{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *StatusCount) GetCount() int64 {
	if o == nil || IsNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusCount) GetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *StatusCount) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *StatusCount) SetCount(v int64) {
	o.Count = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *StatusCount) GetStatus() AlertDefStatus {
	if o == nil || IsNil(o.Status) {
		var ret AlertDefStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusCount) GetStatusOk() (*AlertDefStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *StatusCount) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AlertDefStatus and assigns it to the Status field.
func (o *StatusCount) SetStatus(v AlertDefStatus) {
	o.Status = &v
}

func (o StatusCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatusCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableStatusCount struct {
	value *StatusCount
	isSet bool
}

func (v NullableStatusCount) Get() *StatusCount {
	return v.value
}

func (v *NullableStatusCount) Set(val *StatusCount) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusCount) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusCount(val *StatusCount) *NullableStatusCount {
	return &NullableStatusCount{value: val, isSet: true}
}

func (v NullableStatusCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


