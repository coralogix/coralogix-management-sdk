/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// MetricTimeWindow - struct for MetricTimeWindow
type MetricTimeWindow struct {
	MetricTimeWindowMetricTimeWindowDynamicDuration *MetricTimeWindowMetricTimeWindowDynamicDuration
	MetricTimeWindowMetricTimeWindowSpecificValue *MetricTimeWindowMetricTimeWindowSpecificValue
}

// MetricTimeWindowMetricTimeWindowDynamicDurationAsMetricTimeWindow is a convenience function that returns MetricTimeWindowMetricTimeWindowDynamicDuration wrapped in MetricTimeWindow
func MetricTimeWindowMetricTimeWindowDynamicDurationAsMetricTimeWindow(v *MetricTimeWindowMetricTimeWindowDynamicDuration) MetricTimeWindow {
	return MetricTimeWindow{
		MetricTimeWindowMetricTimeWindowDynamicDuration: v,
	}
}

// MetricTimeWindowMetricTimeWindowSpecificValueAsMetricTimeWindow is a convenience function that returns MetricTimeWindowMetricTimeWindowSpecificValue wrapped in MetricTimeWindow
func MetricTimeWindowMetricTimeWindowSpecificValueAsMetricTimeWindow(v *MetricTimeWindowMetricTimeWindowSpecificValue) MetricTimeWindow {
	return MetricTimeWindow{
		MetricTimeWindowMetricTimeWindowSpecificValue: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MetricTimeWindow) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MetricTimeWindowMetricTimeWindowDynamicDuration
	err = newStrictDecoder(data).Decode(&dst.MetricTimeWindowMetricTimeWindowDynamicDuration)
	if err == nil {
		jsonMetricTimeWindowMetricTimeWindowDynamicDuration, _ := json.Marshal(dst.MetricTimeWindowMetricTimeWindowDynamicDuration)
		if string(jsonMetricTimeWindowMetricTimeWindowDynamicDuration) == "{}" { // empty struct
			dst.MetricTimeWindowMetricTimeWindowDynamicDuration = nil
		} else {
			if err = validator.Validate(dst.MetricTimeWindowMetricTimeWindowDynamicDuration); err != nil {
				dst.MetricTimeWindowMetricTimeWindowDynamicDuration = nil
			} else {
				match++
			}
		}
	} else {
		dst.MetricTimeWindowMetricTimeWindowDynamicDuration = nil
	}

	// try to unmarshal data into MetricTimeWindowMetricTimeWindowSpecificValue
	err = newStrictDecoder(data).Decode(&dst.MetricTimeWindowMetricTimeWindowSpecificValue)
	if err == nil {
		jsonMetricTimeWindowMetricTimeWindowSpecificValue, _ := json.Marshal(dst.MetricTimeWindowMetricTimeWindowSpecificValue)
		if string(jsonMetricTimeWindowMetricTimeWindowSpecificValue) == "{}" { // empty struct
			dst.MetricTimeWindowMetricTimeWindowSpecificValue = nil
		} else {
			if err = validator.Validate(dst.MetricTimeWindowMetricTimeWindowSpecificValue); err != nil {
				dst.MetricTimeWindowMetricTimeWindowSpecificValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.MetricTimeWindowMetricTimeWindowSpecificValue = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MetricTimeWindowMetricTimeWindowDynamicDuration = nil
		dst.MetricTimeWindowMetricTimeWindowSpecificValue = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MetricTimeWindow)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MetricTimeWindow)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MetricTimeWindow) MarshalJSON() ([]byte, error) {
	if src.MetricTimeWindowMetricTimeWindowDynamicDuration != nil {
		return json.Marshal(&src.MetricTimeWindowMetricTimeWindowDynamicDuration)
	}

	if src.MetricTimeWindowMetricTimeWindowSpecificValue != nil {
		return json.Marshal(&src.MetricTimeWindowMetricTimeWindowSpecificValue)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MetricTimeWindow) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MetricTimeWindowMetricTimeWindowDynamicDuration != nil {
		return obj.MetricTimeWindowMetricTimeWindowDynamicDuration
	}

	if obj.MetricTimeWindowMetricTimeWindowSpecificValue != nil {
		return obj.MetricTimeWindowMetricTimeWindowSpecificValue
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj MetricTimeWindow) GetActualInstanceValue() (interface{}) {
	if obj.MetricTimeWindowMetricTimeWindowDynamicDuration != nil {
		return *obj.MetricTimeWindowMetricTimeWindowDynamicDuration
	}

	if obj.MetricTimeWindowMetricTimeWindowSpecificValue != nil {
		return *obj.MetricTimeWindowMetricTimeWindowSpecificValue
	}

	// all schemas are nil
	return nil
}

type NullableMetricTimeWindow struct {
	value *MetricTimeWindow
	isSet bool
}

func (v NullableMetricTimeWindow) Get() *MetricTimeWindow {
	return v.value
}

func (v *NullableMetricTimeWindow) Set(val *MetricTimeWindow) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricTimeWindow) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricTimeWindow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricTimeWindow(val *MetricTimeWindow) *NullableMetricTimeWindow {
	return &NullableMetricTimeWindow{value: val, isSet: true}
}

func (v NullableMetricTimeWindow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricTimeWindow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


