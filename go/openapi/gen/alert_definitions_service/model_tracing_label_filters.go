/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
)

// checks if the TracingLabelFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TracingLabelFilters{}

// TracingLabelFilters Filters for application name, subsystem name, service name, operation name and span fields
type TracingLabelFilters struct {
	ApplicationName []TracingFilterType `json:"applicationName,omitempty"`
	OperationName []TracingFilterType `json:"operationName,omitempty"`
	ServiceName []TracingFilterType `json:"serviceName,omitempty"`
	SpanFields []TracingSpanFieldsFilterType `json:"spanFields,omitempty"`
	SubsystemName []TracingFilterType `json:"subsystemName,omitempty"`
}

// NewTracingLabelFilters instantiates a new TracingLabelFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTracingLabelFilters() *TracingLabelFilters {
	this := TracingLabelFilters{}
	return &this
}

// NewTracingLabelFiltersWithDefaults instantiates a new TracingLabelFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTracingLabelFiltersWithDefaults() *TracingLabelFilters {
	this := TracingLabelFilters{}
	return &this
}

// GetApplicationName returns the ApplicationName field value if set, zero value otherwise.
func (o *TracingLabelFilters) GetApplicationName() []TracingFilterType {
	if o == nil || IsNil(o.ApplicationName) {
		var ret []TracingFilterType
		return ret
	}
	return o.ApplicationName
}

// GetApplicationNameOk returns a tuple with the ApplicationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TracingLabelFilters) GetApplicationNameOk() ([]TracingFilterType, bool) {
	if o == nil || IsNil(o.ApplicationName) {
		return nil, false
	}
	return o.ApplicationName, true
}

// HasApplicationName returns a boolean if a field has been set.
func (o *TracingLabelFilters) HasApplicationName() bool {
	if o != nil && !IsNil(o.ApplicationName) {
		return true
	}

	return false
}

// SetApplicationName gets a reference to the given []TracingFilterType and assigns it to the ApplicationName field.
func (o *TracingLabelFilters) SetApplicationName(v []TracingFilterType) {
	o.ApplicationName = v
}

// GetOperationName returns the OperationName field value if set, zero value otherwise.
func (o *TracingLabelFilters) GetOperationName() []TracingFilterType {
	if o == nil || IsNil(o.OperationName) {
		var ret []TracingFilterType
		return ret
	}
	return o.OperationName
}

// GetOperationNameOk returns a tuple with the OperationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TracingLabelFilters) GetOperationNameOk() ([]TracingFilterType, bool) {
	if o == nil || IsNil(o.OperationName) {
		return nil, false
	}
	return o.OperationName, true
}

// HasOperationName returns a boolean if a field has been set.
func (o *TracingLabelFilters) HasOperationName() bool {
	if o != nil && !IsNil(o.OperationName) {
		return true
	}

	return false
}

// SetOperationName gets a reference to the given []TracingFilterType and assigns it to the OperationName field.
func (o *TracingLabelFilters) SetOperationName(v []TracingFilterType) {
	o.OperationName = v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *TracingLabelFilters) GetServiceName() []TracingFilterType {
	if o == nil || IsNil(o.ServiceName) {
		var ret []TracingFilterType
		return ret
	}
	return o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TracingLabelFilters) GetServiceNameOk() ([]TracingFilterType, bool) {
	if o == nil || IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *TracingLabelFilters) HasServiceName() bool {
	if o != nil && !IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given []TracingFilterType and assigns it to the ServiceName field.
func (o *TracingLabelFilters) SetServiceName(v []TracingFilterType) {
	o.ServiceName = v
}

// GetSpanFields returns the SpanFields field value if set, zero value otherwise.
func (o *TracingLabelFilters) GetSpanFields() []TracingSpanFieldsFilterType {
	if o == nil || IsNil(o.SpanFields) {
		var ret []TracingSpanFieldsFilterType
		return ret
	}
	return o.SpanFields
}

// GetSpanFieldsOk returns a tuple with the SpanFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TracingLabelFilters) GetSpanFieldsOk() ([]TracingSpanFieldsFilterType, bool) {
	if o == nil || IsNil(o.SpanFields) {
		return nil, false
	}
	return o.SpanFields, true
}

// HasSpanFields returns a boolean if a field has been set.
func (o *TracingLabelFilters) HasSpanFields() bool {
	if o != nil && !IsNil(o.SpanFields) {
		return true
	}

	return false
}

// SetSpanFields gets a reference to the given []TracingSpanFieldsFilterType and assigns it to the SpanFields field.
func (o *TracingLabelFilters) SetSpanFields(v []TracingSpanFieldsFilterType) {
	o.SpanFields = v
}

// GetSubsystemName returns the SubsystemName field value if set, zero value otherwise.
func (o *TracingLabelFilters) GetSubsystemName() []TracingFilterType {
	if o == nil || IsNil(o.SubsystemName) {
		var ret []TracingFilterType
		return ret
	}
	return o.SubsystemName
}

// GetSubsystemNameOk returns a tuple with the SubsystemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TracingLabelFilters) GetSubsystemNameOk() ([]TracingFilterType, bool) {
	if o == nil || IsNil(o.SubsystemName) {
		return nil, false
	}
	return o.SubsystemName, true
}

// HasSubsystemName returns a boolean if a field has been set.
func (o *TracingLabelFilters) HasSubsystemName() bool {
	if o != nil && !IsNil(o.SubsystemName) {
		return true
	}

	return false
}

// SetSubsystemName gets a reference to the given []TracingFilterType and assigns it to the SubsystemName field.
func (o *TracingLabelFilters) SetSubsystemName(v []TracingFilterType) {
	o.SubsystemName = v
}

func (o TracingLabelFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TracingLabelFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicationName) {
		toSerialize["applicationName"] = o.ApplicationName
	}
	if !IsNil(o.OperationName) {
		toSerialize["operationName"] = o.OperationName
	}
	if !IsNil(o.ServiceName) {
		toSerialize["serviceName"] = o.ServiceName
	}
	if !IsNil(o.SpanFields) {
		toSerialize["spanFields"] = o.SpanFields
	}
	if !IsNil(o.SubsystemName) {
		toSerialize["subsystemName"] = o.SubsystemName
	}
	return toSerialize, nil
}

type NullableTracingLabelFilters struct {
	value *TracingLabelFilters
	isSet bool
}

func (v NullableTracingLabelFilters) Get() *TracingLabelFilters {
	return v.value
}

func (v *NullableTracingLabelFilters) Set(val *TracingLabelFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableTracingLabelFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableTracingLabelFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTracingLabelFilters(val *TracingLabelFilters) *NullableTracingLabelFilters {
	return &NullableTracingLabelFilters{value: val, isSet: true}
}

func (v NullableTracingLabelFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTracingLabelFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


