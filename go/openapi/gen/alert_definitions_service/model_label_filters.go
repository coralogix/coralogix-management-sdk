/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
)

// checks if the LabelFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LabelFilters{}

// LabelFilters Filters for application name, subsystem name, and log severities
type LabelFilters struct {
	ApplicationName []LabelFilterType `json:"applicationName,omitempty"`
	Severities []LogSeverity `json:"severities,omitempty"`
	SubsystemName []LabelFilterType `json:"subsystemName,omitempty"`
}

// NewLabelFilters instantiates a new LabelFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLabelFilters() *LabelFilters {
	this := LabelFilters{}
	return &this
}

// NewLabelFiltersWithDefaults instantiates a new LabelFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelFiltersWithDefaults() *LabelFilters {
	this := LabelFilters{}
	return &this
}

// GetApplicationName returns the ApplicationName field value if set, zero value otherwise.
func (o *LabelFilters) GetApplicationName() []LabelFilterType {
	if o == nil || IsNil(o.ApplicationName) {
		var ret []LabelFilterType
		return ret
	}
	return o.ApplicationName
}

// GetApplicationNameOk returns a tuple with the ApplicationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelFilters) GetApplicationNameOk() ([]LabelFilterType, bool) {
	if o == nil || IsNil(o.ApplicationName) {
		return nil, false
	}
	return o.ApplicationName, true
}

// HasApplicationName returns a boolean if a field has been set.
func (o *LabelFilters) HasApplicationName() bool {
	if o != nil && !IsNil(o.ApplicationName) {
		return true
	}

	return false
}

// SetApplicationName gets a reference to the given []LabelFilterType and assigns it to the ApplicationName field.
func (o *LabelFilters) SetApplicationName(v []LabelFilterType) {
	o.ApplicationName = v
}

// GetSeverities returns the Severities field value if set, zero value otherwise.
func (o *LabelFilters) GetSeverities() []LogSeverity {
	if o == nil || IsNil(o.Severities) {
		var ret []LogSeverity
		return ret
	}
	return o.Severities
}

// GetSeveritiesOk returns a tuple with the Severities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelFilters) GetSeveritiesOk() ([]LogSeverity, bool) {
	if o == nil || IsNil(o.Severities) {
		return nil, false
	}
	return o.Severities, true
}

// HasSeverities returns a boolean if a field has been set.
func (o *LabelFilters) HasSeverities() bool {
	if o != nil && !IsNil(o.Severities) {
		return true
	}

	return false
}

// SetSeverities gets a reference to the given []LogSeverity and assigns it to the Severities field.
func (o *LabelFilters) SetSeverities(v []LogSeverity) {
	o.Severities = v
}

// GetSubsystemName returns the SubsystemName field value if set, zero value otherwise.
func (o *LabelFilters) GetSubsystemName() []LabelFilterType {
	if o == nil || IsNil(o.SubsystemName) {
		var ret []LabelFilterType
		return ret
	}
	return o.SubsystemName
}

// GetSubsystemNameOk returns a tuple with the SubsystemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelFilters) GetSubsystemNameOk() ([]LabelFilterType, bool) {
	if o == nil || IsNil(o.SubsystemName) {
		return nil, false
	}
	return o.SubsystemName, true
}

// HasSubsystemName returns a boolean if a field has been set.
func (o *LabelFilters) HasSubsystemName() bool {
	if o != nil && !IsNil(o.SubsystemName) {
		return true
	}

	return false
}

// SetSubsystemName gets a reference to the given []LabelFilterType and assigns it to the SubsystemName field.
func (o *LabelFilters) SetSubsystemName(v []LabelFilterType) {
	o.SubsystemName = v
}

func (o LabelFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LabelFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicationName) {
		toSerialize["applicationName"] = o.ApplicationName
	}
	if !IsNil(o.Severities) {
		toSerialize["severities"] = o.Severities
	}
	if !IsNil(o.SubsystemName) {
		toSerialize["subsystemName"] = o.SubsystemName
	}
	return toSerialize, nil
}

type NullableLabelFilters struct {
	value *LabelFilters
	isSet bool
}

func (v NullableLabelFilters) Get() *LabelFilters {
	return v.value
}

func (v *NullableLabelFilters) Set(val *LabelFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelFilters(val *LabelFilters) *NullableLabelFilters {
	return &NullableLabelFilters{value: val, isSet: true}
}

func (v NullableLabelFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


