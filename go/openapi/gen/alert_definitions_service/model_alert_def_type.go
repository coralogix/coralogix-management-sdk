/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
)

// AlertDefType the model 'AlertDefType'
type AlertDefType string

// List of AlertDefType
const (
	ALERTDEFTYPE_ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED AlertDefType = "ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED"
	ALERTDEFTYPE_ALERT_DEF_TYPE_LOGS_THRESHOLD AlertDefType = "ALERT_DEF_TYPE_LOGS_THRESHOLD"
	ALERTDEFTYPE_ALERT_DEF_TYPE_LOGS_ANOMALY AlertDefType = "ALERT_DEF_TYPE_LOGS_ANOMALY"
	ALERTDEFTYPE_ALERT_DEF_TYPE_LOGS_RATIO_THRESHOLD AlertDefType = "ALERT_DEF_TYPE_LOGS_RATIO_THRESHOLD"
	ALERTDEFTYPE_ALERT_DEF_TYPE_LOGS_NEW_VALUE AlertDefType = "ALERT_DEF_TYPE_LOGS_NEW_VALUE"
	ALERTDEFTYPE_ALERT_DEF_TYPE_LOGS_UNIQUE_COUNT AlertDefType = "ALERT_DEF_TYPE_LOGS_UNIQUE_COUNT"
	ALERTDEFTYPE_ALERT_DEF_TYPE_LOGS_TIME_RELATIVE_THRESHOLD AlertDefType = "ALERT_DEF_TYPE_LOGS_TIME_RELATIVE_THRESHOLD"
	ALERTDEFTYPE_ALERT_DEF_TYPE_METRIC_THRESHOLD AlertDefType = "ALERT_DEF_TYPE_METRIC_THRESHOLD"
	ALERTDEFTYPE_ALERT_DEF_TYPE_METRIC_ANOMALY AlertDefType = "ALERT_DEF_TYPE_METRIC_ANOMALY"
	ALERTDEFTYPE_ALERT_DEF_TYPE_TRACING_IMMEDIATE AlertDefType = "ALERT_DEF_TYPE_TRACING_IMMEDIATE"
	ALERTDEFTYPE_ALERT_DEF_TYPE_TRACING_THRESHOLD AlertDefType = "ALERT_DEF_TYPE_TRACING_THRESHOLD"
	ALERTDEFTYPE_ALERT_DEF_TYPE_FLOW AlertDefType = "ALERT_DEF_TYPE_FLOW"
	ALERTDEFTYPE_ALERT_DEF_TYPE_SLO_THRESHOLD AlertDefType = "ALERT_DEF_TYPE_SLO_THRESHOLD"
)

// All allowed values of AlertDefType enum
var AllowedAlertDefTypeEnumValues = []AlertDefType{
	"ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED",
	"ALERT_DEF_TYPE_LOGS_THRESHOLD",
	"ALERT_DEF_TYPE_LOGS_ANOMALY",
	"ALERT_DEF_TYPE_LOGS_RATIO_THRESHOLD",
	"ALERT_DEF_TYPE_LOGS_NEW_VALUE",
	"ALERT_DEF_TYPE_LOGS_UNIQUE_COUNT",
	"ALERT_DEF_TYPE_LOGS_TIME_RELATIVE_THRESHOLD",
	"ALERT_DEF_TYPE_METRIC_THRESHOLD",
	"ALERT_DEF_TYPE_METRIC_ANOMALY",
	"ALERT_DEF_TYPE_TRACING_IMMEDIATE",
	"ALERT_DEF_TYPE_TRACING_THRESHOLD",
	"ALERT_DEF_TYPE_FLOW",
	"ALERT_DEF_TYPE_SLO_THRESHOLD",
}

func (v *AlertDefType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertDefType(value)
	for _, existing := range AllowedAlertDefTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertDefType", value)
}

// NewAlertDefTypeFromValue returns a pointer to a valid AlertDefType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertDefTypeFromValue(v string) (*AlertDefType, error) {
	ev := AlertDefType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertDefType: valid values are %v", v, AllowedAlertDefTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertDefType) IsValid() bool {
	for _, existing := range AllowedAlertDefTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertDefType value
func (v AlertDefType) Ptr() *AlertDefType {
	return &v
}

type NullableAlertDefType struct {
	value *AlertDefType
	isSet bool
}

func (v NullableAlertDefType) Get() *AlertDefType {
	return v.value
}

func (v *NullableAlertDefType) Set(val *AlertDefType) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertDefType) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertDefType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertDefType(val *AlertDefType) *NullableAlertDefType {
	return &NullableAlertDefType{value: val, isSet: true}
}

func (v NullableAlertDefType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertDefType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

