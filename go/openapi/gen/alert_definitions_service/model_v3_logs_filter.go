/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
)

// checks if the V3LogsFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V3LogsFilter{}

// V3LogsFilter Filter configuration for log-based alerts
type V3LogsFilter struct {
	SimpleFilter *LogsSimpleFilter `json:"simpleFilter,omitempty"`
}

// NewV3LogsFilter instantiates a new V3LogsFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV3LogsFilter() *V3LogsFilter {
	this := V3LogsFilter{}
	return &this
}

// NewV3LogsFilterWithDefaults instantiates a new V3LogsFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV3LogsFilterWithDefaults() *V3LogsFilter {
	this := V3LogsFilter{}
	return &this
}

// GetSimpleFilter returns the SimpleFilter field value if set, zero value otherwise.
func (o *V3LogsFilter) GetSimpleFilter() LogsSimpleFilter {
	if o == nil || IsNil(o.SimpleFilter) {
		var ret LogsSimpleFilter
		return ret
	}
	return *o.SimpleFilter
}

// GetSimpleFilterOk returns a tuple with the SimpleFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3LogsFilter) GetSimpleFilterOk() (*LogsSimpleFilter, bool) {
	if o == nil || IsNil(o.SimpleFilter) {
		return nil, false
	}
	return o.SimpleFilter, true
}

// HasSimpleFilter returns a boolean if a field has been set.
func (o *V3LogsFilter) HasSimpleFilter() bool {
	if o != nil && !IsNil(o.SimpleFilter) {
		return true
	}

	return false
}

// SetSimpleFilter gets a reference to the given LogsSimpleFilter and assigns it to the SimpleFilter field.
func (o *V3LogsFilter) SetSimpleFilter(v LogsSimpleFilter) {
	o.SimpleFilter = &v
}

func (o V3LogsFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V3LogsFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SimpleFilter) {
		toSerialize["simpleFilter"] = o.SimpleFilter
	}
	return toSerialize, nil
}

type NullableV3LogsFilter struct {
	value *V3LogsFilter
	isSet bool
}

func (v NullableV3LogsFilter) Get() *V3LogsFilter {
	return v.value
}

func (v *NullableV3LogsFilter) Set(val *V3LogsFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableV3LogsFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableV3LogsFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3LogsFilter(val *V3LogsFilter) *NullableV3LogsFilter {
	return &NullableV3LogsFilter{value: val, isSet: true}
}

func (v NullableV3LogsFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3LogsFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


