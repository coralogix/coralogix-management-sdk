/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LogsAnomalyCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogsAnomalyCondition{}

// LogsAnomalyCondition Defines conditions for detecting log anomalies
type LogsAnomalyCondition struct {
	ConditionType LogsAnomalyConditionType `json:"conditionType"`
	// The threshold value for the alert condition
	MinimumThreshold float64 `json:"minimumThreshold"`
	TimeWindow LogsTimeWindow `json:"timeWindow"`
}

type _LogsAnomalyCondition LogsAnomalyCondition

// NewLogsAnomalyCondition instantiates a new LogsAnomalyCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsAnomalyCondition(conditionType LogsAnomalyConditionType, minimumThreshold float64, timeWindow LogsTimeWindow) *LogsAnomalyCondition {
	this := LogsAnomalyCondition{}
	this.ConditionType = conditionType
	this.MinimumThreshold = minimumThreshold
	this.TimeWindow = timeWindow
	return &this
}

// NewLogsAnomalyConditionWithDefaults instantiates a new LogsAnomalyCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsAnomalyConditionWithDefaults() *LogsAnomalyCondition {
	this := LogsAnomalyCondition{}
	return &this
}

// GetConditionType returns the ConditionType field value
func (o *LogsAnomalyCondition) GetConditionType() LogsAnomalyConditionType {
	if o == nil {
		var ret LogsAnomalyConditionType
		return ret
	}

	return o.ConditionType
}

// GetConditionTypeOk returns a tuple with the ConditionType field value
// and a boolean to check if the value has been set.
func (o *LogsAnomalyCondition) GetConditionTypeOk() (*LogsAnomalyConditionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConditionType, true
}

// SetConditionType sets field value
func (o *LogsAnomalyCondition) SetConditionType(v LogsAnomalyConditionType) {
	o.ConditionType = v
}

// GetMinimumThreshold returns the MinimumThreshold field value
func (o *LogsAnomalyCondition) GetMinimumThreshold() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.MinimumThreshold
}

// GetMinimumThresholdOk returns a tuple with the MinimumThreshold field value
// and a boolean to check if the value has been set.
func (o *LogsAnomalyCondition) GetMinimumThresholdOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinimumThreshold, true
}

// SetMinimumThreshold sets field value
func (o *LogsAnomalyCondition) SetMinimumThreshold(v float64) {
	o.MinimumThreshold = v
}

// GetTimeWindow returns the TimeWindow field value
func (o *LogsAnomalyCondition) GetTimeWindow() LogsTimeWindow {
	if o == nil {
		var ret LogsTimeWindow
		return ret
	}

	return o.TimeWindow
}

// GetTimeWindowOk returns a tuple with the TimeWindow field value
// and a boolean to check if the value has been set.
func (o *LogsAnomalyCondition) GetTimeWindowOk() (*LogsTimeWindow, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeWindow, true
}

// SetTimeWindow sets field value
func (o *LogsAnomalyCondition) SetTimeWindow(v LogsTimeWindow) {
	o.TimeWindow = v
}

func (o LogsAnomalyCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogsAnomalyCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["conditionType"] = o.ConditionType
	toSerialize["minimumThreshold"] = o.MinimumThreshold
	toSerialize["timeWindow"] = o.TimeWindow
	return toSerialize, nil
}

func (o *LogsAnomalyCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"conditionType",
		"minimumThreshold",
		"timeWindow",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogsAnomalyCondition := _LogsAnomalyCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogsAnomalyCondition)

	if err != nil {
		return err
	}

	*o = LogsAnomalyCondition(varLogsAnomalyCondition)

	return err
}

type NullableLogsAnomalyCondition struct {
	value *LogsAnomalyCondition
	isSet bool
}

func (v NullableLogsAnomalyCondition) Get() *LogsAnomalyCondition {
	return v.value
}

func (v *NullableLogsAnomalyCondition) Set(val *LogsAnomalyCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsAnomalyCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsAnomalyCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsAnomalyCondition(val *LogsAnomalyCondition) *NullableLogsAnomalyCondition {
	return &NullableLogsAnomalyCondition{value: val, isSet: true}
}

func (v NullableLogsAnomalyCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsAnomalyCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


