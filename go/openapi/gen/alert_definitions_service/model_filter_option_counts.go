/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
)

// checks if the FilterOptionCounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterOptionCounts{}

// FilterOptionCounts Counts for different filter options
type FilterOptionCounts struct {
	EnabledCounts []EnabledCount `json:"enabledCounts,omitempty"`
	EntityLabelCounts []EntityLabelCount `json:"entityLabelCounts,omitempty"`
	PriorityCounts []PriorityCount `json:"priorityCounts,omitempty"`
	StatusCounts []StatusCount `json:"statusCounts,omitempty"`
	TypeCounts []TypeCount `json:"typeCounts,omitempty"`
}

// NewFilterOptionCounts instantiates a new FilterOptionCounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterOptionCounts() *FilterOptionCounts {
	this := FilterOptionCounts{}
	return &this
}

// NewFilterOptionCountsWithDefaults instantiates a new FilterOptionCounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterOptionCountsWithDefaults() *FilterOptionCounts {
	this := FilterOptionCounts{}
	return &this
}

// GetEnabledCounts returns the EnabledCounts field value if set, zero value otherwise.
func (o *FilterOptionCounts) GetEnabledCounts() []EnabledCount {
	if o == nil || IsNil(o.EnabledCounts) {
		var ret []EnabledCount
		return ret
	}
	return o.EnabledCounts
}

// GetEnabledCountsOk returns a tuple with the EnabledCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterOptionCounts) GetEnabledCountsOk() ([]EnabledCount, bool) {
	if o == nil || IsNil(o.EnabledCounts) {
		return nil, false
	}
	return o.EnabledCounts, true
}

// HasEnabledCounts returns a boolean if a field has been set.
func (o *FilterOptionCounts) HasEnabledCounts() bool {
	if o != nil && !IsNil(o.EnabledCounts) {
		return true
	}

	return false
}

// SetEnabledCounts gets a reference to the given []EnabledCount and assigns it to the EnabledCounts field.
func (o *FilterOptionCounts) SetEnabledCounts(v []EnabledCount) {
	o.EnabledCounts = v
}

// GetEntityLabelCounts returns the EntityLabelCounts field value if set, zero value otherwise.
func (o *FilterOptionCounts) GetEntityLabelCounts() []EntityLabelCount {
	if o == nil || IsNil(o.EntityLabelCounts) {
		var ret []EntityLabelCount
		return ret
	}
	return o.EntityLabelCounts
}

// GetEntityLabelCountsOk returns a tuple with the EntityLabelCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterOptionCounts) GetEntityLabelCountsOk() ([]EntityLabelCount, bool) {
	if o == nil || IsNil(o.EntityLabelCounts) {
		return nil, false
	}
	return o.EntityLabelCounts, true
}

// HasEntityLabelCounts returns a boolean if a field has been set.
func (o *FilterOptionCounts) HasEntityLabelCounts() bool {
	if o != nil && !IsNil(o.EntityLabelCounts) {
		return true
	}

	return false
}

// SetEntityLabelCounts gets a reference to the given []EntityLabelCount and assigns it to the EntityLabelCounts field.
func (o *FilterOptionCounts) SetEntityLabelCounts(v []EntityLabelCount) {
	o.EntityLabelCounts = v
}

// GetPriorityCounts returns the PriorityCounts field value if set, zero value otherwise.
func (o *FilterOptionCounts) GetPriorityCounts() []PriorityCount {
	if o == nil || IsNil(o.PriorityCounts) {
		var ret []PriorityCount
		return ret
	}
	return o.PriorityCounts
}

// GetPriorityCountsOk returns a tuple with the PriorityCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterOptionCounts) GetPriorityCountsOk() ([]PriorityCount, bool) {
	if o == nil || IsNil(o.PriorityCounts) {
		return nil, false
	}
	return o.PriorityCounts, true
}

// HasPriorityCounts returns a boolean if a field has been set.
func (o *FilterOptionCounts) HasPriorityCounts() bool {
	if o != nil && !IsNil(o.PriorityCounts) {
		return true
	}

	return false
}

// SetPriorityCounts gets a reference to the given []PriorityCount and assigns it to the PriorityCounts field.
func (o *FilterOptionCounts) SetPriorityCounts(v []PriorityCount) {
	o.PriorityCounts = v
}

// GetStatusCounts returns the StatusCounts field value if set, zero value otherwise.
func (o *FilterOptionCounts) GetStatusCounts() []StatusCount {
	if o == nil || IsNil(o.StatusCounts) {
		var ret []StatusCount
		return ret
	}
	return o.StatusCounts
}

// GetStatusCountsOk returns a tuple with the StatusCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterOptionCounts) GetStatusCountsOk() ([]StatusCount, bool) {
	if o == nil || IsNil(o.StatusCounts) {
		return nil, false
	}
	return o.StatusCounts, true
}

// HasStatusCounts returns a boolean if a field has been set.
func (o *FilterOptionCounts) HasStatusCounts() bool {
	if o != nil && !IsNil(o.StatusCounts) {
		return true
	}

	return false
}

// SetStatusCounts gets a reference to the given []StatusCount and assigns it to the StatusCounts field.
func (o *FilterOptionCounts) SetStatusCounts(v []StatusCount) {
	o.StatusCounts = v
}

// GetTypeCounts returns the TypeCounts field value if set, zero value otherwise.
func (o *FilterOptionCounts) GetTypeCounts() []TypeCount {
	if o == nil || IsNil(o.TypeCounts) {
		var ret []TypeCount
		return ret
	}
	return o.TypeCounts
}

// GetTypeCountsOk returns a tuple with the TypeCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterOptionCounts) GetTypeCountsOk() ([]TypeCount, bool) {
	if o == nil || IsNil(o.TypeCounts) {
		return nil, false
	}
	return o.TypeCounts, true
}

// HasTypeCounts returns a boolean if a field has been set.
func (o *FilterOptionCounts) HasTypeCounts() bool {
	if o != nil && !IsNil(o.TypeCounts) {
		return true
	}

	return false
}

// SetTypeCounts gets a reference to the given []TypeCount and assigns it to the TypeCounts field.
func (o *FilterOptionCounts) SetTypeCounts(v []TypeCount) {
	o.TypeCounts = v
}

func (o FilterOptionCounts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterOptionCounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnabledCounts) {
		toSerialize["enabledCounts"] = o.EnabledCounts
	}
	if !IsNil(o.EntityLabelCounts) {
		toSerialize["entityLabelCounts"] = o.EntityLabelCounts
	}
	if !IsNil(o.PriorityCounts) {
		toSerialize["priorityCounts"] = o.PriorityCounts
	}
	if !IsNil(o.StatusCounts) {
		toSerialize["statusCounts"] = o.StatusCounts
	}
	if !IsNil(o.TypeCounts) {
		toSerialize["typeCounts"] = o.TypeCounts
	}
	return toSerialize, nil
}

type NullableFilterOptionCounts struct {
	value *FilterOptionCounts
	isSet bool
}

func (v NullableFilterOptionCounts) Get() *FilterOptionCounts {
	return v.value
}

func (v *NullableFilterOptionCounts) Set(val *FilterOptionCounts) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterOptionCounts) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterOptionCounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterOptionCounts(val *FilterOptionCounts) *NullableFilterOptionCounts {
	return &NullableFilterOptionCounts{value: val, isSet: true}
}

func (v NullableFilterOptionCounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterOptionCounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


