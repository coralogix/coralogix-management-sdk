/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LogsThresholdRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogsThresholdRule{}

// LogsThresholdRule LogsThresholdRule is a message that defines a rule for log-based threshold alerts.
type LogsThresholdRule struct {
	Condition LogsThresholdCondition `json:"condition"`
	Override AlertDefOverride `json:"override"`
}

type _LogsThresholdRule LogsThresholdRule

// NewLogsThresholdRule instantiates a new LogsThresholdRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsThresholdRule(condition LogsThresholdCondition, override AlertDefOverride) *LogsThresholdRule {
	this := LogsThresholdRule{}
	this.Condition = condition
	this.Override = override
	return &this
}

// NewLogsThresholdRuleWithDefaults instantiates a new LogsThresholdRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsThresholdRuleWithDefaults() *LogsThresholdRule {
	this := LogsThresholdRule{}
	return &this
}

// GetCondition returns the Condition field value
func (o *LogsThresholdRule) GetCondition() LogsThresholdCondition {
	if o == nil {
		var ret LogsThresholdCondition
		return ret
	}

	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value
// and a boolean to check if the value has been set.
func (o *LogsThresholdRule) GetConditionOk() (*LogsThresholdCondition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Condition, true
}

// SetCondition sets field value
func (o *LogsThresholdRule) SetCondition(v LogsThresholdCondition) {
	o.Condition = v
}

// GetOverride returns the Override field value
func (o *LogsThresholdRule) GetOverride() AlertDefOverride {
	if o == nil {
		var ret AlertDefOverride
		return ret
	}

	return o.Override
}

// GetOverrideOk returns a tuple with the Override field value
// and a boolean to check if the value has been set.
func (o *LogsThresholdRule) GetOverrideOk() (*AlertDefOverride, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Override, true
}

// SetOverride sets field value
func (o *LogsThresholdRule) SetOverride(v AlertDefOverride) {
	o.Override = v
}

func (o LogsThresholdRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogsThresholdRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["condition"] = o.Condition
	toSerialize["override"] = o.Override
	return toSerialize, nil
}

func (o *LogsThresholdRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"condition",
		"override",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogsThresholdRule := _LogsThresholdRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogsThresholdRule)

	if err != nil {
		return err
	}

	*o = LogsThresholdRule(varLogsThresholdRule)

	return err
}

type NullableLogsThresholdRule struct {
	value *LogsThresholdRule
	isSet bool
}

func (v NullableLogsThresholdRule) Get() *LogsThresholdRule {
	return v.value
}

func (v *NullableLogsThresholdRule) Set(val *LogsThresholdRule) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsThresholdRule) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsThresholdRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsThresholdRule(val *LogsThresholdRule) *NullableLogsThresholdRule {
	return &NullableLogsThresholdRule{value: val, isSet: true}
}

func (v NullableLogsThresholdRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsThresholdRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


