/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V3SloDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V3SloDefinition{}

// V3SloDefinition Configuration for SLO definition
type V3SloDefinition struct {
	// The SLO ID
	SloId string `json:"sloId"`
}

type _V3SloDefinition V3SloDefinition

// NewV3SloDefinition instantiates a new V3SloDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV3SloDefinition(sloId string) *V3SloDefinition {
	this := V3SloDefinition{}
	this.SloId = sloId
	return &this
}

// NewV3SloDefinitionWithDefaults instantiates a new V3SloDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV3SloDefinitionWithDefaults() *V3SloDefinition {
	this := V3SloDefinition{}
	return &this
}

// GetSloId returns the SloId field value
func (o *V3SloDefinition) GetSloId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SloId
}

// GetSloIdOk returns a tuple with the SloId field value
// and a boolean to check if the value has been set.
func (o *V3SloDefinition) GetSloIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SloId, true
}

// SetSloId sets field value
func (o *V3SloDefinition) SetSloId(v string) {
	o.SloId = v
}

func (o V3SloDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V3SloDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sloId"] = o.SloId
	return toSerialize, nil
}

func (o *V3SloDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sloId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV3SloDefinition := _V3SloDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV3SloDefinition)

	if err != nil {
		return err
	}

	*o = V3SloDefinition(varV3SloDefinition)

	return err
}

type NullableV3SloDefinition struct {
	value *V3SloDefinition
	isSet bool
}

func (v NullableV3SloDefinition) Get() *V3SloDefinition {
	return v.value
}

func (v *NullableV3SloDefinition) Set(val *V3SloDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableV3SloDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableV3SloDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3SloDefinition(val *V3SloDefinition) *NullableV3SloDefinition {
	return &NullableV3SloDefinition{value: val, isSet: true}
}

func (v NullableV3SloDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3SloDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


