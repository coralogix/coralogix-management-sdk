/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
)

// checks if the EntityLabelCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityLabelCount{}

// EntityLabelCount Count for a specific entity label value
type EntityLabelCount struct {
	// The count for this entity label value
	Count *int64 `json:"count,omitempty"`
	// The entity label key
	LabelKey *string `json:"labelKey,omitempty"`
	// The entity label value
	LabelValue *string `json:"labelValue,omitempty"`
}

// NewEntityLabelCount instantiates a new EntityLabelCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityLabelCount() *EntityLabelCount {
	this := EntityLabelCount{}
	return &this
}

// NewEntityLabelCountWithDefaults instantiates a new EntityLabelCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityLabelCountWithDefaults() *EntityLabelCount {
	this := EntityLabelCount{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *EntityLabelCount) GetCount() int64 {
	if o == nil || IsNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityLabelCount) GetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *EntityLabelCount) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *EntityLabelCount) SetCount(v int64) {
	o.Count = &v
}

// GetLabelKey returns the LabelKey field value if set, zero value otherwise.
func (o *EntityLabelCount) GetLabelKey() string {
	if o == nil || IsNil(o.LabelKey) {
		var ret string
		return ret
	}
	return *o.LabelKey
}

// GetLabelKeyOk returns a tuple with the LabelKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityLabelCount) GetLabelKeyOk() (*string, bool) {
	if o == nil || IsNil(o.LabelKey) {
		return nil, false
	}
	return o.LabelKey, true
}

// HasLabelKey returns a boolean if a field has been set.
func (o *EntityLabelCount) HasLabelKey() bool {
	if o != nil && !IsNil(o.LabelKey) {
		return true
	}

	return false
}

// SetLabelKey gets a reference to the given string and assigns it to the LabelKey field.
func (o *EntityLabelCount) SetLabelKey(v string) {
	o.LabelKey = &v
}

// GetLabelValue returns the LabelValue field value if set, zero value otherwise.
func (o *EntityLabelCount) GetLabelValue() string {
	if o == nil || IsNil(o.LabelValue) {
		var ret string
		return ret
	}
	return *o.LabelValue
}

// GetLabelValueOk returns a tuple with the LabelValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityLabelCount) GetLabelValueOk() (*string, bool) {
	if o == nil || IsNil(o.LabelValue) {
		return nil, false
	}
	return o.LabelValue, true
}

// HasLabelValue returns a boolean if a field has been set.
func (o *EntityLabelCount) HasLabelValue() bool {
	if o != nil && !IsNil(o.LabelValue) {
		return true
	}

	return false
}

// SetLabelValue gets a reference to the given string and assigns it to the LabelValue field.
func (o *EntityLabelCount) SetLabelValue(v string) {
	o.LabelValue = &v
}

func (o EntityLabelCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityLabelCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.LabelKey) {
		toSerialize["labelKey"] = o.LabelKey
	}
	if !IsNil(o.LabelValue) {
		toSerialize["labelValue"] = o.LabelValue
	}
	return toSerialize, nil
}

type NullableEntityLabelCount struct {
	value *EntityLabelCount
	isSet bool
}

func (v NullableEntityLabelCount) Get() *EntityLabelCount {
	return v.value
}

func (v *NullableEntityLabelCount) Set(val *EntityLabelCount) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityLabelCount) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityLabelCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityLabelCount(val *EntityLabelCount) *NullableEntityLabelCount {
	return &NullableEntityLabelCount{value: val, isSet: true}
}

func (v NullableEntityLabelCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityLabelCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


