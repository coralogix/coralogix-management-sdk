/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
)

// checks if the TracingFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TracingFilter{}

// TracingFilter Filter configuration for tracing-based alerts
type TracingFilter struct {
	SimpleFilter *TracingSimpleFilter `json:"simpleFilter,omitempty"`
}

// NewTracingFilter instantiates a new TracingFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTracingFilter() *TracingFilter {
	this := TracingFilter{}
	return &this
}

// NewTracingFilterWithDefaults instantiates a new TracingFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTracingFilterWithDefaults() *TracingFilter {
	this := TracingFilter{}
	return &this
}

// GetSimpleFilter returns the SimpleFilter field value if set, zero value otherwise.
func (o *TracingFilter) GetSimpleFilter() TracingSimpleFilter {
	if o == nil || IsNil(o.SimpleFilter) {
		var ret TracingSimpleFilter
		return ret
	}
	return *o.SimpleFilter
}

// GetSimpleFilterOk returns a tuple with the SimpleFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TracingFilter) GetSimpleFilterOk() (*TracingSimpleFilter, bool) {
	if o == nil || IsNil(o.SimpleFilter) {
		return nil, false
	}
	return o.SimpleFilter, true
}

// HasSimpleFilter returns a boolean if a field has been set.
func (o *TracingFilter) HasSimpleFilter() bool {
	if o != nil && !IsNil(o.SimpleFilter) {
		return true
	}

	return false
}

// SetSimpleFilter gets a reference to the given TracingSimpleFilter and assigns it to the SimpleFilter field.
func (o *TracingFilter) SetSimpleFilter(v TracingSimpleFilter) {
	o.SimpleFilter = &v
}

func (o TracingFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TracingFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SimpleFilter) {
		toSerialize["simpleFilter"] = o.SimpleFilter
	}
	return toSerialize, nil
}

type NullableTracingFilter struct {
	value *TracingFilter
	isSet bool
}

func (v NullableTracingFilter) Get() *TracingFilter {
	return v.value
}

func (v *NullableTracingFilter) Set(val *TracingFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableTracingFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableTracingFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTracingFilter(val *TracingFilter) *NullableTracingFilter {
	return &NullableTracingFilter{value: val, isSet: true}
}

func (v NullableTracingFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTracingFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


