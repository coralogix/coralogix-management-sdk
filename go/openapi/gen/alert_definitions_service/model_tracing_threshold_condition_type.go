/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
)

// TracingThresholdConditionType the model 'TracingThresholdConditionType'
type TracingThresholdConditionType string

// List of TracingThresholdConditionType
const (
	TRACINGTHRESHOLDCONDITIONTYPE_TRACING_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED TracingThresholdConditionType = "TRACING_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
)

// All allowed values of TracingThresholdConditionType enum
var AllowedTracingThresholdConditionTypeEnumValues = []TracingThresholdConditionType{
	"TRACING_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED",
}

func (v *TracingThresholdConditionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TracingThresholdConditionType(value)
	for _, existing := range AllowedTracingThresholdConditionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TracingThresholdConditionType", value)
}

// NewTracingThresholdConditionTypeFromValue returns a pointer to a valid TracingThresholdConditionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTracingThresholdConditionTypeFromValue(v string) (*TracingThresholdConditionType, error) {
	ev := TracingThresholdConditionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TracingThresholdConditionType: valid values are %v", v, AllowedTracingThresholdConditionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TracingThresholdConditionType) IsValid() bool {
	for _, existing := range AllowedTracingThresholdConditionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TracingThresholdConditionType value
func (v TracingThresholdConditionType) Ptr() *TracingThresholdConditionType {
	return &v
}

type NullableTracingThresholdConditionType struct {
	value *TracingThresholdConditionType
	isSet bool
}

func (v NullableTracingThresholdConditionType) Get() *TracingThresholdConditionType {
	return v.value
}

func (v *NullableTracingThresholdConditionType) Set(val *TracingThresholdConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableTracingThresholdConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableTracingThresholdConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTracingThresholdConditionType(val *TracingThresholdConditionType) *NullableTracingThresholdConditionType {
	return &NullableTracingThresholdConditionType{value: val, isSet: true}
}

func (v NullableTracingThresholdConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTracingThresholdConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

