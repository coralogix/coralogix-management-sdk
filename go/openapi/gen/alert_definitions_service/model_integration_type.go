/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
)

// checks if the IntegrationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationType{}

// IntegrationType Defines the type of integration to use for notifications
type IntegrationType struct {
	// The integration ID for the notification
	IntegrationId *int64 `json:"integrationId,omitempty"`
}

// NewIntegrationType instantiates a new IntegrationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationType() *IntegrationType {
	this := IntegrationType{}
	return &this
}

// NewIntegrationTypeWithDefaults instantiates a new IntegrationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationTypeWithDefaults() *IntegrationType {
	this := IntegrationType{}
	return &this
}

// GetIntegrationId returns the IntegrationId field value if set, zero value otherwise.
func (o *IntegrationType) GetIntegrationId() int64 {
	if o == nil || IsNil(o.IntegrationId) {
		var ret int64
		return ret
	}
	return *o.IntegrationId
}

// GetIntegrationIdOk returns a tuple with the IntegrationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationType) GetIntegrationIdOk() (*int64, bool) {
	if o == nil || IsNil(o.IntegrationId) {
		return nil, false
	}
	return o.IntegrationId, true
}

// HasIntegrationId returns a boolean if a field has been set.
func (o *IntegrationType) HasIntegrationId() bool {
	if o != nil && !IsNil(o.IntegrationId) {
		return true
	}

	return false
}

// SetIntegrationId gets a reference to the given int64 and assigns it to the IntegrationId field.
func (o *IntegrationType) SetIntegrationId(v int64) {
	o.IntegrationId = &v
}

func (o IntegrationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IntegrationId) {
		toSerialize["integrationId"] = o.IntegrationId
	}
	return toSerialize, nil
}

type NullableIntegrationType struct {
	value *IntegrationType
	isSet bool
}

func (v NullableIntegrationType) Get() *IntegrationType {
	return v.value
}

func (v *NullableIntegrationType) Set(val *IntegrationType) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationType) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationType(val *IntegrationType) *NullableIntegrationType {
	return &NullableIntegrationType{value: val, isSet: true}
}

func (v NullableIntegrationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


