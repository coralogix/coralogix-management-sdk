/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LogsAnomalyType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogsAnomalyType{}

// LogsAnomalyType Configuration for alerts triggered by anomalous log patterns
type LogsAnomalyType struct {
	AnomalyAlertSettings *AnomalyAlertSettings `json:"anomalyAlertSettings,omitempty"`
	// The delay in milliseconds before evaluating the alert condition
	EvaluationDelayMs *int32 `json:"evaluationDelayMs,omitempty"`
	LogsFilter *V3LogsFilter `json:"logsFilter,omitempty"`
	NotificationPayloadFilter []string `json:"notificationPayloadFilter,omitempty"`
	Rules []LogsAnomalyRule `json:"rules"`
}

type _LogsAnomalyType LogsAnomalyType

// NewLogsAnomalyType instantiates a new LogsAnomalyType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsAnomalyType(rules []LogsAnomalyRule) *LogsAnomalyType {
	this := LogsAnomalyType{}
	this.Rules = rules
	return &this
}

// NewLogsAnomalyTypeWithDefaults instantiates a new LogsAnomalyType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsAnomalyTypeWithDefaults() *LogsAnomalyType {
	this := LogsAnomalyType{}
	return &this
}

// GetAnomalyAlertSettings returns the AnomalyAlertSettings field value if set, zero value otherwise.
func (o *LogsAnomalyType) GetAnomalyAlertSettings() AnomalyAlertSettings {
	if o == nil || IsNil(o.AnomalyAlertSettings) {
		var ret AnomalyAlertSettings
		return ret
	}
	return *o.AnomalyAlertSettings
}

// GetAnomalyAlertSettingsOk returns a tuple with the AnomalyAlertSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsAnomalyType) GetAnomalyAlertSettingsOk() (*AnomalyAlertSettings, bool) {
	if o == nil || IsNil(o.AnomalyAlertSettings) {
		return nil, false
	}
	return o.AnomalyAlertSettings, true
}

// HasAnomalyAlertSettings returns a boolean if a field has been set.
func (o *LogsAnomalyType) HasAnomalyAlertSettings() bool {
	if o != nil && !IsNil(o.AnomalyAlertSettings) {
		return true
	}

	return false
}

// SetAnomalyAlertSettings gets a reference to the given AnomalyAlertSettings and assigns it to the AnomalyAlertSettings field.
func (o *LogsAnomalyType) SetAnomalyAlertSettings(v AnomalyAlertSettings) {
	o.AnomalyAlertSettings = &v
}

// GetEvaluationDelayMs returns the EvaluationDelayMs field value if set, zero value otherwise.
func (o *LogsAnomalyType) GetEvaluationDelayMs() int32 {
	if o == nil || IsNil(o.EvaluationDelayMs) {
		var ret int32
		return ret
	}
	return *o.EvaluationDelayMs
}

// GetEvaluationDelayMsOk returns a tuple with the EvaluationDelayMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsAnomalyType) GetEvaluationDelayMsOk() (*int32, bool) {
	if o == nil || IsNil(o.EvaluationDelayMs) {
		return nil, false
	}
	return o.EvaluationDelayMs, true
}

// HasEvaluationDelayMs returns a boolean if a field has been set.
func (o *LogsAnomalyType) HasEvaluationDelayMs() bool {
	if o != nil && !IsNil(o.EvaluationDelayMs) {
		return true
	}

	return false
}

// SetEvaluationDelayMs gets a reference to the given int32 and assigns it to the EvaluationDelayMs field.
func (o *LogsAnomalyType) SetEvaluationDelayMs(v int32) {
	o.EvaluationDelayMs = &v
}

// GetLogsFilter returns the LogsFilter field value if set, zero value otherwise.
func (o *LogsAnomalyType) GetLogsFilter() V3LogsFilter {
	if o == nil || IsNil(o.LogsFilter) {
		var ret V3LogsFilter
		return ret
	}
	return *o.LogsFilter
}

// GetLogsFilterOk returns a tuple with the LogsFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsAnomalyType) GetLogsFilterOk() (*V3LogsFilter, bool) {
	if o == nil || IsNil(o.LogsFilter) {
		return nil, false
	}
	return o.LogsFilter, true
}

// HasLogsFilter returns a boolean if a field has been set.
func (o *LogsAnomalyType) HasLogsFilter() bool {
	if o != nil && !IsNil(o.LogsFilter) {
		return true
	}

	return false
}

// SetLogsFilter gets a reference to the given V3LogsFilter and assigns it to the LogsFilter field.
func (o *LogsAnomalyType) SetLogsFilter(v V3LogsFilter) {
	o.LogsFilter = &v
}

// GetNotificationPayloadFilter returns the NotificationPayloadFilter field value if set, zero value otherwise.
func (o *LogsAnomalyType) GetNotificationPayloadFilter() []string {
	if o == nil || IsNil(o.NotificationPayloadFilter) {
		var ret []string
		return ret
	}
	return o.NotificationPayloadFilter
}

// GetNotificationPayloadFilterOk returns a tuple with the NotificationPayloadFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsAnomalyType) GetNotificationPayloadFilterOk() ([]string, bool) {
	if o == nil || IsNil(o.NotificationPayloadFilter) {
		return nil, false
	}
	return o.NotificationPayloadFilter, true
}

// HasNotificationPayloadFilter returns a boolean if a field has been set.
func (o *LogsAnomalyType) HasNotificationPayloadFilter() bool {
	if o != nil && !IsNil(o.NotificationPayloadFilter) {
		return true
	}

	return false
}

// SetNotificationPayloadFilter gets a reference to the given []string and assigns it to the NotificationPayloadFilter field.
func (o *LogsAnomalyType) SetNotificationPayloadFilter(v []string) {
	o.NotificationPayloadFilter = v
}

// GetRules returns the Rules field value
func (o *LogsAnomalyType) GetRules() []LogsAnomalyRule {
	if o == nil {
		var ret []LogsAnomalyRule
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *LogsAnomalyType) GetRulesOk() ([]LogsAnomalyRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *LogsAnomalyType) SetRules(v []LogsAnomalyRule) {
	o.Rules = v
}

func (o LogsAnomalyType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogsAnomalyType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AnomalyAlertSettings) {
		toSerialize["anomalyAlertSettings"] = o.AnomalyAlertSettings
	}
	if !IsNil(o.EvaluationDelayMs) {
		toSerialize["evaluationDelayMs"] = o.EvaluationDelayMs
	}
	if !IsNil(o.LogsFilter) {
		toSerialize["logsFilter"] = o.LogsFilter
	}
	if !IsNil(o.NotificationPayloadFilter) {
		toSerialize["notificationPayloadFilter"] = o.NotificationPayloadFilter
	}
	toSerialize["rules"] = o.Rules
	return toSerialize, nil
}

func (o *LogsAnomalyType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogsAnomalyType := _LogsAnomalyType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogsAnomalyType)

	if err != nil {
		return err
	}

	*o = LogsAnomalyType(varLogsAnomalyType)

	return err
}

type NullableLogsAnomalyType struct {
	value *LogsAnomalyType
	isSet bool
}

func (v NullableLogsAnomalyType) Get() *LogsAnomalyType {
	return v.value
}

func (v *NullableLogsAnomalyType) Set(val *LogsAnomalyType) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsAnomalyType) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsAnomalyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsAnomalyType(val *LogsAnomalyType) *NullableLogsAnomalyType {
	return &NullableLogsAnomalyType{value: val, isSet: true}
}

func (v NullableLogsAnomalyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsAnomalyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


