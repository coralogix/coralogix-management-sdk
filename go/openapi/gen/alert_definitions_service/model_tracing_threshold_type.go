/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TracingThresholdType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TracingThresholdType{}

// TracingThresholdType Configuration for alerts based on trace count thresholds
type TracingThresholdType struct {
	NotificationPayloadFilter []string `json:"notificationPayloadFilter,omitempty"`
	Rules []TracingThresholdRule `json:"rules"`
	TracingFilter TracingFilter `json:"tracingFilter"`
}

type _TracingThresholdType TracingThresholdType

// NewTracingThresholdType instantiates a new TracingThresholdType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTracingThresholdType(rules []TracingThresholdRule, tracingFilter TracingFilter) *TracingThresholdType {
	this := TracingThresholdType{}
	this.Rules = rules
	this.TracingFilter = tracingFilter
	return &this
}

// NewTracingThresholdTypeWithDefaults instantiates a new TracingThresholdType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTracingThresholdTypeWithDefaults() *TracingThresholdType {
	this := TracingThresholdType{}
	return &this
}

// GetNotificationPayloadFilter returns the NotificationPayloadFilter field value if set, zero value otherwise.
func (o *TracingThresholdType) GetNotificationPayloadFilter() []string {
	if o == nil || IsNil(o.NotificationPayloadFilter) {
		var ret []string
		return ret
	}
	return o.NotificationPayloadFilter
}

// GetNotificationPayloadFilterOk returns a tuple with the NotificationPayloadFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TracingThresholdType) GetNotificationPayloadFilterOk() ([]string, bool) {
	if o == nil || IsNil(o.NotificationPayloadFilter) {
		return nil, false
	}
	return o.NotificationPayloadFilter, true
}

// HasNotificationPayloadFilter returns a boolean if a field has been set.
func (o *TracingThresholdType) HasNotificationPayloadFilter() bool {
	if o != nil && !IsNil(o.NotificationPayloadFilter) {
		return true
	}

	return false
}

// SetNotificationPayloadFilter gets a reference to the given []string and assigns it to the NotificationPayloadFilter field.
func (o *TracingThresholdType) SetNotificationPayloadFilter(v []string) {
	o.NotificationPayloadFilter = v
}

// GetRules returns the Rules field value
func (o *TracingThresholdType) GetRules() []TracingThresholdRule {
	if o == nil {
		var ret []TracingThresholdRule
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *TracingThresholdType) GetRulesOk() ([]TracingThresholdRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *TracingThresholdType) SetRules(v []TracingThresholdRule) {
	o.Rules = v
}

// GetTracingFilter returns the TracingFilter field value
func (o *TracingThresholdType) GetTracingFilter() TracingFilter {
	if o == nil {
		var ret TracingFilter
		return ret
	}

	return o.TracingFilter
}

// GetTracingFilterOk returns a tuple with the TracingFilter field value
// and a boolean to check if the value has been set.
func (o *TracingThresholdType) GetTracingFilterOk() (*TracingFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TracingFilter, true
}

// SetTracingFilter sets field value
func (o *TracingThresholdType) SetTracingFilter(v TracingFilter) {
	o.TracingFilter = v
}

func (o TracingThresholdType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TracingThresholdType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NotificationPayloadFilter) {
		toSerialize["notificationPayloadFilter"] = o.NotificationPayloadFilter
	}
	toSerialize["rules"] = o.Rules
	toSerialize["tracingFilter"] = o.TracingFilter
	return toSerialize, nil
}

func (o *TracingThresholdType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rules",
		"tracingFilter",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTracingThresholdType := _TracingThresholdType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTracingThresholdType)

	if err != nil {
		return err
	}

	*o = TracingThresholdType(varTracingThresholdType)

	return err
}

type NullableTracingThresholdType struct {
	value *TracingThresholdType
	isSet bool
}

func (v NullableTracingThresholdType) Get() *TracingThresholdType {
	return v.value
}

func (v *NullableTracingThresholdType) Set(val *TracingThresholdType) {
	v.value = val
	v.isSet = true
}

func (v NullableTracingThresholdType) IsSet() bool {
	return v.isSet
}

func (v *NullableTracingThresholdType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTracingThresholdType(val *TracingThresholdType) *NullableTracingThresholdType {
	return &NullableTracingThresholdType{value: val, isSet: true}
}

func (v NullableTracingThresholdType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTracingThresholdType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


