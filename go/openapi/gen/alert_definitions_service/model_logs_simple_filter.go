/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
)

// checks if the LogsSimpleFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogsSimpleFilter{}

// LogsSimpleFilter Basic filter configuration using a Lucene query and label filters
type LogsSimpleFilter struct {
	LabelFilters *LabelFilters `json:"labelFilters,omitempty"`
	LuceneQuery *string `json:"luceneQuery,omitempty"`
}

// NewLogsSimpleFilter instantiates a new LogsSimpleFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsSimpleFilter() *LogsSimpleFilter {
	this := LogsSimpleFilter{}
	return &this
}

// NewLogsSimpleFilterWithDefaults instantiates a new LogsSimpleFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsSimpleFilterWithDefaults() *LogsSimpleFilter {
	this := LogsSimpleFilter{}
	return &this
}

// GetLabelFilters returns the LabelFilters field value if set, zero value otherwise.
func (o *LogsSimpleFilter) GetLabelFilters() LabelFilters {
	if o == nil || IsNil(o.LabelFilters) {
		var ret LabelFilters
		return ret
	}
	return *o.LabelFilters
}

// GetLabelFiltersOk returns a tuple with the LabelFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsSimpleFilter) GetLabelFiltersOk() (*LabelFilters, bool) {
	if o == nil || IsNil(o.LabelFilters) {
		return nil, false
	}
	return o.LabelFilters, true
}

// HasLabelFilters returns a boolean if a field has been set.
func (o *LogsSimpleFilter) HasLabelFilters() bool {
	if o != nil && !IsNil(o.LabelFilters) {
		return true
	}

	return false
}

// SetLabelFilters gets a reference to the given LabelFilters and assigns it to the LabelFilters field.
func (o *LogsSimpleFilter) SetLabelFilters(v LabelFilters) {
	o.LabelFilters = &v
}

// GetLuceneQuery returns the LuceneQuery field value if set, zero value otherwise.
func (o *LogsSimpleFilter) GetLuceneQuery() string {
	if o == nil || IsNil(o.LuceneQuery) {
		var ret string
		return ret
	}
	return *o.LuceneQuery
}

// GetLuceneQueryOk returns a tuple with the LuceneQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsSimpleFilter) GetLuceneQueryOk() (*string, bool) {
	if o == nil || IsNil(o.LuceneQuery) {
		return nil, false
	}
	return o.LuceneQuery, true
}

// HasLuceneQuery returns a boolean if a field has been set.
func (o *LogsSimpleFilter) HasLuceneQuery() bool {
	if o != nil && !IsNil(o.LuceneQuery) {
		return true
	}

	return false
}

// SetLuceneQuery gets a reference to the given string and assigns it to the LuceneQuery field.
func (o *LogsSimpleFilter) SetLuceneQuery(v string) {
	o.LuceneQuery = &v
}

func (o LogsSimpleFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogsSimpleFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LabelFilters) {
		toSerialize["labelFilters"] = o.LabelFilters
	}
	if !IsNil(o.LuceneQuery) {
		toSerialize["luceneQuery"] = o.LuceneQuery
	}
	return toSerialize, nil
}

type NullableLogsSimpleFilter struct {
	value *LogsSimpleFilter
	isSet bool
}

func (v NullableLogsSimpleFilter) Get() *LogsSimpleFilter {
	return v.value
}

func (v *NullableLogsSimpleFilter) Set(val *LogsSimpleFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsSimpleFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsSimpleFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsSimpleFilter(val *LogsSimpleFilter) *NullableLogsSimpleFilter {
	return &NullableLogsSimpleFilter{value: val, isSet: true}
}

func (v NullableLogsSimpleFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsSimpleFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


