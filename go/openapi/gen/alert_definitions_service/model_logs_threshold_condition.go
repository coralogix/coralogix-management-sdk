/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LogsThresholdCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogsThresholdCondition{}

// LogsThresholdCondition LogsThresholdCondition is a message that defines the condition for log-based threshold alerts.
type LogsThresholdCondition struct {
	ConditionType LogsThresholdConditionType `json:"conditionType"`
	// The threshold value for the alert condition
	Threshold float64 `json:"threshold"`
	TimeWindow LogsTimeWindow `json:"timeWindow"`
}

type _LogsThresholdCondition LogsThresholdCondition

// NewLogsThresholdCondition instantiates a new LogsThresholdCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsThresholdCondition(conditionType LogsThresholdConditionType, threshold float64, timeWindow LogsTimeWindow) *LogsThresholdCondition {
	this := LogsThresholdCondition{}
	this.ConditionType = conditionType
	this.Threshold = threshold
	this.TimeWindow = timeWindow
	return &this
}

// NewLogsThresholdConditionWithDefaults instantiates a new LogsThresholdCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsThresholdConditionWithDefaults() *LogsThresholdCondition {
	this := LogsThresholdCondition{}
	return &this
}

// GetConditionType returns the ConditionType field value
func (o *LogsThresholdCondition) GetConditionType() LogsThresholdConditionType {
	if o == nil {
		var ret LogsThresholdConditionType
		return ret
	}

	return o.ConditionType
}

// GetConditionTypeOk returns a tuple with the ConditionType field value
// and a boolean to check if the value has been set.
func (o *LogsThresholdCondition) GetConditionTypeOk() (*LogsThresholdConditionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConditionType, true
}

// SetConditionType sets field value
func (o *LogsThresholdCondition) SetConditionType(v LogsThresholdConditionType) {
	o.ConditionType = v
}

// GetThreshold returns the Threshold field value
func (o *LogsThresholdCondition) GetThreshold() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value
// and a boolean to check if the value has been set.
func (o *LogsThresholdCondition) GetThresholdOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Threshold, true
}

// SetThreshold sets field value
func (o *LogsThresholdCondition) SetThreshold(v float64) {
	o.Threshold = v
}

// GetTimeWindow returns the TimeWindow field value
func (o *LogsThresholdCondition) GetTimeWindow() LogsTimeWindow {
	if o == nil {
		var ret LogsTimeWindow
		return ret
	}

	return o.TimeWindow
}

// GetTimeWindowOk returns a tuple with the TimeWindow field value
// and a boolean to check if the value has been set.
func (o *LogsThresholdCondition) GetTimeWindowOk() (*LogsTimeWindow, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeWindow, true
}

// SetTimeWindow sets field value
func (o *LogsThresholdCondition) SetTimeWindow(v LogsTimeWindow) {
	o.TimeWindow = v
}

func (o LogsThresholdCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogsThresholdCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["conditionType"] = o.ConditionType
	toSerialize["threshold"] = o.Threshold
	toSerialize["timeWindow"] = o.TimeWindow
	return toSerialize, nil
}

func (o *LogsThresholdCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"conditionType",
		"threshold",
		"timeWindow",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogsThresholdCondition := _LogsThresholdCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogsThresholdCondition)

	if err != nil {
		return err
	}

	*o = LogsThresholdCondition(varLogsThresholdCondition)

	return err
}

type NullableLogsThresholdCondition struct {
	value *LogsThresholdCondition
	isSet bool
}

func (v NullableLogsThresholdCondition) Get() *LogsThresholdCondition {
	return v.value
}

func (v *NullableLogsThresholdCondition) Set(val *LogsThresholdCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsThresholdCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsThresholdCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsThresholdCondition(val *LogsThresholdCondition) *NullableLogsThresholdCondition {
	return &NullableLogsThresholdCondition{value: val, isSet: true}
}

func (v NullableLogsThresholdCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsThresholdCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


