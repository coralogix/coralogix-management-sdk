/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MetricThresholdType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricThresholdType{}

// MetricThresholdType Configuration for alerts based on metric threshold violations
type MetricThresholdType struct {
	// The delay in milliseconds before evaluating the alert condition
	EvaluationDelayMs *int32 `json:"evaluationDelayMs,omitempty"`
	MetricFilter MetricFilter `json:"metricFilter"`
	MissingValues MetricMissingValues `json:"missingValues"`
	Rules []MetricThresholdRule `json:"rules"`
	UndetectedValuesManagement *V3UndetectedValuesManagement `json:"undetectedValuesManagement,omitempty"`
}

type _MetricThresholdType MetricThresholdType

// NewMetricThresholdType instantiates a new MetricThresholdType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricThresholdType(metricFilter MetricFilter, missingValues MetricMissingValues, rules []MetricThresholdRule) *MetricThresholdType {
	this := MetricThresholdType{}
	this.MetricFilter = metricFilter
	this.MissingValues = missingValues
	this.Rules = rules
	return &this
}

// NewMetricThresholdTypeWithDefaults instantiates a new MetricThresholdType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricThresholdTypeWithDefaults() *MetricThresholdType {
	this := MetricThresholdType{}
	return &this
}

// GetEvaluationDelayMs returns the EvaluationDelayMs field value if set, zero value otherwise.
func (o *MetricThresholdType) GetEvaluationDelayMs() int32 {
	if o == nil || IsNil(o.EvaluationDelayMs) {
		var ret int32
		return ret
	}
	return *o.EvaluationDelayMs
}

// GetEvaluationDelayMsOk returns a tuple with the EvaluationDelayMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricThresholdType) GetEvaluationDelayMsOk() (*int32, bool) {
	if o == nil || IsNil(o.EvaluationDelayMs) {
		return nil, false
	}
	return o.EvaluationDelayMs, true
}

// HasEvaluationDelayMs returns a boolean if a field has been set.
func (o *MetricThresholdType) HasEvaluationDelayMs() bool {
	if o != nil && !IsNil(o.EvaluationDelayMs) {
		return true
	}

	return false
}

// SetEvaluationDelayMs gets a reference to the given int32 and assigns it to the EvaluationDelayMs field.
func (o *MetricThresholdType) SetEvaluationDelayMs(v int32) {
	o.EvaluationDelayMs = &v
}

// GetMetricFilter returns the MetricFilter field value
func (o *MetricThresholdType) GetMetricFilter() MetricFilter {
	if o == nil {
		var ret MetricFilter
		return ret
	}

	return o.MetricFilter
}

// GetMetricFilterOk returns a tuple with the MetricFilter field value
// and a boolean to check if the value has been set.
func (o *MetricThresholdType) GetMetricFilterOk() (*MetricFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricFilter, true
}

// SetMetricFilter sets field value
func (o *MetricThresholdType) SetMetricFilter(v MetricFilter) {
	o.MetricFilter = v
}

// GetMissingValues returns the MissingValues field value
func (o *MetricThresholdType) GetMissingValues() MetricMissingValues {
	if o == nil {
		var ret MetricMissingValues
		return ret
	}

	return o.MissingValues
}

// GetMissingValuesOk returns a tuple with the MissingValues field value
// and a boolean to check if the value has been set.
func (o *MetricThresholdType) GetMissingValuesOk() (*MetricMissingValues, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MissingValues, true
}

// SetMissingValues sets field value
func (o *MetricThresholdType) SetMissingValues(v MetricMissingValues) {
	o.MissingValues = v
}

// GetRules returns the Rules field value
func (o *MetricThresholdType) GetRules() []MetricThresholdRule {
	if o == nil {
		var ret []MetricThresholdRule
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *MetricThresholdType) GetRulesOk() ([]MetricThresholdRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *MetricThresholdType) SetRules(v []MetricThresholdRule) {
	o.Rules = v
}

// GetUndetectedValuesManagement returns the UndetectedValuesManagement field value if set, zero value otherwise.
func (o *MetricThresholdType) GetUndetectedValuesManagement() V3UndetectedValuesManagement {
	if o == nil || IsNil(o.UndetectedValuesManagement) {
		var ret V3UndetectedValuesManagement
		return ret
	}
	return *o.UndetectedValuesManagement
}

// GetUndetectedValuesManagementOk returns a tuple with the UndetectedValuesManagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricThresholdType) GetUndetectedValuesManagementOk() (*V3UndetectedValuesManagement, bool) {
	if o == nil || IsNil(o.UndetectedValuesManagement) {
		return nil, false
	}
	return o.UndetectedValuesManagement, true
}

// HasUndetectedValuesManagement returns a boolean if a field has been set.
func (o *MetricThresholdType) HasUndetectedValuesManagement() bool {
	if o != nil && !IsNil(o.UndetectedValuesManagement) {
		return true
	}

	return false
}

// SetUndetectedValuesManagement gets a reference to the given V3UndetectedValuesManagement and assigns it to the UndetectedValuesManagement field.
func (o *MetricThresholdType) SetUndetectedValuesManagement(v V3UndetectedValuesManagement) {
	o.UndetectedValuesManagement = &v
}

func (o MetricThresholdType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricThresholdType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EvaluationDelayMs) {
		toSerialize["evaluationDelayMs"] = o.EvaluationDelayMs
	}
	toSerialize["metricFilter"] = o.MetricFilter
	toSerialize["missingValues"] = o.MissingValues
	toSerialize["rules"] = o.Rules
	if !IsNil(o.UndetectedValuesManagement) {
		toSerialize["undetectedValuesManagement"] = o.UndetectedValuesManagement
	}
	return toSerialize, nil
}

func (o *MetricThresholdType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metricFilter",
		"missingValues",
		"rules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetricThresholdType := _MetricThresholdType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetricThresholdType)

	if err != nil {
		return err
	}

	*o = MetricThresholdType(varMetricThresholdType)

	return err
}

type NullableMetricThresholdType struct {
	value *MetricThresholdType
	isSet bool
}

func (v NullableMetricThresholdType) Get() *MetricThresholdType {
	return v.value
}

func (v *NullableMetricThresholdType) Set(val *MetricThresholdType) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricThresholdType) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricThresholdType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricThresholdType(val *MetricThresholdType) *NullableMetricThresholdType {
	return &NullableMetricThresholdType{value: val, isSet: true}
}

func (v NullableMetricThresholdType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricThresholdType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


