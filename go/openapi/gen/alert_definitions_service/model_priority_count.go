/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
)

// checks if the PriorityCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriorityCount{}

// PriorityCount Count for a specific alert priority
type PriorityCount struct {
	// The count for this alert priority
	Count *int64 `json:"count,omitempty"`
	Priority *AlertDefPriority `json:"priority,omitempty"`
}

// NewPriorityCount instantiates a new PriorityCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriorityCount() *PriorityCount {
	this := PriorityCount{}
	return &this
}

// NewPriorityCountWithDefaults instantiates a new PriorityCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriorityCountWithDefaults() *PriorityCount {
	this := PriorityCount{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *PriorityCount) GetCount() int64 {
	if o == nil || IsNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriorityCount) GetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *PriorityCount) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *PriorityCount) SetCount(v int64) {
	o.Count = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *PriorityCount) GetPriority() AlertDefPriority {
	if o == nil || IsNil(o.Priority) {
		var ret AlertDefPriority
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriorityCount) GetPriorityOk() (*AlertDefPriority, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *PriorityCount) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given AlertDefPriority and assigns it to the Priority field.
func (o *PriorityCount) SetPriority(v AlertDefPriority) {
	o.Priority = &v
}

func (o PriorityCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriorityCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	return toSerialize, nil
}

type NullablePriorityCount struct {
	value *PriorityCount
	isSet bool
}

func (v NullablePriorityCount) Get() *PriorityCount {
	return v.value
}

func (v *NullablePriorityCount) Set(val *PriorityCount) {
	v.value = val
	v.isSet = true
}

func (v NullablePriorityCount) IsSet() bool {
	return v.isSet
}

func (v *NullablePriorityCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriorityCount(val *PriorityCount) *NullablePriorityCount {
	return &NullablePriorityCount{value: val, isSet: true}
}

func (v NullablePriorityCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriorityCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


