/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BurnRateThresholdSingle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BurnRateThresholdSingle{}

// BurnRateThresholdSingle Burn rate threshold definition
type BurnRateThresholdSingle struct {
	Rules []SloThresholdRule `json:"rules"`
	Single *BurnRateTypeSingle `json:"single,omitempty"`
}

type _BurnRateThresholdSingle BurnRateThresholdSingle

// NewBurnRateThresholdSingle instantiates a new BurnRateThresholdSingle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBurnRateThresholdSingle(rules []SloThresholdRule) *BurnRateThresholdSingle {
	this := BurnRateThresholdSingle{}
	this.Rules = rules
	return &this
}

// NewBurnRateThresholdSingleWithDefaults instantiates a new BurnRateThresholdSingle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBurnRateThresholdSingleWithDefaults() *BurnRateThresholdSingle {
	this := BurnRateThresholdSingle{}
	return &this
}

// GetRules returns the Rules field value
func (o *BurnRateThresholdSingle) GetRules() []SloThresholdRule {
	if o == nil {
		var ret []SloThresholdRule
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *BurnRateThresholdSingle) GetRulesOk() ([]SloThresholdRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *BurnRateThresholdSingle) SetRules(v []SloThresholdRule) {
	o.Rules = v
}

// GetSingle returns the Single field value if set, zero value otherwise.
func (o *BurnRateThresholdSingle) GetSingle() BurnRateTypeSingle {
	if o == nil || IsNil(o.Single) {
		var ret BurnRateTypeSingle
		return ret
	}
	return *o.Single
}

// GetSingleOk returns a tuple with the Single field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BurnRateThresholdSingle) GetSingleOk() (*BurnRateTypeSingle, bool) {
	if o == nil || IsNil(o.Single) {
		return nil, false
	}
	return o.Single, true
}

// HasSingle returns a boolean if a field has been set.
func (o *BurnRateThresholdSingle) HasSingle() bool {
	if o != nil && !IsNil(o.Single) {
		return true
	}

	return false
}

// SetSingle gets a reference to the given BurnRateTypeSingle and assigns it to the Single field.
func (o *BurnRateThresholdSingle) SetSingle(v BurnRateTypeSingle) {
	o.Single = &v
}

func (o BurnRateThresholdSingle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BurnRateThresholdSingle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rules"] = o.Rules
	if !IsNil(o.Single) {
		toSerialize["single"] = o.Single
	}
	return toSerialize, nil
}

func (o *BurnRateThresholdSingle) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBurnRateThresholdSingle := _BurnRateThresholdSingle{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBurnRateThresholdSingle)

	if err != nil {
		return err
	}

	*o = BurnRateThresholdSingle(varBurnRateThresholdSingle)

	return err
}

type NullableBurnRateThresholdSingle struct {
	value *BurnRateThresholdSingle
	isSet bool
}

func (v NullableBurnRateThresholdSingle) Get() *BurnRateThresholdSingle {
	return v.value
}

func (v *NullableBurnRateThresholdSingle) Set(val *BurnRateThresholdSingle) {
	v.value = val
	v.isSet = true
}

func (v NullableBurnRateThresholdSingle) IsSet() bool {
	return v.isSet
}

func (v *NullableBurnRateThresholdSingle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBurnRateThresholdSingle(val *BurnRateThresholdSingle) *NullableBurnRateThresholdSingle {
	return &NullableBurnRateThresholdSingle{value: val, isSet: true}
}

func (v NullableBurnRateThresholdSingle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBurnRateThresholdSingle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


