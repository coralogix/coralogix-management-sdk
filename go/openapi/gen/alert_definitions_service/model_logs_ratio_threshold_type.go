/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LogsRatioThresholdType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogsRatioThresholdType{}

// LogsRatioThresholdType Configuration for alerts based on the ratio between two log queries
type LogsRatioThresholdType struct {
	Denominator V3LogsFilter `json:"denominator"`
	// The alias for the denominator filter, used for display purposes
	DenominatorAlias *string `json:"denominatorAlias,omitempty"`
	// The delay in milliseconds before evaluating the alert condition
	EvaluationDelayMs *int32 `json:"evaluationDelayMs,omitempty"`
	GroupByFor *LogsRatioGroupByFor `json:"groupByFor,omitempty"`
	// The configuration for ignoring infinity values in the ratio
	IgnoreInfinity *bool `json:"ignoreInfinity,omitempty"`
	NotificationPayloadFilter []string `json:"notificationPayloadFilter,omitempty"`
	Numerator V3LogsFilter `json:"numerator"`
	// The alias for the numerator filter, used for display purposes
	NumeratorAlias *string `json:"numeratorAlias,omitempty"`
	Rules []LogsRatioRules `json:"rules"`
	UndetectedValuesManagement *V3UndetectedValuesManagement `json:"undetectedValuesManagement,omitempty"`
}

type _LogsRatioThresholdType LogsRatioThresholdType

// NewLogsRatioThresholdType instantiates a new LogsRatioThresholdType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsRatioThresholdType(denominator V3LogsFilter, numerator V3LogsFilter, rules []LogsRatioRules) *LogsRatioThresholdType {
	this := LogsRatioThresholdType{}
	this.Denominator = denominator
	this.Numerator = numerator
	this.Rules = rules
	return &this
}

// NewLogsRatioThresholdTypeWithDefaults instantiates a new LogsRatioThresholdType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsRatioThresholdTypeWithDefaults() *LogsRatioThresholdType {
	this := LogsRatioThresholdType{}
	return &this
}

// GetDenominator returns the Denominator field value
func (o *LogsRatioThresholdType) GetDenominator() V3LogsFilter {
	if o == nil {
		var ret V3LogsFilter
		return ret
	}

	return o.Denominator
}

// GetDenominatorOk returns a tuple with the Denominator field value
// and a boolean to check if the value has been set.
func (o *LogsRatioThresholdType) GetDenominatorOk() (*V3LogsFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Denominator, true
}

// SetDenominator sets field value
func (o *LogsRatioThresholdType) SetDenominator(v V3LogsFilter) {
	o.Denominator = v
}

// GetDenominatorAlias returns the DenominatorAlias field value if set, zero value otherwise.
func (o *LogsRatioThresholdType) GetDenominatorAlias() string {
	if o == nil || IsNil(o.DenominatorAlias) {
		var ret string
		return ret
	}
	return *o.DenominatorAlias
}

// GetDenominatorAliasOk returns a tuple with the DenominatorAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsRatioThresholdType) GetDenominatorAliasOk() (*string, bool) {
	if o == nil || IsNil(o.DenominatorAlias) {
		return nil, false
	}
	return o.DenominatorAlias, true
}

// HasDenominatorAlias returns a boolean if a field has been set.
func (o *LogsRatioThresholdType) HasDenominatorAlias() bool {
	if o != nil && !IsNil(o.DenominatorAlias) {
		return true
	}

	return false
}

// SetDenominatorAlias gets a reference to the given string and assigns it to the DenominatorAlias field.
func (o *LogsRatioThresholdType) SetDenominatorAlias(v string) {
	o.DenominatorAlias = &v
}

// GetEvaluationDelayMs returns the EvaluationDelayMs field value if set, zero value otherwise.
func (o *LogsRatioThresholdType) GetEvaluationDelayMs() int32 {
	if o == nil || IsNil(o.EvaluationDelayMs) {
		var ret int32
		return ret
	}
	return *o.EvaluationDelayMs
}

// GetEvaluationDelayMsOk returns a tuple with the EvaluationDelayMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsRatioThresholdType) GetEvaluationDelayMsOk() (*int32, bool) {
	if o == nil || IsNil(o.EvaluationDelayMs) {
		return nil, false
	}
	return o.EvaluationDelayMs, true
}

// HasEvaluationDelayMs returns a boolean if a field has been set.
func (o *LogsRatioThresholdType) HasEvaluationDelayMs() bool {
	if o != nil && !IsNil(o.EvaluationDelayMs) {
		return true
	}

	return false
}

// SetEvaluationDelayMs gets a reference to the given int32 and assigns it to the EvaluationDelayMs field.
func (o *LogsRatioThresholdType) SetEvaluationDelayMs(v int32) {
	o.EvaluationDelayMs = &v
}

// GetGroupByFor returns the GroupByFor field value if set, zero value otherwise.
func (o *LogsRatioThresholdType) GetGroupByFor() LogsRatioGroupByFor {
	if o == nil || IsNil(o.GroupByFor) {
		var ret LogsRatioGroupByFor
		return ret
	}
	return *o.GroupByFor
}

// GetGroupByForOk returns a tuple with the GroupByFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsRatioThresholdType) GetGroupByForOk() (*LogsRatioGroupByFor, bool) {
	if o == nil || IsNil(o.GroupByFor) {
		return nil, false
	}
	return o.GroupByFor, true
}

// HasGroupByFor returns a boolean if a field has been set.
func (o *LogsRatioThresholdType) HasGroupByFor() bool {
	if o != nil && !IsNil(o.GroupByFor) {
		return true
	}

	return false
}

// SetGroupByFor gets a reference to the given LogsRatioGroupByFor and assigns it to the GroupByFor field.
func (o *LogsRatioThresholdType) SetGroupByFor(v LogsRatioGroupByFor) {
	o.GroupByFor = &v
}

// GetIgnoreInfinity returns the IgnoreInfinity field value if set, zero value otherwise.
func (o *LogsRatioThresholdType) GetIgnoreInfinity() bool {
	if o == nil || IsNil(o.IgnoreInfinity) {
		var ret bool
		return ret
	}
	return *o.IgnoreInfinity
}

// GetIgnoreInfinityOk returns a tuple with the IgnoreInfinity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsRatioThresholdType) GetIgnoreInfinityOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreInfinity) {
		return nil, false
	}
	return o.IgnoreInfinity, true
}

// HasIgnoreInfinity returns a boolean if a field has been set.
func (o *LogsRatioThresholdType) HasIgnoreInfinity() bool {
	if o != nil && !IsNil(o.IgnoreInfinity) {
		return true
	}

	return false
}

// SetIgnoreInfinity gets a reference to the given bool and assigns it to the IgnoreInfinity field.
func (o *LogsRatioThresholdType) SetIgnoreInfinity(v bool) {
	o.IgnoreInfinity = &v
}

// GetNotificationPayloadFilter returns the NotificationPayloadFilter field value if set, zero value otherwise.
func (o *LogsRatioThresholdType) GetNotificationPayloadFilter() []string {
	if o == nil || IsNil(o.NotificationPayloadFilter) {
		var ret []string
		return ret
	}
	return o.NotificationPayloadFilter
}

// GetNotificationPayloadFilterOk returns a tuple with the NotificationPayloadFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsRatioThresholdType) GetNotificationPayloadFilterOk() ([]string, bool) {
	if o == nil || IsNil(o.NotificationPayloadFilter) {
		return nil, false
	}
	return o.NotificationPayloadFilter, true
}

// HasNotificationPayloadFilter returns a boolean if a field has been set.
func (o *LogsRatioThresholdType) HasNotificationPayloadFilter() bool {
	if o != nil && !IsNil(o.NotificationPayloadFilter) {
		return true
	}

	return false
}

// SetNotificationPayloadFilter gets a reference to the given []string and assigns it to the NotificationPayloadFilter field.
func (o *LogsRatioThresholdType) SetNotificationPayloadFilter(v []string) {
	o.NotificationPayloadFilter = v
}

// GetNumerator returns the Numerator field value
func (o *LogsRatioThresholdType) GetNumerator() V3LogsFilter {
	if o == nil {
		var ret V3LogsFilter
		return ret
	}

	return o.Numerator
}

// GetNumeratorOk returns a tuple with the Numerator field value
// and a boolean to check if the value has been set.
func (o *LogsRatioThresholdType) GetNumeratorOk() (*V3LogsFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Numerator, true
}

// SetNumerator sets field value
func (o *LogsRatioThresholdType) SetNumerator(v V3LogsFilter) {
	o.Numerator = v
}

// GetNumeratorAlias returns the NumeratorAlias field value if set, zero value otherwise.
func (o *LogsRatioThresholdType) GetNumeratorAlias() string {
	if o == nil || IsNil(o.NumeratorAlias) {
		var ret string
		return ret
	}
	return *o.NumeratorAlias
}

// GetNumeratorAliasOk returns a tuple with the NumeratorAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsRatioThresholdType) GetNumeratorAliasOk() (*string, bool) {
	if o == nil || IsNil(o.NumeratorAlias) {
		return nil, false
	}
	return o.NumeratorAlias, true
}

// HasNumeratorAlias returns a boolean if a field has been set.
func (o *LogsRatioThresholdType) HasNumeratorAlias() bool {
	if o != nil && !IsNil(o.NumeratorAlias) {
		return true
	}

	return false
}

// SetNumeratorAlias gets a reference to the given string and assigns it to the NumeratorAlias field.
func (o *LogsRatioThresholdType) SetNumeratorAlias(v string) {
	o.NumeratorAlias = &v
}

// GetRules returns the Rules field value
func (o *LogsRatioThresholdType) GetRules() []LogsRatioRules {
	if o == nil {
		var ret []LogsRatioRules
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *LogsRatioThresholdType) GetRulesOk() ([]LogsRatioRules, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *LogsRatioThresholdType) SetRules(v []LogsRatioRules) {
	o.Rules = v
}

// GetUndetectedValuesManagement returns the UndetectedValuesManagement field value if set, zero value otherwise.
func (o *LogsRatioThresholdType) GetUndetectedValuesManagement() V3UndetectedValuesManagement {
	if o == nil || IsNil(o.UndetectedValuesManagement) {
		var ret V3UndetectedValuesManagement
		return ret
	}
	return *o.UndetectedValuesManagement
}

// GetUndetectedValuesManagementOk returns a tuple with the UndetectedValuesManagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsRatioThresholdType) GetUndetectedValuesManagementOk() (*V3UndetectedValuesManagement, bool) {
	if o == nil || IsNil(o.UndetectedValuesManagement) {
		return nil, false
	}
	return o.UndetectedValuesManagement, true
}

// HasUndetectedValuesManagement returns a boolean if a field has been set.
func (o *LogsRatioThresholdType) HasUndetectedValuesManagement() bool {
	if o != nil && !IsNil(o.UndetectedValuesManagement) {
		return true
	}

	return false
}

// SetUndetectedValuesManagement gets a reference to the given V3UndetectedValuesManagement and assigns it to the UndetectedValuesManagement field.
func (o *LogsRatioThresholdType) SetUndetectedValuesManagement(v V3UndetectedValuesManagement) {
	o.UndetectedValuesManagement = &v
}

func (o LogsRatioThresholdType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogsRatioThresholdType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["denominator"] = o.Denominator
	if !IsNil(o.DenominatorAlias) {
		toSerialize["denominatorAlias"] = o.DenominatorAlias
	}
	if !IsNil(o.EvaluationDelayMs) {
		toSerialize["evaluationDelayMs"] = o.EvaluationDelayMs
	}
	if !IsNil(o.GroupByFor) {
		toSerialize["groupByFor"] = o.GroupByFor
	}
	if !IsNil(o.IgnoreInfinity) {
		toSerialize["ignoreInfinity"] = o.IgnoreInfinity
	}
	if !IsNil(o.NotificationPayloadFilter) {
		toSerialize["notificationPayloadFilter"] = o.NotificationPayloadFilter
	}
	toSerialize["numerator"] = o.Numerator
	if !IsNil(o.NumeratorAlias) {
		toSerialize["numeratorAlias"] = o.NumeratorAlias
	}
	toSerialize["rules"] = o.Rules
	if !IsNil(o.UndetectedValuesManagement) {
		toSerialize["undetectedValuesManagement"] = o.UndetectedValuesManagement
	}
	return toSerialize, nil
}

func (o *LogsRatioThresholdType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"denominator",
		"numerator",
		"rules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogsRatioThresholdType := _LogsRatioThresholdType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogsRatioThresholdType)

	if err != nil {
		return err
	}

	*o = LogsRatioThresholdType(varLogsRatioThresholdType)

	return err
}

type NullableLogsRatioThresholdType struct {
	value *LogsRatioThresholdType
	isSet bool
}

func (v NullableLogsRatioThresholdType) Get() *LogsRatioThresholdType {
	return v.value
}

func (v *NullableLogsRatioThresholdType) Set(val *LogsRatioThresholdType) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsRatioThresholdType) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsRatioThresholdType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsRatioThresholdType(val *LogsRatioThresholdType) *NullableLogsRatioThresholdType {
	return &NullableLogsRatioThresholdType{value: val, isSet: true}
}

func (v NullableLogsRatioThresholdType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsRatioThresholdType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


