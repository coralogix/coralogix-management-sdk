/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// V3IntegrationType - struct for V3IntegrationType
type V3IntegrationType struct {
	IntegrationTypeIntegrationId *IntegrationTypeIntegrationId
	IntegrationTypeRecipients *IntegrationTypeRecipients
}

// IntegrationTypeIntegrationIdAsV3IntegrationType is a convenience function that returns IntegrationTypeIntegrationId wrapped in V3IntegrationType
func IntegrationTypeIntegrationIdAsV3IntegrationType(v *IntegrationTypeIntegrationId) V3IntegrationType {
	return V3IntegrationType{
		IntegrationTypeIntegrationId: v,
	}
}

// IntegrationTypeRecipientsAsV3IntegrationType is a convenience function that returns IntegrationTypeRecipients wrapped in V3IntegrationType
func IntegrationTypeRecipientsAsV3IntegrationType(v *IntegrationTypeRecipients) V3IntegrationType {
	return V3IntegrationType{
		IntegrationTypeRecipients: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *V3IntegrationType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IntegrationTypeIntegrationId
	err = newStrictDecoder(data).Decode(&dst.IntegrationTypeIntegrationId)
	if err == nil {
		jsonIntegrationTypeIntegrationId, _ := json.Marshal(dst.IntegrationTypeIntegrationId)
		if string(jsonIntegrationTypeIntegrationId) == "{}" { // empty struct
			dst.IntegrationTypeIntegrationId = nil
		} else {
			if err = validator.Validate(dst.IntegrationTypeIntegrationId); err != nil {
				dst.IntegrationTypeIntegrationId = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationTypeIntegrationId = nil
	}

	// try to unmarshal data into IntegrationTypeRecipients
	err = newStrictDecoder(data).Decode(&dst.IntegrationTypeRecipients)
	if err == nil {
		jsonIntegrationTypeRecipients, _ := json.Marshal(dst.IntegrationTypeRecipients)
		if string(jsonIntegrationTypeRecipients) == "{}" { // empty struct
			dst.IntegrationTypeRecipients = nil
		} else {
			if err = validator.Validate(dst.IntegrationTypeRecipients); err != nil {
				dst.IntegrationTypeRecipients = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegrationTypeRecipients = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IntegrationTypeIntegrationId = nil
		dst.IntegrationTypeRecipients = nil

		return fmt.Errorf("data matches more than one schema in oneOf(V3IntegrationType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(V3IntegrationType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src V3IntegrationType) MarshalJSON() ([]byte, error) {
	if src.IntegrationTypeIntegrationId != nil {
		return json.Marshal(&src.IntegrationTypeIntegrationId)
	}

	if src.IntegrationTypeRecipients != nil {
		return json.Marshal(&src.IntegrationTypeRecipients)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *V3IntegrationType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IntegrationTypeIntegrationId != nil {
		return obj.IntegrationTypeIntegrationId
	}

	if obj.IntegrationTypeRecipients != nil {
		return obj.IntegrationTypeRecipients
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj V3IntegrationType) GetActualInstanceValue() (interface{}) {
	if obj.IntegrationTypeIntegrationId != nil {
		return *obj.IntegrationTypeIntegrationId
	}

	if obj.IntegrationTypeRecipients != nil {
		return *obj.IntegrationTypeRecipients
	}

	// all schemas are nil
	return nil
}

type NullableV3IntegrationType struct {
	value *V3IntegrationType
	isSet bool
}

func (v NullableV3IntegrationType) Get() *V3IntegrationType {
	return v.value
}

func (v *NullableV3IntegrationType) Set(val *V3IntegrationType) {
	v.value = val
	v.isSet = true
}

func (v NullableV3IntegrationType) IsSet() bool {
	return v.isSet
}

func (v *NullableV3IntegrationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3IntegrationType(val *V3IntegrationType) *NullableV3IntegrationType {
	return &NullableV3IntegrationType{value: val, isSet: true}
}

func (v NullableV3IntegrationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3IntegrationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


