/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FlowType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowType{}

// FlowType Configuration for flow-based alerts with multiple stages
type FlowType struct {
	EnforceSuppression *bool `json:"enforceSuppression,omitempty"`
	Stages []FlowStages `json:"stages"`
}

type _FlowType FlowType

// NewFlowType instantiates a new FlowType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlowType(stages []FlowStages) *FlowType {
	this := FlowType{}
	this.Stages = stages
	return &this
}

// NewFlowTypeWithDefaults instantiates a new FlowType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowTypeWithDefaults() *FlowType {
	this := FlowType{}
	return &this
}

// GetEnforceSuppression returns the EnforceSuppression field value if set, zero value otherwise.
func (o *FlowType) GetEnforceSuppression() bool {
	if o == nil || IsNil(o.EnforceSuppression) {
		var ret bool
		return ret
	}
	return *o.EnforceSuppression
}

// GetEnforceSuppressionOk returns a tuple with the EnforceSuppression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowType) GetEnforceSuppressionOk() (*bool, bool) {
	if o == nil || IsNil(o.EnforceSuppression) {
		return nil, false
	}
	return o.EnforceSuppression, true
}

// HasEnforceSuppression returns a boolean if a field has been set.
func (o *FlowType) HasEnforceSuppression() bool {
	if o != nil && !IsNil(o.EnforceSuppression) {
		return true
	}

	return false
}

// SetEnforceSuppression gets a reference to the given bool and assigns it to the EnforceSuppression field.
func (o *FlowType) SetEnforceSuppression(v bool) {
	o.EnforceSuppression = &v
}

// GetStages returns the Stages field value
func (o *FlowType) GetStages() []FlowStages {
	if o == nil {
		var ret []FlowStages
		return ret
	}

	return o.Stages
}

// GetStagesOk returns a tuple with the Stages field value
// and a boolean to check if the value has been set.
func (o *FlowType) GetStagesOk() ([]FlowStages, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stages, true
}

// SetStages sets field value
func (o *FlowType) SetStages(v []FlowStages) {
	o.Stages = v
}

func (o FlowType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnforceSuppression) {
		toSerialize["enforceSuppression"] = o.EnforceSuppression
	}
	toSerialize["stages"] = o.Stages
	return toSerialize, nil
}

func (o *FlowType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"stages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlowType := _FlowType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFlowType)

	if err != nil {
		return err
	}

	*o = FlowType(varFlowType)

	return err
}

type NullableFlowType struct {
	value *FlowType
	isSet bool
}

func (v NullableFlowType) Get() *FlowType {
	return v.value
}

func (v *NullableFlowType) Set(val *FlowType) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowType) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowType(val *FlowType) *NullableFlowType {
	return &NullableFlowType{value: val, isSet: true}
}

func (v NullableFlowType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


