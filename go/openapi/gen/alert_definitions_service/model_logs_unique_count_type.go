/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LogsUniqueCountType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogsUniqueCountType{}

// LogsUniqueCountType Configuration for alerts based on unique value counts in logs
type LogsUniqueCountType struct {
	LogsFilter *V3LogsFilter `json:"logsFilter,omitempty"`
	// The maximum unique count per group by key
	MaxUniqueCountPerGroupByKey *string `json:"maxUniqueCountPerGroupByKey,omitempty"`
	NotificationPayloadFilter []string `json:"notificationPayloadFilter,omitempty"`
	Rules []LogsUniqueCountRule `json:"rules"`
	// The keypath in the logs to be used for unique count
	UniqueCountKeypath string `json:"uniqueCountKeypath"`
}

type _LogsUniqueCountType LogsUniqueCountType

// NewLogsUniqueCountType instantiates a new LogsUniqueCountType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsUniqueCountType(rules []LogsUniqueCountRule, uniqueCountKeypath string) *LogsUniqueCountType {
	this := LogsUniqueCountType{}
	this.Rules = rules
	this.UniqueCountKeypath = uniqueCountKeypath
	return &this
}

// NewLogsUniqueCountTypeWithDefaults instantiates a new LogsUniqueCountType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsUniqueCountTypeWithDefaults() *LogsUniqueCountType {
	this := LogsUniqueCountType{}
	return &this
}

// GetLogsFilter returns the LogsFilter field value if set, zero value otherwise.
func (o *LogsUniqueCountType) GetLogsFilter() V3LogsFilter {
	if o == nil || IsNil(o.LogsFilter) {
		var ret V3LogsFilter
		return ret
	}
	return *o.LogsFilter
}

// GetLogsFilterOk returns a tuple with the LogsFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsUniqueCountType) GetLogsFilterOk() (*V3LogsFilter, bool) {
	if o == nil || IsNil(o.LogsFilter) {
		return nil, false
	}
	return o.LogsFilter, true
}

// HasLogsFilter returns a boolean if a field has been set.
func (o *LogsUniqueCountType) HasLogsFilter() bool {
	if o != nil && !IsNil(o.LogsFilter) {
		return true
	}

	return false
}

// SetLogsFilter gets a reference to the given V3LogsFilter and assigns it to the LogsFilter field.
func (o *LogsUniqueCountType) SetLogsFilter(v V3LogsFilter) {
	o.LogsFilter = &v
}

// GetMaxUniqueCountPerGroupByKey returns the MaxUniqueCountPerGroupByKey field value if set, zero value otherwise.
func (o *LogsUniqueCountType) GetMaxUniqueCountPerGroupByKey() string {
	if o == nil || IsNil(o.MaxUniqueCountPerGroupByKey) {
		var ret string
		return ret
	}
	return *o.MaxUniqueCountPerGroupByKey
}

// GetMaxUniqueCountPerGroupByKeyOk returns a tuple with the MaxUniqueCountPerGroupByKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsUniqueCountType) GetMaxUniqueCountPerGroupByKeyOk() (*string, bool) {
	if o == nil || IsNil(o.MaxUniqueCountPerGroupByKey) {
		return nil, false
	}
	return o.MaxUniqueCountPerGroupByKey, true
}

// HasMaxUniqueCountPerGroupByKey returns a boolean if a field has been set.
func (o *LogsUniqueCountType) HasMaxUniqueCountPerGroupByKey() bool {
	if o != nil && !IsNil(o.MaxUniqueCountPerGroupByKey) {
		return true
	}

	return false
}

// SetMaxUniqueCountPerGroupByKey gets a reference to the given string and assigns it to the MaxUniqueCountPerGroupByKey field.
func (o *LogsUniqueCountType) SetMaxUniqueCountPerGroupByKey(v string) {
	o.MaxUniqueCountPerGroupByKey = &v
}

// GetNotificationPayloadFilter returns the NotificationPayloadFilter field value if set, zero value otherwise.
func (o *LogsUniqueCountType) GetNotificationPayloadFilter() []string {
	if o == nil || IsNil(o.NotificationPayloadFilter) {
		var ret []string
		return ret
	}
	return o.NotificationPayloadFilter
}

// GetNotificationPayloadFilterOk returns a tuple with the NotificationPayloadFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsUniqueCountType) GetNotificationPayloadFilterOk() ([]string, bool) {
	if o == nil || IsNil(o.NotificationPayloadFilter) {
		return nil, false
	}
	return o.NotificationPayloadFilter, true
}

// HasNotificationPayloadFilter returns a boolean if a field has been set.
func (o *LogsUniqueCountType) HasNotificationPayloadFilter() bool {
	if o != nil && !IsNil(o.NotificationPayloadFilter) {
		return true
	}

	return false
}

// SetNotificationPayloadFilter gets a reference to the given []string and assigns it to the NotificationPayloadFilter field.
func (o *LogsUniqueCountType) SetNotificationPayloadFilter(v []string) {
	o.NotificationPayloadFilter = v
}

// GetRules returns the Rules field value
func (o *LogsUniqueCountType) GetRules() []LogsUniqueCountRule {
	if o == nil {
		var ret []LogsUniqueCountRule
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *LogsUniqueCountType) GetRulesOk() ([]LogsUniqueCountRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *LogsUniqueCountType) SetRules(v []LogsUniqueCountRule) {
	o.Rules = v
}

// GetUniqueCountKeypath returns the UniqueCountKeypath field value
func (o *LogsUniqueCountType) GetUniqueCountKeypath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UniqueCountKeypath
}

// GetUniqueCountKeypathOk returns a tuple with the UniqueCountKeypath field value
// and a boolean to check if the value has been set.
func (o *LogsUniqueCountType) GetUniqueCountKeypathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UniqueCountKeypath, true
}

// SetUniqueCountKeypath sets field value
func (o *LogsUniqueCountType) SetUniqueCountKeypath(v string) {
	o.UniqueCountKeypath = v
}

func (o LogsUniqueCountType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogsUniqueCountType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LogsFilter) {
		toSerialize["logsFilter"] = o.LogsFilter
	}
	if !IsNil(o.MaxUniqueCountPerGroupByKey) {
		toSerialize["maxUniqueCountPerGroupByKey"] = o.MaxUniqueCountPerGroupByKey
	}
	if !IsNil(o.NotificationPayloadFilter) {
		toSerialize["notificationPayloadFilter"] = o.NotificationPayloadFilter
	}
	toSerialize["rules"] = o.Rules
	toSerialize["uniqueCountKeypath"] = o.UniqueCountKeypath
	return toSerialize, nil
}

func (o *LogsUniqueCountType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rules",
		"uniqueCountKeypath",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogsUniqueCountType := _LogsUniqueCountType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogsUniqueCountType)

	if err != nil {
		return err
	}

	*o = LogsUniqueCountType(varLogsUniqueCountType)

	return err
}

type NullableLogsUniqueCountType struct {
	value *LogsUniqueCountType
	isSet bool
}

func (v NullableLogsUniqueCountType) Get() *LogsUniqueCountType {
	return v.value
}

func (v *NullableLogsUniqueCountType) Set(val *LogsUniqueCountType) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsUniqueCountType) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsUniqueCountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsUniqueCountType(val *LogsUniqueCountType) *NullableLogsUniqueCountType {
	return &NullableLogsUniqueCountType{value: val, isSet: true}
}

func (v NullableLogsUniqueCountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsUniqueCountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


