/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
)

// NextOp the model 'NextOp'
type NextOp string

// List of NextOp
const (
	NEXTOP_NEXT_OP_AND_OR_UNSPECIFIED NextOp = "NEXT_OP_AND_OR_UNSPECIFIED"
	NEXTOP_NEXT_OP_OR NextOp = "NEXT_OP_OR"
)

// All allowed values of NextOp enum
var AllowedNextOpEnumValues = []NextOp{
	"NEXT_OP_AND_OR_UNSPECIFIED",
	"NEXT_OP_OR",
}

func (v *NextOp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NextOp(value)
	for _, existing := range AllowedNextOpEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NextOp", value)
}

// NewNextOpFromValue returns a pointer to a valid NextOp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNextOpFromValue(v string) (*NextOp, error) {
	ev := NextOp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NextOp: valid values are %v", v, AllowedNextOpEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NextOp) IsValid() bool {
	for _, existing := range AllowedNextOpEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NextOp value
func (v NextOp) Ptr() *NextOp {
	return &v
}

type NullableNextOp struct {
	value *NextOp
	isSet bool
}

func (v NullableNextOp) Get() *NextOp {
	return v.value
}

func (v *NullableNextOp) Set(val *NextOp) {
	v.value = val
	v.isSet = true
}

func (v NullableNextOp) IsSet() bool {
	return v.isSet
}

func (v *NullableNextOp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNextOp(val *NextOp) *NullableNextOp {
	return &NullableNextOp{value: val, isSet: true}
}

func (v NullableNextOp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNextOp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

