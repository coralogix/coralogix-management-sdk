/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LogsNewValueCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogsNewValueCondition{}

// LogsNewValueCondition Defines conditions for detecting new values in logs
type LogsNewValueCondition struct {
	// The keypath to track for new values
	KeypathToTrack string `json:"keypathToTrack"`
	TimeWindow LogsNewValueTimeWindow `json:"timeWindow"`
}

type _LogsNewValueCondition LogsNewValueCondition

// NewLogsNewValueCondition instantiates a new LogsNewValueCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsNewValueCondition(keypathToTrack string, timeWindow LogsNewValueTimeWindow) *LogsNewValueCondition {
	this := LogsNewValueCondition{}
	this.KeypathToTrack = keypathToTrack
	this.TimeWindow = timeWindow
	return &this
}

// NewLogsNewValueConditionWithDefaults instantiates a new LogsNewValueCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsNewValueConditionWithDefaults() *LogsNewValueCondition {
	this := LogsNewValueCondition{}
	return &this
}

// GetKeypathToTrack returns the KeypathToTrack field value
func (o *LogsNewValueCondition) GetKeypathToTrack() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeypathToTrack
}

// GetKeypathToTrackOk returns a tuple with the KeypathToTrack field value
// and a boolean to check if the value has been set.
func (o *LogsNewValueCondition) GetKeypathToTrackOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeypathToTrack, true
}

// SetKeypathToTrack sets field value
func (o *LogsNewValueCondition) SetKeypathToTrack(v string) {
	o.KeypathToTrack = v
}

// GetTimeWindow returns the TimeWindow field value
func (o *LogsNewValueCondition) GetTimeWindow() LogsNewValueTimeWindow {
	if o == nil {
		var ret LogsNewValueTimeWindow
		return ret
	}

	return o.TimeWindow
}

// GetTimeWindowOk returns a tuple with the TimeWindow field value
// and a boolean to check if the value has been set.
func (o *LogsNewValueCondition) GetTimeWindowOk() (*LogsNewValueTimeWindow, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeWindow, true
}

// SetTimeWindow sets field value
func (o *LogsNewValueCondition) SetTimeWindow(v LogsNewValueTimeWindow) {
	o.TimeWindow = v
}

func (o LogsNewValueCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogsNewValueCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["keypathToTrack"] = o.KeypathToTrack
	toSerialize["timeWindow"] = o.TimeWindow
	return toSerialize, nil
}

func (o *LogsNewValueCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"keypathToTrack",
		"timeWindow",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogsNewValueCondition := _LogsNewValueCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogsNewValueCondition)

	if err != nil {
		return err
	}

	*o = LogsNewValueCondition(varLogsNewValueCondition)

	return err
}

type NullableLogsNewValueCondition struct {
	value *LogsNewValueCondition
	isSet bool
}

func (v NullableLogsNewValueCondition) Get() *LogsNewValueCondition {
	return v.value
}

func (v *NullableLogsNewValueCondition) Set(val *LogsNewValueCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsNewValueCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsNewValueCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsNewValueCondition(val *LogsNewValueCondition) *NullableLogsNewValueCondition {
	return &NullableLogsNewValueCondition{value: val, isSet: true}
}

func (v NullableLogsNewValueCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsNewValueCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


