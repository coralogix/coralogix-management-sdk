/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BurnRateThreshold type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BurnRateThreshold{}

// BurnRateThreshold Burn rate threshold definition
type BurnRateThreshold struct {
	Dual *BurnRateTypeDual `json:"dual,omitempty"`
	Rules []SloThresholdRule `json:"rules"`
}

type _BurnRateThreshold BurnRateThreshold

// NewBurnRateThreshold instantiates a new BurnRateThreshold object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBurnRateThreshold(rules []SloThresholdRule) *BurnRateThreshold {
	this := BurnRateThreshold{}
	this.Rules = rules
	return &this
}

// NewBurnRateThresholdWithDefaults instantiates a new BurnRateThreshold object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBurnRateThresholdWithDefaults() *BurnRateThreshold {
	this := BurnRateThreshold{}
	return &this
}

// GetDual returns the Dual field value if set, zero value otherwise.
func (o *BurnRateThreshold) GetDual() BurnRateTypeDual {
	if o == nil || IsNil(o.Dual) {
		var ret BurnRateTypeDual
		return ret
	}
	return *o.Dual
}

// GetDualOk returns a tuple with the Dual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BurnRateThreshold) GetDualOk() (*BurnRateTypeDual, bool) {
	if o == nil || IsNil(o.Dual) {
		return nil, false
	}
	return o.Dual, true
}

// HasDual returns a boolean if a field has been set.
func (o *BurnRateThreshold) HasDual() bool {
	if o != nil && !IsNil(o.Dual) {
		return true
	}

	return false
}

// SetDual gets a reference to the given BurnRateTypeDual and assigns it to the Dual field.
func (o *BurnRateThreshold) SetDual(v BurnRateTypeDual) {
	o.Dual = &v
}

// GetRules returns the Rules field value
func (o *BurnRateThreshold) GetRules() []SloThresholdRule {
	if o == nil {
		var ret []SloThresholdRule
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *BurnRateThreshold) GetRulesOk() ([]SloThresholdRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *BurnRateThreshold) SetRules(v []SloThresholdRule) {
	o.Rules = v
}

func (o BurnRateThreshold) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BurnRateThreshold) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dual) {
		toSerialize["dual"] = o.Dual
	}
	toSerialize["rules"] = o.Rules
	return toSerialize, nil
}

func (o *BurnRateThreshold) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBurnRateThreshold := _BurnRateThreshold{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBurnRateThreshold)

	if err != nil {
		return err
	}

	*o = BurnRateThreshold(varBurnRateThreshold)

	return err
}

type NullableBurnRateThreshold struct {
	value *BurnRateThreshold
	isSet bool
}

func (v NullableBurnRateThreshold) Get() *BurnRateThreshold {
	return v.value
}

func (v *NullableBurnRateThreshold) Set(val *BurnRateThreshold) {
	v.value = val
	v.isSet = true
}

func (v NullableBurnRateThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableBurnRateThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBurnRateThreshold(val *BurnRateThreshold) *NullableBurnRateThreshold {
	return &NullableBurnRateThreshold{value: val, isSet: true}
}

func (v NullableBurnRateThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBurnRateThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


