/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// BurnRateThreshold - struct for BurnRateThreshold
type BurnRateThreshold struct {
	BurnRateThresholdDual *BurnRateThresholdDual
	BurnRateThresholdSingle *BurnRateThresholdSingle
}

// BurnRateThresholdDualAsBurnRateThreshold is a convenience function that returns BurnRateThresholdDual wrapped in BurnRateThreshold
func BurnRateThresholdDualAsBurnRateThreshold(v *BurnRateThresholdDual) BurnRateThreshold {
	return BurnRateThreshold{
		BurnRateThresholdDual: v,
	}
}

// BurnRateThresholdSingleAsBurnRateThreshold is a convenience function that returns BurnRateThresholdSingle wrapped in BurnRateThreshold
func BurnRateThresholdSingleAsBurnRateThreshold(v *BurnRateThresholdSingle) BurnRateThreshold {
	return BurnRateThreshold{
		BurnRateThresholdSingle: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *BurnRateThreshold) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BurnRateThresholdDual
	err = newStrictDecoder(data).Decode(&dst.BurnRateThresholdDual)
	if err == nil {
		jsonBurnRateThresholdDual, _ := json.Marshal(dst.BurnRateThresholdDual)
		if string(jsonBurnRateThresholdDual) == "{}" { // empty struct
			dst.BurnRateThresholdDual = nil
		} else {
			if err = validator.Validate(dst.BurnRateThresholdDual); err != nil {
				dst.BurnRateThresholdDual = nil
			} else {
				match++
			}
		}
	} else {
		dst.BurnRateThresholdDual = nil
	}

	// try to unmarshal data into BurnRateThresholdSingle
	err = newStrictDecoder(data).Decode(&dst.BurnRateThresholdSingle)
	if err == nil {
		jsonBurnRateThresholdSingle, _ := json.Marshal(dst.BurnRateThresholdSingle)
		if string(jsonBurnRateThresholdSingle) == "{}" { // empty struct
			dst.BurnRateThresholdSingle = nil
		} else {
			if err = validator.Validate(dst.BurnRateThresholdSingle); err != nil {
				dst.BurnRateThresholdSingle = nil
			} else {
				match++
			}
		}
	} else {
		dst.BurnRateThresholdSingle = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BurnRateThresholdDual = nil
		dst.BurnRateThresholdSingle = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BurnRateThreshold)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BurnRateThreshold)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BurnRateThreshold) MarshalJSON() ([]byte, error) {
	if src.BurnRateThresholdDual != nil {
		return json.Marshal(&src.BurnRateThresholdDual)
	}

	if src.BurnRateThresholdSingle != nil {
		return json.Marshal(&src.BurnRateThresholdSingle)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BurnRateThreshold) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BurnRateThresholdDual != nil {
		return obj.BurnRateThresholdDual
	}

	if obj.BurnRateThresholdSingle != nil {
		return obj.BurnRateThresholdSingle
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj BurnRateThreshold) GetActualInstanceValue() (interface{}) {
	if obj.BurnRateThresholdDual != nil {
		return *obj.BurnRateThresholdDual
	}

	if obj.BurnRateThresholdSingle != nil {
		return *obj.BurnRateThresholdSingle
	}

	// all schemas are nil
	return nil
}

type NullableBurnRateThreshold struct {
	value *BurnRateThreshold
	isSet bool
}

func (v NullableBurnRateThreshold) Get() *BurnRateThreshold {
	return v.value
}

func (v *NullableBurnRateThreshold) Set(val *BurnRateThreshold) {
	v.value = val
	v.isSet = true
}

func (v NullableBurnRateThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableBurnRateThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBurnRateThreshold(val *BurnRateThreshold) *NullableBurnRateThreshold {
	return &NullableBurnRateThreshold{value: val, isSet: true}
}

func (v NullableBurnRateThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBurnRateThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


