/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FlowStages type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowStages{}

// FlowStages Defines stages in a flow alert
type FlowStages struct {
	FlowStagesGroups *FlowStagesGroups `json:"flowStagesGroups,omitempty"`
	TimeframeMs string `json:"timeframeMs"`
	TimeframeType TimeframeType `json:"timeframeType"`
}

type _FlowStages FlowStages

// NewFlowStages instantiates a new FlowStages object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlowStages(timeframeMs string, timeframeType TimeframeType) *FlowStages {
	this := FlowStages{}
	this.TimeframeMs = timeframeMs
	this.TimeframeType = timeframeType
	return &this
}

// NewFlowStagesWithDefaults instantiates a new FlowStages object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowStagesWithDefaults() *FlowStages {
	this := FlowStages{}
	return &this
}

// GetFlowStagesGroups returns the FlowStagesGroups field value if set, zero value otherwise.
func (o *FlowStages) GetFlowStagesGroups() FlowStagesGroups {
	if o == nil || IsNil(o.FlowStagesGroups) {
		var ret FlowStagesGroups
		return ret
	}
	return *o.FlowStagesGroups
}

// GetFlowStagesGroupsOk returns a tuple with the FlowStagesGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowStages) GetFlowStagesGroupsOk() (*FlowStagesGroups, bool) {
	if o == nil || IsNil(o.FlowStagesGroups) {
		return nil, false
	}
	return o.FlowStagesGroups, true
}

// HasFlowStagesGroups returns a boolean if a field has been set.
func (o *FlowStages) HasFlowStagesGroups() bool {
	if o != nil && !IsNil(o.FlowStagesGroups) {
		return true
	}

	return false
}

// SetFlowStagesGroups gets a reference to the given FlowStagesGroups and assigns it to the FlowStagesGroups field.
func (o *FlowStages) SetFlowStagesGroups(v FlowStagesGroups) {
	o.FlowStagesGroups = &v
}

// GetTimeframeMs returns the TimeframeMs field value
func (o *FlowStages) GetTimeframeMs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeframeMs
}

// GetTimeframeMsOk returns a tuple with the TimeframeMs field value
// and a boolean to check if the value has been set.
func (o *FlowStages) GetTimeframeMsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeframeMs, true
}

// SetTimeframeMs sets field value
func (o *FlowStages) SetTimeframeMs(v string) {
	o.TimeframeMs = v
}

// GetTimeframeType returns the TimeframeType field value
func (o *FlowStages) GetTimeframeType() TimeframeType {
	if o == nil {
		var ret TimeframeType
		return ret
	}

	return o.TimeframeType
}

// GetTimeframeTypeOk returns a tuple with the TimeframeType field value
// and a boolean to check if the value has been set.
func (o *FlowStages) GetTimeframeTypeOk() (*TimeframeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeframeType, true
}

// SetTimeframeType sets field value
func (o *FlowStages) SetTimeframeType(v TimeframeType) {
	o.TimeframeType = v
}

func (o FlowStages) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowStages) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FlowStagesGroups) {
		toSerialize["flowStagesGroups"] = o.FlowStagesGroups
	}
	toSerialize["timeframeMs"] = o.TimeframeMs
	toSerialize["timeframeType"] = o.TimeframeType
	return toSerialize, nil
}

func (o *FlowStages) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timeframeMs",
		"timeframeType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlowStages := _FlowStages{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFlowStages)

	if err != nil {
		return err
	}

	*o = FlowStages(varFlowStages)

	return err
}

type NullableFlowStages struct {
	value *FlowStages
	isSet bool
}

func (v NullableFlowStages) Get() *FlowStages {
	return v.value
}

func (v *NullableFlowStages) Set(val *FlowStages) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowStages) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowStages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowStages(val *FlowStages) *NullableFlowStages {
	return &NullableFlowStages{value: val, isSet: true}
}

func (v NullableFlowStages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowStages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


