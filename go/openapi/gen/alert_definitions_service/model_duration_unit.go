/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
)

// DurationUnit the model 'DurationUnit'
type DurationUnit string

// List of DurationUnit
const (
	DURATIONUNIT_DURATION_UNIT_UNSPECIFIED DurationUnit = "DURATION_UNIT_UNSPECIFIED"
	DURATIONUNIT_DURATION_UNIT_HOURS DurationUnit = "DURATION_UNIT_HOURS"
)

// All allowed values of DurationUnit enum
var AllowedDurationUnitEnumValues = []DurationUnit{
	"DURATION_UNIT_UNSPECIFIED",
	"DURATION_UNIT_HOURS",
}

func (v *DurationUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DurationUnit(value)
	for _, existing := range AllowedDurationUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DurationUnit", value)
}

// NewDurationUnitFromValue returns a pointer to a valid DurationUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDurationUnitFromValue(v string) (*DurationUnit, error) {
	ev := DurationUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DurationUnit: valid values are %v", v, AllowedDurationUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DurationUnit) IsValid() bool {
	for _, existing := range AllowedDurationUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DurationUnit value
func (v DurationUnit) Ptr() *DurationUnit {
	return &v
}

type NullableDurationUnit struct {
	value *DurationUnit
	isSet bool
}

func (v NullableDurationUnit) Get() *DurationUnit {
	return v.value
}

func (v *NullableDurationUnit) Set(val *DurationUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableDurationUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableDurationUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDurationUnit(val *DurationUnit) *NullableDurationUnit {
	return &NullableDurationUnit{value: val, isSet: true}
}

func (v NullableDurationUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDurationUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

