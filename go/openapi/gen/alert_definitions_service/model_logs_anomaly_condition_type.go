/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
)

// LogsAnomalyConditionType the model 'LogsAnomalyConditionType'
type LogsAnomalyConditionType string

// List of LogsAnomalyConditionType
const (
	LOGSANOMALYCONDITIONTYPE_LOGS_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED LogsAnomalyConditionType = "LOGS_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"
)

// All allowed values of LogsAnomalyConditionType enum
var AllowedLogsAnomalyConditionTypeEnumValues = []LogsAnomalyConditionType{
	"LOGS_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED",
}

func (v *LogsAnomalyConditionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LogsAnomalyConditionType(value)
	for _, existing := range AllowedLogsAnomalyConditionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogsAnomalyConditionType", value)
}

// NewLogsAnomalyConditionTypeFromValue returns a pointer to a valid LogsAnomalyConditionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogsAnomalyConditionTypeFromValue(v string) (*LogsAnomalyConditionType, error) {
	ev := LogsAnomalyConditionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LogsAnomalyConditionType: valid values are %v", v, AllowedLogsAnomalyConditionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogsAnomalyConditionType) IsValid() bool {
	for _, existing := range AllowedLogsAnomalyConditionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LogsAnomalyConditionType value
func (v LogsAnomalyConditionType) Ptr() *LogsAnomalyConditionType {
	return &v
}

type NullableLogsAnomalyConditionType struct {
	value *LogsAnomalyConditionType
	isSet bool
}

func (v NullableLogsAnomalyConditionType) Get() *LogsAnomalyConditionType {
	return v.value
}

func (v *NullableLogsAnomalyConditionType) Set(val *LogsAnomalyConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsAnomalyConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsAnomalyConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsAnomalyConditionType(val *LogsAnomalyConditionType) *NullableLogsAnomalyConditionType {
	return &NullableLogsAnomalyConditionType{value: val, isSet: true}
}

func (v NullableLogsAnomalyConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsAnomalyConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

