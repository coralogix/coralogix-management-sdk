/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
)

// LogsUniqueValueTimeWindowValue the model 'LogsUniqueValueTimeWindowValue'
type LogsUniqueValueTimeWindowValue string

// List of LogsUniqueValueTimeWindowValue
const (
	LOGSUNIQUEVALUETIMEWINDOWVALUE_LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTE_1_OR_UNSPECIFIED LogsUniqueValueTimeWindowValue = "LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTE_1_OR_UNSPECIFIED"
	LOGSUNIQUEVALUETIMEWINDOWVALUE_LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_5 LogsUniqueValueTimeWindowValue = "LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_5"
	LOGSUNIQUEVALUETIMEWINDOWVALUE_LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_10 LogsUniqueValueTimeWindowValue = "LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_10"
	LOGSUNIQUEVALUETIMEWINDOWVALUE_LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_15 LogsUniqueValueTimeWindowValue = "LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_15"
	LOGSUNIQUEVALUETIMEWINDOWVALUE_LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_20 LogsUniqueValueTimeWindowValue = "LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_20"
	LOGSUNIQUEVALUETIMEWINDOWVALUE_LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_30 LogsUniqueValueTimeWindowValue = "LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_30"
	LOGSUNIQUEVALUETIMEWINDOWVALUE_LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_1 LogsUniqueValueTimeWindowValue = "LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_1"
	LOGSUNIQUEVALUETIMEWINDOWVALUE_LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_2 LogsUniqueValueTimeWindowValue = "LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_2"
	LOGSUNIQUEVALUETIMEWINDOWVALUE_LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_4 LogsUniqueValueTimeWindowValue = "LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_4"
	LOGSUNIQUEVALUETIMEWINDOWVALUE_LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_6 LogsUniqueValueTimeWindowValue = "LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_6"
	LOGSUNIQUEVALUETIMEWINDOWVALUE_LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_12 LogsUniqueValueTimeWindowValue = "LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_12"
	LOGSUNIQUEVALUETIMEWINDOWVALUE_LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_24 LogsUniqueValueTimeWindowValue = "LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_24"
	LOGSUNIQUEVALUETIMEWINDOWVALUE_LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_36 LogsUniqueValueTimeWindowValue = "LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_36"
)

// All allowed values of LogsUniqueValueTimeWindowValue enum
var AllowedLogsUniqueValueTimeWindowValueEnumValues = []LogsUniqueValueTimeWindowValue{
	"LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTE_1_OR_UNSPECIFIED",
	"LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_5",
	"LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_10",
	"LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_15",
	"LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_20",
	"LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_30",
	"LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_1",
	"LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_2",
	"LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_4",
	"LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_6",
	"LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_12",
	"LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_24",
	"LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_36",
}

func (v *LogsUniqueValueTimeWindowValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LogsUniqueValueTimeWindowValue(value)
	for _, existing := range AllowedLogsUniqueValueTimeWindowValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogsUniqueValueTimeWindowValue", value)
}

// NewLogsUniqueValueTimeWindowValueFromValue returns a pointer to a valid LogsUniqueValueTimeWindowValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogsUniqueValueTimeWindowValueFromValue(v string) (*LogsUniqueValueTimeWindowValue, error) {
	ev := LogsUniqueValueTimeWindowValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LogsUniqueValueTimeWindowValue: valid values are %v", v, AllowedLogsUniqueValueTimeWindowValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogsUniqueValueTimeWindowValue) IsValid() bool {
	for _, existing := range AllowedLogsUniqueValueTimeWindowValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LogsUniqueValueTimeWindowValue value
func (v LogsUniqueValueTimeWindowValue) Ptr() *LogsUniqueValueTimeWindowValue {
	return &v
}

type NullableLogsUniqueValueTimeWindowValue struct {
	value *LogsUniqueValueTimeWindowValue
	isSet bool
}

func (v NullableLogsUniqueValueTimeWindowValue) Get() *LogsUniqueValueTimeWindowValue {
	return v.value
}

func (v *NullableLogsUniqueValueTimeWindowValue) Set(val *LogsUniqueValueTimeWindowValue) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsUniqueValueTimeWindowValue) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsUniqueValueTimeWindowValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsUniqueValueTimeWindowValue(val *LogsUniqueValueTimeWindowValue) *NullableLogsUniqueValueTimeWindowValue {
	return &NullableLogsUniqueValueTimeWindowValue{value: val, isSet: true}
}

func (v NullableLogsUniqueValueTimeWindowValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsUniqueValueTimeWindowValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

