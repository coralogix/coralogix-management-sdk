/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
)

// AlertsOp the model 'AlertsOp'
type AlertsOp string

// List of AlertsOp
const (
	ALERTSOP_ALERTS_OP_AND_OR_UNSPECIFIED AlertsOp = "ALERTS_OP_AND_OR_UNSPECIFIED"
	ALERTSOP_ALERTS_OP_OR AlertsOp = "ALERTS_OP_OR"
)

// All allowed values of AlertsOp enum
var AllowedAlertsOpEnumValues = []AlertsOp{
	"ALERTS_OP_AND_OR_UNSPECIFIED",
	"ALERTS_OP_OR",
}

func (v *AlertsOp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertsOp(value)
	for _, existing := range AllowedAlertsOpEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertsOp", value)
}

// NewAlertsOpFromValue returns a pointer to a valid AlertsOp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertsOpFromValue(v string) (*AlertsOp, error) {
	ev := AlertsOp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertsOp: valid values are %v", v, AllowedAlertsOpEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertsOp) IsValid() bool {
	for _, existing := range AllowedAlertsOpEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertsOp value
func (v AlertsOp) Ptr() *AlertsOp {
	return &v
}

type NullableAlertsOp struct {
	value *AlertsOp
	isSet bool
}

func (v NullableAlertsOp) Get() *AlertsOp {
	return v.value
}

func (v *NullableAlertsOp) Set(val *AlertsOp) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertsOp) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertsOp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertsOp(val *AlertsOp) *NullableAlertsOp {
	return &NullableAlertsOp{value: val, isSet: true}
}

func (v NullableAlertsOp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertsOp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

