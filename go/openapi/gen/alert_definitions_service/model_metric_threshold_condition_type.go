/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
)

// MetricThresholdConditionType the model 'MetricThresholdConditionType'
type MetricThresholdConditionType string

// List of MetricThresholdConditionType
const (
	METRICTHRESHOLDCONDITIONTYPE_METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED MetricThresholdConditionType = "METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
	METRICTHRESHOLDCONDITIONTYPE_METRIC_THRESHOLD_CONDITION_TYPE_LESS_THAN MetricThresholdConditionType = "METRIC_THRESHOLD_CONDITION_TYPE_LESS_THAN"
	METRICTHRESHOLDCONDITIONTYPE_METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_EQUALS MetricThresholdConditionType = "METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_EQUALS"
	METRICTHRESHOLDCONDITIONTYPE_METRIC_THRESHOLD_CONDITION_TYPE_LESS_THAN_OR_EQUALS MetricThresholdConditionType = "METRIC_THRESHOLD_CONDITION_TYPE_LESS_THAN_OR_EQUALS"
)

// All allowed values of MetricThresholdConditionType enum
var AllowedMetricThresholdConditionTypeEnumValues = []MetricThresholdConditionType{
	"METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED",
	"METRIC_THRESHOLD_CONDITION_TYPE_LESS_THAN",
	"METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_EQUALS",
	"METRIC_THRESHOLD_CONDITION_TYPE_LESS_THAN_OR_EQUALS",
}

func (v *MetricThresholdConditionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetricThresholdConditionType(value)
	for _, existing := range AllowedMetricThresholdConditionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetricThresholdConditionType", value)
}

// NewMetricThresholdConditionTypeFromValue returns a pointer to a valid MetricThresholdConditionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetricThresholdConditionTypeFromValue(v string) (*MetricThresholdConditionType, error) {
	ev := MetricThresholdConditionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetricThresholdConditionType: valid values are %v", v, AllowedMetricThresholdConditionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetricThresholdConditionType) IsValid() bool {
	for _, existing := range AllowedMetricThresholdConditionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetricThresholdConditionType value
func (v MetricThresholdConditionType) Ptr() *MetricThresholdConditionType {
	return &v
}

type NullableMetricThresholdConditionType struct {
	value *MetricThresholdConditionType
	isSet bool
}

func (v NullableMetricThresholdConditionType) Get() *MetricThresholdConditionType {
	return v.value
}

func (v *NullableMetricThresholdConditionType) Set(val *MetricThresholdConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricThresholdConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricThresholdConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricThresholdConditionType(val *MetricThresholdConditionType) *NullableMetricThresholdConditionType {
	return &NullableMetricThresholdConditionType{value: val, isSet: true}
}

func (v NullableMetricThresholdConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricThresholdConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

