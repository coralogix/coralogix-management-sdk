/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
)

// LogSeverity the model 'LogSeverity'
type LogSeverity string

// List of LogSeverity
const (
	LOGSEVERITY_LOG_SEVERITY_VERBOSE_UNSPECIFIED LogSeverity = "LOG_SEVERITY_VERBOSE_UNSPECIFIED"
	LOGSEVERITY_LOG_SEVERITY_DEBUG LogSeverity = "LOG_SEVERITY_DEBUG"
	LOGSEVERITY_LOG_SEVERITY_INFO LogSeverity = "LOG_SEVERITY_INFO"
	LOGSEVERITY_LOG_SEVERITY_WARNING LogSeverity = "LOG_SEVERITY_WARNING"
	LOGSEVERITY_LOG_SEVERITY_ERROR LogSeverity = "LOG_SEVERITY_ERROR"
	LOGSEVERITY_LOG_SEVERITY_CRITICAL LogSeverity = "LOG_SEVERITY_CRITICAL"
)

// All allowed values of LogSeverity enum
var AllowedLogSeverityEnumValues = []LogSeverity{
	"LOG_SEVERITY_VERBOSE_UNSPECIFIED",
	"LOG_SEVERITY_DEBUG",
	"LOG_SEVERITY_INFO",
	"LOG_SEVERITY_WARNING",
	"LOG_SEVERITY_ERROR",
	"LOG_SEVERITY_CRITICAL",
}

func (v *LogSeverity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LogSeverity(value)
	for _, existing := range AllowedLogSeverityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogSeverity", value)
}

// NewLogSeverityFromValue returns a pointer to a valid LogSeverity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogSeverityFromValue(v string) (*LogSeverity, error) {
	ev := LogSeverity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LogSeverity: valid values are %v", v, AllowedLogSeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogSeverity) IsValid() bool {
	for _, existing := range AllowedLogSeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LogSeverity value
func (v LogSeverity) Ptr() *LogSeverity {
	return &v
}

type NullableLogSeverity struct {
	value *LogSeverity
	isSet bool
}

func (v NullableLogSeverity) Get() *LogSeverity {
	return v.value
}

func (v *NullableLogSeverity) Set(val *LogSeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableLogSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableLogSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogSeverity(val *LogSeverity) *NullableLogSeverity {
	return &NullableLogSeverity{value: val, isSet: true}
}

func (v NullableLogSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

