/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
)

// LogsTimeWindowValue the model 'LogsTimeWindowValue'
type LogsTimeWindowValue string

// List of LogsTimeWindowValue
const (
	LOGSTIMEWINDOWVALUE_LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED LogsTimeWindowValue = "LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"
	LOGSTIMEWINDOWVALUE_LOGS_TIME_WINDOW_VALUE_MINUTES_10 LogsTimeWindowValue = "LOGS_TIME_WINDOW_VALUE_MINUTES_10"
	LOGSTIMEWINDOWVALUE_LOGS_TIME_WINDOW_VALUE_MINUTES_20 LogsTimeWindowValue = "LOGS_TIME_WINDOW_VALUE_MINUTES_20"
	LOGSTIMEWINDOWVALUE_LOGS_TIME_WINDOW_VALUE_MINUTES_15 LogsTimeWindowValue = "LOGS_TIME_WINDOW_VALUE_MINUTES_15"
	LOGSTIMEWINDOWVALUE_LOGS_TIME_WINDOW_VALUE_MINUTES_30 LogsTimeWindowValue = "LOGS_TIME_WINDOW_VALUE_MINUTES_30"
	LOGSTIMEWINDOWVALUE_LOGS_TIME_WINDOW_VALUE_HOUR_1 LogsTimeWindowValue = "LOGS_TIME_WINDOW_VALUE_HOUR_1"
	LOGSTIMEWINDOWVALUE_LOGS_TIME_WINDOW_VALUE_HOURS_2 LogsTimeWindowValue = "LOGS_TIME_WINDOW_VALUE_HOURS_2"
	LOGSTIMEWINDOWVALUE_LOGS_TIME_WINDOW_VALUE_HOURS_4 LogsTimeWindowValue = "LOGS_TIME_WINDOW_VALUE_HOURS_4"
	LOGSTIMEWINDOWVALUE_LOGS_TIME_WINDOW_VALUE_HOURS_6 LogsTimeWindowValue = "LOGS_TIME_WINDOW_VALUE_HOURS_6"
	LOGSTIMEWINDOWVALUE_LOGS_TIME_WINDOW_VALUE_HOURS_12 LogsTimeWindowValue = "LOGS_TIME_WINDOW_VALUE_HOURS_12"
	LOGSTIMEWINDOWVALUE_LOGS_TIME_WINDOW_VALUE_HOURS_24 LogsTimeWindowValue = "LOGS_TIME_WINDOW_VALUE_HOURS_24"
	LOGSTIMEWINDOWVALUE_LOGS_TIME_WINDOW_VALUE_HOURS_36 LogsTimeWindowValue = "LOGS_TIME_WINDOW_VALUE_HOURS_36"
)

// All allowed values of LogsTimeWindowValue enum
var AllowedLogsTimeWindowValueEnumValues = []LogsTimeWindowValue{
	"LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED",
	"LOGS_TIME_WINDOW_VALUE_MINUTES_10",
	"LOGS_TIME_WINDOW_VALUE_MINUTES_20",
	"LOGS_TIME_WINDOW_VALUE_MINUTES_15",
	"LOGS_TIME_WINDOW_VALUE_MINUTES_30",
	"LOGS_TIME_WINDOW_VALUE_HOUR_1",
	"LOGS_TIME_WINDOW_VALUE_HOURS_2",
	"LOGS_TIME_WINDOW_VALUE_HOURS_4",
	"LOGS_TIME_WINDOW_VALUE_HOURS_6",
	"LOGS_TIME_WINDOW_VALUE_HOURS_12",
	"LOGS_TIME_WINDOW_VALUE_HOURS_24",
	"LOGS_TIME_WINDOW_VALUE_HOURS_36",
}

func (v *LogsTimeWindowValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LogsTimeWindowValue(value)
	for _, existing := range AllowedLogsTimeWindowValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogsTimeWindowValue", value)
}

// NewLogsTimeWindowValueFromValue returns a pointer to a valid LogsTimeWindowValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogsTimeWindowValueFromValue(v string) (*LogsTimeWindowValue, error) {
	ev := LogsTimeWindowValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LogsTimeWindowValue: valid values are %v", v, AllowedLogsTimeWindowValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogsTimeWindowValue) IsValid() bool {
	for _, existing := range AllowedLogsTimeWindowValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LogsTimeWindowValue value
func (v LogsTimeWindowValue) Ptr() *LogsTimeWindowValue {
	return &v
}

type NullableLogsTimeWindowValue struct {
	value *LogsTimeWindowValue
	isSet bool
}

func (v NullableLogsTimeWindowValue) Get() *LogsTimeWindowValue {
	return v.value
}

func (v *NullableLogsTimeWindowValue) Set(val *LogsTimeWindowValue) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsTimeWindowValue) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsTimeWindowValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsTimeWindowValue(val *LogsTimeWindowValue) *NullableLogsTimeWindowValue {
	return &NullableLogsTimeWindowValue{value: val, isSet: true}
}

func (v NullableLogsTimeWindowValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsTimeWindowValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

