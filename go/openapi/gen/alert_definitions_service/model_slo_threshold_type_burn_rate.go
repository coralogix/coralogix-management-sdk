/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SloThresholdTypeBurnRate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloThresholdTypeBurnRate{}

// SloThresholdTypeBurnRate SLO threshold type definition
type SloThresholdTypeBurnRate struct {
	BurnRate *BurnRateThreshold `json:"burnRate,omitempty"`
	SloDefinition V3SloDefinition `json:"sloDefinition"`
}

type _SloThresholdTypeBurnRate SloThresholdTypeBurnRate

// NewSloThresholdTypeBurnRate instantiates a new SloThresholdTypeBurnRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloThresholdTypeBurnRate(sloDefinition V3SloDefinition) *SloThresholdTypeBurnRate {
	this := SloThresholdTypeBurnRate{}
	this.SloDefinition = sloDefinition
	return &this
}

// NewSloThresholdTypeBurnRateWithDefaults instantiates a new SloThresholdTypeBurnRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloThresholdTypeBurnRateWithDefaults() *SloThresholdTypeBurnRate {
	this := SloThresholdTypeBurnRate{}
	return &this
}

// GetBurnRate returns the BurnRate field value if set, zero value otherwise.
func (o *SloThresholdTypeBurnRate) GetBurnRate() BurnRateThreshold {
	if o == nil || IsNil(o.BurnRate) {
		var ret BurnRateThreshold
		return ret
	}
	return *o.BurnRate
}

// GetBurnRateOk returns a tuple with the BurnRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloThresholdTypeBurnRate) GetBurnRateOk() (*BurnRateThreshold, bool) {
	if o == nil || IsNil(o.BurnRate) {
		return nil, false
	}
	return o.BurnRate, true
}

// HasBurnRate returns a boolean if a field has been set.
func (o *SloThresholdTypeBurnRate) HasBurnRate() bool {
	if o != nil && !IsNil(o.BurnRate) {
		return true
	}

	return false
}

// SetBurnRate gets a reference to the given BurnRateThreshold and assigns it to the BurnRate field.
func (o *SloThresholdTypeBurnRate) SetBurnRate(v BurnRateThreshold) {
	o.BurnRate = &v
}

// GetSloDefinition returns the SloDefinition field value
func (o *SloThresholdTypeBurnRate) GetSloDefinition() V3SloDefinition {
	if o == nil {
		var ret V3SloDefinition
		return ret
	}

	return o.SloDefinition
}

// GetSloDefinitionOk returns a tuple with the SloDefinition field value
// and a boolean to check if the value has been set.
func (o *SloThresholdTypeBurnRate) GetSloDefinitionOk() (*V3SloDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SloDefinition, true
}

// SetSloDefinition sets field value
func (o *SloThresholdTypeBurnRate) SetSloDefinition(v V3SloDefinition) {
	o.SloDefinition = v
}

func (o SloThresholdTypeBurnRate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloThresholdTypeBurnRate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BurnRate) {
		toSerialize["burnRate"] = o.BurnRate
	}
	toSerialize["sloDefinition"] = o.SloDefinition
	return toSerialize, nil
}

func (o *SloThresholdTypeBurnRate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sloDefinition",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSloThresholdTypeBurnRate := _SloThresholdTypeBurnRate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSloThresholdTypeBurnRate)

	if err != nil {
		return err
	}

	*o = SloThresholdTypeBurnRate(varSloThresholdTypeBurnRate)

	return err
}

type NullableSloThresholdTypeBurnRate struct {
	value *SloThresholdTypeBurnRate
	isSet bool
}

func (v NullableSloThresholdTypeBurnRate) Get() *SloThresholdTypeBurnRate {
	return v.value
}

func (v *NullableSloThresholdTypeBurnRate) Set(val *SloThresholdTypeBurnRate) {
	v.value = val
	v.isSet = true
}

func (v NullableSloThresholdTypeBurnRate) IsSet() bool {
	return v.isSet
}

func (v *NullableSloThresholdTypeBurnRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloThresholdTypeBurnRate(val *SloThresholdTypeBurnRate) *NullableSloThresholdTypeBurnRate {
	return &NullableSloThresholdTypeBurnRate{value: val, isSet: true}
}

func (v NullableSloThresholdTypeBurnRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloThresholdTypeBurnRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


