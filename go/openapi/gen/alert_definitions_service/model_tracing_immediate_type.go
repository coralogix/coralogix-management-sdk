/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TracingImmediateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TracingImmediateType{}

// TracingImmediateType Configuration for immediate alerts triggered on trace entries
type TracingImmediateType struct {
	NotificationPayloadFilter []string `json:"notificationPayloadFilter,omitempty"`
	TracingFilter TracingFilter `json:"tracingFilter"`
}

type _TracingImmediateType TracingImmediateType

// NewTracingImmediateType instantiates a new TracingImmediateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTracingImmediateType(tracingFilter TracingFilter) *TracingImmediateType {
	this := TracingImmediateType{}
	this.TracingFilter = tracingFilter
	return &this
}

// NewTracingImmediateTypeWithDefaults instantiates a new TracingImmediateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTracingImmediateTypeWithDefaults() *TracingImmediateType {
	this := TracingImmediateType{}
	return &this
}

// GetNotificationPayloadFilter returns the NotificationPayloadFilter field value if set, zero value otherwise.
func (o *TracingImmediateType) GetNotificationPayloadFilter() []string {
	if o == nil || IsNil(o.NotificationPayloadFilter) {
		var ret []string
		return ret
	}
	return o.NotificationPayloadFilter
}

// GetNotificationPayloadFilterOk returns a tuple with the NotificationPayloadFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TracingImmediateType) GetNotificationPayloadFilterOk() ([]string, bool) {
	if o == nil || IsNil(o.NotificationPayloadFilter) {
		return nil, false
	}
	return o.NotificationPayloadFilter, true
}

// HasNotificationPayloadFilter returns a boolean if a field has been set.
func (o *TracingImmediateType) HasNotificationPayloadFilter() bool {
	if o != nil && !IsNil(o.NotificationPayloadFilter) {
		return true
	}

	return false
}

// SetNotificationPayloadFilter gets a reference to the given []string and assigns it to the NotificationPayloadFilter field.
func (o *TracingImmediateType) SetNotificationPayloadFilter(v []string) {
	o.NotificationPayloadFilter = v
}

// GetTracingFilter returns the TracingFilter field value
func (o *TracingImmediateType) GetTracingFilter() TracingFilter {
	if o == nil {
		var ret TracingFilter
		return ret
	}

	return o.TracingFilter
}

// GetTracingFilterOk returns a tuple with the TracingFilter field value
// and a boolean to check if the value has been set.
func (o *TracingImmediateType) GetTracingFilterOk() (*TracingFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TracingFilter, true
}

// SetTracingFilter sets field value
func (o *TracingImmediateType) SetTracingFilter(v TracingFilter) {
	o.TracingFilter = v
}

func (o TracingImmediateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TracingImmediateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NotificationPayloadFilter) {
		toSerialize["notificationPayloadFilter"] = o.NotificationPayloadFilter
	}
	toSerialize["tracingFilter"] = o.TracingFilter
	return toSerialize, nil
}

func (o *TracingImmediateType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tracingFilter",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTracingImmediateType := _TracingImmediateType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTracingImmediateType)

	if err != nil {
		return err
	}

	*o = TracingImmediateType(varTracingImmediateType)

	return err
}

type NullableTracingImmediateType struct {
	value *TracingImmediateType
	isSet bool
}

func (v NullableTracingImmediateType) Get() *TracingImmediateType {
	return v.value
}

func (v *NullableTracingImmediateType) Set(val *TracingImmediateType) {
	v.value = val
	v.isSet = true
}

func (v NullableTracingImmediateType) IsSet() bool {
	return v.isSet
}

func (v *NullableTracingImmediateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTracingImmediateType(val *TracingImmediateType) *NullableTracingImmediateType {
	return &NullableTracingImmediateType{value: val, isSet: true}
}

func (v NullableTracingImmediateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTracingImmediateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


