/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MetricAnomalyCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricAnomalyCondition{}

// MetricAnomalyCondition struct for MetricAnomalyCondition
type MetricAnomalyCondition struct {
	ConditionType MetricAnomalyConditionType `json:"conditionType"`
	// The percentage of the metric that must exceed the threshold to trigger the alert
	ForOverPct *int64 `json:"forOverPct,omitempty"`
	// The percentage of non-null values required to trigger the alert
	MinNonNullValuesPct int64 `json:"minNonNullValuesPct"`
	OfTheLast MetricTimeWindow `json:"ofTheLast"`
	// The threshold value for the alert condition
	Threshold float64 `json:"threshold"`
}

type _MetricAnomalyCondition MetricAnomalyCondition

// NewMetricAnomalyCondition instantiates a new MetricAnomalyCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricAnomalyCondition(conditionType MetricAnomalyConditionType, minNonNullValuesPct int64, ofTheLast MetricTimeWindow, threshold float64) *MetricAnomalyCondition {
	this := MetricAnomalyCondition{}
	this.ConditionType = conditionType
	this.MinNonNullValuesPct = minNonNullValuesPct
	this.OfTheLast = ofTheLast
	this.Threshold = threshold
	return &this
}

// NewMetricAnomalyConditionWithDefaults instantiates a new MetricAnomalyCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricAnomalyConditionWithDefaults() *MetricAnomalyCondition {
	this := MetricAnomalyCondition{}
	return &this
}

// GetConditionType returns the ConditionType field value
func (o *MetricAnomalyCondition) GetConditionType() MetricAnomalyConditionType {
	if o == nil {
		var ret MetricAnomalyConditionType
		return ret
	}

	return o.ConditionType
}

// GetConditionTypeOk returns a tuple with the ConditionType field value
// and a boolean to check if the value has been set.
func (o *MetricAnomalyCondition) GetConditionTypeOk() (*MetricAnomalyConditionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConditionType, true
}

// SetConditionType sets field value
func (o *MetricAnomalyCondition) SetConditionType(v MetricAnomalyConditionType) {
	o.ConditionType = v
}

// GetForOverPct returns the ForOverPct field value if set, zero value otherwise.
func (o *MetricAnomalyCondition) GetForOverPct() int64 {
	if o == nil || IsNil(o.ForOverPct) {
		var ret int64
		return ret
	}
	return *o.ForOverPct
}

// GetForOverPctOk returns a tuple with the ForOverPct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricAnomalyCondition) GetForOverPctOk() (*int64, bool) {
	if o == nil || IsNil(o.ForOverPct) {
		return nil, false
	}
	return o.ForOverPct, true
}

// HasForOverPct returns a boolean if a field has been set.
func (o *MetricAnomalyCondition) HasForOverPct() bool {
	if o != nil && !IsNil(o.ForOverPct) {
		return true
	}

	return false
}

// SetForOverPct gets a reference to the given int64 and assigns it to the ForOverPct field.
func (o *MetricAnomalyCondition) SetForOverPct(v int64) {
	o.ForOverPct = &v
}

// GetMinNonNullValuesPct returns the MinNonNullValuesPct field value
func (o *MetricAnomalyCondition) GetMinNonNullValuesPct() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MinNonNullValuesPct
}

// GetMinNonNullValuesPctOk returns a tuple with the MinNonNullValuesPct field value
// and a boolean to check if the value has been set.
func (o *MetricAnomalyCondition) GetMinNonNullValuesPctOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinNonNullValuesPct, true
}

// SetMinNonNullValuesPct sets field value
func (o *MetricAnomalyCondition) SetMinNonNullValuesPct(v int64) {
	o.MinNonNullValuesPct = v
}

// GetOfTheLast returns the OfTheLast field value
func (o *MetricAnomalyCondition) GetOfTheLast() MetricTimeWindow {
	if o == nil {
		var ret MetricTimeWindow
		return ret
	}

	return o.OfTheLast
}

// GetOfTheLastOk returns a tuple with the OfTheLast field value
// and a boolean to check if the value has been set.
func (o *MetricAnomalyCondition) GetOfTheLastOk() (*MetricTimeWindow, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OfTheLast, true
}

// SetOfTheLast sets field value
func (o *MetricAnomalyCondition) SetOfTheLast(v MetricTimeWindow) {
	o.OfTheLast = v
}

// GetThreshold returns the Threshold field value
func (o *MetricAnomalyCondition) GetThreshold() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value
// and a boolean to check if the value has been set.
func (o *MetricAnomalyCondition) GetThresholdOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Threshold, true
}

// SetThreshold sets field value
func (o *MetricAnomalyCondition) SetThreshold(v float64) {
	o.Threshold = v
}

func (o MetricAnomalyCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricAnomalyCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["conditionType"] = o.ConditionType
	if !IsNil(o.ForOverPct) {
		toSerialize["forOverPct"] = o.ForOverPct
	}
	toSerialize["minNonNullValuesPct"] = o.MinNonNullValuesPct
	toSerialize["ofTheLast"] = o.OfTheLast
	toSerialize["threshold"] = o.Threshold
	return toSerialize, nil
}

func (o *MetricAnomalyCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"conditionType",
		"minNonNullValuesPct",
		"ofTheLast",
		"threshold",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetricAnomalyCondition := _MetricAnomalyCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetricAnomalyCondition)

	if err != nil {
		return err
	}

	*o = MetricAnomalyCondition(varMetricAnomalyCondition)

	return err
}

type NullableMetricAnomalyCondition struct {
	value *MetricAnomalyCondition
	isSet bool
}

func (v NullableMetricAnomalyCondition) Get() *MetricAnomalyCondition {
	return v.value
}

func (v *NullableMetricAnomalyCondition) Set(val *MetricAnomalyCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricAnomalyCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricAnomalyCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricAnomalyCondition(val *MetricAnomalyCondition) *NullableMetricAnomalyCondition {
	return &NullableMetricAnomalyCondition{value: val, isSet: true}
}

func (v NullableMetricAnomalyCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricAnomalyCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


