/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
)

// LogFilterOperationType the model 'LogFilterOperationType'
type LogFilterOperationType string

// List of LogFilterOperationType
const (
	LOGFILTEROPERATIONTYPE_LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED LogFilterOperationType = "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
	LOGFILTEROPERATIONTYPE_LOG_FILTER_OPERATION_TYPE_INCLUDES LogFilterOperationType = "LOG_FILTER_OPERATION_TYPE_INCLUDES"
	LOGFILTEROPERATIONTYPE_LOG_FILTER_OPERATION_TYPE_ENDS_WITH LogFilterOperationType = "LOG_FILTER_OPERATION_TYPE_ENDS_WITH"
	LOGFILTEROPERATIONTYPE_LOG_FILTER_OPERATION_TYPE_STARTS_WITH LogFilterOperationType = "LOG_FILTER_OPERATION_TYPE_STARTS_WITH"
)

// All allowed values of LogFilterOperationType enum
var AllowedLogFilterOperationTypeEnumValues = []LogFilterOperationType{
	"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED",
	"LOG_FILTER_OPERATION_TYPE_INCLUDES",
	"LOG_FILTER_OPERATION_TYPE_ENDS_WITH",
	"LOG_FILTER_OPERATION_TYPE_STARTS_WITH",
}

func (v *LogFilterOperationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LogFilterOperationType(value)
	for _, existing := range AllowedLogFilterOperationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogFilterOperationType", value)
}

// NewLogFilterOperationTypeFromValue returns a pointer to a valid LogFilterOperationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogFilterOperationTypeFromValue(v string) (*LogFilterOperationType, error) {
	ev := LogFilterOperationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LogFilterOperationType: valid values are %v", v, AllowedLogFilterOperationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogFilterOperationType) IsValid() bool {
	for _, existing := range AllowedLogFilterOperationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LogFilterOperationType value
func (v LogFilterOperationType) Ptr() *LogFilterOperationType {
	return &v
}

type NullableLogFilterOperationType struct {
	value *LogFilterOperationType
	isSet bool
}

func (v NullableLogFilterOperationType) Get() *LogFilterOperationType {
	return v.value
}

func (v *NullableLogFilterOperationType) Set(val *LogFilterOperationType) {
	v.value = val
	v.isSet = true
}

func (v NullableLogFilterOperationType) IsSet() bool {
	return v.isSet
}

func (v *NullableLogFilterOperationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogFilterOperationType(val *LogFilterOperationType) *NullableLogFilterOperationType {
	return &NullableLogFilterOperationType{value: val, isSet: true}
}

func (v NullableLogFilterOperationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogFilterOperationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

