/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MetricAnomalyType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricAnomalyType{}

// MetricAnomalyType Configuration for alerts triggered by anomalous metric patterns
type MetricAnomalyType struct {
	AnomalyAlertSettings *AnomalyAlertSettings `json:"anomalyAlertSettings,omitempty"`
	// The delay in milliseconds before evaluating the alert condition
	EvaluationDelayMs *int32 `json:"evaluationDelayMs,omitempty"`
	MetricFilter MetricFilter `json:"metricFilter"`
	Rules []MetricAnomalyRule `json:"rules"`
}

type _MetricAnomalyType MetricAnomalyType

// NewMetricAnomalyType instantiates a new MetricAnomalyType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricAnomalyType(metricFilter MetricFilter, rules []MetricAnomalyRule) *MetricAnomalyType {
	this := MetricAnomalyType{}
	this.MetricFilter = metricFilter
	this.Rules = rules
	return &this
}

// NewMetricAnomalyTypeWithDefaults instantiates a new MetricAnomalyType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricAnomalyTypeWithDefaults() *MetricAnomalyType {
	this := MetricAnomalyType{}
	return &this
}

// GetAnomalyAlertSettings returns the AnomalyAlertSettings field value if set, zero value otherwise.
func (o *MetricAnomalyType) GetAnomalyAlertSettings() AnomalyAlertSettings {
	if o == nil || IsNil(o.AnomalyAlertSettings) {
		var ret AnomalyAlertSettings
		return ret
	}
	return *o.AnomalyAlertSettings
}

// GetAnomalyAlertSettingsOk returns a tuple with the AnomalyAlertSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricAnomalyType) GetAnomalyAlertSettingsOk() (*AnomalyAlertSettings, bool) {
	if o == nil || IsNil(o.AnomalyAlertSettings) {
		return nil, false
	}
	return o.AnomalyAlertSettings, true
}

// HasAnomalyAlertSettings returns a boolean if a field has been set.
func (o *MetricAnomalyType) HasAnomalyAlertSettings() bool {
	if o != nil && !IsNil(o.AnomalyAlertSettings) {
		return true
	}

	return false
}

// SetAnomalyAlertSettings gets a reference to the given AnomalyAlertSettings and assigns it to the AnomalyAlertSettings field.
func (o *MetricAnomalyType) SetAnomalyAlertSettings(v AnomalyAlertSettings) {
	o.AnomalyAlertSettings = &v
}

// GetEvaluationDelayMs returns the EvaluationDelayMs field value if set, zero value otherwise.
func (o *MetricAnomalyType) GetEvaluationDelayMs() int32 {
	if o == nil || IsNil(o.EvaluationDelayMs) {
		var ret int32
		return ret
	}
	return *o.EvaluationDelayMs
}

// GetEvaluationDelayMsOk returns a tuple with the EvaluationDelayMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricAnomalyType) GetEvaluationDelayMsOk() (*int32, bool) {
	if o == nil || IsNil(o.EvaluationDelayMs) {
		return nil, false
	}
	return o.EvaluationDelayMs, true
}

// HasEvaluationDelayMs returns a boolean if a field has been set.
func (o *MetricAnomalyType) HasEvaluationDelayMs() bool {
	if o != nil && !IsNil(o.EvaluationDelayMs) {
		return true
	}

	return false
}

// SetEvaluationDelayMs gets a reference to the given int32 and assigns it to the EvaluationDelayMs field.
func (o *MetricAnomalyType) SetEvaluationDelayMs(v int32) {
	o.EvaluationDelayMs = &v
}

// GetMetricFilter returns the MetricFilter field value
func (o *MetricAnomalyType) GetMetricFilter() MetricFilter {
	if o == nil {
		var ret MetricFilter
		return ret
	}

	return o.MetricFilter
}

// GetMetricFilterOk returns a tuple with the MetricFilter field value
// and a boolean to check if the value has been set.
func (o *MetricAnomalyType) GetMetricFilterOk() (*MetricFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricFilter, true
}

// SetMetricFilter sets field value
func (o *MetricAnomalyType) SetMetricFilter(v MetricFilter) {
	o.MetricFilter = v
}

// GetRules returns the Rules field value
func (o *MetricAnomalyType) GetRules() []MetricAnomalyRule {
	if o == nil {
		var ret []MetricAnomalyRule
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *MetricAnomalyType) GetRulesOk() ([]MetricAnomalyRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *MetricAnomalyType) SetRules(v []MetricAnomalyRule) {
	o.Rules = v
}

func (o MetricAnomalyType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricAnomalyType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AnomalyAlertSettings) {
		toSerialize["anomalyAlertSettings"] = o.AnomalyAlertSettings
	}
	if !IsNil(o.EvaluationDelayMs) {
		toSerialize["evaluationDelayMs"] = o.EvaluationDelayMs
	}
	toSerialize["metricFilter"] = o.MetricFilter
	toSerialize["rules"] = o.Rules
	return toSerialize, nil
}

func (o *MetricAnomalyType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metricFilter",
		"rules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetricAnomalyType := _MetricAnomalyType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetricAnomalyType)

	if err != nil {
		return err
	}

	*o = MetricAnomalyType(varMetricAnomalyType)

	return err
}

type NullableMetricAnomalyType struct {
	value *MetricAnomalyType
	isSet bool
}

func (v NullableMetricAnomalyType) Get() *MetricAnomalyType {
	return v.value
}

func (v *NullableMetricAnomalyType) Set(val *MetricAnomalyType) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricAnomalyType) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricAnomalyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricAnomalyType(val *MetricAnomalyType) *NullableMetricAnomalyType {
	return &NullableMetricAnomalyType{value: val, isSet: true}
}

func (v NullableMetricAnomalyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricAnomalyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


