/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LogsUniqueCountCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogsUniqueCountCondition{}

// LogsUniqueCountCondition Defines conditions for unique count alerts
type LogsUniqueCountCondition struct {
	// The maximum unique count
	MaxUniqueCount string `json:"maxUniqueCount"`
	TimeWindow LogsUniqueValueTimeWindow `json:"timeWindow"`
}

type _LogsUniqueCountCondition LogsUniqueCountCondition

// NewLogsUniqueCountCondition instantiates a new LogsUniqueCountCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsUniqueCountCondition(maxUniqueCount string, timeWindow LogsUniqueValueTimeWindow) *LogsUniqueCountCondition {
	this := LogsUniqueCountCondition{}
	this.MaxUniqueCount = maxUniqueCount
	this.TimeWindow = timeWindow
	return &this
}

// NewLogsUniqueCountConditionWithDefaults instantiates a new LogsUniqueCountCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsUniqueCountConditionWithDefaults() *LogsUniqueCountCondition {
	this := LogsUniqueCountCondition{}
	return &this
}

// GetMaxUniqueCount returns the MaxUniqueCount field value
func (o *LogsUniqueCountCondition) GetMaxUniqueCount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MaxUniqueCount
}

// GetMaxUniqueCountOk returns a tuple with the MaxUniqueCount field value
// and a boolean to check if the value has been set.
func (o *LogsUniqueCountCondition) GetMaxUniqueCountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxUniqueCount, true
}

// SetMaxUniqueCount sets field value
func (o *LogsUniqueCountCondition) SetMaxUniqueCount(v string) {
	o.MaxUniqueCount = v
}

// GetTimeWindow returns the TimeWindow field value
func (o *LogsUniqueCountCondition) GetTimeWindow() LogsUniqueValueTimeWindow {
	if o == nil {
		var ret LogsUniqueValueTimeWindow
		return ret
	}

	return o.TimeWindow
}

// GetTimeWindowOk returns a tuple with the TimeWindow field value
// and a boolean to check if the value has been set.
func (o *LogsUniqueCountCondition) GetTimeWindowOk() (*LogsUniqueValueTimeWindow, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeWindow, true
}

// SetTimeWindow sets field value
func (o *LogsUniqueCountCondition) SetTimeWindow(v LogsUniqueValueTimeWindow) {
	o.TimeWindow = v
}

func (o LogsUniqueCountCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogsUniqueCountCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["maxUniqueCount"] = o.MaxUniqueCount
	toSerialize["timeWindow"] = o.TimeWindow
	return toSerialize, nil
}

func (o *LogsUniqueCountCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"maxUniqueCount",
		"timeWindow",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogsUniqueCountCondition := _LogsUniqueCountCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogsUniqueCountCondition)

	if err != nil {
		return err
	}

	*o = LogsUniqueCountCondition(varLogsUniqueCountCondition)

	return err
}

type NullableLogsUniqueCountCondition struct {
	value *LogsUniqueCountCondition
	isSet bool
}

func (v NullableLogsUniqueCountCondition) Get() *LogsUniqueCountCondition {
	return v.value
}

func (v *NullableLogsUniqueCountCondition) Set(val *LogsUniqueCountCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsUniqueCountCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsUniqueCountCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsUniqueCountCondition(val *LogsUniqueCountCondition) *NullableLogsUniqueCountCondition {
	return &NullableLogsUniqueCountCondition{value: val, isSet: true}
}

func (v NullableLogsUniqueCountCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsUniqueCountCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


