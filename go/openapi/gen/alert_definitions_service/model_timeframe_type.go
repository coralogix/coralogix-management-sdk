/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
)

// TimeframeType the model 'TimeframeType'
type TimeframeType string

// List of TimeframeType
const (
	TIMEFRAMETYPE_TIMEFRAME_TYPE_UNSPECIFIED TimeframeType = "TIMEFRAME_TYPE_UNSPECIFIED"
	TIMEFRAMETYPE_TIMEFRAME_TYPE_UP_TO TimeframeType = "TIMEFRAME_TYPE_UP_TO"
)

// All allowed values of TimeframeType enum
var AllowedTimeframeTypeEnumValues = []TimeframeType{
	"TIMEFRAME_TYPE_UNSPECIFIED",
	"TIMEFRAME_TYPE_UP_TO",
}

func (v *TimeframeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TimeframeType(value)
	for _, existing := range AllowedTimeframeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TimeframeType", value)
}

// NewTimeframeTypeFromValue returns a pointer to a valid TimeframeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimeframeTypeFromValue(v string) (*TimeframeType, error) {
	ev := TimeframeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TimeframeType: valid values are %v", v, AllowedTimeframeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TimeframeType) IsValid() bool {
	for _, existing := range AllowedTimeframeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TimeframeType value
func (v TimeframeType) Ptr() *TimeframeType {
	return &v
}

type NullableTimeframeType struct {
	value *TimeframeType
	isSet bool
}

func (v NullableTimeframeType) Get() *TimeframeType {
	return v.value
}

func (v *NullableTimeframeType) Set(val *TimeframeType) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeframeType) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeframeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeframeType(val *TimeframeType) *NullableTimeframeType {
	return &NullableTimeframeType{value: val, isSet: true}
}

func (v NullableTimeframeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeframeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

