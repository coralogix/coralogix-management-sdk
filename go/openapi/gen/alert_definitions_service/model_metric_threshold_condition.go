/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MetricThresholdCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricThresholdCondition{}

// MetricThresholdCondition Defines conditions for metric threshold alerts
type MetricThresholdCondition struct {
	ConditionType MetricThresholdConditionType `json:"conditionType"`
	// The percentage of values that must exceed the threshold to trigger the alert
	ForOverPct int64 `json:"forOverPct"`
	OfTheLast MetricTimeWindow `json:"ofTheLast"`
	// The threshold value for the alert condition
	Threshold float64 `json:"threshold"`
}

type _MetricThresholdCondition MetricThresholdCondition

// NewMetricThresholdCondition instantiates a new MetricThresholdCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricThresholdCondition(conditionType MetricThresholdConditionType, forOverPct int64, ofTheLast MetricTimeWindow, threshold float64) *MetricThresholdCondition {
	this := MetricThresholdCondition{}
	this.ConditionType = conditionType
	this.ForOverPct = forOverPct
	this.OfTheLast = ofTheLast
	this.Threshold = threshold
	return &this
}

// NewMetricThresholdConditionWithDefaults instantiates a new MetricThresholdCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricThresholdConditionWithDefaults() *MetricThresholdCondition {
	this := MetricThresholdCondition{}
	return &this
}

// GetConditionType returns the ConditionType field value
func (o *MetricThresholdCondition) GetConditionType() MetricThresholdConditionType {
	if o == nil {
		var ret MetricThresholdConditionType
		return ret
	}

	return o.ConditionType
}

// GetConditionTypeOk returns a tuple with the ConditionType field value
// and a boolean to check if the value has been set.
func (o *MetricThresholdCondition) GetConditionTypeOk() (*MetricThresholdConditionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConditionType, true
}

// SetConditionType sets field value
func (o *MetricThresholdCondition) SetConditionType(v MetricThresholdConditionType) {
	o.ConditionType = v
}

// GetForOverPct returns the ForOverPct field value
func (o *MetricThresholdCondition) GetForOverPct() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ForOverPct
}

// GetForOverPctOk returns a tuple with the ForOverPct field value
// and a boolean to check if the value has been set.
func (o *MetricThresholdCondition) GetForOverPctOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForOverPct, true
}

// SetForOverPct sets field value
func (o *MetricThresholdCondition) SetForOverPct(v int64) {
	o.ForOverPct = v
}

// GetOfTheLast returns the OfTheLast field value
func (o *MetricThresholdCondition) GetOfTheLast() MetricTimeWindow {
	if o == nil {
		var ret MetricTimeWindow
		return ret
	}

	return o.OfTheLast
}

// GetOfTheLastOk returns a tuple with the OfTheLast field value
// and a boolean to check if the value has been set.
func (o *MetricThresholdCondition) GetOfTheLastOk() (*MetricTimeWindow, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OfTheLast, true
}

// SetOfTheLast sets field value
func (o *MetricThresholdCondition) SetOfTheLast(v MetricTimeWindow) {
	o.OfTheLast = v
}

// GetThreshold returns the Threshold field value
func (o *MetricThresholdCondition) GetThreshold() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value
// and a boolean to check if the value has been set.
func (o *MetricThresholdCondition) GetThresholdOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Threshold, true
}

// SetThreshold sets field value
func (o *MetricThresholdCondition) SetThreshold(v float64) {
	o.Threshold = v
}

func (o MetricThresholdCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricThresholdCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["conditionType"] = o.ConditionType
	toSerialize["forOverPct"] = o.ForOverPct
	toSerialize["ofTheLast"] = o.OfTheLast
	toSerialize["threshold"] = o.Threshold
	return toSerialize, nil
}

func (o *MetricThresholdCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"conditionType",
		"forOverPct",
		"ofTheLast",
		"threshold",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetricThresholdCondition := _MetricThresholdCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetricThresholdCondition)

	if err != nil {
		return err
	}

	*o = MetricThresholdCondition(varMetricThresholdCondition)

	return err
}

type NullableMetricThresholdCondition struct {
	value *MetricThresholdCondition
	isSet bool
}

func (v NullableMetricThresholdCondition) Get() *MetricThresholdCondition {
	return v.value
}

func (v *NullableMetricThresholdCondition) Set(val *MetricThresholdCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricThresholdCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricThresholdCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricThresholdCondition(val *MetricThresholdCondition) *NullableMetricThresholdCondition {
	return &NullableMetricThresholdCondition{value: val, isSet: true}
}

func (v NullableMetricThresholdCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricThresholdCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


