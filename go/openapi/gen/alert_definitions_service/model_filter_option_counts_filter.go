/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
)

// checks if the FilterOptionCountsFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterOptionCountsFilter{}

// FilterOptionCountsFilter Filter configuration for counting filter options
type FilterOptionCountsFilter struct {
	EnabledFilter interface{} `json:"enabledFilter,omitempty"`
	EntityLabelsFilter interface{} `json:"entityLabelsFilter,omitempty"`
	NameFilter interface{} `json:"nameFilter,omitempty"`
	PriorityFilter interface{} `json:"priorityFilter,omitempty"`
	StatusFilter interface{} `json:"statusFilter,omitempty"`
	TypeFilter interface{} `json:"typeFilter,omitempty"`
}

// NewFilterOptionCountsFilter instantiates a new FilterOptionCountsFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterOptionCountsFilter() *FilterOptionCountsFilter {
	this := FilterOptionCountsFilter{}
	return &this
}

// NewFilterOptionCountsFilterWithDefaults instantiates a new FilterOptionCountsFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterOptionCountsFilterWithDefaults() *FilterOptionCountsFilter {
	this := FilterOptionCountsFilter{}
	return &this
}

// GetEnabledFilter returns the EnabledFilter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilterOptionCountsFilter) GetEnabledFilter() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.EnabledFilter
}

// GetEnabledFilterOk returns a tuple with the EnabledFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilterOptionCountsFilter) GetEnabledFilterOk() (*interface{}, bool) {
	if o == nil || IsNil(o.EnabledFilter) {
		return nil, false
	}
	return &o.EnabledFilter, true
}

// HasEnabledFilter returns a boolean if a field has been set.
func (o *FilterOptionCountsFilter) HasEnabledFilter() bool {
	if o != nil && !IsNil(o.EnabledFilter) {
		return true
	}

	return false
}

// SetEnabledFilter gets a reference to the given interface{} and assigns it to the EnabledFilter field.
func (o *FilterOptionCountsFilter) SetEnabledFilter(v interface{}) {
	o.EnabledFilter = v
}

// GetEntityLabelsFilter returns the EntityLabelsFilter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilterOptionCountsFilter) GetEntityLabelsFilter() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.EntityLabelsFilter
}

// GetEntityLabelsFilterOk returns a tuple with the EntityLabelsFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilterOptionCountsFilter) GetEntityLabelsFilterOk() (*interface{}, bool) {
	if o == nil || IsNil(o.EntityLabelsFilter) {
		return nil, false
	}
	return &o.EntityLabelsFilter, true
}

// HasEntityLabelsFilter returns a boolean if a field has been set.
func (o *FilterOptionCountsFilter) HasEntityLabelsFilter() bool {
	if o != nil && !IsNil(o.EntityLabelsFilter) {
		return true
	}

	return false
}

// SetEntityLabelsFilter gets a reference to the given interface{} and assigns it to the EntityLabelsFilter field.
func (o *FilterOptionCountsFilter) SetEntityLabelsFilter(v interface{}) {
	o.EntityLabelsFilter = v
}

// GetNameFilter returns the NameFilter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilterOptionCountsFilter) GetNameFilter() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.NameFilter
}

// GetNameFilterOk returns a tuple with the NameFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilterOptionCountsFilter) GetNameFilterOk() (*interface{}, bool) {
	if o == nil || IsNil(o.NameFilter) {
		return nil, false
	}
	return &o.NameFilter, true
}

// HasNameFilter returns a boolean if a field has been set.
func (o *FilterOptionCountsFilter) HasNameFilter() bool {
	if o != nil && !IsNil(o.NameFilter) {
		return true
	}

	return false
}

// SetNameFilter gets a reference to the given interface{} and assigns it to the NameFilter field.
func (o *FilterOptionCountsFilter) SetNameFilter(v interface{}) {
	o.NameFilter = v
}

// GetPriorityFilter returns the PriorityFilter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilterOptionCountsFilter) GetPriorityFilter() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.PriorityFilter
}

// GetPriorityFilterOk returns a tuple with the PriorityFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilterOptionCountsFilter) GetPriorityFilterOk() (*interface{}, bool) {
	if o == nil || IsNil(o.PriorityFilter) {
		return nil, false
	}
	return &o.PriorityFilter, true
}

// HasPriorityFilter returns a boolean if a field has been set.
func (o *FilterOptionCountsFilter) HasPriorityFilter() bool {
	if o != nil && !IsNil(o.PriorityFilter) {
		return true
	}

	return false
}

// SetPriorityFilter gets a reference to the given interface{} and assigns it to the PriorityFilter field.
func (o *FilterOptionCountsFilter) SetPriorityFilter(v interface{}) {
	o.PriorityFilter = v
}

// GetStatusFilter returns the StatusFilter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilterOptionCountsFilter) GetStatusFilter() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.StatusFilter
}

// GetStatusFilterOk returns a tuple with the StatusFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilterOptionCountsFilter) GetStatusFilterOk() (*interface{}, bool) {
	if o == nil || IsNil(o.StatusFilter) {
		return nil, false
	}
	return &o.StatusFilter, true
}

// HasStatusFilter returns a boolean if a field has been set.
func (o *FilterOptionCountsFilter) HasStatusFilter() bool {
	if o != nil && !IsNil(o.StatusFilter) {
		return true
	}

	return false
}

// SetStatusFilter gets a reference to the given interface{} and assigns it to the StatusFilter field.
func (o *FilterOptionCountsFilter) SetStatusFilter(v interface{}) {
	o.StatusFilter = v
}

// GetTypeFilter returns the TypeFilter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilterOptionCountsFilter) GetTypeFilter() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.TypeFilter
}

// GetTypeFilterOk returns a tuple with the TypeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilterOptionCountsFilter) GetTypeFilterOk() (*interface{}, bool) {
	if o == nil || IsNil(o.TypeFilter) {
		return nil, false
	}
	return &o.TypeFilter, true
}

// HasTypeFilter returns a boolean if a field has been set.
func (o *FilterOptionCountsFilter) HasTypeFilter() bool {
	if o != nil && !IsNil(o.TypeFilter) {
		return true
	}

	return false
}

// SetTypeFilter gets a reference to the given interface{} and assigns it to the TypeFilter field.
func (o *FilterOptionCountsFilter) SetTypeFilter(v interface{}) {
	o.TypeFilter = v
}

func (o FilterOptionCountsFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterOptionCountsFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EnabledFilter != nil {
		toSerialize["enabledFilter"] = o.EnabledFilter
	}
	if o.EntityLabelsFilter != nil {
		toSerialize["entityLabelsFilter"] = o.EntityLabelsFilter
	}
	if o.NameFilter != nil {
		toSerialize["nameFilter"] = o.NameFilter
	}
	if o.PriorityFilter != nil {
		toSerialize["priorityFilter"] = o.PriorityFilter
	}
	if o.StatusFilter != nil {
		toSerialize["statusFilter"] = o.StatusFilter
	}
	if o.TypeFilter != nil {
		toSerialize["typeFilter"] = o.TypeFilter
	}
	return toSerialize, nil
}

type NullableFilterOptionCountsFilter struct {
	value *FilterOptionCountsFilter
	isSet bool
}

func (v NullableFilterOptionCountsFilter) Get() *FilterOptionCountsFilter {
	return v.value
}

func (v *NullableFilterOptionCountsFilter) Set(val *FilterOptionCountsFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterOptionCountsFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterOptionCountsFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterOptionCountsFilter(val *FilterOptionCountsFilter) *NullableFilterOptionCountsFilter {
	return &NullableFilterOptionCountsFilter{value: val, isSet: true}
}

func (v NullableFilterOptionCountsFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterOptionCountsFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


