/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ActivitySchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivitySchedule{}

// ActivitySchedule Defines when an alert should be active based on days of the week and time windows
type ActivitySchedule struct {
	DayOfWeek []DayOfWeek `json:"dayOfWeek"`
	EndTime TimeOfDay `json:"endTime"`
	StartTime TimeOfDay `json:"startTime"`
}

type _ActivitySchedule ActivitySchedule

// NewActivitySchedule instantiates a new ActivitySchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivitySchedule(dayOfWeek []DayOfWeek, endTime TimeOfDay, startTime TimeOfDay) *ActivitySchedule {
	this := ActivitySchedule{}
	this.DayOfWeek = dayOfWeek
	this.EndTime = endTime
	this.StartTime = startTime
	return &this
}

// NewActivityScheduleWithDefaults instantiates a new ActivitySchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityScheduleWithDefaults() *ActivitySchedule {
	this := ActivitySchedule{}
	return &this
}

// GetDayOfWeek returns the DayOfWeek field value
func (o *ActivitySchedule) GetDayOfWeek() []DayOfWeek {
	if o == nil {
		var ret []DayOfWeek
		return ret
	}

	return o.DayOfWeek
}

// GetDayOfWeekOk returns a tuple with the DayOfWeek field value
// and a boolean to check if the value has been set.
func (o *ActivitySchedule) GetDayOfWeekOk() ([]DayOfWeek, bool) {
	if o == nil {
		return nil, false
	}
	return o.DayOfWeek, true
}

// SetDayOfWeek sets field value
func (o *ActivitySchedule) SetDayOfWeek(v []DayOfWeek) {
	o.DayOfWeek = v
}

// GetEndTime returns the EndTime field value
func (o *ActivitySchedule) GetEndTime() TimeOfDay {
	if o == nil {
		var ret TimeOfDay
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *ActivitySchedule) GetEndTimeOk() (*TimeOfDay, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *ActivitySchedule) SetEndTime(v TimeOfDay) {
	o.EndTime = v
}

// GetStartTime returns the StartTime field value
func (o *ActivitySchedule) GetStartTime() TimeOfDay {
	if o == nil {
		var ret TimeOfDay
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *ActivitySchedule) GetStartTimeOk() (*TimeOfDay, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *ActivitySchedule) SetStartTime(v TimeOfDay) {
	o.StartTime = v
}

func (o ActivitySchedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivitySchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dayOfWeek"] = o.DayOfWeek
	toSerialize["endTime"] = o.EndTime
	toSerialize["startTime"] = o.StartTime
	return toSerialize, nil
}

func (o *ActivitySchedule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dayOfWeek",
		"endTime",
		"startTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActivitySchedule := _ActivitySchedule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActivitySchedule)

	if err != nil {
		return err
	}

	*o = ActivitySchedule(varActivitySchedule)

	return err
}

type NullableActivitySchedule struct {
	value *ActivitySchedule
	isSet bool
}

func (v NullableActivitySchedule) Get() *ActivitySchedule {
	return v.value
}

func (v *NullableActivitySchedule) Set(val *ActivitySchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableActivitySchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableActivitySchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivitySchedule(val *ActivitySchedule) *NullableActivitySchedule {
	return &NullableActivitySchedule{value: val, isSet: true}
}

func (v NullableActivitySchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivitySchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


