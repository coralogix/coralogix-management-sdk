/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
)

// MetricAnomalyConditionType the model 'MetricAnomalyConditionType'
type MetricAnomalyConditionType string

// List of MetricAnomalyConditionType
const (
	METRICANOMALYCONDITIONTYPE_METRIC_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED MetricAnomalyConditionType = "METRIC_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED"
	METRICANOMALYCONDITIONTYPE_METRIC_ANOMALY_CONDITION_TYPE_LESS_THAN_USUAL MetricAnomalyConditionType = "METRIC_ANOMALY_CONDITION_TYPE_LESS_THAN_USUAL"
)

// All allowed values of MetricAnomalyConditionType enum
var AllowedMetricAnomalyConditionTypeEnumValues = []MetricAnomalyConditionType{
	"METRIC_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED",
	"METRIC_ANOMALY_CONDITION_TYPE_LESS_THAN_USUAL",
}

func (v *MetricAnomalyConditionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetricAnomalyConditionType(value)
	for _, existing := range AllowedMetricAnomalyConditionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetricAnomalyConditionType", value)
}

// NewMetricAnomalyConditionTypeFromValue returns a pointer to a valid MetricAnomalyConditionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetricAnomalyConditionTypeFromValue(v string) (*MetricAnomalyConditionType, error) {
	ev := MetricAnomalyConditionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetricAnomalyConditionType: valid values are %v", v, AllowedMetricAnomalyConditionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetricAnomalyConditionType) IsValid() bool {
	for _, existing := range AllowedMetricAnomalyConditionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetricAnomalyConditionType value
func (v MetricAnomalyConditionType) Ptr() *MetricAnomalyConditionType {
	return &v
}

type NullableMetricAnomalyConditionType struct {
	value *MetricAnomalyConditionType
	isSet bool
}

func (v NullableMetricAnomalyConditionType) Get() *MetricAnomalyConditionType {
	return v.value
}

func (v *NullableMetricAnomalyConditionType) Set(val *MetricAnomalyConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricAnomalyConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricAnomalyConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricAnomalyConditionType(val *MetricAnomalyConditionType) *NullableMetricAnomalyConditionType {
	return &NullableMetricAnomalyConditionType{value: val, isSet: true}
}

func (v NullableMetricAnomalyConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricAnomalyConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

