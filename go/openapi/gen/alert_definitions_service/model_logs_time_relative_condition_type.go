/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
)

// LogsTimeRelativeConditionType the model 'LogsTimeRelativeConditionType'
type LogsTimeRelativeConditionType string

// List of LogsTimeRelativeConditionType
const (
	LOGSTIMERELATIVECONDITIONTYPE_LOGS_TIME_RELATIVE_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED LogsTimeRelativeConditionType = "LOGS_TIME_RELATIVE_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
	LOGSTIMERELATIVECONDITIONTYPE_LOGS_TIME_RELATIVE_CONDITION_TYPE_LESS_THAN LogsTimeRelativeConditionType = "LOGS_TIME_RELATIVE_CONDITION_TYPE_LESS_THAN"
)

// All allowed values of LogsTimeRelativeConditionType enum
var AllowedLogsTimeRelativeConditionTypeEnumValues = []LogsTimeRelativeConditionType{
	"LOGS_TIME_RELATIVE_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED",
	"LOGS_TIME_RELATIVE_CONDITION_TYPE_LESS_THAN",
}

func (v *LogsTimeRelativeConditionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LogsTimeRelativeConditionType(value)
	for _, existing := range AllowedLogsTimeRelativeConditionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogsTimeRelativeConditionType", value)
}

// NewLogsTimeRelativeConditionTypeFromValue returns a pointer to a valid LogsTimeRelativeConditionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogsTimeRelativeConditionTypeFromValue(v string) (*LogsTimeRelativeConditionType, error) {
	ev := LogsTimeRelativeConditionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LogsTimeRelativeConditionType: valid values are %v", v, AllowedLogsTimeRelativeConditionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogsTimeRelativeConditionType) IsValid() bool {
	for _, existing := range AllowedLogsTimeRelativeConditionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LogsTimeRelativeConditionType value
func (v LogsTimeRelativeConditionType) Ptr() *LogsTimeRelativeConditionType {
	return &v
}

type NullableLogsTimeRelativeConditionType struct {
	value *LogsTimeRelativeConditionType
	isSet bool
}

func (v NullableLogsTimeRelativeConditionType) Get() *LogsTimeRelativeConditionType {
	return v.value
}

func (v *NullableLogsTimeRelativeConditionType) Set(val *LogsTimeRelativeConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsTimeRelativeConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsTimeRelativeConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsTimeRelativeConditionType(val *LogsTimeRelativeConditionType) *NullableLogsTimeRelativeConditionType {
	return &NullableLogsTimeRelativeConditionType{value: val, isSet: true}
}

func (v NullableLogsTimeRelativeConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsTimeRelativeConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

