/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
)

// TracingFilterOperationType the model 'TracingFilterOperationType'
type TracingFilterOperationType string

// List of TracingFilterOperationType
const (
	TRACINGFILTEROPERATIONTYPE_TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED TracingFilterOperationType = "TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED"
	TRACINGFILTEROPERATIONTYPE_TRACING_FILTER_OPERATION_TYPE_INCLUDES TracingFilterOperationType = "TRACING_FILTER_OPERATION_TYPE_INCLUDES"
	TRACINGFILTEROPERATIONTYPE_TRACING_FILTER_OPERATION_TYPE_ENDS_WITH TracingFilterOperationType = "TRACING_FILTER_OPERATION_TYPE_ENDS_WITH"
	TRACINGFILTEROPERATIONTYPE_TRACING_FILTER_OPERATION_TYPE_STARTS_WITH TracingFilterOperationType = "TRACING_FILTER_OPERATION_TYPE_STARTS_WITH"
	TRACINGFILTEROPERATIONTYPE_TRACING_FILTER_OPERATION_TYPE_IS_NOT TracingFilterOperationType = "TRACING_FILTER_OPERATION_TYPE_IS_NOT"
)

// All allowed values of TracingFilterOperationType enum
var AllowedTracingFilterOperationTypeEnumValues = []TracingFilterOperationType{
	"TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED",
	"TRACING_FILTER_OPERATION_TYPE_INCLUDES",
	"TRACING_FILTER_OPERATION_TYPE_ENDS_WITH",
	"TRACING_FILTER_OPERATION_TYPE_STARTS_WITH",
	"TRACING_FILTER_OPERATION_TYPE_IS_NOT",
}

func (v *TracingFilterOperationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TracingFilterOperationType(value)
	for _, existing := range AllowedTracingFilterOperationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TracingFilterOperationType", value)
}

// NewTracingFilterOperationTypeFromValue returns a pointer to a valid TracingFilterOperationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTracingFilterOperationTypeFromValue(v string) (*TracingFilterOperationType, error) {
	ev := TracingFilterOperationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TracingFilterOperationType: valid values are %v", v, AllowedTracingFilterOperationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TracingFilterOperationType) IsValid() bool {
	for _, existing := range AllowedTracingFilterOperationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TracingFilterOperationType value
func (v TracingFilterOperationType) Ptr() *TracingFilterOperationType {
	return &v
}

type NullableTracingFilterOperationType struct {
	value *TracingFilterOperationType
	isSet bool
}

func (v NullableTracingFilterOperationType) Get() *TracingFilterOperationType {
	return v.value
}

func (v *NullableTracingFilterOperationType) Set(val *TracingFilterOperationType) {
	v.value = val
	v.isSet = true
}

func (v NullableTracingFilterOperationType) IsSet() bool {
	return v.isSet
}

func (v *NullableTracingFilterOperationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTracingFilterOperationType(val *TracingFilterOperationType) *NullableTracingFilterOperationType {
	return &NullableTracingFilterOperationType{value: val, isSet: true}
}

func (v NullableTracingFilterOperationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTracingFilterOperationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

