/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
)

// NotifyOn the model 'NotifyOn'
type NotifyOn string

// List of NotifyOn
const (
	NOTIFYON_NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED NotifyOn = "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
	NOTIFYON_NOTIFY_ON_TRIGGERED_AND_RESOLVED NotifyOn = "NOTIFY_ON_TRIGGERED_AND_RESOLVED"
)

// All allowed values of NotifyOn enum
var AllowedNotifyOnEnumValues = []NotifyOn{
	"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
	"NOTIFY_ON_TRIGGERED_AND_RESOLVED",
}

func (v *NotifyOn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotifyOn(value)
	for _, existing := range AllowedNotifyOnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotifyOn", value)
}

// NewNotifyOnFromValue returns a pointer to a valid NotifyOn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotifyOnFromValue(v string) (*NotifyOn, error) {
	ev := NotifyOn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotifyOn: valid values are %v", v, AllowedNotifyOnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotifyOn) IsValid() bool {
	for _, existing := range AllowedNotifyOnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NotifyOn value
func (v NotifyOn) Ptr() *NotifyOn {
	return &v
}

type NullableNotifyOn struct {
	value *NotifyOn
	isSet bool
}

func (v NullableNotifyOn) Get() *NotifyOn {
	return v.value
}

func (v *NullableNotifyOn) Set(val *NotifyOn) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifyOn) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifyOn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifyOn(val *NotifyOn) *NullableNotifyOn {
	return &NullableNotifyOn{value: val, isSet: true}
}

func (v NullableNotifyOn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifyOn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

