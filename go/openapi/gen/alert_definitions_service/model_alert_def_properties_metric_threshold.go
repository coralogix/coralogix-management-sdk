/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AlertDefPropertiesMetricThreshold type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertDefPropertiesMetricThreshold{}

// AlertDefPropertiesMetricThreshold User-configurable properties of an alert definition
type AlertDefPropertiesMetricThreshold struct {
	ActiveOn *ActivitySchedule `json:"activeOn,omitempty"`
	// Whether the alert has been marked as deleted
	Deleted *bool `json:"deleted,omitempty"`
	// A detailed description of what the alert monitors and when it triggers
	Description *string `json:"description,omitempty"`
	// Whether the alert is currently active and monitoring
	Enabled *bool `json:"enabled,omitempty"`
	// Labels used to identify and categorize the alert entity
	EntityLabels *map[string]string `json:"entityLabels,omitempty"`
	GroupByKeys []string `json:"groupByKeys,omitempty"`
	IncidentsSettings *AlertDefIncidentSettings `json:"incidentsSettings,omitempty"`
	MetricThreshold *MetricThresholdType `json:"metricThreshold,omitempty"`
	// The name of the alert definition
	Name string `json:"name"`
	NotificationGroup *AlertDefNotificationGroup `json:"notificationGroup,omitempty"`
	NotificationGroupExcess []AlertDefNotificationGroup `json:"notificationGroupExcess,omitempty"`
	// Whether the alert is in phantom mode (creating incidents or not)
	PhantomMode *bool `json:"phantomMode,omitempty"`
	Priority AlertDefPriority `json:"priority"`
	Type AlertDefType `json:"type"`
}

type _AlertDefPropertiesMetricThreshold AlertDefPropertiesMetricThreshold

// NewAlertDefPropertiesMetricThreshold instantiates a new AlertDefPropertiesMetricThreshold object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertDefPropertiesMetricThreshold(name string, priority AlertDefPriority, type_ AlertDefType) *AlertDefPropertiesMetricThreshold {
	this := AlertDefPropertiesMetricThreshold{}
	this.Name = name
	this.Priority = priority
	this.Type = type_
	return &this
}

// NewAlertDefPropertiesMetricThresholdWithDefaults instantiates a new AlertDefPropertiesMetricThreshold object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertDefPropertiesMetricThresholdWithDefaults() *AlertDefPropertiesMetricThreshold {
	this := AlertDefPropertiesMetricThreshold{}
	return &this
}

// GetActiveOn returns the ActiveOn field value if set, zero value otherwise.
func (o *AlertDefPropertiesMetricThreshold) GetActiveOn() ActivitySchedule {
	if o == nil || IsNil(o.ActiveOn) {
		var ret ActivitySchedule
		return ret
	}
	return *o.ActiveOn
}

// GetActiveOnOk returns a tuple with the ActiveOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDefPropertiesMetricThreshold) GetActiveOnOk() (*ActivitySchedule, bool) {
	if o == nil || IsNil(o.ActiveOn) {
		return nil, false
	}
	return o.ActiveOn, true
}

// HasActiveOn returns a boolean if a field has been set.
func (o *AlertDefPropertiesMetricThreshold) HasActiveOn() bool {
	if o != nil && !IsNil(o.ActiveOn) {
		return true
	}

	return false
}

// SetActiveOn gets a reference to the given ActivitySchedule and assigns it to the ActiveOn field.
func (o *AlertDefPropertiesMetricThreshold) SetActiveOn(v ActivitySchedule) {
	o.ActiveOn = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *AlertDefPropertiesMetricThreshold) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDefPropertiesMetricThreshold) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *AlertDefPropertiesMetricThreshold) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *AlertDefPropertiesMetricThreshold) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AlertDefPropertiesMetricThreshold) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDefPropertiesMetricThreshold) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AlertDefPropertiesMetricThreshold) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AlertDefPropertiesMetricThreshold) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AlertDefPropertiesMetricThreshold) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDefPropertiesMetricThreshold) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AlertDefPropertiesMetricThreshold) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AlertDefPropertiesMetricThreshold) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetEntityLabels returns the EntityLabels field value if set, zero value otherwise.
func (o *AlertDefPropertiesMetricThreshold) GetEntityLabels() map[string]string {
	if o == nil || IsNil(o.EntityLabels) {
		var ret map[string]string
		return ret
	}
	return *o.EntityLabels
}

// GetEntityLabelsOk returns a tuple with the EntityLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDefPropertiesMetricThreshold) GetEntityLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.EntityLabels) {
		return nil, false
	}
	return o.EntityLabels, true
}

// HasEntityLabels returns a boolean if a field has been set.
func (o *AlertDefPropertiesMetricThreshold) HasEntityLabels() bool {
	if o != nil && !IsNil(o.EntityLabels) {
		return true
	}

	return false
}

// SetEntityLabels gets a reference to the given map[string]string and assigns it to the EntityLabels field.
func (o *AlertDefPropertiesMetricThreshold) SetEntityLabels(v map[string]string) {
	o.EntityLabels = &v
}

// GetGroupByKeys returns the GroupByKeys field value if set, zero value otherwise.
func (o *AlertDefPropertiesMetricThreshold) GetGroupByKeys() []string {
	if o == nil || IsNil(o.GroupByKeys) {
		var ret []string
		return ret
	}
	return o.GroupByKeys
}

// GetGroupByKeysOk returns a tuple with the GroupByKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDefPropertiesMetricThreshold) GetGroupByKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.GroupByKeys) {
		return nil, false
	}
	return o.GroupByKeys, true
}

// HasGroupByKeys returns a boolean if a field has been set.
func (o *AlertDefPropertiesMetricThreshold) HasGroupByKeys() bool {
	if o != nil && !IsNil(o.GroupByKeys) {
		return true
	}

	return false
}

// SetGroupByKeys gets a reference to the given []string and assigns it to the GroupByKeys field.
func (o *AlertDefPropertiesMetricThreshold) SetGroupByKeys(v []string) {
	o.GroupByKeys = v
}

// GetIncidentsSettings returns the IncidentsSettings field value if set, zero value otherwise.
func (o *AlertDefPropertiesMetricThreshold) GetIncidentsSettings() AlertDefIncidentSettings {
	if o == nil || IsNil(o.IncidentsSettings) {
		var ret AlertDefIncidentSettings
		return ret
	}
	return *o.IncidentsSettings
}

// GetIncidentsSettingsOk returns a tuple with the IncidentsSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDefPropertiesMetricThreshold) GetIncidentsSettingsOk() (*AlertDefIncidentSettings, bool) {
	if o == nil || IsNil(o.IncidentsSettings) {
		return nil, false
	}
	return o.IncidentsSettings, true
}

// HasIncidentsSettings returns a boolean if a field has been set.
func (o *AlertDefPropertiesMetricThreshold) HasIncidentsSettings() bool {
	if o != nil && !IsNil(o.IncidentsSettings) {
		return true
	}

	return false
}

// SetIncidentsSettings gets a reference to the given AlertDefIncidentSettings and assigns it to the IncidentsSettings field.
func (o *AlertDefPropertiesMetricThreshold) SetIncidentsSettings(v AlertDefIncidentSettings) {
	o.IncidentsSettings = &v
}

// GetMetricThreshold returns the MetricThreshold field value if set, zero value otherwise.
func (o *AlertDefPropertiesMetricThreshold) GetMetricThreshold() MetricThresholdType {
	if o == nil || IsNil(o.MetricThreshold) {
		var ret MetricThresholdType
		return ret
	}
	return *o.MetricThreshold
}

// GetMetricThresholdOk returns a tuple with the MetricThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDefPropertiesMetricThreshold) GetMetricThresholdOk() (*MetricThresholdType, bool) {
	if o == nil || IsNil(o.MetricThreshold) {
		return nil, false
	}
	return o.MetricThreshold, true
}

// HasMetricThreshold returns a boolean if a field has been set.
func (o *AlertDefPropertiesMetricThreshold) HasMetricThreshold() bool {
	if o != nil && !IsNil(o.MetricThreshold) {
		return true
	}

	return false
}

// SetMetricThreshold gets a reference to the given MetricThresholdType and assigns it to the MetricThreshold field.
func (o *AlertDefPropertiesMetricThreshold) SetMetricThreshold(v MetricThresholdType) {
	o.MetricThreshold = &v
}

// GetName returns the Name field value
func (o *AlertDefPropertiesMetricThreshold) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AlertDefPropertiesMetricThreshold) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AlertDefPropertiesMetricThreshold) SetName(v string) {
	o.Name = v
}

// GetNotificationGroup returns the NotificationGroup field value if set, zero value otherwise.
func (o *AlertDefPropertiesMetricThreshold) GetNotificationGroup() AlertDefNotificationGroup {
	if o == nil || IsNil(o.NotificationGroup) {
		var ret AlertDefNotificationGroup
		return ret
	}
	return *o.NotificationGroup
}

// GetNotificationGroupOk returns a tuple with the NotificationGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDefPropertiesMetricThreshold) GetNotificationGroupOk() (*AlertDefNotificationGroup, bool) {
	if o == nil || IsNil(o.NotificationGroup) {
		return nil, false
	}
	return o.NotificationGroup, true
}

// HasNotificationGroup returns a boolean if a field has been set.
func (o *AlertDefPropertiesMetricThreshold) HasNotificationGroup() bool {
	if o != nil && !IsNil(o.NotificationGroup) {
		return true
	}

	return false
}

// SetNotificationGroup gets a reference to the given AlertDefNotificationGroup and assigns it to the NotificationGroup field.
func (o *AlertDefPropertiesMetricThreshold) SetNotificationGroup(v AlertDefNotificationGroup) {
	o.NotificationGroup = &v
}

// GetNotificationGroupExcess returns the NotificationGroupExcess field value if set, zero value otherwise.
func (o *AlertDefPropertiesMetricThreshold) GetNotificationGroupExcess() []AlertDefNotificationGroup {
	if o == nil || IsNil(o.NotificationGroupExcess) {
		var ret []AlertDefNotificationGroup
		return ret
	}
	return o.NotificationGroupExcess
}

// GetNotificationGroupExcessOk returns a tuple with the NotificationGroupExcess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDefPropertiesMetricThreshold) GetNotificationGroupExcessOk() ([]AlertDefNotificationGroup, bool) {
	if o == nil || IsNil(o.NotificationGroupExcess) {
		return nil, false
	}
	return o.NotificationGroupExcess, true
}

// HasNotificationGroupExcess returns a boolean if a field has been set.
func (o *AlertDefPropertiesMetricThreshold) HasNotificationGroupExcess() bool {
	if o != nil && !IsNil(o.NotificationGroupExcess) {
		return true
	}

	return false
}

// SetNotificationGroupExcess gets a reference to the given []AlertDefNotificationGroup and assigns it to the NotificationGroupExcess field.
func (o *AlertDefPropertiesMetricThreshold) SetNotificationGroupExcess(v []AlertDefNotificationGroup) {
	o.NotificationGroupExcess = v
}

// GetPhantomMode returns the PhantomMode field value if set, zero value otherwise.
func (o *AlertDefPropertiesMetricThreshold) GetPhantomMode() bool {
	if o == nil || IsNil(o.PhantomMode) {
		var ret bool
		return ret
	}
	return *o.PhantomMode
}

// GetPhantomModeOk returns a tuple with the PhantomMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDefPropertiesMetricThreshold) GetPhantomModeOk() (*bool, bool) {
	if o == nil || IsNil(o.PhantomMode) {
		return nil, false
	}
	return o.PhantomMode, true
}

// HasPhantomMode returns a boolean if a field has been set.
func (o *AlertDefPropertiesMetricThreshold) HasPhantomMode() bool {
	if o != nil && !IsNil(o.PhantomMode) {
		return true
	}

	return false
}

// SetPhantomMode gets a reference to the given bool and assigns it to the PhantomMode field.
func (o *AlertDefPropertiesMetricThreshold) SetPhantomMode(v bool) {
	o.PhantomMode = &v
}

// GetPriority returns the Priority field value
func (o *AlertDefPropertiesMetricThreshold) GetPriority() AlertDefPriority {
	if o == nil {
		var ret AlertDefPriority
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *AlertDefPropertiesMetricThreshold) GetPriorityOk() (*AlertDefPriority, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *AlertDefPropertiesMetricThreshold) SetPriority(v AlertDefPriority) {
	o.Priority = v
}

// GetType returns the Type field value
func (o *AlertDefPropertiesMetricThreshold) GetType() AlertDefType {
	if o == nil {
		var ret AlertDefType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AlertDefPropertiesMetricThreshold) GetTypeOk() (*AlertDefType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AlertDefPropertiesMetricThreshold) SetType(v AlertDefType) {
	o.Type = v
}

func (o AlertDefPropertiesMetricThreshold) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertDefPropertiesMetricThreshold) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActiveOn) {
		toSerialize["activeOn"] = o.ActiveOn
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.EntityLabels) {
		toSerialize["entityLabels"] = o.EntityLabels
	}
	if !IsNil(o.GroupByKeys) {
		toSerialize["groupByKeys"] = o.GroupByKeys
	}
	if !IsNil(o.IncidentsSettings) {
		toSerialize["incidentsSettings"] = o.IncidentsSettings
	}
	if !IsNil(o.MetricThreshold) {
		toSerialize["metricThreshold"] = o.MetricThreshold
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.NotificationGroup) {
		toSerialize["notificationGroup"] = o.NotificationGroup
	}
	if !IsNil(o.NotificationGroupExcess) {
		toSerialize["notificationGroupExcess"] = o.NotificationGroupExcess
	}
	if !IsNil(o.PhantomMode) {
		toSerialize["phantomMode"] = o.PhantomMode
	}
	toSerialize["priority"] = o.Priority
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *AlertDefPropertiesMetricThreshold) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"priority",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAlertDefPropertiesMetricThreshold := _AlertDefPropertiesMetricThreshold{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAlertDefPropertiesMetricThreshold)

	if err != nil {
		return err
	}

	*o = AlertDefPropertiesMetricThreshold(varAlertDefPropertiesMetricThreshold)

	return err
}

type NullableAlertDefPropertiesMetricThreshold struct {
	value *AlertDefPropertiesMetricThreshold
	isSet bool
}

func (v NullableAlertDefPropertiesMetricThreshold) Get() *AlertDefPropertiesMetricThreshold {
	return v.value
}

func (v *NullableAlertDefPropertiesMetricThreshold) Set(val *AlertDefPropertiesMetricThreshold) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertDefPropertiesMetricThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertDefPropertiesMetricThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertDefPropertiesMetricThreshold(val *AlertDefPropertiesMetricThreshold) *NullableAlertDefPropertiesMetricThreshold {
	return &NullableAlertDefPropertiesMetricThreshold{value: val, isSet: true}
}

func (v NullableAlertDefPropertiesMetricThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertDefPropertiesMetricThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


