/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SloThresholdType - struct for SloThresholdType
type SloThresholdType struct {
	BurnRateSLOThresholdType *BurnRateSLOThresholdType
	ErrorBudgetSLOThresholdType *ErrorBudgetSLOThresholdType
}

// BurnRateSLOThresholdTypeAsSloThresholdType is a convenience function that returns BurnRateSLOThresholdType wrapped in SloThresholdType
func BurnRateSLOThresholdTypeAsSloThresholdType(v *BurnRateSLOThresholdType) SloThresholdType {
	return SloThresholdType{
		BurnRateSLOThresholdType: v,
	}
}

// ErrorBudgetSLOThresholdTypeAsSloThresholdType is a convenience function that returns ErrorBudgetSLOThresholdType wrapped in SloThresholdType
func ErrorBudgetSLOThresholdTypeAsSloThresholdType(v *ErrorBudgetSLOThresholdType) SloThresholdType {
	return SloThresholdType{
		ErrorBudgetSLOThresholdType: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SloThresholdType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BurnRateSLOThresholdType
	err = newStrictDecoder(data).Decode(&dst.BurnRateSLOThresholdType)
	if err == nil {
		jsonBurnRateSLOThresholdType, _ := json.Marshal(dst.BurnRateSLOThresholdType)
		if string(jsonBurnRateSLOThresholdType) == "{}" { // empty struct
			dst.BurnRateSLOThresholdType = nil
		} else {
			if err = validator.Validate(dst.BurnRateSLOThresholdType); err != nil {
				dst.BurnRateSLOThresholdType = nil
			} else {
				match++
			}
		}
	} else {
		dst.BurnRateSLOThresholdType = nil
	}

	// try to unmarshal data into ErrorBudgetSLOThresholdType
	err = newStrictDecoder(data).Decode(&dst.ErrorBudgetSLOThresholdType)
	if err == nil {
		jsonErrorBudgetSLOThresholdType, _ := json.Marshal(dst.ErrorBudgetSLOThresholdType)
		if string(jsonErrorBudgetSLOThresholdType) == "{}" { // empty struct
			dst.ErrorBudgetSLOThresholdType = nil
		} else {
			if err = validator.Validate(dst.ErrorBudgetSLOThresholdType); err != nil {
				dst.ErrorBudgetSLOThresholdType = nil
			} else {
				match++
			}
		}
	} else {
		dst.ErrorBudgetSLOThresholdType = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BurnRateSLOThresholdType = nil
		dst.ErrorBudgetSLOThresholdType = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SloThresholdType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SloThresholdType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SloThresholdType) MarshalJSON() ([]byte, error) {
	if src.BurnRateSLOThresholdType != nil {
		return json.Marshal(&src.BurnRateSLOThresholdType)
	}

	if src.ErrorBudgetSLOThresholdType != nil {
		return json.Marshal(&src.ErrorBudgetSLOThresholdType)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SloThresholdType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BurnRateSLOThresholdType != nil {
		return obj.BurnRateSLOThresholdType
	}

	if obj.ErrorBudgetSLOThresholdType != nil {
		return obj.ErrorBudgetSLOThresholdType
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SloThresholdType) GetActualInstanceValue() (interface{}) {
	if obj.BurnRateSLOThresholdType != nil {
		return *obj.BurnRateSLOThresholdType
	}

	if obj.ErrorBudgetSLOThresholdType != nil {
		return *obj.ErrorBudgetSLOThresholdType
	}

	// all schemas are nil
	return nil
}

type NullableSloThresholdType struct {
	value *SloThresholdType
	isSet bool
}

func (v NullableSloThresholdType) Get() *SloThresholdType {
	return v.value
}

func (v *NullableSloThresholdType) Set(val *SloThresholdType) {
	v.value = val
	v.isSet = true
}

func (v NullableSloThresholdType) IsSet() bool {
	return v.isSet
}

func (v *NullableSloThresholdType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloThresholdType(val *SloThresholdType) *NullableSloThresholdType {
	return &NullableSloThresholdType{value: val, isSet: true}
}

func (v NullableSloThresholdType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloThresholdType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


