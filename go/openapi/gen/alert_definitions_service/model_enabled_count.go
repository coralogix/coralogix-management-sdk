/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
)

// checks if the EnabledCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnabledCount{}

// EnabledCount Count for a specific alert enabled status
type EnabledCount struct {
	// The count for this enabled status
	Count *int64 `json:"count,omitempty"`
	// Whether the alert is enabled (true) or disabled (false)
	Enabled *bool `json:"enabled,omitempty"`
}

// NewEnabledCount instantiates a new EnabledCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnabledCount() *EnabledCount {
	this := EnabledCount{}
	return &this
}

// NewEnabledCountWithDefaults instantiates a new EnabledCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnabledCountWithDefaults() *EnabledCount {
	this := EnabledCount{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *EnabledCount) GetCount() int64 {
	if o == nil || IsNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnabledCount) GetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *EnabledCount) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *EnabledCount) SetCount(v int64) {
	o.Count = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *EnabledCount) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnabledCount) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *EnabledCount) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *EnabledCount) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o EnabledCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnabledCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableEnabledCount struct {
	value *EnabledCount
	isSet bool
}

func (v NullableEnabledCount) Get() *EnabledCount {
	return v.value
}

func (v *NullableEnabledCount) Set(val *EnabledCount) {
	v.value = val
	v.isSet = true
}

func (v NullableEnabledCount) IsSet() bool {
	return v.isSet
}

func (v *NullableEnabledCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnabledCount(val *EnabledCount) *NullableEnabledCount {
	return &NullableEnabledCount{value: val, isSet: true}
}

func (v NullableEnabledCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnabledCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


