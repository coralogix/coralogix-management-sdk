/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LogsImmediateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogsImmediateType{}

// LogsImmediateType Configuration for immediate alerts triggered on log entries matching specific filters.
type LogsImmediateType struct {
	LogsFilter V3LogsFilter `json:"logsFilter"`
	NotificationPayloadFilter []string `json:"notificationPayloadFilter,omitempty"`
}

type _LogsImmediateType LogsImmediateType

// NewLogsImmediateType instantiates a new LogsImmediateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsImmediateType(logsFilter V3LogsFilter) *LogsImmediateType {
	this := LogsImmediateType{}
	this.LogsFilter = logsFilter
	return &this
}

// NewLogsImmediateTypeWithDefaults instantiates a new LogsImmediateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsImmediateTypeWithDefaults() *LogsImmediateType {
	this := LogsImmediateType{}
	return &this
}

// GetLogsFilter returns the LogsFilter field value
func (o *LogsImmediateType) GetLogsFilter() V3LogsFilter {
	if o == nil {
		var ret V3LogsFilter
		return ret
	}

	return o.LogsFilter
}

// GetLogsFilterOk returns a tuple with the LogsFilter field value
// and a boolean to check if the value has been set.
func (o *LogsImmediateType) GetLogsFilterOk() (*V3LogsFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogsFilter, true
}

// SetLogsFilter sets field value
func (o *LogsImmediateType) SetLogsFilter(v V3LogsFilter) {
	o.LogsFilter = v
}

// GetNotificationPayloadFilter returns the NotificationPayloadFilter field value if set, zero value otherwise.
func (o *LogsImmediateType) GetNotificationPayloadFilter() []string {
	if o == nil || IsNil(o.NotificationPayloadFilter) {
		var ret []string
		return ret
	}
	return o.NotificationPayloadFilter
}

// GetNotificationPayloadFilterOk returns a tuple with the NotificationPayloadFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsImmediateType) GetNotificationPayloadFilterOk() ([]string, bool) {
	if o == nil || IsNil(o.NotificationPayloadFilter) {
		return nil, false
	}
	return o.NotificationPayloadFilter, true
}

// HasNotificationPayloadFilter returns a boolean if a field has been set.
func (o *LogsImmediateType) HasNotificationPayloadFilter() bool {
	if o != nil && !IsNil(o.NotificationPayloadFilter) {
		return true
	}

	return false
}

// SetNotificationPayloadFilter gets a reference to the given []string and assigns it to the NotificationPayloadFilter field.
func (o *LogsImmediateType) SetNotificationPayloadFilter(v []string) {
	o.NotificationPayloadFilter = v
}

func (o LogsImmediateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogsImmediateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["logsFilter"] = o.LogsFilter
	if !IsNil(o.NotificationPayloadFilter) {
		toSerialize["notificationPayloadFilter"] = o.NotificationPayloadFilter
	}
	return toSerialize, nil
}

func (o *LogsImmediateType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"logsFilter",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogsImmediateType := _LogsImmediateType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogsImmediateType)

	if err != nil {
		return err
	}

	*o = LogsImmediateType(varLogsImmediateType)

	return err
}

type NullableLogsImmediateType struct {
	value *LogsImmediateType
	isSet bool
}

func (v NullableLogsImmediateType) Get() *LogsImmediateType {
	return v.value
}

func (v *NullableLogsImmediateType) Set(val *LogsImmediateType) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsImmediateType) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsImmediateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsImmediateType(val *LogsImmediateType) *NullableLogsImmediateType {
	return &NullableLogsImmediateType{value: val, isSet: true}
}

func (v NullableLogsImmediateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsImmediateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


