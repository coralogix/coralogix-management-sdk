/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
)

// LogsRatioConditionType the model 'LogsRatioConditionType'
type LogsRatioConditionType string

// List of LogsRatioConditionType
const (
	LOGSRATIOCONDITIONTYPE_LOGS_RATIO_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED LogsRatioConditionType = "LOGS_RATIO_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
	LOGSRATIOCONDITIONTYPE_LOGS_RATIO_CONDITION_TYPE_LESS_THAN LogsRatioConditionType = "LOGS_RATIO_CONDITION_TYPE_LESS_THAN"
)

// All allowed values of LogsRatioConditionType enum
var AllowedLogsRatioConditionTypeEnumValues = []LogsRatioConditionType{
	"LOGS_RATIO_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED",
	"LOGS_RATIO_CONDITION_TYPE_LESS_THAN",
}

func (v *LogsRatioConditionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LogsRatioConditionType(value)
	for _, existing := range AllowedLogsRatioConditionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogsRatioConditionType", value)
}

// NewLogsRatioConditionTypeFromValue returns a pointer to a valid LogsRatioConditionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogsRatioConditionTypeFromValue(v string) (*LogsRatioConditionType, error) {
	ev := LogsRatioConditionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LogsRatioConditionType: valid values are %v", v, AllowedLogsRatioConditionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogsRatioConditionType) IsValid() bool {
	for _, existing := range AllowedLogsRatioConditionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LogsRatioConditionType value
func (v LogsRatioConditionType) Ptr() *LogsRatioConditionType {
	return &v
}

type NullableLogsRatioConditionType struct {
	value *LogsRatioConditionType
	isSet bool
}

func (v NullableLogsRatioConditionType) Get() *LogsRatioConditionType {
	return v.value
}

func (v *NullableLogsRatioConditionType) Set(val *LogsRatioConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsRatioConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsRatioConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsRatioConditionType(val *LogsRatioConditionType) *NullableLogsRatioConditionType {
	return &NullableLogsRatioConditionType{value: val, isSet: true}
}

func (v NullableLogsRatioConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsRatioConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

