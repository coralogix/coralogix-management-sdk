/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
)

// LogsThresholdConditionType the model 'LogsThresholdConditionType'
type LogsThresholdConditionType string

// List of LogsThresholdConditionType
const (
	LOGSTHRESHOLDCONDITIONTYPE_LOGS_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED LogsThresholdConditionType = "LOGS_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED"
	LOGSTHRESHOLDCONDITIONTYPE_LOGS_THRESHOLD_CONDITION_TYPE_LESS_THAN LogsThresholdConditionType = "LOGS_THRESHOLD_CONDITION_TYPE_LESS_THAN"
)

// All allowed values of LogsThresholdConditionType enum
var AllowedLogsThresholdConditionTypeEnumValues = []LogsThresholdConditionType{
	"LOGS_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED",
	"LOGS_THRESHOLD_CONDITION_TYPE_LESS_THAN",
}

func (v *LogsThresholdConditionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LogsThresholdConditionType(value)
	for _, existing := range AllowedLogsThresholdConditionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogsThresholdConditionType", value)
}

// NewLogsThresholdConditionTypeFromValue returns a pointer to a valid LogsThresholdConditionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogsThresholdConditionTypeFromValue(v string) (*LogsThresholdConditionType, error) {
	ev := LogsThresholdConditionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LogsThresholdConditionType: valid values are %v", v, AllowedLogsThresholdConditionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogsThresholdConditionType) IsValid() bool {
	for _, existing := range AllowedLogsThresholdConditionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LogsThresholdConditionType value
func (v LogsThresholdConditionType) Ptr() *LogsThresholdConditionType {
	return &v
}

type NullableLogsThresholdConditionType struct {
	value *LogsThresholdConditionType
	isSet bool
}

func (v NullableLogsThresholdConditionType) Get() *LogsThresholdConditionType {
	return v.value
}

func (v *NullableLogsThresholdConditionType) Set(val *LogsThresholdConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsThresholdConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsThresholdConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsThresholdConditionType(val *LogsThresholdConditionType) *NullableLogsThresholdConditionType {
	return &NullableLogsThresholdConditionType{value: val, isSet: true}
}

func (v NullableLogsThresholdConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsThresholdConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

