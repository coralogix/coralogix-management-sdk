/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReplaceAlertDefinitionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplaceAlertDefinitionRequest{}

// ReplaceAlertDefinitionRequest A request to replace an existing alert definition
type ReplaceAlertDefinitionRequest struct {
	AlertDefProperties AlertDefProperties `json:"alertDefProperties"`
	// Alert definition ID
	Id string `json:"id"`
}

type _ReplaceAlertDefinitionRequest ReplaceAlertDefinitionRequest

// NewReplaceAlertDefinitionRequest instantiates a new ReplaceAlertDefinitionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplaceAlertDefinitionRequest(alertDefProperties AlertDefProperties, id string) *ReplaceAlertDefinitionRequest {
	this := ReplaceAlertDefinitionRequest{}
	this.AlertDefProperties = alertDefProperties
	this.Id = id
	return &this
}

// NewReplaceAlertDefinitionRequestWithDefaults instantiates a new ReplaceAlertDefinitionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplaceAlertDefinitionRequestWithDefaults() *ReplaceAlertDefinitionRequest {
	this := ReplaceAlertDefinitionRequest{}
	return &this
}

// GetAlertDefProperties returns the AlertDefProperties field value
func (o *ReplaceAlertDefinitionRequest) GetAlertDefProperties() AlertDefProperties {
	if o == nil {
		var ret AlertDefProperties
		return ret
	}

	return o.AlertDefProperties
}

// GetAlertDefPropertiesOk returns a tuple with the AlertDefProperties field value
// and a boolean to check if the value has been set.
func (o *ReplaceAlertDefinitionRequest) GetAlertDefPropertiesOk() (*AlertDefProperties, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlertDefProperties, true
}

// SetAlertDefProperties sets field value
func (o *ReplaceAlertDefinitionRequest) SetAlertDefProperties(v AlertDefProperties) {
	o.AlertDefProperties = v
}

// GetId returns the Id field value
func (o *ReplaceAlertDefinitionRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ReplaceAlertDefinitionRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ReplaceAlertDefinitionRequest) SetId(v string) {
	o.Id = v
}

func (o ReplaceAlertDefinitionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplaceAlertDefinitionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["alertDefProperties"] = o.AlertDefProperties
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *ReplaceAlertDefinitionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"alertDefProperties",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReplaceAlertDefinitionRequest := _ReplaceAlertDefinitionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReplaceAlertDefinitionRequest)

	if err != nil {
		return err
	}

	*o = ReplaceAlertDefinitionRequest(varReplaceAlertDefinitionRequest)

	return err
}

type NullableReplaceAlertDefinitionRequest struct {
	value *ReplaceAlertDefinitionRequest
	isSet bool
}

func (v NullableReplaceAlertDefinitionRequest) Get() *ReplaceAlertDefinitionRequest {
	return v.value
}

func (v *NullableReplaceAlertDefinitionRequest) Set(val *ReplaceAlertDefinitionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceAlertDefinitionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceAlertDefinitionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceAlertDefinitionRequest(val *ReplaceAlertDefinitionRequest) *NullableReplaceAlertDefinitionRequest {
	return &NullableReplaceAlertDefinitionRequest{value: val, isSet: true}
}

func (v NullableReplaceAlertDefinitionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceAlertDefinitionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


