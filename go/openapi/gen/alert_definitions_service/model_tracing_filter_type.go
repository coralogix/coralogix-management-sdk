/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TracingFilterType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TracingFilterType{}

// TracingFilterType Filter type for trace entries
type TracingFilterType struct {
	Operation TracingFilterOperationType `json:"operation"`
	Values []string `json:"values"`
}

type _TracingFilterType TracingFilterType

// NewTracingFilterType instantiates a new TracingFilterType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTracingFilterType(operation TracingFilterOperationType, values []string) *TracingFilterType {
	this := TracingFilterType{}
	this.Operation = operation
	this.Values = values
	return &this
}

// NewTracingFilterTypeWithDefaults instantiates a new TracingFilterType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTracingFilterTypeWithDefaults() *TracingFilterType {
	this := TracingFilterType{}
	return &this
}

// GetOperation returns the Operation field value
func (o *TracingFilterType) GetOperation() TracingFilterOperationType {
	if o == nil {
		var ret TracingFilterOperationType
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *TracingFilterType) GetOperationOk() (*TracingFilterOperationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *TracingFilterType) SetOperation(v TracingFilterOperationType) {
	o.Operation = v
}

// GetValues returns the Values field value
func (o *TracingFilterType) GetValues() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *TracingFilterType) GetValuesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *TracingFilterType) SetValues(v []string) {
	o.Values = v
}

func (o TracingFilterType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TracingFilterType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operation"] = o.Operation
	toSerialize["values"] = o.Values
	return toSerialize, nil
}

func (o *TracingFilterType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operation",
		"values",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTracingFilterType := _TracingFilterType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTracingFilterType)

	if err != nil {
		return err
	}

	*o = TracingFilterType(varTracingFilterType)

	return err
}

type NullableTracingFilterType struct {
	value *TracingFilterType
	isSet bool
}

func (v NullableTracingFilterType) Get() *TracingFilterType {
	return v.value
}

func (v *NullableTracingFilterType) Set(val *TracingFilterType) {
	v.value = val
	v.isSet = true
}

func (v NullableTracingFilterType) IsSet() bool {
	return v.isSet
}

func (v *NullableTracingFilterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTracingFilterType(val *TracingFilterType) *NullableTracingFilterType {
	return &NullableTracingFilterType{value: val, isSet: true}
}

func (v NullableTracingFilterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTracingFilterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


