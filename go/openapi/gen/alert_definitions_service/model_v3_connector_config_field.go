/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V3ConnectorConfigField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V3ConnectorConfigField{}

// V3ConnectorConfigField struct for V3ConnectorConfigField
type V3ConnectorConfigField struct {
	// The name of the configuration field
	FieldName string `json:"fieldName"`
	// The template for the configuration field
	Template string `json:"template"`
}

type _V3ConnectorConfigField V3ConnectorConfigField

// NewV3ConnectorConfigField instantiates a new V3ConnectorConfigField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV3ConnectorConfigField(fieldName string, template string) *V3ConnectorConfigField {
	this := V3ConnectorConfigField{}
	this.FieldName = fieldName
	this.Template = template
	return &this
}

// NewV3ConnectorConfigFieldWithDefaults instantiates a new V3ConnectorConfigField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV3ConnectorConfigFieldWithDefaults() *V3ConnectorConfigField {
	this := V3ConnectorConfigField{}
	return &this
}

// GetFieldName returns the FieldName field value
func (o *V3ConnectorConfigField) GetFieldName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value
// and a boolean to check if the value has been set.
func (o *V3ConnectorConfigField) GetFieldNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldName, true
}

// SetFieldName sets field value
func (o *V3ConnectorConfigField) SetFieldName(v string) {
	o.FieldName = v
}

// GetTemplate returns the Template field value
func (o *V3ConnectorConfigField) GetTemplate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Template
}

// GetTemplateOk returns a tuple with the Template field value
// and a boolean to check if the value has been set.
func (o *V3ConnectorConfigField) GetTemplateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Template, true
}

// SetTemplate sets field value
func (o *V3ConnectorConfigField) SetTemplate(v string) {
	o.Template = v
}

func (o V3ConnectorConfigField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V3ConnectorConfigField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fieldName"] = o.FieldName
	toSerialize["template"] = o.Template
	return toSerialize, nil
}

func (o *V3ConnectorConfigField) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fieldName",
		"template",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV3ConnectorConfigField := _V3ConnectorConfigField{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV3ConnectorConfigField)

	if err != nil {
		return err
	}

	*o = V3ConnectorConfigField(varV3ConnectorConfigField)

	return err
}

type NullableV3ConnectorConfigField struct {
	value *V3ConnectorConfigField
	isSet bool
}

func (v NullableV3ConnectorConfigField) Get() *V3ConnectorConfigField {
	return v.value
}

func (v *NullableV3ConnectorConfigField) Set(val *V3ConnectorConfigField) {
	v.value = val
	v.isSet = true
}

func (v NullableV3ConnectorConfigField) IsSet() bool {
	return v.isSet
}

func (v *NullableV3ConnectorConfigField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3ConnectorConfigField(val *V3ConnectorConfigField) *NullableV3ConnectorConfigField {
	return &NullableV3ConnectorConfigField{value: val, isSet: true}
}

func (v NullableV3ConnectorConfigField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3ConnectorConfigField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


