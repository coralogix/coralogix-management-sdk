/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NotificationDestination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationDestination{}

// NotificationDestination Configuration for where and how alert notifications should be sent
type NotificationDestination struct {
	// The connector ID used to send notifications
	ConnectorId string `json:"connectorId"`
	NotifyOn *NotifyOn `json:"notifyOn,omitempty"`
	// Optional preset ID for the notification destination
	PresetId *string `json:"presetId,omitempty"`
	ResolvedRouteOverrides *NotificationRouting `json:"resolvedRouteOverrides,omitempty"`
	TriggeredRoutingOverrides *NotificationRouting `json:"triggeredRoutingOverrides,omitempty"`
}

type _NotificationDestination NotificationDestination

// NewNotificationDestination instantiates a new NotificationDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationDestination(connectorId string) *NotificationDestination {
	this := NotificationDestination{}
	this.ConnectorId = connectorId
	return &this
}

// NewNotificationDestinationWithDefaults instantiates a new NotificationDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationDestinationWithDefaults() *NotificationDestination {
	this := NotificationDestination{}
	return &this
}

// GetConnectorId returns the ConnectorId field value
func (o *NotificationDestination) GetConnectorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectorId
}

// GetConnectorIdOk returns a tuple with the ConnectorId field value
// and a boolean to check if the value has been set.
func (o *NotificationDestination) GetConnectorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectorId, true
}

// SetConnectorId sets field value
func (o *NotificationDestination) SetConnectorId(v string) {
	o.ConnectorId = v
}

// GetNotifyOn returns the NotifyOn field value if set, zero value otherwise.
func (o *NotificationDestination) GetNotifyOn() NotifyOn {
	if o == nil || IsNil(o.NotifyOn) {
		var ret NotifyOn
		return ret
	}
	return *o.NotifyOn
}

// GetNotifyOnOk returns a tuple with the NotifyOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationDestination) GetNotifyOnOk() (*NotifyOn, bool) {
	if o == nil || IsNil(o.NotifyOn) {
		return nil, false
	}
	return o.NotifyOn, true
}

// HasNotifyOn returns a boolean if a field has been set.
func (o *NotificationDestination) HasNotifyOn() bool {
	if o != nil && !IsNil(o.NotifyOn) {
		return true
	}

	return false
}

// SetNotifyOn gets a reference to the given NotifyOn and assigns it to the NotifyOn field.
func (o *NotificationDestination) SetNotifyOn(v NotifyOn) {
	o.NotifyOn = &v
}

// GetPresetId returns the PresetId field value if set, zero value otherwise.
func (o *NotificationDestination) GetPresetId() string {
	if o == nil || IsNil(o.PresetId) {
		var ret string
		return ret
	}
	return *o.PresetId
}

// GetPresetIdOk returns a tuple with the PresetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationDestination) GetPresetIdOk() (*string, bool) {
	if o == nil || IsNil(o.PresetId) {
		return nil, false
	}
	return o.PresetId, true
}

// HasPresetId returns a boolean if a field has been set.
func (o *NotificationDestination) HasPresetId() bool {
	if o != nil && !IsNil(o.PresetId) {
		return true
	}

	return false
}

// SetPresetId gets a reference to the given string and assigns it to the PresetId field.
func (o *NotificationDestination) SetPresetId(v string) {
	o.PresetId = &v
}

// GetResolvedRouteOverrides returns the ResolvedRouteOverrides field value if set, zero value otherwise.
func (o *NotificationDestination) GetResolvedRouteOverrides() NotificationRouting {
	if o == nil || IsNil(o.ResolvedRouteOverrides) {
		var ret NotificationRouting
		return ret
	}
	return *o.ResolvedRouteOverrides
}

// GetResolvedRouteOverridesOk returns a tuple with the ResolvedRouteOverrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationDestination) GetResolvedRouteOverridesOk() (*NotificationRouting, bool) {
	if o == nil || IsNil(o.ResolvedRouteOverrides) {
		return nil, false
	}
	return o.ResolvedRouteOverrides, true
}

// HasResolvedRouteOverrides returns a boolean if a field has been set.
func (o *NotificationDestination) HasResolvedRouteOverrides() bool {
	if o != nil && !IsNil(o.ResolvedRouteOverrides) {
		return true
	}

	return false
}

// SetResolvedRouteOverrides gets a reference to the given NotificationRouting and assigns it to the ResolvedRouteOverrides field.
func (o *NotificationDestination) SetResolvedRouteOverrides(v NotificationRouting) {
	o.ResolvedRouteOverrides = &v
}

// GetTriggeredRoutingOverrides returns the TriggeredRoutingOverrides field value if set, zero value otherwise.
func (o *NotificationDestination) GetTriggeredRoutingOverrides() NotificationRouting {
	if o == nil || IsNil(o.TriggeredRoutingOverrides) {
		var ret NotificationRouting
		return ret
	}
	return *o.TriggeredRoutingOverrides
}

// GetTriggeredRoutingOverridesOk returns a tuple with the TriggeredRoutingOverrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationDestination) GetTriggeredRoutingOverridesOk() (*NotificationRouting, bool) {
	if o == nil || IsNil(o.TriggeredRoutingOverrides) {
		return nil, false
	}
	return o.TriggeredRoutingOverrides, true
}

// HasTriggeredRoutingOverrides returns a boolean if a field has been set.
func (o *NotificationDestination) HasTriggeredRoutingOverrides() bool {
	if o != nil && !IsNil(o.TriggeredRoutingOverrides) {
		return true
	}

	return false
}

// SetTriggeredRoutingOverrides gets a reference to the given NotificationRouting and assigns it to the TriggeredRoutingOverrides field.
func (o *NotificationDestination) SetTriggeredRoutingOverrides(v NotificationRouting) {
	o.TriggeredRoutingOverrides = &v
}

func (o NotificationDestination) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationDestination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connectorId"] = o.ConnectorId
	if !IsNil(o.NotifyOn) {
		toSerialize["notifyOn"] = o.NotifyOn
	}
	if !IsNil(o.PresetId) {
		toSerialize["presetId"] = o.PresetId
	}
	if !IsNil(o.ResolvedRouteOverrides) {
		toSerialize["resolvedRouteOverrides"] = o.ResolvedRouteOverrides
	}
	if !IsNil(o.TriggeredRoutingOverrides) {
		toSerialize["triggeredRoutingOverrides"] = o.TriggeredRoutingOverrides
	}
	return toSerialize, nil
}

func (o *NotificationDestination) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connectorId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotificationDestination := _NotificationDestination{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNotificationDestination)

	if err != nil {
		return err
	}

	*o = NotificationDestination(varNotificationDestination)

	return err
}

type NullableNotificationDestination struct {
	value *NotificationDestination
	isSet bool
}

func (v NullableNotificationDestination) Get() *NotificationDestination {
	return v.value
}

func (v *NullableNotificationDestination) Set(val *NotificationDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationDestination(val *NotificationDestination) *NullableNotificationDestination {
	return &NullableNotificationDestination{value: val, isSet: true}
}

func (v NullableNotificationDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


