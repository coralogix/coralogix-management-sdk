/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
)

// checks if the FilterOptionCountsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterOptionCountsResponse{}

// FilterOptionCountsResponse Response containing counts for different filter options
type FilterOptionCountsResponse struct {
	Counts *FilterOptionCounts `json:"counts,omitempty"`
}

// NewFilterOptionCountsResponse instantiates a new FilterOptionCountsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterOptionCountsResponse() *FilterOptionCountsResponse {
	this := FilterOptionCountsResponse{}
	return &this
}

// NewFilterOptionCountsResponseWithDefaults instantiates a new FilterOptionCountsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterOptionCountsResponseWithDefaults() *FilterOptionCountsResponse {
	this := FilterOptionCountsResponse{}
	return &this
}

// GetCounts returns the Counts field value if set, zero value otherwise.
func (o *FilterOptionCountsResponse) GetCounts() FilterOptionCounts {
	if o == nil || IsNil(o.Counts) {
		var ret FilterOptionCounts
		return ret
	}
	return *o.Counts
}

// GetCountsOk returns a tuple with the Counts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterOptionCountsResponse) GetCountsOk() (*FilterOptionCounts, bool) {
	if o == nil || IsNil(o.Counts) {
		return nil, false
	}
	return o.Counts, true
}

// HasCounts returns a boolean if a field has been set.
func (o *FilterOptionCountsResponse) HasCounts() bool {
	if o != nil && !IsNil(o.Counts) {
		return true
	}

	return false
}

// SetCounts gets a reference to the given FilterOptionCounts and assigns it to the Counts field.
func (o *FilterOptionCountsResponse) SetCounts(v FilterOptionCounts) {
	o.Counts = &v
}

func (o FilterOptionCountsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterOptionCountsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Counts) {
		toSerialize["counts"] = o.Counts
	}
	return toSerialize, nil
}

type NullableFilterOptionCountsResponse struct {
	value *FilterOptionCountsResponse
	isSet bool
}

func (v NullableFilterOptionCountsResponse) Get() *FilterOptionCountsResponse {
	return v.value
}

func (v *NullableFilterOptionCountsResponse) Set(val *FilterOptionCountsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterOptionCountsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterOptionCountsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterOptionCountsResponse(val *FilterOptionCountsResponse) *NullableFilterOptionCountsResponse {
	return &NullableFilterOptionCountsResponse{value: val, isSet: true}
}

func (v NullableFilterOptionCountsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterOptionCountsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


