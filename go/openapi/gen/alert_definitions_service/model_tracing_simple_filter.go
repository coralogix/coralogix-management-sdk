/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TracingSimpleFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TracingSimpleFilter{}

// TracingSimpleFilter Basic filter configuration using a latency threshold and label filters
type TracingSimpleFilter struct {
	// The latency threshold to filter traces in milliseconds
	LatencyThresholdMs string `json:"latencyThresholdMs" validate:"regexp=^\\\\d+$"`
	TracingLabelFilters *TracingLabelFilters `json:"tracingLabelFilters,omitempty"`
}

type _TracingSimpleFilter TracingSimpleFilter

// NewTracingSimpleFilter instantiates a new TracingSimpleFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTracingSimpleFilter(latencyThresholdMs string) *TracingSimpleFilter {
	this := TracingSimpleFilter{}
	this.LatencyThresholdMs = latencyThresholdMs
	return &this
}

// NewTracingSimpleFilterWithDefaults instantiates a new TracingSimpleFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTracingSimpleFilterWithDefaults() *TracingSimpleFilter {
	this := TracingSimpleFilter{}
	return &this
}

// GetLatencyThresholdMs returns the LatencyThresholdMs field value
func (o *TracingSimpleFilter) GetLatencyThresholdMs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LatencyThresholdMs
}

// GetLatencyThresholdMsOk returns a tuple with the LatencyThresholdMs field value
// and a boolean to check if the value has been set.
func (o *TracingSimpleFilter) GetLatencyThresholdMsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LatencyThresholdMs, true
}

// SetLatencyThresholdMs sets field value
func (o *TracingSimpleFilter) SetLatencyThresholdMs(v string) {
	o.LatencyThresholdMs = v
}

// GetTracingLabelFilters returns the TracingLabelFilters field value if set, zero value otherwise.
func (o *TracingSimpleFilter) GetTracingLabelFilters() TracingLabelFilters {
	if o == nil || IsNil(o.TracingLabelFilters) {
		var ret TracingLabelFilters
		return ret
	}
	return *o.TracingLabelFilters
}

// GetTracingLabelFiltersOk returns a tuple with the TracingLabelFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TracingSimpleFilter) GetTracingLabelFiltersOk() (*TracingLabelFilters, bool) {
	if o == nil || IsNil(o.TracingLabelFilters) {
		return nil, false
	}
	return o.TracingLabelFilters, true
}

// HasTracingLabelFilters returns a boolean if a field has been set.
func (o *TracingSimpleFilter) HasTracingLabelFilters() bool {
	if o != nil && !IsNil(o.TracingLabelFilters) {
		return true
	}

	return false
}

// SetTracingLabelFilters gets a reference to the given TracingLabelFilters and assigns it to the TracingLabelFilters field.
func (o *TracingSimpleFilter) SetTracingLabelFilters(v TracingLabelFilters) {
	o.TracingLabelFilters = &v
}

func (o TracingSimpleFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TracingSimpleFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["latencyThresholdMs"] = o.LatencyThresholdMs
	if !IsNil(o.TracingLabelFilters) {
		toSerialize["tracingLabelFilters"] = o.TracingLabelFilters
	}
	return toSerialize, nil
}

func (o *TracingSimpleFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"latencyThresholdMs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTracingSimpleFilter := _TracingSimpleFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTracingSimpleFilter)

	if err != nil {
		return err
	}

	*o = TracingSimpleFilter(varTracingSimpleFilter)

	return err
}

type NullableTracingSimpleFilter struct {
	value *TracingSimpleFilter
	isSet bool
}

func (v NullableTracingSimpleFilter) Get() *TracingSimpleFilter {
	return v.value
}

func (v *NullableTracingSimpleFilter) Set(val *TracingSimpleFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableTracingSimpleFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableTracingSimpleFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTracingSimpleFilter(val *TracingSimpleFilter) *NullableTracingSimpleFilter {
	return &NullableTracingSimpleFilter{value: val, isSet: true}
}

func (v NullableTracingSimpleFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTracingSimpleFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


