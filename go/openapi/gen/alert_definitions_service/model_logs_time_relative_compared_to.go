/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
)

// LogsTimeRelativeComparedTo the model 'LogsTimeRelativeComparedTo'
type LogsTimeRelativeComparedTo string

// List of LogsTimeRelativeComparedTo
const (
	LOGSTIMERELATIVECOMPAREDTO_LOGS_TIME_RELATIVE_COMPARED_TO_PREVIOUS_HOUR_OR_UNSPECIFIED LogsTimeRelativeComparedTo = "LOGS_TIME_RELATIVE_COMPARED_TO_PREVIOUS_HOUR_OR_UNSPECIFIED"
	LOGSTIMERELATIVECOMPAREDTO_LOGS_TIME_RELATIVE_COMPARED_TO_SAME_HOUR_YESTERDAY LogsTimeRelativeComparedTo = "LOGS_TIME_RELATIVE_COMPARED_TO_SAME_HOUR_YESTERDAY"
	LOGSTIMERELATIVECOMPAREDTO_LOGS_TIME_RELATIVE_COMPARED_TO_SAME_HOUR_LAST_WEEK LogsTimeRelativeComparedTo = "LOGS_TIME_RELATIVE_COMPARED_TO_SAME_HOUR_LAST_WEEK"
	LOGSTIMERELATIVECOMPAREDTO_LOGS_TIME_RELATIVE_COMPARED_TO_YESTERDAY LogsTimeRelativeComparedTo = "LOGS_TIME_RELATIVE_COMPARED_TO_YESTERDAY"
	LOGSTIMERELATIVECOMPAREDTO_LOGS_TIME_RELATIVE_COMPARED_TO_SAME_DAY_LAST_WEEK LogsTimeRelativeComparedTo = "LOGS_TIME_RELATIVE_COMPARED_TO_SAME_DAY_LAST_WEEK"
	LOGSTIMERELATIVECOMPAREDTO_LOGS_TIME_RELATIVE_COMPARED_TO_SAME_DAY_LAST_MONTH LogsTimeRelativeComparedTo = "LOGS_TIME_RELATIVE_COMPARED_TO_SAME_DAY_LAST_MONTH"
)

// All allowed values of LogsTimeRelativeComparedTo enum
var AllowedLogsTimeRelativeComparedToEnumValues = []LogsTimeRelativeComparedTo{
	"LOGS_TIME_RELATIVE_COMPARED_TO_PREVIOUS_HOUR_OR_UNSPECIFIED",
	"LOGS_TIME_RELATIVE_COMPARED_TO_SAME_HOUR_YESTERDAY",
	"LOGS_TIME_RELATIVE_COMPARED_TO_SAME_HOUR_LAST_WEEK",
	"LOGS_TIME_RELATIVE_COMPARED_TO_YESTERDAY",
	"LOGS_TIME_RELATIVE_COMPARED_TO_SAME_DAY_LAST_WEEK",
	"LOGS_TIME_RELATIVE_COMPARED_TO_SAME_DAY_LAST_MONTH",
}

func (v *LogsTimeRelativeComparedTo) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LogsTimeRelativeComparedTo(value)
	for _, existing := range AllowedLogsTimeRelativeComparedToEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogsTimeRelativeComparedTo", value)
}

// NewLogsTimeRelativeComparedToFromValue returns a pointer to a valid LogsTimeRelativeComparedTo
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogsTimeRelativeComparedToFromValue(v string) (*LogsTimeRelativeComparedTo, error) {
	ev := LogsTimeRelativeComparedTo(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LogsTimeRelativeComparedTo: valid values are %v", v, AllowedLogsTimeRelativeComparedToEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogsTimeRelativeComparedTo) IsValid() bool {
	for _, existing := range AllowedLogsTimeRelativeComparedToEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LogsTimeRelativeComparedTo value
func (v LogsTimeRelativeComparedTo) Ptr() *LogsTimeRelativeComparedTo {
	return &v
}

type NullableLogsTimeRelativeComparedTo struct {
	value *LogsTimeRelativeComparedTo
	isSet bool
}

func (v NullableLogsTimeRelativeComparedTo) Get() *LogsTimeRelativeComparedTo {
	return v.value
}

func (v *NullableLogsTimeRelativeComparedTo) Set(val *LogsTimeRelativeComparedTo) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsTimeRelativeComparedTo) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsTimeRelativeComparedTo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsTimeRelativeComparedTo(val *LogsTimeRelativeComparedTo) *NullableLogsTimeRelativeComparedTo {
	return &NullableLogsTimeRelativeComparedTo{value: val, isSet: true}
}

func (v NullableLogsTimeRelativeComparedTo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsTimeRelativeComparedTo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

