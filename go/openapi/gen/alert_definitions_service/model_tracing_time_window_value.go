/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"fmt"
)

// TracingTimeWindowValue the model 'TracingTimeWindowValue'
type TracingTimeWindowValue string

// List of TracingTimeWindowValue
const (
	TRACINGTIMEWINDOWVALUE_TRACING_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED TracingTimeWindowValue = "TRACING_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED"
	TRACINGTIMEWINDOWVALUE_TRACING_TIME_WINDOW_VALUE_MINUTES_10 TracingTimeWindowValue = "TRACING_TIME_WINDOW_VALUE_MINUTES_10"
	TRACINGTIMEWINDOWVALUE_TRACING_TIME_WINDOW_VALUE_MINUTES_15 TracingTimeWindowValue = "TRACING_TIME_WINDOW_VALUE_MINUTES_15"
	TRACINGTIMEWINDOWVALUE_TRACING_TIME_WINDOW_VALUE_MINUTES_20 TracingTimeWindowValue = "TRACING_TIME_WINDOW_VALUE_MINUTES_20"
	TRACINGTIMEWINDOWVALUE_TRACING_TIME_WINDOW_VALUE_MINUTES_30 TracingTimeWindowValue = "TRACING_TIME_WINDOW_VALUE_MINUTES_30"
	TRACINGTIMEWINDOWVALUE_TRACING_TIME_WINDOW_VALUE_HOUR_1 TracingTimeWindowValue = "TRACING_TIME_WINDOW_VALUE_HOUR_1"
	TRACINGTIMEWINDOWVALUE_TRACING_TIME_WINDOW_VALUE_HOURS_2 TracingTimeWindowValue = "TRACING_TIME_WINDOW_VALUE_HOURS_2"
	TRACINGTIMEWINDOWVALUE_TRACING_TIME_WINDOW_VALUE_HOURS_4 TracingTimeWindowValue = "TRACING_TIME_WINDOW_VALUE_HOURS_4"
	TRACINGTIMEWINDOWVALUE_TRACING_TIME_WINDOW_VALUE_HOURS_6 TracingTimeWindowValue = "TRACING_TIME_WINDOW_VALUE_HOURS_6"
	TRACINGTIMEWINDOWVALUE_TRACING_TIME_WINDOW_VALUE_HOURS_12 TracingTimeWindowValue = "TRACING_TIME_WINDOW_VALUE_HOURS_12"
	TRACINGTIMEWINDOWVALUE_TRACING_TIME_WINDOW_VALUE_HOURS_24 TracingTimeWindowValue = "TRACING_TIME_WINDOW_VALUE_HOURS_24"
	TRACINGTIMEWINDOWVALUE_TRACING_TIME_WINDOW_VALUE_HOURS_36 TracingTimeWindowValue = "TRACING_TIME_WINDOW_VALUE_HOURS_36"
)

// All allowed values of TracingTimeWindowValue enum
var AllowedTracingTimeWindowValueEnumValues = []TracingTimeWindowValue{
	"TRACING_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED",
	"TRACING_TIME_WINDOW_VALUE_MINUTES_10",
	"TRACING_TIME_WINDOW_VALUE_MINUTES_15",
	"TRACING_TIME_WINDOW_VALUE_MINUTES_20",
	"TRACING_TIME_WINDOW_VALUE_MINUTES_30",
	"TRACING_TIME_WINDOW_VALUE_HOUR_1",
	"TRACING_TIME_WINDOW_VALUE_HOURS_2",
	"TRACING_TIME_WINDOW_VALUE_HOURS_4",
	"TRACING_TIME_WINDOW_VALUE_HOURS_6",
	"TRACING_TIME_WINDOW_VALUE_HOURS_12",
	"TRACING_TIME_WINDOW_VALUE_HOURS_24",
	"TRACING_TIME_WINDOW_VALUE_HOURS_36",
}

func (v *TracingTimeWindowValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TracingTimeWindowValue(value)
	for _, existing := range AllowedTracingTimeWindowValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TracingTimeWindowValue", value)
}

// NewTracingTimeWindowValueFromValue returns a pointer to a valid TracingTimeWindowValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTracingTimeWindowValueFromValue(v string) (*TracingTimeWindowValue, error) {
	ev := TracingTimeWindowValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TracingTimeWindowValue: valid values are %v", v, AllowedTracingTimeWindowValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TracingTimeWindowValue) IsValid() bool {
	for _, existing := range AllowedTracingTimeWindowValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TracingTimeWindowValue value
func (v TracingTimeWindowValue) Ptr() *TracingTimeWindowValue {
	return &v
}

type NullableTracingTimeWindowValue struct {
	value *TracingTimeWindowValue
	isSet bool
}

func (v NullableTracingTimeWindowValue) Get() *TracingTimeWindowValue {
	return v.value
}

func (v *NullableTracingTimeWindowValue) Set(val *TracingTimeWindowValue) {
	v.value = val
	v.isSet = true
}

func (v NullableTracingTimeWindowValue) IsSet() bool {
	return v.isSet
}

func (v *NullableTracingTimeWindowValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTracingTimeWindowValue(val *TracingTimeWindowValue) *NullableTracingTimeWindowValue {
	return &NullableTracingTimeWindowValue{value: val, isSet: true}
}

func (v NullableTracingTimeWindowValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTracingTimeWindowValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

