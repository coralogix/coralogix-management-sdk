/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TimeDuration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeDuration{}

// TimeDuration Configuration for time duration
type TimeDuration struct {
	// The duration value
	Duration string `json:"duration"`
	Unit DurationUnit `json:"unit"`
}

type _TimeDuration TimeDuration

// NewTimeDuration instantiates a new TimeDuration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeDuration(duration string, unit DurationUnit) *TimeDuration {
	this := TimeDuration{}
	this.Duration = duration
	this.Unit = unit
	return &this
}

// NewTimeDurationWithDefaults instantiates a new TimeDuration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeDurationWithDefaults() *TimeDuration {
	this := TimeDuration{}
	return &this
}

// GetDuration returns the Duration field value
func (o *TimeDuration) GetDuration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *TimeDuration) GetDurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *TimeDuration) SetDuration(v string) {
	o.Duration = v
}

// GetUnit returns the Unit field value
func (o *TimeDuration) GetUnit() DurationUnit {
	if o == nil {
		var ret DurationUnit
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *TimeDuration) GetUnitOk() (*DurationUnit, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *TimeDuration) SetUnit(v DurationUnit) {
	o.Unit = v
}

func (o TimeDuration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeDuration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["duration"] = o.Duration
	toSerialize["unit"] = o.Unit
	return toSerialize, nil
}

func (o *TimeDuration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"duration",
		"unit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimeDuration := _TimeDuration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimeDuration)

	if err != nil {
		return err
	}

	*o = TimeDuration(varTimeDuration)

	return err
}

type NullableTimeDuration struct {
	value *TimeDuration
	isSet bool
}

func (v NullableTimeDuration) Get() *TimeDuration {
	return v.value
}

func (v *NullableTimeDuration) Set(val *TimeDuration) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeDuration) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeDuration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeDuration(val *TimeDuration) *NullableTimeDuration {
	return &NullableTimeDuration{value: val, isSet: true}
}

func (v NullableTimeDuration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeDuration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


