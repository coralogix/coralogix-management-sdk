/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_definitions_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FlowStagesGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowStagesGroup{}

// FlowStagesGroup Defines a group of stages in a flow alert
type FlowStagesGroup struct {
	AlertDefs []FlowStagesGroupsAlertDefs `json:"alertDefs"`
	AlertsOp AlertsOp `json:"alertsOp"`
	NextOp NextOp `json:"nextOp"`
}

type _FlowStagesGroup FlowStagesGroup

// NewFlowStagesGroup instantiates a new FlowStagesGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlowStagesGroup(alertDefs []FlowStagesGroupsAlertDefs, alertsOp AlertsOp, nextOp NextOp) *FlowStagesGroup {
	this := FlowStagesGroup{}
	this.AlertDefs = alertDefs
	this.AlertsOp = alertsOp
	this.NextOp = nextOp
	return &this
}

// NewFlowStagesGroupWithDefaults instantiates a new FlowStagesGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowStagesGroupWithDefaults() *FlowStagesGroup {
	this := FlowStagesGroup{}
	return &this
}

// GetAlertDefs returns the AlertDefs field value
func (o *FlowStagesGroup) GetAlertDefs() []FlowStagesGroupsAlertDefs {
	if o == nil {
		var ret []FlowStagesGroupsAlertDefs
		return ret
	}

	return o.AlertDefs
}

// GetAlertDefsOk returns a tuple with the AlertDefs field value
// and a boolean to check if the value has been set.
func (o *FlowStagesGroup) GetAlertDefsOk() ([]FlowStagesGroupsAlertDefs, bool) {
	if o == nil {
		return nil, false
	}
	return o.AlertDefs, true
}

// SetAlertDefs sets field value
func (o *FlowStagesGroup) SetAlertDefs(v []FlowStagesGroupsAlertDefs) {
	o.AlertDefs = v
}

// GetAlertsOp returns the AlertsOp field value
func (o *FlowStagesGroup) GetAlertsOp() AlertsOp {
	if o == nil {
		var ret AlertsOp
		return ret
	}

	return o.AlertsOp
}

// GetAlertsOpOk returns a tuple with the AlertsOp field value
// and a boolean to check if the value has been set.
func (o *FlowStagesGroup) GetAlertsOpOk() (*AlertsOp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlertsOp, true
}

// SetAlertsOp sets field value
func (o *FlowStagesGroup) SetAlertsOp(v AlertsOp) {
	o.AlertsOp = v
}

// GetNextOp returns the NextOp field value
func (o *FlowStagesGroup) GetNextOp() NextOp {
	if o == nil {
		var ret NextOp
		return ret
	}

	return o.NextOp
}

// GetNextOpOk returns a tuple with the NextOp field value
// and a boolean to check if the value has been set.
func (o *FlowStagesGroup) GetNextOpOk() (*NextOp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NextOp, true
}

// SetNextOp sets field value
func (o *FlowStagesGroup) SetNextOp(v NextOp) {
	o.NextOp = v
}

func (o FlowStagesGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowStagesGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["alertDefs"] = o.AlertDefs
	toSerialize["alertsOp"] = o.AlertsOp
	toSerialize["nextOp"] = o.NextOp
	return toSerialize, nil
}

func (o *FlowStagesGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"alertDefs",
		"alertsOp",
		"nextOp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlowStagesGroup := _FlowStagesGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFlowStagesGroup)

	if err != nil {
		return err
	}

	*o = FlowStagesGroup(varFlowStagesGroup)

	return err
}

type NullableFlowStagesGroup struct {
	value *FlowStagesGroup
	isSet bool
}

func (v NullableFlowStagesGroup) Get() *FlowStagesGroup {
	return v.value
}

func (v *NullableFlowStagesGroup) Set(val *FlowStagesGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowStagesGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowStagesGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowStagesGroup(val *FlowStagesGroup) *NullableFlowStagesGroup {
	return &NullableFlowStagesGroup{value: val, isSet: true}
}

func (v NullableFlowStagesGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowStagesGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


