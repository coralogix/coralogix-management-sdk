/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package folders_for_views_service

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// FoldersForViewsServiceAPIService FoldersForViewsServiceAPI service
type FoldersForViewsServiceAPIService service

type ApiViewsFoldersServiceCreateViewFolderRequest struct {
	ctx context.Context
	ApiService *FoldersForViewsServiceAPIService
	createViewFolderRequest *CreateViewFolderRequest
}

func (r ApiViewsFoldersServiceCreateViewFolderRequest) CreateViewFolderRequest(createViewFolderRequest CreateViewFolderRequest) ApiViewsFoldersServiceCreateViewFolderRequest {
	r.createViewFolderRequest = &createViewFolderRequest
	return r
}

func (r ApiViewsFoldersServiceCreateViewFolderRequest) Execute() (*ViewFolder, *http.Response, error) {
	return r.ApiService.ViewsFoldersServiceCreateViewFolderExecute(r)
}

/*
ViewsFoldersServiceCreateViewFolder Create View Folder service

Create view folder

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiViewsFoldersServiceCreateViewFolderRequest
*/
func (a *FoldersForViewsServiceAPIService) ViewsFoldersServiceCreateViewFolder(ctx context.Context) ApiViewsFoldersServiceCreateViewFolderRequest {
	return ApiViewsFoldersServiceCreateViewFolderRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ViewFolder
func (a *FoldersForViewsServiceAPIService) ViewsFoldersServiceCreateViewFolderExecute(r ApiViewsFoldersServiceCreateViewFolderRequest) (*ViewFolder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ViewFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FoldersForViewsServiceAPIService.ViewsFoldersServiceCreateViewFolder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/view_folders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createViewFolderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiViewsFoldersServiceDeleteViewFolderRequest struct {
	ctx context.Context
	ApiService *FoldersForViewsServiceAPIService
	id string
}

func (r ApiViewsFoldersServiceDeleteViewFolderRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ViewsFoldersServiceDeleteViewFolderExecute(r)
}

/*
ViewsFoldersServiceDeleteViewFolder Delete View Folder service

Deletes a view folder by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiViewsFoldersServiceDeleteViewFolderRequest
*/
func (a *FoldersForViewsServiceAPIService) ViewsFoldersServiceDeleteViewFolder(ctx context.Context, id string) ApiViewsFoldersServiceDeleteViewFolderRequest {
	return ApiViewsFoldersServiceDeleteViewFolderRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *FoldersForViewsServiceAPIService) ViewsFoldersServiceDeleteViewFolderExecute(r ApiViewsFoldersServiceDeleteViewFolderRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FoldersForViewsServiceAPIService.ViewsFoldersServiceDeleteViewFolder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/view_folders/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.id) < 36 {
		return localVarReturnValue, nil, reportError("id must have at least 36 elements")
	}
	if strlen(r.id) > 36 {
		return localVarReturnValue, nil, reportError("id must have less than 36 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiViewsFoldersServiceGetViewFolderRequest struct {
	ctx context.Context
	ApiService *FoldersForViewsServiceAPIService
	id string
}

func (r ApiViewsFoldersServiceGetViewFolderRequest) Execute() (*ViewFolder, *http.Response, error) {
	return r.ApiService.ViewsFoldersServiceGetViewFolderExecute(r)
}

/*
ViewsFoldersServiceGetViewFolder Get View Folder service

Create view folder

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiViewsFoldersServiceGetViewFolderRequest
*/
func (a *FoldersForViewsServiceAPIService) ViewsFoldersServiceGetViewFolder(ctx context.Context, id string) ApiViewsFoldersServiceGetViewFolderRequest {
	return ApiViewsFoldersServiceGetViewFolderRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ViewFolder
func (a *FoldersForViewsServiceAPIService) ViewsFoldersServiceGetViewFolderExecute(r ApiViewsFoldersServiceGetViewFolderRequest) (*ViewFolder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ViewFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FoldersForViewsServiceAPIService.ViewsFoldersServiceGetViewFolder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/view_folders/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.id) < 36 {
		return localVarReturnValue, nil, reportError("id must have at least 36 elements")
	}
	if strlen(r.id) > 36 {
		return localVarReturnValue, nil, reportError("id must have less than 36 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiViewsFoldersServiceListViewFoldersRequest struct {
	ctx context.Context
	ApiService *FoldersForViewsServiceAPIService
}

func (r ApiViewsFoldersServiceListViewFoldersRequest) Execute() (*ListViewFoldersResponse, *http.Response, error) {
	return r.ApiService.ViewsFoldersServiceListViewFoldersExecute(r)
}

/*
ViewsFoldersServiceListViewFolders List view folders service

List view's folders

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiViewsFoldersServiceListViewFoldersRequest
*/
func (a *FoldersForViewsServiceAPIService) ViewsFoldersServiceListViewFolders(ctx context.Context) ApiViewsFoldersServiceListViewFoldersRequest {
	return ApiViewsFoldersServiceListViewFoldersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListViewFoldersResponse
func (a *FoldersForViewsServiceAPIService) ViewsFoldersServiceListViewFoldersExecute(r ApiViewsFoldersServiceListViewFoldersRequest) (*ListViewFoldersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListViewFoldersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FoldersForViewsServiceAPIService.ViewsFoldersServiceListViewFolders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/view_folders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiViewsFoldersServiceReplaceViewFolderRequest struct {
	ctx context.Context
	ApiService *FoldersForViewsServiceAPIService
	folderId string
	viewFolder1 *ViewFolder1
}

func (r ApiViewsFoldersServiceReplaceViewFolderRequest) ViewFolder1(viewFolder1 ViewFolder1) ApiViewsFoldersServiceReplaceViewFolderRequest {
	r.viewFolder1 = &viewFolder1
	return r
}

func (r ApiViewsFoldersServiceReplaceViewFolderRequest) Execute() (*ViewFolder, *http.Response, error) {
	return r.ApiService.ViewsFoldersServiceReplaceViewFolderExecute(r)
}

/*
ViewsFoldersServiceReplaceViewFolder Replace View Folder service

Replaces an existing view folder

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param folderId
 @return ApiViewsFoldersServiceReplaceViewFolderRequest
*/
func (a *FoldersForViewsServiceAPIService) ViewsFoldersServiceReplaceViewFolder(ctx context.Context, folderId string) ApiViewsFoldersServiceReplaceViewFolderRequest {
	return ApiViewsFoldersServiceReplaceViewFolderRequest{
		ApiService: a,
		ctx: ctx,
		folderId: folderId,
	}
}

// Execute executes the request
//  @return ViewFolder
func (a *FoldersForViewsServiceAPIService) ViewsFoldersServiceReplaceViewFolderExecute(r ApiViewsFoldersServiceReplaceViewFolderRequest) (*ViewFolder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ViewFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FoldersForViewsServiceAPIService.ViewsFoldersServiceReplaceViewFolder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/view_folders/{folder.id}"
	localVarPath = strings.Replace(localVarPath, "{"+"folder.id"+"}", url.PathEscape(parameterValueToString(r.folderId, "folderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.folderId) < 36 {
		return localVarReturnValue, nil, reportError("folderId must have at least 36 elements")
	}
	if strlen(r.folderId) > 36 {
		return localVarReturnValue, nil, reportError("folderId must have less than 36 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.viewFolder1
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
