openapi: 3.0.0
info:
  title: ""
  version: 1.0.0
servers:
- url: /
paths:
  /v1/view_folders:
    get:
      description: List view's folders
      externalDocs:
        url: ""
      operationId: ViewsFoldersService_ListViewFolders
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListViewFoldersResponse"
          description: ""
      summary: List view folders service
      tags:
      - Folders for views service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v1/view_folders';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v1/view_folders"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.coralogix.com/mgmt/openapi/v1/view_folders \
            --header 'Authorization: Bearer <API_KEY>'
    post:
      description: Create view folder
      externalDocs:
        url: ""
      operationId: ViewsFoldersService_CreateViewFolder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateViewFolderRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ViewFolder"
          description: ""
      summary: Create View Folder service
      tags:
      - Folders for views service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v1/view_folders';

          let options = {
            method: 'POST',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"name":"My Folder"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v1/view_folders"

          payload = {"name": "My Folder"}
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.coralogix.com/mgmt/openapi/v1/view_folders \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"name":"My Folder"}'
  /v1/view_folders/{folder.id}:
    put:
      description: Replaces an existing view folder
      externalDocs:
        url: ""
      operationId: ViewsFoldersService_ReplaceViewFolder
      parameters:
      - explode: false
        in: path
        name: folder.id
        required: true
        schema:
          description: Unique identifier for folders
          example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
          maxLength: 36
          minLength: 36
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ViewFolder_1"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ViewFolder"
          description: ""
      summary: Replace View Folder service
      tags:
      - Folders for views service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f';

          let options = {
            method: 'PUT',
            headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
            body: '{"name":"My Folder"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f"

          payload = {"name": "My Folder"}
          headers = {
              "Authorization": "Bearer <API_KEY>",
              "content-type": "application/json"
          }

          response = requests.request("PUT", url, json=payload, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f \
            --header 'Authorization: Bearer <API_KEY>' \
            --header 'content-type: application/json' \
            --data '{"name":"My Folder"}'
  /v1/view_folders/{id}:
    delete:
      description: Deletes a view folder by ID
      externalDocs:
        url: ""
      operationId: ViewsFoldersService_DeleteViewFolder
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: Unique identifier for folders
          example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
          maxLength: 36
          minLength: 36
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteViewFolderResponse"
          description: ""
      summary: Delete View Folder service
      tags:
      - Folders for views service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f';

          let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("DELETE", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f \
            --header 'Authorization: Bearer <API_KEY>'
    get:
      description: Create view folder
      externalDocs:
        url: ""
      operationId: ViewsFoldersService_GetViewFolder
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: Unique identifier for folders
          example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
          maxLength: 36
          minLength: 36
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ViewFolder"
          description: ""
      summary: Get View Folder service
      tags:
      - Folders for views service
      x-codeSamples:
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f';

          let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Python
        source: |-
          import requests

          url = "https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f"

          headers = {"Authorization": "Bearer <API_KEY>"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f \
            --header 'Authorization: Bearer <API_KEY>'
components:
  schemas:
    DeleteViewFolderResponse:
      type: object
    FieldGroup:
      properties:
        name:
          type: string
        value:
          type: string
      type: object
    FilterPathAndValues:
      oneOf:
      - $ref: "#/components/schemas/FilterPathAndValues_1"
      - $ref: "#/components/schemas/FilterPathAndValues_2"
    Filters:
      description: This data structure represents a filter
      externalDocs:
        url: ""
      properties:
        operator:
          $ref: "#/components/schemas/v3.FilterOperator"
        pathAndValues:
          items:
            $ref: "#/components/schemas/FilterPathAndValues"
          type: array
      required:
      - pathAndValues
      title: Filters
      type: object
    ListViewFoldersResponse:
      example:
        folders:
        - name: My Folder
          id: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
        - name: My Folder
          id: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
      properties:
        folders:
          items:
            $ref: "#/components/schemas/ViewFolder"
          type: array
      type: object
    MultipleValues:
      properties:
        matcher:
          $ref: "#/components/schemas/events.v3.FilterMatcher"
        values:
          items:
            type: string
          type: array
      type: object
    ViewFolder:
      description: View folder.
      example:
        name: My Folder
        id: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
      externalDocs:
        url: ""
      properties:
        id:
          description: Unique identifier for folders
          example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
          maxLength: 36
          minLength: 36
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          type: string
        name:
          description: Folder name
          example: My Folder
          minLength: 1
          type: string
      required:
      - name
      title: ViewFolder
      type: object
    common.Group:
      properties:
        field:
          $ref: "#/components/schemas/FieldGroup"
        groups:
          items:
            $ref: "#/components/schemas/common.Group"
          type: array
        value:
          format: double
          type: number
      type: object
    events.v3.FilterMatcher:
      enum:
      - FILTER_MATCHER_TEXT_OR_UNSPECIFIED
      - FILTER_MATCHER_REGEXP
      type: string
    v3.FilterOperator:
      enum:
      - FILTER_OPERATOR_AND_OR_UNSPECIFIED
      - FILTER_OPERATOR_OR
      type: string
    CreateViewFolderRequest:
      additionalProperties: false
      description: Create view folder.
      example:
        name: My Folder
      properties:
        name:
          description: Folder name
          example: My Folder
          minLength: 1
          type: string
      title: CreateViewFolderRequest
      type: object
    ViewFolder_1:
      additionalProperties: false
      description: View folder.
      properties:
        name:
          description: Folder name
          example: My Folder
          minLength: 1
          type: string
      required:
      - name
      title: ViewFolder
      type: object
    FilterPathAndValues_1:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        multipleValues:
          $ref: "#/components/schemas/MultipleValues"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
    FilterPathAndValues_2:
      additionalProperties: false
      description: This data structure represents a filter path and values
      externalDocs:
        url: ""
      properties:
        filters:
          $ref: "#/components/schemas/Filters"
        path:
          example: test
          type: string
      required:
      - path
      - values
      title: FilterPathAndValues
      type: object
  securitySchemes:
    apiKeyAuth:
      description: API key authentication
      in: header
      name: Authorization
      type: apiKey
