/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_service

import (
	"encoding/json"
	"fmt"
)

// V3FilterOperator the model 'V3FilterOperator'
type V3FilterOperator string

// List of v3.FilterOperator
const (
	V3FILTEROPERATOR_FILTER_OPERATOR_AND_OR_UNSPECIFIED V3FilterOperator = "FILTER_OPERATOR_AND_OR_UNSPECIFIED"
	V3FILTEROPERATOR_FILTER_OPERATOR_OR V3FilterOperator = "FILTER_OPERATOR_OR"
)

// All allowed values of V3FilterOperator enum
var AllowedV3FilterOperatorEnumValues = []V3FilterOperator{
	"FILTER_OPERATOR_AND_OR_UNSPECIFIED",
	"FILTER_OPERATOR_OR",
}

func (v *V3FilterOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V3FilterOperator(value)
	for _, existing := range AllowedV3FilterOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V3FilterOperator", value)
}

// NewV3FilterOperatorFromValue returns a pointer to a valid V3FilterOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV3FilterOperatorFromValue(v string) (*V3FilterOperator, error) {
	ev := V3FilterOperator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V3FilterOperator: valid values are %v", v, AllowedV3FilterOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V3FilterOperator) IsValid() bool {
	for _, existing := range AllowedV3FilterOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v3.FilterOperator value
func (v V3FilterOperator) Ptr() *V3FilterOperator {
	return &v
}

type NullableV3FilterOperator struct {
	value *V3FilterOperator
	isSet bool
}

func (v NullableV3FilterOperator) Get() *V3FilterOperator {
	return v.value
}

func (v *NullableV3FilterOperator) Set(val *V3FilterOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableV3FilterOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableV3FilterOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3FilterOperator(val *V3FilterOperator) *NullableV3FilterOperator {
	return &NullableV3FilterOperator{value: val, isSet: true}
}

func (v NullableV3FilterOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3FilterOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

