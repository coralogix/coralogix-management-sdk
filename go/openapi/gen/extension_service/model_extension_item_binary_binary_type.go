/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_service

import (
	"encoding/json"
	"fmt"
)

// ExtensionItemBinaryBinaryType the model 'ExtensionItemBinaryBinaryType'
type ExtensionItemBinaryBinaryType string

// List of ExtensionItemBinary.BinaryType
const (
	EXTENSIONITEMBINARYBINARYTYPE_PREVIEW_IMAGE ExtensionItemBinaryBinaryType = "PREVIEW_IMAGE"
	EXTENSIONITEMBINARYBINARYTYPE_KIBANA_DASHBOARD_DEFINITION ExtensionItemBinaryBinaryType = "KIBANA_DASHBOARD_DEFINITION"
	EXTENSIONITEMBINARYBINARYTYPE_GRAFANA_DASHBOARD_DEFINITION ExtensionItemBinaryBinaryType = "GRAFANA_DASHBOARD_DEFINITION"
	EXTENSIONITEMBINARYBINARYTYPE_ENRICHMENT_CSV ExtensionItemBinaryBinaryType = "ENRICHMENT_CSV"
	EXTENSIONITEMBINARYBINARYTYPE_CX_CUSTOM_DASHBOARD_DEFINITION ExtensionItemBinaryBinaryType = "CX_CUSTOM_DASHBOARD_DEFINITION"
)

// All allowed values of ExtensionItemBinaryBinaryType enum
var AllowedExtensionItemBinaryBinaryTypeEnumValues = []ExtensionItemBinaryBinaryType{
	"PREVIEW_IMAGE",
	"KIBANA_DASHBOARD_DEFINITION",
	"GRAFANA_DASHBOARD_DEFINITION",
	"ENRICHMENT_CSV",
	"CX_CUSTOM_DASHBOARD_DEFINITION",
}

func (v *ExtensionItemBinaryBinaryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExtensionItemBinaryBinaryType(value)
	for _, existing := range AllowedExtensionItemBinaryBinaryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExtensionItemBinaryBinaryType", value)
}

// NewExtensionItemBinaryBinaryTypeFromValue returns a pointer to a valid ExtensionItemBinaryBinaryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExtensionItemBinaryBinaryTypeFromValue(v string) (*ExtensionItemBinaryBinaryType, error) {
	ev := ExtensionItemBinaryBinaryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExtensionItemBinaryBinaryType: valid values are %v", v, AllowedExtensionItemBinaryBinaryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExtensionItemBinaryBinaryType) IsValid() bool {
	for _, existing := range AllowedExtensionItemBinaryBinaryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExtensionItemBinary.BinaryType value
func (v ExtensionItemBinaryBinaryType) Ptr() *ExtensionItemBinaryBinaryType {
	return &v
}

type NullableExtensionItemBinaryBinaryType struct {
	value *ExtensionItemBinaryBinaryType
	isSet bool
}

func (v NullableExtensionItemBinaryBinaryType) Get() *ExtensionItemBinaryBinaryType {
	return v.value
}

func (v *NullableExtensionItemBinaryBinaryType) Set(val *ExtensionItemBinaryBinaryType) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionItemBinaryBinaryType) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionItemBinaryBinaryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionItemBinaryBinaryType(val *ExtensionItemBinaryBinaryType) *NullableExtensionItemBinaryBinaryType {
	return &NullableExtensionItemBinaryBinaryType{value: val, isSet: true}
}

func (v NullableExtensionItemBinaryBinaryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionItemBinaryBinaryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

