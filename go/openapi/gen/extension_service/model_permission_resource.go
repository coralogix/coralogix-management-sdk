/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_service

import (
	"encoding/json"
	"fmt"
)

// PermissionResource the model 'PermissionResource'
type PermissionResource string

// List of PermissionResource
const (
	PERMISSIONRESOURCE_UNKNOWN PermissionResource = "UNKNOWN"
	PERMISSIONRESOURCE_ACTION PermissionResource = "ACTION"
	PERMISSIONRESOURCE_ALERT PermissionResource = "ALERT"
	PERMISSIONRESOURCE_CUSTOM_ENRICHMENT PermissionResource = "CUSTOM_ENRICHMENT"
	PERMISSIONRESOURCE_GEO_ENRICHMENT PermissionResource = "GEO_ENRICHMENT"
	PERMISSIONRESOURCE_SECURITY_ENRICHMENT PermissionResource = "SECURITY_ENRICHMENT"
	PERMISSIONRESOURCE_RESOURCE_CLOUD_METADATA_ENRICHMENT PermissionResource = "RESOURCE_CLOUD_METADATA_ENRICHMENT"
	PERMISSIONRESOURCE_GRAFANA_DASHBOARD PermissionResource = "GRAFANA_DASHBOARD"
	PERMISSIONRESOURCE_KIBANA_DASHBOARD PermissionResource = "KIBANA_DASHBOARD"
	PERMISSIONRESOURCE_PARSING_RULE PermissionResource = "PARSING_RULE"
	PERMISSIONRESOURCE_SAVED_VIEW PermissionResource = "SAVED_VIEW"
	PERMISSIONRESOURCE_CX_CUSTOM_DASHBOARD PermissionResource = "CX_CUSTOM_DASHBOARD"
	PERMISSIONRESOURCE_METRICS_RULE_GROUP PermissionResource = "METRICS_RULE_GROUP"
	PERMISSIONRESOURCE_SPAN_EVENTS_TO_METRICS PermissionResource = "SPAN_EVENTS_TO_METRICS"
	PERMISSIONRESOURCE_LOGS_EVENTS_TO_METRICS PermissionResource = "LOGS_EVENTS_TO_METRICS"
)

// All allowed values of PermissionResource enum
var AllowedPermissionResourceEnumValues = []PermissionResource{
	"UNKNOWN",
	"ACTION",
	"ALERT",
	"CUSTOM_ENRICHMENT",
	"GEO_ENRICHMENT",
	"SECURITY_ENRICHMENT",
	"RESOURCE_CLOUD_METADATA_ENRICHMENT",
	"GRAFANA_DASHBOARD",
	"KIBANA_DASHBOARD",
	"PARSING_RULE",
	"SAVED_VIEW",
	"CX_CUSTOM_DASHBOARD",
	"METRICS_RULE_GROUP",
	"SPAN_EVENTS_TO_METRICS",
	"LOGS_EVENTS_TO_METRICS",
}

func (v *PermissionResource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PermissionResource(value)
	for _, existing := range AllowedPermissionResourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PermissionResource", value)
}

// NewPermissionResourceFromValue returns a pointer to a valid PermissionResource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPermissionResourceFromValue(v string) (*PermissionResource, error) {
	ev := PermissionResource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PermissionResource: valid values are %v", v, AllowedPermissionResourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PermissionResource) IsValid() bool {
	for _, existing := range AllowedPermissionResourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PermissionResource value
func (v PermissionResource) Ptr() *PermissionResource {
	return &v
}

type NullablePermissionResource struct {
	value *PermissionResource
	isSet bool
}

func (v NullablePermissionResource) Get() *PermissionResource {
	return v.value
}

func (v *NullablePermissionResource) Set(val *PermissionResource) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionResource) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionResource(val *PermissionResource) *NullablePermissionResource {
	return &NullablePermissionResource{value: val, isSet: true}
}

func (v NullablePermissionResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

