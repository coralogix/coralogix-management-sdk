/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_service

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ExtensionServiceAPIService ExtensionServiceAPI service
type ExtensionServiceAPIService service

type ApiExtensionServiceGetAllExtensionsRequest struct {
	ctx context.Context
	ApiService *ExtensionServiceAPIService
	getAllExtensionsRequest *GetAllExtensionsRequest
}

func (r ApiExtensionServiceGetAllExtensionsRequest) GetAllExtensionsRequest(getAllExtensionsRequest GetAllExtensionsRequest) ApiExtensionServiceGetAllExtensionsRequest {
	r.getAllExtensionsRequest = &getAllExtensionsRequest
	return r
}

func (r ApiExtensionServiceGetAllExtensionsRequest) Execute() (*GetAllExtensionsResponse, *http.Response, error) {
	return r.ApiService.ExtensionServiceGetAllExtensionsExecute(r)
}

/*
ExtensionServiceGetAllExtensions Get all extensions

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtensionServiceGetAllExtensionsRequest
*/
func (a *ExtensionServiceAPIService) ExtensionServiceGetAllExtensions(ctx context.Context) ApiExtensionServiceGetAllExtensionsRequest {
	return ApiExtensionServiceGetAllExtensionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAllExtensionsResponse
func (a *ExtensionServiceAPIService) ExtensionServiceGetAllExtensionsExecute(r ApiExtensionServiceGetAllExtensionsRequest) (*GetAllExtensionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAllExtensionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtensionServiceAPIService.ExtensionServiceGetAllExtensions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/extensions/v1/all"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.getAllExtensionsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtensionServiceGetExtensionRequest struct {
	ctx context.Context
	ApiService *ExtensionServiceAPIService
	id string
	includeDashboardBinaries *bool
	includeTestingRevision *bool
}

func (r ApiExtensionServiceGetExtensionRequest) IncludeDashboardBinaries(includeDashboardBinaries bool) ApiExtensionServiceGetExtensionRequest {
	r.includeDashboardBinaries = &includeDashboardBinaries
	return r
}

func (r ApiExtensionServiceGetExtensionRequest) IncludeTestingRevision(includeTestingRevision bool) ApiExtensionServiceGetExtensionRequest {
	r.includeTestingRevision = &includeTestingRevision
	return r
}

func (r ApiExtensionServiceGetExtensionRequest) Execute() (*V1Extension, *http.Response, error) {
	return r.ApiService.ExtensionServiceGetExtensionExecute(r)
}

/*
ExtensionServiceGetExtension Get extension by ID

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiExtensionServiceGetExtensionRequest
*/
func (a *ExtensionServiceAPIService) ExtensionServiceGetExtension(ctx context.Context, id string) ApiExtensionServiceGetExtensionRequest {
	return ApiExtensionServiceGetExtensionRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return V1Extension
func (a *ExtensionServiceAPIService) ExtensionServiceGetExtensionExecute(r ApiExtensionServiceGetExtensionRequest) (*V1Extension, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Extension
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtensionServiceAPIService.ExtensionServiceGetExtension")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/extensions/v1/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeDashboardBinaries != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_dashboard_binaries", r.includeDashboardBinaries, "form", "")
	}
	if r.includeTestingRevision != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_testing_revision", r.includeTestingRevision, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
