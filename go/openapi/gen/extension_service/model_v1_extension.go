/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1Extension type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1Extension{}

// V1Extension struct for V1Extension
type V1Extension struct {
	Changelog []ChangelogEntry `json:"changelog,omitempty"`
	DarkModeImage *string `json:"darkModeImage,omitempty"`
	Deprecation *Deprecation `json:"deprecation,omitempty"`
	Id string `json:"id"`
	Image string `json:"image"`
	Integrations []string `json:"integrations,omitempty"`
	IsHidden *bool `json:"isHidden,omitempty"`
	Keywords []string `json:"keywords,omitempty"`
	Name string `json:"name"`
	PermissionDeniedRevisions []ExtensionRevision `json:"permissionDeniedRevisions,omitempty"`
	Revisions []ExtensionRevision `json:"revisions,omitempty"`
}

type _V1Extension V1Extension

// NewV1Extension instantiates a new V1Extension object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Extension(id string, image string, name string) *V1Extension {
	this := V1Extension{}
	this.Id = id
	this.Image = image
	this.Name = name
	return &this
}

// NewV1ExtensionWithDefaults instantiates a new V1Extension object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ExtensionWithDefaults() *V1Extension {
	this := V1Extension{}
	return &this
}

// GetChangelog returns the Changelog field value if set, zero value otherwise.
func (o *V1Extension) GetChangelog() []ChangelogEntry {
	if o == nil || IsNil(o.Changelog) {
		var ret []ChangelogEntry
		return ret
	}
	return o.Changelog
}

// GetChangelogOk returns a tuple with the Changelog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Extension) GetChangelogOk() ([]ChangelogEntry, bool) {
	if o == nil || IsNil(o.Changelog) {
		return nil, false
	}
	return o.Changelog, true
}

// HasChangelog returns a boolean if a field has been set.
func (o *V1Extension) HasChangelog() bool {
	if o != nil && !IsNil(o.Changelog) {
		return true
	}

	return false
}

// SetChangelog gets a reference to the given []ChangelogEntry and assigns it to the Changelog field.
func (o *V1Extension) SetChangelog(v []ChangelogEntry) {
	o.Changelog = v
}

// GetDarkModeImage returns the DarkModeImage field value if set, zero value otherwise.
func (o *V1Extension) GetDarkModeImage() string {
	if o == nil || IsNil(o.DarkModeImage) {
		var ret string
		return ret
	}
	return *o.DarkModeImage
}

// GetDarkModeImageOk returns a tuple with the DarkModeImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Extension) GetDarkModeImageOk() (*string, bool) {
	if o == nil || IsNil(o.DarkModeImage) {
		return nil, false
	}
	return o.DarkModeImage, true
}

// HasDarkModeImage returns a boolean if a field has been set.
func (o *V1Extension) HasDarkModeImage() bool {
	if o != nil && !IsNil(o.DarkModeImage) {
		return true
	}

	return false
}

// SetDarkModeImage gets a reference to the given string and assigns it to the DarkModeImage field.
func (o *V1Extension) SetDarkModeImage(v string) {
	o.DarkModeImage = &v
}

// GetDeprecation returns the Deprecation field value if set, zero value otherwise.
func (o *V1Extension) GetDeprecation() Deprecation {
	if o == nil || IsNil(o.Deprecation) {
		var ret Deprecation
		return ret
	}
	return *o.Deprecation
}

// GetDeprecationOk returns a tuple with the Deprecation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Extension) GetDeprecationOk() (*Deprecation, bool) {
	if o == nil || IsNil(o.Deprecation) {
		return nil, false
	}
	return o.Deprecation, true
}

// HasDeprecation returns a boolean if a field has been set.
func (o *V1Extension) HasDeprecation() bool {
	if o != nil && !IsNil(o.Deprecation) {
		return true
	}

	return false
}

// SetDeprecation gets a reference to the given Deprecation and assigns it to the Deprecation field.
func (o *V1Extension) SetDeprecation(v Deprecation) {
	o.Deprecation = &v
}

// GetId returns the Id field value
func (o *V1Extension) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *V1Extension) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *V1Extension) SetId(v string) {
	o.Id = v
}

// GetImage returns the Image field value
func (o *V1Extension) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *V1Extension) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *V1Extension) SetImage(v string) {
	o.Image = v
}

// GetIntegrations returns the Integrations field value if set, zero value otherwise.
func (o *V1Extension) GetIntegrations() []string {
	if o == nil || IsNil(o.Integrations) {
		var ret []string
		return ret
	}
	return o.Integrations
}

// GetIntegrationsOk returns a tuple with the Integrations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Extension) GetIntegrationsOk() ([]string, bool) {
	if o == nil || IsNil(o.Integrations) {
		return nil, false
	}
	return o.Integrations, true
}

// HasIntegrations returns a boolean if a field has been set.
func (o *V1Extension) HasIntegrations() bool {
	if o != nil && !IsNil(o.Integrations) {
		return true
	}

	return false
}

// SetIntegrations gets a reference to the given []string and assigns it to the Integrations field.
func (o *V1Extension) SetIntegrations(v []string) {
	o.Integrations = v
}

// GetIsHidden returns the IsHidden field value if set, zero value otherwise.
func (o *V1Extension) GetIsHidden() bool {
	if o == nil || IsNil(o.IsHidden) {
		var ret bool
		return ret
	}
	return *o.IsHidden
}

// GetIsHiddenOk returns a tuple with the IsHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Extension) GetIsHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHidden) {
		return nil, false
	}
	return o.IsHidden, true
}

// HasIsHidden returns a boolean if a field has been set.
func (o *V1Extension) HasIsHidden() bool {
	if o != nil && !IsNil(o.IsHidden) {
		return true
	}

	return false
}

// SetIsHidden gets a reference to the given bool and assigns it to the IsHidden field.
func (o *V1Extension) SetIsHidden(v bool) {
	o.IsHidden = &v
}

// GetKeywords returns the Keywords field value if set, zero value otherwise.
func (o *V1Extension) GetKeywords() []string {
	if o == nil || IsNil(o.Keywords) {
		var ret []string
		return ret
	}
	return o.Keywords
}

// GetKeywordsOk returns a tuple with the Keywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Extension) GetKeywordsOk() ([]string, bool) {
	if o == nil || IsNil(o.Keywords) {
		return nil, false
	}
	return o.Keywords, true
}

// HasKeywords returns a boolean if a field has been set.
func (o *V1Extension) HasKeywords() bool {
	if o != nil && !IsNil(o.Keywords) {
		return true
	}

	return false
}

// SetKeywords gets a reference to the given []string and assigns it to the Keywords field.
func (o *V1Extension) SetKeywords(v []string) {
	o.Keywords = v
}

// GetName returns the Name field value
func (o *V1Extension) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *V1Extension) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *V1Extension) SetName(v string) {
	o.Name = v
}

// GetPermissionDeniedRevisions returns the PermissionDeniedRevisions field value if set, zero value otherwise.
func (o *V1Extension) GetPermissionDeniedRevisions() []ExtensionRevision {
	if o == nil || IsNil(o.PermissionDeniedRevisions) {
		var ret []ExtensionRevision
		return ret
	}
	return o.PermissionDeniedRevisions
}

// GetPermissionDeniedRevisionsOk returns a tuple with the PermissionDeniedRevisions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Extension) GetPermissionDeniedRevisionsOk() ([]ExtensionRevision, bool) {
	if o == nil || IsNil(o.PermissionDeniedRevisions) {
		return nil, false
	}
	return o.PermissionDeniedRevisions, true
}

// HasPermissionDeniedRevisions returns a boolean if a field has been set.
func (o *V1Extension) HasPermissionDeniedRevisions() bool {
	if o != nil && !IsNil(o.PermissionDeniedRevisions) {
		return true
	}

	return false
}

// SetPermissionDeniedRevisions gets a reference to the given []ExtensionRevision and assigns it to the PermissionDeniedRevisions field.
func (o *V1Extension) SetPermissionDeniedRevisions(v []ExtensionRevision) {
	o.PermissionDeniedRevisions = v
}

// GetRevisions returns the Revisions field value if set, zero value otherwise.
func (o *V1Extension) GetRevisions() []ExtensionRevision {
	if o == nil || IsNil(o.Revisions) {
		var ret []ExtensionRevision
		return ret
	}
	return o.Revisions
}

// GetRevisionsOk returns a tuple with the Revisions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Extension) GetRevisionsOk() ([]ExtensionRevision, bool) {
	if o == nil || IsNil(o.Revisions) {
		return nil, false
	}
	return o.Revisions, true
}

// HasRevisions returns a boolean if a field has been set.
func (o *V1Extension) HasRevisions() bool {
	if o != nil && !IsNil(o.Revisions) {
		return true
	}

	return false
}

// SetRevisions gets a reference to the given []ExtensionRevision and assigns it to the Revisions field.
func (o *V1Extension) SetRevisions(v []ExtensionRevision) {
	o.Revisions = v
}

func (o V1Extension) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1Extension) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Changelog) {
		toSerialize["changelog"] = o.Changelog
	}
	if !IsNil(o.DarkModeImage) {
		toSerialize["darkModeImage"] = o.DarkModeImage
	}
	if !IsNil(o.Deprecation) {
		toSerialize["deprecation"] = o.Deprecation
	}
	toSerialize["id"] = o.Id
	toSerialize["image"] = o.Image
	if !IsNil(o.Integrations) {
		toSerialize["integrations"] = o.Integrations
	}
	if !IsNil(o.IsHidden) {
		toSerialize["isHidden"] = o.IsHidden
	}
	if !IsNil(o.Keywords) {
		toSerialize["keywords"] = o.Keywords
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.PermissionDeniedRevisions) {
		toSerialize["permissionDeniedRevisions"] = o.PermissionDeniedRevisions
	}
	if !IsNil(o.Revisions) {
		toSerialize["revisions"] = o.Revisions
	}
	return toSerialize, nil
}

func (o *V1Extension) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"image",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1Extension := _V1Extension{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1Extension)

	if err != nil {
		return err
	}

	*o = V1Extension(varV1Extension)

	return err
}

type NullableV1Extension struct {
	value *V1Extension
	isSet bool
}

func (v NullableV1Extension) Get() *V1Extension {
	return v.value
}

func (v *NullableV1Extension) Set(val *V1Extension) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Extension) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Extension) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Extension(val *V1Extension) *NullableV1Extension {
	return &NullableV1Extension{value: val, isSet: true}
}

func (v NullableV1Extension) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Extension) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


