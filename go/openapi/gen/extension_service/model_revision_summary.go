/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RevisionSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RevisionSummary{}

// RevisionSummary struct for RevisionSummary
type RevisionSummary struct {
	IsNew *bool `json:"isNew,omitempty"`
	ItemCounts ItemCounts `json:"itemCounts"`
}

type _RevisionSummary RevisionSummary

// NewRevisionSummary instantiates a new RevisionSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevisionSummary(itemCounts ItemCounts) *RevisionSummary {
	this := RevisionSummary{}
	this.ItemCounts = itemCounts
	return &this
}

// NewRevisionSummaryWithDefaults instantiates a new RevisionSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevisionSummaryWithDefaults() *RevisionSummary {
	this := RevisionSummary{}
	return &this
}

// GetIsNew returns the IsNew field value if set, zero value otherwise.
func (o *RevisionSummary) GetIsNew() bool {
	if o == nil || IsNil(o.IsNew) {
		var ret bool
		return ret
	}
	return *o.IsNew
}

// GetIsNewOk returns a tuple with the IsNew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevisionSummary) GetIsNewOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNew) {
		return nil, false
	}
	return o.IsNew, true
}

// HasIsNew returns a boolean if a field has been set.
func (o *RevisionSummary) HasIsNew() bool {
	if o != nil && !IsNil(o.IsNew) {
		return true
	}

	return false
}

// SetIsNew gets a reference to the given bool and assigns it to the IsNew field.
func (o *RevisionSummary) SetIsNew(v bool) {
	o.IsNew = &v
}

// GetItemCounts returns the ItemCounts field value
func (o *RevisionSummary) GetItemCounts() ItemCounts {
	if o == nil {
		var ret ItemCounts
		return ret
	}

	return o.ItemCounts
}

// GetItemCountsOk returns a tuple with the ItemCounts field value
// and a boolean to check if the value has been set.
func (o *RevisionSummary) GetItemCountsOk() (*ItemCounts, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemCounts, true
}

// SetItemCounts sets field value
func (o *RevisionSummary) SetItemCounts(v ItemCounts) {
	o.ItemCounts = v
}

func (o RevisionSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RevisionSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsNew) {
		toSerialize["isNew"] = o.IsNew
	}
	toSerialize["itemCounts"] = o.ItemCounts
	return toSerialize, nil
}

func (o *RevisionSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"itemCounts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRevisionSummary := _RevisionSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRevisionSummary)

	if err != nil {
		return err
	}

	*o = RevisionSummary(varRevisionSummary)

	return err
}

type NullableRevisionSummary struct {
	value *RevisionSummary
	isSet bool
}

func (v NullableRevisionSummary) Get() *RevisionSummary {
	return v.value
}

func (v *NullableRevisionSummary) Set(val *RevisionSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableRevisionSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableRevisionSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevisionSummary(val *RevisionSummary) *NullableRevisionSummary {
	return &NullableRevisionSummary{value: val, isSet: true}
}

func (v NullableRevisionSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevisionSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


