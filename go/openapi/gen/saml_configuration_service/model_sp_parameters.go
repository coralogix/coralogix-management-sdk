/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saml_configuration_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SPParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SPParameters{}

// SPParameters This data structure represents the parameters of a SAML service provider
type SPParameters struct {
	AssertionConsumerServiceUrl string `json:"assertionConsumerServiceUrl"`
	Binding string `json:"binding"`
	MetadataUrl string `json:"metadataUrl"`
	NameIdFormat string `json:"nameIdFormat"`
	SigningCertPem string `json:"signingCertPem"`
}

type _SPParameters SPParameters

// NewSPParameters instantiates a new SPParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSPParameters(assertionConsumerServiceUrl string, binding string, metadataUrl string, nameIdFormat string, signingCertPem string) *SPParameters {
	this := SPParameters{}
	this.AssertionConsumerServiceUrl = assertionConsumerServiceUrl
	this.Binding = binding
	this.MetadataUrl = metadataUrl
	this.NameIdFormat = nameIdFormat
	this.SigningCertPem = signingCertPem
	return &this
}

// NewSPParametersWithDefaults instantiates a new SPParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSPParametersWithDefaults() *SPParameters {
	this := SPParameters{}
	return &this
}

// GetAssertionConsumerServiceUrl returns the AssertionConsumerServiceUrl field value
func (o *SPParameters) GetAssertionConsumerServiceUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssertionConsumerServiceUrl
}

// GetAssertionConsumerServiceUrlOk returns a tuple with the AssertionConsumerServiceUrl field value
// and a boolean to check if the value has been set.
func (o *SPParameters) GetAssertionConsumerServiceUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssertionConsumerServiceUrl, true
}

// SetAssertionConsumerServiceUrl sets field value
func (o *SPParameters) SetAssertionConsumerServiceUrl(v string) {
	o.AssertionConsumerServiceUrl = v
}

// GetBinding returns the Binding field value
func (o *SPParameters) GetBinding() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Binding
}

// GetBindingOk returns a tuple with the Binding field value
// and a boolean to check if the value has been set.
func (o *SPParameters) GetBindingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Binding, true
}

// SetBinding sets field value
func (o *SPParameters) SetBinding(v string) {
	o.Binding = v
}

// GetMetadataUrl returns the MetadataUrl field value
func (o *SPParameters) GetMetadataUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetadataUrl
}

// GetMetadataUrlOk returns a tuple with the MetadataUrl field value
// and a boolean to check if the value has been set.
func (o *SPParameters) GetMetadataUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetadataUrl, true
}

// SetMetadataUrl sets field value
func (o *SPParameters) SetMetadataUrl(v string) {
	o.MetadataUrl = v
}

// GetNameIdFormat returns the NameIdFormat field value
func (o *SPParameters) GetNameIdFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NameIdFormat
}

// GetNameIdFormatOk returns a tuple with the NameIdFormat field value
// and a boolean to check if the value has been set.
func (o *SPParameters) GetNameIdFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NameIdFormat, true
}

// SetNameIdFormat sets field value
func (o *SPParameters) SetNameIdFormat(v string) {
	o.NameIdFormat = v
}

// GetSigningCertPem returns the SigningCertPem field value
func (o *SPParameters) GetSigningCertPem() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SigningCertPem
}

// GetSigningCertPemOk returns a tuple with the SigningCertPem field value
// and a boolean to check if the value has been set.
func (o *SPParameters) GetSigningCertPemOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SigningCertPem, true
}

// SetSigningCertPem sets field value
func (o *SPParameters) SetSigningCertPem(v string) {
	o.SigningCertPem = v
}

func (o SPParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SPParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assertionConsumerServiceUrl"] = o.AssertionConsumerServiceUrl
	toSerialize["binding"] = o.Binding
	toSerialize["metadataUrl"] = o.MetadataUrl
	toSerialize["nameIdFormat"] = o.NameIdFormat
	toSerialize["signingCertPem"] = o.SigningCertPem
	return toSerialize, nil
}

func (o *SPParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assertionConsumerServiceUrl",
		"binding",
		"metadataUrl",
		"nameIdFormat",
		"signingCertPem",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSPParameters := _SPParameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSPParameters)

	if err != nil {
		return err
	}

	*o = SPParameters(varSPParameters)

	return err
}

type NullableSPParameters struct {
	value *SPParameters
	isSet bool
}

func (v NullableSPParameters) Get() *SPParameters {
	return v.value
}

func (v *NullableSPParameters) Set(val *SPParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableSPParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableSPParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSPParameters(val *SPParameters) *NullableSPParameters {
	return &NullableSPParameters{value: val, isSet: true}
}

func (v NullableSPParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSPParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


