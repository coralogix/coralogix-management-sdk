/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saml_configuration_service

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// SAMLConfigurationServiceAPIService SAMLConfigurationServiceAPI service
type SAMLConfigurationServiceAPIService service

type ApiSamlConfigurationServiceGetConfigurationRequest struct {
	ctx context.Context
	ApiService *SAMLConfigurationServiceAPIService
	teamId *int64
}

func (r ApiSamlConfigurationServiceGetConfigurationRequest) TeamId(teamId int64) ApiSamlConfigurationServiceGetConfigurationRequest {
	r.teamId = &teamId
	return r
}

func (r ApiSamlConfigurationServiceGetConfigurationRequest) Execute() (*GetConfigurationResponse, *http.Response, error) {
	return r.ApiService.SamlConfigurationServiceGetConfigurationExecute(r)
}

/*
SamlConfigurationServiceGetConfiguration Get SAML Configuration

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSamlConfigurationServiceGetConfigurationRequest
*/
func (a *SAMLConfigurationServiceAPIService) SamlConfigurationServiceGetConfiguration(ctx context.Context) ApiSamlConfigurationServiceGetConfigurationRequest {
	return ApiSamlConfigurationServiceGetConfigurationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetConfigurationResponse
func (a *SAMLConfigurationServiceAPIService) SamlConfigurationServiceGetConfigurationExecute(r ApiSamlConfigurationServiceGetConfigurationRequest) (*GetConfigurationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetConfigurationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SAMLConfigurationServiceAPIService.SamlConfigurationServiceGetConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aaa/team-saml/v1/configuration"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.teamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "team_id", r.teamId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSamlConfigurationServiceGetSPParametersRequest struct {
	ctx context.Context
	ApiService *SAMLConfigurationServiceAPIService
	teamId *int64
}

func (r ApiSamlConfigurationServiceGetSPParametersRequest) TeamId(teamId int64) ApiSamlConfigurationServiceGetSPParametersRequest {
	r.teamId = &teamId
	return r
}

func (r ApiSamlConfigurationServiceGetSPParametersRequest) Execute() (*GetSPParametersResponse, *http.Response, error) {
	return r.ApiService.SamlConfigurationServiceGetSPParametersExecute(r)
}

/*
SamlConfigurationServiceGetSPParameters Get SP Parameters

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSamlConfigurationServiceGetSPParametersRequest
*/
func (a *SAMLConfigurationServiceAPIService) SamlConfigurationServiceGetSPParameters(ctx context.Context) ApiSamlConfigurationServiceGetSPParametersRequest {
	return ApiSamlConfigurationServiceGetSPParametersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetSPParametersResponse
func (a *SAMLConfigurationServiceAPIService) SamlConfigurationServiceGetSPParametersExecute(r ApiSamlConfigurationServiceGetSPParametersRequest) (*GetSPParametersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetSPParametersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SAMLConfigurationServiceAPIService.SamlConfigurationServiceGetSPParameters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aaa/team-saml/v1/sp_parameters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.teamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "team_id", r.teamId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSamlConfigurationServiceSetActiveRequest struct {
	ctx context.Context
	ApiService *SAMLConfigurationServiceAPIService
	setActiveRequest *SetActiveRequest
}

func (r ApiSamlConfigurationServiceSetActiveRequest) SetActiveRequest(setActiveRequest SetActiveRequest) ApiSamlConfigurationServiceSetActiveRequest {
	r.setActiveRequest = &setActiveRequest
	return r
}

func (r ApiSamlConfigurationServiceSetActiveRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.SamlConfigurationServiceSetActiveExecute(r)
}

/*
SamlConfigurationServiceSetActive Activate/Deactivate SAML

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSamlConfigurationServiceSetActiveRequest
*/
func (a *SAMLConfigurationServiceAPIService) SamlConfigurationServiceSetActive(ctx context.Context) ApiSamlConfigurationServiceSetActiveRequest {
	return ApiSamlConfigurationServiceSetActiveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *SAMLConfigurationServiceAPIService) SamlConfigurationServiceSetActiveExecute(r ApiSamlConfigurationServiceSetActiveRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SAMLConfigurationServiceAPIService.SamlConfigurationServiceSetActive")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aaa/team-saml/v1/active"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setActiveRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSamlConfigurationServiceSetIDPParametersRequest struct {
	ctx context.Context
	ApiService *SAMLConfigurationServiceAPIService
	setIDPParametersRequest *SetIDPParametersRequest
}

func (r ApiSamlConfigurationServiceSetIDPParametersRequest) SetIDPParametersRequest(setIDPParametersRequest SetIDPParametersRequest) ApiSamlConfigurationServiceSetIDPParametersRequest {
	r.setIDPParametersRequest = &setIDPParametersRequest
	return r
}

func (r ApiSamlConfigurationServiceSetIDPParametersRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.SamlConfigurationServiceSetIDPParametersExecute(r)
}

/*
SamlConfigurationServiceSetIDPParameters Set IDP Parameters

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSamlConfigurationServiceSetIDPParametersRequest
*/
func (a *SAMLConfigurationServiceAPIService) SamlConfigurationServiceSetIDPParameters(ctx context.Context) ApiSamlConfigurationServiceSetIDPParametersRequest {
	return ApiSamlConfigurationServiceSetIDPParametersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *SAMLConfigurationServiceAPIService) SamlConfigurationServiceSetIDPParametersExecute(r ApiSamlConfigurationServiceSetIDPParametersRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SAMLConfigurationServiceAPIService.SamlConfigurationServiceSetIDPParameters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aaa/team-saml/v1/idp_parameters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setIDPParametersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
