/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saml_configuration_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IDPParametersMetadataUrl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IDPParametersMetadataUrl{}

// IDPParametersMetadataUrl This data structure represents a set of SAML identity provider parameters
type IDPParametersMetadataUrl struct {
	Active bool `json:"active"`
	GroupNames []string `json:"groupNames"`
	MetadataUrl *string `json:"metadataUrl,omitempty"`
	TeamEntityId int64 `json:"teamEntityId"`
}

type _IDPParametersMetadataUrl IDPParametersMetadataUrl

// NewIDPParametersMetadataUrl instantiates a new IDPParametersMetadataUrl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIDPParametersMetadataUrl(active bool, groupNames []string, teamEntityId int64) *IDPParametersMetadataUrl {
	this := IDPParametersMetadataUrl{}
	this.Active = active
	this.GroupNames = groupNames
	this.TeamEntityId = teamEntityId
	return &this
}

// NewIDPParametersMetadataUrlWithDefaults instantiates a new IDPParametersMetadataUrl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIDPParametersMetadataUrlWithDefaults() *IDPParametersMetadataUrl {
	this := IDPParametersMetadataUrl{}
	return &this
}

// GetActive returns the Active field value
func (o *IDPParametersMetadataUrl) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *IDPParametersMetadataUrl) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *IDPParametersMetadataUrl) SetActive(v bool) {
	o.Active = v
}

// GetGroupNames returns the GroupNames field value
func (o *IDPParametersMetadataUrl) GetGroupNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.GroupNames
}

// GetGroupNamesOk returns a tuple with the GroupNames field value
// and a boolean to check if the value has been set.
func (o *IDPParametersMetadataUrl) GetGroupNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupNames, true
}

// SetGroupNames sets field value
func (o *IDPParametersMetadataUrl) SetGroupNames(v []string) {
	o.GroupNames = v
}

// GetMetadataUrl returns the MetadataUrl field value if set, zero value otherwise.
func (o *IDPParametersMetadataUrl) GetMetadataUrl() string {
	if o == nil || IsNil(o.MetadataUrl) {
		var ret string
		return ret
	}
	return *o.MetadataUrl
}

// GetMetadataUrlOk returns a tuple with the MetadataUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDPParametersMetadataUrl) GetMetadataUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MetadataUrl) {
		return nil, false
	}
	return o.MetadataUrl, true
}

// HasMetadataUrl returns a boolean if a field has been set.
func (o *IDPParametersMetadataUrl) HasMetadataUrl() bool {
	if o != nil && !IsNil(o.MetadataUrl) {
		return true
	}

	return false
}

// SetMetadataUrl gets a reference to the given string and assigns it to the MetadataUrl field.
func (o *IDPParametersMetadataUrl) SetMetadataUrl(v string) {
	o.MetadataUrl = &v
}

// GetTeamEntityId returns the TeamEntityId field value
func (o *IDPParametersMetadataUrl) GetTeamEntityId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TeamEntityId
}

// GetTeamEntityIdOk returns a tuple with the TeamEntityId field value
// and a boolean to check if the value has been set.
func (o *IDPParametersMetadataUrl) GetTeamEntityIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamEntityId, true
}

// SetTeamEntityId sets field value
func (o *IDPParametersMetadataUrl) SetTeamEntityId(v int64) {
	o.TeamEntityId = v
}

func (o IDPParametersMetadataUrl) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IDPParametersMetadataUrl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["active"] = o.Active
	toSerialize["groupNames"] = o.GroupNames
	if !IsNil(o.MetadataUrl) {
		toSerialize["metadataUrl"] = o.MetadataUrl
	}
	toSerialize["teamEntityId"] = o.TeamEntityId
	return toSerialize, nil
}

func (o *IDPParametersMetadataUrl) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"active",
		"groupNames",
		"teamEntityId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIDPParametersMetadataUrl := _IDPParametersMetadataUrl{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIDPParametersMetadataUrl)

	if err != nil {
		return err
	}

	*o = IDPParametersMetadataUrl(varIDPParametersMetadataUrl)

	return err
}

type NullableIDPParametersMetadataUrl struct {
	value *IDPParametersMetadataUrl
	isSet bool
}

func (v NullableIDPParametersMetadataUrl) Get() *IDPParametersMetadataUrl {
	return v.value
}

func (v *NullableIDPParametersMetadataUrl) Set(val *IDPParametersMetadataUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableIDPParametersMetadataUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableIDPParametersMetadataUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIDPParametersMetadataUrl(val *IDPParametersMetadataUrl) *NullableIDPParametersMetadataUrl {
	return &NullableIDPParametersMetadataUrl{value: val, isSet: true}
}

func (v NullableIDPParametersMetadataUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIDPParametersMetadataUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


