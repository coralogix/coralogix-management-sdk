/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saml_configuration_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SetActiveRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetActiveRequest{}

// SetActiveRequest This data structure is used to activate or deactivate a SAML identity provider
type SetActiveRequest struct {
	IsActive bool `json:"isActive"`
	TeamId int64 `json:"teamId"`
}

type _SetActiveRequest SetActiveRequest

// NewSetActiveRequest instantiates a new SetActiveRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetActiveRequest(isActive bool, teamId int64) *SetActiveRequest {
	this := SetActiveRequest{}
	this.IsActive = isActive
	this.TeamId = teamId
	return &this
}

// NewSetActiveRequestWithDefaults instantiates a new SetActiveRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetActiveRequestWithDefaults() *SetActiveRequest {
	this := SetActiveRequest{}
	return &this
}

// GetIsActive returns the IsActive field value
func (o *SetActiveRequest) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *SetActiveRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *SetActiveRequest) SetIsActive(v bool) {
	o.IsActive = v
}

// GetTeamId returns the TeamId field value
func (o *SetActiveRequest) GetTeamId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value
// and a boolean to check if the value has been set.
func (o *SetActiveRequest) GetTeamIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamId, true
}

// SetTeamId sets field value
func (o *SetActiveRequest) SetTeamId(v int64) {
	o.TeamId = v
}

func (o SetActiveRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetActiveRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isActive"] = o.IsActive
	toSerialize["teamId"] = o.TeamId
	return toSerialize, nil
}

func (o *SetActiveRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isActive",
		"teamId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetActiveRequest := _SetActiveRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSetActiveRequest)

	if err != nil {
		return err
	}

	*o = SetActiveRequest(varSetActiveRequest)

	return err
}

type NullableSetActiveRequest struct {
	value *SetActiveRequest
	isSet bool
}

func (v NullableSetActiveRequest) Get() *SetActiveRequest {
	return v.value
}

func (v *NullableSetActiveRequest) Set(val *SetActiveRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSetActiveRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSetActiveRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetActiveRequest(val *SetActiveRequest) *NullableSetActiveRequest {
	return &NullableSetActiveRequest{value: val, isSet: true}
}

func (v NullableSetActiveRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetActiveRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


