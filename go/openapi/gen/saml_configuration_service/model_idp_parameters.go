/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saml_configuration_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// IDPParameters - struct for IDPParameters
type IDPParameters struct {
	IDPParametersMetadataContent *IDPParametersMetadataContent
	IDPParametersMetadataUrl *IDPParametersMetadataUrl
}

// IDPParametersMetadataContentAsIDPParameters is a convenience function that returns IDPParametersMetadataContent wrapped in IDPParameters
func IDPParametersMetadataContentAsIDPParameters(v *IDPParametersMetadataContent) IDPParameters {
	return IDPParameters{
		IDPParametersMetadataContent: v,
	}
}

// IDPParametersMetadataUrlAsIDPParameters is a convenience function that returns IDPParametersMetadataUrl wrapped in IDPParameters
func IDPParametersMetadataUrlAsIDPParameters(v *IDPParametersMetadataUrl) IDPParameters {
	return IDPParameters{
		IDPParametersMetadataUrl: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IDPParameters) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IDPParametersMetadataContent
	err = newStrictDecoder(data).Decode(&dst.IDPParametersMetadataContent)
	if err == nil {
		jsonIDPParametersMetadataContent, _ := json.Marshal(dst.IDPParametersMetadataContent)
		if string(jsonIDPParametersMetadataContent) == "{}" { // empty struct
			dst.IDPParametersMetadataContent = nil
		} else {
			if err = validator.Validate(dst.IDPParametersMetadataContent); err != nil {
				dst.IDPParametersMetadataContent = nil
			} else {
				match++
			}
		}
	} else {
		dst.IDPParametersMetadataContent = nil
	}

	// try to unmarshal data into IDPParametersMetadataUrl
	err = newStrictDecoder(data).Decode(&dst.IDPParametersMetadataUrl)
	if err == nil {
		jsonIDPParametersMetadataUrl, _ := json.Marshal(dst.IDPParametersMetadataUrl)
		if string(jsonIDPParametersMetadataUrl) == "{}" { // empty struct
			dst.IDPParametersMetadataUrl = nil
		} else {
			if err = validator.Validate(dst.IDPParametersMetadataUrl); err != nil {
				dst.IDPParametersMetadataUrl = nil
			} else {
				match++
			}
		}
	} else {
		dst.IDPParametersMetadataUrl = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IDPParametersMetadataContent = nil
		dst.IDPParametersMetadataUrl = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IDPParameters)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IDPParameters)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IDPParameters) MarshalJSON() ([]byte, error) {
	if src.IDPParametersMetadataContent != nil {
		return json.Marshal(&src.IDPParametersMetadataContent)
	}

	if src.IDPParametersMetadataUrl != nil {
		return json.Marshal(&src.IDPParametersMetadataUrl)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IDPParameters) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IDPParametersMetadataContent != nil {
		return obj.IDPParametersMetadataContent
	}

	if obj.IDPParametersMetadataUrl != nil {
		return obj.IDPParametersMetadataUrl
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj IDPParameters) GetActualInstanceValue() (interface{}) {
	if obj.IDPParametersMetadataContent != nil {
		return *obj.IDPParametersMetadataContent
	}

	if obj.IDPParametersMetadataUrl != nil {
		return *obj.IDPParametersMetadataUrl
	}

	// all schemas are nil
	return nil
}

type NullableIDPParameters struct {
	value *IDPParameters
	isSet bool
}

func (v NullableIDPParameters) Get() *IDPParameters {
	return v.value
}

func (v *NullableIDPParameters) Set(val *IDPParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableIDPParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableIDPParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIDPParameters(val *IDPParameters) *NullableIDPParameters {
	return &NullableIDPParameters{value: val, isSet: true}
}

func (v NullableIDPParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIDPParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


