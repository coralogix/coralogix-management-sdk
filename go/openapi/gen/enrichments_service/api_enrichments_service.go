/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enrichments_service

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// EnrichmentsServiceAPIService EnrichmentsServiceAPI service
type EnrichmentsServiceAPIService service

type ApiEnrichmentServiceAddEnrichmentsRequest struct {
	ctx context.Context
	ApiService *EnrichmentsServiceAPIService
	enrichmentsCreationRequest *EnrichmentsCreationRequest
}

func (r ApiEnrichmentServiceAddEnrichmentsRequest) EnrichmentsCreationRequest(enrichmentsCreationRequest EnrichmentsCreationRequest) ApiEnrichmentServiceAddEnrichmentsRequest {
	r.enrichmentsCreationRequest = &enrichmentsCreationRequest
	return r
}

func (r ApiEnrichmentServiceAddEnrichmentsRequest) Execute() (*AddEnrichmentsResponse, *http.Response, error) {
	return r.ApiService.EnrichmentServiceAddEnrichmentsExecute(r)
}

/*
EnrichmentServiceAddEnrichments Add Enrichments

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEnrichmentServiceAddEnrichmentsRequest
*/
func (a *EnrichmentsServiceAPIService) EnrichmentServiceAddEnrichments(ctx context.Context) ApiEnrichmentServiceAddEnrichmentsRequest {
	return ApiEnrichmentServiceAddEnrichmentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AddEnrichmentsResponse
func (a *EnrichmentsServiceAPIService) EnrichmentServiceAddEnrichmentsExecute(r ApiEnrichmentServiceAddEnrichmentsRequest) (*AddEnrichmentsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddEnrichmentsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrichmentsServiceAPIService.EnrichmentServiceAddEnrichments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enrichments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enrichmentsCreationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnrichmentServiceAtomicOverwriteEnrichmentsRequest struct {
	ctx context.Context
	ApiService *EnrichmentsServiceAPIService
	enrichmentServiceAtomicOverwriteEnrichmentsRequest *EnrichmentServiceAtomicOverwriteEnrichmentsRequest
}

func (r ApiEnrichmentServiceAtomicOverwriteEnrichmentsRequest) EnrichmentServiceAtomicOverwriteEnrichmentsRequest(enrichmentServiceAtomicOverwriteEnrichmentsRequest EnrichmentServiceAtomicOverwriteEnrichmentsRequest) ApiEnrichmentServiceAtomicOverwriteEnrichmentsRequest {
	r.enrichmentServiceAtomicOverwriteEnrichmentsRequest = &enrichmentServiceAtomicOverwriteEnrichmentsRequest
	return r
}

func (r ApiEnrichmentServiceAtomicOverwriteEnrichmentsRequest) Execute() (*AtomicOverwriteEnrichmentsResponse, *http.Response, error) {
	return r.ApiService.EnrichmentServiceAtomicOverwriteEnrichmentsExecute(r)
}

/*
EnrichmentServiceAtomicOverwriteEnrichments Atomic Overwrite Enrichments

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEnrichmentServiceAtomicOverwriteEnrichmentsRequest
*/
func (a *EnrichmentsServiceAPIService) EnrichmentServiceAtomicOverwriteEnrichments(ctx context.Context) ApiEnrichmentServiceAtomicOverwriteEnrichmentsRequest {
	return ApiEnrichmentServiceAtomicOverwriteEnrichmentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AtomicOverwriteEnrichmentsResponse
func (a *EnrichmentsServiceAPIService) EnrichmentServiceAtomicOverwriteEnrichmentsExecute(r ApiEnrichmentServiceAtomicOverwriteEnrichmentsRequest) (*AtomicOverwriteEnrichmentsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AtomicOverwriteEnrichmentsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrichmentsServiceAPIService.EnrichmentServiceAtomicOverwriteEnrichments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enrichments:atomicOverwrite"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enrichmentServiceAtomicOverwriteEnrichmentsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnrichmentServiceGetCompanyEnrichmentSettingsRequest struct {
	ctx context.Context
	ApiService *EnrichmentsServiceAPIService
}

func (r ApiEnrichmentServiceGetCompanyEnrichmentSettingsRequest) Execute() (*GetCompanyEnrichmentSettingsResponse, *http.Response, error) {
	return r.ApiService.EnrichmentServiceGetCompanyEnrichmentSettingsExecute(r)
}

/*
EnrichmentServiceGetCompanyEnrichmentSettings Get Company Enrichment Settings

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEnrichmentServiceGetCompanyEnrichmentSettingsRequest
*/
func (a *EnrichmentsServiceAPIService) EnrichmentServiceGetCompanyEnrichmentSettings(ctx context.Context) ApiEnrichmentServiceGetCompanyEnrichmentSettingsRequest {
	return ApiEnrichmentServiceGetCompanyEnrichmentSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetCompanyEnrichmentSettingsResponse
func (a *EnrichmentsServiceAPIService) EnrichmentServiceGetCompanyEnrichmentSettingsExecute(r ApiEnrichmentServiceGetCompanyEnrichmentSettingsRequest) (*GetCompanyEnrichmentSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetCompanyEnrichmentSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrichmentsServiceAPIService.EnrichmentServiceGetCompanyEnrichmentSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enrichments/settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnrichmentServiceGetEnrichmentLimitRequest struct {
	ctx context.Context
	ApiService *EnrichmentsServiceAPIService
}

func (r ApiEnrichmentServiceGetEnrichmentLimitRequest) Execute() (*GetEnrichmentLimitResponse, *http.Response, error) {
	return r.ApiService.EnrichmentServiceGetEnrichmentLimitExecute(r)
}

/*
EnrichmentServiceGetEnrichmentLimit Get Enrichment Limit

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEnrichmentServiceGetEnrichmentLimitRequest
*/
func (a *EnrichmentsServiceAPIService) EnrichmentServiceGetEnrichmentLimit(ctx context.Context) ApiEnrichmentServiceGetEnrichmentLimitRequest {
	return ApiEnrichmentServiceGetEnrichmentLimitRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetEnrichmentLimitResponse
func (a *EnrichmentsServiceAPIService) EnrichmentServiceGetEnrichmentLimitExecute(r ApiEnrichmentServiceGetEnrichmentLimitRequest) (*GetEnrichmentLimitResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetEnrichmentLimitResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrichmentsServiceAPIService.EnrichmentServiceGetEnrichmentLimit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enrichments/limit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnrichmentServiceGetEnrichmentsRequest struct {
	ctx context.Context
	ApiService *EnrichmentsServiceAPIService
}

func (r ApiEnrichmentServiceGetEnrichmentsRequest) Execute() (*GetEnrichmentsResponse, *http.Response, error) {
	return r.ApiService.EnrichmentServiceGetEnrichmentsExecute(r)
}

/*
EnrichmentServiceGetEnrichments Get Enrichments

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEnrichmentServiceGetEnrichmentsRequest
*/
func (a *EnrichmentsServiceAPIService) EnrichmentServiceGetEnrichments(ctx context.Context) ApiEnrichmentServiceGetEnrichmentsRequest {
	return ApiEnrichmentServiceGetEnrichmentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetEnrichmentsResponse
func (a *EnrichmentsServiceAPIService) EnrichmentServiceGetEnrichmentsExecute(r ApiEnrichmentServiceGetEnrichmentsRequest) (*GetEnrichmentsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetEnrichmentsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrichmentsServiceAPIService.EnrichmentServiceGetEnrichments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enrichments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnrichmentServiceRemoveEnrichmentsRequest struct {
	ctx context.Context
	ApiService *EnrichmentsServiceAPIService
	enrichmentIds *[]int64
}

func (r ApiEnrichmentServiceRemoveEnrichmentsRequest) EnrichmentIds(enrichmentIds []int64) ApiEnrichmentServiceRemoveEnrichmentsRequest {
	r.enrichmentIds = &enrichmentIds
	return r
}

func (r ApiEnrichmentServiceRemoveEnrichmentsRequest) Execute() (*RemoveEnrichmentsResponse, *http.Response, error) {
	return r.ApiService.EnrichmentServiceRemoveEnrichmentsExecute(r)
}

/*
EnrichmentServiceRemoveEnrichments Delete Enrichments

No description available

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEnrichmentServiceRemoveEnrichmentsRequest
*/
func (a *EnrichmentsServiceAPIService) EnrichmentServiceRemoveEnrichments(ctx context.Context) ApiEnrichmentServiceRemoveEnrichmentsRequest {
	return ApiEnrichmentServiceRemoveEnrichmentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RemoveEnrichmentsResponse
func (a *EnrichmentsServiceAPIService) EnrichmentServiceRemoveEnrichmentsExecute(r ApiEnrichmentServiceRemoveEnrichmentsRequest) (*RemoveEnrichmentsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RemoveEnrichmentsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrichmentsServiceAPIService.EnrichmentServiceRemoveEnrichments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enrichments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.enrichmentIds != nil {
		t := *r.enrichmentIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "enrichment_ids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "enrichment_ids", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
