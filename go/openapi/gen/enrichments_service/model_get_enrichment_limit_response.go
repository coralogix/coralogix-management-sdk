/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enrichments_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetEnrichmentLimitResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEnrichmentLimitResponse{}

// GetEnrichmentLimitResponse This response data structure represents the enrichments limit
type GetEnrichmentLimitResponse struct {
	Limit int64 `json:"limit"`
	Used int64 `json:"used"`
}

type _GetEnrichmentLimitResponse GetEnrichmentLimitResponse

// NewGetEnrichmentLimitResponse instantiates a new GetEnrichmentLimitResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEnrichmentLimitResponse(limit int64, used int64) *GetEnrichmentLimitResponse {
	this := GetEnrichmentLimitResponse{}
	this.Limit = limit
	this.Used = used
	return &this
}

// NewGetEnrichmentLimitResponseWithDefaults instantiates a new GetEnrichmentLimitResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEnrichmentLimitResponseWithDefaults() *GetEnrichmentLimitResponse {
	this := GetEnrichmentLimitResponse{}
	return &this
}

// GetLimit returns the Limit field value
func (o *GetEnrichmentLimitResponse) GetLimit() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *GetEnrichmentLimitResponse) GetLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *GetEnrichmentLimitResponse) SetLimit(v int64) {
	o.Limit = v
}

// GetUsed returns the Used field value
func (o *GetEnrichmentLimitResponse) GetUsed() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Used
}

// GetUsedOk returns a tuple with the Used field value
// and a boolean to check if the value has been set.
func (o *GetEnrichmentLimitResponse) GetUsedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Used, true
}

// SetUsed sets field value
func (o *GetEnrichmentLimitResponse) SetUsed(v int64) {
	o.Used = v
}

func (o GetEnrichmentLimitResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEnrichmentLimitResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["limit"] = o.Limit
	toSerialize["used"] = o.Used
	return toSerialize, nil
}

func (o *GetEnrichmentLimitResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"limit",
		"used",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetEnrichmentLimitResponse := _GetEnrichmentLimitResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetEnrichmentLimitResponse)

	if err != nil {
		return err
	}

	*o = GetEnrichmentLimitResponse(varGetEnrichmentLimitResponse)

	return err
}

type NullableGetEnrichmentLimitResponse struct {
	value *GetEnrichmentLimitResponse
	isSet bool
}

func (v NullableGetEnrichmentLimitResponse) Get() *GetEnrichmentLimitResponse {
	return v.value
}

func (v *NullableGetEnrichmentLimitResponse) Set(val *GetEnrichmentLimitResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEnrichmentLimitResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEnrichmentLimitResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEnrichmentLimitResponse(val *GetEnrichmentLimitResponse) *NullableGetEnrichmentLimitResponse {
	return &NullableGetEnrichmentLimitResponse{value: val, isSet: true}
}

func (v NullableGetEnrichmentLimitResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEnrichmentLimitResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


