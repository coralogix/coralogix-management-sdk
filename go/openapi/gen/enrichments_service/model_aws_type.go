/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enrichments_service

import (
	"encoding/json"
)

// checks if the AwsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsType{}

// AwsType struct for AwsType
type AwsType struct {
	ResourceType *string `json:"resourceType,omitempty"`
}

// NewAwsType instantiates a new AwsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsType() *AwsType {
	this := AwsType{}
	return &this
}

// NewAwsTypeWithDefaults instantiates a new AwsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsTypeWithDefaults() *AwsType {
	this := AwsType{}
	return &this
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *AwsType) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsType) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *AwsType) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *AwsType) SetResourceType(v string) {
	o.ResourceType = &v
}

func (o AwsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	return toSerialize, nil
}

type NullableAwsType struct {
	value *AwsType
	isSet bool
}

func (v NullableAwsType) Get() *AwsType {
	return v.value
}

func (v *NullableAwsType) Set(val *AwsType) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsType) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsType(val *AwsType) *NullableAwsType {
	return &NullableAwsType{value: val, isSet: true}
}

func (v NullableAwsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


