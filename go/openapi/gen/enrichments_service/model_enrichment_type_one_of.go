/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enrichments_service

import (
	"encoding/json"
)

// checks if the EnrichmentTypeOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnrichmentTypeOneOf{}

// EnrichmentTypeOneOf struct for EnrichmentTypeOneOf
type EnrichmentTypeOneOf struct {
	GeoIp *GeoIpType `json:"geoIp,omitempty"`
}

// NewEnrichmentTypeOneOf instantiates a new EnrichmentTypeOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnrichmentTypeOneOf() *EnrichmentTypeOneOf {
	this := EnrichmentTypeOneOf{}
	return &this
}

// NewEnrichmentTypeOneOfWithDefaults instantiates a new EnrichmentTypeOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnrichmentTypeOneOfWithDefaults() *EnrichmentTypeOneOf {
	this := EnrichmentTypeOneOf{}
	return &this
}

// GetGeoIp returns the GeoIp field value if set, zero value otherwise.
func (o *EnrichmentTypeOneOf) GetGeoIp() GeoIpType {
	if o == nil || IsNil(o.GeoIp) {
		var ret GeoIpType
		return ret
	}
	return *o.GeoIp
}

// GetGeoIpOk returns a tuple with the GeoIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrichmentTypeOneOf) GetGeoIpOk() (*GeoIpType, bool) {
	if o == nil || IsNil(o.GeoIp) {
		return nil, false
	}
	return o.GeoIp, true
}

// HasGeoIp returns a boolean if a field has been set.
func (o *EnrichmentTypeOneOf) HasGeoIp() bool {
	if o != nil && !IsNil(o.GeoIp) {
		return true
	}

	return false
}

// SetGeoIp gets a reference to the given GeoIpType and assigns it to the GeoIp field.
func (o *EnrichmentTypeOneOf) SetGeoIp(v GeoIpType) {
	o.GeoIp = &v
}

func (o EnrichmentTypeOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnrichmentTypeOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GeoIp) {
		toSerialize["geoIp"] = o.GeoIp
	}
	return toSerialize, nil
}

type NullableEnrichmentTypeOneOf struct {
	value *EnrichmentTypeOneOf
	isSet bool
}

func (v NullableEnrichmentTypeOneOf) Get() *EnrichmentTypeOneOf {
	return v.value
}

func (v *NullableEnrichmentTypeOneOf) Set(val *EnrichmentTypeOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEnrichmentTypeOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEnrichmentTypeOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnrichmentTypeOneOf(val *EnrichmentTypeOneOf) *NullableEnrichmentTypeOneOf {
	return &NullableEnrichmentTypeOneOf{value: val, isSet: true}
}

func (v NullableEnrichmentTypeOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnrichmentTypeOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


