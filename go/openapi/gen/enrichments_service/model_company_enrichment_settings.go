/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enrichments_service

import (
	"encoding/json"
)

// checks if the CompanyEnrichmentSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyEnrichmentSettings{}

// CompanyEnrichmentSettings struct for CompanyEnrichmentSettings
type CompanyEnrichmentSettings struct {
	EnrichmentAmountLimit *int64 `json:"enrichmentAmountLimit,omitempty"`
	EnrichmentsInUse *int64 `json:"enrichmentsInUse,omitempty"`
	QueryOnlyRowLimit *int64 `json:"queryOnlyRowLimit,omitempty"`
	QueryOnlySizeLimitBytes *string `json:"queryOnlySizeLimitBytes,omitempty"`
	RowLimit *int64 `json:"rowLimit,omitempty"`
	SizeLimitBytes *string `json:"sizeLimitBytes,omitempty"`
}

// NewCompanyEnrichmentSettings instantiates a new CompanyEnrichmentSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyEnrichmentSettings() *CompanyEnrichmentSettings {
	this := CompanyEnrichmentSettings{}
	return &this
}

// NewCompanyEnrichmentSettingsWithDefaults instantiates a new CompanyEnrichmentSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyEnrichmentSettingsWithDefaults() *CompanyEnrichmentSettings {
	this := CompanyEnrichmentSettings{}
	return &this
}

// GetEnrichmentAmountLimit returns the EnrichmentAmountLimit field value if set, zero value otherwise.
func (o *CompanyEnrichmentSettings) GetEnrichmentAmountLimit() int64 {
	if o == nil || IsNil(o.EnrichmentAmountLimit) {
		var ret int64
		return ret
	}
	return *o.EnrichmentAmountLimit
}

// GetEnrichmentAmountLimitOk returns a tuple with the EnrichmentAmountLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyEnrichmentSettings) GetEnrichmentAmountLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.EnrichmentAmountLimit) {
		return nil, false
	}
	return o.EnrichmentAmountLimit, true
}

// HasEnrichmentAmountLimit returns a boolean if a field has been set.
func (o *CompanyEnrichmentSettings) HasEnrichmentAmountLimit() bool {
	if o != nil && !IsNil(o.EnrichmentAmountLimit) {
		return true
	}

	return false
}

// SetEnrichmentAmountLimit gets a reference to the given int64 and assigns it to the EnrichmentAmountLimit field.
func (o *CompanyEnrichmentSettings) SetEnrichmentAmountLimit(v int64) {
	o.EnrichmentAmountLimit = &v
}

// GetEnrichmentsInUse returns the EnrichmentsInUse field value if set, zero value otherwise.
func (o *CompanyEnrichmentSettings) GetEnrichmentsInUse() int64 {
	if o == nil || IsNil(o.EnrichmentsInUse) {
		var ret int64
		return ret
	}
	return *o.EnrichmentsInUse
}

// GetEnrichmentsInUseOk returns a tuple with the EnrichmentsInUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyEnrichmentSettings) GetEnrichmentsInUseOk() (*int64, bool) {
	if o == nil || IsNil(o.EnrichmentsInUse) {
		return nil, false
	}
	return o.EnrichmentsInUse, true
}

// HasEnrichmentsInUse returns a boolean if a field has been set.
func (o *CompanyEnrichmentSettings) HasEnrichmentsInUse() bool {
	if o != nil && !IsNil(o.EnrichmentsInUse) {
		return true
	}

	return false
}

// SetEnrichmentsInUse gets a reference to the given int64 and assigns it to the EnrichmentsInUse field.
func (o *CompanyEnrichmentSettings) SetEnrichmentsInUse(v int64) {
	o.EnrichmentsInUse = &v
}

// GetQueryOnlyRowLimit returns the QueryOnlyRowLimit field value if set, zero value otherwise.
func (o *CompanyEnrichmentSettings) GetQueryOnlyRowLimit() int64 {
	if o == nil || IsNil(o.QueryOnlyRowLimit) {
		var ret int64
		return ret
	}
	return *o.QueryOnlyRowLimit
}

// GetQueryOnlyRowLimitOk returns a tuple with the QueryOnlyRowLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyEnrichmentSettings) GetQueryOnlyRowLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.QueryOnlyRowLimit) {
		return nil, false
	}
	return o.QueryOnlyRowLimit, true
}

// HasQueryOnlyRowLimit returns a boolean if a field has been set.
func (o *CompanyEnrichmentSettings) HasQueryOnlyRowLimit() bool {
	if o != nil && !IsNil(o.QueryOnlyRowLimit) {
		return true
	}

	return false
}

// SetQueryOnlyRowLimit gets a reference to the given int64 and assigns it to the QueryOnlyRowLimit field.
func (o *CompanyEnrichmentSettings) SetQueryOnlyRowLimit(v int64) {
	o.QueryOnlyRowLimit = &v
}

// GetQueryOnlySizeLimitBytes returns the QueryOnlySizeLimitBytes field value if set, zero value otherwise.
func (o *CompanyEnrichmentSettings) GetQueryOnlySizeLimitBytes() string {
	if o == nil || IsNil(o.QueryOnlySizeLimitBytes) {
		var ret string
		return ret
	}
	return *o.QueryOnlySizeLimitBytes
}

// GetQueryOnlySizeLimitBytesOk returns a tuple with the QueryOnlySizeLimitBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyEnrichmentSettings) GetQueryOnlySizeLimitBytesOk() (*string, bool) {
	if o == nil || IsNil(o.QueryOnlySizeLimitBytes) {
		return nil, false
	}
	return o.QueryOnlySizeLimitBytes, true
}

// HasQueryOnlySizeLimitBytes returns a boolean if a field has been set.
func (o *CompanyEnrichmentSettings) HasQueryOnlySizeLimitBytes() bool {
	if o != nil && !IsNil(o.QueryOnlySizeLimitBytes) {
		return true
	}

	return false
}

// SetQueryOnlySizeLimitBytes gets a reference to the given string and assigns it to the QueryOnlySizeLimitBytes field.
func (o *CompanyEnrichmentSettings) SetQueryOnlySizeLimitBytes(v string) {
	o.QueryOnlySizeLimitBytes = &v
}

// GetRowLimit returns the RowLimit field value if set, zero value otherwise.
func (o *CompanyEnrichmentSettings) GetRowLimit() int64 {
	if o == nil || IsNil(o.RowLimit) {
		var ret int64
		return ret
	}
	return *o.RowLimit
}

// GetRowLimitOk returns a tuple with the RowLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyEnrichmentSettings) GetRowLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.RowLimit) {
		return nil, false
	}
	return o.RowLimit, true
}

// HasRowLimit returns a boolean if a field has been set.
func (o *CompanyEnrichmentSettings) HasRowLimit() bool {
	if o != nil && !IsNil(o.RowLimit) {
		return true
	}

	return false
}

// SetRowLimit gets a reference to the given int64 and assigns it to the RowLimit field.
func (o *CompanyEnrichmentSettings) SetRowLimit(v int64) {
	o.RowLimit = &v
}

// GetSizeLimitBytes returns the SizeLimitBytes field value if set, zero value otherwise.
func (o *CompanyEnrichmentSettings) GetSizeLimitBytes() string {
	if o == nil || IsNil(o.SizeLimitBytes) {
		var ret string
		return ret
	}
	return *o.SizeLimitBytes
}

// GetSizeLimitBytesOk returns a tuple with the SizeLimitBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyEnrichmentSettings) GetSizeLimitBytesOk() (*string, bool) {
	if o == nil || IsNil(o.SizeLimitBytes) {
		return nil, false
	}
	return o.SizeLimitBytes, true
}

// HasSizeLimitBytes returns a boolean if a field has been set.
func (o *CompanyEnrichmentSettings) HasSizeLimitBytes() bool {
	if o != nil && !IsNil(o.SizeLimitBytes) {
		return true
	}

	return false
}

// SetSizeLimitBytes gets a reference to the given string and assigns it to the SizeLimitBytes field.
func (o *CompanyEnrichmentSettings) SetSizeLimitBytes(v string) {
	o.SizeLimitBytes = &v
}

func (o CompanyEnrichmentSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyEnrichmentSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnrichmentAmountLimit) {
		toSerialize["enrichmentAmountLimit"] = o.EnrichmentAmountLimit
	}
	if !IsNil(o.EnrichmentsInUse) {
		toSerialize["enrichmentsInUse"] = o.EnrichmentsInUse
	}
	if !IsNil(o.QueryOnlyRowLimit) {
		toSerialize["queryOnlyRowLimit"] = o.QueryOnlyRowLimit
	}
	if !IsNil(o.QueryOnlySizeLimitBytes) {
		toSerialize["queryOnlySizeLimitBytes"] = o.QueryOnlySizeLimitBytes
	}
	if !IsNil(o.RowLimit) {
		toSerialize["rowLimit"] = o.RowLimit
	}
	if !IsNil(o.SizeLimitBytes) {
		toSerialize["sizeLimitBytes"] = o.SizeLimitBytes
	}
	return toSerialize, nil
}

type NullableCompanyEnrichmentSettings struct {
	value *CompanyEnrichmentSettings
	isSet bool
}

func (v NullableCompanyEnrichmentSettings) Get() *CompanyEnrichmentSettings {
	return v.value
}

func (v *NullableCompanyEnrichmentSettings) Set(val *CompanyEnrichmentSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyEnrichmentSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyEnrichmentSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyEnrichmentSettings(val *CompanyEnrichmentSettings) *NullableCompanyEnrichmentSettings {
	return &NullableCompanyEnrichmentSettings{value: val, isSet: true}
}

func (v NullableCompanyEnrichmentSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyEnrichmentSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


