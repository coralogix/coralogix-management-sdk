/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enrichments_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RemoveEnrichmentsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoveEnrichmentsResponse{}

// RemoveEnrichmentsResponse Response data structure for enrichments deletion
type RemoveEnrichmentsResponse struct {
	RemainingEnrichments []Enrichment `json:"remainingEnrichments"`
}

type _RemoveEnrichmentsResponse RemoveEnrichmentsResponse

// NewRemoveEnrichmentsResponse instantiates a new RemoveEnrichmentsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoveEnrichmentsResponse(remainingEnrichments []Enrichment) *RemoveEnrichmentsResponse {
	this := RemoveEnrichmentsResponse{}
	this.RemainingEnrichments = remainingEnrichments
	return &this
}

// NewRemoveEnrichmentsResponseWithDefaults instantiates a new RemoveEnrichmentsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoveEnrichmentsResponseWithDefaults() *RemoveEnrichmentsResponse {
	this := RemoveEnrichmentsResponse{}
	return &this
}

// GetRemainingEnrichments returns the RemainingEnrichments field value
func (o *RemoveEnrichmentsResponse) GetRemainingEnrichments() []Enrichment {
	if o == nil {
		var ret []Enrichment
		return ret
	}

	return o.RemainingEnrichments
}

// GetRemainingEnrichmentsOk returns a tuple with the RemainingEnrichments field value
// and a boolean to check if the value has been set.
func (o *RemoveEnrichmentsResponse) GetRemainingEnrichmentsOk() ([]Enrichment, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemainingEnrichments, true
}

// SetRemainingEnrichments sets field value
func (o *RemoveEnrichmentsResponse) SetRemainingEnrichments(v []Enrichment) {
	o.RemainingEnrichments = v
}

func (o RemoveEnrichmentsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoveEnrichmentsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["remainingEnrichments"] = o.RemainingEnrichments
	return toSerialize, nil
}

func (o *RemoveEnrichmentsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"remainingEnrichments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRemoveEnrichmentsResponse := _RemoveEnrichmentsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRemoveEnrichmentsResponse)

	if err != nil {
		return err
	}

	*o = RemoveEnrichmentsResponse(varRemoveEnrichmentsResponse)

	return err
}

type NullableRemoveEnrichmentsResponse struct {
	value *RemoveEnrichmentsResponse
	isSet bool
}

func (v NullableRemoveEnrichmentsResponse) Get() *RemoveEnrichmentsResponse {
	return v.value
}

func (v *NullableRemoveEnrichmentsResponse) Set(val *RemoveEnrichmentsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoveEnrichmentsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoveEnrichmentsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoveEnrichmentsResponse(val *RemoveEnrichmentsResponse) *NullableRemoveEnrichmentsResponse {
	return &NullableRemoveEnrichmentsResponse{value: val, isSet: true}
}

func (v NullableRemoveEnrichmentsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoveEnrichmentsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


