/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enrichments_service

import (
	"encoding/json"
)

// checks if the GeoIpType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeoIpType{}

// GeoIpType struct for GeoIpType
type GeoIpType struct {
	WithAsn *bool `json:"withAsn,omitempty"`
}

// NewGeoIpType instantiates a new GeoIpType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoIpType() *GeoIpType {
	this := GeoIpType{}
	return &this
}

// NewGeoIpTypeWithDefaults instantiates a new GeoIpType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoIpTypeWithDefaults() *GeoIpType {
	this := GeoIpType{}
	return &this
}

// GetWithAsn returns the WithAsn field value if set, zero value otherwise.
func (o *GeoIpType) GetWithAsn() bool {
	if o == nil || IsNil(o.WithAsn) {
		var ret bool
		return ret
	}
	return *o.WithAsn
}

// GetWithAsnOk returns a tuple with the WithAsn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoIpType) GetWithAsnOk() (*bool, bool) {
	if o == nil || IsNil(o.WithAsn) {
		return nil, false
	}
	return o.WithAsn, true
}

// HasWithAsn returns a boolean if a field has been set.
func (o *GeoIpType) HasWithAsn() bool {
	if o != nil && !IsNil(o.WithAsn) {
		return true
	}

	return false
}

// SetWithAsn gets a reference to the given bool and assigns it to the WithAsn field.
func (o *GeoIpType) SetWithAsn(v bool) {
	o.WithAsn = &v
}

func (o GeoIpType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeoIpType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.WithAsn) {
		toSerialize["withAsn"] = o.WithAsn
	}
	return toSerialize, nil
}

type NullableGeoIpType struct {
	value *GeoIpType
	isSet bool
}

func (v NullableGeoIpType) Get() *GeoIpType {
	return v.value
}

func (v *NullableGeoIpType) Set(val *GeoIpType) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoIpType) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoIpType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoIpType(val *GeoIpType) *NullableGeoIpType {
	return &NullableGeoIpType{value: val, isSet: true}
}

func (v NullableGeoIpType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoIpType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


