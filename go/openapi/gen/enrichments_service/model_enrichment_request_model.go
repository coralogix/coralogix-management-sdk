/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enrichments_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EnrichmentRequestModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnrichmentRequestModel{}

// EnrichmentRequestModel The enrichment request model
type EnrichmentRequestModel struct {
	EnrichedFieldName *string `json:"enrichedFieldName,omitempty"`
	EnrichmentType EnrichmentType `json:"enrichmentType"`
	FieldName string `json:"fieldName"`
	SelectedColumns []string `json:"selectedColumns,omitempty"`
}

type _EnrichmentRequestModel EnrichmentRequestModel

// NewEnrichmentRequestModel instantiates a new EnrichmentRequestModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnrichmentRequestModel(enrichmentType EnrichmentType, fieldName string) *EnrichmentRequestModel {
	this := EnrichmentRequestModel{}
	this.EnrichmentType = enrichmentType
	this.FieldName = fieldName
	return &this
}

// NewEnrichmentRequestModelWithDefaults instantiates a new EnrichmentRequestModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnrichmentRequestModelWithDefaults() *EnrichmentRequestModel {
	this := EnrichmentRequestModel{}
	return &this
}

// GetEnrichedFieldName returns the EnrichedFieldName field value if set, zero value otherwise.
func (o *EnrichmentRequestModel) GetEnrichedFieldName() string {
	if o == nil || IsNil(o.EnrichedFieldName) {
		var ret string
		return ret
	}
	return *o.EnrichedFieldName
}

// GetEnrichedFieldNameOk returns a tuple with the EnrichedFieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrichmentRequestModel) GetEnrichedFieldNameOk() (*string, bool) {
	if o == nil || IsNil(o.EnrichedFieldName) {
		return nil, false
	}
	return o.EnrichedFieldName, true
}

// HasEnrichedFieldName returns a boolean if a field has been set.
func (o *EnrichmentRequestModel) HasEnrichedFieldName() bool {
	if o != nil && !IsNil(o.EnrichedFieldName) {
		return true
	}

	return false
}

// SetEnrichedFieldName gets a reference to the given string and assigns it to the EnrichedFieldName field.
func (o *EnrichmentRequestModel) SetEnrichedFieldName(v string) {
	o.EnrichedFieldName = &v
}

// GetEnrichmentType returns the EnrichmentType field value
func (o *EnrichmentRequestModel) GetEnrichmentType() EnrichmentType {
	if o == nil {
		var ret EnrichmentType
		return ret
	}

	return o.EnrichmentType
}

// GetEnrichmentTypeOk returns a tuple with the EnrichmentType field value
// and a boolean to check if the value has been set.
func (o *EnrichmentRequestModel) GetEnrichmentTypeOk() (*EnrichmentType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnrichmentType, true
}

// SetEnrichmentType sets field value
func (o *EnrichmentRequestModel) SetEnrichmentType(v EnrichmentType) {
	o.EnrichmentType = v
}

// GetFieldName returns the FieldName field value
func (o *EnrichmentRequestModel) GetFieldName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value
// and a boolean to check if the value has been set.
func (o *EnrichmentRequestModel) GetFieldNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldName, true
}

// SetFieldName sets field value
func (o *EnrichmentRequestModel) SetFieldName(v string) {
	o.FieldName = v
}

// GetSelectedColumns returns the SelectedColumns field value if set, zero value otherwise.
func (o *EnrichmentRequestModel) GetSelectedColumns() []string {
	if o == nil || IsNil(o.SelectedColumns) {
		var ret []string
		return ret
	}
	return o.SelectedColumns
}

// GetSelectedColumnsOk returns a tuple with the SelectedColumns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrichmentRequestModel) GetSelectedColumnsOk() ([]string, bool) {
	if o == nil || IsNil(o.SelectedColumns) {
		return nil, false
	}
	return o.SelectedColumns, true
}

// HasSelectedColumns returns a boolean if a field has been set.
func (o *EnrichmentRequestModel) HasSelectedColumns() bool {
	if o != nil && !IsNil(o.SelectedColumns) {
		return true
	}

	return false
}

// SetSelectedColumns gets a reference to the given []string and assigns it to the SelectedColumns field.
func (o *EnrichmentRequestModel) SetSelectedColumns(v []string) {
	o.SelectedColumns = v
}

func (o EnrichmentRequestModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnrichmentRequestModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnrichedFieldName) {
		toSerialize["enrichedFieldName"] = o.EnrichedFieldName
	}
	toSerialize["enrichmentType"] = o.EnrichmentType
	toSerialize["fieldName"] = o.FieldName
	if !IsNil(o.SelectedColumns) {
		toSerialize["selectedColumns"] = o.SelectedColumns
	}
	return toSerialize, nil
}

func (o *EnrichmentRequestModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enrichmentType",
		"fieldName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnrichmentRequestModel := _EnrichmentRequestModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEnrichmentRequestModel)

	if err != nil {
		return err
	}

	*o = EnrichmentRequestModel(varEnrichmentRequestModel)

	return err
}

type NullableEnrichmentRequestModel struct {
	value *EnrichmentRequestModel
	isSet bool
}

func (v NullableEnrichmentRequestModel) Get() *EnrichmentRequestModel {
	return v.value
}

func (v *NullableEnrichmentRequestModel) Set(val *EnrichmentRequestModel) {
	v.value = val
	v.isSet = true
}

func (v NullableEnrichmentRequestModel) IsSet() bool {
	return v.isSet
}

func (v *NullableEnrichmentRequestModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnrichmentRequestModel(val *EnrichmentRequestModel) *NullableEnrichmentRequestModel {
	return &NullableEnrichmentRequestModel{value: val, isSet: true}
}

func (v NullableEnrichmentRequestModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnrichmentRequestModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


