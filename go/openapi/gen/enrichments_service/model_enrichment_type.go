/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enrichments_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// EnrichmentType - struct for EnrichmentType
type EnrichmentType struct {
	EnrichmentTypeAws *EnrichmentTypeAws
	EnrichmentTypeCustomEnrichment *EnrichmentTypeCustomEnrichment
	EnrichmentTypeGeoIp *EnrichmentTypeGeoIp
	EnrichmentTypeSuspiciousIp *EnrichmentTypeSuspiciousIp
}

// EnrichmentTypeAwsAsEnrichmentType is a convenience function that returns EnrichmentTypeAws wrapped in EnrichmentType
func EnrichmentTypeAwsAsEnrichmentType(v *EnrichmentTypeAws) EnrichmentType {
	return EnrichmentType{
		EnrichmentTypeAws: v,
	}
}

// EnrichmentTypeCustomEnrichmentAsEnrichmentType is a convenience function that returns EnrichmentTypeCustomEnrichment wrapped in EnrichmentType
func EnrichmentTypeCustomEnrichmentAsEnrichmentType(v *EnrichmentTypeCustomEnrichment) EnrichmentType {
	return EnrichmentType{
		EnrichmentTypeCustomEnrichment: v,
	}
}

// EnrichmentTypeGeoIpAsEnrichmentType is a convenience function that returns EnrichmentTypeGeoIp wrapped in EnrichmentType
func EnrichmentTypeGeoIpAsEnrichmentType(v *EnrichmentTypeGeoIp) EnrichmentType {
	return EnrichmentType{
		EnrichmentTypeGeoIp: v,
	}
}

// EnrichmentTypeSuspiciousIpAsEnrichmentType is a convenience function that returns EnrichmentTypeSuspiciousIp wrapped in EnrichmentType
func EnrichmentTypeSuspiciousIpAsEnrichmentType(v *EnrichmentTypeSuspiciousIp) EnrichmentType {
	return EnrichmentType{
		EnrichmentTypeSuspiciousIp: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EnrichmentType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EnrichmentTypeAws
	err = newStrictDecoder(data).Decode(&dst.EnrichmentTypeAws)
	if err == nil {
		jsonEnrichmentTypeAws, _ := json.Marshal(dst.EnrichmentTypeAws)
		if string(jsonEnrichmentTypeAws) == "{}" { // empty struct
			dst.EnrichmentTypeAws = nil
		} else {
			if err = validator.Validate(dst.EnrichmentTypeAws); err != nil {
				dst.EnrichmentTypeAws = nil
			} else {
				match++
			}
		}
	} else {
		dst.EnrichmentTypeAws = nil
	}

	// try to unmarshal data into EnrichmentTypeCustomEnrichment
	err = newStrictDecoder(data).Decode(&dst.EnrichmentTypeCustomEnrichment)
	if err == nil {
		jsonEnrichmentTypeCustomEnrichment, _ := json.Marshal(dst.EnrichmentTypeCustomEnrichment)
		if string(jsonEnrichmentTypeCustomEnrichment) == "{}" { // empty struct
			dst.EnrichmentTypeCustomEnrichment = nil
		} else {
			if err = validator.Validate(dst.EnrichmentTypeCustomEnrichment); err != nil {
				dst.EnrichmentTypeCustomEnrichment = nil
			} else {
				match++
			}
		}
	} else {
		dst.EnrichmentTypeCustomEnrichment = nil
	}

	// try to unmarshal data into EnrichmentTypeGeoIp
	err = newStrictDecoder(data).Decode(&dst.EnrichmentTypeGeoIp)
	if err == nil {
		jsonEnrichmentTypeGeoIp, _ := json.Marshal(dst.EnrichmentTypeGeoIp)
		if string(jsonEnrichmentTypeGeoIp) == "{}" { // empty struct
			dst.EnrichmentTypeGeoIp = nil
		} else {
			if err = validator.Validate(dst.EnrichmentTypeGeoIp); err != nil {
				dst.EnrichmentTypeGeoIp = nil
			} else {
				match++
			}
		}
	} else {
		dst.EnrichmentTypeGeoIp = nil
	}

	// try to unmarshal data into EnrichmentTypeSuspiciousIp
	err = newStrictDecoder(data).Decode(&dst.EnrichmentTypeSuspiciousIp)
	if err == nil {
		jsonEnrichmentTypeSuspiciousIp, _ := json.Marshal(dst.EnrichmentTypeSuspiciousIp)
		if string(jsonEnrichmentTypeSuspiciousIp) == "{}" { // empty struct
			dst.EnrichmentTypeSuspiciousIp = nil
		} else {
			if err = validator.Validate(dst.EnrichmentTypeSuspiciousIp); err != nil {
				dst.EnrichmentTypeSuspiciousIp = nil
			} else {
				match++
			}
		}
	} else {
		dst.EnrichmentTypeSuspiciousIp = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EnrichmentTypeAws = nil
		dst.EnrichmentTypeCustomEnrichment = nil
		dst.EnrichmentTypeGeoIp = nil
		dst.EnrichmentTypeSuspiciousIp = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EnrichmentType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EnrichmentType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EnrichmentType) MarshalJSON() ([]byte, error) {
	if src.EnrichmentTypeAws != nil {
		return json.Marshal(&src.EnrichmentTypeAws)
	}

	if src.EnrichmentTypeCustomEnrichment != nil {
		return json.Marshal(&src.EnrichmentTypeCustomEnrichment)
	}

	if src.EnrichmentTypeGeoIp != nil {
		return json.Marshal(&src.EnrichmentTypeGeoIp)
	}

	if src.EnrichmentTypeSuspiciousIp != nil {
		return json.Marshal(&src.EnrichmentTypeSuspiciousIp)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EnrichmentType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EnrichmentTypeAws != nil {
		return obj.EnrichmentTypeAws
	}

	if obj.EnrichmentTypeCustomEnrichment != nil {
		return obj.EnrichmentTypeCustomEnrichment
	}

	if obj.EnrichmentTypeGeoIp != nil {
		return obj.EnrichmentTypeGeoIp
	}

	if obj.EnrichmentTypeSuspiciousIp != nil {
		return obj.EnrichmentTypeSuspiciousIp
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj EnrichmentType) GetActualInstanceValue() (interface{}) {
	if obj.EnrichmentTypeAws != nil {
		return *obj.EnrichmentTypeAws
	}

	if obj.EnrichmentTypeCustomEnrichment != nil {
		return *obj.EnrichmentTypeCustomEnrichment
	}

	if obj.EnrichmentTypeGeoIp != nil {
		return *obj.EnrichmentTypeGeoIp
	}

	if obj.EnrichmentTypeSuspiciousIp != nil {
		return *obj.EnrichmentTypeSuspiciousIp
	}

	// all schemas are nil
	return nil
}

type NullableEnrichmentType struct {
	value *EnrichmentType
	isSet bool
}

func (v NullableEnrichmentType) Get() *EnrichmentType {
	return v.value
}

func (v *NullableEnrichmentType) Set(val *EnrichmentType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnrichmentType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnrichmentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnrichmentType(val *EnrichmentType) *NullableEnrichmentType {
	return &NullableEnrichmentType{value: val, isSet: true}
}

func (v NullableEnrichmentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnrichmentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


