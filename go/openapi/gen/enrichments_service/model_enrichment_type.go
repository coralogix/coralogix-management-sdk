/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enrichments_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// EnrichmentType - struct for EnrichmentType
type EnrichmentType struct {
	EnrichmentTypeOneOf *EnrichmentTypeOneOf
	EnrichmentTypeOneOf1 *EnrichmentTypeOneOf1
	EnrichmentTypeOneOf2 *EnrichmentTypeOneOf2
	EnrichmentTypeOneOf3 *EnrichmentTypeOneOf3
}

// EnrichmentTypeOneOfAsEnrichmentType is a convenience function that returns EnrichmentTypeOneOf wrapped in EnrichmentType
func EnrichmentTypeOneOfAsEnrichmentType(v *EnrichmentTypeOneOf) EnrichmentType {
	return EnrichmentType{
		EnrichmentTypeOneOf: v,
	}
}

// EnrichmentTypeOneOf1AsEnrichmentType is a convenience function that returns EnrichmentTypeOneOf1 wrapped in EnrichmentType
func EnrichmentTypeOneOf1AsEnrichmentType(v *EnrichmentTypeOneOf1) EnrichmentType {
	return EnrichmentType{
		EnrichmentTypeOneOf1: v,
	}
}

// EnrichmentTypeOneOf2AsEnrichmentType is a convenience function that returns EnrichmentTypeOneOf2 wrapped in EnrichmentType
func EnrichmentTypeOneOf2AsEnrichmentType(v *EnrichmentTypeOneOf2) EnrichmentType {
	return EnrichmentType{
		EnrichmentTypeOneOf2: v,
	}
}

// EnrichmentTypeOneOf3AsEnrichmentType is a convenience function that returns EnrichmentTypeOneOf3 wrapped in EnrichmentType
func EnrichmentTypeOneOf3AsEnrichmentType(v *EnrichmentTypeOneOf3) EnrichmentType {
	return EnrichmentType{
		EnrichmentTypeOneOf3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EnrichmentType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EnrichmentTypeOneOf
	err = newStrictDecoder(data).Decode(&dst.EnrichmentTypeOneOf)
	if err == nil {
		jsonEnrichmentTypeOneOf, _ := json.Marshal(dst.EnrichmentTypeOneOf)
		if string(jsonEnrichmentTypeOneOf) == "{}" { // empty struct
			dst.EnrichmentTypeOneOf = nil
		} else {
			if err = validator.Validate(dst.EnrichmentTypeOneOf); err != nil {
				dst.EnrichmentTypeOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.EnrichmentTypeOneOf = nil
	}

	// try to unmarshal data into EnrichmentTypeOneOf1
	err = newStrictDecoder(data).Decode(&dst.EnrichmentTypeOneOf1)
	if err == nil {
		jsonEnrichmentTypeOneOf1, _ := json.Marshal(dst.EnrichmentTypeOneOf1)
		if string(jsonEnrichmentTypeOneOf1) == "{}" { // empty struct
			dst.EnrichmentTypeOneOf1 = nil
		} else {
			if err = validator.Validate(dst.EnrichmentTypeOneOf1); err != nil {
				dst.EnrichmentTypeOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.EnrichmentTypeOneOf1 = nil
	}

	// try to unmarshal data into EnrichmentTypeOneOf2
	err = newStrictDecoder(data).Decode(&dst.EnrichmentTypeOneOf2)
	if err == nil {
		jsonEnrichmentTypeOneOf2, _ := json.Marshal(dst.EnrichmentTypeOneOf2)
		if string(jsonEnrichmentTypeOneOf2) == "{}" { // empty struct
			dst.EnrichmentTypeOneOf2 = nil
		} else {
			if err = validator.Validate(dst.EnrichmentTypeOneOf2); err != nil {
				dst.EnrichmentTypeOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.EnrichmentTypeOneOf2 = nil
	}

	// try to unmarshal data into EnrichmentTypeOneOf3
	err = newStrictDecoder(data).Decode(&dst.EnrichmentTypeOneOf3)
	if err == nil {
		jsonEnrichmentTypeOneOf3, _ := json.Marshal(dst.EnrichmentTypeOneOf3)
		if string(jsonEnrichmentTypeOneOf3) == "{}" { // empty struct
			dst.EnrichmentTypeOneOf3 = nil
		} else {
			if err = validator.Validate(dst.EnrichmentTypeOneOf3); err != nil {
				dst.EnrichmentTypeOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.EnrichmentTypeOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EnrichmentTypeOneOf = nil
		dst.EnrichmentTypeOneOf1 = nil
		dst.EnrichmentTypeOneOf2 = nil
		dst.EnrichmentTypeOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EnrichmentType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EnrichmentType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EnrichmentType) MarshalJSON() ([]byte, error) {
	if src.EnrichmentTypeOneOf != nil {
		return json.Marshal(&src.EnrichmentTypeOneOf)
	}

	if src.EnrichmentTypeOneOf1 != nil {
		return json.Marshal(&src.EnrichmentTypeOneOf1)
	}

	if src.EnrichmentTypeOneOf2 != nil {
		return json.Marshal(&src.EnrichmentTypeOneOf2)
	}

	if src.EnrichmentTypeOneOf3 != nil {
		return json.Marshal(&src.EnrichmentTypeOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EnrichmentType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EnrichmentTypeOneOf != nil {
		return obj.EnrichmentTypeOneOf
	}

	if obj.EnrichmentTypeOneOf1 != nil {
		return obj.EnrichmentTypeOneOf1
	}

	if obj.EnrichmentTypeOneOf2 != nil {
		return obj.EnrichmentTypeOneOf2
	}

	if obj.EnrichmentTypeOneOf3 != nil {
		return obj.EnrichmentTypeOneOf3
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj EnrichmentType) GetActualInstanceValue() (interface{}) {
	if obj.EnrichmentTypeOneOf != nil {
		return *obj.EnrichmentTypeOneOf
	}

	if obj.EnrichmentTypeOneOf1 != nil {
		return *obj.EnrichmentTypeOneOf1
	}

	if obj.EnrichmentTypeOneOf2 != nil {
		return *obj.EnrichmentTypeOneOf2
	}

	if obj.EnrichmentTypeOneOf3 != nil {
		return *obj.EnrichmentTypeOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableEnrichmentType struct {
	value *EnrichmentType
	isSet bool
}

func (v NullableEnrichmentType) Get() *EnrichmentType {
	return v.value
}

func (v *NullableEnrichmentType) Set(val *EnrichmentType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnrichmentType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnrichmentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnrichmentType(val *EnrichmentType) *NullableEnrichmentType {
	return &NullableEnrichmentType{value: val, isSet: true}
}

func (v NullableEnrichmentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnrichmentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


