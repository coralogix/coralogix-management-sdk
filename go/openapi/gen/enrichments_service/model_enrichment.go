/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enrichments_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Enrichment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Enrichment{}

// Enrichment This data structure represents an enrichment
type Enrichment struct {
	EnrichedFieldName *string `json:"enrichedFieldName,omitempty"`
	EnrichmentType EnrichmentType `json:"enrichmentType"`
	FieldName string `json:"fieldName"`
	Id int64 `json:"id"`
	SelectedColumns []string `json:"selectedColumns,omitempty"`
}

type _Enrichment Enrichment

// NewEnrichment instantiates a new Enrichment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnrichment(enrichmentType EnrichmentType, fieldName string, id int64) *Enrichment {
	this := Enrichment{}
	this.EnrichmentType = enrichmentType
	this.FieldName = fieldName
	this.Id = id
	return &this
}

// NewEnrichmentWithDefaults instantiates a new Enrichment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnrichmentWithDefaults() *Enrichment {
	this := Enrichment{}
	return &this
}

// GetEnrichedFieldName returns the EnrichedFieldName field value if set, zero value otherwise.
func (o *Enrichment) GetEnrichedFieldName() string {
	if o == nil || IsNil(o.EnrichedFieldName) {
		var ret string
		return ret
	}
	return *o.EnrichedFieldName
}

// GetEnrichedFieldNameOk returns a tuple with the EnrichedFieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrichment) GetEnrichedFieldNameOk() (*string, bool) {
	if o == nil || IsNil(o.EnrichedFieldName) {
		return nil, false
	}
	return o.EnrichedFieldName, true
}

// HasEnrichedFieldName returns a boolean if a field has been set.
func (o *Enrichment) HasEnrichedFieldName() bool {
	if o != nil && !IsNil(o.EnrichedFieldName) {
		return true
	}

	return false
}

// SetEnrichedFieldName gets a reference to the given string and assigns it to the EnrichedFieldName field.
func (o *Enrichment) SetEnrichedFieldName(v string) {
	o.EnrichedFieldName = &v
}

// GetEnrichmentType returns the EnrichmentType field value
func (o *Enrichment) GetEnrichmentType() EnrichmentType {
	if o == nil {
		var ret EnrichmentType
		return ret
	}

	return o.EnrichmentType
}

// GetEnrichmentTypeOk returns a tuple with the EnrichmentType field value
// and a boolean to check if the value has been set.
func (o *Enrichment) GetEnrichmentTypeOk() (*EnrichmentType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnrichmentType, true
}

// SetEnrichmentType sets field value
func (o *Enrichment) SetEnrichmentType(v EnrichmentType) {
	o.EnrichmentType = v
}

// GetFieldName returns the FieldName field value
func (o *Enrichment) GetFieldName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value
// and a boolean to check if the value has been set.
func (o *Enrichment) GetFieldNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldName, true
}

// SetFieldName sets field value
func (o *Enrichment) SetFieldName(v string) {
	o.FieldName = v
}

// GetId returns the Id field value
func (o *Enrichment) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Enrichment) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Enrichment) SetId(v int64) {
	o.Id = v
}

// GetSelectedColumns returns the SelectedColumns field value if set, zero value otherwise.
func (o *Enrichment) GetSelectedColumns() []string {
	if o == nil || IsNil(o.SelectedColumns) {
		var ret []string
		return ret
	}
	return o.SelectedColumns
}

// GetSelectedColumnsOk returns a tuple with the SelectedColumns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrichment) GetSelectedColumnsOk() ([]string, bool) {
	if o == nil || IsNil(o.SelectedColumns) {
		return nil, false
	}
	return o.SelectedColumns, true
}

// HasSelectedColumns returns a boolean if a field has been set.
func (o *Enrichment) HasSelectedColumns() bool {
	if o != nil && !IsNil(o.SelectedColumns) {
		return true
	}

	return false
}

// SetSelectedColumns gets a reference to the given []string and assigns it to the SelectedColumns field.
func (o *Enrichment) SetSelectedColumns(v []string) {
	o.SelectedColumns = v
}

func (o Enrichment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Enrichment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnrichedFieldName) {
		toSerialize["enrichedFieldName"] = o.EnrichedFieldName
	}
	toSerialize["enrichmentType"] = o.EnrichmentType
	toSerialize["fieldName"] = o.FieldName
	toSerialize["id"] = o.Id
	if !IsNil(o.SelectedColumns) {
		toSerialize["selectedColumns"] = o.SelectedColumns
	}
	return toSerialize, nil
}

func (o *Enrichment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enrichmentType",
		"fieldName",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnrichment := _Enrichment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEnrichment)

	if err != nil {
		return err
	}

	*o = Enrichment(varEnrichment)

	return err
}

type NullableEnrichment struct {
	value *Enrichment
	isSet bool
}

func (v NullableEnrichment) Get() *Enrichment {
	return v.value
}

func (v *NullableEnrichment) Set(val *Enrichment) {
	v.value = val
	v.isSet = true
}

func (v NullableEnrichment) IsSet() bool {
	return v.isSet
}

func (v *NullableEnrichment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnrichment(val *Enrichment) *NullableEnrichment {
	return &NullableEnrichment{value: val, isSet: true}
}

func (v NullableEnrichment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnrichment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


