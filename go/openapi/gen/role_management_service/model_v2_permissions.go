/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package role_management_service

import (
	"encoding/json"
)

// checks if the V2Permissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V2Permissions{}

// V2Permissions struct for V2Permissions
type V2Permissions struct {
	Permissions []string `json:"permissions,omitempty"`
}

// NewV2Permissions instantiates a new V2Permissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2Permissions() *V2Permissions {
	this := V2Permissions{}
	return &this
}

// NewV2PermissionsWithDefaults instantiates a new V2Permissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2PermissionsWithDefaults() *V2Permissions {
	this := V2Permissions{}
	return &this
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *V2Permissions) GetPermissions() []string {
	if o == nil || IsNil(o.Permissions) {
		var ret []string
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2Permissions) GetPermissionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *V2Permissions) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []string and assigns it to the Permissions field.
func (o *V2Permissions) SetPermissions(v []string) {
	o.Permissions = v
}

func (o V2Permissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V2Permissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	return toSerialize, nil
}

type NullableV2Permissions struct {
	value *V2Permissions
	isSet bool
}

func (v NullableV2Permissions) Get() *V2Permissions {
	return v.value
}

func (v *NullableV2Permissions) Set(val *V2Permissions) {
	v.value = val
	v.isSet = true
}

func (v NullableV2Permissions) IsSet() bool {
	return v.isSet
}

func (v *NullableV2Permissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2Permissions(val *V2Permissions) *NullableV2Permissions {
	return &NullableV2Permissions{value: val, isSet: true}
}

func (v NullableV2Permissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2Permissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


