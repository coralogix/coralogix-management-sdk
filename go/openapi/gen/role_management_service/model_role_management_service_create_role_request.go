/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package role_management_service

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// RoleManagementServiceCreateRoleRequest - struct for RoleManagementServiceCreateRoleRequest
type RoleManagementServiceCreateRoleRequest struct {
	CreateRoleRequestParentRoleId *CreateRoleRequestParentRoleId
	CreateRoleRequestParentRoleName *CreateRoleRequestParentRoleName
}

// CreateRoleRequestParentRoleIdAsRoleManagementServiceCreateRoleRequest is a convenience function that returns CreateRoleRequestParentRoleId wrapped in RoleManagementServiceCreateRoleRequest
func CreateRoleRequestParentRoleIdAsRoleManagementServiceCreateRoleRequest(v *CreateRoleRequestParentRoleId) RoleManagementServiceCreateRoleRequest {
	return RoleManagementServiceCreateRoleRequest{
		CreateRoleRequestParentRoleId: v,
	}
}

// CreateRoleRequestParentRoleNameAsRoleManagementServiceCreateRoleRequest is a convenience function that returns CreateRoleRequestParentRoleName wrapped in RoleManagementServiceCreateRoleRequest
func CreateRoleRequestParentRoleNameAsRoleManagementServiceCreateRoleRequest(v *CreateRoleRequestParentRoleName) RoleManagementServiceCreateRoleRequest {
	return RoleManagementServiceCreateRoleRequest{
		CreateRoleRequestParentRoleName: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RoleManagementServiceCreateRoleRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateRoleRequestParentRoleId
	err = newStrictDecoder(data).Decode(&dst.CreateRoleRequestParentRoleId)
	if err == nil {
		jsonCreateRoleRequestParentRoleId, _ := json.Marshal(dst.CreateRoleRequestParentRoleId)
		if string(jsonCreateRoleRequestParentRoleId) == "{}" { // empty struct
			dst.CreateRoleRequestParentRoleId = nil
		} else {
			if err = validator.Validate(dst.CreateRoleRequestParentRoleId); err != nil {
				dst.CreateRoleRequestParentRoleId = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateRoleRequestParentRoleId = nil
	}

	// try to unmarshal data into CreateRoleRequestParentRoleName
	err = newStrictDecoder(data).Decode(&dst.CreateRoleRequestParentRoleName)
	if err == nil {
		jsonCreateRoleRequestParentRoleName, _ := json.Marshal(dst.CreateRoleRequestParentRoleName)
		if string(jsonCreateRoleRequestParentRoleName) == "{}" { // empty struct
			dst.CreateRoleRequestParentRoleName = nil
		} else {
			if err = validator.Validate(dst.CreateRoleRequestParentRoleName); err != nil {
				dst.CreateRoleRequestParentRoleName = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateRoleRequestParentRoleName = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateRoleRequestParentRoleId = nil
		dst.CreateRoleRequestParentRoleName = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RoleManagementServiceCreateRoleRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RoleManagementServiceCreateRoleRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RoleManagementServiceCreateRoleRequest) MarshalJSON() ([]byte, error) {
	if src.CreateRoleRequestParentRoleId != nil {
		return json.Marshal(&src.CreateRoleRequestParentRoleId)
	}

	if src.CreateRoleRequestParentRoleName != nil {
		return json.Marshal(&src.CreateRoleRequestParentRoleName)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RoleManagementServiceCreateRoleRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateRoleRequestParentRoleId != nil {
		return obj.CreateRoleRequestParentRoleId
	}

	if obj.CreateRoleRequestParentRoleName != nil {
		return obj.CreateRoleRequestParentRoleName
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj RoleManagementServiceCreateRoleRequest) GetActualInstanceValue() (interface{}) {
	if obj.CreateRoleRequestParentRoleId != nil {
		return *obj.CreateRoleRequestParentRoleId
	}

	if obj.CreateRoleRequestParentRoleName != nil {
		return *obj.CreateRoleRequestParentRoleName
	}

	// all schemas are nil
	return nil
}

type NullableRoleManagementServiceCreateRoleRequest struct {
	value *RoleManagementServiceCreateRoleRequest
	isSet bool
}

func (v NullableRoleManagementServiceCreateRoleRequest) Get() *RoleManagementServiceCreateRoleRequest {
	return v.value
}

func (v *NullableRoleManagementServiceCreateRoleRequest) Set(val *RoleManagementServiceCreateRoleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleManagementServiceCreateRoleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleManagementServiceCreateRoleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleManagementServiceCreateRoleRequest(val *RoleManagementServiceCreateRoleRequest) *NullableRoleManagementServiceCreateRoleRequest {
	return &NullableRoleManagementServiceCreateRoleRequest{value: val, isSet: true}
}

func (v NullableRoleManagementServiceCreateRoleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleManagementServiceCreateRoleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


