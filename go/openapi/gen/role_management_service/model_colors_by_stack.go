/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package role_management_service

import (
	"encoding/json"
)

// checks if the ColorsByStack type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ColorsByStack{}

// ColorsByStack struct for ColorsByStack
type ColorsByStack struct {
	Stack *ColorsByStack `json:"stack,omitempty"`
}

// NewColorsByStack instantiates a new ColorsByStack object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColorsByStack() *ColorsByStack {
	this := ColorsByStack{}
	return &this
}

// NewColorsByStackWithDefaults instantiates a new ColorsByStack object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColorsByStackWithDefaults() *ColorsByStack {
	this := ColorsByStack{}
	return &this
}

// GetStack returns the Stack field value if set, zero value otherwise.
func (o *ColorsByStack) GetStack() ColorsByStack {
	if o == nil || IsNil(o.Stack) {
		var ret ColorsByStack
		return ret
	}
	return *o.Stack
}

// GetStackOk returns a tuple with the Stack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorsByStack) GetStackOk() (*ColorsByStack, bool) {
	if o == nil || IsNil(o.Stack) {
		return nil, false
	}
	return o.Stack, true
}

// HasStack returns a boolean if a field has been set.
func (o *ColorsByStack) HasStack() bool {
	if o != nil && !IsNil(o.Stack) {
		return true
	}

	return false
}

// SetStack gets a reference to the given ColorsByStack and assigns it to the Stack field.
func (o *ColorsByStack) SetStack(v ColorsByStack) {
	o.Stack = &v
}

func (o ColorsByStack) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ColorsByStack) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Stack) {
		toSerialize["stack"] = o.Stack
	}
	return toSerialize, nil
}

type NullableColorsByStack struct {
	value *ColorsByStack
	isSet bool
}

func (v NullableColorsByStack) Get() *ColorsByStack {
	return v.value
}

func (v *NullableColorsByStack) Set(val *ColorsByStack) {
	v.value = val
	v.isSet = true
}

func (v NullableColorsByStack) IsSet() bool {
	return v.isSet
}

func (v *NullableColorsByStack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColorsByStack(val *ColorsByStack) *NullableColorsByStack {
	return &NullableColorsByStack{value: val, isSet: true}
}

func (v NullableColorsByStack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColorsByStack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


