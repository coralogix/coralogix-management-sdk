/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectors_service

import (
	"encoding/json"
)

// checks if the ConnectorConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorConfig{}

// ConnectorConfig Configuration for a specific output schema of a connector
type ConnectorConfig struct {
	Fields []NotificationCenterConnectorConfigField `json:"fields,omitempty"`
}

// NewConnectorConfig instantiates a new ConnectorConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorConfig() *ConnectorConfig {
	this := ConnectorConfig{}
	return &this
}

// NewConnectorConfigWithDefaults instantiates a new ConnectorConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorConfigWithDefaults() *ConnectorConfig {
	this := ConnectorConfig{}
	return &this
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *ConnectorConfig) GetFields() []NotificationCenterConnectorConfigField {
	if o == nil || IsNil(o.Fields) {
		var ret []NotificationCenterConnectorConfigField
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorConfig) GetFieldsOk() ([]NotificationCenterConnectorConfigField, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *ConnectorConfig) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given []NotificationCenterConnectorConfigField and assigns it to the Fields field.
func (o *ConnectorConfig) SetFields(v []NotificationCenterConnectorConfigField) {
	o.Fields = v
}

func (o ConnectorConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	return toSerialize, nil
}

type NullableConnectorConfig struct {
	value *ConnectorConfig
	isSet bool
}

func (v NullableConnectorConfig) Get() *ConnectorConfig {
	return v.value
}

func (v *NullableConnectorConfig) Set(val *ConnectorConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorConfig(val *ConnectorConfig) *NullableConnectorConfig {
	return &NullableConnectorConfig{value: val, isSet: true}
}

func (v NullableConnectorConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


