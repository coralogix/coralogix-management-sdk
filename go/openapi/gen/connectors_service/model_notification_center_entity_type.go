/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectors_service

import (
	"encoding/json"
	"fmt"
)

// NotificationCenterEntityType the model 'NotificationCenterEntityType'
type NotificationCenterEntityType string

// List of notification_center.EntityType
const (
	NOTIFICATIONCENTERENTITYTYPE_ENTITY_TYPE_UNSPECIFIED NotificationCenterEntityType = "ENTITY_TYPE_UNSPECIFIED"
	NOTIFICATIONCENTERENTITYTYPE_ALERTS NotificationCenterEntityType = "ALERTS"
	NOTIFICATIONCENTERENTITYTYPE_TEST_NOTIFICATIONS NotificationCenterEntityType = "TEST_NOTIFICATIONS"
	NOTIFICATIONCENTERENTITYTYPE_CASES NotificationCenterEntityType = "CASES"
)

// All allowed values of NotificationCenterEntityType enum
var AllowedNotificationCenterEntityTypeEnumValues = []NotificationCenterEntityType{
	"ENTITY_TYPE_UNSPECIFIED",
	"ALERTS",
	"TEST_NOTIFICATIONS",
	"CASES",
}

func (v *NotificationCenterEntityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotificationCenterEntityType(value)
	for _, existing := range AllowedNotificationCenterEntityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotificationCenterEntityType", value)
}

// NewNotificationCenterEntityTypeFromValue returns a pointer to a valid NotificationCenterEntityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotificationCenterEntityTypeFromValue(v string) (*NotificationCenterEntityType, error) {
	ev := NotificationCenterEntityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotificationCenterEntityType: valid values are %v", v, AllowedNotificationCenterEntityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotificationCenterEntityType) IsValid() bool {
	for _, existing := range AllowedNotificationCenterEntityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to notification_center.EntityType value
func (v NotificationCenterEntityType) Ptr() *NotificationCenterEntityType {
	return &v
}

type NullableNotificationCenterEntityType struct {
	value *NotificationCenterEntityType
	isSet bool
}

func (v NullableNotificationCenterEntityType) Get() *NotificationCenterEntityType {
	return v.value
}

func (v *NullableNotificationCenterEntityType) Set(val *NotificationCenterEntityType) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationCenterEntityType) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationCenterEntityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationCenterEntityType(val *NotificationCenterEntityType) *NullableNotificationCenterEntityType {
	return &NullableNotificationCenterEntityType{value: val, isSet: true}
}

func (v NullableNotificationCenterEntityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationCenterEntityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

