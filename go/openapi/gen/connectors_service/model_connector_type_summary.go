/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectors_service

import (
	"encoding/json"
)

// checks if the ConnectorTypeSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorTypeSummary{}

// ConnectorTypeSummary Summary information about a connector type
type ConnectorTypeSummary struct {
	Count *int64 `json:"count,omitempty"`
	Type *ConnectorType `json:"type,omitempty"`
}

// NewConnectorTypeSummary instantiates a new ConnectorTypeSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorTypeSummary() *ConnectorTypeSummary {
	this := ConnectorTypeSummary{}
	return &this
}

// NewConnectorTypeSummaryWithDefaults instantiates a new ConnectorTypeSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorTypeSummaryWithDefaults() *ConnectorTypeSummary {
	this := ConnectorTypeSummary{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *ConnectorTypeSummary) GetCount() int64 {
	if o == nil || IsNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorTypeSummary) GetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *ConnectorTypeSummary) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *ConnectorTypeSummary) SetCount(v int64) {
	o.Count = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConnectorTypeSummary) GetType() ConnectorType {
	if o == nil || IsNil(o.Type) {
		var ret ConnectorType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorTypeSummary) GetTypeOk() (*ConnectorType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConnectorTypeSummary) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ConnectorType and assigns it to the Type field.
func (o *ConnectorTypeSummary) SetType(v ConnectorType) {
	o.Type = &v
}

func (o ConnectorTypeSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorTypeSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableConnectorTypeSummary struct {
	value *ConnectorTypeSummary
	isSet bool
}

func (v NullableConnectorTypeSummary) Get() *ConnectorTypeSummary {
	return v.value
}

func (v *NullableConnectorTypeSummary) Set(val *ConnectorTypeSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorTypeSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorTypeSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorTypeSummary(val *ConnectorTypeSummary) *NullableConnectorTypeSummary {
	return &NullableConnectorTypeSummary{value: val, isSet: true}
}

func (v NullableConnectorTypeSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorTypeSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


