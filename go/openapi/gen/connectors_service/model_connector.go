/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectors_service

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Connector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Connector{}

// Connector A connector configuration for sending notifications
type Connector struct {
	ConfigOverrides []EntityTypeConfigOverrides `json:"configOverrides,omitempty"`
	ConnectorConfig *ConnectorConfig `json:"connectorConfig,omitempty"`
	CreateTime *time.Time `json:"createTime,omitempty"`
	Description *string `json:"description,omitempty"`
	Id *string `json:"id,omitempty"`
	Name string `json:"name"`
	TeamId *int64 `json:"teamId,omitempty"`
	Type ConnectorType `json:"type"`
	UpdateTime *time.Time `json:"updateTime,omitempty"`
}

type _Connector Connector

// NewConnector instantiates a new Connector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnector(name string, type_ ConnectorType) *Connector {
	this := Connector{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewConnectorWithDefaults instantiates a new Connector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorWithDefaults() *Connector {
	this := Connector{}
	return &this
}

// GetConfigOverrides returns the ConfigOverrides field value if set, zero value otherwise.
func (o *Connector) GetConfigOverrides() []EntityTypeConfigOverrides {
	if o == nil || IsNil(o.ConfigOverrides) {
		var ret []EntityTypeConfigOverrides
		return ret
	}
	return o.ConfigOverrides
}

// GetConfigOverridesOk returns a tuple with the ConfigOverrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connector) GetConfigOverridesOk() ([]EntityTypeConfigOverrides, bool) {
	if o == nil || IsNil(o.ConfigOverrides) {
		return nil, false
	}
	return o.ConfigOverrides, true
}

// HasConfigOverrides returns a boolean if a field has been set.
func (o *Connector) HasConfigOverrides() bool {
	if o != nil && !IsNil(o.ConfigOverrides) {
		return true
	}

	return false
}

// SetConfigOverrides gets a reference to the given []EntityTypeConfigOverrides and assigns it to the ConfigOverrides field.
func (o *Connector) SetConfigOverrides(v []EntityTypeConfigOverrides) {
	o.ConfigOverrides = v
}

// GetConnectorConfig returns the ConnectorConfig field value if set, zero value otherwise.
func (o *Connector) GetConnectorConfig() ConnectorConfig {
	if o == nil || IsNil(o.ConnectorConfig) {
		var ret ConnectorConfig
		return ret
	}
	return *o.ConnectorConfig
}

// GetConnectorConfigOk returns a tuple with the ConnectorConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connector) GetConnectorConfigOk() (*ConnectorConfig, bool) {
	if o == nil || IsNil(o.ConnectorConfig) {
		return nil, false
	}
	return o.ConnectorConfig, true
}

// HasConnectorConfig returns a boolean if a field has been set.
func (o *Connector) HasConnectorConfig() bool {
	if o != nil && !IsNil(o.ConnectorConfig) {
		return true
	}

	return false
}

// SetConnectorConfig gets a reference to the given ConnectorConfig and assigns it to the ConnectorConfig field.
func (o *Connector) SetConnectorConfig(v ConnectorConfig) {
	o.ConnectorConfig = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *Connector) GetCreateTime() time.Time {
	if o == nil || IsNil(o.CreateTime) {
		var ret time.Time
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connector) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateTime) {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *Connector) HasCreateTime() bool {
	if o != nil && !IsNil(o.CreateTime) {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given time.Time and assigns it to the CreateTime field.
func (o *Connector) SetCreateTime(v time.Time) {
	o.CreateTime = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Connector) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connector) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Connector) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Connector) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Connector) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connector) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Connector) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Connector) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Connector) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Connector) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Connector) SetName(v string) {
	o.Name = v
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *Connector) GetTeamId() int64 {
	if o == nil || IsNil(o.TeamId) {
		var ret int64
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connector) GetTeamIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TeamId) {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *Connector) HasTeamId() bool {
	if o != nil && !IsNil(o.TeamId) {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given int64 and assigns it to the TeamId field.
func (o *Connector) SetTeamId(v int64) {
	o.TeamId = &v
}

// GetType returns the Type field value
func (o *Connector) GetType() ConnectorType {
	if o == nil {
		var ret ConnectorType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Connector) GetTypeOk() (*ConnectorType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Connector) SetType(v ConnectorType) {
	o.Type = v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *Connector) GetUpdateTime() time.Time {
	if o == nil || IsNil(o.UpdateTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connector) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *Connector) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given time.Time and assigns it to the UpdateTime field.
func (o *Connector) SetUpdateTime(v time.Time) {
	o.UpdateTime = &v
}

func (o Connector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Connector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigOverrides) {
		toSerialize["configOverrides"] = o.ConfigOverrides
	}
	if !IsNil(o.ConnectorConfig) {
		toSerialize["connectorConfig"] = o.ConnectorConfig
	}
	if !IsNil(o.CreateTime) {
		toSerialize["createTime"] = o.CreateTime
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.TeamId) {
		toSerialize["teamId"] = o.TeamId
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.UpdateTime) {
		toSerialize["updateTime"] = o.UpdateTime
	}
	return toSerialize, nil
}

func (o *Connector) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnector := _Connector{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnector)

	if err != nil {
		return err
	}

	*o = Connector(varConnector)

	return err
}

type NullableConnector struct {
	value *Connector
	isSet bool
}

func (v NullableConnector) Get() *Connector {
	return v.value
}

func (v *NullableConnector) Set(val *Connector) {
	v.value = val
	v.isSet = true
}

func (v NullableConnector) IsSet() bool {
	return v.isSet
}

func (v *NullableConnector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnector(val *Connector) *NullableConnector {
	return &NullableConnector{value: val, isSet: true}
}

func (v NullableConnector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


