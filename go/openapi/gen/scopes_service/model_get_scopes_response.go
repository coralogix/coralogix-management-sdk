/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package scopes_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetScopesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetScopesResponse{}

// GetScopesResponse This data structure represents a response to get scopes
type GetScopesResponse struct {
	Scopes []ScopesV1Scope `json:"scopes"`
}

type _GetScopesResponse GetScopesResponse

// NewGetScopesResponse instantiates a new GetScopesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetScopesResponse(scopes []ScopesV1Scope) *GetScopesResponse {
	this := GetScopesResponse{}
	this.Scopes = scopes
	return &this
}

// NewGetScopesResponseWithDefaults instantiates a new GetScopesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetScopesResponseWithDefaults() *GetScopesResponse {
	this := GetScopesResponse{}
	return &this
}

// GetScopes returns the Scopes field value
func (o *GetScopesResponse) GetScopes() []ScopesV1Scope {
	if o == nil {
		var ret []ScopesV1Scope
		return ret
	}

	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
func (o *GetScopesResponse) GetScopesOk() ([]ScopesV1Scope, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scopes, true
}

// SetScopes sets field value
func (o *GetScopesResponse) SetScopes(v []ScopesV1Scope) {
	o.Scopes = v
}

func (o GetScopesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetScopesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["scopes"] = o.Scopes
	return toSerialize, nil
}

func (o *GetScopesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"scopes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetScopesResponse := _GetScopesResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetScopesResponse)

	if err != nil {
		return err
	}

	*o = GetScopesResponse(varGetScopesResponse)

	return err
}

type NullableGetScopesResponse struct {
	value *GetScopesResponse
	isSet bool
}

func (v NullableGetScopesResponse) Get() *GetScopesResponse {
	return v.value
}

func (v *NullableGetScopesResponse) Set(val *GetScopesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetScopesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetScopesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetScopesResponse(val *GetScopesResponse) *NullableGetScopesResponse {
	return &NullableGetScopesResponse{value: val, isSet: true}
}

func (v NullableGetScopesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetScopesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


