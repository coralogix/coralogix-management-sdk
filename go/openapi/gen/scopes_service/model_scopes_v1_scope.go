/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package scopes_service

import (
	"encoding/json"
)

// checks if the ScopesV1Scope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScopesV1Scope{}

// ScopesV1Scope This data structure represents a scope
type ScopesV1Scope struct {
	DefaultExpression *string `json:"defaultExpression,omitempty"`
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Filters []ScopesV1Filter `json:"filters,omitempty"`
	Id *string `json:"id,omitempty"`
	TeamId *int32 `json:"teamId,omitempty"`
}

// NewScopesV1Scope instantiates a new ScopesV1Scope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopesV1Scope() *ScopesV1Scope {
	this := ScopesV1Scope{}
	return &this
}

// NewScopesV1ScopeWithDefaults instantiates a new ScopesV1Scope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopesV1ScopeWithDefaults() *ScopesV1Scope {
	this := ScopesV1Scope{}
	return &this
}

// GetDefaultExpression returns the DefaultExpression field value if set, zero value otherwise.
func (o *ScopesV1Scope) GetDefaultExpression() string {
	if o == nil || IsNil(o.DefaultExpression) {
		var ret string
		return ret
	}
	return *o.DefaultExpression
}

// GetDefaultExpressionOk returns a tuple with the DefaultExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopesV1Scope) GetDefaultExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultExpression) {
		return nil, false
	}
	return o.DefaultExpression, true
}

// HasDefaultExpression returns a boolean if a field has been set.
func (o *ScopesV1Scope) HasDefaultExpression() bool {
	if o != nil && !IsNil(o.DefaultExpression) {
		return true
	}

	return false
}

// SetDefaultExpression gets a reference to the given string and assigns it to the DefaultExpression field.
func (o *ScopesV1Scope) SetDefaultExpression(v string) {
	o.DefaultExpression = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ScopesV1Scope) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopesV1Scope) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ScopesV1Scope) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ScopesV1Scope) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ScopesV1Scope) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopesV1Scope) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ScopesV1Scope) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ScopesV1Scope) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *ScopesV1Scope) GetFilters() []ScopesV1Filter {
	if o == nil || IsNil(o.Filters) {
		var ret []ScopesV1Filter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopesV1Scope) GetFiltersOk() ([]ScopesV1Filter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *ScopesV1Scope) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []ScopesV1Filter and assigns it to the Filters field.
func (o *ScopesV1Scope) SetFilters(v []ScopesV1Filter) {
	o.Filters = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ScopesV1Scope) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopesV1Scope) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ScopesV1Scope) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ScopesV1Scope) SetId(v string) {
	o.Id = &v
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *ScopesV1Scope) GetTeamId() int32 {
	if o == nil || IsNil(o.TeamId) {
		var ret int32
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopesV1Scope) GetTeamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TeamId) {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *ScopesV1Scope) HasTeamId() bool {
	if o != nil && !IsNil(o.TeamId) {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given int32 and assigns it to the TeamId field.
func (o *ScopesV1Scope) SetTeamId(v int32) {
	o.TeamId = &v
}

func (o ScopesV1Scope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScopesV1Scope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultExpression) {
		toSerialize["defaultExpression"] = o.DefaultExpression
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.TeamId) {
		toSerialize["teamId"] = o.TeamId
	}
	return toSerialize, nil
}

type NullableScopesV1Scope struct {
	value *ScopesV1Scope
	isSet bool
}

func (v NullableScopesV1Scope) Get() *ScopesV1Scope {
	return v.value
}

func (v *NullableScopesV1Scope) Set(val *ScopesV1Scope) {
	v.value = val
	v.isSet = true
}

func (v NullableScopesV1Scope) IsSet() bool {
	return v.isSet
}

func (v *NullableScopesV1Scope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopesV1Scope(val *ScopesV1Scope) *NullableScopesV1Scope {
	return &NullableScopesV1Scope{value: val, isSet: true}
}

func (v NullableScopesV1Scope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopesV1Scope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


