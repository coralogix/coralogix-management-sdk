/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package scopes_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateScopeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateScopeRequest{}

// UpdateScopeRequest This data structure represents a request to update a scope
type UpdateScopeRequest struct {
	DefaultExpression string `json:"defaultExpression"`
	Description *string `json:"description,omitempty"`
	DisplayName string `json:"displayName"`
	Filters []ScopesV1Filter `json:"filters"`
	Id string `json:"id"`
}

type _UpdateScopeRequest UpdateScopeRequest

// NewUpdateScopeRequest instantiates a new UpdateScopeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateScopeRequest(defaultExpression string, displayName string, filters []ScopesV1Filter, id string) *UpdateScopeRequest {
	this := UpdateScopeRequest{}
	this.DefaultExpression = defaultExpression
	this.DisplayName = displayName
	this.Filters = filters
	this.Id = id
	return &this
}

// NewUpdateScopeRequestWithDefaults instantiates a new UpdateScopeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateScopeRequestWithDefaults() *UpdateScopeRequest {
	this := UpdateScopeRequest{}
	return &this
}

// GetDefaultExpression returns the DefaultExpression field value
func (o *UpdateScopeRequest) GetDefaultExpression() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultExpression
}

// GetDefaultExpressionOk returns a tuple with the DefaultExpression field value
// and a boolean to check if the value has been set.
func (o *UpdateScopeRequest) GetDefaultExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultExpression, true
}

// SetDefaultExpression sets field value
func (o *UpdateScopeRequest) SetDefaultExpression(v string) {
	o.DefaultExpression = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateScopeRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateScopeRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateScopeRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateScopeRequest) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value
func (o *UpdateScopeRequest) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *UpdateScopeRequest) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *UpdateScopeRequest) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetFilters returns the Filters field value
func (o *UpdateScopeRequest) GetFilters() []ScopesV1Filter {
	if o == nil {
		var ret []ScopesV1Filter
		return ret
	}

	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value
// and a boolean to check if the value has been set.
func (o *UpdateScopeRequest) GetFiltersOk() ([]ScopesV1Filter, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filters, true
}

// SetFilters sets field value
func (o *UpdateScopeRequest) SetFilters(v []ScopesV1Filter) {
	o.Filters = v
}

// GetId returns the Id field value
func (o *UpdateScopeRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpdateScopeRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpdateScopeRequest) SetId(v string) {
	o.Id = v
}

func (o UpdateScopeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateScopeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["defaultExpression"] = o.DefaultExpression
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["filters"] = o.Filters
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *UpdateScopeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"defaultExpression",
		"displayName",
		"filters",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateScopeRequest := _UpdateScopeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateScopeRequest)

	if err != nil {
		return err
	}

	*o = UpdateScopeRequest(varUpdateScopeRequest)

	return err
}

type NullableUpdateScopeRequest struct {
	value *UpdateScopeRequest
	isSet bool
}

func (v NullableUpdateScopeRequest) Get() *UpdateScopeRequest {
	return v.value
}

func (v *NullableUpdateScopeRequest) Set(val *UpdateScopeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateScopeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateScopeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateScopeRequest(val *UpdateScopeRequest) *NullableUpdateScopeRequest {
	return &NullableUpdateScopeRequest{value: val, isSet: true}
}

func (v NullableUpdateScopeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateScopeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


