/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package scopes_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateScopeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateScopeResponse{}

// CreateScopeResponse This data structure represents a response to create a scope
type CreateScopeResponse struct {
	Scope ScopesV1Scope `json:"scope"`
}

type _CreateScopeResponse CreateScopeResponse

// NewCreateScopeResponse instantiates a new CreateScopeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateScopeResponse(scope ScopesV1Scope) *CreateScopeResponse {
	this := CreateScopeResponse{}
	this.Scope = scope
	return &this
}

// NewCreateScopeResponseWithDefaults instantiates a new CreateScopeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateScopeResponseWithDefaults() *CreateScopeResponse {
	this := CreateScopeResponse{}
	return &this
}

// GetScope returns the Scope field value
func (o *CreateScopeResponse) GetScope() ScopesV1Scope {
	if o == nil {
		var ret ScopesV1Scope
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *CreateScopeResponse) GetScopeOk() (*ScopesV1Scope, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *CreateScopeResponse) SetScope(v ScopesV1Scope) {
	o.Scope = v
}

func (o CreateScopeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateScopeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["scope"] = o.Scope
	return toSerialize, nil
}

func (o *CreateScopeResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"scope",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateScopeResponse := _CreateScopeResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateScopeResponse)

	if err != nil {
		return err
	}

	*o = CreateScopeResponse(varCreateScopeResponse)

	return err
}

type NullableCreateScopeResponse struct {
	value *CreateScopeResponse
	isSet bool
}

func (v NullableCreateScopeResponse) Get() *CreateScopeResponse {
	return v.value
}

func (v *NullableCreateScopeResponse) Set(val *CreateScopeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateScopeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateScopeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateScopeResponse(val *CreateScopeResponse) *NullableCreateScopeResponse {
	return &NullableCreateScopeResponse{value: val, isSet: true}
}

func (v NullableCreateScopeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateScopeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


