/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package scopes_service

import (
	"encoding/json"
	"fmt"
)

// V1EntityType the model 'V1EntityType'
type V1EntityType string

// List of v1.EntityType
const (
	V1ENTITYTYPE_ENTITY_TYPE_UNSPECIFIED V1EntityType = "ENTITY_TYPE_UNSPECIFIED"
	V1ENTITYTYPE_ENTITY_TYPE_LOGS V1EntityType = "ENTITY_TYPE_LOGS"
	V1ENTITYTYPE_ENTITY_TYPE_SPANS V1EntityType = "ENTITY_TYPE_SPANS"
)

// All allowed values of V1EntityType enum
var AllowedV1EntityTypeEnumValues = []V1EntityType{
	"ENTITY_TYPE_UNSPECIFIED",
	"ENTITY_TYPE_LOGS",
	"ENTITY_TYPE_SPANS",
}

func (v *V1EntityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1EntityType(value)
	for _, existing := range AllowedV1EntityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1EntityType", value)
}

// NewV1EntityTypeFromValue returns a pointer to a valid V1EntityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1EntityTypeFromValue(v string) (*V1EntityType, error) {
	ev := V1EntityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1EntityType: valid values are %v", v, AllowedV1EntityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1EntityType) IsValid() bool {
	for _, existing := range AllowedV1EntityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1.EntityType value
func (v V1EntityType) Ptr() *V1EntityType {
	return &v
}

type NullableV1EntityType struct {
	value *V1EntityType
	isSet bool
}

func (v NullableV1EntityType) Get() *V1EntityType {
	return v.value
}

func (v *NullableV1EntityType) Set(val *V1EntityType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1EntityType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1EntityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1EntityType(val *V1EntityType) *NullableV1EntityType {
	return &NullableV1EntityType{value: val, isSet: true}
}

func (v NullableV1EntityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1EntityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

