/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package scopes_service

import (
	"encoding/json"
)

// checks if the ScopesV1Filter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScopesV1Filter{}

// ScopesV1Filter This data structure represents a filter
type ScopesV1Filter struct {
	EntityType *V1EntityType `json:"entityType,omitempty"`
	Expression *string `json:"expression,omitempty"`
}

// NewScopesV1Filter instantiates a new ScopesV1Filter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopesV1Filter() *ScopesV1Filter {
	this := ScopesV1Filter{}
	return &this
}

// NewScopesV1FilterWithDefaults instantiates a new ScopesV1Filter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopesV1FilterWithDefaults() *ScopesV1Filter {
	this := ScopesV1Filter{}
	return &this
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *ScopesV1Filter) GetEntityType() V1EntityType {
	if o == nil || IsNil(o.EntityType) {
		var ret V1EntityType
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopesV1Filter) GetEntityTypeOk() (*V1EntityType, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *ScopesV1Filter) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given V1EntityType and assigns it to the EntityType field.
func (o *ScopesV1Filter) SetEntityType(v V1EntityType) {
	o.EntityType = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *ScopesV1Filter) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopesV1Filter) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *ScopesV1Filter) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *ScopesV1Filter) SetExpression(v string) {
	o.Expression = &v
}

func (o ScopesV1Filter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScopesV1Filter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntityType) {
		toSerialize["entityType"] = o.EntityType
	}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	return toSerialize, nil
}

type NullableScopesV1Filter struct {
	value *ScopesV1Filter
	isSet bool
}

func (v NullableScopesV1Filter) Get() *ScopesV1Filter {
	return v.value
}

func (v *NullableScopesV1Filter) Set(val *ScopesV1Filter) {
	v.value = val
	v.isSet = true
}

func (v NullableScopesV1Filter) IsSet() bool {
	return v.isSet
}

func (v *NullableScopesV1Filter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopesV1Filter(val *ScopesV1Filter) *NullableScopesV1Filter {
	return &NullableScopesV1Filter{value: val, isSet: true}
}

func (v NullableScopesV1Filter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopesV1Filter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


