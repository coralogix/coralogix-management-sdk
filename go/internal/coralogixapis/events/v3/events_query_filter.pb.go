// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: com/coralogixapis/events/v3/events_query_filter.proto

package v3

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FilterOperator int32

const (
	FilterOperator_FILTER_OPERATOR_AND_OR_UNSPECIFIED FilterOperator = 0
	FilterOperator_FILTER_OPERATOR_OR                 FilterOperator = 1
)

// Enum value maps for FilterOperator.
var (
	FilterOperator_name = map[int32]string{
		0: "FILTER_OPERATOR_AND_OR_UNSPECIFIED",
		1: "FILTER_OPERATOR_OR",
	}
	FilterOperator_value = map[string]int32{
		"FILTER_OPERATOR_AND_OR_UNSPECIFIED": 0,
		"FILTER_OPERATOR_OR":                 1,
	}
)

func (x FilterOperator) Enum() *FilterOperator {
	p := new(FilterOperator)
	*p = x
	return p
}

func (x FilterOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_events_v3_events_query_filter_proto_enumTypes[0].Descriptor()
}

func (FilterOperator) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_events_v3_events_query_filter_proto_enumTypes[0]
}

func (x FilterOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterOperator.Descriptor instead.
func (FilterOperator) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_events_v3_events_query_filter_proto_rawDescGZIP(), []int{0}
}

type FilterMatcher int32

const (
	FilterMatcher_FILTER_MATCHER_TEXT_OR_UNSPECIFIED FilterMatcher = 0
	FilterMatcher_FILTER_MATCHER_REGEXP              FilterMatcher = 1
)

// Enum value maps for FilterMatcher.
var (
	FilterMatcher_name = map[int32]string{
		0: "FILTER_MATCHER_TEXT_OR_UNSPECIFIED",
		1: "FILTER_MATCHER_REGEXP",
	}
	FilterMatcher_value = map[string]int32{
		"FILTER_MATCHER_TEXT_OR_UNSPECIFIED": 0,
		"FILTER_MATCHER_REGEXP":              1,
	}
)

func (x FilterMatcher) Enum() *FilterMatcher {
	p := new(FilterMatcher)
	*p = x
	return p
}

func (x FilterMatcher) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterMatcher) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_events_v3_events_query_filter_proto_enumTypes[1].Descriptor()
}

func (FilterMatcher) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_events_v3_events_query_filter_proto_enumTypes[1]
}

func (x FilterMatcher) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterMatcher.Descriptor instead.
func (FilterMatcher) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_events_v3_events_query_filter_proto_rawDescGZIP(), []int{1}
}

type EventsQueryFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *TimestampRange `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *EventsQueryFilter) Reset() {
	*x = EventsQueryFilter{}
	mi := &file_com_coralogixapis_events_v3_events_query_filter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventsQueryFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsQueryFilter) ProtoMessage() {}

func (x *EventsQueryFilter) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events_v3_events_query_filter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsQueryFilter.ProtoReflect.Descriptor instead.
func (*EventsQueryFilter) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events_v3_events_query_filter_proto_rawDescGZIP(), []int{0}
}

func (x *EventsQueryFilter) GetTimestamp() *TimestampRange {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type EventsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp              *TimestampRange           `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CxEventTypes           []*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=cx_event_types,json=cxEventTypes,proto3" json:"cx_event_types,omitempty"`
	CxEventKeys            []*wrapperspb.StringValue `protobuf:"bytes,4,rep,name=cx_event_keys,json=cxEventKeys,proto3" json:"cx_event_keys,omitempty"`
	CxEventMetadataFilters *Filters                  `protobuf:"bytes,5,opt,name=cx_event_metadata_filters,json=cxEventMetadataFilters,proto3" json:"cx_event_metadata_filters,omitempty"`
}

func (x *EventsFilter) Reset() {
	*x = EventsFilter{}
	mi := &file_com_coralogixapis_events_v3_events_query_filter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsFilter) ProtoMessage() {}

func (x *EventsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events_v3_events_query_filter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsFilter.ProtoReflect.Descriptor instead.
func (*EventsFilter) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events_v3_events_query_filter_proto_rawDescGZIP(), []int{1}
}

func (x *EventsFilter) GetTimestamp() *TimestampRange {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *EventsFilter) GetCxEventTypes() []*wrapperspb.StringValue {
	if x != nil {
		return x.CxEventTypes
	}
	return nil
}

func (x *EventsFilter) GetCxEventKeys() []*wrapperspb.StringValue {
	if x != nil {
		return x.CxEventKeys
	}
	return nil
}

func (x *EventsFilter) GetCxEventMetadataFilters() *Filters {
	if x != nil {
		return x.CxEventMetadataFilters
	}
	return nil
}

type Filters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator      FilterOperator         `protobuf:"varint,1,opt,name=operator,proto3,enum=com.coralogixapis.events.v3.FilterOperator" json:"operator,omitempty"`
	PathAndValues []*FilterPathAndValues `protobuf:"bytes,2,rep,name=path_and_values,json=pathAndValues,proto3" json:"path_and_values,omitempty"`
}

func (x *Filters) Reset() {
	*x = Filters{}
	mi := &file_com_coralogixapis_events_v3_events_query_filter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filters) ProtoMessage() {}

func (x *Filters) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events_v3_events_query_filter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filters.ProtoReflect.Descriptor instead.
func (*Filters) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events_v3_events_query_filter_proto_rawDescGZIP(), []int{2}
}

func (x *Filters) GetOperator() FilterOperator {
	if x != nil {
		return x.Operator
	}
	return FilterOperator_FILTER_OPERATOR_AND_OR_UNSPECIFIED
}

func (x *Filters) GetPathAndValues() []*FilterPathAndValues {
	if x != nil {
		return x.PathAndValues
	}
	return nil
}

type FilterPathAndValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Types that are assignable to Values:
	//
	//	*FilterPathAndValues_MultipleValues
	//	*FilterPathAndValues_Filters
	Values isFilterPathAndValues_Values `protobuf_oneof:"values"`
}

func (x *FilterPathAndValues) Reset() {
	*x = FilterPathAndValues{}
	mi := &file_com_coralogixapis_events_v3_events_query_filter_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterPathAndValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterPathAndValues) ProtoMessage() {}

func (x *FilterPathAndValues) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events_v3_events_query_filter_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterPathAndValues.ProtoReflect.Descriptor instead.
func (*FilterPathAndValues) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events_v3_events_query_filter_proto_rawDescGZIP(), []int{3}
}

func (x *FilterPathAndValues) GetPath() *wrapperspb.StringValue {
	if x != nil {
		return x.Path
	}
	return nil
}

func (m *FilterPathAndValues) GetValues() isFilterPathAndValues_Values {
	if m != nil {
		return m.Values
	}
	return nil
}

func (x *FilterPathAndValues) GetMultipleValues() *MultipleValues {
	if x, ok := x.GetValues().(*FilterPathAndValues_MultipleValues); ok {
		return x.MultipleValues
	}
	return nil
}

func (x *FilterPathAndValues) GetFilters() *Filters {
	if x, ok := x.GetValues().(*FilterPathAndValues_Filters); ok {
		return x.Filters
	}
	return nil
}

type isFilterPathAndValues_Values interface {
	isFilterPathAndValues_Values()
}

type FilterPathAndValues_MultipleValues struct {
	MultipleValues *MultipleValues `protobuf:"bytes,100,opt,name=multiple_values,json=multipleValues,proto3,oneof"`
}

type FilterPathAndValues_Filters struct {
	Filters *Filters `protobuf:"bytes,101,opt,name=filters,proto3,oneof"`
}

func (*FilterPathAndValues_MultipleValues) isFilterPathAndValues_Values() {}

func (*FilterPathAndValues_Filters) isFilterPathAndValues_Values() {}

type MultipleValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values  []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	Matcher FilterMatcher             `protobuf:"varint,2,opt,name=matcher,proto3,enum=com.coralogixapis.events.v3.FilterMatcher" json:"matcher,omitempty"`
}

func (x *MultipleValues) Reset() {
	*x = MultipleValues{}
	mi := &file_com_coralogixapis_events_v3_events_query_filter_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultipleValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleValues) ProtoMessage() {}

func (x *MultipleValues) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events_v3_events_query_filter_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleValues.ProtoReflect.Descriptor instead.
func (*MultipleValues) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events_v3_events_query_filter_proto_rawDescGZIP(), []int{4}
}

func (x *MultipleValues) GetValues() []*wrapperspb.StringValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *MultipleValues) GetMatcher() FilterMatcher {
	if x != nil {
		return x.Matcher
	}
	return FilterMatcher_FILTER_MATCHER_TEXT_OR_UNSPECIFIED
}

type TimestampRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *TimestampRange) Reset() {
	*x = TimestampRange{}
	mi := &file_com_coralogixapis_events_v3_events_query_filter_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimestampRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampRange) ProtoMessage() {}

func (x *TimestampRange) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events_v3_events_query_filter_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampRange.ProtoReflect.Descriptor instead.
func (*TimestampRange) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events_v3_events_query_filter_proto_rawDescGZIP(), []int{5}
}

func (x *TimestampRange) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TimestampRange) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

var File_com_coralogixapis_events_v3_events_query_filter_proto protoreflect.FileDescriptor

var file_com_coralogixapis_events_v3_events_query_filter_proto_rawDesc = []byte{
	0x0a, 0x35, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x33, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xf9, 0x03, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x4a, 0x0d, 0x5b, 0x22,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5d, 0x52, 0x0c, 0x63, 0x78, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0d, 0x63, 0x78, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x4a, 0x0c, 0x5b, 0x22, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x22,
	0x5d, 0x52, 0x0b, 0x63, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x5f,
	0x0a, 0x19, 0x63, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x16, 0x63, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a,
	0x8f, 0x01, 0x92, 0x41, 0x8b, 0x01, 0x0a, 0x88, 0x01, 0x2a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x32, 0x2f, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0xd2, 0x01, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0xd2, 0x01, 0x0e, 0x63, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0xd2, 0x01, 0x0d, 0x63, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0xd2, 0x01, 0x19, 0x63, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x9d, 0x02, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x62, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x4a, 0x14, 0x22, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x22, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x58, 0x0a, 0x0f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x74, 0x68, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0d, 0x70, 0x61,
	0x74, 0x68, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a, 0x54, 0x92, 0x41, 0x51,
	0x0a, 0x4f, 0x2a, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x32, 0x27, 0x54, 0x68, 0x69,
	0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0xd2, 0x01, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0xd2,
	0x01, 0x0f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0xdd, 0x02, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68,
	0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x4a, 0x06, 0x22, 0x74, 0x65, 0x73,
	0x74, 0x22, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x56, 0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x3a, 0x63, 0x92, 0x41, 0x60, 0x0a, 0x5e, 0x2a, 0x13, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x50, 0x61, 0x74, 0x68, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x32, 0x37,
	0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61,
	0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0xd2, 0x01, 0x04, 0x70, 0x61, 0x74, 0x68, 0xd2, 0x01,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x22, 0xc1, 0x01, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x3a,
	0x53, 0x92, 0x41, 0x50, 0x0a, 0x4e, 0x2a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x32, 0x30, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0xd2,
	0x01, 0x02, 0x74, 0x6f, 0x2a, 0x50, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x52,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x4f, 0x52, 0x10, 0x01, 0x2a, 0x52, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x49, 0x4c, 0x54, 0x45,
	0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4f,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x58, 0x50, 0x10, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_com_coralogixapis_events_v3_events_query_filter_proto_rawDescOnce sync.Once
	file_com_coralogixapis_events_v3_events_query_filter_proto_rawDescData = file_com_coralogixapis_events_v3_events_query_filter_proto_rawDesc
)

func file_com_coralogixapis_events_v3_events_query_filter_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_events_v3_events_query_filter_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_events_v3_events_query_filter_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_events_v3_events_query_filter_proto_rawDescData)
	})
	return file_com_coralogixapis_events_v3_events_query_filter_proto_rawDescData
}

var file_com_coralogixapis_events_v3_events_query_filter_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_com_coralogixapis_events_v3_events_query_filter_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_com_coralogixapis_events_v3_events_query_filter_proto_goTypes = []any{
	(FilterOperator)(0),            // 0: com.coralogixapis.events.v3.FilterOperator
	(FilterMatcher)(0),             // 1: com.coralogixapis.events.v3.FilterMatcher
	(*EventsQueryFilter)(nil),      // 2: com.coralogixapis.events.v3.EventsQueryFilter
	(*EventsFilter)(nil),           // 3: com.coralogixapis.events.v3.EventsFilter
	(*Filters)(nil),                // 4: com.coralogixapis.events.v3.Filters
	(*FilterPathAndValues)(nil),    // 5: com.coralogixapis.events.v3.FilterPathAndValues
	(*MultipleValues)(nil),         // 6: com.coralogixapis.events.v3.MultipleValues
	(*TimestampRange)(nil),         // 7: com.coralogixapis.events.v3.TimestampRange
	(*wrapperspb.StringValue)(nil), // 8: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),  // 9: google.protobuf.Timestamp
}
var file_com_coralogixapis_events_v3_events_query_filter_proto_depIdxs = []int32{
	7,  // 0: com.coralogixapis.events.v3.EventsQueryFilter.timestamp:type_name -> com.coralogixapis.events.v3.TimestampRange
	7,  // 1: com.coralogixapis.events.v3.EventsFilter.timestamp:type_name -> com.coralogixapis.events.v3.TimestampRange
	8,  // 2: com.coralogixapis.events.v3.EventsFilter.cx_event_types:type_name -> google.protobuf.StringValue
	8,  // 3: com.coralogixapis.events.v3.EventsFilter.cx_event_keys:type_name -> google.protobuf.StringValue
	4,  // 4: com.coralogixapis.events.v3.EventsFilter.cx_event_metadata_filters:type_name -> com.coralogixapis.events.v3.Filters
	0,  // 5: com.coralogixapis.events.v3.Filters.operator:type_name -> com.coralogixapis.events.v3.FilterOperator
	5,  // 6: com.coralogixapis.events.v3.Filters.path_and_values:type_name -> com.coralogixapis.events.v3.FilterPathAndValues
	8,  // 7: com.coralogixapis.events.v3.FilterPathAndValues.path:type_name -> google.protobuf.StringValue
	6,  // 8: com.coralogixapis.events.v3.FilterPathAndValues.multiple_values:type_name -> com.coralogixapis.events.v3.MultipleValues
	4,  // 9: com.coralogixapis.events.v3.FilterPathAndValues.filters:type_name -> com.coralogixapis.events.v3.Filters
	8,  // 10: com.coralogixapis.events.v3.MultipleValues.values:type_name -> google.protobuf.StringValue
	1,  // 11: com.coralogixapis.events.v3.MultipleValues.matcher:type_name -> com.coralogixapis.events.v3.FilterMatcher
	9,  // 12: com.coralogixapis.events.v3.TimestampRange.from:type_name -> google.protobuf.Timestamp
	9,  // 13: com.coralogixapis.events.v3.TimestampRange.to:type_name -> google.protobuf.Timestamp
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_events_v3_events_query_filter_proto_init() }
func file_com_coralogixapis_events_v3_events_query_filter_proto_init() {
	if File_com_coralogixapis_events_v3_events_query_filter_proto != nil {
		return
	}
	file_com_coralogixapis_events_v3_events_query_filter_proto_msgTypes[3].OneofWrappers = []any{
		(*FilterPathAndValues_MultipleValues)(nil),
		(*FilterPathAndValues_Filters)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_events_v3_events_query_filter_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogixapis_events_v3_events_query_filter_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_events_v3_events_query_filter_proto_depIdxs,
		EnumInfos:         file_com_coralogixapis_events_v3_events_query_filter_proto_enumTypes,
		MessageInfos:      file_com_coralogixapis_events_v3_events_query_filter_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_events_v3_events_query_filter_proto = out.File
	file_com_coralogixapis_events_v3_events_query_filter_proto_rawDesc = nil
	file_com_coralogixapis_events_v3_events_query_filter_proto_goTypes = nil
	file_com_coralogixapis_events_v3_events_query_filter_proto_depIdxs = nil
}
