// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.3
// source: com/coralogixapis/events/v3/cx_event.proto

package v3

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CxEvent struct {
	state              protoimpl.MessageState  `protogen:"open.v1"`
	CxEventKey         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=cx_event_key,json=cxEventKey,proto3" json:"cx_event_key,omitempty"`
	CxEventType        *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=cx_event_type,json=cxEventType,proto3" json:"cx_event_type,omitempty"`
	CxEventLabels      map[string]string       `protobuf:"bytes,3,rep,name=cx_event_labels,json=cxEventLabels,proto3" json:"cx_event_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CompanyId          *wrapperspb.Int32Value  `protobuf:"bytes,4,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	CxEventTimestamp   *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=cx_event_timestamp,json=cxEventTimestamp,proto3" json:"cx_event_timestamp,omitempty"`
	CxEventPayloadType *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=cx_event_payload_type,json=cxEventPayloadType,proto3" json:"cx_event_payload_type,omitempty"`
	CxEventPayload     *structpb.Struct        `protobuf:"bytes,6,opt,name=cx_event_payload,json=cxEventPayload,proto3" json:"cx_event_payload,omitempty"`
	CxEventDedupKey    *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=cx_event_dedup_key,json=cxEventDedupKey,proto3" json:"cx_event_dedup_key,omitempty"`
	CxEventMetadata    map[string]string       `protobuf:"bytes,8,rep,name=cx_event_metadata,json=cxEventMetadata,proto3" json:"cx_event_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CxEvent) Reset() {
	*x = CxEvent{}
	mi := &file_com_coralogixapis_events_v3_cx_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CxEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CxEvent) ProtoMessage() {}

func (x *CxEvent) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events_v3_cx_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CxEvent.ProtoReflect.Descriptor instead.
func (*CxEvent) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events_v3_cx_event_proto_rawDescGZIP(), []int{0}
}

func (x *CxEvent) GetCxEventKey() *wrapperspb.StringValue {
	if x != nil {
		return x.CxEventKey
	}
	return nil
}

func (x *CxEvent) GetCxEventType() *wrapperspb.StringValue {
	if x != nil {
		return x.CxEventType
	}
	return nil
}

func (x *CxEvent) GetCxEventLabels() map[string]string {
	if x != nil {
		return x.CxEventLabels
	}
	return nil
}

func (x *CxEvent) GetCompanyId() *wrapperspb.Int32Value {
	if x != nil {
		return x.CompanyId
	}
	return nil
}

func (x *CxEvent) GetCxEventTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CxEventTimestamp
	}
	return nil
}

func (x *CxEvent) GetCxEventPayloadType() *wrapperspb.StringValue {
	if x != nil {
		return x.CxEventPayloadType
	}
	return nil
}

func (x *CxEvent) GetCxEventPayload() *structpb.Struct {
	if x != nil {
		return x.CxEventPayload
	}
	return nil
}

func (x *CxEvent) GetCxEventDedupKey() *wrapperspb.StringValue {
	if x != nil {
		return x.CxEventDedupKey
	}
	return nil
}

func (x *CxEvent) GetCxEventMetadata() map[string]string {
	if x != nil {
		return x.CxEventMetadata
	}
	return nil
}

var File_com_coralogixapis_events_v3_cx_event_proto protoreflect.FileDescriptor

var file_com_coralogixapis_events_v3_cx_event_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x63, 0x78,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x0a, 0x0a, 0x07, 0x43, 0x78, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x4a, 0x06, 0x22,
	0x74, 0x65, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x63, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x4a, 0x0b, 0x22, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x52, 0x0b, 0x63, 0x78, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x76, 0x0a, 0x0f, 0x63, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x78, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x15, 0x92, 0x41, 0x12, 0x4a, 0x10, 0x7b, 0x22,
	0x74, 0x65, 0x73, 0x74, 0x22, 0x3a, 0x20, 0x22, 0x74, 0x65, 0x73, 0x74, 0x22, 0x7d, 0x52, 0x0d,
	0x63, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x42, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06,
	0x92, 0x41, 0x03, 0x4a, 0x01, 0x31, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x12, 0x59, 0x0a, 0x12, 0x63, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x4a, 0x0a,
	0x31, 0x37, 0x31, 0x34, 0x38, 0x35, 0x37, 0x36, 0x30, 0x30, 0x52, 0x10, 0x63, 0x78, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x69, 0x0a, 0x15,
	0x63, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13,
	0x22, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x52, 0x12, 0x63, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x10, 0x63, 0x78, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x15, 0x92, 0x41, 0x12, 0x4a,
	0x10, 0x7b, 0x22, 0x74, 0x65, 0x73, 0x74, 0x22, 0x3a, 0x20, 0x22, 0x74, 0x65, 0x73, 0x74, 0x22,
	0x7d, 0x52, 0x0e, 0x63, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x60, 0x0a, 0x12, 0x63, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65,
	0x64, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x15, 0x92, 0x41, 0x12,
	0x4a, 0x10, 0x22, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x6b, 0x65,
	0x79, 0x22, 0x52, 0x0f, 0x63, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x64, 0x75, 0x70,
	0x4b, 0x65, 0x79, 0x12, 0x7c, 0x0a, 0x11, 0x63, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x78, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x15, 0x92, 0x41, 0x12, 0x4a, 0x10,
	0x7b, 0x22, 0x74, 0x65, 0x73, 0x74, 0x22, 0x3a, 0x20, 0x22, 0x74, 0x65, 0x73, 0x74, 0x22, 0x7d,
	0x52, 0x0f, 0x63, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x43, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0xae, 0x02, 0x92, 0x41, 0xaa, 0x02, 0x0a, 0xae,
	0x01, 0x2a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x32, 0x27, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0xd2, 0x01, 0x0c, 0x63, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0xd2, 0x01, 0x0d, 0x63, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0xd2, 0x01, 0x0f, 0x63, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0xd2, 0x01, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0xd2,
	0x01, 0x12, 0x63, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0xd2, 0x01, 0x15, 0x63, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x10, 0x63,
	0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2a,
	0x77, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65,
	0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x59, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67,
	0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x65, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_events_v3_cx_event_proto_rawDescOnce sync.Once
	file_com_coralogixapis_events_v3_cx_event_proto_rawDescData = file_com_coralogixapis_events_v3_cx_event_proto_rawDesc
)

func file_com_coralogixapis_events_v3_cx_event_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_events_v3_cx_event_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_events_v3_cx_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_events_v3_cx_event_proto_rawDescData)
	})
	return file_com_coralogixapis_events_v3_cx_event_proto_rawDescData
}

var file_com_coralogixapis_events_v3_cx_event_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_com_coralogixapis_events_v3_cx_event_proto_goTypes = []any{
	(*CxEvent)(nil),                // 0: com.coralogixapis.events.v3.CxEvent
	nil,                            // 1: com.coralogixapis.events.v3.CxEvent.CxEventLabelsEntry
	nil,                            // 2: com.coralogixapis.events.v3.CxEvent.CxEventMetadataEntry
	(*wrapperspb.StringValue)(nil), // 3: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),  // 4: google.protobuf.Int32Value
	(*timestamppb.Timestamp)(nil),  // 5: google.protobuf.Timestamp
	(*structpb.Struct)(nil),        // 6: google.protobuf.Struct
}
var file_com_coralogixapis_events_v3_cx_event_proto_depIdxs = []int32{
	3, // 0: com.coralogixapis.events.v3.CxEvent.cx_event_key:type_name -> google.protobuf.StringValue
	3, // 1: com.coralogixapis.events.v3.CxEvent.cx_event_type:type_name -> google.protobuf.StringValue
	1, // 2: com.coralogixapis.events.v3.CxEvent.cx_event_labels:type_name -> com.coralogixapis.events.v3.CxEvent.CxEventLabelsEntry
	4, // 3: com.coralogixapis.events.v3.CxEvent.company_id:type_name -> google.protobuf.Int32Value
	5, // 4: com.coralogixapis.events.v3.CxEvent.cx_event_timestamp:type_name -> google.protobuf.Timestamp
	3, // 5: com.coralogixapis.events.v3.CxEvent.cx_event_payload_type:type_name -> google.protobuf.StringValue
	6, // 6: com.coralogixapis.events.v3.CxEvent.cx_event_payload:type_name -> google.protobuf.Struct
	3, // 7: com.coralogixapis.events.v3.CxEvent.cx_event_dedup_key:type_name -> google.protobuf.StringValue
	2, // 8: com.coralogixapis.events.v3.CxEvent.cx_event_metadata:type_name -> com.coralogixapis.events.v3.CxEvent.CxEventMetadataEntry
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_events_v3_cx_event_proto_init() }
func file_com_coralogixapis_events_v3_cx_event_proto_init() {
	if File_com_coralogixapis_events_v3_cx_event_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_events_v3_cx_event_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogixapis_events_v3_cx_event_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_events_v3_cx_event_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_events_v3_cx_event_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_events_v3_cx_event_proto = out.File
	file_com_coralogixapis_events_v3_cx_event_proto_rawDesc = nil
	file_com_coralogixapis_events_v3_cx_event_proto_goTypes = nil
	file_com_coralogixapis_events_v3_cx_event_proto_depIdxs = nil
}
