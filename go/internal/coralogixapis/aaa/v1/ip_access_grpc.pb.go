// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: com/coralogixapis/aaa/v1/ip_access.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IpAccessService_CreateCompanyIpAccessSettings_FullMethodName  = "/com.coralogixapis.aaa.v1.IpAccessService/CreateCompanyIpAccessSettings"
	IpAccessService_ReplaceCompanyIpAccessSettings_FullMethodName = "/com.coralogixapis.aaa.v1.IpAccessService/ReplaceCompanyIpAccessSettings"
	IpAccessService_GetCompanyIpAccessSettings_FullMethodName     = "/com.coralogixapis.aaa.v1.IpAccessService/GetCompanyIpAccessSettings"
	IpAccessService_DeleteCompanyIpAccessSettings_FullMethodName  = "/com.coralogixapis.aaa.v1.IpAccessService/DeleteCompanyIpAccessSettings"
)

// IpAccessServiceClient is the client API for IpAccessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpAccessServiceClient interface {
	CreateCompanyIpAccessSettings(ctx context.Context, in *CreateCompanyIpAccessSettingsRequest, opts ...grpc.CallOption) (*CreateCompanyIpAccessSettingsResponse, error)
	ReplaceCompanyIpAccessSettings(ctx context.Context, in *ReplaceCompanyIpAccessSettingsRequest, opts ...grpc.CallOption) (*ReplaceCompanyIpAccessSettingsResponse, error)
	GetCompanyIpAccessSettings(ctx context.Context, in *GetCompanyIpAccessSettingsRequest, opts ...grpc.CallOption) (*GetCompanyIpAccessSettingsResponse, error)
	DeleteCompanyIpAccessSettings(ctx context.Context, in *DeleteCompanyIpAccessSettingsRequest, opts ...grpc.CallOption) (*DeleteCompanyIpAccessSettingsResponse, error)
}

type ipAccessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIpAccessServiceClient(cc grpc.ClientConnInterface) IpAccessServiceClient {
	return &ipAccessServiceClient{cc}
}

func (c *ipAccessServiceClient) CreateCompanyIpAccessSettings(ctx context.Context, in *CreateCompanyIpAccessSettingsRequest, opts ...grpc.CallOption) (*CreateCompanyIpAccessSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCompanyIpAccessSettingsResponse)
	err := c.cc.Invoke(ctx, IpAccessService_CreateCompanyIpAccessSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipAccessServiceClient) ReplaceCompanyIpAccessSettings(ctx context.Context, in *ReplaceCompanyIpAccessSettingsRequest, opts ...grpc.CallOption) (*ReplaceCompanyIpAccessSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceCompanyIpAccessSettingsResponse)
	err := c.cc.Invoke(ctx, IpAccessService_ReplaceCompanyIpAccessSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipAccessServiceClient) GetCompanyIpAccessSettings(ctx context.Context, in *GetCompanyIpAccessSettingsRequest, opts ...grpc.CallOption) (*GetCompanyIpAccessSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCompanyIpAccessSettingsResponse)
	err := c.cc.Invoke(ctx, IpAccessService_GetCompanyIpAccessSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipAccessServiceClient) DeleteCompanyIpAccessSettings(ctx context.Context, in *DeleteCompanyIpAccessSettingsRequest, opts ...grpc.CallOption) (*DeleteCompanyIpAccessSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCompanyIpAccessSettingsResponse)
	err := c.cc.Invoke(ctx, IpAccessService_DeleteCompanyIpAccessSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpAccessServiceServer is the server API for IpAccessService service.
// All implementations must embed UnimplementedIpAccessServiceServer
// for forward compatibility.
type IpAccessServiceServer interface {
	CreateCompanyIpAccessSettings(context.Context, *CreateCompanyIpAccessSettingsRequest) (*CreateCompanyIpAccessSettingsResponse, error)
	ReplaceCompanyIpAccessSettings(context.Context, *ReplaceCompanyIpAccessSettingsRequest) (*ReplaceCompanyIpAccessSettingsResponse, error)
	GetCompanyIpAccessSettings(context.Context, *GetCompanyIpAccessSettingsRequest) (*GetCompanyIpAccessSettingsResponse, error)
	DeleteCompanyIpAccessSettings(context.Context, *DeleteCompanyIpAccessSettingsRequest) (*DeleteCompanyIpAccessSettingsResponse, error)
	mustEmbedUnimplementedIpAccessServiceServer()
}

// UnimplementedIpAccessServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIpAccessServiceServer struct{}

func (UnimplementedIpAccessServiceServer) CreateCompanyIpAccessSettings(context.Context, *CreateCompanyIpAccessSettingsRequest) (*CreateCompanyIpAccessSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompanyIpAccessSettings not implemented")
}
func (UnimplementedIpAccessServiceServer) ReplaceCompanyIpAccessSettings(context.Context, *ReplaceCompanyIpAccessSettingsRequest) (*ReplaceCompanyIpAccessSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceCompanyIpAccessSettings not implemented")
}
func (UnimplementedIpAccessServiceServer) GetCompanyIpAccessSettings(context.Context, *GetCompanyIpAccessSettingsRequest) (*GetCompanyIpAccessSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyIpAccessSettings not implemented")
}
func (UnimplementedIpAccessServiceServer) DeleteCompanyIpAccessSettings(context.Context, *DeleteCompanyIpAccessSettingsRequest) (*DeleteCompanyIpAccessSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompanyIpAccessSettings not implemented")
}
func (UnimplementedIpAccessServiceServer) mustEmbedUnimplementedIpAccessServiceServer() {}
func (UnimplementedIpAccessServiceServer) testEmbeddedByValue()                         {}

// UnsafeIpAccessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpAccessServiceServer will
// result in compilation errors.
type UnsafeIpAccessServiceServer interface {
	mustEmbedUnimplementedIpAccessServiceServer()
}

func RegisterIpAccessServiceServer(s grpc.ServiceRegistrar, srv IpAccessServiceServer) {
	// If the following call pancis, it indicates UnimplementedIpAccessServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IpAccessService_ServiceDesc, srv)
}

func _IpAccessService_CreateCompanyIpAccessSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyIpAccessSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpAccessServiceServer).CreateCompanyIpAccessSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpAccessService_CreateCompanyIpAccessSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpAccessServiceServer).CreateCompanyIpAccessSettings(ctx, req.(*CreateCompanyIpAccessSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpAccessService_ReplaceCompanyIpAccessSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceCompanyIpAccessSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpAccessServiceServer).ReplaceCompanyIpAccessSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpAccessService_ReplaceCompanyIpAccessSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpAccessServiceServer).ReplaceCompanyIpAccessSettings(ctx, req.(*ReplaceCompanyIpAccessSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpAccessService_GetCompanyIpAccessSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyIpAccessSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpAccessServiceServer).GetCompanyIpAccessSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpAccessService_GetCompanyIpAccessSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpAccessServiceServer).GetCompanyIpAccessSettings(ctx, req.(*GetCompanyIpAccessSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpAccessService_DeleteCompanyIpAccessSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompanyIpAccessSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpAccessServiceServer).DeleteCompanyIpAccessSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpAccessService_DeleteCompanyIpAccessSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpAccessServiceServer).DeleteCompanyIpAccessSettings(ctx, req.(*DeleteCompanyIpAccessSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IpAccessService_ServiceDesc is the grpc.ServiceDesc for IpAccessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IpAccessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogixapis.aaa.v1.IpAccessService",
	HandlerType: (*IpAccessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCompanyIpAccessSettings",
			Handler:    _IpAccessService_CreateCompanyIpAccessSettings_Handler,
		},
		{
			MethodName: "ReplaceCompanyIpAccessSettings",
			Handler:    _IpAccessService_ReplaceCompanyIpAccessSettings_Handler,
		},
		{
			MethodName: "GetCompanyIpAccessSettings",
			Handler:    _IpAccessService_GetCompanyIpAccessSettings_Handler,
		},
		{
			MethodName: "DeleteCompanyIpAccessSettings",
			Handler:    _IpAccessService_DeleteCompanyIpAccessSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogixapis/aaa/v1/ip_access.proto",
}
