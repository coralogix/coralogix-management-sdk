// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.3
// source: com/coralogixapis/aaa/sso/v2/saml.proto

package v2

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetSPParametersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TeamId        uint32                 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSPParametersRequest) Reset() {
	*x = GetSPParametersRequest{}
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSPParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSPParametersRequest) ProtoMessage() {}

func (x *GetSPParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSPParametersRequest.ProtoReflect.Descriptor instead.
func (*GetSPParametersRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDescGZIP(), []int{0}
}

func (x *GetSPParametersRequest) GetTeamId() uint32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

type SPParameters struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	MetadataUrl                 string                 `protobuf:"bytes,1,opt,name=metadata_url,json=metadataUrl,proto3" json:"metadata_url,omitempty"`
	SigningCertPem              string                 `protobuf:"bytes,2,opt,name=signing_cert_pem,json=signingCertPem,proto3" json:"signing_cert_pem,omitempty"`
	NameIdFormat                string                 `protobuf:"bytes,3,opt,name=name_id_format,json=nameIdFormat,proto3" json:"name_id_format,omitempty"`
	AssertionConsumerServiceUrl string                 `protobuf:"bytes,4,opt,name=assertion_consumer_service_url,json=assertionConsumerServiceUrl,proto3" json:"assertion_consumer_service_url,omitempty"`
	Binding                     string                 `protobuf:"bytes,5,opt,name=binding,proto3" json:"binding,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *SPParameters) Reset() {
	*x = SPParameters{}
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SPParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPParameters) ProtoMessage() {}

func (x *SPParameters) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPParameters.ProtoReflect.Descriptor instead.
func (*SPParameters) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDescGZIP(), []int{1}
}

func (x *SPParameters) GetMetadataUrl() string {
	if x != nil {
		return x.MetadataUrl
	}
	return ""
}

func (x *SPParameters) GetSigningCertPem() string {
	if x != nil {
		return x.SigningCertPem
	}
	return ""
}

func (x *SPParameters) GetNameIdFormat() string {
	if x != nil {
		return x.NameIdFormat
	}
	return ""
}

func (x *SPParameters) GetAssertionConsumerServiceUrl() string {
	if x != nil {
		return x.AssertionConsumerServiceUrl
	}
	return ""
}

func (x *SPParameters) GetBinding() string {
	if x != nil {
		return x.Binding
	}
	return ""
}

type GetSPParametersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Params        *SPParameters          `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSPParametersResponse) Reset() {
	*x = GetSPParametersResponse{}
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSPParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSPParametersResponse) ProtoMessage() {}

func (x *GetSPParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSPParametersResponse.ProtoReflect.Descriptor instead.
func (*GetSPParametersResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDescGZIP(), []int{2}
}

func (x *GetSPParametersResponse) GetParams() *SPParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

type IDPParameters struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Active bool                   `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	// Types that are valid to be assigned to Metadata:
	//
	//	*IDPParameters_MetadataUrl
	//	*IDPParameters_MetadataContent
	Metadata      isIDPParameters_Metadata `protobuf_oneof:"metadata"`
	TeamEntityId  *uint32                  `protobuf:"varint,5,opt,name=team_entity_id,json=teamEntityId,proto3,oneof" json:"team_entity_id,omitempty"`
	GroupNames    []string                 `protobuf:"bytes,6,rep,name=group_names,json=groupNames,proto3" json:"group_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IDPParameters) Reset() {
	*x = IDPParameters{}
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IDPParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDPParameters) ProtoMessage() {}

func (x *IDPParameters) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDPParameters.ProtoReflect.Descriptor instead.
func (*IDPParameters) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDescGZIP(), []int{3}
}

func (x *IDPParameters) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *IDPParameters) GetMetadata() isIDPParameters_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *IDPParameters) GetMetadataUrl() string {
	if x != nil {
		if x, ok := x.Metadata.(*IDPParameters_MetadataUrl); ok {
			return x.MetadataUrl
		}
	}
	return ""
}

func (x *IDPParameters) GetMetadataContent() string {
	if x != nil {
		if x, ok := x.Metadata.(*IDPParameters_MetadataContent); ok {
			return x.MetadataContent
		}
	}
	return ""
}

func (x *IDPParameters) GetTeamEntityId() uint32 {
	if x != nil && x.TeamEntityId != nil {
		return *x.TeamEntityId
	}
	return 0
}

func (x *IDPParameters) GetGroupNames() []string {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

type isIDPParameters_Metadata interface {
	isIDPParameters_Metadata()
}

type IDPParameters_MetadataUrl struct {
	MetadataUrl string `protobuf:"bytes,3,opt,name=metadata_url,json=metadataUrl,proto3,oneof"`
}

type IDPParameters_MetadataContent struct {
	MetadataContent string `protobuf:"bytes,4,opt,name=metadata_content,json=metadataContent,proto3,oneof"`
}

func (*IDPParameters_MetadataUrl) isIDPParameters_Metadata() {}

func (*IDPParameters_MetadataContent) isIDPParameters_Metadata() {}

type SetIDPParametersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TeamId        uint32                 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Params        *IDPParameters         `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetIDPParametersRequest) Reset() {
	*x = SetIDPParametersRequest{}
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetIDPParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIDPParametersRequest) ProtoMessage() {}

func (x *SetIDPParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIDPParametersRequest.ProtoReflect.Descriptor instead.
func (*SetIDPParametersRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDescGZIP(), []int{4}
}

func (x *SetIDPParametersRequest) GetTeamId() uint32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *SetIDPParametersRequest) GetParams() *IDPParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

type SetIDPParametersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetIDPParametersResponse) Reset() {
	*x = SetIDPParametersResponse{}
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetIDPParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIDPParametersResponse) ProtoMessage() {}

func (x *SetIDPParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIDPParametersResponse.ProtoReflect.Descriptor instead.
func (*SetIDPParametersResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDescGZIP(), []int{5}
}

type SetActiveRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TeamId        uint32                 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	IsActive      bool                   `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetActiveRequest) Reset() {
	*x = SetActiveRequest{}
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetActiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActiveRequest) ProtoMessage() {}

func (x *SetActiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActiveRequest.ProtoReflect.Descriptor instead.
func (*SetActiveRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDescGZIP(), []int{6}
}

func (x *SetActiveRequest) GetTeamId() uint32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *SetActiveRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type SetActiveResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetActiveResponse) Reset() {
	*x = SetActiveResponse{}
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetActiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActiveResponse) ProtoMessage() {}

func (x *SetActiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActiveResponse.ProtoReflect.Descriptor instead.
func (*SetActiveResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDescGZIP(), []int{7}
}

type GetConfigurationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TeamId        uint32                 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfigurationRequest) Reset() {
	*x = GetConfigurationRequest{}
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigurationRequest) ProtoMessage() {}

func (x *GetConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigurationRequest.ProtoReflect.Descriptor instead.
func (*GetConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDescGZIP(), []int{8}
}

func (x *GetConfigurationRequest) GetTeamId() uint32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

type GetConfigurationResponse struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	TeamId        uint32                               `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	SpParameters  *SPParameters                        `protobuf:"bytes,2,opt,name=sp_parameters,json=spParameters,proto3" json:"sp_parameters,omitempty"`
	IdpParameters *IDPParameters                       `protobuf:"bytes,3,opt,name=idp_parameters,json=idpParameters,proto3" json:"idp_parameters,omitempty"`
	IdpDetails    *GetConfigurationResponse_IDPDetails `protobuf:"bytes,4,opt,name=idp_details,json=idpDetails,proto3,oneof" json:"idp_details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfigurationResponse) Reset() {
	*x = GetConfigurationResponse{}
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigurationResponse) ProtoMessage() {}

func (x *GetConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigurationResponse.ProtoReflect.Descriptor instead.
func (*GetConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDescGZIP(), []int{9}
}

func (x *GetConfigurationResponse) GetTeamId() uint32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *GetConfigurationResponse) GetSpParameters() *SPParameters {
	if x != nil {
		return x.SpParameters
	}
	return nil
}

func (x *GetConfigurationResponse) GetIdpParameters() *IDPParameters {
	if x != nil {
		return x.IdpParameters
	}
	return nil
}

func (x *GetConfigurationResponse) GetIdpDetails() *GetConfigurationResponse_IDPDetails {
	if x != nil {
		return x.IdpDetails
	}
	return nil
}

type GetConfigurationResponse_IDPDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Icon          string                 `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfigurationResponse_IDPDetails) Reset() {
	*x = GetConfigurationResponse_IDPDetails{}
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigurationResponse_IDPDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigurationResponse_IDPDetails) ProtoMessage() {}

func (x *GetConfigurationResponse_IDPDetails) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigurationResponse_IDPDetails.ProtoReflect.Descriptor instead.
func (*GetConfigurationResponse_IDPDetails) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDescGZIP(), []int{9, 0}
}

func (x *GetConfigurationResponse_IDPDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetConfigurationResponse_IDPDetails) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

var File_com_coralogixapis_aaa_sso_v2_saml_proto protoreflect.FileDescriptor

var file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDesc = []byte{
	0x0a, 0x27, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x73, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x73,
	0x61, 0x6d, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x61, 0x61,
	0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x50, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x4a, 0x07, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x3a, 0xfc, 0x01, 0x92, 0x41, 0xf8, 0x01, 0x0a, 0x78,
	0x2a, 0x19, 0x47, 0x65, 0x74, 0x20, 0x53, 0x50, 0x20, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x51, 0x54, 0x68, 0x69,
	0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x53, 0x41, 0x4d, 0x4c, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xd2, 0x01,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x2a, 0x7c, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64,
	0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20,
	0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x59, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69,
	0x64, 0x65, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x65, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x22, 0xae, 0x05, 0x0a, 0x0c, 0x53, 0x50, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92,
	0x41, 0x36, 0x4a, 0x34, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x3c, 0x2e, 0x2e,
	0x2e, 0x3e, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x70, 0x2f,
	0x3c, 0x2e, 0x2e, 0x2e, 0x3e, 0x2f, 0x73, 0x73, 0x6f, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x3c, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x12, 0x92, 0x41, 0x0f, 0x4a, 0x0d, 0x22, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x22, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74,
	0x50, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b,
	0x4a, 0x09, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x0c, 0x6e, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x55, 0x0a, 0x1e, 0x61, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x4a, 0x0b, 0x22, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x52, 0x1b, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x28, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x22, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0xca, 0x02, 0x92, 0x41, 0xc6,
	0x02, 0x0a, 0xc5, 0x01, 0x2a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x32, 0x48, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x53, 0x41, 0x4d, 0x4c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xd2, 0x01, 0x0c, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0xd2, 0x01, 0x10, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x6d, 0xd2, 0x01, 0x0e,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0xd2, 0x01,
	0x1e, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0xd2,
	0x01, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2a, 0x7c, 0x0a, 0x1f, 0x46, 0x69, 0x6e,
	0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x59, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x65, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x22, 0xfc, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53,
	0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x61, 0x61, 0x2e, 0x73, 0x73, 0x6f, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x3a, 0x9c, 0x02, 0x92, 0x41, 0x98, 0x02, 0x0a, 0x97,
	0x01, 0x2a, 0x1a, 0x47, 0x65, 0x74, 0x20, 0x53, 0x50, 0x20, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x70, 0x54,
	0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x61,
	0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20,
	0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x53, 0x41, 0x4d, 0x4c, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xd2,
	0x01, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2a, 0x7c, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64,
	0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20,
	0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x59, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69,
	0x64, 0x65, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x65, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x22, 0xfa, 0x04, 0x0a, 0x0d, 0x49, 0x44, 0x50, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0x92, 0x41, 0x06, 0x4a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x5e, 0x0a, 0x0c, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x39, 0x92, 0x41, 0x36, 0x4a, 0x34, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x3c, 0x2e, 0x2e, 0x2e, 0x3e, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x70, 0x70, 0x2f, 0x3c, 0x2e, 0x2e, 0x2e, 0x3e, 0x2f, 0x73, 0x73, 0x6f, 0x2f, 0x73, 0x61,
	0x6d, 0x6c, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x48, 0x00, 0x52, 0x0b,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x46, 0x0a, 0x10, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x4a, 0x14, 0x22, 0x3c, 0x3f, 0x78,
	0x6d, 0x6c, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x20, 0x2e, 0x2e, 0x2e, 0x22,
	0x48, 0x00, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0x92, 0x41, 0x09,
	0x4a, 0x07, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x48, 0x01, 0x52, 0x0c, 0x74, 0x65, 0x61,
	0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0b,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x4a, 0x0a, 0x5b, 0x22, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x31,
	0x22, 0x5d, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x3a, 0x93,
	0x02, 0x92, 0x41, 0x8f, 0x02, 0x0a, 0x8e, 0x01, 0x2a, 0x0e, 0x49, 0x44, 0x50, 0x20, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x32, 0x49, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x53, 0x41, 0x4d, 0x4c, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0xd2, 0x01, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0xd2, 0x01, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xd2, 0x01, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2a, 0x7c, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f,
	0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x65, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x59, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65,
	0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x22, 0xfc, 0x02, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x49, 0x44, 0x50, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x61, 0x61,
	0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x44, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x3a, 0x82, 0x02,
	0x92, 0x41, 0xfe, 0x01, 0x0a, 0x7e, 0x2a, 0x1a, 0x53, 0x65, 0x74, 0x20, 0x49, 0x44, 0x50, 0x20,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x4d, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x53, 0x41, 0x4d, 0x4c, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0xd2, 0x01, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x2a, 0x7c, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74,
	0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x65, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x59, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x49, 0x44, 0x50, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9,
	0x02, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x3a, 0xfe, 0x01, 0x92, 0x41, 0xfa, 0x01,
	0x0a, 0x7a, 0x2a, 0x12, 0x53, 0x65, 0x74, 0x20, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x4e, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x75,
	0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20,
	0x6f, 0x72, 0x20, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20,
	0x53, 0x41, 0x4d, 0x4c, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xd2, 0x01, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0xd2, 0x01, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2a, 0x7c, 0x0a, 0x1f,
	0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x20, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x59, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x65,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xcb, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x3a, 0x96, 0x02, 0x92, 0x41, 0x92, 0x02, 0x0a, 0x91, 0x01, 0x2a, 0x19,
	0x47, 0x65, 0x74, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x6a, 0x54, 0x68, 0x69, 0x73, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x69,
	0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x53, 0x41, 0x4d, 0x4c, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0xd2, 0x01, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x2a,
	0x7c, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65,
	0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x59, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x2d, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x22, 0xe2, 0x05,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0d, 0x73, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61,
	0x61, 0x61, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x50, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x73, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x69, 0x64, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x61, 0x61, 0x61, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x44, 0x50, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0d, 0x69, 0x64, 0x70, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x67, 0x0a, 0x0b, 0x69, 0x64, 0x70, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x61, 0x61, 0x61, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x44, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01,
	0x01, 0x1a, 0x34, 0x0a, 0x0a, 0x49, 0x44, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x3a, 0xd8, 0x02, 0x92, 0x41, 0xd4, 0x02, 0x0a, 0xd3,
	0x01, 0x2a, 0x1a, 0x47, 0x65, 0x74, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x89, 0x01,
	0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x20,
	0x61, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f,
	0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x53, 0x41,
	0x4d, 0x4c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xd2, 0x01, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0d, 0x73, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0xd2, 0x01, 0x0e, 0x69, 0x64, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x2a, 0x7c, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74,
	0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x65, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x59, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x64, 0x70, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x32, 0xa2, 0x05, 0x0a, 0x18, 0x53, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xa2, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x61, 0x61, 0x2e, 0x73, 0x73, 0x6f, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x61,
	0x61, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x50, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x73,
	0x6f, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2f, 0x73, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x49, 0x44, 0x50, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x61,
	0x61, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x44, 0x50, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x61, 0x61, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x65, 0x74, 0x49, 0x44, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x73, 0x6f, 0x2f, 0x73, 0x61, 0x6d,
	0x6c, 0x2f, 0x69, 0x64, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x8c, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x61, 0x61, 0x61, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x61, 0x61, 0x61, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x73, 0x6f, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0xa5, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x61, 0x61, 0x2e, 0x73, 0x73, 0x6f,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x61, 0x61, 0x61, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x73, 0x6f, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDescOnce sync.Once
	file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDescData = file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDesc
)

func file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDescData)
	})
	return file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDescData
}

var file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_com_coralogixapis_aaa_sso_v2_saml_proto_goTypes = []any{
	(*GetSPParametersRequest)(nil),              // 0: com.coralogixapis.aaa.sso.v2.GetSPParametersRequest
	(*SPParameters)(nil),                        // 1: com.coralogixapis.aaa.sso.v2.SPParameters
	(*GetSPParametersResponse)(nil),             // 2: com.coralogixapis.aaa.sso.v2.GetSPParametersResponse
	(*IDPParameters)(nil),                       // 3: com.coralogixapis.aaa.sso.v2.IDPParameters
	(*SetIDPParametersRequest)(nil),             // 4: com.coralogixapis.aaa.sso.v2.SetIDPParametersRequest
	(*SetIDPParametersResponse)(nil),            // 5: com.coralogixapis.aaa.sso.v2.SetIDPParametersResponse
	(*SetActiveRequest)(nil),                    // 6: com.coralogixapis.aaa.sso.v2.SetActiveRequest
	(*SetActiveResponse)(nil),                   // 7: com.coralogixapis.aaa.sso.v2.SetActiveResponse
	(*GetConfigurationRequest)(nil),             // 8: com.coralogixapis.aaa.sso.v2.GetConfigurationRequest
	(*GetConfigurationResponse)(nil),            // 9: com.coralogixapis.aaa.sso.v2.GetConfigurationResponse
	(*GetConfigurationResponse_IDPDetails)(nil), // 10: com.coralogixapis.aaa.sso.v2.GetConfigurationResponse.IDPDetails
}
var file_com_coralogixapis_aaa_sso_v2_saml_proto_depIdxs = []int32{
	1,  // 0: com.coralogixapis.aaa.sso.v2.GetSPParametersResponse.params:type_name -> com.coralogixapis.aaa.sso.v2.SPParameters
	3,  // 1: com.coralogixapis.aaa.sso.v2.SetIDPParametersRequest.params:type_name -> com.coralogixapis.aaa.sso.v2.IDPParameters
	1,  // 2: com.coralogixapis.aaa.sso.v2.GetConfigurationResponse.sp_parameters:type_name -> com.coralogixapis.aaa.sso.v2.SPParameters
	3,  // 3: com.coralogixapis.aaa.sso.v2.GetConfigurationResponse.idp_parameters:type_name -> com.coralogixapis.aaa.sso.v2.IDPParameters
	10, // 4: com.coralogixapis.aaa.sso.v2.GetConfigurationResponse.idp_details:type_name -> com.coralogixapis.aaa.sso.v2.GetConfigurationResponse.IDPDetails
	0,  // 5: com.coralogixapis.aaa.sso.v2.SamlConfigurationService.GetSPParameters:input_type -> com.coralogixapis.aaa.sso.v2.GetSPParametersRequest
	4,  // 6: com.coralogixapis.aaa.sso.v2.SamlConfigurationService.SetIDPParameters:input_type -> com.coralogixapis.aaa.sso.v2.SetIDPParametersRequest
	6,  // 7: com.coralogixapis.aaa.sso.v2.SamlConfigurationService.SetActive:input_type -> com.coralogixapis.aaa.sso.v2.SetActiveRequest
	8,  // 8: com.coralogixapis.aaa.sso.v2.SamlConfigurationService.GetConfiguration:input_type -> com.coralogixapis.aaa.sso.v2.GetConfigurationRequest
	2,  // 9: com.coralogixapis.aaa.sso.v2.SamlConfigurationService.GetSPParameters:output_type -> com.coralogixapis.aaa.sso.v2.GetSPParametersResponse
	5,  // 10: com.coralogixapis.aaa.sso.v2.SamlConfigurationService.SetIDPParameters:output_type -> com.coralogixapis.aaa.sso.v2.SetIDPParametersResponse
	7,  // 11: com.coralogixapis.aaa.sso.v2.SamlConfigurationService.SetActive:output_type -> com.coralogixapis.aaa.sso.v2.SetActiveResponse
	9,  // 12: com.coralogixapis.aaa.sso.v2.SamlConfigurationService.GetConfiguration:output_type -> com.coralogixapis.aaa.sso.v2.GetConfigurationResponse
	9,  // [9:13] is the sub-list for method output_type
	5,  // [5:9] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_aaa_sso_v2_saml_proto_init() }
func file_com_coralogixapis_aaa_sso_v2_saml_proto_init() {
	if File_com_coralogixapis_aaa_sso_v2_saml_proto != nil {
		return
	}
	file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[3].OneofWrappers = []any{
		(*IDPParameters_MetadataUrl)(nil),
		(*IDPParameters_MetadataContent)(nil),
	}
	file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogixapis_aaa_sso_v2_saml_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_aaa_sso_v2_saml_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_aaa_sso_v2_saml_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_aaa_sso_v2_saml_proto = out.File
	file_com_coralogixapis_aaa_sso_v2_saml_proto_rawDesc = nil
	file_com_coralogixapis_aaa_sso_v2_saml_proto_goTypes = nil
	file_com_coralogixapis_aaa_sso_v2_saml_proto_depIdxs = nil
}
