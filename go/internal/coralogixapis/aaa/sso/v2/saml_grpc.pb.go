// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: com/coralogixapis/aaa/sso/v2/saml.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SamlConfigurationService_GetSPParameters_FullMethodName  = "/com.coralogixapis.aaa.sso.v2.SamlConfigurationService/GetSPParameters"
	SamlConfigurationService_SetIDPParameters_FullMethodName = "/com.coralogixapis.aaa.sso.v2.SamlConfigurationService/SetIDPParameters"
	SamlConfigurationService_SetActive_FullMethodName        = "/com.coralogixapis.aaa.sso.v2.SamlConfigurationService/SetActive"
	SamlConfigurationService_GetConfiguration_FullMethodName = "/com.coralogixapis.aaa.sso.v2.SamlConfigurationService/GetConfiguration"
)

// SamlConfigurationServiceClient is the client API for SamlConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SamlConfigurationServiceClient interface {
	GetSPParameters(ctx context.Context, in *GetSPParametersRequest, opts ...grpc.CallOption) (*GetSPParametersResponse, error)
	SetIDPParameters(ctx context.Context, in *SetIDPParametersRequest, opts ...grpc.CallOption) (*SetIDPParametersResponse, error)
	SetActive(ctx context.Context, in *SetActiveRequest, opts ...grpc.CallOption) (*SetActiveResponse, error)
	GetConfiguration(ctx context.Context, in *GetConfigurationRequest, opts ...grpc.CallOption) (*GetConfigurationResponse, error)
}

type samlConfigurationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSamlConfigurationServiceClient(cc grpc.ClientConnInterface) SamlConfigurationServiceClient {
	return &samlConfigurationServiceClient{cc}
}

func (c *samlConfigurationServiceClient) GetSPParameters(ctx context.Context, in *GetSPParametersRequest, opts ...grpc.CallOption) (*GetSPParametersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSPParametersResponse)
	err := c.cc.Invoke(ctx, SamlConfigurationService_GetSPParameters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samlConfigurationServiceClient) SetIDPParameters(ctx context.Context, in *SetIDPParametersRequest, opts ...grpc.CallOption) (*SetIDPParametersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetIDPParametersResponse)
	err := c.cc.Invoke(ctx, SamlConfigurationService_SetIDPParameters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samlConfigurationServiceClient) SetActive(ctx context.Context, in *SetActiveRequest, opts ...grpc.CallOption) (*SetActiveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetActiveResponse)
	err := c.cc.Invoke(ctx, SamlConfigurationService_SetActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samlConfigurationServiceClient) GetConfiguration(ctx context.Context, in *GetConfigurationRequest, opts ...grpc.CallOption) (*GetConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigurationResponse)
	err := c.cc.Invoke(ctx, SamlConfigurationService_GetConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SamlConfigurationServiceServer is the server API for SamlConfigurationService service.
// All implementations must embed UnimplementedSamlConfigurationServiceServer
// for forward compatibility.
type SamlConfigurationServiceServer interface {
	GetSPParameters(context.Context, *GetSPParametersRequest) (*GetSPParametersResponse, error)
	SetIDPParameters(context.Context, *SetIDPParametersRequest) (*SetIDPParametersResponse, error)
	SetActive(context.Context, *SetActiveRequest) (*SetActiveResponse, error)
	GetConfiguration(context.Context, *GetConfigurationRequest) (*GetConfigurationResponse, error)
	mustEmbedUnimplementedSamlConfigurationServiceServer()
}

// UnimplementedSamlConfigurationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSamlConfigurationServiceServer struct{}

func (UnimplementedSamlConfigurationServiceServer) GetSPParameters(context.Context, *GetSPParametersRequest) (*GetSPParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSPParameters not implemented")
}
func (UnimplementedSamlConfigurationServiceServer) SetIDPParameters(context.Context, *SetIDPParametersRequest) (*SetIDPParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIDPParameters not implemented")
}
func (UnimplementedSamlConfigurationServiceServer) SetActive(context.Context, *SetActiveRequest) (*SetActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActive not implemented")
}
func (UnimplementedSamlConfigurationServiceServer) GetConfiguration(context.Context, *GetConfigurationRequest) (*GetConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}
func (UnimplementedSamlConfigurationServiceServer) mustEmbedUnimplementedSamlConfigurationServiceServer() {
}
func (UnimplementedSamlConfigurationServiceServer) testEmbeddedByValue() {}

// UnsafeSamlConfigurationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SamlConfigurationServiceServer will
// result in compilation errors.
type UnsafeSamlConfigurationServiceServer interface {
	mustEmbedUnimplementedSamlConfigurationServiceServer()
}

func RegisterSamlConfigurationServiceServer(s grpc.ServiceRegistrar, srv SamlConfigurationServiceServer) {
	// If the following call pancis, it indicates UnimplementedSamlConfigurationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SamlConfigurationService_ServiceDesc, srv)
}

func _SamlConfigurationService_GetSPParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSPParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamlConfigurationServiceServer).GetSPParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SamlConfigurationService_GetSPParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamlConfigurationServiceServer).GetSPParameters(ctx, req.(*GetSPParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamlConfigurationService_SetIDPParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIDPParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamlConfigurationServiceServer).SetIDPParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SamlConfigurationService_SetIDPParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamlConfigurationServiceServer).SetIDPParameters(ctx, req.(*SetIDPParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamlConfigurationService_SetActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamlConfigurationServiceServer).SetActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SamlConfigurationService_SetActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamlConfigurationServiceServer).SetActive(ctx, req.(*SetActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamlConfigurationService_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamlConfigurationServiceServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SamlConfigurationService_GetConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamlConfigurationServiceServer).GetConfiguration(ctx, req.(*GetConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SamlConfigurationService_ServiceDesc is the grpc.ServiceDesc for SamlConfigurationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SamlConfigurationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogixapis.aaa.sso.v2.SamlConfigurationService",
	HandlerType: (*SamlConfigurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSPParameters",
			Handler:    _SamlConfigurationService_GetSPParameters_Handler,
		},
		{
			MethodName: "SetIDPParameters",
			Handler:    _SamlConfigurationService_SetIDPParameters_Handler,
		},
		{
			MethodName: "SetActive",
			Handler:    _SamlConfigurationService_SetActive_Handler,
		},
		{
			MethodName: "GetConfiguration",
			Handler:    _SamlConfigurationService_GetConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogixapis/aaa/sso/v2/saml.proto",
}
