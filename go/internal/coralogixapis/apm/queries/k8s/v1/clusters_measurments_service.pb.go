// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.1
// source: com/coralogixapis/apm/queries/k8s/v1/clusters_measurments_service.proto

package v1

import (
	_ "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/common/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListClustersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filters       *ClusterFilters        `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	mi := &file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListClustersRequest) GetFilters() *ClusterFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListClustersResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Clusters      []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersResponse) Reset() {
	*x = ListClustersResponse{}
	mi := &file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersResponse) ProtoMessage() {}

func (x *ListClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersResponse.ProtoReflect.Descriptor instead.
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListClustersResponse) GetClusters() []*wrapperspb.StringValue {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type ListClusterStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filters       *ClusterFilters        `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterStatsRequest) Reset() {
	*x = ListClusterStatsRequest{}
	mi := &file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterStatsRequest) ProtoMessage() {}

func (x *ListClusterStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterStatsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterStatsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListClusterStatsRequest) GetFilters() *ClusterFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListClusterStatsResponse struct {
	state           protoimpl.MessageState            `protogen:"open.v1"`
	Stats           map[string]*wrapperspb.Int32Value `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SelectedCluster *Cluster                          `protobuf:"bytes,2,opt,name=selected_cluster,json=selectedCluster,proto3" json:"selected_cluster,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListClusterStatsResponse) Reset() {
	*x = ListClusterStatsResponse{}
	mi := &file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterStatsResponse) ProtoMessage() {}

func (x *ListClusterStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterStatsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterStatsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListClusterStatsResponse) GetStats() map[string]*wrapperspb.Int32Value {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *ListClusterStatsResponse) GetSelectedCluster() *Cluster {
	if x != nil {
		return x.SelectedCluster
	}
	return nil
}

type ListClusterTopKRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filters       *ClusterFilters        `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
	Options       *ClusterOptions        `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterTopKRequest) Reset() {
	*x = ListClusterTopKRequest{}
	mi := &file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterTopKRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterTopKRequest) ProtoMessage() {}

func (x *ListClusterTopKRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterTopKRequest.ProtoReflect.Descriptor instead.
func (*ListClusterTopKRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListClusterTopKRequest) GetFilters() *ClusterFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListClusterTopKRequest) GetOptions() *ClusterOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ListClusterTopKResponse struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Tables        map[string]*ClusterWidgetWrapper `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterTopKResponse) Reset() {
	*x = ListClusterTopKResponse{}
	mi := &file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterTopKResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterTopKResponse) ProtoMessage() {}

func (x *ListClusterTopKResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterTopKResponse.ProtoReflect.Descriptor instead.
func (*ListClusterTopKResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListClusterTopKResponse) GetTables() map[string]*ClusterWidgetWrapper {
	if x != nil {
		return x.Tables
	}
	return nil
}

type ListClusterMetricsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filters       *ClusterFilters        `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterMetricsRequest) Reset() {
	*x = ListClusterMetricsRequest{}
	mi := &file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterMetricsRequest) ProtoMessage() {}

func (x *ListClusterMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterMetricsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterMetricsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListClusterMetricsRequest) GetFilters() *ClusterFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListClusterMetricsResponse struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Widgets       map[string]*ClusterWidgetWrapper `protobuf:"bytes,1,rep,name=widgets,proto3" json:"widgets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterMetricsResponse) Reset() {
	*x = ListClusterMetricsResponse{}
	mi := &file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterMetricsResponse) ProtoMessage() {}

func (x *ListClusterMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterMetricsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterMetricsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListClusterMetricsResponse) GetWidgets() map[string]*ClusterWidgetWrapper {
	if x != nil {
		return x.Widgets
	}
	return nil
}

type ListNamesRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Widget        *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=widget,proto3" json:"widget,omitempty"`
	SelectedSlice *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=selected_slice,json=selectedSlice,proto3" json:"selected_slice,omitempty"`
	Filters       *ClusterFilters         `protobuf:"bytes,3,opt,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNamesRequest) Reset() {
	*x = ListNamesRequest{}
	mi := &file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamesRequest) ProtoMessage() {}

func (x *ListNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamesRequest.ProtoReflect.Descriptor instead.
func (*ListNamesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListNamesRequest) GetWidget() *wrapperspb.StringValue {
	if x != nil {
		return x.Widget
	}
	return nil
}

func (x *ListNamesRequest) GetSelectedSlice() *wrapperspb.StringValue {
	if x != nil {
		return x.SelectedSlice
	}
	return nil
}

func (x *ListNamesRequest) GetFilters() *ClusterFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListNamesResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Object        K8SObject                 `protobuf:"varint,1,opt,name=object,proto3,enum=com.coralogixapis.apm.queries.k8s.v1.K8SObject" json:"object,omitempty"`
	Names         []*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	Tab           K8SObject                 `protobuf:"varint,3,opt,name=tab,proto3,enum=com.coralogixapis.apm.queries.k8s.v1.K8SObject" json:"tab,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNamesResponse) Reset() {
	*x = ListNamesResponse{}
	mi := &file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamesResponse) ProtoMessage() {}

func (x *ListNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamesResponse.ProtoReflect.Descriptor instead.
func (*ListNamesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListNamesResponse) GetObject() K8SObject {
	if x != nil {
		return x.Object
	}
	return K8SObject_K8S_OBJECT_UNSPECIFIED
}

func (x *ListNamesResponse) GetNames() []*wrapperspb.StringValue {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *ListNamesResponse) GetTab() K8SObject {
	if x != nil {
		return x.Tab
	}
	return K8SObject_K8S_OBJECT_UNSPECIFIED
}

var File_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto protoreflect.FileDescriptor

var file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_rawDesc = []byte{
	0x0a, 0x47, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x6b, 0x38, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3a, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x6b, 0x38, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x61, 0x70, 0x6d, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x6b, 0x38, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61,
	0x70, 0x6d, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x32, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x6b,
	0x38, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x65, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x61, 0x70, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x50, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x69, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xac, 0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a,
	0x55, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4e, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x4e, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xf3, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x6f, 0x70, 0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a,
	0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6b, 0x38,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x6f, 0x70, 0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x1a, 0x75, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6b, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x07, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x1a, 0x76, 0x0a, 0x0c,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x50,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6b, 0x38,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xdd, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x77, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x12,
	0x43, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61,
	0x70, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x38, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x03, 0x74, 0x61, 0x62, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x38, 0x73, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x03, 0x74, 0x61, 0x62, 0x32, 0xfa, 0x06, 0x0a, 0x0f, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa4,
	0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61,
	0x70, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0xc2, 0xb8, 0x02, 0x19, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x20, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0xba, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61,
	0x70, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70,
	0x6d, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0xc2, 0xb8, 0x02, 0x23, 0x0a,
	0x21, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x73, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x6f, 0x70, 0x4b, 0x12, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x4b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x17, 0xc2, 0xb8, 0x02, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x20, 0x74,
	0x6f, 0x70, 0x20, 0x6b, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0xb2, 0x01, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0xc2, 0xb8, 0x02, 0x15, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0xa3, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x25, 0xc2, 0xb8, 0x02, 0x21, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x20, 0x69, 0x6e,
	0x20, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_rawDescOnce sync.Once
	file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_rawDescData = file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_rawDesc
)

func file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_rawDescData)
	})
	return file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_rawDescData
}

var file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_goTypes = []any{
	(*ListClustersRequest)(nil),        // 0: com.coralogixapis.apm.queries.k8s.v1.ListClustersRequest
	(*ListClustersResponse)(nil),       // 1: com.coralogixapis.apm.queries.k8s.v1.ListClustersResponse
	(*ListClusterStatsRequest)(nil),    // 2: com.coralogixapis.apm.queries.k8s.v1.ListClusterStatsRequest
	(*ListClusterStatsResponse)(nil),   // 3: com.coralogixapis.apm.queries.k8s.v1.ListClusterStatsResponse
	(*ListClusterTopKRequest)(nil),     // 4: com.coralogixapis.apm.queries.k8s.v1.ListClusterTopKRequest
	(*ListClusterTopKResponse)(nil),    // 5: com.coralogixapis.apm.queries.k8s.v1.ListClusterTopKResponse
	(*ListClusterMetricsRequest)(nil),  // 6: com.coralogixapis.apm.queries.k8s.v1.ListClusterMetricsRequest
	(*ListClusterMetricsResponse)(nil), // 7: com.coralogixapis.apm.queries.k8s.v1.ListClusterMetricsResponse
	(*ListNamesRequest)(nil),           // 8: com.coralogixapis.apm.queries.k8s.v1.ListNamesRequest
	(*ListNamesResponse)(nil),          // 9: com.coralogixapis.apm.queries.k8s.v1.ListNamesResponse
	nil,                                // 10: com.coralogixapis.apm.queries.k8s.v1.ListClusterStatsResponse.StatsEntry
	nil,                                // 11: com.coralogixapis.apm.queries.k8s.v1.ListClusterTopKResponse.TablesEntry
	nil,                                // 12: com.coralogixapis.apm.queries.k8s.v1.ListClusterMetricsResponse.WidgetsEntry
	(*ClusterFilters)(nil),             // 13: com.coralogixapis.apm.queries.k8s.v1.ClusterFilters
	(*wrapperspb.StringValue)(nil),     // 14: google.protobuf.StringValue
	(*Cluster)(nil),                    // 15: com.coralogixapis.apm.queries.k8s.v1.Cluster
	(*ClusterOptions)(nil),             // 16: com.coralogixapis.apm.queries.k8s.v1.ClusterOptions
	(K8SObject)(0),                     // 17: com.coralogixapis.apm.queries.k8s.v1.K8sObject
	(*wrapperspb.Int32Value)(nil),      // 18: google.protobuf.Int32Value
	(*ClusterWidgetWrapper)(nil),       // 19: com.coralogixapis.apm.queries.k8s.v1.ClusterWidgetWrapper
}
var file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_depIdxs = []int32{
	13, // 0: com.coralogixapis.apm.queries.k8s.v1.ListClustersRequest.filters:type_name -> com.coralogixapis.apm.queries.k8s.v1.ClusterFilters
	14, // 1: com.coralogixapis.apm.queries.k8s.v1.ListClustersResponse.clusters:type_name -> google.protobuf.StringValue
	13, // 2: com.coralogixapis.apm.queries.k8s.v1.ListClusterStatsRequest.filters:type_name -> com.coralogixapis.apm.queries.k8s.v1.ClusterFilters
	10, // 3: com.coralogixapis.apm.queries.k8s.v1.ListClusterStatsResponse.stats:type_name -> com.coralogixapis.apm.queries.k8s.v1.ListClusterStatsResponse.StatsEntry
	15, // 4: com.coralogixapis.apm.queries.k8s.v1.ListClusterStatsResponse.selected_cluster:type_name -> com.coralogixapis.apm.queries.k8s.v1.Cluster
	13, // 5: com.coralogixapis.apm.queries.k8s.v1.ListClusterTopKRequest.filters:type_name -> com.coralogixapis.apm.queries.k8s.v1.ClusterFilters
	16, // 6: com.coralogixapis.apm.queries.k8s.v1.ListClusterTopKRequest.options:type_name -> com.coralogixapis.apm.queries.k8s.v1.ClusterOptions
	11, // 7: com.coralogixapis.apm.queries.k8s.v1.ListClusterTopKResponse.tables:type_name -> com.coralogixapis.apm.queries.k8s.v1.ListClusterTopKResponse.TablesEntry
	13, // 8: com.coralogixapis.apm.queries.k8s.v1.ListClusterMetricsRequest.filters:type_name -> com.coralogixapis.apm.queries.k8s.v1.ClusterFilters
	12, // 9: com.coralogixapis.apm.queries.k8s.v1.ListClusterMetricsResponse.widgets:type_name -> com.coralogixapis.apm.queries.k8s.v1.ListClusterMetricsResponse.WidgetsEntry
	14, // 10: com.coralogixapis.apm.queries.k8s.v1.ListNamesRequest.widget:type_name -> google.protobuf.StringValue
	14, // 11: com.coralogixapis.apm.queries.k8s.v1.ListNamesRequest.selected_slice:type_name -> google.protobuf.StringValue
	13, // 12: com.coralogixapis.apm.queries.k8s.v1.ListNamesRequest.filters:type_name -> com.coralogixapis.apm.queries.k8s.v1.ClusterFilters
	17, // 13: com.coralogixapis.apm.queries.k8s.v1.ListNamesResponse.object:type_name -> com.coralogixapis.apm.queries.k8s.v1.K8sObject
	14, // 14: com.coralogixapis.apm.queries.k8s.v1.ListNamesResponse.names:type_name -> google.protobuf.StringValue
	17, // 15: com.coralogixapis.apm.queries.k8s.v1.ListNamesResponse.tab:type_name -> com.coralogixapis.apm.queries.k8s.v1.K8sObject
	18, // 16: com.coralogixapis.apm.queries.k8s.v1.ListClusterStatsResponse.StatsEntry.value:type_name -> google.protobuf.Int32Value
	19, // 17: com.coralogixapis.apm.queries.k8s.v1.ListClusterTopKResponse.TablesEntry.value:type_name -> com.coralogixapis.apm.queries.k8s.v1.ClusterWidgetWrapper
	19, // 18: com.coralogixapis.apm.queries.k8s.v1.ListClusterMetricsResponse.WidgetsEntry.value:type_name -> com.coralogixapis.apm.queries.k8s.v1.ClusterWidgetWrapper
	0,  // 19: com.coralogixapis.apm.queries.k8s.v1.ClustersService.ListClusters:input_type -> com.coralogixapis.apm.queries.k8s.v1.ListClustersRequest
	2,  // 20: com.coralogixapis.apm.queries.k8s.v1.ClustersService.ListClusterStats:input_type -> com.coralogixapis.apm.queries.k8s.v1.ListClusterStatsRequest
	4,  // 21: com.coralogixapis.apm.queries.k8s.v1.ClustersService.ListClusterTopK:input_type -> com.coralogixapis.apm.queries.k8s.v1.ListClusterTopKRequest
	6,  // 22: com.coralogixapis.apm.queries.k8s.v1.ClustersService.ListClusterMetrics:input_type -> com.coralogixapis.apm.queries.k8s.v1.ListClusterMetricsRequest
	8,  // 23: com.coralogixapis.apm.queries.k8s.v1.ClustersService.ListNames:input_type -> com.coralogixapis.apm.queries.k8s.v1.ListNamesRequest
	1,  // 24: com.coralogixapis.apm.queries.k8s.v1.ClustersService.ListClusters:output_type -> com.coralogixapis.apm.queries.k8s.v1.ListClustersResponse
	3,  // 25: com.coralogixapis.apm.queries.k8s.v1.ClustersService.ListClusterStats:output_type -> com.coralogixapis.apm.queries.k8s.v1.ListClusterStatsResponse
	5,  // 26: com.coralogixapis.apm.queries.k8s.v1.ClustersService.ListClusterTopK:output_type -> com.coralogixapis.apm.queries.k8s.v1.ListClusterTopKResponse
	7,  // 27: com.coralogixapis.apm.queries.k8s.v1.ClustersService.ListClusterMetrics:output_type -> com.coralogixapis.apm.queries.k8s.v1.ListClusterMetricsResponse
	9,  // 28: com.coralogixapis.apm.queries.k8s.v1.ClustersService.ListNames:output_type -> com.coralogixapis.apm.queries.k8s.v1.ListNamesResponse
	24, // [24:29] is the sub-list for method output_type
	19, // [19:24] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_init() }
func file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_init() {
	if File_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto != nil {
		return
	}
	file_com_coralogixapis_apm_queries_k8s_v1_cluster_filters_proto_init()
	file_com_coralogixapis_apm_queries_k8s_v1_cluster_options_proto_init()
	file_com_coralogixapis_apm_queries_k8s_v1_cluster_widget_wrapper_proto_init()
	file_com_coralogixapis_apm_queries_k8s_v1_cluster_proto_init()
	file_com_coralogixapis_apm_queries_k8s_v1_objects_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto = out.File
	file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_rawDesc = nil
	file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_goTypes = nil
	file_com_coralogixapis_apm_queries_k8s_v1_clusters_measurments_service_proto_depIdxs = nil
}
