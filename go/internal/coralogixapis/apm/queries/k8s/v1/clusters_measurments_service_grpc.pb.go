// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.28.2
// source: com/coralogixapis/apm/queries/k8s/v1/clusters_measurments_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ClustersService_ListClusters_FullMethodName       = "/com.coralogixapis.apm.queries.k8s.v1.ClustersService/ListClusters"
	ClustersService_ListClusterStats_FullMethodName   = "/com.coralogixapis.apm.queries.k8s.v1.ClustersService/ListClusterStats"
	ClustersService_ListClusterTopK_FullMethodName    = "/com.coralogixapis.apm.queries.k8s.v1.ClustersService/ListClusterTopK"
	ClustersService_ListClusterMetrics_FullMethodName = "/com.coralogixapis.apm.queries.k8s.v1.ClustersService/ListClusterMetrics"
	ClustersService_ListNames_FullMethodName          = "/com.coralogixapis.apm.queries.k8s.v1.ClustersService/ListNames"
)

// ClustersServiceClient is the client API for ClustersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClustersServiceClient interface {
	ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
	ListClusterStats(ctx context.Context, in *ListClusterStatsRequest, opts ...grpc.CallOption) (*ListClusterStatsResponse, error)
	ListClusterTopK(ctx context.Context, in *ListClusterTopKRequest, opts ...grpc.CallOption) (*ListClusterTopKResponse, error)
	ListClusterMetrics(ctx context.Context, in *ListClusterMetricsRequest, opts ...grpc.CallOption) (*ListClusterMetricsResponse, error)
	ListNames(ctx context.Context, in *ListNamesRequest, opts ...grpc.CallOption) (*ListNamesResponse, error)
}

type clustersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClustersServiceClient(cc grpc.ClientConnInterface) ClustersServiceClient {
	return &clustersServiceClient{cc}
}

func (c *clustersServiceClient) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClustersResponse)
	err := c.cc.Invoke(ctx, ClustersService_ListClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListClusterStats(ctx context.Context, in *ListClusterStatsRequest, opts ...grpc.CallOption) (*ListClusterStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClusterStatsResponse)
	err := c.cc.Invoke(ctx, ClustersService_ListClusterStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListClusterTopK(ctx context.Context, in *ListClusterTopKRequest, opts ...grpc.CallOption) (*ListClusterTopKResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClusterTopKResponse)
	err := c.cc.Invoke(ctx, ClustersService_ListClusterTopK_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListClusterMetrics(ctx context.Context, in *ListClusterMetricsRequest, opts ...grpc.CallOption) (*ListClusterMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClusterMetricsResponse)
	err := c.cc.Invoke(ctx, ClustersService_ListClusterMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListNames(ctx context.Context, in *ListNamesRequest, opts ...grpc.CallOption) (*ListNamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNamesResponse)
	err := c.cc.Invoke(ctx, ClustersService_ListNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClustersServiceServer is the server API for ClustersService service.
// All implementations must embed UnimplementedClustersServiceServer
// for forward compatibility
type ClustersServiceServer interface {
	ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
	ListClusterStats(context.Context, *ListClusterStatsRequest) (*ListClusterStatsResponse, error)
	ListClusterTopK(context.Context, *ListClusterTopKRequest) (*ListClusterTopKResponse, error)
	ListClusterMetrics(context.Context, *ListClusterMetricsRequest) (*ListClusterMetricsResponse, error)
	ListNames(context.Context, *ListNamesRequest) (*ListNamesResponse, error)
	mustEmbedUnimplementedClustersServiceServer()
}

// UnimplementedClustersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClustersServiceServer struct {
}

func (UnimplementedClustersServiceServer) ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedClustersServiceServer) ListClusterStats(context.Context, *ListClusterStatsRequest) (*ListClusterStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusterStats not implemented")
}
func (UnimplementedClustersServiceServer) ListClusterTopK(context.Context, *ListClusterTopKRequest) (*ListClusterTopKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusterTopK not implemented")
}
func (UnimplementedClustersServiceServer) ListClusterMetrics(context.Context, *ListClusterMetricsRequest) (*ListClusterMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusterMetrics not implemented")
}
func (UnimplementedClustersServiceServer) ListNames(context.Context, *ListNamesRequest) (*ListNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNames not implemented")
}
func (UnimplementedClustersServiceServer) mustEmbedUnimplementedClustersServiceServer() {}

// UnsafeClustersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClustersServiceServer will
// result in compilation errors.
type UnsafeClustersServiceServer interface {
	mustEmbedUnimplementedClustersServiceServer()
}

func RegisterClustersServiceServer(s grpc.ServiceRegistrar, srv ClustersServiceServer) {
	s.RegisterService(&ClustersService_ServiceDesc, srv)
}

func _ClustersService_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClustersService_ListClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListClusters(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListClusterStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListClusterStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClustersService_ListClusterStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListClusterStats(ctx, req.(*ListClusterStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListClusterTopK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterTopKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListClusterTopK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClustersService_ListClusterTopK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListClusterTopK(ctx, req.(*ListClusterTopKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListClusterMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListClusterMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClustersService_ListClusterMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListClusterMetrics(ctx, req.(*ListClusterMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClustersService_ListNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListNames(ctx, req.(*ListNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClustersService_ServiceDesc is the grpc.ServiceDesc for ClustersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClustersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogixapis.apm.queries.k8s.v1.ClustersService",
	HandlerType: (*ClustersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListClusters",
			Handler:    _ClustersService_ListClusters_Handler,
		},
		{
			MethodName: "ListClusterStats",
			Handler:    _ClustersService_ListClusterStats_Handler,
		},
		{
			MethodName: "ListClusterTopK",
			Handler:    _ClustersService_ListClusterTopK_Handler,
		},
		{
			MethodName: "ListClusterMetrics",
			Handler:    _ClustersService_ListClusterMetrics_Handler,
		},
		{
			MethodName: "ListNames",
			Handler:    _ClustersService_ListNames_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogixapis/apm/queries/k8s/v1/clusters_measurments_service.proto",
}
