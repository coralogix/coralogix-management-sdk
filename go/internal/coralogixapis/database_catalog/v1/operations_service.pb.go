// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: com/coralogixapis/database_catalog/v1/operations_service.proto

package v1

import (
	v1 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogix/catalog/v1"
	v2 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/common/v2"
	v11 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/widgets/v1"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetDatabaseOperationsColumnsStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRange              *v2.TimeRange           `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	DatabaseName           *wrappers.StringValue   `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	DatabaseNameSource     *wrappers.StringValue   `protobuf:"bytes,3,opt,name=database_name_source,json=databaseNameSource,proto3" json:"database_name_source,omitempty"`
	DatabaseCatalogFilters []*v1.ApmFilter         `protobuf:"bytes,4,rep,name=database_catalog_filters,json=databaseCatalogFilters,proto3" json:"database_catalog_filters,omitempty"`
	DatabaseSystem         *wrappers.StringValue   `protobuf:"bytes,5,opt,name=database_system,json=databaseSystem,proto3" json:"database_system,omitempty"`
	CallingServices        []*wrappers.StringValue `protobuf:"bytes,6,rep,name=calling_services,json=callingServices,proto3" json:"calling_services,omitempty"`
	Tables                 []*wrappers.StringValue `protobuf:"bytes,7,rep,name=tables,proto3" json:"tables,omitempty"`
	TrendOffset            *wrappers.Int64Value    `protobuf:"bytes,8,opt,name=trend_offset,json=trendOffset,proto3" json:"trend_offset,omitempty"`
}

func (x *GetDatabaseOperationsColumnsStreamRequest) Reset() {
	*x = GetDatabaseOperationsColumnsStreamRequest{}
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatabaseOperationsColumnsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatabaseOperationsColumnsStreamRequest) ProtoMessage() {}

func (x *GetDatabaseOperationsColumnsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatabaseOperationsColumnsStreamRequest.ProtoReflect.Descriptor instead.
func (*GetDatabaseOperationsColumnsStreamRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetDatabaseOperationsColumnsStreamRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetDatabaseOperationsColumnsStreamRequest) GetDatabaseName() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseName
	}
	return nil
}

func (x *GetDatabaseOperationsColumnsStreamRequest) GetDatabaseNameSource() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseNameSource
	}
	return nil
}

func (x *GetDatabaseOperationsColumnsStreamRequest) GetDatabaseCatalogFilters() []*v1.ApmFilter {
	if x != nil {
		return x.DatabaseCatalogFilters
	}
	return nil
}

func (x *GetDatabaseOperationsColumnsStreamRequest) GetDatabaseSystem() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseSystem
	}
	return nil
}

func (x *GetDatabaseOperationsColumnsStreamRequest) GetCallingServices() []*wrappers.StringValue {
	if x != nil {
		return x.CallingServices
	}
	return nil
}

func (x *GetDatabaseOperationsColumnsStreamRequest) GetTables() []*wrappers.StringValue {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *GetDatabaseOperationsColumnsStreamRequest) GetTrendOffset() *wrappers.Int64Value {
	if x != nil {
		return x.TrendOffset
	}
	return nil
}

type GetDatabaseOperationsColumnsStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseOperations []*DatabaseOperationData `protobuf:"bytes,1,rep,name=database_operations,json=databaseOperations,proto3" json:"database_operations,omitempty"`
}

func (x *GetDatabaseOperationsColumnsStreamResponse) Reset() {
	*x = GetDatabaseOperationsColumnsStreamResponse{}
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatabaseOperationsColumnsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatabaseOperationsColumnsStreamResponse) ProtoMessage() {}

func (x *GetDatabaseOperationsColumnsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatabaseOperationsColumnsStreamResponse.ProtoReflect.Descriptor instead.
func (*GetDatabaseOperationsColumnsStreamResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetDatabaseOperationsColumnsStreamResponse) GetDatabaseOperations() []*DatabaseOperationData {
	if x != nil {
		return x.DatabaseOperations
	}
	return nil
}

type GetDatabaseOperationsRequestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRange              *v2.TimeRange           `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	DatabaseName           *wrappers.StringValue   `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	DatabaseNameSource     *wrappers.StringValue   `protobuf:"bytes,3,opt,name=database_name_source,json=databaseNameSource,proto3" json:"database_name_source,omitempty"`
	DatabaseCatalogFilters []*v1.ApmFilter         `protobuf:"bytes,4,rep,name=database_catalog_filters,json=databaseCatalogFilters,proto3" json:"database_catalog_filters,omitempty"`
	DatabaseSystem         *wrappers.StringValue   `protobuf:"bytes,5,opt,name=database_system,json=databaseSystem,proto3" json:"database_system,omitempty"`
	Topk                   *wrappers.UInt64Value   `protobuf:"bytes,6,opt,name=topk,proto3" json:"topk,omitempty"`
	CallingServices        []*wrappers.StringValue `protobuf:"bytes,7,rep,name=calling_services,json=callingServices,proto3" json:"calling_services,omitempty"`
	Tables                 []*wrappers.StringValue `protobuf:"bytes,8,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *GetDatabaseOperationsRequestsRequest) Reset() {
	*x = GetDatabaseOperationsRequestsRequest{}
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatabaseOperationsRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatabaseOperationsRequestsRequest) ProtoMessage() {}

func (x *GetDatabaseOperationsRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatabaseOperationsRequestsRequest.ProtoReflect.Descriptor instead.
func (*GetDatabaseOperationsRequestsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetDatabaseOperationsRequestsRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetDatabaseOperationsRequestsRequest) GetDatabaseName() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseName
	}
	return nil
}

func (x *GetDatabaseOperationsRequestsRequest) GetDatabaseNameSource() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseNameSource
	}
	return nil
}

func (x *GetDatabaseOperationsRequestsRequest) GetDatabaseCatalogFilters() []*v1.ApmFilter {
	if x != nil {
		return x.DatabaseCatalogFilters
	}
	return nil
}

func (x *GetDatabaseOperationsRequestsRequest) GetDatabaseSystem() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseSystem
	}
	return nil
}

func (x *GetDatabaseOperationsRequestsRequest) GetTopk() *wrappers.UInt64Value {
	if x != nil {
		return x.Topk
	}
	return nil
}

func (x *GetDatabaseOperationsRequestsRequest) GetCallingServices() []*wrappers.StringValue {
	if x != nil {
		return x.CallingServices
	}
	return nil
}

func (x *GetDatabaseOperationsRequestsRequest) GetTables() []*wrappers.StringValue {
	if x != nil {
		return x.Tables
	}
	return nil
}

type GetDatabaseOperationsRequestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests    []*v11.LineChart      `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	TotalAmount *wrappers.UInt64Value `protobuf:"bytes,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
}

func (x *GetDatabaseOperationsRequestsResponse) Reset() {
	*x = GetDatabaseOperationsRequestsResponse{}
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatabaseOperationsRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatabaseOperationsRequestsResponse) ProtoMessage() {}

func (x *GetDatabaseOperationsRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatabaseOperationsRequestsResponse.ProtoReflect.Descriptor instead.
func (*GetDatabaseOperationsRequestsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetDatabaseOperationsRequestsResponse) GetRequests() []*v11.LineChart {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *GetDatabaseOperationsRequestsResponse) GetTotalAmount() *wrappers.UInt64Value {
	if x != nil {
		return x.TotalAmount
	}
	return nil
}

type GetDatabaseOperationsErrorsStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRange              *v2.TimeRange           `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	DatabaseName           *wrappers.StringValue   `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	DatabaseNameSource     *wrappers.StringValue   `protobuf:"bytes,3,opt,name=database_name_source,json=databaseNameSource,proto3" json:"database_name_source,omitempty"`
	DatabaseCatalogFilters []*v1.ApmFilter         `protobuf:"bytes,4,rep,name=database_catalog_filters,json=databaseCatalogFilters,proto3" json:"database_catalog_filters,omitempty"`
	DatabaseSystem         *wrappers.StringValue   `protobuf:"bytes,5,opt,name=database_system,json=databaseSystem,proto3" json:"database_system,omitempty"`
	Topk                   *wrappers.UInt64Value   `protobuf:"bytes,6,opt,name=topk,proto3" json:"topk,omitempty"`
	CallingServices        []*wrappers.StringValue `protobuf:"bytes,7,rep,name=calling_services,json=callingServices,proto3" json:"calling_services,omitempty"`
	Tables                 []*wrappers.StringValue `protobuf:"bytes,8,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *GetDatabaseOperationsErrorsStreamRequest) Reset() {
	*x = GetDatabaseOperationsErrorsStreamRequest{}
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatabaseOperationsErrorsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatabaseOperationsErrorsStreamRequest) ProtoMessage() {}

func (x *GetDatabaseOperationsErrorsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatabaseOperationsErrorsStreamRequest.ProtoReflect.Descriptor instead.
func (*GetDatabaseOperationsErrorsStreamRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetDatabaseOperationsErrorsStreamRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetDatabaseOperationsErrorsStreamRequest) GetDatabaseName() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseName
	}
	return nil
}

func (x *GetDatabaseOperationsErrorsStreamRequest) GetDatabaseNameSource() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseNameSource
	}
	return nil
}

func (x *GetDatabaseOperationsErrorsStreamRequest) GetDatabaseCatalogFilters() []*v1.ApmFilter {
	if x != nil {
		return x.DatabaseCatalogFilters
	}
	return nil
}

func (x *GetDatabaseOperationsErrorsStreamRequest) GetDatabaseSystem() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseSystem
	}
	return nil
}

func (x *GetDatabaseOperationsErrorsStreamRequest) GetTopk() *wrappers.UInt64Value {
	if x != nil {
		return x.Topk
	}
	return nil
}

func (x *GetDatabaseOperationsErrorsStreamRequest) GetCallingServices() []*wrappers.StringValue {
	if x != nil {
		return x.CallingServices
	}
	return nil
}

func (x *GetDatabaseOperationsErrorsStreamRequest) GetTables() []*wrappers.StringValue {
	if x != nil {
		return x.Tables
	}
	return nil
}

type GetDatabaseOperationsErrorsStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Widget:
	//
	//	*GetDatabaseOperationsErrorsStreamResponse_Errors
	//	*GetDatabaseOperationsErrorsStreamResponse_ErrorPercentage
	//	*GetDatabaseOperationsErrorsStreamResponse_ErrorsPerSeconds
	Widget      isGetDatabaseOperationsErrorsStreamResponse_Widget `protobuf_oneof:"widget"`
	TotalAmount *wrappers.UInt64Value                              `protobuf:"bytes,3,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
}

func (x *GetDatabaseOperationsErrorsStreamResponse) Reset() {
	*x = GetDatabaseOperationsErrorsStreamResponse{}
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatabaseOperationsErrorsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatabaseOperationsErrorsStreamResponse) ProtoMessage() {}

func (x *GetDatabaseOperationsErrorsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatabaseOperationsErrorsStreamResponse.ProtoReflect.Descriptor instead.
func (*GetDatabaseOperationsErrorsStreamResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescGZIP(), []int{5}
}

func (m *GetDatabaseOperationsErrorsStreamResponse) GetWidget() isGetDatabaseOperationsErrorsStreamResponse_Widget {
	if m != nil {
		return m.Widget
	}
	return nil
}

func (x *GetDatabaseOperationsErrorsStreamResponse) GetErrors() *v1.RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetDatabaseOperationsErrorsStreamResponse_Errors); ok {
		return x.Errors
	}
	return nil
}

func (x *GetDatabaseOperationsErrorsStreamResponse) GetErrorPercentage() *v1.RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetDatabaseOperationsErrorsStreamResponse_ErrorPercentage); ok {
		return x.ErrorPercentage
	}
	return nil
}

func (x *GetDatabaseOperationsErrorsStreamResponse) GetErrorsPerSeconds() *v1.RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetDatabaseOperationsErrorsStreamResponse_ErrorsPerSeconds); ok {
		return x.ErrorsPerSeconds
	}
	return nil
}

func (x *GetDatabaseOperationsErrorsStreamResponse) GetTotalAmount() *wrappers.UInt64Value {
	if x != nil {
		return x.TotalAmount
	}
	return nil
}

type isGetDatabaseOperationsErrorsStreamResponse_Widget interface {
	isGetDatabaseOperationsErrorsStreamResponse_Widget()
}

type GetDatabaseOperationsErrorsStreamResponse_Errors struct {
	Errors *v1.RepeatedLineChart `protobuf:"bytes,1,opt,name=errors,proto3,oneof"`
}

type GetDatabaseOperationsErrorsStreamResponse_ErrorPercentage struct {
	ErrorPercentage *v1.RepeatedLineChart `protobuf:"bytes,2,opt,name=error_percentage,json=errorPercentage,proto3,oneof"`
}

type GetDatabaseOperationsErrorsStreamResponse_ErrorsPerSeconds struct {
	ErrorsPerSeconds *v1.RepeatedLineChart `protobuf:"bytes,4,opt,name=errors_per_seconds,json=errorsPerSeconds,proto3,oneof"`
}

func (*GetDatabaseOperationsErrorsStreamResponse_Errors) isGetDatabaseOperationsErrorsStreamResponse_Widget() {
}

func (*GetDatabaseOperationsErrorsStreamResponse_ErrorPercentage) isGetDatabaseOperationsErrorsStreamResponse_Widget() {
}

func (*GetDatabaseOperationsErrorsStreamResponse_ErrorsPerSeconds) isGetDatabaseOperationsErrorsStreamResponse_Widget() {
}

type GetDatabaseOperationsTimeConsumingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRange              *v2.TimeRange           `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	DatabaseName           *wrappers.StringValue   `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	DatabaseNameSource     *wrappers.StringValue   `protobuf:"bytes,3,opt,name=database_name_source,json=databaseNameSource,proto3" json:"database_name_source,omitempty"`
	DatabaseCatalogFilters []*v1.ApmFilter         `protobuf:"bytes,4,rep,name=database_catalog_filters,json=databaseCatalogFilters,proto3" json:"database_catalog_filters,omitempty"`
	DatabaseSystem         *wrappers.StringValue   `protobuf:"bytes,5,opt,name=database_system,json=databaseSystem,proto3" json:"database_system,omitempty"`
	Topk                   *wrappers.UInt64Value   `protobuf:"bytes,6,opt,name=topk,proto3" json:"topk,omitempty"`
	CallingServices        []*wrappers.StringValue `protobuf:"bytes,7,rep,name=calling_services,json=callingServices,proto3" json:"calling_services,omitempty"`
	Tables                 []*wrappers.StringValue `protobuf:"bytes,8,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *GetDatabaseOperationsTimeConsumingRequest) Reset() {
	*x = GetDatabaseOperationsTimeConsumingRequest{}
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatabaseOperationsTimeConsumingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatabaseOperationsTimeConsumingRequest) ProtoMessage() {}

func (x *GetDatabaseOperationsTimeConsumingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatabaseOperationsTimeConsumingRequest.ProtoReflect.Descriptor instead.
func (*GetDatabaseOperationsTimeConsumingRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetDatabaseOperationsTimeConsumingRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetDatabaseOperationsTimeConsumingRequest) GetDatabaseName() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseName
	}
	return nil
}

func (x *GetDatabaseOperationsTimeConsumingRequest) GetDatabaseNameSource() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseNameSource
	}
	return nil
}

func (x *GetDatabaseOperationsTimeConsumingRequest) GetDatabaseCatalogFilters() []*v1.ApmFilter {
	if x != nil {
		return x.DatabaseCatalogFilters
	}
	return nil
}

func (x *GetDatabaseOperationsTimeConsumingRequest) GetDatabaseSystem() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseSystem
	}
	return nil
}

func (x *GetDatabaseOperationsTimeConsumingRequest) GetTopk() *wrappers.UInt64Value {
	if x != nil {
		return x.Topk
	}
	return nil
}

func (x *GetDatabaseOperationsTimeConsumingRequest) GetCallingServices() []*wrappers.StringValue {
	if x != nil {
		return x.CallingServices
	}
	return nil
}

func (x *GetDatabaseOperationsTimeConsumingRequest) GetTables() []*wrappers.StringValue {
	if x != nil {
		return x.Tables
	}
	return nil
}

type GetDatabaseOperationsTimeConsumingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeConsuming []*v11.LineChart      `protobuf:"bytes,1,rep,name=time_consuming,json=timeConsuming,proto3" json:"time_consuming,omitempty"`
	TotalAmount   *wrappers.UInt64Value `protobuf:"bytes,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
}

func (x *GetDatabaseOperationsTimeConsumingResponse) Reset() {
	*x = GetDatabaseOperationsTimeConsumingResponse{}
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatabaseOperationsTimeConsumingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatabaseOperationsTimeConsumingResponse) ProtoMessage() {}

func (x *GetDatabaseOperationsTimeConsumingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatabaseOperationsTimeConsumingResponse.ProtoReflect.Descriptor instead.
func (*GetDatabaseOperationsTimeConsumingResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetDatabaseOperationsTimeConsumingResponse) GetTimeConsuming() []*v11.LineChart {
	if x != nil {
		return x.TimeConsuming
	}
	return nil
}

func (x *GetDatabaseOperationsTimeConsumingResponse) GetTotalAmount() *wrappers.UInt64Value {
	if x != nil {
		return x.TotalAmount
	}
	return nil
}

type GetDatabaseOperationsResponseTimeStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRange              *v2.TimeRange           `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	DatabaseName           *wrappers.StringValue   `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	DatabaseNameSource     *wrappers.StringValue   `protobuf:"bytes,3,opt,name=database_name_source,json=databaseNameSource,proto3" json:"database_name_source,omitempty"`
	DatabaseCatalogFilters []*v1.ApmFilter         `protobuf:"bytes,4,rep,name=database_catalog_filters,json=databaseCatalogFilters,proto3" json:"database_catalog_filters,omitempty"`
	DatabaseSystem         *wrappers.StringValue   `protobuf:"bytes,5,opt,name=database_system,json=databaseSystem,proto3" json:"database_system,omitempty"`
	Topk                   *wrappers.UInt64Value   `protobuf:"bytes,6,opt,name=topk,proto3" json:"topk,omitempty"`
	CallingServices        []*wrappers.StringValue `protobuf:"bytes,7,rep,name=calling_services,json=callingServices,proto3" json:"calling_services,omitempty"`
	Tables                 []*wrappers.StringValue `protobuf:"bytes,8,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *GetDatabaseOperationsResponseTimeStreamRequest) Reset() {
	*x = GetDatabaseOperationsResponseTimeStreamRequest{}
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatabaseOperationsResponseTimeStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatabaseOperationsResponseTimeStreamRequest) ProtoMessage() {}

func (x *GetDatabaseOperationsResponseTimeStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatabaseOperationsResponseTimeStreamRequest.ProtoReflect.Descriptor instead.
func (*GetDatabaseOperationsResponseTimeStreamRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetDatabaseOperationsResponseTimeStreamRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetDatabaseOperationsResponseTimeStreamRequest) GetDatabaseName() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseName
	}
	return nil
}

func (x *GetDatabaseOperationsResponseTimeStreamRequest) GetDatabaseNameSource() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseNameSource
	}
	return nil
}

func (x *GetDatabaseOperationsResponseTimeStreamRequest) GetDatabaseCatalogFilters() []*v1.ApmFilter {
	if x != nil {
		return x.DatabaseCatalogFilters
	}
	return nil
}

func (x *GetDatabaseOperationsResponseTimeStreamRequest) GetDatabaseSystem() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseSystem
	}
	return nil
}

func (x *GetDatabaseOperationsResponseTimeStreamRequest) GetTopk() *wrappers.UInt64Value {
	if x != nil {
		return x.Topk
	}
	return nil
}

func (x *GetDatabaseOperationsResponseTimeStreamRequest) GetCallingServices() []*wrappers.StringValue {
	if x != nil {
		return x.CallingServices
	}
	return nil
}

func (x *GetDatabaseOperationsResponseTimeStreamRequest) GetTables() []*wrappers.StringValue {
	if x != nil {
		return x.Tables
	}
	return nil
}

type GetDatabaseOperationsResponseTimeStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Widget:
	//
	//	*GetDatabaseOperationsResponseTimeStreamResponse_P95
	//	*GetDatabaseOperationsResponseTimeStreamResponse_P99
	//	*GetDatabaseOperationsResponseTimeStreamResponse_Avg
	//	*GetDatabaseOperationsResponseTimeStreamResponse_Max
	//	*GetDatabaseOperationsResponseTimeStreamResponse_P50
	//	*GetDatabaseOperationsResponseTimeStreamResponse_P75
	Widget      isGetDatabaseOperationsResponseTimeStreamResponse_Widget `protobuf_oneof:"widget"`
	TotalAmount *wrappers.UInt64Value                                    `protobuf:"bytes,7,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
}

func (x *GetDatabaseOperationsResponseTimeStreamResponse) Reset() {
	*x = GetDatabaseOperationsResponseTimeStreamResponse{}
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatabaseOperationsResponseTimeStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatabaseOperationsResponseTimeStreamResponse) ProtoMessage() {}

func (x *GetDatabaseOperationsResponseTimeStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatabaseOperationsResponseTimeStreamResponse.ProtoReflect.Descriptor instead.
func (*GetDatabaseOperationsResponseTimeStreamResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescGZIP(), []int{9}
}

func (m *GetDatabaseOperationsResponseTimeStreamResponse) GetWidget() isGetDatabaseOperationsResponseTimeStreamResponse_Widget {
	if m != nil {
		return m.Widget
	}
	return nil
}

func (x *GetDatabaseOperationsResponseTimeStreamResponse) GetP95() *v1.RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetDatabaseOperationsResponseTimeStreamResponse_P95); ok {
		return x.P95
	}
	return nil
}

func (x *GetDatabaseOperationsResponseTimeStreamResponse) GetP99() *v1.RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetDatabaseOperationsResponseTimeStreamResponse_P99); ok {
		return x.P99
	}
	return nil
}

func (x *GetDatabaseOperationsResponseTimeStreamResponse) GetAvg() *v1.RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetDatabaseOperationsResponseTimeStreamResponse_Avg); ok {
		return x.Avg
	}
	return nil
}

func (x *GetDatabaseOperationsResponseTimeStreamResponse) GetMax() *v1.RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetDatabaseOperationsResponseTimeStreamResponse_Max); ok {
		return x.Max
	}
	return nil
}

func (x *GetDatabaseOperationsResponseTimeStreamResponse) GetP50() *v1.RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetDatabaseOperationsResponseTimeStreamResponse_P50); ok {
		return x.P50
	}
	return nil
}

func (x *GetDatabaseOperationsResponseTimeStreamResponse) GetP75() *v1.RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetDatabaseOperationsResponseTimeStreamResponse_P75); ok {
		return x.P75
	}
	return nil
}

func (x *GetDatabaseOperationsResponseTimeStreamResponse) GetTotalAmount() *wrappers.UInt64Value {
	if x != nil {
		return x.TotalAmount
	}
	return nil
}

type isGetDatabaseOperationsResponseTimeStreamResponse_Widget interface {
	isGetDatabaseOperationsResponseTimeStreamResponse_Widget()
}

type GetDatabaseOperationsResponseTimeStreamResponse_P95 struct {
	P95 *v1.RepeatedLineChart `protobuf:"bytes,1,opt,name=p95,proto3,oneof"`
}

type GetDatabaseOperationsResponseTimeStreamResponse_P99 struct {
	P99 *v1.RepeatedLineChart `protobuf:"bytes,2,opt,name=p99,proto3,oneof"`
}

type GetDatabaseOperationsResponseTimeStreamResponse_Avg struct {
	Avg *v1.RepeatedLineChart `protobuf:"bytes,3,opt,name=avg,proto3,oneof"`
}

type GetDatabaseOperationsResponseTimeStreamResponse_Max struct {
	Max *v1.RepeatedLineChart `protobuf:"bytes,4,opt,name=max,proto3,oneof"`
}

type GetDatabaseOperationsResponseTimeStreamResponse_P50 struct {
	P50 *v1.RepeatedLineChart `protobuf:"bytes,5,opt,name=p50,proto3,oneof"`
}

type GetDatabaseOperationsResponseTimeStreamResponse_P75 struct {
	P75 *v1.RepeatedLineChart `protobuf:"bytes,6,opt,name=p75,proto3,oneof"`
}

func (*GetDatabaseOperationsResponseTimeStreamResponse_P95) isGetDatabaseOperationsResponseTimeStreamResponse_Widget() {
}

func (*GetDatabaseOperationsResponseTimeStreamResponse_P99) isGetDatabaseOperationsResponseTimeStreamResponse_Widget() {
}

func (*GetDatabaseOperationsResponseTimeStreamResponse_Avg) isGetDatabaseOperationsResponseTimeStreamResponse_Widget() {
}

func (*GetDatabaseOperationsResponseTimeStreamResponse_Max) isGetDatabaseOperationsResponseTimeStreamResponse_Widget() {
}

func (*GetDatabaseOperationsResponseTimeStreamResponse_P50) isGetDatabaseOperationsResponseTimeStreamResponse_Widget() {
}

func (*GetDatabaseOperationsResponseTimeStreamResponse_P75) isGetDatabaseOperationsResponseTimeStreamResponse_Widget() {
}

type ListOperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName           *wrappers.StringValue   `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	DatabaseNameSource     *wrappers.StringValue   `protobuf:"bytes,2,opt,name=database_name_source,json=databaseNameSource,proto3" json:"database_name_source,omitempty"`
	TimeRange              *v2.TimeRange           `protobuf:"bytes,3,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	DatabaseCatalogFilters []*v1.ApmFilter         `protobuf:"bytes,4,rep,name=database_catalog_filters,json=databaseCatalogFilters,proto3" json:"database_catalog_filters,omitempty"`
	DatabaseSystem         *wrappers.StringValue   `protobuf:"bytes,5,opt,name=database_system,json=databaseSystem,proto3" json:"database_system,omitempty"`
	CallingServices        []*wrappers.StringValue `protobuf:"bytes,6,rep,name=calling_services,json=callingServices,proto3" json:"calling_services,omitempty"`
	Tables                 []*wrappers.StringValue `protobuf:"bytes,7,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *ListOperationsRequest) Reset() {
	*x = ListOperationsRequest{}
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOperationsRequest) ProtoMessage() {}

func (x *ListOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListOperationsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListOperationsRequest) GetDatabaseName() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseName
	}
	return nil
}

func (x *ListOperationsRequest) GetDatabaseNameSource() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseNameSource
	}
	return nil
}

func (x *ListOperationsRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *ListOperationsRequest) GetDatabaseCatalogFilters() []*v1.ApmFilter {
	if x != nil {
		return x.DatabaseCatalogFilters
	}
	return nil
}

func (x *ListOperationsRequest) GetDatabaseSystem() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseSystem
	}
	return nil
}

func (x *ListOperationsRequest) GetCallingServices() []*wrappers.StringValue {
	if x != nil {
		return x.CallingServices
	}
	return nil
}

func (x *ListOperationsRequest) GetTables() []*wrappers.StringValue {
	if x != nil {
		return x.Tables
	}
	return nil
}

type ListOperationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operations []*DatabaseOperation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *ListOperationsResponse) Reset() {
	*x = ListOperationsResponse{}
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOperationsResponse) ProtoMessage() {}

func (x *ListOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListOperationsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescGZIP(), []int{11}
}

func (x *ListOperationsResponse) GetOperations() []*DatabaseOperation {
	if x != nil {
		return x.Operations
	}
	return nil
}

type GetOperationStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName           *wrappers.StringValue   `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	DatabaseNameSource     *wrappers.StringValue   `protobuf:"bytes,2,opt,name=database_name_source,json=databaseNameSource,proto3" json:"database_name_source,omitempty"`
	TimeRange              *v2.TimeRange           `protobuf:"bytes,3,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	DatabaseCatalogFilters []*v1.ApmFilter         `protobuf:"bytes,4,rep,name=database_catalog_filters,json=databaseCatalogFilters,proto3" json:"database_catalog_filters,omitempty"`
	DatabaseSystem         *wrappers.StringValue   `protobuf:"bytes,5,opt,name=database_system,json=databaseSystem,proto3" json:"database_system,omitempty"`
	Operation              *wrappers.StringValue   `protobuf:"bytes,6,opt,name=operation,proto3" json:"operation,omitempty"`
	OperationSource        *wrappers.StringValue   `protobuf:"bytes,7,opt,name=operation_source,json=operationSource,proto3" json:"operation_source,omitempty"`
	Table                  *wrappers.StringValue   `protobuf:"bytes,8,opt,name=table,proto3" json:"table,omitempty"`
	CallingServices        []*wrappers.StringValue `protobuf:"bytes,9,rep,name=calling_services,json=callingServices,proto3" json:"calling_services,omitempty"`
}

func (x *GetOperationStatsRequest) Reset() {
	*x = GetOperationStatsRequest{}
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOperationStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationStatsRequest) ProtoMessage() {}

func (x *GetOperationStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationStatsRequest.ProtoReflect.Descriptor instead.
func (*GetOperationStatsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetOperationStatsRequest) GetDatabaseName() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseName
	}
	return nil
}

func (x *GetOperationStatsRequest) GetDatabaseNameSource() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseNameSource
	}
	return nil
}

func (x *GetOperationStatsRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetOperationStatsRequest) GetDatabaseCatalogFilters() []*v1.ApmFilter {
	if x != nil {
		return x.DatabaseCatalogFilters
	}
	return nil
}

func (x *GetOperationStatsRequest) GetDatabaseSystem() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseSystem
	}
	return nil
}

func (x *GetOperationStatsRequest) GetOperation() *wrappers.StringValue {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *GetOperationStatsRequest) GetOperationSource() *wrappers.StringValue {
	if x != nil {
		return x.OperationSource
	}
	return nil
}

func (x *GetOperationStatsRequest) GetTable() *wrappers.StringValue {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *GetOperationStatsRequest) GetCallingServices() []*wrappers.StringValue {
	if x != nil {
		return x.CallingServices
	}
	return nil
}

type GetOperationStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgResponseTime *wrappers.UInt64Value `protobuf:"bytes,1,opt,name=avg_response_time,json=avgResponseTime,proto3" json:"avg_response_time,omitempty"`
	P95ResponseTime *wrappers.UInt64Value `protobuf:"bytes,2,opt,name=p95_response_time,json=p95ResponseTime,proto3" json:"p95_response_time,omitempty"`
	P99ResponseTime *wrappers.UInt64Value `protobuf:"bytes,3,opt,name=p99_response_time,json=p99ResponseTime,proto3" json:"p99_response_time,omitempty"`
	TotalRequests   *wrappers.UInt64Value `protobuf:"bytes,4,opt,name=total_requests,json=totalRequests,proto3" json:"total_requests,omitempty"`
	TotalErrors     *wrappers.UInt64Value `protobuf:"bytes,5,opt,name=total_errors,json=totalErrors,proto3" json:"total_errors,omitempty"`
	ErrorPercentage *wrappers.UInt64Value `protobuf:"bytes,6,opt,name=error_percentage,json=errorPercentage,proto3" json:"error_percentage,omitempty"`
	P50ResponseTime *wrappers.UInt64Value `protobuf:"bytes,7,opt,name=p50_response_time,json=p50ResponseTime,proto3" json:"p50_response_time,omitempty"`
	P75ResponseTime *wrappers.UInt64Value `protobuf:"bytes,8,opt,name=p75_response_time,json=p75ResponseTime,proto3" json:"p75_response_time,omitempty"`
}

func (x *GetOperationStatsResponse) Reset() {
	*x = GetOperationStatsResponse{}
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOperationStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationStatsResponse) ProtoMessage() {}

func (x *GetOperationStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationStatsResponse.ProtoReflect.Descriptor instead.
func (*GetOperationStatsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetOperationStatsResponse) GetAvgResponseTime() *wrappers.UInt64Value {
	if x != nil {
		return x.AvgResponseTime
	}
	return nil
}

func (x *GetOperationStatsResponse) GetP95ResponseTime() *wrappers.UInt64Value {
	if x != nil {
		return x.P95ResponseTime
	}
	return nil
}

func (x *GetOperationStatsResponse) GetP99ResponseTime() *wrappers.UInt64Value {
	if x != nil {
		return x.P99ResponseTime
	}
	return nil
}

func (x *GetOperationStatsResponse) GetTotalRequests() *wrappers.UInt64Value {
	if x != nil {
		return x.TotalRequests
	}
	return nil
}

func (x *GetOperationStatsResponse) GetTotalErrors() *wrappers.UInt64Value {
	if x != nil {
		return x.TotalErrors
	}
	return nil
}

func (x *GetOperationStatsResponse) GetErrorPercentage() *wrappers.UInt64Value {
	if x != nil {
		return x.ErrorPercentage
	}
	return nil
}

func (x *GetOperationStatsResponse) GetP50ResponseTime() *wrappers.UInt64Value {
	if x != nil {
		return x.P50ResponseTime
	}
	return nil
}

func (x *GetOperationStatsResponse) GetP75ResponseTime() *wrappers.UInt64Value {
	if x != nil {
		return x.P75ResponseTime
	}
	return nil
}

type GetDatabaseOperationGraphsStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName           *wrappers.StringValue   `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	DatabaseNameSource     *wrappers.StringValue   `protobuf:"bytes,2,opt,name=database_name_source,json=databaseNameSource,proto3" json:"database_name_source,omitempty"`
	TimeRange              *v2.TimeRange           `protobuf:"bytes,3,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	DatabaseCatalogFilters []*v1.ApmFilter         `protobuf:"bytes,4,rep,name=database_catalog_filters,json=databaseCatalogFilters,proto3" json:"database_catalog_filters,omitempty"`
	DatabaseSystem         *wrappers.StringValue   `protobuf:"bytes,5,opt,name=database_system,json=databaseSystem,proto3" json:"database_system,omitempty"`
	Operation              *wrappers.StringValue   `protobuf:"bytes,6,opt,name=operation,proto3" json:"operation,omitempty"`
	OperationSource        *wrappers.StringValue   `protobuf:"bytes,7,opt,name=operation_source,json=operationSource,proto3" json:"operation_source,omitempty"`
	Table                  *wrappers.StringValue   `protobuf:"bytes,8,opt,name=table,proto3" json:"table,omitempty"`
	CallingServices        []*wrappers.StringValue `protobuf:"bytes,9,rep,name=calling_services,json=callingServices,proto3" json:"calling_services,omitempty"`
}

func (x *GetDatabaseOperationGraphsStreamRequest) Reset() {
	*x = GetDatabaseOperationGraphsStreamRequest{}
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatabaseOperationGraphsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatabaseOperationGraphsStreamRequest) ProtoMessage() {}

func (x *GetDatabaseOperationGraphsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatabaseOperationGraphsStreamRequest.ProtoReflect.Descriptor instead.
func (*GetDatabaseOperationGraphsStreamRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetDatabaseOperationGraphsStreamRequest) GetDatabaseName() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseName
	}
	return nil
}

func (x *GetDatabaseOperationGraphsStreamRequest) GetDatabaseNameSource() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseNameSource
	}
	return nil
}

func (x *GetDatabaseOperationGraphsStreamRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetDatabaseOperationGraphsStreamRequest) GetDatabaseCatalogFilters() []*v1.ApmFilter {
	if x != nil {
		return x.DatabaseCatalogFilters
	}
	return nil
}

func (x *GetDatabaseOperationGraphsStreamRequest) GetDatabaseSystem() *wrappers.StringValue {
	if x != nil {
		return x.DatabaseSystem
	}
	return nil
}

func (x *GetDatabaseOperationGraphsStreamRequest) GetOperation() *wrappers.StringValue {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *GetDatabaseOperationGraphsStreamRequest) GetOperationSource() *wrappers.StringValue {
	if x != nil {
		return x.OperationSource
	}
	return nil
}

func (x *GetDatabaseOperationGraphsStreamRequest) GetTable() *wrappers.StringValue {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *GetDatabaseOperationGraphsStreamRequest) GetCallingServices() []*wrappers.StringValue {
	if x != nil {
		return x.CallingServices
	}
	return nil
}

type GetDatabaseOperationGraphsStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Widget:
	//
	//	*GetDatabaseOperationGraphsStreamResponse_RequestsAndErrors
	//	*GetDatabaseOperationGraphsStreamResponse_Latency
	Widget isGetDatabaseOperationGraphsStreamResponse_Widget `protobuf_oneof:"widget"`
}

func (x *GetDatabaseOperationGraphsStreamResponse) Reset() {
	*x = GetDatabaseOperationGraphsStreamResponse{}
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatabaseOperationGraphsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatabaseOperationGraphsStreamResponse) ProtoMessage() {}

func (x *GetDatabaseOperationGraphsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatabaseOperationGraphsStreamResponse.ProtoReflect.Descriptor instead.
func (*GetDatabaseOperationGraphsStreamResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescGZIP(), []int{15}
}

func (m *GetDatabaseOperationGraphsStreamResponse) GetWidget() isGetDatabaseOperationGraphsStreamResponse_Widget {
	if m != nil {
		return m.Widget
	}
	return nil
}

func (x *GetDatabaseOperationGraphsStreamResponse) GetRequestsAndErrors() *v1.RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetDatabaseOperationGraphsStreamResponse_RequestsAndErrors); ok {
		return x.RequestsAndErrors
	}
	return nil
}

func (x *GetDatabaseOperationGraphsStreamResponse) GetLatency() *v1.RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetDatabaseOperationGraphsStreamResponse_Latency); ok {
		return x.Latency
	}
	return nil
}

type isGetDatabaseOperationGraphsStreamResponse_Widget interface {
	isGetDatabaseOperationGraphsStreamResponse_Widget()
}

type GetDatabaseOperationGraphsStreamResponse_RequestsAndErrors struct {
	RequestsAndErrors *v1.RepeatedLineChart `protobuf:"bytes,1,opt,name=requests_and_errors,json=requestsAndErrors,proto3,oneof"`
}

type GetDatabaseOperationGraphsStreamResponse_Latency struct {
	Latency *v1.RepeatedLineChart `protobuf:"bytes,2,opt,name=latency,proto3,oneof"`
}

func (*GetDatabaseOperationGraphsStreamResponse_RequestsAndErrors) isGetDatabaseOperationGraphsStreamResponse_Widget() {
}

func (*GetDatabaseOperationGraphsStreamResponse_Latency) isGetDatabaseOperationGraphsStreamResponse_Widget() {
}

var File_com_coralogixapis_database_catalog_v1_operations_service_proto protoreflect.FileDescriptor

var file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70,
	0x6d, 0x2f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x25, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee, 0x04, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70,
	0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x41, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x61, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x72, 0x65, 0x6e,
	0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x65,
	0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xdb, 0x04, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a,
	0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5d, 0x0a,
	0x18, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x0f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x74, 0x6f, 0x70, 0x6b, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63,
	0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x34,
	0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdf, 0x04, 0x0a, 0x28, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70,
	0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x41, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x6f, 0x70,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x12, 0x47, 0x0a, 0x10, 0x63,
	0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x98, 0x03, 0x0a, 0x29, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x64, 0x0a, 0x10, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x67, 0x0a, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x22, 0xe0, 0x04, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x41,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4e, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x5d, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x45, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x61, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe5, 0x04, 0x0a,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a,
	0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5d, 0x0a,
	0x18, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x0f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x74, 0x6f, 0x70, 0x6b, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63,
	0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x34,
	0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x22, 0xca, 0x04, 0x0a, 0x2f, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x03, 0x70, 0x39, 0x35, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x03, 0x70, 0x39, 0x35, 0x12, 0x4b, 0x0a, 0x03, 0x70, 0x39, 0x39, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x03, 0x70,
	0x39, 0x39, 0x12, 0x4b, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12,
	0x4b, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x4b, 0x0a, 0x03,
	0x70, 0x35, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x03, 0x70, 0x35, 0x30, 0x12, 0x4b, 0x0a, 0x03, 0x70, 0x37, 0x35,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48,
	0x00, 0x52, 0x03, 0x70, 0x37, 0x35, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x77, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x22, 0x9a, 0x04, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e,
	0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x49,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x18, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x16, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x47, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x72,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xa0, 0x05, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x41, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5d, 0x0a,
	0x18, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x0f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x3a, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x47, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x10,
	0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xdc, 0x04, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x61, 0x76, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x61, 0x76,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a,
	0x11, 0x70, 0x39, 0x35, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x39, 0x35, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x70, 0x39, 0x39, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x70, 0x39, 0x39, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x43, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x48, 0x0a, 0x11, 0x70, 0x35, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x35, 0x30, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x70, 0x37,
	0x35, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x37, 0x35, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xaf, 0x05, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x41, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5d,
	0x0a, 0x18, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a,
	0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x3a, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x47, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x47, 0x0a,
	0x10, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x53,
	0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x32, 0xcd, 0x0e,
	0x0a, 0x19, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xf8, 0x01, 0x0a, 0x22,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x51, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0xc2, 0xb8, 0x02, 0x27, 0x0a, 0x25, 0x67,
	0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x20, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x30, 0x01, 0x12, 0xe2, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x26, 0xc2, 0xb8, 0x02, 0x22, 0x0a, 0x20, 0x67, 0x65, 0x74, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0xf5, 0x01, 0x0a, 0x21,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0xc2, 0xb8, 0x02, 0x27, 0x0a, 0x25, 0x67, 0x65, 0x74, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x30, 0x01, 0x12, 0xf7, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x50, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x51, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2c, 0xc2, 0xb8, 0x02, 0x28, 0x0a, 0x26, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x73, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x8e, 0x02,
	0x0a, 0x27, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x55, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x56, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0xc2, 0xb8, 0x02, 0x2e, 0x0a, 0x2c,
	0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x20, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x30, 0x01, 0x12, 0xa4,
	0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15,
	0xc2, 0xb8, 0x02, 0x11, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19,
	0xc2, 0xb8, 0x02, 0x15, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0xf1, 0x01, 0x0a, 0x20, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x4e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2a, 0xc2, 0xb8, 0x02, 0x26, 0x0a, 0x24, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x30, 0x01, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescOnce sync.Once
	file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescData = file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDesc
)

func file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescData)
	})
	return file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDescData
}

var file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_com_coralogixapis_database_catalog_v1_operations_service_proto_goTypes = []any{
	(*GetDatabaseOperationsColumnsStreamRequest)(nil),       // 0: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsColumnsStreamRequest
	(*GetDatabaseOperationsColumnsStreamResponse)(nil),      // 1: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsColumnsStreamResponse
	(*GetDatabaseOperationsRequestsRequest)(nil),            // 2: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsRequestsRequest
	(*GetDatabaseOperationsRequestsResponse)(nil),           // 3: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsRequestsResponse
	(*GetDatabaseOperationsErrorsStreamRequest)(nil),        // 4: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsErrorsStreamRequest
	(*GetDatabaseOperationsErrorsStreamResponse)(nil),       // 5: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsErrorsStreamResponse
	(*GetDatabaseOperationsTimeConsumingRequest)(nil),       // 6: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsTimeConsumingRequest
	(*GetDatabaseOperationsTimeConsumingResponse)(nil),      // 7: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsTimeConsumingResponse
	(*GetDatabaseOperationsResponseTimeStreamRequest)(nil),  // 8: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsResponseTimeStreamRequest
	(*GetDatabaseOperationsResponseTimeStreamResponse)(nil), // 9: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsResponseTimeStreamResponse
	(*ListOperationsRequest)(nil),                           // 10: com.coralogixapis.database_catalog.v1.ListOperationsRequest
	(*ListOperationsResponse)(nil),                          // 11: com.coralogixapis.database_catalog.v1.ListOperationsResponse
	(*GetOperationStatsRequest)(nil),                        // 12: com.coralogixapis.database_catalog.v1.GetOperationStatsRequest
	(*GetOperationStatsResponse)(nil),                       // 13: com.coralogixapis.database_catalog.v1.GetOperationStatsResponse
	(*GetDatabaseOperationGraphsStreamRequest)(nil),         // 14: com.coralogixapis.database_catalog.v1.GetDatabaseOperationGraphsStreamRequest
	(*GetDatabaseOperationGraphsStreamResponse)(nil),        // 15: com.coralogixapis.database_catalog.v1.GetDatabaseOperationGraphsStreamResponse
	(*v2.TimeRange)(nil),                                    // 16: com.coralogixapis.apm.common.v2.TimeRange
	(*wrappers.StringValue)(nil),                            // 17: google.protobuf.StringValue
	(*v1.ApmFilter)(nil),                                    // 18: com.coralogix.catalog.v1.ApmFilter
	(*wrappers.Int64Value)(nil),                             // 19: google.protobuf.Int64Value
	(*DatabaseOperationData)(nil),                           // 20: com.coralogixapis.database_catalog.v1.DatabaseOperationData
	(*wrappers.UInt64Value)(nil),                            // 21: google.protobuf.UInt64Value
	(*v11.LineChart)(nil),                                   // 22: com.coralogixapis.apm.widgets.v1.LineChart
	(*v1.RepeatedLineChart)(nil),                            // 23: com.coralogixapis.service_catalog.v1.RepeatedLineChart
	(*DatabaseOperation)(nil),                               // 24: com.coralogixapis.database_catalog.v1.DatabaseOperation
}
var file_com_coralogixapis_database_catalog_v1_operations_service_proto_depIdxs = []int32{
	16,  // 0: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsColumnsStreamRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	17,  // 1: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsColumnsStreamRequest.database_name:type_name -> google.protobuf.StringValue
	17,  // 2: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsColumnsStreamRequest.database_name_source:type_name -> google.protobuf.StringValue
	18,  // 3: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsColumnsStreamRequest.database_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	17,  // 4: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsColumnsStreamRequest.database_system:type_name -> google.protobuf.StringValue
	17,  // 5: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsColumnsStreamRequest.calling_services:type_name -> google.protobuf.StringValue
	17,  // 6: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsColumnsStreamRequest.tables:type_name -> google.protobuf.StringValue
	19,  // 7: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsColumnsStreamRequest.trend_offset:type_name -> google.protobuf.Int64Value
	20,  // 8: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsColumnsStreamResponse.database_operations:type_name -> com.coralogixapis.database_catalog.v1.DatabaseOperationData
	16,  // 9: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsRequestsRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	17,  // 10: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsRequestsRequest.database_name:type_name -> google.protobuf.StringValue
	17,  // 11: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsRequestsRequest.database_name_source:type_name -> google.protobuf.StringValue
	18,  // 12: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsRequestsRequest.database_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	17,  // 13: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsRequestsRequest.database_system:type_name -> google.protobuf.StringValue
	21,  // 14: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsRequestsRequest.topk:type_name -> google.protobuf.UInt64Value
	17,  // 15: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsRequestsRequest.calling_services:type_name -> google.protobuf.StringValue
	17,  // 16: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsRequestsRequest.tables:type_name -> google.protobuf.StringValue
	22,  // 17: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsRequestsResponse.requests:type_name -> com.coralogixapis.apm.widgets.v1.LineChart
	21,  // 18: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsRequestsResponse.total_amount:type_name -> google.protobuf.UInt64Value
	16,  // 19: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsErrorsStreamRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	17,  // 20: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsErrorsStreamRequest.database_name:type_name -> google.protobuf.StringValue
	17,  // 21: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsErrorsStreamRequest.database_name_source:type_name -> google.protobuf.StringValue
	18,  // 22: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsErrorsStreamRequest.database_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	17,  // 23: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsErrorsStreamRequest.database_system:type_name -> google.protobuf.StringValue
	21,  // 24: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsErrorsStreamRequest.topk:type_name -> google.protobuf.UInt64Value
	17,  // 25: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsErrorsStreamRequest.calling_services:type_name -> google.protobuf.StringValue
	17,  // 26: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsErrorsStreamRequest.tables:type_name -> google.protobuf.StringValue
	23,  // 27: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsErrorsStreamResponse.errors:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	23,  // 28: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsErrorsStreamResponse.error_percentage:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	23,  // 29: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsErrorsStreamResponse.errors_per_seconds:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	21,  // 30: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsErrorsStreamResponse.total_amount:type_name -> google.protobuf.UInt64Value
	16,  // 31: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsTimeConsumingRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	17,  // 32: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsTimeConsumingRequest.database_name:type_name -> google.protobuf.StringValue
	17,  // 33: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsTimeConsumingRequest.database_name_source:type_name -> google.protobuf.StringValue
	18,  // 34: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsTimeConsumingRequest.database_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	17,  // 35: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsTimeConsumingRequest.database_system:type_name -> google.protobuf.StringValue
	21,  // 36: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsTimeConsumingRequest.topk:type_name -> google.protobuf.UInt64Value
	17,  // 37: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsTimeConsumingRequest.calling_services:type_name -> google.protobuf.StringValue
	17,  // 38: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsTimeConsumingRequest.tables:type_name -> google.protobuf.StringValue
	22,  // 39: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsTimeConsumingResponse.time_consuming:type_name -> com.coralogixapis.apm.widgets.v1.LineChart
	21,  // 40: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsTimeConsumingResponse.total_amount:type_name -> google.protobuf.UInt64Value
	16,  // 41: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsResponseTimeStreamRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	17,  // 42: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsResponseTimeStreamRequest.database_name:type_name -> google.protobuf.StringValue
	17,  // 43: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsResponseTimeStreamRequest.database_name_source:type_name -> google.protobuf.StringValue
	18,  // 44: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsResponseTimeStreamRequest.database_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	17,  // 45: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsResponseTimeStreamRequest.database_system:type_name -> google.protobuf.StringValue
	21,  // 46: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsResponseTimeStreamRequest.topk:type_name -> google.protobuf.UInt64Value
	17,  // 47: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsResponseTimeStreamRequest.calling_services:type_name -> google.protobuf.StringValue
	17,  // 48: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsResponseTimeStreamRequest.tables:type_name -> google.protobuf.StringValue
	23,  // 49: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsResponseTimeStreamResponse.p95:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	23,  // 50: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsResponseTimeStreamResponse.p99:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	23,  // 51: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsResponseTimeStreamResponse.avg:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	23,  // 52: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsResponseTimeStreamResponse.max:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	23,  // 53: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsResponseTimeStreamResponse.p50:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	23,  // 54: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsResponseTimeStreamResponse.p75:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	21,  // 55: com.coralogixapis.database_catalog.v1.GetDatabaseOperationsResponseTimeStreamResponse.total_amount:type_name -> google.protobuf.UInt64Value
	17,  // 56: com.coralogixapis.database_catalog.v1.ListOperationsRequest.database_name:type_name -> google.protobuf.StringValue
	17,  // 57: com.coralogixapis.database_catalog.v1.ListOperationsRequest.database_name_source:type_name -> google.protobuf.StringValue
	16,  // 58: com.coralogixapis.database_catalog.v1.ListOperationsRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	18,  // 59: com.coralogixapis.database_catalog.v1.ListOperationsRequest.database_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	17,  // 60: com.coralogixapis.database_catalog.v1.ListOperationsRequest.database_system:type_name -> google.protobuf.StringValue
	17,  // 61: com.coralogixapis.database_catalog.v1.ListOperationsRequest.calling_services:type_name -> google.protobuf.StringValue
	17,  // 62: com.coralogixapis.database_catalog.v1.ListOperationsRequest.tables:type_name -> google.protobuf.StringValue
	24,  // 63: com.coralogixapis.database_catalog.v1.ListOperationsResponse.operations:type_name -> com.coralogixapis.database_catalog.v1.DatabaseOperation
	17,  // 64: com.coralogixapis.database_catalog.v1.GetOperationStatsRequest.database_name:type_name -> google.protobuf.StringValue
	17,  // 65: com.coralogixapis.database_catalog.v1.GetOperationStatsRequest.database_name_source:type_name -> google.protobuf.StringValue
	16,  // 66: com.coralogixapis.database_catalog.v1.GetOperationStatsRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	18,  // 67: com.coralogixapis.database_catalog.v1.GetOperationStatsRequest.database_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	17,  // 68: com.coralogixapis.database_catalog.v1.GetOperationStatsRequest.database_system:type_name -> google.protobuf.StringValue
	17,  // 69: com.coralogixapis.database_catalog.v1.GetOperationStatsRequest.operation:type_name -> google.protobuf.StringValue
	17,  // 70: com.coralogixapis.database_catalog.v1.GetOperationStatsRequest.operation_source:type_name -> google.protobuf.StringValue
	17,  // 71: com.coralogixapis.database_catalog.v1.GetOperationStatsRequest.table:type_name -> google.protobuf.StringValue
	17,  // 72: com.coralogixapis.database_catalog.v1.GetOperationStatsRequest.calling_services:type_name -> google.protobuf.StringValue
	21,  // 73: com.coralogixapis.database_catalog.v1.GetOperationStatsResponse.avg_response_time:type_name -> google.protobuf.UInt64Value
	21,  // 74: com.coralogixapis.database_catalog.v1.GetOperationStatsResponse.p95_response_time:type_name -> google.protobuf.UInt64Value
	21,  // 75: com.coralogixapis.database_catalog.v1.GetOperationStatsResponse.p99_response_time:type_name -> google.protobuf.UInt64Value
	21,  // 76: com.coralogixapis.database_catalog.v1.GetOperationStatsResponse.total_requests:type_name -> google.protobuf.UInt64Value
	21,  // 77: com.coralogixapis.database_catalog.v1.GetOperationStatsResponse.total_errors:type_name -> google.protobuf.UInt64Value
	21,  // 78: com.coralogixapis.database_catalog.v1.GetOperationStatsResponse.error_percentage:type_name -> google.protobuf.UInt64Value
	21,  // 79: com.coralogixapis.database_catalog.v1.GetOperationStatsResponse.p50_response_time:type_name -> google.protobuf.UInt64Value
	21,  // 80: com.coralogixapis.database_catalog.v1.GetOperationStatsResponse.p75_response_time:type_name -> google.protobuf.UInt64Value
	17,  // 81: com.coralogixapis.database_catalog.v1.GetDatabaseOperationGraphsStreamRequest.database_name:type_name -> google.protobuf.StringValue
	17,  // 82: com.coralogixapis.database_catalog.v1.GetDatabaseOperationGraphsStreamRequest.database_name_source:type_name -> google.protobuf.StringValue
	16,  // 83: com.coralogixapis.database_catalog.v1.GetDatabaseOperationGraphsStreamRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	18,  // 84: com.coralogixapis.database_catalog.v1.GetDatabaseOperationGraphsStreamRequest.database_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	17,  // 85: com.coralogixapis.database_catalog.v1.GetDatabaseOperationGraphsStreamRequest.database_system:type_name -> google.protobuf.StringValue
	17,  // 86: com.coralogixapis.database_catalog.v1.GetDatabaseOperationGraphsStreamRequest.operation:type_name -> google.protobuf.StringValue
	17,  // 87: com.coralogixapis.database_catalog.v1.GetDatabaseOperationGraphsStreamRequest.operation_source:type_name -> google.protobuf.StringValue
	17,  // 88: com.coralogixapis.database_catalog.v1.GetDatabaseOperationGraphsStreamRequest.table:type_name -> google.protobuf.StringValue
	17,  // 89: com.coralogixapis.database_catalog.v1.GetDatabaseOperationGraphsStreamRequest.calling_services:type_name -> google.protobuf.StringValue
	23,  // 90: com.coralogixapis.database_catalog.v1.GetDatabaseOperationGraphsStreamResponse.requests_and_errors:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	23,  // 91: com.coralogixapis.database_catalog.v1.GetDatabaseOperationGraphsStreamResponse.latency:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	0,   // 92: com.coralogixapis.database_catalog.v1.DatabaseOperationsService.GetDatabaseOperationsColumnsStream:input_type -> com.coralogixapis.database_catalog.v1.GetDatabaseOperationsColumnsStreamRequest
	2,   // 93: com.coralogixapis.database_catalog.v1.DatabaseOperationsService.GetDatabaseOperationsRequests:input_type -> com.coralogixapis.database_catalog.v1.GetDatabaseOperationsRequestsRequest
	4,   // 94: com.coralogixapis.database_catalog.v1.DatabaseOperationsService.GetDatabaseOperationsErrorsStream:input_type -> com.coralogixapis.database_catalog.v1.GetDatabaseOperationsErrorsStreamRequest
	6,   // 95: com.coralogixapis.database_catalog.v1.DatabaseOperationsService.GetDatabaseOperationsTimeConsuming:input_type -> com.coralogixapis.database_catalog.v1.GetDatabaseOperationsTimeConsumingRequest
	8,   // 96: com.coralogixapis.database_catalog.v1.DatabaseOperationsService.GetDatabaseOperationsResponseTimeStream:input_type -> com.coralogixapis.database_catalog.v1.GetDatabaseOperationsResponseTimeStreamRequest
	10,  // 97: com.coralogixapis.database_catalog.v1.DatabaseOperationsService.ListOperations:input_type -> com.coralogixapis.database_catalog.v1.ListOperationsRequest
	12,  // 98: com.coralogixapis.database_catalog.v1.DatabaseOperationsService.GetOperationStats:input_type -> com.coralogixapis.database_catalog.v1.GetOperationStatsRequest
	14,  // 99: com.coralogixapis.database_catalog.v1.DatabaseOperationsService.GetDatabaseOperationGraphsStream:input_type -> com.coralogixapis.database_catalog.v1.GetDatabaseOperationGraphsStreamRequest
	1,   // 100: com.coralogixapis.database_catalog.v1.DatabaseOperationsService.GetDatabaseOperationsColumnsStream:output_type -> com.coralogixapis.database_catalog.v1.GetDatabaseOperationsColumnsStreamResponse
	3,   // 101: com.coralogixapis.database_catalog.v1.DatabaseOperationsService.GetDatabaseOperationsRequests:output_type -> com.coralogixapis.database_catalog.v1.GetDatabaseOperationsRequestsResponse
	5,   // 102: com.coralogixapis.database_catalog.v1.DatabaseOperationsService.GetDatabaseOperationsErrorsStream:output_type -> com.coralogixapis.database_catalog.v1.GetDatabaseOperationsErrorsStreamResponse
	7,   // 103: com.coralogixapis.database_catalog.v1.DatabaseOperationsService.GetDatabaseOperationsTimeConsuming:output_type -> com.coralogixapis.database_catalog.v1.GetDatabaseOperationsTimeConsumingResponse
	9,   // 104: com.coralogixapis.database_catalog.v1.DatabaseOperationsService.GetDatabaseOperationsResponseTimeStream:output_type -> com.coralogixapis.database_catalog.v1.GetDatabaseOperationsResponseTimeStreamResponse
	11,  // 105: com.coralogixapis.database_catalog.v1.DatabaseOperationsService.ListOperations:output_type -> com.coralogixapis.database_catalog.v1.ListOperationsResponse
	13,  // 106: com.coralogixapis.database_catalog.v1.DatabaseOperationsService.GetOperationStats:output_type -> com.coralogixapis.database_catalog.v1.GetOperationStatsResponse
	15,  // 107: com.coralogixapis.database_catalog.v1.DatabaseOperationsService.GetDatabaseOperationGraphsStream:output_type -> com.coralogixapis.database_catalog.v1.GetDatabaseOperationGraphsStreamResponse
	100, // [100:108] is the sub-list for method output_type
	92,  // [92:100] is the sub-list for method input_type
	92,  // [92:92] is the sub-list for extension type_name
	92,  // [92:92] is the sub-list for extension extendee
	0,   // [0:92] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_database_catalog_v1_operations_service_proto_init() }
func file_com_coralogixapis_database_catalog_v1_operations_service_proto_init() {
	if File_com_coralogixapis_database_catalog_v1_operations_service_proto != nil {
		return
	}
	file_com_coralogixapis_database_catalog_v1_database_proto_init()
	file_com_coralogixapis_database_catalog_v1_database_operation_proto_init()
	file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[5].OneofWrappers = []any{
		(*GetDatabaseOperationsErrorsStreamResponse_Errors)(nil),
		(*GetDatabaseOperationsErrorsStreamResponse_ErrorPercentage)(nil),
		(*GetDatabaseOperationsErrorsStreamResponse_ErrorsPerSeconds)(nil),
	}
	file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[9].OneofWrappers = []any{
		(*GetDatabaseOperationsResponseTimeStreamResponse_P95)(nil),
		(*GetDatabaseOperationsResponseTimeStreamResponse_P99)(nil),
		(*GetDatabaseOperationsResponseTimeStreamResponse_Avg)(nil),
		(*GetDatabaseOperationsResponseTimeStreamResponse_Max)(nil),
		(*GetDatabaseOperationsResponseTimeStreamResponse_P50)(nil),
		(*GetDatabaseOperationsResponseTimeStreamResponse_P75)(nil),
	}
	file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes[15].OneofWrappers = []any{
		(*GetDatabaseOperationGraphsStreamResponse_RequestsAndErrors)(nil),
		(*GetDatabaseOperationGraphsStreamResponse_Latency)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogixapis_database_catalog_v1_operations_service_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_database_catalog_v1_operations_service_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_database_catalog_v1_operations_service_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_database_catalog_v1_operations_service_proto = out.File
	file_com_coralogixapis_database_catalog_v1_operations_service_proto_rawDesc = nil
	file_com_coralogixapis_database_catalog_v1_operations_service_proto_goTypes = nil
	file_com_coralogixapis_database_catalog_v1_operations_service_proto_depIdxs = nil
}
