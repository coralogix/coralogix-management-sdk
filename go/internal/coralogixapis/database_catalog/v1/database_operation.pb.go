// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.26.1
// source: com/coralogixapis/database_catalog/v1/database_operation.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DatabaseOperationData struct {
	state     protoimpl.MessageState  `protogen:"open.v1"`
	Operation *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=operation,proto3" json:"operation,omitempty"`
	Table     *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=table,proto3" json:"table,omitempty"`
	Service   *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=service,proto3" json:"service,omitempty"`
	// Types that are valid to be assigned to DatabaseOperationData:
	//
	//	*DatabaseOperationData_P99Latency
	//	*DatabaseOperationData_P95Latency
	//	*DatabaseOperationData_P90Latency
	//	*DatabaseOperationData_P75Latency
	//	*DatabaseOperationData_P50Latency
	//	*DatabaseOperationData_AvgLatency
	//	*DatabaseOperationData_TotalRequests
	//	*DatabaseOperationData_TotalErrors
	//	*DatabaseOperationData_ErrorsPercentage
	//	*DatabaseOperationData_TimeConsuming
	//	*DatabaseOperationData_TimeConsumingPercentage
	//	*DatabaseOperationData_OperationSource
	//	*DatabaseOperationData_Throughput
	//	*DatabaseOperationData_MaxThroughput
	//	*DatabaseOperationData_ErrorsPerMinute
	//	*DatabaseOperationData_MaxErrorsPerMinute
	//	*DatabaseOperationData_ErrorsPerSecond
	//	*DatabaseOperationData_TotalActiveTables
	//	*DatabaseOperationData_P95LatencyTrend
	//	*DatabaseOperationData_TotalRequestsTrend
	//	*DatabaseOperationData_TotalErrorsTrend
	//	*DatabaseOperationData_ErrorsPercentageTrend
	//	*DatabaseOperationData_P95LatencyWithOffset
	//	*DatabaseOperationData_TotalRequestsWithOffset
	//	*DatabaseOperationData_TotalErrorsWithOffset
	//	*DatabaseOperationData_ErrorsPercentageWithOffset
	DatabaseOperationData isDatabaseOperationData_DatabaseOperationData `protobuf_oneof:"database_operation_data"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *DatabaseOperationData) Reset() {
	*x = DatabaseOperationData{}
	mi := &file_com_coralogixapis_database_catalog_v1_database_operation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseOperationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseOperationData) ProtoMessage() {}

func (x *DatabaseOperationData) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_database_operation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseOperationData.ProtoReflect.Descriptor instead.
func (*DatabaseOperationData) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_database_operation_proto_rawDescGZIP(), []int{0}
}

func (x *DatabaseOperationData) GetOperation() *wrapperspb.StringValue {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *DatabaseOperationData) GetTable() *wrapperspb.StringValue {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *DatabaseOperationData) GetService() *wrapperspb.StringValue {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *DatabaseOperationData) GetDatabaseOperationData() isDatabaseOperationData_DatabaseOperationData {
	if x != nil {
		return x.DatabaseOperationData
	}
	return nil
}

func (x *DatabaseOperationData) GetP99Latency() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_P99Latency); ok {
			return x.P99Latency
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetP95Latency() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_P95Latency); ok {
			return x.P95Latency
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetP90Latency() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_P90Latency); ok {
			return x.P90Latency
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetP75Latency() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_P75Latency); ok {
			return x.P75Latency
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetP50Latency() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_P50Latency); ok {
			return x.P50Latency
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetAvgLatency() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_AvgLatency); ok {
			return x.AvgLatency
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetTotalRequests() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_TotalRequests); ok {
			return x.TotalRequests
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetTotalErrors() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_TotalErrors); ok {
			return x.TotalErrors
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetErrorsPercentage() *wrapperspb.FloatValue {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_ErrorsPercentage); ok {
			return x.ErrorsPercentage
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetTimeConsuming() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_TimeConsuming); ok {
			return x.TimeConsuming
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetTimeConsumingPercentage() *wrapperspb.FloatValue {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_TimeConsumingPercentage); ok {
			return x.TimeConsumingPercentage
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetOperationSource() *wrapperspb.StringValue {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_OperationSource); ok {
			return x.OperationSource
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetThroughput() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_Throughput); ok {
			return x.Throughput
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetMaxThroughput() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_MaxThroughput); ok {
			return x.MaxThroughput
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetErrorsPerMinute() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_ErrorsPerMinute); ok {
			return x.ErrorsPerMinute
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetMaxErrorsPerMinute() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_MaxErrorsPerMinute); ok {
			return x.MaxErrorsPerMinute
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetErrorsPerSecond() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_ErrorsPerSecond); ok {
			return x.ErrorsPerSecond
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetTotalActiveTables() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_TotalActiveTables); ok {
			return x.TotalActiveTables
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetP95LatencyTrend() *wrapperspb.FloatValue {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_P95LatencyTrend); ok {
			return x.P95LatencyTrend
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetTotalRequestsTrend() *wrapperspb.FloatValue {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_TotalRequestsTrend); ok {
			return x.TotalRequestsTrend
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetTotalErrorsTrend() *wrapperspb.FloatValue {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_TotalErrorsTrend); ok {
			return x.TotalErrorsTrend
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetErrorsPercentageTrend() *wrapperspb.FloatValue {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_ErrorsPercentageTrend); ok {
			return x.ErrorsPercentageTrend
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetP95LatencyWithOffset() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_P95LatencyWithOffset); ok {
			return x.P95LatencyWithOffset
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetTotalRequestsWithOffset() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_TotalRequestsWithOffset); ok {
			return x.TotalRequestsWithOffset
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetTotalErrorsWithOffset() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_TotalErrorsWithOffset); ok {
			return x.TotalErrorsWithOffset
		}
	}
	return nil
}

func (x *DatabaseOperationData) GetErrorsPercentageWithOffset() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.DatabaseOperationData.(*DatabaseOperationData_ErrorsPercentageWithOffset); ok {
			return x.ErrorsPercentageWithOffset
		}
	}
	return nil
}

type isDatabaseOperationData_DatabaseOperationData interface {
	isDatabaseOperationData_DatabaseOperationData()
}

type DatabaseOperationData_P99Latency struct {
	P99Latency *wrapperspb.Int64Value `protobuf:"bytes,21,opt,name=p99_latency,json=p99Latency,proto3,oneof"`
}

type DatabaseOperationData_P95Latency struct {
	P95Latency *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=p95_latency,json=p95Latency,proto3,oneof"`
}

type DatabaseOperationData_P90Latency struct {
	P90Latency *wrapperspb.Int64Value `protobuf:"bytes,22,opt,name=p90_latency,json=p90Latency,proto3,oneof"`
}

type DatabaseOperationData_P75Latency struct {
	P75Latency *wrapperspb.Int64Value `protobuf:"bytes,23,opt,name=p75_latency,json=p75Latency,proto3,oneof"`
}

type DatabaseOperationData_P50Latency struct {
	P50Latency *wrapperspb.Int64Value `protobuf:"bytes,24,opt,name=p50_latency,json=p50Latency,proto3,oneof"`
}

type DatabaseOperationData_AvgLatency struct {
	AvgLatency *wrapperspb.Int64Value `protobuf:"bytes,25,opt,name=avg_latency,json=avgLatency,proto3,oneof"`
}

type DatabaseOperationData_TotalRequests struct {
	TotalRequests *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=total_requests,json=totalRequests,proto3,oneof"`
}

type DatabaseOperationData_TotalErrors struct {
	TotalErrors *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=total_errors,json=totalErrors,proto3,oneof"`
}

type DatabaseOperationData_ErrorsPercentage struct {
	ErrorsPercentage *wrapperspb.FloatValue `protobuf:"bytes,7,opt,name=errors_percentage,json=errorsPercentage,proto3,oneof"`
}

type DatabaseOperationData_TimeConsuming struct {
	TimeConsuming *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=time_consuming,json=timeConsuming,proto3,oneof"`
}

type DatabaseOperationData_TimeConsumingPercentage struct {
	TimeConsumingPercentage *wrapperspb.FloatValue `protobuf:"bytes,9,opt,name=time_consuming_percentage,json=timeConsumingPercentage,proto3,oneof"`
}

type DatabaseOperationData_OperationSource struct {
	OperationSource *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=operation_source,json=operationSource,proto3,oneof"`
}

type DatabaseOperationData_Throughput struct {
	Throughput *wrapperspb.Int64Value `protobuf:"bytes,26,opt,name=throughput,proto3,oneof"`
}

type DatabaseOperationData_MaxThroughput struct {
	MaxThroughput *wrapperspb.Int64Value `protobuf:"bytes,27,opt,name=max_throughput,json=maxThroughput,proto3,oneof"`
}

type DatabaseOperationData_ErrorsPerMinute struct {
	ErrorsPerMinute *wrapperspb.Int64Value `protobuf:"bytes,28,opt,name=errors_per_minute,json=errorsPerMinute,proto3,oneof"`
}

type DatabaseOperationData_MaxErrorsPerMinute struct {
	MaxErrorsPerMinute *wrapperspb.Int64Value `protobuf:"bytes,29,opt,name=max_errors_per_minute,json=maxErrorsPerMinute,proto3,oneof"`
}

type DatabaseOperationData_ErrorsPerSecond struct {
	ErrorsPerSecond *wrapperspb.Int64Value `protobuf:"bytes,30,opt,name=errors_per_second,json=errorsPerSecond,proto3,oneof"`
}

type DatabaseOperationData_TotalActiveTables struct {
	TotalActiveTables *wrapperspb.Int64Value `protobuf:"bytes,31,opt,name=total_active_tables,json=totalActiveTables,proto3,oneof"`
}

type DatabaseOperationData_P95LatencyTrend struct {
	P95LatencyTrend *wrapperspb.FloatValue `protobuf:"bytes,13,opt,name=p95_latency_trend,json=p95LatencyTrend,proto3,oneof"`
}

type DatabaseOperationData_TotalRequestsTrend struct {
	TotalRequestsTrend *wrapperspb.FloatValue `protobuf:"bytes,14,opt,name=total_requests_trend,json=totalRequestsTrend,proto3,oneof"`
}

type DatabaseOperationData_TotalErrorsTrend struct {
	TotalErrorsTrend *wrapperspb.FloatValue `protobuf:"bytes,15,opt,name=total_errors_trend,json=totalErrorsTrend,proto3,oneof"`
}

type DatabaseOperationData_ErrorsPercentageTrend struct {
	ErrorsPercentageTrend *wrapperspb.FloatValue `protobuf:"bytes,16,opt,name=errors_percentage_trend,json=errorsPercentageTrend,proto3,oneof"`
}

type DatabaseOperationData_P95LatencyWithOffset struct {
	P95LatencyWithOffset *wrapperspb.Int64Value `protobuf:"bytes,17,opt,name=p95_latency_with_offset,json=p95LatencyWithOffset,proto3,oneof"`
}

type DatabaseOperationData_TotalRequestsWithOffset struct {
	TotalRequestsWithOffset *wrapperspb.Int64Value `protobuf:"bytes,18,opt,name=total_requests_with_offset,json=totalRequestsWithOffset,proto3,oneof"`
}

type DatabaseOperationData_TotalErrorsWithOffset struct {
	TotalErrorsWithOffset *wrapperspb.Int64Value `protobuf:"bytes,19,opt,name=total_errors_with_offset,json=totalErrorsWithOffset,proto3,oneof"`
}

type DatabaseOperationData_ErrorsPercentageWithOffset struct {
	ErrorsPercentageWithOffset *wrapperspb.Int64Value `protobuf:"bytes,20,opt,name=errors_percentage_with_offset,json=errorsPercentageWithOffset,proto3,oneof"`
}

func (*DatabaseOperationData_P99Latency) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_P95Latency) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_P90Latency) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_P75Latency) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_P50Latency) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_AvgLatency) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_TotalRequests) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_TotalErrors) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_ErrorsPercentage) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_TimeConsuming) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_TimeConsumingPercentage) isDatabaseOperationData_DatabaseOperationData() {
}

func (*DatabaseOperationData_OperationSource) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_Throughput) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_MaxThroughput) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_ErrorsPerMinute) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_MaxErrorsPerMinute) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_ErrorsPerSecond) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_TotalActiveTables) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_P95LatencyTrend) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_TotalRequestsTrend) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_TotalErrorsTrend) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_ErrorsPercentageTrend) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_P95LatencyWithOffset) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_TotalRequestsWithOffset) isDatabaseOperationData_DatabaseOperationData() {
}

func (*DatabaseOperationData_TotalErrorsWithOffset) isDatabaseOperationData_DatabaseOperationData() {}

func (*DatabaseOperationData_ErrorsPercentageWithOffset) isDatabaseOperationData_DatabaseOperationData() {
}

type DatabaseOperation struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Operation     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	Table         *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseOperation) Reset() {
	*x = DatabaseOperation{}
	mi := &file_com_coralogixapis_database_catalog_v1_database_operation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseOperation) ProtoMessage() {}

func (x *DatabaseOperation) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_database_operation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseOperation.ProtoReflect.Descriptor instead.
func (*DatabaseOperation) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_database_operation_proto_rawDescGZIP(), []int{1}
}

func (x *DatabaseOperation) GetOperation() *wrapperspb.StringValue {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *DatabaseOperation) GetTable() *wrapperspb.StringValue {
	if x != nil {
		return x.Table
	}
	return nil
}

var File_com_coralogixapis_database_catalog_v1_database_operation_proto protoreflect.FileDescriptor

var file_com_coralogixapis_database_catalog_v1_database_operation_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x11, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x3a, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x39, 0x39,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70,
	0x39, 0x39, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x39, 0x35,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70,
	0x39, 0x35, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x39, 0x30,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70,
	0x39, 0x30, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x37, 0x35,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70,
	0x37, 0x35, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x35, 0x30,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70,
	0x35, 0x30, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x76, 0x67,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x61,
	0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x44, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x40, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x4a, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x10, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x69, 0x6e, 0x67, 0x12, 0x59, 0x0a, 0x19, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x49,
	0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f,
	0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x0d, 0x6d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x49,
	0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x6d, 0x61, 0x78,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x4d, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x70, 0x39, 0x35, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x0f, 0x70, 0x39, 0x35, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x72, 0x65, 0x6e, 0x64,
	0x12, 0x4f, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x12, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e,
	0x64, 0x12, 0x4b, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x55,
	0x0a, 0x17, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x15,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x54, 0x0a, 0x17, 0x70, 0x39, 0x35, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x14, 0x70, 0x39, 0x35, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x5a, 0x0a, 0x1a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x17,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x56, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x60, 0x0a, 0x1d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x42, 0x19, 0x0a, 0x17, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_database_catalog_v1_database_operation_proto_rawDescOnce sync.Once
	file_com_coralogixapis_database_catalog_v1_database_operation_proto_rawDescData = file_com_coralogixapis_database_catalog_v1_database_operation_proto_rawDesc
)

func file_com_coralogixapis_database_catalog_v1_database_operation_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_database_catalog_v1_database_operation_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_database_catalog_v1_database_operation_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_database_catalog_v1_database_operation_proto_rawDescData)
	})
	return file_com_coralogixapis_database_catalog_v1_database_operation_proto_rawDescData
}

var file_com_coralogixapis_database_catalog_v1_database_operation_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_com_coralogixapis_database_catalog_v1_database_operation_proto_goTypes = []any{
	(*DatabaseOperationData)(nil),  // 0: com.coralogixapis.database_catalog.v1.DatabaseOperationData
	(*DatabaseOperation)(nil),      // 1: com.coralogixapis.database_catalog.v1.DatabaseOperation
	(*wrapperspb.StringValue)(nil), // 2: google.protobuf.StringValue
	(*wrapperspb.Int64Value)(nil),  // 3: google.protobuf.Int64Value
	(*wrapperspb.FloatValue)(nil),  // 4: google.protobuf.FloatValue
}
var file_com_coralogixapis_database_catalog_v1_database_operation_proto_depIdxs = []int32{
	2,  // 0: com.coralogixapis.database_catalog.v1.DatabaseOperationData.operation:type_name -> google.protobuf.StringValue
	2,  // 1: com.coralogixapis.database_catalog.v1.DatabaseOperationData.table:type_name -> google.protobuf.StringValue
	2,  // 2: com.coralogixapis.database_catalog.v1.DatabaseOperationData.service:type_name -> google.protobuf.StringValue
	3,  // 3: com.coralogixapis.database_catalog.v1.DatabaseOperationData.p99_latency:type_name -> google.protobuf.Int64Value
	3,  // 4: com.coralogixapis.database_catalog.v1.DatabaseOperationData.p95_latency:type_name -> google.protobuf.Int64Value
	3,  // 5: com.coralogixapis.database_catalog.v1.DatabaseOperationData.p90_latency:type_name -> google.protobuf.Int64Value
	3,  // 6: com.coralogixapis.database_catalog.v1.DatabaseOperationData.p75_latency:type_name -> google.protobuf.Int64Value
	3,  // 7: com.coralogixapis.database_catalog.v1.DatabaseOperationData.p50_latency:type_name -> google.protobuf.Int64Value
	3,  // 8: com.coralogixapis.database_catalog.v1.DatabaseOperationData.avg_latency:type_name -> google.protobuf.Int64Value
	3,  // 9: com.coralogixapis.database_catalog.v1.DatabaseOperationData.total_requests:type_name -> google.protobuf.Int64Value
	3,  // 10: com.coralogixapis.database_catalog.v1.DatabaseOperationData.total_errors:type_name -> google.protobuf.Int64Value
	4,  // 11: com.coralogixapis.database_catalog.v1.DatabaseOperationData.errors_percentage:type_name -> google.protobuf.FloatValue
	3,  // 12: com.coralogixapis.database_catalog.v1.DatabaseOperationData.time_consuming:type_name -> google.protobuf.Int64Value
	4,  // 13: com.coralogixapis.database_catalog.v1.DatabaseOperationData.time_consuming_percentage:type_name -> google.protobuf.FloatValue
	2,  // 14: com.coralogixapis.database_catalog.v1.DatabaseOperationData.operation_source:type_name -> google.protobuf.StringValue
	3,  // 15: com.coralogixapis.database_catalog.v1.DatabaseOperationData.throughput:type_name -> google.protobuf.Int64Value
	3,  // 16: com.coralogixapis.database_catalog.v1.DatabaseOperationData.max_throughput:type_name -> google.protobuf.Int64Value
	3,  // 17: com.coralogixapis.database_catalog.v1.DatabaseOperationData.errors_per_minute:type_name -> google.protobuf.Int64Value
	3,  // 18: com.coralogixapis.database_catalog.v1.DatabaseOperationData.max_errors_per_minute:type_name -> google.protobuf.Int64Value
	3,  // 19: com.coralogixapis.database_catalog.v1.DatabaseOperationData.errors_per_second:type_name -> google.protobuf.Int64Value
	3,  // 20: com.coralogixapis.database_catalog.v1.DatabaseOperationData.total_active_tables:type_name -> google.protobuf.Int64Value
	4,  // 21: com.coralogixapis.database_catalog.v1.DatabaseOperationData.p95_latency_trend:type_name -> google.protobuf.FloatValue
	4,  // 22: com.coralogixapis.database_catalog.v1.DatabaseOperationData.total_requests_trend:type_name -> google.protobuf.FloatValue
	4,  // 23: com.coralogixapis.database_catalog.v1.DatabaseOperationData.total_errors_trend:type_name -> google.protobuf.FloatValue
	4,  // 24: com.coralogixapis.database_catalog.v1.DatabaseOperationData.errors_percentage_trend:type_name -> google.protobuf.FloatValue
	3,  // 25: com.coralogixapis.database_catalog.v1.DatabaseOperationData.p95_latency_with_offset:type_name -> google.protobuf.Int64Value
	3,  // 26: com.coralogixapis.database_catalog.v1.DatabaseOperationData.total_requests_with_offset:type_name -> google.protobuf.Int64Value
	3,  // 27: com.coralogixapis.database_catalog.v1.DatabaseOperationData.total_errors_with_offset:type_name -> google.protobuf.Int64Value
	3,  // 28: com.coralogixapis.database_catalog.v1.DatabaseOperationData.errors_percentage_with_offset:type_name -> google.protobuf.Int64Value
	2,  // 29: com.coralogixapis.database_catalog.v1.DatabaseOperation.operation:type_name -> google.protobuf.StringValue
	2,  // 30: com.coralogixapis.database_catalog.v1.DatabaseOperation.table:type_name -> google.protobuf.StringValue
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_database_catalog_v1_database_operation_proto_init() }
func file_com_coralogixapis_database_catalog_v1_database_operation_proto_init() {
	if File_com_coralogixapis_database_catalog_v1_database_operation_proto != nil {
		return
	}
	file_com_coralogixapis_database_catalog_v1_database_operation_proto_msgTypes[0].OneofWrappers = []any{
		(*DatabaseOperationData_P99Latency)(nil),
		(*DatabaseOperationData_P95Latency)(nil),
		(*DatabaseOperationData_P90Latency)(nil),
		(*DatabaseOperationData_P75Latency)(nil),
		(*DatabaseOperationData_P50Latency)(nil),
		(*DatabaseOperationData_AvgLatency)(nil),
		(*DatabaseOperationData_TotalRequests)(nil),
		(*DatabaseOperationData_TotalErrors)(nil),
		(*DatabaseOperationData_ErrorsPercentage)(nil),
		(*DatabaseOperationData_TimeConsuming)(nil),
		(*DatabaseOperationData_TimeConsumingPercentage)(nil),
		(*DatabaseOperationData_OperationSource)(nil),
		(*DatabaseOperationData_Throughput)(nil),
		(*DatabaseOperationData_MaxThroughput)(nil),
		(*DatabaseOperationData_ErrorsPerMinute)(nil),
		(*DatabaseOperationData_MaxErrorsPerMinute)(nil),
		(*DatabaseOperationData_ErrorsPerSecond)(nil),
		(*DatabaseOperationData_TotalActiveTables)(nil),
		(*DatabaseOperationData_P95LatencyTrend)(nil),
		(*DatabaseOperationData_TotalRequestsTrend)(nil),
		(*DatabaseOperationData_TotalErrorsTrend)(nil),
		(*DatabaseOperationData_ErrorsPercentageTrend)(nil),
		(*DatabaseOperationData_P95LatencyWithOffset)(nil),
		(*DatabaseOperationData_TotalRequestsWithOffset)(nil),
		(*DatabaseOperationData_TotalErrorsWithOffset)(nil),
		(*DatabaseOperationData_ErrorsPercentageWithOffset)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_database_catalog_v1_database_operation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogixapis_database_catalog_v1_database_operation_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_database_catalog_v1_database_operation_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_database_catalog_v1_database_operation_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_database_catalog_v1_database_operation_proto = out.File
	file_com_coralogixapis_database_catalog_v1_database_operation_proto_rawDesc = nil
	file_com_coralogixapis_database_catalog_v1_database_operation_proto_goTypes = nil
	file_com_coralogixapis_database_catalog_v1_database_operation_proto_depIdxs = nil
}
