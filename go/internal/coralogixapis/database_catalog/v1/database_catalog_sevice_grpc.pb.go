// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: com/coralogixapis/database_catalog/v1/database_catalog_sevice.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DatabaseCatalogService_GetDatabasesColumnsStream_FullMethodName            = "/com.coralogixapis.database_catalog.v1.DatabaseCatalogService/GetDatabasesColumnsStream"
	DatabaseCatalogService_GetDatabaseRequestLatencyGraphStream_FullMethodName = "/com.coralogixapis.database_catalog.v1.DatabaseCatalogService/GetDatabaseRequestLatencyGraphStream"
	DatabaseCatalogService_GetDatabaseErrorsGraphStream_FullMethodName         = "/com.coralogixapis.database_catalog.v1.DatabaseCatalogService/GetDatabaseErrorsGraphStream"
	DatabaseCatalogService_GetDatabaseStatementsGraphStream_FullMethodName     = "/com.coralogixapis.database_catalog.v1.DatabaseCatalogService/GetDatabaseStatementsGraphStream"
	DatabaseCatalogService_UpdateDatabaseCatalogFilters_FullMethodName         = "/com.coralogixapis.database_catalog.v1.DatabaseCatalogService/UpdateDatabaseCatalogFilters"
	DatabaseCatalogService_GetDatabaseCatalogFilters_FullMethodName            = "/com.coralogixapis.database_catalog.v1.DatabaseCatalogService/GetDatabaseCatalogFilters"
	DatabaseCatalogService_ListCallingServices_FullMethodName                  = "/com.coralogixapis.database_catalog.v1.DatabaseCatalogService/ListCallingServices"
	DatabaseCatalogService_ListTables_FullMethodName                           = "/com.coralogixapis.database_catalog.v1.DatabaseCatalogService/ListTables"
	DatabaseCatalogService_GetAffectedAlerts_FullMethodName                    = "/com.coralogixapis.database_catalog.v1.DatabaseCatalogService/GetAffectedAlerts"
)

// DatabaseCatalogServiceClient is the client API for DatabaseCatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseCatalogServiceClient interface {
	GetDatabasesColumnsStream(ctx context.Context, in *GetDatabasesColumnsStreamRequest, opts ...grpc.CallOption) (DatabaseCatalogService_GetDatabasesColumnsStreamClient, error)
	GetDatabaseRequestLatencyGraphStream(ctx context.Context, in *GetDatabaseRequestLatencyGraphStreamRequest, opts ...grpc.CallOption) (DatabaseCatalogService_GetDatabaseRequestLatencyGraphStreamClient, error)
	GetDatabaseErrorsGraphStream(ctx context.Context, in *GetDatabaseErrorsGraphStreamRequest, opts ...grpc.CallOption) (DatabaseCatalogService_GetDatabaseErrorsGraphStreamClient, error)
	GetDatabaseStatementsGraphStream(ctx context.Context, in *GetDatabaseStatementsGraphStreamRequest, opts ...grpc.CallOption) (DatabaseCatalogService_GetDatabaseStatementsGraphStreamClient, error)
	UpdateDatabaseCatalogFilters(ctx context.Context, in *UpdateDatabaseCatalogFiltersRequest, opts ...grpc.CallOption) (*UpdateDatabaseCatalogFiltersResponse, error)
	GetDatabaseCatalogFilters(ctx context.Context, in *GetDatabaseCatalogFiltersRequest, opts ...grpc.CallOption) (*GetDatabaseCatalogFiltersResponse, error)
	ListCallingServices(ctx context.Context, in *ListCallingServicesRequest, opts ...grpc.CallOption) (*ListCallingServicesResponse, error)
	ListTables(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*ListTablesResponse, error)
	GetAffectedAlerts(ctx context.Context, in *GetAffectedAlertsRequest, opts ...grpc.CallOption) (*GetAffectedAlertsResponse, error)
}

type databaseCatalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseCatalogServiceClient(cc grpc.ClientConnInterface) DatabaseCatalogServiceClient {
	return &databaseCatalogServiceClient{cc}
}

func (c *databaseCatalogServiceClient) GetDatabasesColumnsStream(ctx context.Context, in *GetDatabasesColumnsStreamRequest, opts ...grpc.CallOption) (DatabaseCatalogService_GetDatabasesColumnsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DatabaseCatalogService_ServiceDesc.Streams[0], DatabaseCatalogService_GetDatabasesColumnsStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &databaseCatalogServiceGetDatabasesColumnsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DatabaseCatalogService_GetDatabasesColumnsStreamClient interface {
	Recv() (*GetDatabasesColumnsStreamResponse, error)
	grpc.ClientStream
}

type databaseCatalogServiceGetDatabasesColumnsStreamClient struct {
	grpc.ClientStream
}

func (x *databaseCatalogServiceGetDatabasesColumnsStreamClient) Recv() (*GetDatabasesColumnsStreamResponse, error) {
	m := new(GetDatabasesColumnsStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *databaseCatalogServiceClient) GetDatabaseRequestLatencyGraphStream(ctx context.Context, in *GetDatabaseRequestLatencyGraphStreamRequest, opts ...grpc.CallOption) (DatabaseCatalogService_GetDatabaseRequestLatencyGraphStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DatabaseCatalogService_ServiceDesc.Streams[1], DatabaseCatalogService_GetDatabaseRequestLatencyGraphStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &databaseCatalogServiceGetDatabaseRequestLatencyGraphStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DatabaseCatalogService_GetDatabaseRequestLatencyGraphStreamClient interface {
	Recv() (*GetDatabaseRequestLatencyGraphStreamResponse, error)
	grpc.ClientStream
}

type databaseCatalogServiceGetDatabaseRequestLatencyGraphStreamClient struct {
	grpc.ClientStream
}

func (x *databaseCatalogServiceGetDatabaseRequestLatencyGraphStreamClient) Recv() (*GetDatabaseRequestLatencyGraphStreamResponse, error) {
	m := new(GetDatabaseRequestLatencyGraphStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *databaseCatalogServiceClient) GetDatabaseErrorsGraphStream(ctx context.Context, in *GetDatabaseErrorsGraphStreamRequest, opts ...grpc.CallOption) (DatabaseCatalogService_GetDatabaseErrorsGraphStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DatabaseCatalogService_ServiceDesc.Streams[2], DatabaseCatalogService_GetDatabaseErrorsGraphStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &databaseCatalogServiceGetDatabaseErrorsGraphStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DatabaseCatalogService_GetDatabaseErrorsGraphStreamClient interface {
	Recv() (*GetDatabaseErrorsGraphStreamResponse, error)
	grpc.ClientStream
}

type databaseCatalogServiceGetDatabaseErrorsGraphStreamClient struct {
	grpc.ClientStream
}

func (x *databaseCatalogServiceGetDatabaseErrorsGraphStreamClient) Recv() (*GetDatabaseErrorsGraphStreamResponse, error) {
	m := new(GetDatabaseErrorsGraphStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *databaseCatalogServiceClient) GetDatabaseStatementsGraphStream(ctx context.Context, in *GetDatabaseStatementsGraphStreamRequest, opts ...grpc.CallOption) (DatabaseCatalogService_GetDatabaseStatementsGraphStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DatabaseCatalogService_ServiceDesc.Streams[3], DatabaseCatalogService_GetDatabaseStatementsGraphStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &databaseCatalogServiceGetDatabaseStatementsGraphStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DatabaseCatalogService_GetDatabaseStatementsGraphStreamClient interface {
	Recv() (*GetDatabaseStatementsGraphStreamResponse, error)
	grpc.ClientStream
}

type databaseCatalogServiceGetDatabaseStatementsGraphStreamClient struct {
	grpc.ClientStream
}

func (x *databaseCatalogServiceGetDatabaseStatementsGraphStreamClient) Recv() (*GetDatabaseStatementsGraphStreamResponse, error) {
	m := new(GetDatabaseStatementsGraphStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *databaseCatalogServiceClient) UpdateDatabaseCatalogFilters(ctx context.Context, in *UpdateDatabaseCatalogFiltersRequest, opts ...grpc.CallOption) (*UpdateDatabaseCatalogFiltersResponse, error) {
	out := new(UpdateDatabaseCatalogFiltersResponse)
	err := c.cc.Invoke(ctx, DatabaseCatalogService_UpdateDatabaseCatalogFilters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseCatalogServiceClient) GetDatabaseCatalogFilters(ctx context.Context, in *GetDatabaseCatalogFiltersRequest, opts ...grpc.CallOption) (*GetDatabaseCatalogFiltersResponse, error) {
	out := new(GetDatabaseCatalogFiltersResponse)
	err := c.cc.Invoke(ctx, DatabaseCatalogService_GetDatabaseCatalogFilters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseCatalogServiceClient) ListCallingServices(ctx context.Context, in *ListCallingServicesRequest, opts ...grpc.CallOption) (*ListCallingServicesResponse, error) {
	out := new(ListCallingServicesResponse)
	err := c.cc.Invoke(ctx, DatabaseCatalogService_ListCallingServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseCatalogServiceClient) ListTables(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*ListTablesResponse, error) {
	out := new(ListTablesResponse)
	err := c.cc.Invoke(ctx, DatabaseCatalogService_ListTables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseCatalogServiceClient) GetAffectedAlerts(ctx context.Context, in *GetAffectedAlertsRequest, opts ...grpc.CallOption) (*GetAffectedAlertsResponse, error) {
	out := new(GetAffectedAlertsResponse)
	err := c.cc.Invoke(ctx, DatabaseCatalogService_GetAffectedAlerts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseCatalogServiceServer is the server API for DatabaseCatalogService service.
// All implementations must embed UnimplementedDatabaseCatalogServiceServer
// for forward compatibility
type DatabaseCatalogServiceServer interface {
	GetDatabasesColumnsStream(*GetDatabasesColumnsStreamRequest, DatabaseCatalogService_GetDatabasesColumnsStreamServer) error
	GetDatabaseRequestLatencyGraphStream(*GetDatabaseRequestLatencyGraphStreamRequest, DatabaseCatalogService_GetDatabaseRequestLatencyGraphStreamServer) error
	GetDatabaseErrorsGraphStream(*GetDatabaseErrorsGraphStreamRequest, DatabaseCatalogService_GetDatabaseErrorsGraphStreamServer) error
	GetDatabaseStatementsGraphStream(*GetDatabaseStatementsGraphStreamRequest, DatabaseCatalogService_GetDatabaseStatementsGraphStreamServer) error
	UpdateDatabaseCatalogFilters(context.Context, *UpdateDatabaseCatalogFiltersRequest) (*UpdateDatabaseCatalogFiltersResponse, error)
	GetDatabaseCatalogFilters(context.Context, *GetDatabaseCatalogFiltersRequest) (*GetDatabaseCatalogFiltersResponse, error)
	ListCallingServices(context.Context, *ListCallingServicesRequest) (*ListCallingServicesResponse, error)
	ListTables(context.Context, *ListTablesRequest) (*ListTablesResponse, error)
	GetAffectedAlerts(context.Context, *GetAffectedAlertsRequest) (*GetAffectedAlertsResponse, error)
	mustEmbedUnimplementedDatabaseCatalogServiceServer()
}

// UnimplementedDatabaseCatalogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseCatalogServiceServer struct {
}

func (UnimplementedDatabaseCatalogServiceServer) GetDatabasesColumnsStream(*GetDatabasesColumnsStreamRequest, DatabaseCatalogService_GetDatabasesColumnsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDatabasesColumnsStream not implemented")
}
func (UnimplementedDatabaseCatalogServiceServer) GetDatabaseRequestLatencyGraphStream(*GetDatabaseRequestLatencyGraphStreamRequest, DatabaseCatalogService_GetDatabaseRequestLatencyGraphStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDatabaseRequestLatencyGraphStream not implemented")
}
func (UnimplementedDatabaseCatalogServiceServer) GetDatabaseErrorsGraphStream(*GetDatabaseErrorsGraphStreamRequest, DatabaseCatalogService_GetDatabaseErrorsGraphStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDatabaseErrorsGraphStream not implemented")
}
func (UnimplementedDatabaseCatalogServiceServer) GetDatabaseStatementsGraphStream(*GetDatabaseStatementsGraphStreamRequest, DatabaseCatalogService_GetDatabaseStatementsGraphStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDatabaseStatementsGraphStream not implemented")
}
func (UnimplementedDatabaseCatalogServiceServer) UpdateDatabaseCatalogFilters(context.Context, *UpdateDatabaseCatalogFiltersRequest) (*UpdateDatabaseCatalogFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatabaseCatalogFilters not implemented")
}
func (UnimplementedDatabaseCatalogServiceServer) GetDatabaseCatalogFilters(context.Context, *GetDatabaseCatalogFiltersRequest) (*GetDatabaseCatalogFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabaseCatalogFilters not implemented")
}
func (UnimplementedDatabaseCatalogServiceServer) ListCallingServices(context.Context, *ListCallingServicesRequest) (*ListCallingServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCallingServices not implemented")
}
func (UnimplementedDatabaseCatalogServiceServer) ListTables(context.Context, *ListTablesRequest) (*ListTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTables not implemented")
}
func (UnimplementedDatabaseCatalogServiceServer) GetAffectedAlerts(context.Context, *GetAffectedAlertsRequest) (*GetAffectedAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAffectedAlerts not implemented")
}
func (UnimplementedDatabaseCatalogServiceServer) mustEmbedUnimplementedDatabaseCatalogServiceServer() {
}

// UnsafeDatabaseCatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseCatalogServiceServer will
// result in compilation errors.
type UnsafeDatabaseCatalogServiceServer interface {
	mustEmbedUnimplementedDatabaseCatalogServiceServer()
}

func RegisterDatabaseCatalogServiceServer(s grpc.ServiceRegistrar, srv DatabaseCatalogServiceServer) {
	s.RegisterService(&DatabaseCatalogService_ServiceDesc, srv)
}

func _DatabaseCatalogService_GetDatabasesColumnsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDatabasesColumnsStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatabaseCatalogServiceServer).GetDatabasesColumnsStream(m, &databaseCatalogServiceGetDatabasesColumnsStreamServer{stream})
}

type DatabaseCatalogService_GetDatabasesColumnsStreamServer interface {
	Send(*GetDatabasesColumnsStreamResponse) error
	grpc.ServerStream
}

type databaseCatalogServiceGetDatabasesColumnsStreamServer struct {
	grpc.ServerStream
}

func (x *databaseCatalogServiceGetDatabasesColumnsStreamServer) Send(m *GetDatabasesColumnsStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DatabaseCatalogService_GetDatabaseRequestLatencyGraphStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDatabaseRequestLatencyGraphStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatabaseCatalogServiceServer).GetDatabaseRequestLatencyGraphStream(m, &databaseCatalogServiceGetDatabaseRequestLatencyGraphStreamServer{stream})
}

type DatabaseCatalogService_GetDatabaseRequestLatencyGraphStreamServer interface {
	Send(*GetDatabaseRequestLatencyGraphStreamResponse) error
	grpc.ServerStream
}

type databaseCatalogServiceGetDatabaseRequestLatencyGraphStreamServer struct {
	grpc.ServerStream
}

func (x *databaseCatalogServiceGetDatabaseRequestLatencyGraphStreamServer) Send(m *GetDatabaseRequestLatencyGraphStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DatabaseCatalogService_GetDatabaseErrorsGraphStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDatabaseErrorsGraphStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatabaseCatalogServiceServer).GetDatabaseErrorsGraphStream(m, &databaseCatalogServiceGetDatabaseErrorsGraphStreamServer{stream})
}

type DatabaseCatalogService_GetDatabaseErrorsGraphStreamServer interface {
	Send(*GetDatabaseErrorsGraphStreamResponse) error
	grpc.ServerStream
}

type databaseCatalogServiceGetDatabaseErrorsGraphStreamServer struct {
	grpc.ServerStream
}

func (x *databaseCatalogServiceGetDatabaseErrorsGraphStreamServer) Send(m *GetDatabaseErrorsGraphStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DatabaseCatalogService_GetDatabaseStatementsGraphStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDatabaseStatementsGraphStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatabaseCatalogServiceServer).GetDatabaseStatementsGraphStream(m, &databaseCatalogServiceGetDatabaseStatementsGraphStreamServer{stream})
}

type DatabaseCatalogService_GetDatabaseStatementsGraphStreamServer interface {
	Send(*GetDatabaseStatementsGraphStreamResponse) error
	grpc.ServerStream
}

type databaseCatalogServiceGetDatabaseStatementsGraphStreamServer struct {
	grpc.ServerStream
}

func (x *databaseCatalogServiceGetDatabaseStatementsGraphStreamServer) Send(m *GetDatabaseStatementsGraphStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DatabaseCatalogService_UpdateDatabaseCatalogFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatabaseCatalogFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseCatalogServiceServer).UpdateDatabaseCatalogFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseCatalogService_UpdateDatabaseCatalogFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseCatalogServiceServer).UpdateDatabaseCatalogFilters(ctx, req.(*UpdateDatabaseCatalogFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseCatalogService_GetDatabaseCatalogFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatabaseCatalogFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseCatalogServiceServer).GetDatabaseCatalogFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseCatalogService_GetDatabaseCatalogFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseCatalogServiceServer).GetDatabaseCatalogFilters(ctx, req.(*GetDatabaseCatalogFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseCatalogService_ListCallingServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCallingServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseCatalogServiceServer).ListCallingServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseCatalogService_ListCallingServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseCatalogServiceServer).ListCallingServices(ctx, req.(*ListCallingServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseCatalogService_ListTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseCatalogServiceServer).ListTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseCatalogService_ListTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseCatalogServiceServer).ListTables(ctx, req.(*ListTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseCatalogService_GetAffectedAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAffectedAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseCatalogServiceServer).GetAffectedAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseCatalogService_GetAffectedAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseCatalogServiceServer).GetAffectedAlerts(ctx, req.(*GetAffectedAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseCatalogService_ServiceDesc is the grpc.ServiceDesc for DatabaseCatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseCatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogixapis.database_catalog.v1.DatabaseCatalogService",
	HandlerType: (*DatabaseCatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateDatabaseCatalogFilters",
			Handler:    _DatabaseCatalogService_UpdateDatabaseCatalogFilters_Handler,
		},
		{
			MethodName: "GetDatabaseCatalogFilters",
			Handler:    _DatabaseCatalogService_GetDatabaseCatalogFilters_Handler,
		},
		{
			MethodName: "ListCallingServices",
			Handler:    _DatabaseCatalogService_ListCallingServices_Handler,
		},
		{
			MethodName: "ListTables",
			Handler:    _DatabaseCatalogService_ListTables_Handler,
		},
		{
			MethodName: "GetAffectedAlerts",
			Handler:    _DatabaseCatalogService_GetAffectedAlerts_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDatabasesColumnsStream",
			Handler:       _DatabaseCatalogService_GetDatabasesColumnsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDatabaseRequestLatencyGraphStream",
			Handler:       _DatabaseCatalogService_GetDatabaseRequestLatencyGraphStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDatabaseErrorsGraphStream",
			Handler:       _DatabaseCatalogService_GetDatabaseErrorsGraphStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDatabaseStatementsGraphStream",
			Handler:       _DatabaseCatalogService_GetDatabaseStatementsGraphStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/coralogixapis/database_catalog/v1/database_catalog_sevice.proto",
}
