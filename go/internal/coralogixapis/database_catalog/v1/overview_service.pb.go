// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: com/coralogixapis/database_catalog/v1/overview_service.proto

package v1

import (
	v1 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogix/catalog/v1"
	v2 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/common/v2"
	v11 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/widgets/v1"
	v12 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/service_catalog/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetDatabaseOverviewStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName           *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	DatabaseNameSource     *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=database_name_source,json=databaseNameSource,proto3" json:"database_name_source,omitempty"`
	TimeRange              *v2.TimeRange             `protobuf:"bytes,3,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	DatabaseCatalogFilters []*v1.ApmFilter           `protobuf:"bytes,4,rep,name=database_catalog_filters,json=databaseCatalogFilters,proto3" json:"database_catalog_filters,omitempty"`
	CallingServices        []*wrapperspb.StringValue `protobuf:"bytes,5,rep,name=calling_services,json=callingServices,proto3" json:"calling_services,omitempty"`
	DatabaseSystem         *wrapperspb.StringValue   `protobuf:"bytes,6,opt,name=database_system,json=databaseSystem,proto3" json:"database_system,omitempty"`
	Tables                 []*wrapperspb.StringValue `protobuf:"bytes,7,rep,name=tables,proto3" json:"tables,omitempty"`
	TrendOffset            *wrapperspb.Int64Value    `protobuf:"bytes,8,opt,name=trend_offset,json=trendOffset,proto3" json:"trend_offset,omitempty"`
}

func (x *GetDatabaseOverviewStreamRequest) Reset() {
	*x = GetDatabaseOverviewStreamRequest{}
	mi := &file_com_coralogixapis_database_catalog_v1_overview_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatabaseOverviewStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatabaseOverviewStreamRequest) ProtoMessage() {}

func (x *GetDatabaseOverviewStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_overview_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatabaseOverviewStreamRequest.ProtoReflect.Descriptor instead.
func (*GetDatabaseOverviewStreamRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_overview_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetDatabaseOverviewStreamRequest) GetDatabaseName() *wrapperspb.StringValue {
	if x != nil {
		return x.DatabaseName
	}
	return nil
}

func (x *GetDatabaseOverviewStreamRequest) GetDatabaseNameSource() *wrapperspb.StringValue {
	if x != nil {
		return x.DatabaseNameSource
	}
	return nil
}

func (x *GetDatabaseOverviewStreamRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetDatabaseOverviewStreamRequest) GetDatabaseCatalogFilters() []*v1.ApmFilter {
	if x != nil {
		return x.DatabaseCatalogFilters
	}
	return nil
}

func (x *GetDatabaseOverviewStreamRequest) GetCallingServices() []*wrapperspb.StringValue {
	if x != nil {
		return x.CallingServices
	}
	return nil
}

func (x *GetDatabaseOverviewStreamRequest) GetDatabaseSystem() *wrapperspb.StringValue {
	if x != nil {
		return x.DatabaseSystem
	}
	return nil
}

func (x *GetDatabaseOverviewStreamRequest) GetTables() []*wrapperspb.StringValue {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *GetDatabaseOverviewStreamRequest) GetTrendOffset() *wrapperspb.Int64Value {
	if x != nil {
		return x.TrendOffset
	}
	return nil
}

type GetDatabaseOverviewStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Widget:
	//
	//	*GetDatabaseOverviewStreamResponse_AvgLatency
	//	*GetDatabaseOverviewStreamResponse_Throughput
	//	*GetDatabaseOverviewStreamResponse_ErrorRpm
	//	*GetDatabaseOverviewStreamResponse_ErrorPercentage
	//	*GetDatabaseOverviewStreamResponse_RequestsAndErrors
	//	*GetDatabaseOverviewStreamResponse_ErrorPercentageOverTime
	//	*GetDatabaseOverviewStreamResponse_ErrorRate
	//	*GetDatabaseOverviewStreamResponse_LatencyPercentiles
	//	*GetDatabaseOverviewStreamResponse_P50
	//	*GetDatabaseOverviewStreamResponse_P75
	//	*GetDatabaseOverviewStreamResponse_P95
	//	*GetDatabaseOverviewStreamResponse_P99
	//	*GetDatabaseOverviewStreamResponse_RequestRatePerMinute
	//	*GetDatabaseOverviewStreamResponse_TimeConsumingQueries
	//	*GetDatabaseOverviewStreamResponse_ApdexScore
	//	*GetDatabaseOverviewStreamResponse_AvgLatencyTrend
	//	*GetDatabaseOverviewStreamResponse_ThroughputTrend
	//	*GetDatabaseOverviewStreamResponse_ErrorRpmTrend
	//	*GetDatabaseOverviewStreamResponse_ErrorPercentageTrend
	//	*GetDatabaseOverviewStreamResponse_P50Trend
	//	*GetDatabaseOverviewStreamResponse_P75Trend
	//	*GetDatabaseOverviewStreamResponse_P95Trend
	//	*GetDatabaseOverviewStreamResponse_P99Trend
	//	*GetDatabaseOverviewStreamResponse_RequestRatePerMinuteTrend
	//	*GetDatabaseOverviewStreamResponse_AvgLatencyWithOffset
	//	*GetDatabaseOverviewStreamResponse_ThroughputWithOffset
	//	*GetDatabaseOverviewStreamResponse_ErrorRpmWithOffset
	//	*GetDatabaseOverviewStreamResponse_ErrorPercentageWithOffset
	//	*GetDatabaseOverviewStreamResponse_P50WithOffset
	//	*GetDatabaseOverviewStreamResponse_P75WithOffset
	//	*GetDatabaseOverviewStreamResponse_P95WithOffset
	//	*GetDatabaseOverviewStreamResponse_P99WithOffset
	//	*GetDatabaseOverviewStreamResponse_RequestRatePerMinuteWithOffset
	//	*GetDatabaseOverviewStreamResponse_ErrorsPerSeconds
	Widget isGetDatabaseOverviewStreamResponse_Widget `protobuf_oneof:"widget"`
}

func (x *GetDatabaseOverviewStreamResponse) Reset() {
	*x = GetDatabaseOverviewStreamResponse{}
	mi := &file_com_coralogixapis_database_catalog_v1_overview_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatabaseOverviewStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatabaseOverviewStreamResponse) ProtoMessage() {}

func (x *GetDatabaseOverviewStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_overview_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatabaseOverviewStreamResponse.ProtoReflect.Descriptor instead.
func (*GetDatabaseOverviewStreamResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_overview_service_proto_rawDescGZIP(), []int{1}
}

func (m *GetDatabaseOverviewStreamResponse) GetWidget() isGetDatabaseOverviewStreamResponse_Widget {
	if m != nil {
		return m.Widget
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetAvgLatency() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_AvgLatency); ok {
		return x.AvgLatency
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetThroughput() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_Throughput); ok {
		return x.Throughput
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetErrorRpm() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_ErrorRpm); ok {
		return x.ErrorRpm
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetErrorPercentage() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_ErrorPercentage); ok {
		return x.ErrorPercentage
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetRequestsAndErrors() *v12.RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_RequestsAndErrors); ok {
		return x.RequestsAndErrors
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetErrorPercentageOverTime() *v12.RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_ErrorPercentageOverTime); ok {
		return x.ErrorPercentageOverTime
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetErrorRate() *v12.RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_ErrorRate); ok {
		return x.ErrorRate
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetLatencyPercentiles() *v12.RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_LatencyPercentiles); ok {
		return x.LatencyPercentiles
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetP50() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_P50); ok {
		return x.P50
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetP75() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_P75); ok {
		return x.P75
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetP95() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_P95); ok {
		return x.P95
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetP99() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_P99); ok {
		return x.P99
	}
	return nil
}

// Deprecated: Marked as deprecated in com/coralogixapis/database_catalog/v1/overview_service.proto.
func (x *GetDatabaseOverviewStreamResponse) GetRequestRatePerMinute() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_RequestRatePerMinute); ok {
		return x.RequestRatePerMinute
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetTimeConsumingQueries() *v11.Topk {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_TimeConsumingQueries); ok {
		return x.TimeConsumingQueries
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetApdexScore() *v11.LineChart {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_ApdexScore); ok {
		return x.ApdexScore
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetAvgLatencyTrend() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_AvgLatencyTrend); ok {
		return x.AvgLatencyTrend
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetThroughputTrend() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_ThroughputTrend); ok {
		return x.ThroughputTrend
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetErrorRpmTrend() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_ErrorRpmTrend); ok {
		return x.ErrorRpmTrend
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetErrorPercentageTrend() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_ErrorPercentageTrend); ok {
		return x.ErrorPercentageTrend
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetP50Trend() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_P50Trend); ok {
		return x.P50Trend
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetP75Trend() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_P75Trend); ok {
		return x.P75Trend
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetP95Trend() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_P95Trend); ok {
		return x.P95Trend
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetP99Trend() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_P99Trend); ok {
		return x.P99Trend
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetRequestRatePerMinuteTrend() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_RequestRatePerMinuteTrend); ok {
		return x.RequestRatePerMinuteTrend
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetAvgLatencyWithOffset() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_AvgLatencyWithOffset); ok {
		return x.AvgLatencyWithOffset
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetThroughputWithOffset() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_ThroughputWithOffset); ok {
		return x.ThroughputWithOffset
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetErrorRpmWithOffset() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_ErrorRpmWithOffset); ok {
		return x.ErrorRpmWithOffset
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetErrorPercentageWithOffset() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_ErrorPercentageWithOffset); ok {
		return x.ErrorPercentageWithOffset
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetP50WithOffset() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_P50WithOffset); ok {
		return x.P50WithOffset
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetP75WithOffset() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_P75WithOffset); ok {
		return x.P75WithOffset
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetP95WithOffset() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_P95WithOffset); ok {
		return x.P95WithOffset
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetP99WithOffset() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_P99WithOffset); ok {
		return x.P99WithOffset
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetRequestRatePerMinuteWithOffset() *v11.Stat {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_RequestRatePerMinuteWithOffset); ok {
		return x.RequestRatePerMinuteWithOffset
	}
	return nil
}

func (x *GetDatabaseOverviewStreamResponse) GetErrorsPerSeconds() *v12.RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetDatabaseOverviewStreamResponse_ErrorsPerSeconds); ok {
		return x.ErrorsPerSeconds
	}
	return nil
}

type isGetDatabaseOverviewStreamResponse_Widget interface {
	isGetDatabaseOverviewStreamResponse_Widget()
}

type GetDatabaseOverviewStreamResponse_AvgLatency struct {
	AvgLatency *v11.Stat `protobuf:"bytes,1,opt,name=avg_latency,json=avgLatency,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_Throughput struct {
	Throughput *v11.Stat `protobuf:"bytes,2,opt,name=throughput,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_ErrorRpm struct {
	ErrorRpm *v11.Stat `protobuf:"bytes,3,opt,name=error_rpm,json=errorRpm,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_ErrorPercentage struct {
	ErrorPercentage *v11.Stat `protobuf:"bytes,4,opt,name=error_percentage,json=errorPercentage,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_RequestsAndErrors struct {
	RequestsAndErrors *v12.RepeatedLineChart `protobuf:"bytes,5,opt,name=requests_and_errors,json=requestsAndErrors,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_ErrorPercentageOverTime struct {
	ErrorPercentageOverTime *v12.RepeatedLineChart `protobuf:"bytes,6,opt,name=error_percentage_over_time,json=errorPercentageOverTime,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_ErrorRate struct {
	ErrorRate *v12.RepeatedLineChart `protobuf:"bytes,7,opt,name=error_rate,json=errorRate,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_LatencyPercentiles struct {
	LatencyPercentiles *v12.RepeatedLineChart `protobuf:"bytes,8,opt,name=latency_percentiles,json=latencyPercentiles,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_P50 struct {
	P50 *v11.Stat `protobuf:"bytes,9,opt,name=p50,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_P75 struct {
	P75 *v11.Stat `protobuf:"bytes,10,opt,name=p75,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_P95 struct {
	P95 *v11.Stat `protobuf:"bytes,11,opt,name=p95,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_P99 struct {
	P99 *v11.Stat `protobuf:"bytes,12,opt,name=p99,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_RequestRatePerMinute struct {
	// Deprecated: Marked as deprecated in com/coralogixapis/database_catalog/v1/overview_service.proto.
	RequestRatePerMinute *v11.Stat `protobuf:"bytes,13,opt,name=request_rate_per_minute,json=requestRatePerMinute,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_TimeConsumingQueries struct {
	TimeConsumingQueries *v11.Topk `protobuf:"bytes,14,opt,name=time_consuming_queries,json=timeConsumingQueries,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_ApdexScore struct {
	ApdexScore *v11.LineChart `protobuf:"bytes,15,opt,name=apdex_score,json=apdexScore,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_AvgLatencyTrend struct {
	AvgLatencyTrend *v11.Stat `protobuf:"bytes,16,opt,name=avg_latency_trend,json=avgLatencyTrend,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_ThroughputTrend struct {
	ThroughputTrend *v11.Stat `protobuf:"bytes,17,opt,name=throughput_trend,json=throughputTrend,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_ErrorRpmTrend struct {
	ErrorRpmTrend *v11.Stat `protobuf:"bytes,18,opt,name=error_rpm_trend,json=errorRpmTrend,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_ErrorPercentageTrend struct {
	ErrorPercentageTrend *v11.Stat `protobuf:"bytes,19,opt,name=error_percentage_trend,json=errorPercentageTrend,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_P50Trend struct {
	P50Trend *v11.Stat `protobuf:"bytes,20,opt,name=p50_trend,json=p50Trend,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_P75Trend struct {
	P75Trend *v11.Stat `protobuf:"bytes,21,opt,name=p75_trend,json=p75Trend,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_P95Trend struct {
	P95Trend *v11.Stat `protobuf:"bytes,22,opt,name=p95_trend,json=p95Trend,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_P99Trend struct {
	P99Trend *v11.Stat `protobuf:"bytes,23,opt,name=p99_trend,json=p99Trend,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_RequestRatePerMinuteTrend struct {
	RequestRatePerMinuteTrend *v11.Stat `protobuf:"bytes,24,opt,name=request_rate_per_minute_trend,json=requestRatePerMinuteTrend,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_AvgLatencyWithOffset struct {
	AvgLatencyWithOffset *v11.Stat `protobuf:"bytes,25,opt,name=avg_latency_with_offset,json=avgLatencyWithOffset,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_ThroughputWithOffset struct {
	ThroughputWithOffset *v11.Stat `protobuf:"bytes,26,opt,name=throughput_with_offset,json=throughputWithOffset,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_ErrorRpmWithOffset struct {
	ErrorRpmWithOffset *v11.Stat `protobuf:"bytes,27,opt,name=error_rpm_with_offset,json=errorRpmWithOffset,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_ErrorPercentageWithOffset struct {
	ErrorPercentageWithOffset *v11.Stat `protobuf:"bytes,28,opt,name=error_percentage_with_offset,json=errorPercentageWithOffset,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_P50WithOffset struct {
	P50WithOffset *v11.Stat `protobuf:"bytes,29,opt,name=p50_with_offset,json=p50WithOffset,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_P75WithOffset struct {
	P75WithOffset *v11.Stat `protobuf:"bytes,30,opt,name=p75_with_offset,json=p75WithOffset,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_P95WithOffset struct {
	P95WithOffset *v11.Stat `protobuf:"bytes,31,opt,name=p95_with_offset,json=p95WithOffset,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_P99WithOffset struct {
	P99WithOffset *v11.Stat `protobuf:"bytes,32,opt,name=p99_with_offset,json=p99WithOffset,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_RequestRatePerMinuteWithOffset struct {
	RequestRatePerMinuteWithOffset *v11.Stat `protobuf:"bytes,33,opt,name=request_rate_per_minute_with_offset,json=requestRatePerMinuteWithOffset,proto3,oneof"`
}

type GetDatabaseOverviewStreamResponse_ErrorsPerSeconds struct {
	ErrorsPerSeconds *v12.RepeatedLineChart `protobuf:"bytes,34,opt,name=errors_per_seconds,json=errorsPerSeconds,proto3,oneof"`
}

func (*GetDatabaseOverviewStreamResponse_AvgLatency) isGetDatabaseOverviewStreamResponse_Widget() {}

func (*GetDatabaseOverviewStreamResponse_Throughput) isGetDatabaseOverviewStreamResponse_Widget() {}

func (*GetDatabaseOverviewStreamResponse_ErrorRpm) isGetDatabaseOverviewStreamResponse_Widget() {}

func (*GetDatabaseOverviewStreamResponse_ErrorPercentage) isGetDatabaseOverviewStreamResponse_Widget() {
}

func (*GetDatabaseOverviewStreamResponse_RequestsAndErrors) isGetDatabaseOverviewStreamResponse_Widget() {
}

func (*GetDatabaseOverviewStreamResponse_ErrorPercentageOverTime) isGetDatabaseOverviewStreamResponse_Widget() {
}

func (*GetDatabaseOverviewStreamResponse_ErrorRate) isGetDatabaseOverviewStreamResponse_Widget() {}

func (*GetDatabaseOverviewStreamResponse_LatencyPercentiles) isGetDatabaseOverviewStreamResponse_Widget() {
}

func (*GetDatabaseOverviewStreamResponse_P50) isGetDatabaseOverviewStreamResponse_Widget() {}

func (*GetDatabaseOverviewStreamResponse_P75) isGetDatabaseOverviewStreamResponse_Widget() {}

func (*GetDatabaseOverviewStreamResponse_P95) isGetDatabaseOverviewStreamResponse_Widget() {}

func (*GetDatabaseOverviewStreamResponse_P99) isGetDatabaseOverviewStreamResponse_Widget() {}

func (*GetDatabaseOverviewStreamResponse_RequestRatePerMinute) isGetDatabaseOverviewStreamResponse_Widget() {
}

func (*GetDatabaseOverviewStreamResponse_TimeConsumingQueries) isGetDatabaseOverviewStreamResponse_Widget() {
}

func (*GetDatabaseOverviewStreamResponse_ApdexScore) isGetDatabaseOverviewStreamResponse_Widget() {}

func (*GetDatabaseOverviewStreamResponse_AvgLatencyTrend) isGetDatabaseOverviewStreamResponse_Widget() {
}

func (*GetDatabaseOverviewStreamResponse_ThroughputTrend) isGetDatabaseOverviewStreamResponse_Widget() {
}

func (*GetDatabaseOverviewStreamResponse_ErrorRpmTrend) isGetDatabaseOverviewStreamResponse_Widget() {
}

func (*GetDatabaseOverviewStreamResponse_ErrorPercentageTrend) isGetDatabaseOverviewStreamResponse_Widget() {
}

func (*GetDatabaseOverviewStreamResponse_P50Trend) isGetDatabaseOverviewStreamResponse_Widget() {}

func (*GetDatabaseOverviewStreamResponse_P75Trend) isGetDatabaseOverviewStreamResponse_Widget() {}

func (*GetDatabaseOverviewStreamResponse_P95Trend) isGetDatabaseOverviewStreamResponse_Widget() {}

func (*GetDatabaseOverviewStreamResponse_P99Trend) isGetDatabaseOverviewStreamResponse_Widget() {}

func (*GetDatabaseOverviewStreamResponse_RequestRatePerMinuteTrend) isGetDatabaseOverviewStreamResponse_Widget() {
}

func (*GetDatabaseOverviewStreamResponse_AvgLatencyWithOffset) isGetDatabaseOverviewStreamResponse_Widget() {
}

func (*GetDatabaseOverviewStreamResponse_ThroughputWithOffset) isGetDatabaseOverviewStreamResponse_Widget() {
}

func (*GetDatabaseOverviewStreamResponse_ErrorRpmWithOffset) isGetDatabaseOverviewStreamResponse_Widget() {
}

func (*GetDatabaseOverviewStreamResponse_ErrorPercentageWithOffset) isGetDatabaseOverviewStreamResponse_Widget() {
}

func (*GetDatabaseOverviewStreamResponse_P50WithOffset) isGetDatabaseOverviewStreamResponse_Widget() {
}

func (*GetDatabaseOverviewStreamResponse_P75WithOffset) isGetDatabaseOverviewStreamResponse_Widget() {
}

func (*GetDatabaseOverviewStreamResponse_P95WithOffset) isGetDatabaseOverviewStreamResponse_Widget() {
}

func (*GetDatabaseOverviewStreamResponse_P99WithOffset) isGetDatabaseOverviewStreamResponse_Widget() {
}

func (*GetDatabaseOverviewStreamResponse_RequestRatePerMinuteWithOffset) isGetDatabaseOverviewStreamResponse_Widget() {
}

func (*GetDatabaseOverviewStreamResponse_ErrorsPerSeconds) isGetDatabaseOverviewStreamResponse_Widget() {
}

type GetApdexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName           *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	DatabaseNameSource     *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=database_name_source,json=databaseNameSource,proto3" json:"database_name_source,omitempty"`
	TimeRange              *v2.TimeRange             `protobuf:"bytes,3,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	DatabaseCatalogFilters []*v1.ApmFilter           `protobuf:"bytes,4,rep,name=database_catalog_filters,json=databaseCatalogFilters,proto3" json:"database_catalog_filters,omitempty"`
	CallingServices        []*wrapperspb.StringValue `protobuf:"bytes,5,rep,name=calling_services,json=callingServices,proto3" json:"calling_services,omitempty"`
}

func (x *GetApdexRequest) Reset() {
	*x = GetApdexRequest{}
	mi := &file_com_coralogixapis_database_catalog_v1_overview_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetApdexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApdexRequest) ProtoMessage() {}

func (x *GetApdexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_overview_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApdexRequest.ProtoReflect.Descriptor instead.
func (*GetApdexRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_overview_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetApdexRequest) GetDatabaseName() *wrapperspb.StringValue {
	if x != nil {
		return x.DatabaseName
	}
	return nil
}

func (x *GetApdexRequest) GetDatabaseNameSource() *wrapperspb.StringValue {
	if x != nil {
		return x.DatabaseNameSource
	}
	return nil
}

func (x *GetApdexRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetApdexRequest) GetDatabaseCatalogFilters() []*v1.ApmFilter {
	if x != nil {
		return x.DatabaseCatalogFilters
	}
	return nil
}

func (x *GetApdexRequest) GetCallingServices() []*wrapperspb.StringValue {
	if x != nil {
		return x.CallingServices
	}
	return nil
}

type GetApdexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApdexScore *v11.LineChart `protobuf:"bytes,1,opt,name=apdex_score,json=apdexScore,proto3" json:"apdex_score,omitempty"`
}

func (x *GetApdexResponse) Reset() {
	*x = GetApdexResponse{}
	mi := &file_com_coralogixapis_database_catalog_v1_overview_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetApdexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApdexResponse) ProtoMessage() {}

func (x *GetApdexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_overview_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApdexResponse.ProtoReflect.Descriptor instead.
func (*GetApdexResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_overview_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetApdexResponse) GetApdexScore() *v11.LineChart {
	if x != nil {
		return x.ApdexScore
	}
	return nil
}

var File_com_coralogixapis_database_catalog_v1_overview_service_proto protoreflect.FileDescriptor

var file_com_coralogixapis_database_catalog_v1_overview_service_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x77, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x70, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x31, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x34, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe5, 0x04, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x5d, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x34, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x72, 0x65, 0x6e, 0x64,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x65, 0x6e,
	0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xa2, 0x17, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x0b, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x76,
	0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x48, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70,
	0x75, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x70, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x70, 0x6d, 0x12, 0x53, 0x0a, 0x10, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x69,
	0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x41, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x76, 0x0a, 0x1a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x17, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x58, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a, 0x13, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x48, 0x00, 0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x03, 0x70, 0x35, 0x30, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x03,
	0x70, 0x35, 0x30, 0x12, 0x3a, 0x0a, 0x03, 0x70, 0x37, 0x35, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x03, 0x70, 0x37, 0x35, 0x12,
	0x3a, 0x0a, 0x03, 0x70, 0x39, 0x35, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x03, 0x70, 0x39, 0x35, 0x12, 0x3a, 0x0a, 0x03, 0x70,
	0x39, 0x39, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d,
	0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x48, 0x00, 0x52, 0x03, 0x70, 0x39, 0x39, 0x12, 0x63, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d,
	0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x16,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x70, 0x6b, 0x48, 0x00, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0b,
	0x61, 0x70, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x61, 0x70, 0x64, 0x65, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x54, 0x0a, 0x11,
	0x61, 0x76, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x6e,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x61, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x72, 0x65,
	0x6e, 0x64, 0x12, 0x53, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74,
	0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70,
	0x75, 0x74, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x50, 0x0a, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x72, 0x70, 0x6d, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x70, 0x6d, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x5e, 0x0a, 0x16, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x72,
	0x65, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70,
	0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x48, 0x00, 0x52, 0x14, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x70, 0x35, 0x30,
	0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x35, 0x30, 0x54, 0x72, 0x65, 0x6e, 0x64,
	0x12, 0x45, 0x0a, 0x09, 0x70, 0x37, 0x35, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x37, 0x35, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x70, 0x39, 0x35, 0x5f, 0x74,
	0x72, 0x65, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61,
	0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x39, 0x35, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x45,
	0x0a, 0x09, 0x70, 0x39, 0x39, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x39, 0x39,
	0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x6a, 0x0a, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x54, 0x72, 0x65, 0x6e,
	0x64, 0x12, 0x5f, 0x0a, 0x17, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x14, 0x61, 0x76,
	0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x5e, 0x0a, 0x16, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x14, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x5b, 0x0a, 0x15, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x70, 0x6d, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x12, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x70, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x69, 0x0a, 0x1c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52,
	0x19, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x0f, 0x70, 0x35,
	0x30, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70,
	0x35, 0x30, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x0f,
	0x70, 0x37, 0x35, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x70, 0x37, 0x35, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x50,
	0x0a, 0x0f, 0x70, 0x39, 0x35, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x70, 0x39, 0x35, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x50, 0x0a, 0x0f, 0x70, 0x39, 0x39, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70,
	0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x39, 0x39, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x75, 0x0a, 0x23, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x67, 0x0a, 0x12, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x22, 0x97, 0x03, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x41, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5d,
	0x0a, 0x18, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a,
	0x10, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x70, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x61, 0x70,
	0x64, 0x65, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x0a, 0x61, 0x70,
	0x64, 0x65, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x32, 0xff, 0x02, 0x0a, 0x17, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xd4, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0xc2, 0xb8, 0x02, 0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x20, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x30, 0x01, 0x12, 0x8c, 0x01, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x64, 0x65, 0x78, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0f, 0xc2, 0xb8, 0x02, 0x0b, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x20, 0x41, 0x70, 0x64, 0x65, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_com_coralogixapis_database_catalog_v1_overview_service_proto_rawDescOnce sync.Once
	file_com_coralogixapis_database_catalog_v1_overview_service_proto_rawDescData = file_com_coralogixapis_database_catalog_v1_overview_service_proto_rawDesc
)

func file_com_coralogixapis_database_catalog_v1_overview_service_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_database_catalog_v1_overview_service_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_database_catalog_v1_overview_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_database_catalog_v1_overview_service_proto_rawDescData)
	})
	return file_com_coralogixapis_database_catalog_v1_overview_service_proto_rawDescData
}

var file_com_coralogixapis_database_catalog_v1_overview_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_com_coralogixapis_database_catalog_v1_overview_service_proto_goTypes = []any{
	(*GetDatabaseOverviewStreamRequest)(nil),  // 0: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamRequest
	(*GetDatabaseOverviewStreamResponse)(nil), // 1: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse
	(*GetApdexRequest)(nil),                   // 2: com.coralogixapis.database_catalog.v1.GetApdexRequest
	(*GetApdexResponse)(nil),                  // 3: com.coralogixapis.database_catalog.v1.GetApdexResponse
	(*wrapperspb.StringValue)(nil),            // 4: google.protobuf.StringValue
	(*v2.TimeRange)(nil),                      // 5: com.coralogixapis.apm.common.v2.TimeRange
	(*v1.ApmFilter)(nil),                      // 6: com.coralogix.catalog.v1.ApmFilter
	(*wrapperspb.Int64Value)(nil),             // 7: google.protobuf.Int64Value
	(*v11.Stat)(nil),                          // 8: com.coralogixapis.apm.widgets.v1.Stat
	(*v12.RepeatedLineChart)(nil),             // 9: com.coralogixapis.service_catalog.v1.RepeatedLineChart
	(*v11.Topk)(nil),                          // 10: com.coralogixapis.apm.widgets.v1.Topk
	(*v11.LineChart)(nil),                     // 11: com.coralogixapis.apm.widgets.v1.LineChart
}
var file_com_coralogixapis_database_catalog_v1_overview_service_proto_depIdxs = []int32{
	4,  // 0: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamRequest.database_name:type_name -> google.protobuf.StringValue
	4,  // 1: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamRequest.database_name_source:type_name -> google.protobuf.StringValue
	5,  // 2: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	6,  // 3: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamRequest.database_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	4,  // 4: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamRequest.calling_services:type_name -> google.protobuf.StringValue
	4,  // 5: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamRequest.database_system:type_name -> google.protobuf.StringValue
	4,  // 6: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamRequest.tables:type_name -> google.protobuf.StringValue
	7,  // 7: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamRequest.trend_offset:type_name -> google.protobuf.Int64Value
	8,  // 8: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.avg_latency:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 9: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.throughput:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 10: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.error_rpm:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 11: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.error_percentage:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	9,  // 12: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.requests_and_errors:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	9,  // 13: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.error_percentage_over_time:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	9,  // 14: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.error_rate:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	9,  // 15: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.latency_percentiles:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	8,  // 16: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.p50:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 17: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.p75:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 18: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.p95:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 19: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.p99:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 20: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.request_rate_per_minute:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	10, // 21: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.time_consuming_queries:type_name -> com.coralogixapis.apm.widgets.v1.Topk
	11, // 22: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.apdex_score:type_name -> com.coralogixapis.apm.widgets.v1.LineChart
	8,  // 23: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.avg_latency_trend:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 24: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.throughput_trend:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 25: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.error_rpm_trend:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 26: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.error_percentage_trend:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 27: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.p50_trend:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 28: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.p75_trend:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 29: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.p95_trend:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 30: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.p99_trend:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 31: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.request_rate_per_minute_trend:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 32: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.avg_latency_with_offset:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 33: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.throughput_with_offset:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 34: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.error_rpm_with_offset:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 35: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.error_percentage_with_offset:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 36: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.p50_with_offset:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 37: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.p75_with_offset:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 38: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.p95_with_offset:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 39: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.p99_with_offset:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	8,  // 40: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.request_rate_per_minute_with_offset:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	9,  // 41: com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse.errors_per_seconds:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	4,  // 42: com.coralogixapis.database_catalog.v1.GetApdexRequest.database_name:type_name -> google.protobuf.StringValue
	4,  // 43: com.coralogixapis.database_catalog.v1.GetApdexRequest.database_name_source:type_name -> google.protobuf.StringValue
	5,  // 44: com.coralogixapis.database_catalog.v1.GetApdexRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	6,  // 45: com.coralogixapis.database_catalog.v1.GetApdexRequest.database_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	4,  // 46: com.coralogixapis.database_catalog.v1.GetApdexRequest.calling_services:type_name -> google.protobuf.StringValue
	11, // 47: com.coralogixapis.database_catalog.v1.GetApdexResponse.apdex_score:type_name -> com.coralogixapis.apm.widgets.v1.LineChart
	0,  // 48: com.coralogixapis.database_catalog.v1.DatabaseOverviewService.GetDatabaseOverviewStream:input_type -> com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamRequest
	2,  // 49: com.coralogixapis.database_catalog.v1.DatabaseOverviewService.GetApdex:input_type -> com.coralogixapis.database_catalog.v1.GetApdexRequest
	1,  // 50: com.coralogixapis.database_catalog.v1.DatabaseOverviewService.GetDatabaseOverviewStream:output_type -> com.coralogixapis.database_catalog.v1.GetDatabaseOverviewStreamResponse
	3,  // 51: com.coralogixapis.database_catalog.v1.DatabaseOverviewService.GetApdex:output_type -> com.coralogixapis.database_catalog.v1.GetApdexResponse
	50, // [50:52] is the sub-list for method output_type
	48, // [48:50] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_database_catalog_v1_overview_service_proto_init() }
func file_com_coralogixapis_database_catalog_v1_overview_service_proto_init() {
	if File_com_coralogixapis_database_catalog_v1_overview_service_proto != nil {
		return
	}
	file_com_coralogixapis_database_catalog_v1_database_proto_init()
	file_com_coralogixapis_database_catalog_v1_overview_service_proto_msgTypes[1].OneofWrappers = []any{
		(*GetDatabaseOverviewStreamResponse_AvgLatency)(nil),
		(*GetDatabaseOverviewStreamResponse_Throughput)(nil),
		(*GetDatabaseOverviewStreamResponse_ErrorRpm)(nil),
		(*GetDatabaseOverviewStreamResponse_ErrorPercentage)(nil),
		(*GetDatabaseOverviewStreamResponse_RequestsAndErrors)(nil),
		(*GetDatabaseOverviewStreamResponse_ErrorPercentageOverTime)(nil),
		(*GetDatabaseOverviewStreamResponse_ErrorRate)(nil),
		(*GetDatabaseOverviewStreamResponse_LatencyPercentiles)(nil),
		(*GetDatabaseOverviewStreamResponse_P50)(nil),
		(*GetDatabaseOverviewStreamResponse_P75)(nil),
		(*GetDatabaseOverviewStreamResponse_P95)(nil),
		(*GetDatabaseOverviewStreamResponse_P99)(nil),
		(*GetDatabaseOverviewStreamResponse_RequestRatePerMinute)(nil),
		(*GetDatabaseOverviewStreamResponse_TimeConsumingQueries)(nil),
		(*GetDatabaseOverviewStreamResponse_ApdexScore)(nil),
		(*GetDatabaseOverviewStreamResponse_AvgLatencyTrend)(nil),
		(*GetDatabaseOverviewStreamResponse_ThroughputTrend)(nil),
		(*GetDatabaseOverviewStreamResponse_ErrorRpmTrend)(nil),
		(*GetDatabaseOverviewStreamResponse_ErrorPercentageTrend)(nil),
		(*GetDatabaseOverviewStreamResponse_P50Trend)(nil),
		(*GetDatabaseOverviewStreamResponse_P75Trend)(nil),
		(*GetDatabaseOverviewStreamResponse_P95Trend)(nil),
		(*GetDatabaseOverviewStreamResponse_P99Trend)(nil),
		(*GetDatabaseOverviewStreamResponse_RequestRatePerMinuteTrend)(nil),
		(*GetDatabaseOverviewStreamResponse_AvgLatencyWithOffset)(nil),
		(*GetDatabaseOverviewStreamResponse_ThroughputWithOffset)(nil),
		(*GetDatabaseOverviewStreamResponse_ErrorRpmWithOffset)(nil),
		(*GetDatabaseOverviewStreamResponse_ErrorPercentageWithOffset)(nil),
		(*GetDatabaseOverviewStreamResponse_P50WithOffset)(nil),
		(*GetDatabaseOverviewStreamResponse_P75WithOffset)(nil),
		(*GetDatabaseOverviewStreamResponse_P95WithOffset)(nil),
		(*GetDatabaseOverviewStreamResponse_P99WithOffset)(nil),
		(*GetDatabaseOverviewStreamResponse_RequestRatePerMinuteWithOffset)(nil),
		(*GetDatabaseOverviewStreamResponse_ErrorsPerSeconds)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_database_catalog_v1_overview_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogixapis_database_catalog_v1_overview_service_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_database_catalog_v1_overview_service_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_database_catalog_v1_overview_service_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_database_catalog_v1_overview_service_proto = out.File
	file_com_coralogixapis_database_catalog_v1_overview_service_proto_rawDesc = nil
	file_com_coralogixapis_database_catalog_v1_overview_service_proto_goTypes = nil
	file_com_coralogixapis_database_catalog_v1_overview_service_proto_depIdxs = nil
}
