// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: com/coralogixapis/database_catalog/v1/operations_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DatabaseOperationsService_GetDatabaseOperationsColumnsStream_FullMethodName      = "/com.coralogixapis.database_catalog.v1.DatabaseOperationsService/GetDatabaseOperationsColumnsStream"
	DatabaseOperationsService_GetDatabaseOperationsRequests_FullMethodName           = "/com.coralogixapis.database_catalog.v1.DatabaseOperationsService/GetDatabaseOperationsRequests"
	DatabaseOperationsService_GetDatabaseOperationsErrorsStream_FullMethodName       = "/com.coralogixapis.database_catalog.v1.DatabaseOperationsService/GetDatabaseOperationsErrorsStream"
	DatabaseOperationsService_GetDatabaseOperationsTimeConsuming_FullMethodName      = "/com.coralogixapis.database_catalog.v1.DatabaseOperationsService/GetDatabaseOperationsTimeConsuming"
	DatabaseOperationsService_GetDatabaseOperationsResponseTimeStream_FullMethodName = "/com.coralogixapis.database_catalog.v1.DatabaseOperationsService/GetDatabaseOperationsResponseTimeStream"
	DatabaseOperationsService_ListOperations_FullMethodName                          = "/com.coralogixapis.database_catalog.v1.DatabaseOperationsService/ListOperations"
	DatabaseOperationsService_GetOperationStats_FullMethodName                       = "/com.coralogixapis.database_catalog.v1.DatabaseOperationsService/GetOperationStats"
	DatabaseOperationsService_GetDatabaseOperationGraphsStream_FullMethodName        = "/com.coralogixapis.database_catalog.v1.DatabaseOperationsService/GetDatabaseOperationGraphsStream"
)

// DatabaseOperationsServiceClient is the client API for DatabaseOperationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseOperationsServiceClient interface {
	GetDatabaseOperationsColumnsStream(ctx context.Context, in *GetDatabaseOperationsColumnsStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDatabaseOperationsColumnsStreamResponse], error)
	GetDatabaseOperationsRequests(ctx context.Context, in *GetDatabaseOperationsRequestsRequest, opts ...grpc.CallOption) (*GetDatabaseOperationsRequestsResponse, error)
	GetDatabaseOperationsErrorsStream(ctx context.Context, in *GetDatabaseOperationsErrorsStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDatabaseOperationsErrorsStreamResponse], error)
	GetDatabaseOperationsTimeConsuming(ctx context.Context, in *GetDatabaseOperationsTimeConsumingRequest, opts ...grpc.CallOption) (*GetDatabaseOperationsTimeConsumingResponse, error)
	GetDatabaseOperationsResponseTimeStream(ctx context.Context, in *GetDatabaseOperationsResponseTimeStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDatabaseOperationsResponseTimeStreamResponse], error)
	ListOperations(ctx context.Context, in *ListOperationsRequest, opts ...grpc.CallOption) (*ListOperationsResponse, error)
	GetOperationStats(ctx context.Context, in *GetOperationStatsRequest, opts ...grpc.CallOption) (*GetOperationStatsResponse, error)
	GetDatabaseOperationGraphsStream(ctx context.Context, in *GetDatabaseOperationGraphsStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDatabaseOperationGraphsStreamResponse], error)
}

type databaseOperationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseOperationsServiceClient(cc grpc.ClientConnInterface) DatabaseOperationsServiceClient {
	return &databaseOperationsServiceClient{cc}
}

func (c *databaseOperationsServiceClient) GetDatabaseOperationsColumnsStream(ctx context.Context, in *GetDatabaseOperationsColumnsStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDatabaseOperationsColumnsStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DatabaseOperationsService_ServiceDesc.Streams[0], DatabaseOperationsService_GetDatabaseOperationsColumnsStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetDatabaseOperationsColumnsStreamRequest, GetDatabaseOperationsColumnsStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DatabaseOperationsService_GetDatabaseOperationsColumnsStreamClient = grpc.ServerStreamingClient[GetDatabaseOperationsColumnsStreamResponse]

func (c *databaseOperationsServiceClient) GetDatabaseOperationsRequests(ctx context.Context, in *GetDatabaseOperationsRequestsRequest, opts ...grpc.CallOption) (*GetDatabaseOperationsRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDatabaseOperationsRequestsResponse)
	err := c.cc.Invoke(ctx, DatabaseOperationsService_GetDatabaseOperationsRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseOperationsServiceClient) GetDatabaseOperationsErrorsStream(ctx context.Context, in *GetDatabaseOperationsErrorsStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDatabaseOperationsErrorsStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DatabaseOperationsService_ServiceDesc.Streams[1], DatabaseOperationsService_GetDatabaseOperationsErrorsStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetDatabaseOperationsErrorsStreamRequest, GetDatabaseOperationsErrorsStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DatabaseOperationsService_GetDatabaseOperationsErrorsStreamClient = grpc.ServerStreamingClient[GetDatabaseOperationsErrorsStreamResponse]

func (c *databaseOperationsServiceClient) GetDatabaseOperationsTimeConsuming(ctx context.Context, in *GetDatabaseOperationsTimeConsumingRequest, opts ...grpc.CallOption) (*GetDatabaseOperationsTimeConsumingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDatabaseOperationsTimeConsumingResponse)
	err := c.cc.Invoke(ctx, DatabaseOperationsService_GetDatabaseOperationsTimeConsuming_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseOperationsServiceClient) GetDatabaseOperationsResponseTimeStream(ctx context.Context, in *GetDatabaseOperationsResponseTimeStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDatabaseOperationsResponseTimeStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DatabaseOperationsService_ServiceDesc.Streams[2], DatabaseOperationsService_GetDatabaseOperationsResponseTimeStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetDatabaseOperationsResponseTimeStreamRequest, GetDatabaseOperationsResponseTimeStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DatabaseOperationsService_GetDatabaseOperationsResponseTimeStreamClient = grpc.ServerStreamingClient[GetDatabaseOperationsResponseTimeStreamResponse]

func (c *databaseOperationsServiceClient) ListOperations(ctx context.Context, in *ListOperationsRequest, opts ...grpc.CallOption) (*ListOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOperationsResponse)
	err := c.cc.Invoke(ctx, DatabaseOperationsService_ListOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseOperationsServiceClient) GetOperationStats(ctx context.Context, in *GetOperationStatsRequest, opts ...grpc.CallOption) (*GetOperationStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperationStatsResponse)
	err := c.cc.Invoke(ctx, DatabaseOperationsService_GetOperationStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseOperationsServiceClient) GetDatabaseOperationGraphsStream(ctx context.Context, in *GetDatabaseOperationGraphsStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDatabaseOperationGraphsStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DatabaseOperationsService_ServiceDesc.Streams[3], DatabaseOperationsService_GetDatabaseOperationGraphsStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetDatabaseOperationGraphsStreamRequest, GetDatabaseOperationGraphsStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DatabaseOperationsService_GetDatabaseOperationGraphsStreamClient = grpc.ServerStreamingClient[GetDatabaseOperationGraphsStreamResponse]

// DatabaseOperationsServiceServer is the server API for DatabaseOperationsService service.
// All implementations must embed UnimplementedDatabaseOperationsServiceServer
// for forward compatibility.
type DatabaseOperationsServiceServer interface {
	GetDatabaseOperationsColumnsStream(*GetDatabaseOperationsColumnsStreamRequest, grpc.ServerStreamingServer[GetDatabaseOperationsColumnsStreamResponse]) error
	GetDatabaseOperationsRequests(context.Context, *GetDatabaseOperationsRequestsRequest) (*GetDatabaseOperationsRequestsResponse, error)
	GetDatabaseOperationsErrorsStream(*GetDatabaseOperationsErrorsStreamRequest, grpc.ServerStreamingServer[GetDatabaseOperationsErrorsStreamResponse]) error
	GetDatabaseOperationsTimeConsuming(context.Context, *GetDatabaseOperationsTimeConsumingRequest) (*GetDatabaseOperationsTimeConsumingResponse, error)
	GetDatabaseOperationsResponseTimeStream(*GetDatabaseOperationsResponseTimeStreamRequest, grpc.ServerStreamingServer[GetDatabaseOperationsResponseTimeStreamResponse]) error
	ListOperations(context.Context, *ListOperationsRequest) (*ListOperationsResponse, error)
	GetOperationStats(context.Context, *GetOperationStatsRequest) (*GetOperationStatsResponse, error)
	GetDatabaseOperationGraphsStream(*GetDatabaseOperationGraphsStreamRequest, grpc.ServerStreamingServer[GetDatabaseOperationGraphsStreamResponse]) error
	mustEmbedUnimplementedDatabaseOperationsServiceServer()
}

// UnimplementedDatabaseOperationsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDatabaseOperationsServiceServer struct{}

func (UnimplementedDatabaseOperationsServiceServer) GetDatabaseOperationsColumnsStream(*GetDatabaseOperationsColumnsStreamRequest, grpc.ServerStreamingServer[GetDatabaseOperationsColumnsStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetDatabaseOperationsColumnsStream not implemented")
}
func (UnimplementedDatabaseOperationsServiceServer) GetDatabaseOperationsRequests(context.Context, *GetDatabaseOperationsRequestsRequest) (*GetDatabaseOperationsRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabaseOperationsRequests not implemented")
}
func (UnimplementedDatabaseOperationsServiceServer) GetDatabaseOperationsErrorsStream(*GetDatabaseOperationsErrorsStreamRequest, grpc.ServerStreamingServer[GetDatabaseOperationsErrorsStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetDatabaseOperationsErrorsStream not implemented")
}
func (UnimplementedDatabaseOperationsServiceServer) GetDatabaseOperationsTimeConsuming(context.Context, *GetDatabaseOperationsTimeConsumingRequest) (*GetDatabaseOperationsTimeConsumingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabaseOperationsTimeConsuming not implemented")
}
func (UnimplementedDatabaseOperationsServiceServer) GetDatabaseOperationsResponseTimeStream(*GetDatabaseOperationsResponseTimeStreamRequest, grpc.ServerStreamingServer[GetDatabaseOperationsResponseTimeStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetDatabaseOperationsResponseTimeStream not implemented")
}
func (UnimplementedDatabaseOperationsServiceServer) ListOperations(context.Context, *ListOperationsRequest) (*ListOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (UnimplementedDatabaseOperationsServiceServer) GetOperationStats(context.Context, *GetOperationStatsRequest) (*GetOperationStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperationStats not implemented")
}
func (UnimplementedDatabaseOperationsServiceServer) GetDatabaseOperationGraphsStream(*GetDatabaseOperationGraphsStreamRequest, grpc.ServerStreamingServer[GetDatabaseOperationGraphsStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetDatabaseOperationGraphsStream not implemented")
}
func (UnimplementedDatabaseOperationsServiceServer) mustEmbedUnimplementedDatabaseOperationsServiceServer() {
}
func (UnimplementedDatabaseOperationsServiceServer) testEmbeddedByValue() {}

// UnsafeDatabaseOperationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseOperationsServiceServer will
// result in compilation errors.
type UnsafeDatabaseOperationsServiceServer interface {
	mustEmbedUnimplementedDatabaseOperationsServiceServer()
}

func RegisterDatabaseOperationsServiceServer(s grpc.ServiceRegistrar, srv DatabaseOperationsServiceServer) {
	// If the following call pancis, it indicates UnimplementedDatabaseOperationsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DatabaseOperationsService_ServiceDesc, srv)
}

func _DatabaseOperationsService_GetDatabaseOperationsColumnsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDatabaseOperationsColumnsStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatabaseOperationsServiceServer).GetDatabaseOperationsColumnsStream(m, &grpc.GenericServerStream[GetDatabaseOperationsColumnsStreamRequest, GetDatabaseOperationsColumnsStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DatabaseOperationsService_GetDatabaseOperationsColumnsStreamServer = grpc.ServerStreamingServer[GetDatabaseOperationsColumnsStreamResponse]

func _DatabaseOperationsService_GetDatabaseOperationsRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatabaseOperationsRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseOperationsServiceServer).GetDatabaseOperationsRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseOperationsService_GetDatabaseOperationsRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseOperationsServiceServer).GetDatabaseOperationsRequests(ctx, req.(*GetDatabaseOperationsRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseOperationsService_GetDatabaseOperationsErrorsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDatabaseOperationsErrorsStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatabaseOperationsServiceServer).GetDatabaseOperationsErrorsStream(m, &grpc.GenericServerStream[GetDatabaseOperationsErrorsStreamRequest, GetDatabaseOperationsErrorsStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DatabaseOperationsService_GetDatabaseOperationsErrorsStreamServer = grpc.ServerStreamingServer[GetDatabaseOperationsErrorsStreamResponse]

func _DatabaseOperationsService_GetDatabaseOperationsTimeConsuming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatabaseOperationsTimeConsumingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseOperationsServiceServer).GetDatabaseOperationsTimeConsuming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseOperationsService_GetDatabaseOperationsTimeConsuming_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseOperationsServiceServer).GetDatabaseOperationsTimeConsuming(ctx, req.(*GetDatabaseOperationsTimeConsumingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseOperationsService_GetDatabaseOperationsResponseTimeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDatabaseOperationsResponseTimeStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatabaseOperationsServiceServer).GetDatabaseOperationsResponseTimeStream(m, &grpc.GenericServerStream[GetDatabaseOperationsResponseTimeStreamRequest, GetDatabaseOperationsResponseTimeStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DatabaseOperationsService_GetDatabaseOperationsResponseTimeStreamServer = grpc.ServerStreamingServer[GetDatabaseOperationsResponseTimeStreamResponse]

func _DatabaseOperationsService_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseOperationsServiceServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseOperationsService_ListOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseOperationsServiceServer).ListOperations(ctx, req.(*ListOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseOperationsService_GetOperationStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseOperationsServiceServer).GetOperationStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseOperationsService_GetOperationStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseOperationsServiceServer).GetOperationStats(ctx, req.(*GetOperationStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseOperationsService_GetDatabaseOperationGraphsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDatabaseOperationGraphsStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatabaseOperationsServiceServer).GetDatabaseOperationGraphsStream(m, &grpc.GenericServerStream[GetDatabaseOperationGraphsStreamRequest, GetDatabaseOperationGraphsStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DatabaseOperationsService_GetDatabaseOperationGraphsStreamServer = grpc.ServerStreamingServer[GetDatabaseOperationGraphsStreamResponse]

// DatabaseOperationsService_ServiceDesc is the grpc.ServiceDesc for DatabaseOperationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseOperationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogixapis.database_catalog.v1.DatabaseOperationsService",
	HandlerType: (*DatabaseOperationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDatabaseOperationsRequests",
			Handler:    _DatabaseOperationsService_GetDatabaseOperationsRequests_Handler,
		},
		{
			MethodName: "GetDatabaseOperationsTimeConsuming",
			Handler:    _DatabaseOperationsService_GetDatabaseOperationsTimeConsuming_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _DatabaseOperationsService_ListOperations_Handler,
		},
		{
			MethodName: "GetOperationStats",
			Handler:    _DatabaseOperationsService_GetOperationStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDatabaseOperationsColumnsStream",
			Handler:       _DatabaseOperationsService_GetDatabaseOperationsColumnsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDatabaseOperationsErrorsStream",
			Handler:       _DatabaseOperationsService_GetDatabaseOperationsErrorsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDatabaseOperationsResponseTimeStream",
			Handler:       _DatabaseOperationsService_GetDatabaseOperationsResponseTimeStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDatabaseOperationGraphsStream",
			Handler:       _DatabaseOperationsService_GetDatabaseOperationGraphsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/coralogixapis/database_catalog/v1/operations_service.proto",
}
