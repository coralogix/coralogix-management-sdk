// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: com/coralogixapis/database_catalog/v1/operations_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DatabaseOperationsService_GetDatabaseOperationsColumnsStream_FullMethodName      = "/com.coralogixapis.database_catalog.v1.DatabaseOperationsService/GetDatabaseOperationsColumnsStream"
	DatabaseOperationsService_GetDatabaseOperationsRequests_FullMethodName           = "/com.coralogixapis.database_catalog.v1.DatabaseOperationsService/GetDatabaseOperationsRequests"
	DatabaseOperationsService_GetDatabaseOperationsErrorsStream_FullMethodName       = "/com.coralogixapis.database_catalog.v1.DatabaseOperationsService/GetDatabaseOperationsErrorsStream"
	DatabaseOperationsService_GetDatabaseOperationsTimeConsuming_FullMethodName      = "/com.coralogixapis.database_catalog.v1.DatabaseOperationsService/GetDatabaseOperationsTimeConsuming"
	DatabaseOperationsService_GetDatabaseOperationsResponseTimeStream_FullMethodName = "/com.coralogixapis.database_catalog.v1.DatabaseOperationsService/GetDatabaseOperationsResponseTimeStream"
	DatabaseOperationsService_ListOperations_FullMethodName                          = "/com.coralogixapis.database_catalog.v1.DatabaseOperationsService/ListOperations"
	DatabaseOperationsService_GetOperationStats_FullMethodName                       = "/com.coralogixapis.database_catalog.v1.DatabaseOperationsService/GetOperationStats"
	DatabaseOperationsService_GetDatabaseOperationGraphsStream_FullMethodName        = "/com.coralogixapis.database_catalog.v1.DatabaseOperationsService/GetDatabaseOperationGraphsStream"
)

// DatabaseOperationsServiceClient is the client API for DatabaseOperationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseOperationsServiceClient interface {
	GetDatabaseOperationsColumnsStream(ctx context.Context, in *GetDatabaseOperationsColumnsStreamRequest, opts ...grpc.CallOption) (DatabaseOperationsService_GetDatabaseOperationsColumnsStreamClient, error)
	GetDatabaseOperationsRequests(ctx context.Context, in *GetDatabaseOperationsRequestsRequest, opts ...grpc.CallOption) (*GetDatabaseOperationsRequestsResponse, error)
	GetDatabaseOperationsErrorsStream(ctx context.Context, in *GetDatabaseOperationsErrorsStreamRequest, opts ...grpc.CallOption) (DatabaseOperationsService_GetDatabaseOperationsErrorsStreamClient, error)
	GetDatabaseOperationsTimeConsuming(ctx context.Context, in *GetDatabaseOperationsTimeConsumingRequest, opts ...grpc.CallOption) (*GetDatabaseOperationsTimeConsumingResponse, error)
	GetDatabaseOperationsResponseTimeStream(ctx context.Context, in *GetDatabaseOperationsResponseTimeStreamRequest, opts ...grpc.CallOption) (DatabaseOperationsService_GetDatabaseOperationsResponseTimeStreamClient, error)
	ListOperations(ctx context.Context, in *ListOperationsRequest, opts ...grpc.CallOption) (*ListOperationsResponse, error)
	GetOperationStats(ctx context.Context, in *GetOperationStatsRequest, opts ...grpc.CallOption) (*GetOperationStatsResponse, error)
	GetDatabaseOperationGraphsStream(ctx context.Context, in *GetDatabaseOperationGraphsStreamRequest, opts ...grpc.CallOption) (DatabaseOperationsService_GetDatabaseOperationGraphsStreamClient, error)
}

type databaseOperationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseOperationsServiceClient(cc grpc.ClientConnInterface) DatabaseOperationsServiceClient {
	return &databaseOperationsServiceClient{cc}
}

func (c *databaseOperationsServiceClient) GetDatabaseOperationsColumnsStream(ctx context.Context, in *GetDatabaseOperationsColumnsStreamRequest, opts ...grpc.CallOption) (DatabaseOperationsService_GetDatabaseOperationsColumnsStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DatabaseOperationsService_ServiceDesc.Streams[0], DatabaseOperationsService_GetDatabaseOperationsColumnsStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &databaseOperationsServiceGetDatabaseOperationsColumnsStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DatabaseOperationsService_GetDatabaseOperationsColumnsStreamClient interface {
	Recv() (*GetDatabaseOperationsColumnsStreamResponse, error)
	grpc.ClientStream
}

type databaseOperationsServiceGetDatabaseOperationsColumnsStreamClient struct {
	grpc.ClientStream
}

func (x *databaseOperationsServiceGetDatabaseOperationsColumnsStreamClient) Recv() (*GetDatabaseOperationsColumnsStreamResponse, error) {
	m := new(GetDatabaseOperationsColumnsStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *databaseOperationsServiceClient) GetDatabaseOperationsRequests(ctx context.Context, in *GetDatabaseOperationsRequestsRequest, opts ...grpc.CallOption) (*GetDatabaseOperationsRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDatabaseOperationsRequestsResponse)
	err := c.cc.Invoke(ctx, DatabaseOperationsService_GetDatabaseOperationsRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseOperationsServiceClient) GetDatabaseOperationsErrorsStream(ctx context.Context, in *GetDatabaseOperationsErrorsStreamRequest, opts ...grpc.CallOption) (DatabaseOperationsService_GetDatabaseOperationsErrorsStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DatabaseOperationsService_ServiceDesc.Streams[1], DatabaseOperationsService_GetDatabaseOperationsErrorsStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &databaseOperationsServiceGetDatabaseOperationsErrorsStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DatabaseOperationsService_GetDatabaseOperationsErrorsStreamClient interface {
	Recv() (*GetDatabaseOperationsErrorsStreamResponse, error)
	grpc.ClientStream
}

type databaseOperationsServiceGetDatabaseOperationsErrorsStreamClient struct {
	grpc.ClientStream
}

func (x *databaseOperationsServiceGetDatabaseOperationsErrorsStreamClient) Recv() (*GetDatabaseOperationsErrorsStreamResponse, error) {
	m := new(GetDatabaseOperationsErrorsStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *databaseOperationsServiceClient) GetDatabaseOperationsTimeConsuming(ctx context.Context, in *GetDatabaseOperationsTimeConsumingRequest, opts ...grpc.CallOption) (*GetDatabaseOperationsTimeConsumingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDatabaseOperationsTimeConsumingResponse)
	err := c.cc.Invoke(ctx, DatabaseOperationsService_GetDatabaseOperationsTimeConsuming_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseOperationsServiceClient) GetDatabaseOperationsResponseTimeStream(ctx context.Context, in *GetDatabaseOperationsResponseTimeStreamRequest, opts ...grpc.CallOption) (DatabaseOperationsService_GetDatabaseOperationsResponseTimeStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DatabaseOperationsService_ServiceDesc.Streams[2], DatabaseOperationsService_GetDatabaseOperationsResponseTimeStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &databaseOperationsServiceGetDatabaseOperationsResponseTimeStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DatabaseOperationsService_GetDatabaseOperationsResponseTimeStreamClient interface {
	Recv() (*GetDatabaseOperationsResponseTimeStreamResponse, error)
	grpc.ClientStream
}

type databaseOperationsServiceGetDatabaseOperationsResponseTimeStreamClient struct {
	grpc.ClientStream
}

func (x *databaseOperationsServiceGetDatabaseOperationsResponseTimeStreamClient) Recv() (*GetDatabaseOperationsResponseTimeStreamResponse, error) {
	m := new(GetDatabaseOperationsResponseTimeStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *databaseOperationsServiceClient) ListOperations(ctx context.Context, in *ListOperationsRequest, opts ...grpc.CallOption) (*ListOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOperationsResponse)
	err := c.cc.Invoke(ctx, DatabaseOperationsService_ListOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseOperationsServiceClient) GetOperationStats(ctx context.Context, in *GetOperationStatsRequest, opts ...grpc.CallOption) (*GetOperationStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperationStatsResponse)
	err := c.cc.Invoke(ctx, DatabaseOperationsService_GetOperationStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseOperationsServiceClient) GetDatabaseOperationGraphsStream(ctx context.Context, in *GetDatabaseOperationGraphsStreamRequest, opts ...grpc.CallOption) (DatabaseOperationsService_GetDatabaseOperationGraphsStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DatabaseOperationsService_ServiceDesc.Streams[3], DatabaseOperationsService_GetDatabaseOperationGraphsStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &databaseOperationsServiceGetDatabaseOperationGraphsStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DatabaseOperationsService_GetDatabaseOperationGraphsStreamClient interface {
	Recv() (*GetDatabaseOperationGraphsStreamResponse, error)
	grpc.ClientStream
}

type databaseOperationsServiceGetDatabaseOperationGraphsStreamClient struct {
	grpc.ClientStream
}

func (x *databaseOperationsServiceGetDatabaseOperationGraphsStreamClient) Recv() (*GetDatabaseOperationGraphsStreamResponse, error) {
	m := new(GetDatabaseOperationGraphsStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DatabaseOperationsServiceServer is the server API for DatabaseOperationsService service.
// All implementations must embed UnimplementedDatabaseOperationsServiceServer
// for forward compatibility
type DatabaseOperationsServiceServer interface {
	GetDatabaseOperationsColumnsStream(*GetDatabaseOperationsColumnsStreamRequest, DatabaseOperationsService_GetDatabaseOperationsColumnsStreamServer) error
	GetDatabaseOperationsRequests(context.Context, *GetDatabaseOperationsRequestsRequest) (*GetDatabaseOperationsRequestsResponse, error)
	GetDatabaseOperationsErrorsStream(*GetDatabaseOperationsErrorsStreamRequest, DatabaseOperationsService_GetDatabaseOperationsErrorsStreamServer) error
	GetDatabaseOperationsTimeConsuming(context.Context, *GetDatabaseOperationsTimeConsumingRequest) (*GetDatabaseOperationsTimeConsumingResponse, error)
	GetDatabaseOperationsResponseTimeStream(*GetDatabaseOperationsResponseTimeStreamRequest, DatabaseOperationsService_GetDatabaseOperationsResponseTimeStreamServer) error
	ListOperations(context.Context, *ListOperationsRequest) (*ListOperationsResponse, error)
	GetOperationStats(context.Context, *GetOperationStatsRequest) (*GetOperationStatsResponse, error)
	GetDatabaseOperationGraphsStream(*GetDatabaseOperationGraphsStreamRequest, DatabaseOperationsService_GetDatabaseOperationGraphsStreamServer) error
	mustEmbedUnimplementedDatabaseOperationsServiceServer()
}

// UnimplementedDatabaseOperationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseOperationsServiceServer struct {
}

func (UnimplementedDatabaseOperationsServiceServer) GetDatabaseOperationsColumnsStream(*GetDatabaseOperationsColumnsStreamRequest, DatabaseOperationsService_GetDatabaseOperationsColumnsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDatabaseOperationsColumnsStream not implemented")
}
func (UnimplementedDatabaseOperationsServiceServer) GetDatabaseOperationsRequests(context.Context, *GetDatabaseOperationsRequestsRequest) (*GetDatabaseOperationsRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabaseOperationsRequests not implemented")
}
func (UnimplementedDatabaseOperationsServiceServer) GetDatabaseOperationsErrorsStream(*GetDatabaseOperationsErrorsStreamRequest, DatabaseOperationsService_GetDatabaseOperationsErrorsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDatabaseOperationsErrorsStream not implemented")
}
func (UnimplementedDatabaseOperationsServiceServer) GetDatabaseOperationsTimeConsuming(context.Context, *GetDatabaseOperationsTimeConsumingRequest) (*GetDatabaseOperationsTimeConsumingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabaseOperationsTimeConsuming not implemented")
}
func (UnimplementedDatabaseOperationsServiceServer) GetDatabaseOperationsResponseTimeStream(*GetDatabaseOperationsResponseTimeStreamRequest, DatabaseOperationsService_GetDatabaseOperationsResponseTimeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDatabaseOperationsResponseTimeStream not implemented")
}
func (UnimplementedDatabaseOperationsServiceServer) ListOperations(context.Context, *ListOperationsRequest) (*ListOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (UnimplementedDatabaseOperationsServiceServer) GetOperationStats(context.Context, *GetOperationStatsRequest) (*GetOperationStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperationStats not implemented")
}
func (UnimplementedDatabaseOperationsServiceServer) GetDatabaseOperationGraphsStream(*GetDatabaseOperationGraphsStreamRequest, DatabaseOperationsService_GetDatabaseOperationGraphsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDatabaseOperationGraphsStream not implemented")
}
func (UnimplementedDatabaseOperationsServiceServer) mustEmbedUnimplementedDatabaseOperationsServiceServer() {
}

// UnsafeDatabaseOperationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseOperationsServiceServer will
// result in compilation errors.
type UnsafeDatabaseOperationsServiceServer interface {
	mustEmbedUnimplementedDatabaseOperationsServiceServer()
}

func RegisterDatabaseOperationsServiceServer(s grpc.ServiceRegistrar, srv DatabaseOperationsServiceServer) {
	s.RegisterService(&DatabaseOperationsService_ServiceDesc, srv)
}

func _DatabaseOperationsService_GetDatabaseOperationsColumnsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDatabaseOperationsColumnsStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatabaseOperationsServiceServer).GetDatabaseOperationsColumnsStream(m, &databaseOperationsServiceGetDatabaseOperationsColumnsStreamServer{ServerStream: stream})
}

type DatabaseOperationsService_GetDatabaseOperationsColumnsStreamServer interface {
	Send(*GetDatabaseOperationsColumnsStreamResponse) error
	grpc.ServerStream
}

type databaseOperationsServiceGetDatabaseOperationsColumnsStreamServer struct {
	grpc.ServerStream
}

func (x *databaseOperationsServiceGetDatabaseOperationsColumnsStreamServer) Send(m *GetDatabaseOperationsColumnsStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DatabaseOperationsService_GetDatabaseOperationsRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatabaseOperationsRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseOperationsServiceServer).GetDatabaseOperationsRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseOperationsService_GetDatabaseOperationsRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseOperationsServiceServer).GetDatabaseOperationsRequests(ctx, req.(*GetDatabaseOperationsRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseOperationsService_GetDatabaseOperationsErrorsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDatabaseOperationsErrorsStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatabaseOperationsServiceServer).GetDatabaseOperationsErrorsStream(m, &databaseOperationsServiceGetDatabaseOperationsErrorsStreamServer{ServerStream: stream})
}

type DatabaseOperationsService_GetDatabaseOperationsErrorsStreamServer interface {
	Send(*GetDatabaseOperationsErrorsStreamResponse) error
	grpc.ServerStream
}

type databaseOperationsServiceGetDatabaseOperationsErrorsStreamServer struct {
	grpc.ServerStream
}

func (x *databaseOperationsServiceGetDatabaseOperationsErrorsStreamServer) Send(m *GetDatabaseOperationsErrorsStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DatabaseOperationsService_GetDatabaseOperationsTimeConsuming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatabaseOperationsTimeConsumingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseOperationsServiceServer).GetDatabaseOperationsTimeConsuming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseOperationsService_GetDatabaseOperationsTimeConsuming_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseOperationsServiceServer).GetDatabaseOperationsTimeConsuming(ctx, req.(*GetDatabaseOperationsTimeConsumingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseOperationsService_GetDatabaseOperationsResponseTimeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDatabaseOperationsResponseTimeStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatabaseOperationsServiceServer).GetDatabaseOperationsResponseTimeStream(m, &databaseOperationsServiceGetDatabaseOperationsResponseTimeStreamServer{ServerStream: stream})
}

type DatabaseOperationsService_GetDatabaseOperationsResponseTimeStreamServer interface {
	Send(*GetDatabaseOperationsResponseTimeStreamResponse) error
	grpc.ServerStream
}

type databaseOperationsServiceGetDatabaseOperationsResponseTimeStreamServer struct {
	grpc.ServerStream
}

func (x *databaseOperationsServiceGetDatabaseOperationsResponseTimeStreamServer) Send(m *GetDatabaseOperationsResponseTimeStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DatabaseOperationsService_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseOperationsServiceServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseOperationsService_ListOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseOperationsServiceServer).ListOperations(ctx, req.(*ListOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseOperationsService_GetOperationStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseOperationsServiceServer).GetOperationStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseOperationsService_GetOperationStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseOperationsServiceServer).GetOperationStats(ctx, req.(*GetOperationStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseOperationsService_GetDatabaseOperationGraphsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDatabaseOperationGraphsStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatabaseOperationsServiceServer).GetDatabaseOperationGraphsStream(m, &databaseOperationsServiceGetDatabaseOperationGraphsStreamServer{ServerStream: stream})
}

type DatabaseOperationsService_GetDatabaseOperationGraphsStreamServer interface {
	Send(*GetDatabaseOperationGraphsStreamResponse) error
	grpc.ServerStream
}

type databaseOperationsServiceGetDatabaseOperationGraphsStreamServer struct {
	grpc.ServerStream
}

func (x *databaseOperationsServiceGetDatabaseOperationGraphsStreamServer) Send(m *GetDatabaseOperationGraphsStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DatabaseOperationsService_ServiceDesc is the grpc.ServiceDesc for DatabaseOperationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseOperationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogixapis.database_catalog.v1.DatabaseOperationsService",
	HandlerType: (*DatabaseOperationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDatabaseOperationsRequests",
			Handler:    _DatabaseOperationsService_GetDatabaseOperationsRequests_Handler,
		},
		{
			MethodName: "GetDatabaseOperationsTimeConsuming",
			Handler:    _DatabaseOperationsService_GetDatabaseOperationsTimeConsuming_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _DatabaseOperationsService_ListOperations_Handler,
		},
		{
			MethodName: "GetOperationStats",
			Handler:    _DatabaseOperationsService_GetOperationStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDatabaseOperationsColumnsStream",
			Handler:       _DatabaseOperationsService_GetDatabaseOperationsColumnsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDatabaseOperationsErrorsStream",
			Handler:       _DatabaseOperationsService_GetDatabaseOperationsErrorsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDatabaseOperationsResponseTimeStream",
			Handler:       _DatabaseOperationsService_GetDatabaseOperationsResponseTimeStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDatabaseOperationGraphsStream",
			Handler:       _DatabaseOperationsService_GetDatabaseOperationGraphsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/coralogixapis/database_catalog/v1/operations_service.proto",
}
