// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.1
// source: com/coralogixapis/database_catalog/v1/blueprints_service.proto

package v1

import (
	v1 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogix/catalog/v1"
	v2 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/common/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetBlueprintsColumnsStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRange              *v2.TimeRange             `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	DatabaseName           *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	DatabaseNameSource     *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=database_name_source,json=databaseNameSource,proto3" json:"database_name_source,omitempty"`
	DatabaseSystem         *wrapperspb.StringValue   `protobuf:"bytes,4,opt,name=database_system,json=databaseSystem,proto3" json:"database_system,omitempty"`
	DatabaseCatalogFilters []*v1.ApmFilter           `protobuf:"bytes,5,rep,name=database_catalog_filters,json=databaseCatalogFilters,proto3" json:"database_catalog_filters,omitempty"`
	CallingServices        []*wrapperspb.StringValue `protobuf:"bytes,6,rep,name=calling_services,json=callingServices,proto3" json:"calling_services,omitempty"`
	Tables                 []*wrapperspb.StringValue `protobuf:"bytes,7,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *GetBlueprintsColumnsStreamRequest) Reset() {
	*x = GetBlueprintsColumnsStreamRequest{}
	mi := &file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlueprintsColumnsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlueprintsColumnsStreamRequest) ProtoMessage() {}

func (x *GetBlueprintsColumnsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlueprintsColumnsStreamRequest.ProtoReflect.Descriptor instead.
func (*GetBlueprintsColumnsStreamRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetBlueprintsColumnsStreamRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetBlueprintsColumnsStreamRequest) GetDatabaseName() *wrapperspb.StringValue {
	if x != nil {
		return x.DatabaseName
	}
	return nil
}

func (x *GetBlueprintsColumnsStreamRequest) GetDatabaseNameSource() *wrapperspb.StringValue {
	if x != nil {
		return x.DatabaseNameSource
	}
	return nil
}

func (x *GetBlueprintsColumnsStreamRequest) GetDatabaseSystem() *wrapperspb.StringValue {
	if x != nil {
		return x.DatabaseSystem
	}
	return nil
}

func (x *GetBlueprintsColumnsStreamRequest) GetDatabaseCatalogFilters() []*v1.ApmFilter {
	if x != nil {
		return x.DatabaseCatalogFilters
	}
	return nil
}

func (x *GetBlueprintsColumnsStreamRequest) GetCallingServices() []*wrapperspb.StringValue {
	if x != nil {
		return x.CallingServices
	}
	return nil
}

func (x *GetBlueprintsColumnsStreamRequest) GetTables() []*wrapperspb.StringValue {
	if x != nil {
		return x.Tables
	}
	return nil
}

type GetBlueprintsColumnsStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blueprints []*BlueprintData `protobuf:"bytes,1,rep,name=blueprints,proto3" json:"blueprints,omitempty"`
}

func (x *GetBlueprintsColumnsStreamResponse) Reset() {
	*x = GetBlueprintsColumnsStreamResponse{}
	mi := &file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlueprintsColumnsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlueprintsColumnsStreamResponse) ProtoMessage() {}

func (x *GetBlueprintsColumnsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlueprintsColumnsStreamResponse.ProtoReflect.Descriptor instead.
func (*GetBlueprintsColumnsStreamResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetBlueprintsColumnsStreamResponse) GetBlueprints() []*BlueprintData {
	if x != nil {
		return x.Blueprints
	}
	return nil
}

type GetBlueprintStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName           *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	DatabaseNameSource     *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=database_name_source,json=databaseNameSource,proto3" json:"database_name_source,omitempty"`
	TimeRange              *v2.TimeRange             `protobuf:"bytes,3,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	DatabaseCatalogFilters []*v1.ApmFilter           `protobuf:"bytes,4,rep,name=database_catalog_filters,json=databaseCatalogFilters,proto3" json:"database_catalog_filters,omitempty"`
	DatabaseSystem         *wrapperspb.StringValue   `protobuf:"bytes,5,opt,name=database_system,json=databaseSystem,proto3" json:"database_system,omitempty"`
	Table                  *wrapperspb.StringValue   `protobuf:"bytes,6,opt,name=table,proto3" json:"table,omitempty"`
	CallingServices        []*wrapperspb.StringValue `protobuf:"bytes,7,rep,name=calling_services,json=callingServices,proto3" json:"calling_services,omitempty"`
	Blueprint              *wrapperspb.StringValue   `protobuf:"bytes,8,opt,name=blueprint,proto3" json:"blueprint,omitempty"`
}

func (x *GetBlueprintStatsRequest) Reset() {
	*x = GetBlueprintStatsRequest{}
	mi := &file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlueprintStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlueprintStatsRequest) ProtoMessage() {}

func (x *GetBlueprintStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlueprintStatsRequest.ProtoReflect.Descriptor instead.
func (*GetBlueprintStatsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetBlueprintStatsRequest) GetDatabaseName() *wrapperspb.StringValue {
	if x != nil {
		return x.DatabaseName
	}
	return nil
}

func (x *GetBlueprintStatsRequest) GetDatabaseNameSource() *wrapperspb.StringValue {
	if x != nil {
		return x.DatabaseNameSource
	}
	return nil
}

func (x *GetBlueprintStatsRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetBlueprintStatsRequest) GetDatabaseCatalogFilters() []*v1.ApmFilter {
	if x != nil {
		return x.DatabaseCatalogFilters
	}
	return nil
}

func (x *GetBlueprintStatsRequest) GetDatabaseSystem() *wrapperspb.StringValue {
	if x != nil {
		return x.DatabaseSystem
	}
	return nil
}

func (x *GetBlueprintStatsRequest) GetTable() *wrapperspb.StringValue {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *GetBlueprintStatsRequest) GetCallingServices() []*wrapperspb.StringValue {
	if x != nil {
		return x.CallingServices
	}
	return nil
}

func (x *GetBlueprintStatsRequest) GetBlueprint() *wrapperspb.StringValue {
	if x != nil {
		return x.Blueprint
	}
	return nil
}

type GetBlueprintStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgResponseTime   *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=avg_response_time,json=avgResponseTime,proto3" json:"avg_response_time,omitempty"`
	P95ResponseTime   *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=p95_response_time,json=p95ResponseTime,proto3" json:"p95_response_time,omitempty"`
	P99ResponseTime   *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=p99_response_time,json=p99ResponseTime,proto3" json:"p99_response_time,omitempty"`
	TotalRequests     *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=total_requests,json=totalRequests,proto3" json:"total_requests,omitempty"`
	TotalFailures     *wrapperspb.UInt64Value `protobuf:"bytes,5,opt,name=total_failures,json=totalFailures,proto3" json:"total_failures,omitempty"`
	FailurePercentage *wrapperspb.UInt64Value `protobuf:"bytes,6,opt,name=failure_percentage,json=failurePercentage,proto3" json:"failure_percentage,omitempty"`
}

func (x *GetBlueprintStatsResponse) Reset() {
	*x = GetBlueprintStatsResponse{}
	mi := &file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlueprintStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlueprintStatsResponse) ProtoMessage() {}

func (x *GetBlueprintStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlueprintStatsResponse.ProtoReflect.Descriptor instead.
func (*GetBlueprintStatsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetBlueprintStatsResponse) GetAvgResponseTime() *wrapperspb.UInt64Value {
	if x != nil {
		return x.AvgResponseTime
	}
	return nil
}

func (x *GetBlueprintStatsResponse) GetP95ResponseTime() *wrapperspb.UInt64Value {
	if x != nil {
		return x.P95ResponseTime
	}
	return nil
}

func (x *GetBlueprintStatsResponse) GetP99ResponseTime() *wrapperspb.UInt64Value {
	if x != nil {
		return x.P99ResponseTime
	}
	return nil
}

func (x *GetBlueprintStatsResponse) GetTotalRequests() *wrapperspb.UInt64Value {
	if x != nil {
		return x.TotalRequests
	}
	return nil
}

func (x *GetBlueprintStatsResponse) GetTotalFailures() *wrapperspb.UInt64Value {
	if x != nil {
		return x.TotalFailures
	}
	return nil
}

func (x *GetBlueprintStatsResponse) GetFailurePercentage() *wrapperspb.UInt64Value {
	if x != nil {
		return x.FailurePercentage
	}
	return nil
}

type GetBlueprintGraphsStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName           *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	DatabaseNameSource     *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=database_name_source,json=databaseNameSource,proto3" json:"database_name_source,omitempty"`
	TimeRange              *v2.TimeRange             `protobuf:"bytes,3,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	DatabaseCatalogFilters []*v1.ApmFilter           `protobuf:"bytes,4,rep,name=database_catalog_filters,json=databaseCatalogFilters,proto3" json:"database_catalog_filters,omitempty"`
	DatabaseSystem         *wrapperspb.StringValue   `protobuf:"bytes,5,opt,name=database_system,json=databaseSystem,proto3" json:"database_system,omitempty"`
	Table                  *wrapperspb.StringValue   `protobuf:"bytes,6,opt,name=table,proto3" json:"table,omitempty"`
	CallingServices        []*wrapperspb.StringValue `protobuf:"bytes,7,rep,name=calling_services,json=callingServices,proto3" json:"calling_services,omitempty"`
	Blueprint              *wrapperspb.StringValue   `protobuf:"bytes,8,opt,name=blueprint,proto3" json:"blueprint,omitempty"`
}

func (x *GetBlueprintGraphsStreamRequest) Reset() {
	*x = GetBlueprintGraphsStreamRequest{}
	mi := &file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlueprintGraphsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlueprintGraphsStreamRequest) ProtoMessage() {}

func (x *GetBlueprintGraphsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlueprintGraphsStreamRequest.ProtoReflect.Descriptor instead.
func (*GetBlueprintGraphsStreamRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetBlueprintGraphsStreamRequest) GetDatabaseName() *wrapperspb.StringValue {
	if x != nil {
		return x.DatabaseName
	}
	return nil
}

func (x *GetBlueprintGraphsStreamRequest) GetDatabaseNameSource() *wrapperspb.StringValue {
	if x != nil {
		return x.DatabaseNameSource
	}
	return nil
}

func (x *GetBlueprintGraphsStreamRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetBlueprintGraphsStreamRequest) GetDatabaseCatalogFilters() []*v1.ApmFilter {
	if x != nil {
		return x.DatabaseCatalogFilters
	}
	return nil
}

func (x *GetBlueprintGraphsStreamRequest) GetDatabaseSystem() *wrapperspb.StringValue {
	if x != nil {
		return x.DatabaseSystem
	}
	return nil
}

func (x *GetBlueprintGraphsStreamRequest) GetTable() *wrapperspb.StringValue {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *GetBlueprintGraphsStreamRequest) GetCallingServices() []*wrapperspb.StringValue {
	if x != nil {
		return x.CallingServices
	}
	return nil
}

func (x *GetBlueprintGraphsStreamRequest) GetBlueprint() *wrapperspb.StringValue {
	if x != nil {
		return x.Blueprint
	}
	return nil
}

type GetBlueprintGraphsStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Widget:
	//
	//	*GetBlueprintGraphsStreamResponse_SuccessesAndFailures
	//	*GetBlueprintGraphsStreamResponse_Latency
	Widget isGetBlueprintGraphsStreamResponse_Widget `protobuf_oneof:"widget"`
}

func (x *GetBlueprintGraphsStreamResponse) Reset() {
	*x = GetBlueprintGraphsStreamResponse{}
	mi := &file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlueprintGraphsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlueprintGraphsStreamResponse) ProtoMessage() {}

func (x *GetBlueprintGraphsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlueprintGraphsStreamResponse.ProtoReflect.Descriptor instead.
func (*GetBlueprintGraphsStreamResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_rawDescGZIP(), []int{5}
}

func (m *GetBlueprintGraphsStreamResponse) GetWidget() isGetBlueprintGraphsStreamResponse_Widget {
	if m != nil {
		return m.Widget
	}
	return nil
}

func (x *GetBlueprintGraphsStreamResponse) GetSuccessesAndFailures() *v1.RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetBlueprintGraphsStreamResponse_SuccessesAndFailures); ok {
		return x.SuccessesAndFailures
	}
	return nil
}

func (x *GetBlueprintGraphsStreamResponse) GetLatency() *v1.RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetBlueprintGraphsStreamResponse_Latency); ok {
		return x.Latency
	}
	return nil
}

type isGetBlueprintGraphsStreamResponse_Widget interface {
	isGetBlueprintGraphsStreamResponse_Widget()
}

type GetBlueprintGraphsStreamResponse_SuccessesAndFailures struct {
	SuccessesAndFailures *v1.RepeatedLineChart `protobuf:"bytes,1,opt,name=successes_and_failures,json=successesAndFailures,proto3,oneof"`
}

type GetBlueprintGraphsStreamResponse_Latency struct {
	Latency *v1.RepeatedLineChart `protobuf:"bytes,2,opt,name=latency,proto3,oneof"`
}

func (*GetBlueprintGraphsStreamResponse_SuccessesAndFailures) isGetBlueprintGraphsStreamResponse_Widget() {
}

func (*GetBlueprintGraphsStreamResponse_Latency) isGetBlueprintGraphsStreamResponse_Widget() {}

var File_com_coralogixapis_database_catalog_v1_blueprints_service_proto protoreflect.FileDescriptor

var file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x36, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x04, 0x0a,
	0x21, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x41, 0x0a,
	0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x4e, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x45, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x5d, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x16,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f,
	0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x34, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x7a, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x65,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0a, 0x62,
	0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x73, 0x22, 0xd7, 0x04, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4e, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x18,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f,
	0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x3a, 0x0a, 0x09, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0xd0, 0x03, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x61, 0x76, 0x67,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x61, 0x76, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x70, 0x39, 0x35, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x39,
	0x35, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a,
	0x11, 0x70, 0x39, 0x39, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x39, 0x39, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x4b, 0x0a, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0xde,
	0x04, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70,
	0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x5d, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x45, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x61,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22,
	0xf2, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x16, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52,
	0x14, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48,
	0x00, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x32, 0xfd, 0x04, 0x0a, 0x11, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xd7, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22,
	0xc2, 0xb8, 0x02, 0x1e, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x20, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x73, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x30, 0x01, 0x12, 0xb1, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x65,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0xc2,
	0xb8, 0x02, 0x15, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x20, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0xd9, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x73, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0xc2, 0xb8, 0x02, 0x26, 0x0a, 0x24, 0x67, 0x65,
	0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x20, 0x62, 0x6c, 0x75, 0x65, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x20, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x20, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_rawDescOnce sync.Once
	file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_rawDescData = file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_rawDesc
)

func file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_rawDescData)
	})
	return file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_rawDescData
}

var file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_goTypes = []any{
	(*GetBlueprintsColumnsStreamRequest)(nil),  // 0: com.coralogixapis.database_catalog.v1.GetBlueprintsColumnsStreamRequest
	(*GetBlueprintsColumnsStreamResponse)(nil), // 1: com.coralogixapis.database_catalog.v1.GetBlueprintsColumnsStreamResponse
	(*GetBlueprintStatsRequest)(nil),           // 2: com.coralogixapis.database_catalog.v1.GetBlueprintStatsRequest
	(*GetBlueprintStatsResponse)(nil),          // 3: com.coralogixapis.database_catalog.v1.GetBlueprintStatsResponse
	(*GetBlueprintGraphsStreamRequest)(nil),    // 4: com.coralogixapis.database_catalog.v1.GetBlueprintGraphsStreamRequest
	(*GetBlueprintGraphsStreamResponse)(nil),   // 5: com.coralogixapis.database_catalog.v1.GetBlueprintGraphsStreamResponse
	(*v2.TimeRange)(nil),                       // 6: com.coralogixapis.apm.common.v2.TimeRange
	(*wrapperspb.StringValue)(nil),             // 7: google.protobuf.StringValue
	(*v1.ApmFilter)(nil),                       // 8: com.coralogix.catalog.v1.ApmFilter
	(*BlueprintData)(nil),                      // 9: com.coralogixapis.database_catalog.v1.BlueprintData
	(*wrapperspb.UInt64Value)(nil),             // 10: google.protobuf.UInt64Value
	(*v1.RepeatedLineChart)(nil),               // 11: com.coralogixapis.service_catalog.v1.RepeatedLineChart
}
var file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_depIdxs = []int32{
	6,  // 0: com.coralogixapis.database_catalog.v1.GetBlueprintsColumnsStreamRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	7,  // 1: com.coralogixapis.database_catalog.v1.GetBlueprintsColumnsStreamRequest.database_name:type_name -> google.protobuf.StringValue
	7,  // 2: com.coralogixapis.database_catalog.v1.GetBlueprintsColumnsStreamRequest.database_name_source:type_name -> google.protobuf.StringValue
	7,  // 3: com.coralogixapis.database_catalog.v1.GetBlueprintsColumnsStreamRequest.database_system:type_name -> google.protobuf.StringValue
	8,  // 4: com.coralogixapis.database_catalog.v1.GetBlueprintsColumnsStreamRequest.database_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	7,  // 5: com.coralogixapis.database_catalog.v1.GetBlueprintsColumnsStreamRequest.calling_services:type_name -> google.protobuf.StringValue
	7,  // 6: com.coralogixapis.database_catalog.v1.GetBlueprintsColumnsStreamRequest.tables:type_name -> google.protobuf.StringValue
	9,  // 7: com.coralogixapis.database_catalog.v1.GetBlueprintsColumnsStreamResponse.blueprints:type_name -> com.coralogixapis.database_catalog.v1.BlueprintData
	7,  // 8: com.coralogixapis.database_catalog.v1.GetBlueprintStatsRequest.database_name:type_name -> google.protobuf.StringValue
	7,  // 9: com.coralogixapis.database_catalog.v1.GetBlueprintStatsRequest.database_name_source:type_name -> google.protobuf.StringValue
	6,  // 10: com.coralogixapis.database_catalog.v1.GetBlueprintStatsRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	8,  // 11: com.coralogixapis.database_catalog.v1.GetBlueprintStatsRequest.database_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	7,  // 12: com.coralogixapis.database_catalog.v1.GetBlueprintStatsRequest.database_system:type_name -> google.protobuf.StringValue
	7,  // 13: com.coralogixapis.database_catalog.v1.GetBlueprintStatsRequest.table:type_name -> google.protobuf.StringValue
	7,  // 14: com.coralogixapis.database_catalog.v1.GetBlueprintStatsRequest.calling_services:type_name -> google.protobuf.StringValue
	7,  // 15: com.coralogixapis.database_catalog.v1.GetBlueprintStatsRequest.blueprint:type_name -> google.protobuf.StringValue
	10, // 16: com.coralogixapis.database_catalog.v1.GetBlueprintStatsResponse.avg_response_time:type_name -> google.protobuf.UInt64Value
	10, // 17: com.coralogixapis.database_catalog.v1.GetBlueprintStatsResponse.p95_response_time:type_name -> google.protobuf.UInt64Value
	10, // 18: com.coralogixapis.database_catalog.v1.GetBlueprintStatsResponse.p99_response_time:type_name -> google.protobuf.UInt64Value
	10, // 19: com.coralogixapis.database_catalog.v1.GetBlueprintStatsResponse.total_requests:type_name -> google.protobuf.UInt64Value
	10, // 20: com.coralogixapis.database_catalog.v1.GetBlueprintStatsResponse.total_failures:type_name -> google.protobuf.UInt64Value
	10, // 21: com.coralogixapis.database_catalog.v1.GetBlueprintStatsResponse.failure_percentage:type_name -> google.protobuf.UInt64Value
	7,  // 22: com.coralogixapis.database_catalog.v1.GetBlueprintGraphsStreamRequest.database_name:type_name -> google.protobuf.StringValue
	7,  // 23: com.coralogixapis.database_catalog.v1.GetBlueprintGraphsStreamRequest.database_name_source:type_name -> google.protobuf.StringValue
	6,  // 24: com.coralogixapis.database_catalog.v1.GetBlueprintGraphsStreamRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	8,  // 25: com.coralogixapis.database_catalog.v1.GetBlueprintGraphsStreamRequest.database_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	7,  // 26: com.coralogixapis.database_catalog.v1.GetBlueprintGraphsStreamRequest.database_system:type_name -> google.protobuf.StringValue
	7,  // 27: com.coralogixapis.database_catalog.v1.GetBlueprintGraphsStreamRequest.table:type_name -> google.protobuf.StringValue
	7,  // 28: com.coralogixapis.database_catalog.v1.GetBlueprintGraphsStreamRequest.calling_services:type_name -> google.protobuf.StringValue
	7,  // 29: com.coralogixapis.database_catalog.v1.GetBlueprintGraphsStreamRequest.blueprint:type_name -> google.protobuf.StringValue
	11, // 30: com.coralogixapis.database_catalog.v1.GetBlueprintGraphsStreamResponse.successes_and_failures:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	11, // 31: com.coralogixapis.database_catalog.v1.GetBlueprintGraphsStreamResponse.latency:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	0,  // 32: com.coralogixapis.database_catalog.v1.BlueprintsService.GetBlueprintsColumnsStream:input_type -> com.coralogixapis.database_catalog.v1.GetBlueprintsColumnsStreamRequest
	2,  // 33: com.coralogixapis.database_catalog.v1.BlueprintsService.GetBlueprintStats:input_type -> com.coralogixapis.database_catalog.v1.GetBlueprintStatsRequest
	4,  // 34: com.coralogixapis.database_catalog.v1.BlueprintsService.GetBlueprintGraphsStream:input_type -> com.coralogixapis.database_catalog.v1.GetBlueprintGraphsStreamRequest
	1,  // 35: com.coralogixapis.database_catalog.v1.BlueprintsService.GetBlueprintsColumnsStream:output_type -> com.coralogixapis.database_catalog.v1.GetBlueprintsColumnsStreamResponse
	3,  // 36: com.coralogixapis.database_catalog.v1.BlueprintsService.GetBlueprintStats:output_type -> com.coralogixapis.database_catalog.v1.GetBlueprintStatsResponse
	5,  // 37: com.coralogixapis.database_catalog.v1.BlueprintsService.GetBlueprintGraphsStream:output_type -> com.coralogixapis.database_catalog.v1.GetBlueprintGraphsStreamResponse
	35, // [35:38] is the sub-list for method output_type
	32, // [32:35] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_init() }
func file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_init() {
	if File_com_coralogixapis_database_catalog_v1_blueprints_service_proto != nil {
		return
	}
	file_com_coralogixapis_database_catalog_v1_database_proto_init()
	file_com_coralogixapis_database_catalog_v1_blueprints_proto_init()
	file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_msgTypes[5].OneofWrappers = []any{
		(*GetBlueprintGraphsStreamResponse_SuccessesAndFailures)(nil),
		(*GetBlueprintGraphsStreamResponse_Latency)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_database_catalog_v1_blueprints_service_proto = out.File
	file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_rawDesc = nil
	file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_goTypes = nil
	file_com_coralogixapis_database_catalog_v1_blueprints_service_proto_depIdxs = nil
}
