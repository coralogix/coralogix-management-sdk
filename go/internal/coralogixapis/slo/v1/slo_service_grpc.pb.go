// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: com/coralogixapis/slo/v1/slo_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SlosService_CreateSlo_FullMethodName                = "/com.coralogixapis.slo.v1.SlosService/CreateSlo"
	SlosService_ReplaceSlo_FullMethodName               = "/com.coralogixapis.slo.v1.SlosService/ReplaceSlo"
	SlosService_ValidateReplaceSloAlerts_FullMethodName = "/com.coralogixapis.slo.v1.SlosService/ValidateReplaceSloAlerts"
	SlosService_DeleteSlo_FullMethodName                = "/com.coralogixapis.slo.v1.SlosService/DeleteSlo"
	SlosService_GetSlo_FullMethodName                   = "/com.coralogixapis.slo.v1.SlosService/GetSlo"
	SlosService_ListSlos_FullMethodName                 = "/com.coralogixapis.slo.v1.SlosService/ListSlos"
	SlosService_BatchGetSlos_FullMethodName             = "/com.coralogixapis.slo.v1.SlosService/BatchGetSlos"
	SlosService_BatchExecuteSlo_FullMethodName          = "/com.coralogixapis.slo.v1.SlosService/BatchExecuteSlo"
)

// SlosServiceClient is the client API for SlosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlosServiceClient interface {
	CreateSlo(ctx context.Context, in *CreateSloRequest, opts ...grpc.CallOption) (*CreateSloResponse, error)
	ReplaceSlo(ctx context.Context, in *ReplaceSloRequest, opts ...grpc.CallOption) (*ReplaceSloResponse, error)
	ValidateReplaceSloAlerts(ctx context.Context, in *ReplaceSloAlertsValidationsRequest, opts ...grpc.CallOption) (*ReplaceSloAlertsValidationsResponse, error)
	DeleteSlo(ctx context.Context, in *DeleteSloRequest, opts ...grpc.CallOption) (*DeleteSloResponse, error)
	GetSlo(ctx context.Context, in *GetSloRequest, opts ...grpc.CallOption) (*GetSloResponse, error)
	ListSlos(ctx context.Context, in *ListSlosRequest, opts ...grpc.CallOption) (*ListSlosResponse, error)
	BatchGetSlos(ctx context.Context, in *BatchGetSlosRequest, opts ...grpc.CallOption) (*BatchGetSlosResponse, error)
	BatchExecuteSlo(ctx context.Context, in *BatchExecuteSloRequest, opts ...grpc.CallOption) (*BatchExecuteSloResponse, error)
}

type slosServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSlosServiceClient(cc grpc.ClientConnInterface) SlosServiceClient {
	return &slosServiceClient{cc}
}

func (c *slosServiceClient) CreateSlo(ctx context.Context, in *CreateSloRequest, opts ...grpc.CallOption) (*CreateSloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSloResponse)
	err := c.cc.Invoke(ctx, SlosService_CreateSlo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slosServiceClient) ReplaceSlo(ctx context.Context, in *ReplaceSloRequest, opts ...grpc.CallOption) (*ReplaceSloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceSloResponse)
	err := c.cc.Invoke(ctx, SlosService_ReplaceSlo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slosServiceClient) ValidateReplaceSloAlerts(ctx context.Context, in *ReplaceSloAlertsValidationsRequest, opts ...grpc.CallOption) (*ReplaceSloAlertsValidationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceSloAlertsValidationsResponse)
	err := c.cc.Invoke(ctx, SlosService_ValidateReplaceSloAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slosServiceClient) DeleteSlo(ctx context.Context, in *DeleteSloRequest, opts ...grpc.CallOption) (*DeleteSloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSloResponse)
	err := c.cc.Invoke(ctx, SlosService_DeleteSlo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slosServiceClient) GetSlo(ctx context.Context, in *GetSloRequest, opts ...grpc.CallOption) (*GetSloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSloResponse)
	err := c.cc.Invoke(ctx, SlosService_GetSlo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slosServiceClient) ListSlos(ctx context.Context, in *ListSlosRequest, opts ...grpc.CallOption) (*ListSlosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSlosResponse)
	err := c.cc.Invoke(ctx, SlosService_ListSlos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slosServiceClient) BatchGetSlos(ctx context.Context, in *BatchGetSlosRequest, opts ...grpc.CallOption) (*BatchGetSlosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetSlosResponse)
	err := c.cc.Invoke(ctx, SlosService_BatchGetSlos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slosServiceClient) BatchExecuteSlo(ctx context.Context, in *BatchExecuteSloRequest, opts ...grpc.CallOption) (*BatchExecuteSloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchExecuteSloResponse)
	err := c.cc.Invoke(ctx, SlosService_BatchExecuteSlo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlosServiceServer is the server API for SlosService service.
// All implementations must embed UnimplementedSlosServiceServer
// for forward compatibility.
type SlosServiceServer interface {
	CreateSlo(context.Context, *CreateSloRequest) (*CreateSloResponse, error)
	ReplaceSlo(context.Context, *ReplaceSloRequest) (*ReplaceSloResponse, error)
	ValidateReplaceSloAlerts(context.Context, *ReplaceSloAlertsValidationsRequest) (*ReplaceSloAlertsValidationsResponse, error)
	DeleteSlo(context.Context, *DeleteSloRequest) (*DeleteSloResponse, error)
	GetSlo(context.Context, *GetSloRequest) (*GetSloResponse, error)
	ListSlos(context.Context, *ListSlosRequest) (*ListSlosResponse, error)
	BatchGetSlos(context.Context, *BatchGetSlosRequest) (*BatchGetSlosResponse, error)
	BatchExecuteSlo(context.Context, *BatchExecuteSloRequest) (*BatchExecuteSloResponse, error)
	mustEmbedUnimplementedSlosServiceServer()
}

// UnimplementedSlosServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSlosServiceServer struct{}

func (UnimplementedSlosServiceServer) CreateSlo(context.Context, *CreateSloRequest) (*CreateSloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSlo not implemented")
}
func (UnimplementedSlosServiceServer) ReplaceSlo(context.Context, *ReplaceSloRequest) (*ReplaceSloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceSlo not implemented")
}
func (UnimplementedSlosServiceServer) ValidateReplaceSloAlerts(context.Context, *ReplaceSloAlertsValidationsRequest) (*ReplaceSloAlertsValidationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateReplaceSloAlerts not implemented")
}
func (UnimplementedSlosServiceServer) DeleteSlo(context.Context, *DeleteSloRequest) (*DeleteSloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSlo not implemented")
}
func (UnimplementedSlosServiceServer) GetSlo(context.Context, *GetSloRequest) (*GetSloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlo not implemented")
}
func (UnimplementedSlosServiceServer) ListSlos(context.Context, *ListSlosRequest) (*ListSlosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSlos not implemented")
}
func (UnimplementedSlosServiceServer) BatchGetSlos(context.Context, *BatchGetSlosRequest) (*BatchGetSlosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetSlos not implemented")
}
func (UnimplementedSlosServiceServer) BatchExecuteSlo(context.Context, *BatchExecuteSloRequest) (*BatchExecuteSloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchExecuteSlo not implemented")
}
func (UnimplementedSlosServiceServer) mustEmbedUnimplementedSlosServiceServer() {}
func (UnimplementedSlosServiceServer) testEmbeddedByValue()                     {}

// UnsafeSlosServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlosServiceServer will
// result in compilation errors.
type UnsafeSlosServiceServer interface {
	mustEmbedUnimplementedSlosServiceServer()
}

func RegisterSlosServiceServer(s grpc.ServiceRegistrar, srv SlosServiceServer) {
	// If the following call pancis, it indicates UnimplementedSlosServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SlosService_ServiceDesc, srv)
}

func _SlosService_CreateSlo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlosServiceServer).CreateSlo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlosService_CreateSlo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlosServiceServer).CreateSlo(ctx, req.(*CreateSloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlosService_ReplaceSlo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceSloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlosServiceServer).ReplaceSlo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlosService_ReplaceSlo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlosServiceServer).ReplaceSlo(ctx, req.(*ReplaceSloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlosService_ValidateReplaceSloAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceSloAlertsValidationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlosServiceServer).ValidateReplaceSloAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlosService_ValidateReplaceSloAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlosServiceServer).ValidateReplaceSloAlerts(ctx, req.(*ReplaceSloAlertsValidationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlosService_DeleteSlo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlosServiceServer).DeleteSlo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlosService_DeleteSlo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlosServiceServer).DeleteSlo(ctx, req.(*DeleteSloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlosService_GetSlo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlosServiceServer).GetSlo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlosService_GetSlo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlosServiceServer).GetSlo(ctx, req.(*GetSloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlosService_ListSlos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSlosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlosServiceServer).ListSlos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlosService_ListSlos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlosServiceServer).ListSlos(ctx, req.(*ListSlosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlosService_BatchGetSlos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetSlosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlosServiceServer).BatchGetSlos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlosService_BatchGetSlos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlosServiceServer).BatchGetSlos(ctx, req.(*BatchGetSlosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlosService_BatchExecuteSlo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchExecuteSloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlosServiceServer).BatchExecuteSlo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlosService_BatchExecuteSlo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlosServiceServer).BatchExecuteSlo(ctx, req.(*BatchExecuteSloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SlosService_ServiceDesc is the grpc.ServiceDesc for SlosService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SlosService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogixapis.slo.v1.SlosService",
	HandlerType: (*SlosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSlo",
			Handler:    _SlosService_CreateSlo_Handler,
		},
		{
			MethodName: "ReplaceSlo",
			Handler:    _SlosService_ReplaceSlo_Handler,
		},
		{
			MethodName: "ValidateReplaceSloAlerts",
			Handler:    _SlosService_ValidateReplaceSloAlerts_Handler,
		},
		{
			MethodName: "DeleteSlo",
			Handler:    _SlosService_DeleteSlo_Handler,
		},
		{
			MethodName: "GetSlo",
			Handler:    _SlosService_GetSlo_Handler,
		},
		{
			MethodName: "ListSlos",
			Handler:    _SlosService_ListSlos_Handler,
		},
		{
			MethodName: "BatchGetSlos",
			Handler:    _SlosService_BatchGetSlos_Handler,
		},
		{
			MethodName: "BatchExecuteSlo",
			Handler:    _SlosService_BatchExecuteSlo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogixapis/slo/v1/slo_service.proto",
}
