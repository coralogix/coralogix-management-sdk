// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: com/coralogixapis/notification_center/notifications/v1/testing_service.proto

package v1

import (
	common "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/notification_center/common"
	v1 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/notification_center/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestConnectorConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           common.ConnectorType       `protobuf:"varint,1,opt,name=type,proto3,enum=com.coralogixapis.notification_center.ConnectorType" json:"type,omitempty"`
	OutputSchemaId string                     `protobuf:"bytes,2,opt,name=output_schema_id,json=outputSchemaId,proto3" json:"output_schema_id,omitempty"`
	Fields         []*v1.ConnectorConfigField `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	EntityType     string                     `protobuf:"bytes,4,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
}

func (x *TestConnectorConfigRequest) Reset() {
	*x = TestConnectorConfigRequest{}
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestConnectorConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestConnectorConfigRequest) ProtoMessage() {}

func (x *TestConnectorConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestConnectorConfigRequest.ProtoReflect.Descriptor instead.
func (*TestConnectorConfigRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescGZIP(), []int{0}
}

func (x *TestConnectorConfigRequest) GetType() common.ConnectorType {
	if x != nil {
		return x.Type
	}
	return common.ConnectorType(0)
}

func (x *TestConnectorConfigRequest) GetOutputSchemaId() string {
	if x != nil {
		return x.OutputSchemaId
	}
	return ""
}

func (x *TestConnectorConfigRequest) GetFields() []*v1.ConnectorConfigField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *TestConnectorConfigRequest) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

type TestConnectorConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *TestResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TestConnectorConfigResponse) Reset() {
	*x = TestConnectorConfigResponse{}
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestConnectorConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestConnectorConfigResponse) ProtoMessage() {}

func (x *TestConnectorConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestConnectorConfigResponse.ProtoReflect.Descriptor instead.
func (*TestConnectorConfigResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescGZIP(), []int{1}
}

func (x *TestConnectorConfigResponse) GetResult() *TestResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type TestExistingConnectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectorId    string `protobuf:"bytes,1,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`
	OutputSchemaId string `protobuf:"bytes,2,opt,name=output_schema_id,json=outputSchemaId,proto3" json:"output_schema_id,omitempty"`
}

func (x *TestExistingConnectorRequest) Reset() {
	*x = TestExistingConnectorRequest{}
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestExistingConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestExistingConnectorRequest) ProtoMessage() {}

func (x *TestExistingConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestExistingConnectorRequest.ProtoReflect.Descriptor instead.
func (*TestExistingConnectorRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescGZIP(), []int{2}
}

func (x *TestExistingConnectorRequest) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

func (x *TestExistingConnectorRequest) GetOutputSchemaId() string {
	if x != nil {
		return x.OutputSchemaId
	}
	return ""
}

type TestExistingConnectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *TestResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TestExistingConnectorResponse) Reset() {
	*x = TestExistingConnectorResponse{}
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestExistingConnectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestExistingConnectorResponse) ProtoMessage() {}

func (x *TestExistingConnectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestExistingConnectorResponse.ProtoReflect.Descriptor instead.
func (*TestExistingConnectorResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescGZIP(), []int{3}
}

func (x *TestExistingConnectorResponse) GetResult() *TestResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type TestPresetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityType    string  `protobuf:"bytes,1,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	EntitySubType *string `protobuf:"bytes,2,opt,name=entity_sub_type,json=entitySubType,proto3,oneof" json:"entity_sub_type,omitempty"`
	ConnectorId   string  `protobuf:"bytes,3,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`
	// Deprecated: Marked as deprecated in com/coralogixapis/notification_center/notifications/v1/testing_service.proto.
	OutputSchemaId string `protobuf:"bytes,4,opt,name=output_schema_id,json=outputSchemaId,proto3" json:"output_schema_id,omitempty"`
	// Deprecated: Marked as deprecated in com/coralogixapis/notification_center/notifications/v1/testing_service.proto.
	Fields          []*v1.MessageConfigField  `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	PresetId        string                    `protobuf:"bytes,6,opt,name=preset_id,json=presetId,proto3" json:"preset_id,omitempty"`
	ConfigOverrides []*common.ConfigOverrides `protobuf:"bytes,7,rep,name=config_overrides,json=configOverrides,proto3" json:"config_overrides,omitempty"`
}

func (x *TestPresetConfigRequest) Reset() {
	*x = TestPresetConfigRequest{}
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestPresetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPresetConfigRequest) ProtoMessage() {}

func (x *TestPresetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPresetConfigRequest.ProtoReflect.Descriptor instead.
func (*TestPresetConfigRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescGZIP(), []int{4}
}

func (x *TestPresetConfigRequest) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *TestPresetConfigRequest) GetEntitySubType() string {
	if x != nil && x.EntitySubType != nil {
		return *x.EntitySubType
	}
	return ""
}

func (x *TestPresetConfigRequest) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

// Deprecated: Marked as deprecated in com/coralogixapis/notification_center/notifications/v1/testing_service.proto.
func (x *TestPresetConfigRequest) GetOutputSchemaId() string {
	if x != nil {
		return x.OutputSchemaId
	}
	return ""
}

// Deprecated: Marked as deprecated in com/coralogixapis/notification_center/notifications/v1/testing_service.proto.
func (x *TestPresetConfigRequest) GetFields() []*v1.MessageConfigField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *TestPresetConfigRequest) GetPresetId() string {
	if x != nil {
		return x.PresetId
	}
	return ""
}

func (x *TestPresetConfigRequest) GetConfigOverrides() []*common.ConfigOverrides {
	if x != nil {
		return x.ConfigOverrides
	}
	return nil
}

type TestPresetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *TestResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TestPresetConfigResponse) Reset() {
	*x = TestPresetConfigResponse{}
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestPresetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPresetConfigResponse) ProtoMessage() {}

func (x *TestPresetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPresetConfigResponse.ProtoReflect.Descriptor instead.
func (*TestPresetConfigResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescGZIP(), []int{5}
}

func (x *TestPresetConfigResponse) GetResult() *TestResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type TestExistingPresetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityType    string  `protobuf:"bytes,1,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	EntitySubType *string `protobuf:"bytes,2,opt,name=entity_sub_type,json=entitySubType,proto3,oneof" json:"entity_sub_type,omitempty"`
	PresetId      string  `protobuf:"bytes,3,opt,name=preset_id,json=presetId,proto3" json:"preset_id,omitempty"`
	ConnectorId   string  `protobuf:"bytes,4,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`
}

func (x *TestExistingPresetRequest) Reset() {
	*x = TestExistingPresetRequest{}
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestExistingPresetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestExistingPresetRequest) ProtoMessage() {}

func (x *TestExistingPresetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestExistingPresetRequest.ProtoReflect.Descriptor instead.
func (*TestExistingPresetRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescGZIP(), []int{6}
}

func (x *TestExistingPresetRequest) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *TestExistingPresetRequest) GetEntitySubType() string {
	if x != nil && x.EntitySubType != nil {
		return *x.EntitySubType
	}
	return ""
}

func (x *TestExistingPresetRequest) GetPresetId() string {
	if x != nil {
		return x.PresetId
	}
	return ""
}

func (x *TestExistingPresetRequest) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

type TestExistingPresetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *TestResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TestExistingPresetResponse) Reset() {
	*x = TestExistingPresetResponse{}
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestExistingPresetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestExistingPresetResponse) ProtoMessage() {}

func (x *TestExistingPresetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestExistingPresetResponse.ProtoReflect.Descriptor instead.
func (*TestExistingPresetResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescGZIP(), []int{7}
}

func (x *TestExistingPresetResponse) GetResult() *TestResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type TestDestinationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityType            string                     `protobuf:"bytes,1,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	EntitySubType         *string                    `protobuf:"bytes,2,opt,name=entity_sub_type,json=entitySubType,proto3,oneof" json:"entity_sub_type,omitempty"`
	ConnectorId           string                     `protobuf:"bytes,3,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`
	PresetId              string                     `protobuf:"bytes,4,opt,name=preset_id,json=presetId,proto3" json:"preset_id,omitempty"`
	OutputSchemaId        string                     `protobuf:"bytes,5,opt,name=output_schema_id,json=outputSchemaId,proto3" json:"output_schema_id,omitempty"`
	ConnectorConfigFields []*v1.ConnectorConfigField `protobuf:"bytes,6,rep,name=connector_config_fields,json=connectorConfigFields,proto3" json:"connector_config_fields,omitempty"`
	MessageConfigFields   []*v1.MessageConfigField   `protobuf:"bytes,7,rep,name=message_config_fields,json=messageConfigFields,proto3" json:"message_config_fields,omitempty"`
}

func (x *TestDestinationRequest) Reset() {
	*x = TestDestinationRequest{}
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestDestinationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDestinationRequest) ProtoMessage() {}

func (x *TestDestinationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDestinationRequest.ProtoReflect.Descriptor instead.
func (*TestDestinationRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescGZIP(), []int{8}
}

func (x *TestDestinationRequest) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *TestDestinationRequest) GetEntitySubType() string {
	if x != nil && x.EntitySubType != nil {
		return *x.EntitySubType
	}
	return ""
}

func (x *TestDestinationRequest) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

func (x *TestDestinationRequest) GetPresetId() string {
	if x != nil {
		return x.PresetId
	}
	return ""
}

func (x *TestDestinationRequest) GetOutputSchemaId() string {
	if x != nil {
		return x.OutputSchemaId
	}
	return ""
}

func (x *TestDestinationRequest) GetConnectorConfigFields() []*v1.ConnectorConfigField {
	if x != nil {
		return x.ConnectorConfigFields
	}
	return nil
}

func (x *TestDestinationRequest) GetMessageConfigFields() []*v1.MessageConfigField {
	if x != nil {
		return x.MessageConfigFields
	}
	return nil
}

type TestDestinationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *TestResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TestDestinationResponse) Reset() {
	*x = TestDestinationResponse{}
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestDestinationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDestinationResponse) ProtoMessage() {}

func (x *TestDestinationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDestinationResponse.ProtoReflect.Descriptor instead.
func (*TestDestinationResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescGZIP(), []int{9}
}

func (x *TestDestinationResponse) GetResult() *TestResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type TestTemplateRenderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityType    string  `protobuf:"bytes,1,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	EntitySubType *string `protobuf:"bytes,2,opt,name=entity_sub_type,json=entitySubType,proto3,oneof" json:"entity_sub_type,omitempty"`
	Template      string  `protobuf:"bytes,3,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *TestTemplateRenderRequest) Reset() {
	*x = TestTemplateRenderRequest{}
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestTemplateRenderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTemplateRenderRequest) ProtoMessage() {}

func (x *TestTemplateRenderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTemplateRenderRequest.ProtoReflect.Descriptor instead.
func (*TestTemplateRenderRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescGZIP(), []int{10}
}

func (x *TestTemplateRenderRequest) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *TestTemplateRenderRequest) GetEntitySubType() string {
	if x != nil && x.EntitySubType != nil {
		return *x.EntitySubType
	}
	return ""
}

func (x *TestTemplateRenderRequest) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

type TestTemplateRenderResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*TestTemplateRenderResult_Success_
	//	*TestTemplateRenderResult_Failure_
	Result isTestTemplateRenderResult_Result `protobuf_oneof:"result"`
}

func (x *TestTemplateRenderResult) Reset() {
	*x = TestTemplateRenderResult{}
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestTemplateRenderResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTemplateRenderResult) ProtoMessage() {}

func (x *TestTemplateRenderResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTemplateRenderResult.ProtoReflect.Descriptor instead.
func (*TestTemplateRenderResult) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescGZIP(), []int{11}
}

func (m *TestTemplateRenderResult) GetResult() isTestTemplateRenderResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *TestTemplateRenderResult) GetSuccess() *TestTemplateRenderResult_Success {
	if x, ok := x.GetResult().(*TestTemplateRenderResult_Success_); ok {
		return x.Success
	}
	return nil
}

func (x *TestTemplateRenderResult) GetFailure() *TestTemplateRenderResult_Failure {
	if x, ok := x.GetResult().(*TestTemplateRenderResult_Failure_); ok {
		return x.Failure
	}
	return nil
}

type isTestTemplateRenderResult_Result interface {
	isTestTemplateRenderResult_Result()
}

type TestTemplateRenderResult_Success_ struct {
	Success *TestTemplateRenderResult_Success `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type TestTemplateRenderResult_Failure_ struct {
	Failure *TestTemplateRenderResult_Failure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*TestTemplateRenderResult_Success_) isTestTemplateRenderResult_Result() {}

func (*TestTemplateRenderResult_Failure_) isTestTemplateRenderResult_Result() {}

type TestTemplateRenderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *TestTemplateRenderResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TestTemplateRenderResponse) Reset() {
	*x = TestTemplateRenderResponse{}
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestTemplateRenderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTemplateRenderResponse) ProtoMessage() {}

func (x *TestTemplateRenderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTemplateRenderResponse.ProtoReflect.Descriptor instead.
func (*TestTemplateRenderResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescGZIP(), []int{12}
}

func (x *TestTemplateRenderResponse) GetResult() *TestTemplateRenderResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type TestTemplateRenderResult_Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RenderedValue string `protobuf:"bytes,1,opt,name=rendered_value,json=renderedValue,proto3" json:"rendered_value,omitempty"`
}

func (x *TestTemplateRenderResult_Success) Reset() {
	*x = TestTemplateRenderResult_Success{}
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestTemplateRenderResult_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTemplateRenderResult_Success) ProtoMessage() {}

func (x *TestTemplateRenderResult_Success) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTemplateRenderResult_Success.ProtoReflect.Descriptor instead.
func (*TestTemplateRenderResult_Success) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescGZIP(), []int{11, 0}
}

func (x *TestTemplateRenderResult_Success) GetRenderedValue() string {
	if x != nil {
		return x.RenderedValue
	}
	return ""
}

type TestTemplateRenderResult_Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TestTemplateRenderResult_Failure) Reset() {
	*x = TestTemplateRenderResult_Failure{}
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestTemplateRenderResult_Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTemplateRenderResult_Failure) ProtoMessage() {}

func (x *TestTemplateRenderResult_Failure) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTemplateRenderResult_Failure.ProtoReflect.Descriptor instead.
func (*TestTemplateRenderResult_Failure) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescGZIP(), []int{11, 1}
}

func (x *TestTemplateRenderResult_Failure) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_com_coralogixapis_notification_center_notifications_v1_testing_service_proto protoreflect.FileDescriptor

var file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDesc = []byte{
	0x0a, 0x4c, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x36,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x39, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x43, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x43, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x86, 0x02, 0x0a, 0x1a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x48, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x79, 0x0a, 0x1b, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x6b, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49,
	0x64, 0x22, 0x7b, 0x0a, 0x1d, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa3,
	0x03, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x75,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x61, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x76, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xbd, 0x01, 0x0a,
	0x19, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x75,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x78, 0x0a, 0x1a,
	0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc8, 0x03, 0x0a, 0x16, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x62,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x17, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x6d,
	0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x75, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x19, 0x54, 0x65, 0x73,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xe7, 0x02, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x74, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x58, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x74, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x1a, 0x30, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x23, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x86,
	0x01, 0x0a, 0x1a, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xd6, 0x0c, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x92, 0x02, 0x0a, 0x13, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x52, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x53, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4c, 0x3a, 0x01, 0x2a, 0x22, 0x47, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x3a, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x93, 0x02, 0x0a, 0x15, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x54, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x55, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x3a, 0x01,
	0x2a, 0x22, 0x42, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x3a,
	0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x86, 0x02, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x50, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x49, 0x3a, 0x01, 0x2a, 0x22, 0x44, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x87,
	0x02, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x51, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x52, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x44, 0x3a, 0x01, 0x2a, 0x22, 0x3f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0xfb, 0x01, 0x0a, 0x0f, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x41, 0x3a, 0x01, 0x2a, 0x22, 0x3c, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x87, 0x02, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x51, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x52, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x3a, 0x01, 0x2a, 0x22,
	0x3f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x74, 0x65,
	0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescOnce sync.Once
	file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescData = file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDesc
)

func file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescData)
	})
	return file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDescData
}

var file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_goTypes = []any{
	(*TestConnectorConfigRequest)(nil),       // 0: com.coralogixapis.notification_center.notifications.v1.TestConnectorConfigRequest
	(*TestConnectorConfigResponse)(nil),      // 1: com.coralogixapis.notification_center.notifications.v1.TestConnectorConfigResponse
	(*TestExistingConnectorRequest)(nil),     // 2: com.coralogixapis.notification_center.notifications.v1.TestExistingConnectorRequest
	(*TestExistingConnectorResponse)(nil),    // 3: com.coralogixapis.notification_center.notifications.v1.TestExistingConnectorResponse
	(*TestPresetConfigRequest)(nil),          // 4: com.coralogixapis.notification_center.notifications.v1.TestPresetConfigRequest
	(*TestPresetConfigResponse)(nil),         // 5: com.coralogixapis.notification_center.notifications.v1.TestPresetConfigResponse
	(*TestExistingPresetRequest)(nil),        // 6: com.coralogixapis.notification_center.notifications.v1.TestExistingPresetRequest
	(*TestExistingPresetResponse)(nil),       // 7: com.coralogixapis.notification_center.notifications.v1.TestExistingPresetResponse
	(*TestDestinationRequest)(nil),           // 8: com.coralogixapis.notification_center.notifications.v1.TestDestinationRequest
	(*TestDestinationResponse)(nil),          // 9: com.coralogixapis.notification_center.notifications.v1.TestDestinationResponse
	(*TestTemplateRenderRequest)(nil),        // 10: com.coralogixapis.notification_center.notifications.v1.TestTemplateRenderRequest
	(*TestTemplateRenderResult)(nil),         // 11: com.coralogixapis.notification_center.notifications.v1.TestTemplateRenderResult
	(*TestTemplateRenderResponse)(nil),       // 12: com.coralogixapis.notification_center.notifications.v1.TestTemplateRenderResponse
	(*TestTemplateRenderResult_Success)(nil), // 13: com.coralogixapis.notification_center.notifications.v1.TestTemplateRenderResult.Success
	(*TestTemplateRenderResult_Failure)(nil), // 14: com.coralogixapis.notification_center.notifications.v1.TestTemplateRenderResult.Failure
	(common.ConnectorType)(0),                // 15: com.coralogixapis.notification_center.ConnectorType
	(*v1.ConnectorConfigField)(nil),          // 16: com.coralogixapis.notification_center.ConnectorConfigField
	(*TestResult)(nil),                       // 17: com.coralogixapis.notification_center.notifications.v1.TestResult
	(*v1.MessageConfigField)(nil),            // 18: com.coralogixapis.notification_center.MessageConfigField
	(*common.ConfigOverrides)(nil),           // 19: com.coralogixapis.notification_center.ConfigOverrides
}
var file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_depIdxs = []int32{
	15, // 0: com.coralogixapis.notification_center.notifications.v1.TestConnectorConfigRequest.type:type_name -> com.coralogixapis.notification_center.ConnectorType
	16, // 1: com.coralogixapis.notification_center.notifications.v1.TestConnectorConfigRequest.fields:type_name -> com.coralogixapis.notification_center.ConnectorConfigField
	17, // 2: com.coralogixapis.notification_center.notifications.v1.TestConnectorConfigResponse.result:type_name -> com.coralogixapis.notification_center.notifications.v1.TestResult
	17, // 3: com.coralogixapis.notification_center.notifications.v1.TestExistingConnectorResponse.result:type_name -> com.coralogixapis.notification_center.notifications.v1.TestResult
	18, // 4: com.coralogixapis.notification_center.notifications.v1.TestPresetConfigRequest.fields:type_name -> com.coralogixapis.notification_center.MessageConfigField
	19, // 5: com.coralogixapis.notification_center.notifications.v1.TestPresetConfigRequest.config_overrides:type_name -> com.coralogixapis.notification_center.ConfigOverrides
	17, // 6: com.coralogixapis.notification_center.notifications.v1.TestPresetConfigResponse.result:type_name -> com.coralogixapis.notification_center.notifications.v1.TestResult
	17, // 7: com.coralogixapis.notification_center.notifications.v1.TestExistingPresetResponse.result:type_name -> com.coralogixapis.notification_center.notifications.v1.TestResult
	16, // 8: com.coralogixapis.notification_center.notifications.v1.TestDestinationRequest.connector_config_fields:type_name -> com.coralogixapis.notification_center.ConnectorConfigField
	18, // 9: com.coralogixapis.notification_center.notifications.v1.TestDestinationRequest.message_config_fields:type_name -> com.coralogixapis.notification_center.MessageConfigField
	17, // 10: com.coralogixapis.notification_center.notifications.v1.TestDestinationResponse.result:type_name -> com.coralogixapis.notification_center.notifications.v1.TestResult
	13, // 11: com.coralogixapis.notification_center.notifications.v1.TestTemplateRenderResult.success:type_name -> com.coralogixapis.notification_center.notifications.v1.TestTemplateRenderResult.Success
	14, // 12: com.coralogixapis.notification_center.notifications.v1.TestTemplateRenderResult.failure:type_name -> com.coralogixapis.notification_center.notifications.v1.TestTemplateRenderResult.Failure
	11, // 13: com.coralogixapis.notification_center.notifications.v1.TestTemplateRenderResponse.result:type_name -> com.coralogixapis.notification_center.notifications.v1.TestTemplateRenderResult
	0,  // 14: com.coralogixapis.notification_center.notifications.v1.TestingService.TestConnectorConfig:input_type -> com.coralogixapis.notification_center.notifications.v1.TestConnectorConfigRequest
	2,  // 15: com.coralogixapis.notification_center.notifications.v1.TestingService.TestExistingConnector:input_type -> com.coralogixapis.notification_center.notifications.v1.TestExistingConnectorRequest
	4,  // 16: com.coralogixapis.notification_center.notifications.v1.TestingService.TestPresetConfig:input_type -> com.coralogixapis.notification_center.notifications.v1.TestPresetConfigRequest
	6,  // 17: com.coralogixapis.notification_center.notifications.v1.TestingService.TestExistingPreset:input_type -> com.coralogixapis.notification_center.notifications.v1.TestExistingPresetRequest
	8,  // 18: com.coralogixapis.notification_center.notifications.v1.TestingService.TestDestination:input_type -> com.coralogixapis.notification_center.notifications.v1.TestDestinationRequest
	10, // 19: com.coralogixapis.notification_center.notifications.v1.TestingService.TestTemplateRender:input_type -> com.coralogixapis.notification_center.notifications.v1.TestTemplateRenderRequest
	1,  // 20: com.coralogixapis.notification_center.notifications.v1.TestingService.TestConnectorConfig:output_type -> com.coralogixapis.notification_center.notifications.v1.TestConnectorConfigResponse
	3,  // 21: com.coralogixapis.notification_center.notifications.v1.TestingService.TestExistingConnector:output_type -> com.coralogixapis.notification_center.notifications.v1.TestExistingConnectorResponse
	5,  // 22: com.coralogixapis.notification_center.notifications.v1.TestingService.TestPresetConfig:output_type -> com.coralogixapis.notification_center.notifications.v1.TestPresetConfigResponse
	7,  // 23: com.coralogixapis.notification_center.notifications.v1.TestingService.TestExistingPreset:output_type -> com.coralogixapis.notification_center.notifications.v1.TestExistingPresetResponse
	9,  // 24: com.coralogixapis.notification_center.notifications.v1.TestingService.TestDestination:output_type -> com.coralogixapis.notification_center.notifications.v1.TestDestinationResponse
	12, // 25: com.coralogixapis.notification_center.notifications.v1.TestingService.TestTemplateRender:output_type -> com.coralogixapis.notification_center.notifications.v1.TestTemplateRenderResponse
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_init() }
func file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_init() {
	if File_com_coralogixapis_notification_center_notifications_v1_testing_service_proto != nil {
		return
	}
	file_com_coralogixapis_notification_center_notifications_v1_testing_proto_init()
	file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[4].OneofWrappers = []any{}
	file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[6].OneofWrappers = []any{}
	file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[8].OneofWrappers = []any{}
	file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[10].OneofWrappers = []any{}
	file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes[11].OneofWrappers = []any{
		(*TestTemplateRenderResult_Success_)(nil),
		(*TestTemplateRenderResult_Failure_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_notification_center_notifications_v1_testing_service_proto = out.File
	file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_rawDesc = nil
	file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_goTypes = nil
	file_com_coralogixapis_notification_center_notifications_v1_testing_service_proto_depIdxs = nil
}
