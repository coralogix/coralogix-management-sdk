// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.26.1
// source: com/coralogixapis/notification_center/presets/v1/presets_service.proto

package v1

import (
	common "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/notification_center/common"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateCustomPresetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Preset        *Preset                `protobuf:"bytes,1,opt,name=preset,proto3" json:"preset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCustomPresetRequest) Reset() {
	*x = CreateCustomPresetRequest{}
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCustomPresetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCustomPresetRequest) ProtoMessage() {}

func (x *CreateCustomPresetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCustomPresetRequest.ProtoReflect.Descriptor instead.
func (*CreateCustomPresetRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCustomPresetRequest) GetPreset() *Preset {
	if x != nil {
		return x.Preset
	}
	return nil
}

type CreateCustomPresetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Preset        *Preset                `protobuf:"bytes,1,opt,name=preset,proto3" json:"preset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCustomPresetResponse) Reset() {
	*x = CreateCustomPresetResponse{}
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCustomPresetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCustomPresetResponse) ProtoMessage() {}

func (x *CreateCustomPresetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCustomPresetResponse.ProtoReflect.Descriptor instead.
func (*CreateCustomPresetResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCustomPresetResponse) GetPreset() *Preset {
	if x != nil {
		return x.Preset
	}
	return nil
}

type ReplaceCustomPresetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Preset        *Preset                `protobuf:"bytes,1,opt,name=preset,proto3" json:"preset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplaceCustomPresetRequest) Reset() {
	*x = ReplaceCustomPresetRequest{}
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceCustomPresetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceCustomPresetRequest) ProtoMessage() {}

func (x *ReplaceCustomPresetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceCustomPresetRequest.ProtoReflect.Descriptor instead.
func (*ReplaceCustomPresetRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescGZIP(), []int{2}
}

func (x *ReplaceCustomPresetRequest) GetPreset() *Preset {
	if x != nil {
		return x.Preset
	}
	return nil
}

type ReplaceCustomPresetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Preset        *Preset                `protobuf:"bytes,1,opt,name=preset,proto3" json:"preset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplaceCustomPresetResponse) Reset() {
	*x = ReplaceCustomPresetResponse{}
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceCustomPresetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceCustomPresetResponse) ProtoMessage() {}

func (x *ReplaceCustomPresetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceCustomPresetResponse.ProtoReflect.Descriptor instead.
func (*ReplaceCustomPresetResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescGZIP(), []int{3}
}

func (x *ReplaceCustomPresetResponse) GetPreset() *Preset {
	if x != nil {
		return x.Preset
	}
	return nil
}

type DeleteCustomPresetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to DeprecatedIdentifier:
	//
	//	*DeleteCustomPresetRequest_Id
	//	*DeleteCustomPresetRequest_UserFacingId
	DeprecatedIdentifier isDeleteCustomPresetRequest_DeprecatedIdentifier `protobuf_oneof:"deprecated_identifier"`
	Identifier           *PresetIdentifier                                `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *DeleteCustomPresetRequest) Reset() {
	*x = DeleteCustomPresetRequest{}
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCustomPresetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomPresetRequest) ProtoMessage() {}

func (x *DeleteCustomPresetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomPresetRequest.ProtoReflect.Descriptor instead.
func (*DeleteCustomPresetRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteCustomPresetRequest) GetDeprecatedIdentifier() isDeleteCustomPresetRequest_DeprecatedIdentifier {
	if x != nil {
		return x.DeprecatedIdentifier
	}
	return nil
}

func (x *DeleteCustomPresetRequest) GetId() string {
	if x != nil {
		if x, ok := x.DeprecatedIdentifier.(*DeleteCustomPresetRequest_Id); ok {
			return x.Id
		}
	}
	return ""
}

func (x *DeleteCustomPresetRequest) GetUserFacingId() string {
	if x != nil {
		if x, ok := x.DeprecatedIdentifier.(*DeleteCustomPresetRequest_UserFacingId); ok {
			return x.UserFacingId
		}
	}
	return ""
}

func (x *DeleteCustomPresetRequest) GetIdentifier() *PresetIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

type isDeleteCustomPresetRequest_DeprecatedIdentifier interface {
	isDeleteCustomPresetRequest_DeprecatedIdentifier()
}

type DeleteCustomPresetRequest_Id struct {
	Id string `protobuf:"bytes,101,opt,name=id,proto3,oneof"`
}

type DeleteCustomPresetRequest_UserFacingId struct {
	UserFacingId string `protobuf:"bytes,102,opt,name=user_facing_id,json=userFacingId,proto3,oneof"`
}

func (*DeleteCustomPresetRequest_Id) isDeleteCustomPresetRequest_DeprecatedIdentifier() {}

func (*DeleteCustomPresetRequest_UserFacingId) isDeleteCustomPresetRequest_DeprecatedIdentifier() {}

type DeleteCustomPresetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCustomPresetResponse) Reset() {
	*x = DeleteCustomPresetResponse{}
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCustomPresetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomPresetResponse) ProtoMessage() {}

func (x *DeleteCustomPresetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomPresetResponse.ProtoReflect.Descriptor instead.
func (*DeleteCustomPresetResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescGZIP(), []int{5}
}

type SetCustomPresetAsDefaultRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to DeprecatedIdentifier:
	//
	//	*SetCustomPresetAsDefaultRequest_Id
	//	*SetCustomPresetAsDefaultRequest_UserFacingId
	DeprecatedIdentifier isSetCustomPresetAsDefaultRequest_DeprecatedIdentifier `protobuf_oneof:"deprecated_identifier"`
	Identifier           *PresetIdentifier                                      `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SetCustomPresetAsDefaultRequest) Reset() {
	*x = SetCustomPresetAsDefaultRequest{}
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCustomPresetAsDefaultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCustomPresetAsDefaultRequest) ProtoMessage() {}

func (x *SetCustomPresetAsDefaultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCustomPresetAsDefaultRequest.ProtoReflect.Descriptor instead.
func (*SetCustomPresetAsDefaultRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescGZIP(), []int{6}
}

func (x *SetCustomPresetAsDefaultRequest) GetDeprecatedIdentifier() isSetCustomPresetAsDefaultRequest_DeprecatedIdentifier {
	if x != nil {
		return x.DeprecatedIdentifier
	}
	return nil
}

func (x *SetCustomPresetAsDefaultRequest) GetId() string {
	if x != nil {
		if x, ok := x.DeprecatedIdentifier.(*SetCustomPresetAsDefaultRequest_Id); ok {
			return x.Id
		}
	}
	return ""
}

func (x *SetCustomPresetAsDefaultRequest) GetUserFacingId() string {
	if x != nil {
		if x, ok := x.DeprecatedIdentifier.(*SetCustomPresetAsDefaultRequest_UserFacingId); ok {
			return x.UserFacingId
		}
	}
	return ""
}

func (x *SetCustomPresetAsDefaultRequest) GetIdentifier() *PresetIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

type isSetCustomPresetAsDefaultRequest_DeprecatedIdentifier interface {
	isSetCustomPresetAsDefaultRequest_DeprecatedIdentifier()
}

type SetCustomPresetAsDefaultRequest_Id struct {
	Id string `protobuf:"bytes,101,opt,name=id,proto3,oneof"`
}

type SetCustomPresetAsDefaultRequest_UserFacingId struct {
	UserFacingId string `protobuf:"bytes,102,opt,name=user_facing_id,json=userFacingId,proto3,oneof"`
}

func (*SetCustomPresetAsDefaultRequest_Id) isSetCustomPresetAsDefaultRequest_DeprecatedIdentifier() {}

func (*SetCustomPresetAsDefaultRequest_UserFacingId) isSetCustomPresetAsDefaultRequest_DeprecatedIdentifier() {
}

type SetCustomPresetAsDefaultResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetCustomPresetAsDefaultResponse) Reset() {
	*x = SetCustomPresetAsDefaultResponse{}
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCustomPresetAsDefaultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCustomPresetAsDefaultResponse) ProtoMessage() {}

func (x *SetCustomPresetAsDefaultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCustomPresetAsDefaultResponse.ProtoReflect.Descriptor instead.
func (*SetCustomPresetAsDefaultResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescGZIP(), []int{7}
}

type SetPresetAsDefaultRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    *PresetIdentifier      `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetPresetAsDefaultRequest) Reset() {
	*x = SetPresetAsDefaultRequest{}
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPresetAsDefaultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPresetAsDefaultRequest) ProtoMessage() {}

func (x *SetPresetAsDefaultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPresetAsDefaultRequest.ProtoReflect.Descriptor instead.
func (*SetPresetAsDefaultRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescGZIP(), []int{8}
}

func (x *SetPresetAsDefaultRequest) GetIdentifier() *PresetIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

type SetPresetAsDefaultResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetPresetAsDefaultResponse) Reset() {
	*x = SetPresetAsDefaultResponse{}
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPresetAsDefaultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPresetAsDefaultResponse) ProtoMessage() {}

func (x *SetPresetAsDefaultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPresetAsDefaultResponse.ProtoReflect.Descriptor instead.
func (*SetPresetAsDefaultResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescGZIP(), []int{9}
}

type GetPresetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to DeprecatedIdentifier:
	//
	//	*GetPresetRequest_Id
	//	*GetPresetRequest_UserFacingId
	DeprecatedIdentifier isGetPresetRequest_DeprecatedIdentifier `protobuf_oneof:"deprecated_identifier"`
	Identifier           *PresetIdentifier                       `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetPresetRequest) Reset() {
	*x = GetPresetRequest{}
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPresetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPresetRequest) ProtoMessage() {}

func (x *GetPresetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPresetRequest.ProtoReflect.Descriptor instead.
func (*GetPresetRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetPresetRequest) GetDeprecatedIdentifier() isGetPresetRequest_DeprecatedIdentifier {
	if x != nil {
		return x.DeprecatedIdentifier
	}
	return nil
}

func (x *GetPresetRequest) GetId() string {
	if x != nil {
		if x, ok := x.DeprecatedIdentifier.(*GetPresetRequest_Id); ok {
			return x.Id
		}
	}
	return ""
}

func (x *GetPresetRequest) GetUserFacingId() string {
	if x != nil {
		if x, ok := x.DeprecatedIdentifier.(*GetPresetRequest_UserFacingId); ok {
			return x.UserFacingId
		}
	}
	return ""
}

func (x *GetPresetRequest) GetIdentifier() *PresetIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

type isGetPresetRequest_DeprecatedIdentifier interface {
	isGetPresetRequest_DeprecatedIdentifier()
}

type GetPresetRequest_Id struct {
	Id string `protobuf:"bytes,101,opt,name=id,proto3,oneof"`
}

type GetPresetRequest_UserFacingId struct {
	UserFacingId string `protobuf:"bytes,102,opt,name=user_facing_id,json=userFacingId,proto3,oneof"`
}

func (*GetPresetRequest_Id) isGetPresetRequest_DeprecatedIdentifier() {}

func (*GetPresetRequest_UserFacingId) isGetPresetRequest_DeprecatedIdentifier() {}

type GetPresetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Preset        *Preset                `protobuf:"bytes,1,opt,name=preset,proto3" json:"preset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPresetResponse) Reset() {
	*x = GetPresetResponse{}
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPresetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPresetResponse) ProtoMessage() {}

func (x *GetPresetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPresetResponse.ProtoReflect.Descriptor instead.
func (*GetPresetResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetPresetResponse) GetPreset() *Preset {
	if x != nil {
		return x.Preset
	}
	return nil
}

type ListPresetSummariesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectorType common.ConnectorType   `protobuf:"varint,1,opt,name=connector_type,json=connectorType,proto3,enum=com.coralogixapis.notification_center.ConnectorType" json:"connector_type,omitempty"`
	EntityType    string                 `protobuf:"bytes,2,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	OrderBys      []*common.OrderBy      `protobuf:"bytes,3,rep,name=order_bys,json=orderBys,proto3" json:"order_bys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPresetSummariesRequest) Reset() {
	*x = ListPresetSummariesRequest{}
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPresetSummariesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPresetSummariesRequest) ProtoMessage() {}

func (x *ListPresetSummariesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPresetSummariesRequest.ProtoReflect.Descriptor instead.
func (*ListPresetSummariesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListPresetSummariesRequest) GetConnectorType() common.ConnectorType {
	if x != nil {
		return x.ConnectorType
	}
	return common.ConnectorType(0)
}

func (x *ListPresetSummariesRequest) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *ListPresetSummariesRequest) GetOrderBys() []*common.OrderBy {
	if x != nil {
		return x.OrderBys
	}
	return nil
}

type ListPresetSummariesResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PresetSummaries []*PresetSummary       `protobuf:"bytes,1,rep,name=preset_summaries,json=presetSummaries,proto3" json:"preset_summaries,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListPresetSummariesResponse) Reset() {
	*x = ListPresetSummariesResponse{}
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPresetSummariesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPresetSummariesResponse) ProtoMessage() {}

func (x *ListPresetSummariesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPresetSummariesResponse.ProtoReflect.Descriptor instead.
func (*ListPresetSummariesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListPresetSummariesResponse) GetPresetSummaries() []*PresetSummary {
	if x != nil {
		return x.PresetSummaries
	}
	return nil
}

type BatchGetPresetsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []string               `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetPresetsRequest) Reset() {
	*x = BatchGetPresetsRequest{}
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetPresetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetPresetsRequest) ProtoMessage() {}

func (x *BatchGetPresetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetPresetsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetPresetsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescGZIP(), []int{14}
}

func (x *BatchGetPresetsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type BatchGetPresetsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Presets       map[string]*Preset     `protobuf:"bytes,1,rep,name=presets,proto3" json:"presets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NotFoundIds   []string               `protobuf:"bytes,2,rep,name=not_found_ids,json=notFoundIds,proto3" json:"not_found_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetPresetsResponse) Reset() {
	*x = BatchGetPresetsResponse{}
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetPresetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetPresetsResponse) ProtoMessage() {}

func (x *BatchGetPresetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetPresetsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetPresetsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescGZIP(), []int{15}
}

func (x *BatchGetPresetsResponse) GetPresets() map[string]*Preset {
	if x != nil {
		return x.Presets
	}
	return nil
}

func (x *BatchGetPresetsResponse) GetNotFoundIds() []string {
	if x != nil {
		return x.NotFoundIds
	}
	return nil
}

type GetDefaultPresetSummaryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectorType common.ConnectorType   `protobuf:"varint,1,opt,name=connector_type,json=connectorType,proto3,enum=com.coralogixapis.notification_center.ConnectorType" json:"connector_type,omitempty"`
	EntityType    string                 `protobuf:"bytes,2,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDefaultPresetSummaryRequest) Reset() {
	*x = GetDefaultPresetSummaryRequest{}
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDefaultPresetSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultPresetSummaryRequest) ProtoMessage() {}

func (x *GetDefaultPresetSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultPresetSummaryRequest.ProtoReflect.Descriptor instead.
func (*GetDefaultPresetSummaryRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescGZIP(), []int{16}
}

func (x *GetDefaultPresetSummaryRequest) GetConnectorType() common.ConnectorType {
	if x != nil {
		return x.ConnectorType
	}
	return common.ConnectorType(0)
}

func (x *GetDefaultPresetSummaryRequest) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

type GetDefaultPresetSummaryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PresetSummary *PresetSummary         `protobuf:"bytes,1,opt,name=preset_summary,json=presetSummary,proto3" json:"preset_summary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDefaultPresetSummaryResponse) Reset() {
	*x = GetDefaultPresetSummaryResponse{}
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDefaultPresetSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultPresetSummaryResponse) ProtoMessage() {}

func (x *GetDefaultPresetSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultPresetSummaryResponse.ProtoReflect.Descriptor instead.
func (*GetDefaultPresetSummaryResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescGZIP(), []int{17}
}

func (x *GetDefaultPresetSummaryResponse) GetPresetSummary() *PresetSummary {
	if x != nil {
		return x.PresetSummary
	}
	return nil
}

type GetSystemDefaultPresetSummaryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectorType common.ConnectorType   `protobuf:"varint,1,opt,name=connector_type,json=connectorType,proto3,enum=com.coralogixapis.notification_center.ConnectorType" json:"connector_type,omitempty"`
	EntityType    string                 `protobuf:"bytes,2,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSystemDefaultPresetSummaryRequest) Reset() {
	*x = GetSystemDefaultPresetSummaryRequest{}
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSystemDefaultPresetSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemDefaultPresetSummaryRequest) ProtoMessage() {}

func (x *GetSystemDefaultPresetSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemDefaultPresetSummaryRequest.ProtoReflect.Descriptor instead.
func (*GetSystemDefaultPresetSummaryRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetSystemDefaultPresetSummaryRequest) GetConnectorType() common.ConnectorType {
	if x != nil {
		return x.ConnectorType
	}
	return common.ConnectorType(0)
}

func (x *GetSystemDefaultPresetSummaryRequest) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

type GetSystemDefaultPresetSummaryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PresetSummary *PresetSummary         `protobuf:"bytes,1,opt,name=preset_summary,json=presetSummary,proto3" json:"preset_summary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSystemDefaultPresetSummaryResponse) Reset() {
	*x = GetSystemDefaultPresetSummaryResponse{}
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSystemDefaultPresetSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemDefaultPresetSummaryResponse) ProtoMessage() {}

func (x *GetSystemDefaultPresetSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemDefaultPresetSummaryResponse.ProtoReflect.Descriptor instead.
func (*GetSystemDefaultPresetSummaryResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescGZIP(), []int{19}
}

func (x *GetSystemDefaultPresetSummaryResponse) GetPresetSummary() *PresetSummary {
	if x != nil {
		return x.PresetSummary
	}
	return nil
}

var File_com_coralogixapis_notification_center_presets_v1_presets_service_proto protoreflect.FileDescriptor

var file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDesc = []byte{
	0x0a, 0x46, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x30, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x39, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb8, 0x02, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x50, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x06, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x3a, 0xc8, 0x01, 0x92, 0x41, 0xc4, 0x01, 0x0a, 0x45, 0x2a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x20, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x25, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6e,
	0x65, 0x77, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x2a, 0x7b, 0x0a, 0x27, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72,
	0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x50, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69,
	0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x2f, 0x22, 0xc2, 0x02,
	0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x3a, 0xd1,
	0x01, 0x92, 0x41, 0xcd, 0x01, 0x0a, 0x4e, 0x2a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x2d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x2a, 0x7b, 0x0a, 0x27, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75,
	0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x50, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d,
	0x65, 0x2f, 0x22, 0xc1, 0x02, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x50, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x3a, 0xd0, 0x01, 0x92, 0x41, 0xcc, 0x01, 0x0a, 0x4d, 0x2a, 0x1d, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x2c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20,
	0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x2a, 0x7b, 0x0a, 0x27, 0x46, 0x69, 0x6e,
	0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x50, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x77, 0x65,
	0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x2f, 0x22, 0xc4, 0x02, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x3a, 0xd2, 0x01, 0x92, 0x41, 0xce, 0x01, 0x0a,
	0x4f, 0x2a, 0x1e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x20, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x2d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x2a, 0x7b, 0x0a, 0x27, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72,
	0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x50, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69,
	0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x2f, 0x22, 0x9f, 0x03,
	0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x3a, 0xc4, 0x01, 0x92, 0x41, 0xc0, 0x01,
	0x0a, 0x41, 0x2a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x20, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x21, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x2a, 0x7b, 0x0a, 0x27, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20,
	0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x50,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d,
	0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x2f,
	0x42, 0x17, 0x0a, 0x15, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22,
	0x1c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xde, 0x01,
	0x0a, 0x1f, 0x53, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x41, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42,
	0x17, 0x0a, 0x15, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x22,
	0x0a, 0x20, 0x53, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x41, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xd7, 0x02, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x41, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x62, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x3a, 0xd5, 0x01, 0x92, 0x41, 0xd1, 0x01, 0x0a, 0x52, 0x2a, 0x1d, 0x53,
	0x65, 0x74, 0x20, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x41, 0x73, 0x20, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x31, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x74, 0x20, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x20, 0x61, 0x73, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2a,
	0x7b, 0x0a, 0x27, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65,
	0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x50, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64,
	0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x2f, 0x22, 0x1c, 0x0a, 0x1a,
	0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x46, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x17, 0x0a,
	0x15, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x65, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x50, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5b, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x22, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x73, 0x22, 0x89, 0x01, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x10,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x16, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x3a, 0xcc, 0x01, 0x92, 0x41, 0xc8, 0x01, 0x0a, 0x49, 0x2a, 0x19,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x20, 0x47, 0x65, 0x74, 0x20, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x73, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x2c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68,
	0x65, 0x69, 0x72, 0x20, 0x69, 0x64, 0x73, 0x2a, 0x7b, 0x0a, 0x27, 0x46, 0x69, 0x6e, 0x64, 0x20,
	0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x50, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x77, 0x65, 0x6c, 0x63,
	0x6f, 0x6d, 0x65, 0x2f, 0x22, 0x88, 0x04, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x70, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x56, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x64, 0x73, 0x1a, 0x74, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0xe0, 0x01, 0x92,
	0x41, 0xdc, 0x01, 0x0a, 0x5d, 0x2a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x20, 0x47, 0x65, 0x74,
	0x20, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x3f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x61, 0x6e, 0x79, 0x20, 0x49, 0x44, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x2a, 0x7b, 0x0a, 0x27, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d,
	0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x50, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67,
	0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x2f, 0x22,
	0xad, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5b, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x22, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x89, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xc3, 0x03, 0x0a, 0x24,
	0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x8d, 0x02, 0x92, 0x41, 0x89, 0x02, 0x0a, 0x89, 0x01, 0x2a, 0x29, 0x47, 0x65, 0x74,
	0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x5c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x20, 0x28, 0x69, 0x2e, 0x65, 0x2e, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x29, 0x2a, 0x7b, 0x0a, 0x27, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74,
	0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x50, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65,
	0x2f, 0x22, 0x8f, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x32, 0xb8, 0x13, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xe7, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x4b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30,
	0x3a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x12, 0xea, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x06, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0xfb, 0x01,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x12, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x2a, 0x42, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2f,
	0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x9b, 0x02, 0x0a, 0x18,
	0x53, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x51, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x52, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x73,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x22, 0x4d, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2f,
	0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x88, 0x02, 0x01, 0x12, 0xff, 0x01, 0x0a, 0x12, 0x53, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x73, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x48, 0x22, 0x46, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x7d,
	0x3a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x12, 0xd9, 0x01, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x76, 0x31, 0x2f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xe9, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x73, 0x3a, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0xd8, 0x01, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x12, 0xf9,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x50, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x51, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x3a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x47, 0x65, 0x74, 0x12, 0x91, 0x02, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x56, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x57, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x3a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x47, 0x65, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescOnce sync.Once
	file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescData = file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDesc
)

func file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescData)
	})
	return file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDescData
}

var file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_goTypes = []any{
	(*CreateCustomPresetRequest)(nil),             // 0: com.coralogixapis.notification_center.presets.v1.CreateCustomPresetRequest
	(*CreateCustomPresetResponse)(nil),            // 1: com.coralogixapis.notification_center.presets.v1.CreateCustomPresetResponse
	(*ReplaceCustomPresetRequest)(nil),            // 2: com.coralogixapis.notification_center.presets.v1.ReplaceCustomPresetRequest
	(*ReplaceCustomPresetResponse)(nil),           // 3: com.coralogixapis.notification_center.presets.v1.ReplaceCustomPresetResponse
	(*DeleteCustomPresetRequest)(nil),             // 4: com.coralogixapis.notification_center.presets.v1.DeleteCustomPresetRequest
	(*DeleteCustomPresetResponse)(nil),            // 5: com.coralogixapis.notification_center.presets.v1.DeleteCustomPresetResponse
	(*SetCustomPresetAsDefaultRequest)(nil),       // 6: com.coralogixapis.notification_center.presets.v1.SetCustomPresetAsDefaultRequest
	(*SetCustomPresetAsDefaultResponse)(nil),      // 7: com.coralogixapis.notification_center.presets.v1.SetCustomPresetAsDefaultResponse
	(*SetPresetAsDefaultRequest)(nil),             // 8: com.coralogixapis.notification_center.presets.v1.SetPresetAsDefaultRequest
	(*SetPresetAsDefaultResponse)(nil),            // 9: com.coralogixapis.notification_center.presets.v1.SetPresetAsDefaultResponse
	(*GetPresetRequest)(nil),                      // 10: com.coralogixapis.notification_center.presets.v1.GetPresetRequest
	(*GetPresetResponse)(nil),                     // 11: com.coralogixapis.notification_center.presets.v1.GetPresetResponse
	(*ListPresetSummariesRequest)(nil),            // 12: com.coralogixapis.notification_center.presets.v1.ListPresetSummariesRequest
	(*ListPresetSummariesResponse)(nil),           // 13: com.coralogixapis.notification_center.presets.v1.ListPresetSummariesResponse
	(*BatchGetPresetsRequest)(nil),                // 14: com.coralogixapis.notification_center.presets.v1.BatchGetPresetsRequest
	(*BatchGetPresetsResponse)(nil),               // 15: com.coralogixapis.notification_center.presets.v1.BatchGetPresetsResponse
	(*GetDefaultPresetSummaryRequest)(nil),        // 16: com.coralogixapis.notification_center.presets.v1.GetDefaultPresetSummaryRequest
	(*GetDefaultPresetSummaryResponse)(nil),       // 17: com.coralogixapis.notification_center.presets.v1.GetDefaultPresetSummaryResponse
	(*GetSystemDefaultPresetSummaryRequest)(nil),  // 18: com.coralogixapis.notification_center.presets.v1.GetSystemDefaultPresetSummaryRequest
	(*GetSystemDefaultPresetSummaryResponse)(nil), // 19: com.coralogixapis.notification_center.presets.v1.GetSystemDefaultPresetSummaryResponse
	nil,                       // 20: com.coralogixapis.notification_center.presets.v1.BatchGetPresetsResponse.PresetsEntry
	(*Preset)(nil),            // 21: com.coralogixapis.notification_center.presets.v1.Preset
	(*PresetIdentifier)(nil),  // 22: com.coralogixapis.notification_center.presets.v1.PresetIdentifier
	(common.ConnectorType)(0), // 23: com.coralogixapis.notification_center.ConnectorType
	(*common.OrderBy)(nil),    // 24: com.coralogixapis.notification_center.OrderBy
	(*PresetSummary)(nil),     // 25: com.coralogixapis.notification_center.presets.v1.PresetSummary
}
var file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_depIdxs = []int32{
	21, // 0: com.coralogixapis.notification_center.presets.v1.CreateCustomPresetRequest.preset:type_name -> com.coralogixapis.notification_center.presets.v1.Preset
	21, // 1: com.coralogixapis.notification_center.presets.v1.CreateCustomPresetResponse.preset:type_name -> com.coralogixapis.notification_center.presets.v1.Preset
	21, // 2: com.coralogixapis.notification_center.presets.v1.ReplaceCustomPresetRequest.preset:type_name -> com.coralogixapis.notification_center.presets.v1.Preset
	21, // 3: com.coralogixapis.notification_center.presets.v1.ReplaceCustomPresetResponse.preset:type_name -> com.coralogixapis.notification_center.presets.v1.Preset
	22, // 4: com.coralogixapis.notification_center.presets.v1.DeleteCustomPresetRequest.identifier:type_name -> com.coralogixapis.notification_center.presets.v1.PresetIdentifier
	22, // 5: com.coralogixapis.notification_center.presets.v1.SetCustomPresetAsDefaultRequest.identifier:type_name -> com.coralogixapis.notification_center.presets.v1.PresetIdentifier
	22, // 6: com.coralogixapis.notification_center.presets.v1.SetPresetAsDefaultRequest.identifier:type_name -> com.coralogixapis.notification_center.presets.v1.PresetIdentifier
	22, // 7: com.coralogixapis.notification_center.presets.v1.GetPresetRequest.identifier:type_name -> com.coralogixapis.notification_center.presets.v1.PresetIdentifier
	21, // 8: com.coralogixapis.notification_center.presets.v1.GetPresetResponse.preset:type_name -> com.coralogixapis.notification_center.presets.v1.Preset
	23, // 9: com.coralogixapis.notification_center.presets.v1.ListPresetSummariesRequest.connector_type:type_name -> com.coralogixapis.notification_center.ConnectorType
	24, // 10: com.coralogixapis.notification_center.presets.v1.ListPresetSummariesRequest.order_bys:type_name -> com.coralogixapis.notification_center.OrderBy
	25, // 11: com.coralogixapis.notification_center.presets.v1.ListPresetSummariesResponse.preset_summaries:type_name -> com.coralogixapis.notification_center.presets.v1.PresetSummary
	20, // 12: com.coralogixapis.notification_center.presets.v1.BatchGetPresetsResponse.presets:type_name -> com.coralogixapis.notification_center.presets.v1.BatchGetPresetsResponse.PresetsEntry
	23, // 13: com.coralogixapis.notification_center.presets.v1.GetDefaultPresetSummaryRequest.connector_type:type_name -> com.coralogixapis.notification_center.ConnectorType
	25, // 14: com.coralogixapis.notification_center.presets.v1.GetDefaultPresetSummaryResponse.preset_summary:type_name -> com.coralogixapis.notification_center.presets.v1.PresetSummary
	23, // 15: com.coralogixapis.notification_center.presets.v1.GetSystemDefaultPresetSummaryRequest.connector_type:type_name -> com.coralogixapis.notification_center.ConnectorType
	25, // 16: com.coralogixapis.notification_center.presets.v1.GetSystemDefaultPresetSummaryResponse.preset_summary:type_name -> com.coralogixapis.notification_center.presets.v1.PresetSummary
	21, // 17: com.coralogixapis.notification_center.presets.v1.BatchGetPresetsResponse.PresetsEntry.value:type_name -> com.coralogixapis.notification_center.presets.v1.Preset
	0,  // 18: com.coralogixapis.notification_center.presets.v1.PresetsService.CreateCustomPreset:input_type -> com.coralogixapis.notification_center.presets.v1.CreateCustomPresetRequest
	2,  // 19: com.coralogixapis.notification_center.presets.v1.PresetsService.ReplaceCustomPreset:input_type -> com.coralogixapis.notification_center.presets.v1.ReplaceCustomPresetRequest
	4,  // 20: com.coralogixapis.notification_center.presets.v1.PresetsService.DeleteCustomPreset:input_type -> com.coralogixapis.notification_center.presets.v1.DeleteCustomPresetRequest
	6,  // 21: com.coralogixapis.notification_center.presets.v1.PresetsService.SetCustomPresetAsDefault:input_type -> com.coralogixapis.notification_center.presets.v1.SetCustomPresetAsDefaultRequest
	8,  // 22: com.coralogixapis.notification_center.presets.v1.PresetsService.SetPresetAsDefault:input_type -> com.coralogixapis.notification_center.presets.v1.SetPresetAsDefaultRequest
	10, // 23: com.coralogixapis.notification_center.presets.v1.PresetsService.GetPreset:input_type -> com.coralogixapis.notification_center.presets.v1.GetPresetRequest
	12, // 24: com.coralogixapis.notification_center.presets.v1.PresetsService.ListPresetSummaries:input_type -> com.coralogixapis.notification_center.presets.v1.ListPresetSummariesRequest
	14, // 25: com.coralogixapis.notification_center.presets.v1.PresetsService.BatchGetPresets:input_type -> com.coralogixapis.notification_center.presets.v1.BatchGetPresetsRequest
	16, // 26: com.coralogixapis.notification_center.presets.v1.PresetsService.GetDefaultPresetSummary:input_type -> com.coralogixapis.notification_center.presets.v1.GetDefaultPresetSummaryRequest
	18, // 27: com.coralogixapis.notification_center.presets.v1.PresetsService.GetSystemDefaultPresetSummary:input_type -> com.coralogixapis.notification_center.presets.v1.GetSystemDefaultPresetSummaryRequest
	1,  // 28: com.coralogixapis.notification_center.presets.v1.PresetsService.CreateCustomPreset:output_type -> com.coralogixapis.notification_center.presets.v1.CreateCustomPresetResponse
	3,  // 29: com.coralogixapis.notification_center.presets.v1.PresetsService.ReplaceCustomPreset:output_type -> com.coralogixapis.notification_center.presets.v1.ReplaceCustomPresetResponse
	5,  // 30: com.coralogixapis.notification_center.presets.v1.PresetsService.DeleteCustomPreset:output_type -> com.coralogixapis.notification_center.presets.v1.DeleteCustomPresetResponse
	7,  // 31: com.coralogixapis.notification_center.presets.v1.PresetsService.SetCustomPresetAsDefault:output_type -> com.coralogixapis.notification_center.presets.v1.SetCustomPresetAsDefaultResponse
	9,  // 32: com.coralogixapis.notification_center.presets.v1.PresetsService.SetPresetAsDefault:output_type -> com.coralogixapis.notification_center.presets.v1.SetPresetAsDefaultResponse
	11, // 33: com.coralogixapis.notification_center.presets.v1.PresetsService.GetPreset:output_type -> com.coralogixapis.notification_center.presets.v1.GetPresetResponse
	13, // 34: com.coralogixapis.notification_center.presets.v1.PresetsService.ListPresetSummaries:output_type -> com.coralogixapis.notification_center.presets.v1.ListPresetSummariesResponse
	15, // 35: com.coralogixapis.notification_center.presets.v1.PresetsService.BatchGetPresets:output_type -> com.coralogixapis.notification_center.presets.v1.BatchGetPresetsResponse
	17, // 36: com.coralogixapis.notification_center.presets.v1.PresetsService.GetDefaultPresetSummary:output_type -> com.coralogixapis.notification_center.presets.v1.GetDefaultPresetSummaryResponse
	19, // 37: com.coralogixapis.notification_center.presets.v1.PresetsService.GetSystemDefaultPresetSummary:output_type -> com.coralogixapis.notification_center.presets.v1.GetSystemDefaultPresetSummaryResponse
	28, // [28:38] is the sub-list for method output_type
	18, // [18:28] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_init() }
func file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_init() {
	if File_com_coralogixapis_notification_center_presets_v1_presets_service_proto != nil {
		return
	}
	file_com_coralogixapis_notification_center_presets_v1_preset_proto_init()
	file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[4].OneofWrappers = []any{
		(*DeleteCustomPresetRequest_Id)(nil),
		(*DeleteCustomPresetRequest_UserFacingId)(nil),
	}
	file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[6].OneofWrappers = []any{
		(*SetCustomPresetAsDefaultRequest_Id)(nil),
		(*SetCustomPresetAsDefaultRequest_UserFacingId)(nil),
	}
	file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes[10].OneofWrappers = []any{
		(*GetPresetRequest_Id)(nil),
		(*GetPresetRequest_UserFacingId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_notification_center_presets_v1_presets_service_proto = out.File
	file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_rawDesc = nil
	file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_goTypes = nil
	file_com_coralogixapis_notification_center_presets_v1_presets_service_proto_depIdxs = nil
}
