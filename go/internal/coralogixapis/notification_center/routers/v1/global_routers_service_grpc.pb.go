// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: com/coralogixapis/notification_center/routers/v1/global_routers_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GlobalRoutersService_CreateGlobalRouter_FullMethodName          = "/com.coralogixapis.notification_center.routers.v1.GlobalRoutersService/CreateGlobalRouter"
	GlobalRoutersService_ReplaceGlobalRouter_FullMethodName         = "/com.coralogixapis.notification_center.routers.v1.GlobalRoutersService/ReplaceGlobalRouter"
	GlobalRoutersService_CreateOrReplaceGlobalRouter_FullMethodName = "/com.coralogixapis.notification_center.routers.v1.GlobalRoutersService/CreateOrReplaceGlobalRouter"
	GlobalRoutersService_DeleteGlobalRouter_FullMethodName          = "/com.coralogixapis.notification_center.routers.v1.GlobalRoutersService/DeleteGlobalRouter"
	GlobalRoutersService_GetGlobalRouter_FullMethodName             = "/com.coralogixapis.notification_center.routers.v1.GlobalRoutersService/GetGlobalRouter"
	GlobalRoutersService_ListGlobalRouters_FullMethodName           = "/com.coralogixapis.notification_center.routers.v1.GlobalRoutersService/ListGlobalRouters"
	GlobalRoutersService_BatchGetGlobalRouters_FullMethodName       = "/com.coralogixapis.notification_center.routers.v1.GlobalRoutersService/BatchGetGlobalRouters"
)

// GlobalRoutersServiceClient is the client API for GlobalRoutersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Public API that allows managing global routers
type GlobalRoutersServiceClient interface {
	CreateGlobalRouter(ctx context.Context, in *CreateGlobalRouterRequest, opts ...grpc.CallOption) (*CreateGlobalRouterResponse, error)
	ReplaceGlobalRouter(ctx context.Context, in *ReplaceGlobalRouterRequest, opts ...grpc.CallOption) (*ReplaceGlobalRouterResponse, error)
	CreateOrReplaceGlobalRouter(ctx context.Context, in *CreateOrReplaceGlobalRouterRequest, opts ...grpc.CallOption) (*CreateOrReplaceGlobalRouterResponse, error)
	DeleteGlobalRouter(ctx context.Context, in *DeleteGlobalRouterRequest, opts ...grpc.CallOption) (*DeleteGlobalRouterResponse, error)
	GetGlobalRouter(ctx context.Context, in *GetGlobalRouterRequest, opts ...grpc.CallOption) (*GetGlobalRouterResponse, error)
	ListGlobalRouters(ctx context.Context, in *ListGlobalRoutersRequest, opts ...grpc.CallOption) (*ListGlobalRoutersResponse, error)
	BatchGetGlobalRouters(ctx context.Context, in *BatchGetGlobalRoutersRequest, opts ...grpc.CallOption) (*BatchGetGlobalRoutersResponse, error)
}

type globalRoutersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGlobalRoutersServiceClient(cc grpc.ClientConnInterface) GlobalRoutersServiceClient {
	return &globalRoutersServiceClient{cc}
}

func (c *globalRoutersServiceClient) CreateGlobalRouter(ctx context.Context, in *CreateGlobalRouterRequest, opts ...grpc.CallOption) (*CreateGlobalRouterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGlobalRouterResponse)
	err := c.cc.Invoke(ctx, GlobalRoutersService_CreateGlobalRouter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalRoutersServiceClient) ReplaceGlobalRouter(ctx context.Context, in *ReplaceGlobalRouterRequest, opts ...grpc.CallOption) (*ReplaceGlobalRouterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceGlobalRouterResponse)
	err := c.cc.Invoke(ctx, GlobalRoutersService_ReplaceGlobalRouter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalRoutersServiceClient) CreateOrReplaceGlobalRouter(ctx context.Context, in *CreateOrReplaceGlobalRouterRequest, opts ...grpc.CallOption) (*CreateOrReplaceGlobalRouterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrReplaceGlobalRouterResponse)
	err := c.cc.Invoke(ctx, GlobalRoutersService_CreateOrReplaceGlobalRouter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalRoutersServiceClient) DeleteGlobalRouter(ctx context.Context, in *DeleteGlobalRouterRequest, opts ...grpc.CallOption) (*DeleteGlobalRouterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGlobalRouterResponse)
	err := c.cc.Invoke(ctx, GlobalRoutersService_DeleteGlobalRouter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalRoutersServiceClient) GetGlobalRouter(ctx context.Context, in *GetGlobalRouterRequest, opts ...grpc.CallOption) (*GetGlobalRouterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGlobalRouterResponse)
	err := c.cc.Invoke(ctx, GlobalRoutersService_GetGlobalRouter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalRoutersServiceClient) ListGlobalRouters(ctx context.Context, in *ListGlobalRoutersRequest, opts ...grpc.CallOption) (*ListGlobalRoutersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGlobalRoutersResponse)
	err := c.cc.Invoke(ctx, GlobalRoutersService_ListGlobalRouters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalRoutersServiceClient) BatchGetGlobalRouters(ctx context.Context, in *BatchGetGlobalRoutersRequest, opts ...grpc.CallOption) (*BatchGetGlobalRoutersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetGlobalRoutersResponse)
	err := c.cc.Invoke(ctx, GlobalRoutersService_BatchGetGlobalRouters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GlobalRoutersServiceServer is the server API for GlobalRoutersService service.
// All implementations must embed UnimplementedGlobalRoutersServiceServer
// for forward compatibility.
//
// Public API that allows managing global routers
type GlobalRoutersServiceServer interface {
	CreateGlobalRouter(context.Context, *CreateGlobalRouterRequest) (*CreateGlobalRouterResponse, error)
	ReplaceGlobalRouter(context.Context, *ReplaceGlobalRouterRequest) (*ReplaceGlobalRouterResponse, error)
	CreateOrReplaceGlobalRouter(context.Context, *CreateOrReplaceGlobalRouterRequest) (*CreateOrReplaceGlobalRouterResponse, error)
	DeleteGlobalRouter(context.Context, *DeleteGlobalRouterRequest) (*DeleteGlobalRouterResponse, error)
	GetGlobalRouter(context.Context, *GetGlobalRouterRequest) (*GetGlobalRouterResponse, error)
	ListGlobalRouters(context.Context, *ListGlobalRoutersRequest) (*ListGlobalRoutersResponse, error)
	BatchGetGlobalRouters(context.Context, *BatchGetGlobalRoutersRequest) (*BatchGetGlobalRoutersResponse, error)
	mustEmbedUnimplementedGlobalRoutersServiceServer()
}

// UnimplementedGlobalRoutersServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGlobalRoutersServiceServer struct{}

func (UnimplementedGlobalRoutersServiceServer) CreateGlobalRouter(context.Context, *CreateGlobalRouterRequest) (*CreateGlobalRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGlobalRouter not implemented")
}
func (UnimplementedGlobalRoutersServiceServer) ReplaceGlobalRouter(context.Context, *ReplaceGlobalRouterRequest) (*ReplaceGlobalRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceGlobalRouter not implemented")
}
func (UnimplementedGlobalRoutersServiceServer) CreateOrReplaceGlobalRouter(context.Context, *CreateOrReplaceGlobalRouterRequest) (*CreateOrReplaceGlobalRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrReplaceGlobalRouter not implemented")
}
func (UnimplementedGlobalRoutersServiceServer) DeleteGlobalRouter(context.Context, *DeleteGlobalRouterRequest) (*DeleteGlobalRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGlobalRouter not implemented")
}
func (UnimplementedGlobalRoutersServiceServer) GetGlobalRouter(context.Context, *GetGlobalRouterRequest) (*GetGlobalRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalRouter not implemented")
}
func (UnimplementedGlobalRoutersServiceServer) ListGlobalRouters(context.Context, *ListGlobalRoutersRequest) (*ListGlobalRoutersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGlobalRouters not implemented")
}
func (UnimplementedGlobalRoutersServiceServer) BatchGetGlobalRouters(context.Context, *BatchGetGlobalRoutersRequest) (*BatchGetGlobalRoutersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetGlobalRouters not implemented")
}
func (UnimplementedGlobalRoutersServiceServer) mustEmbedUnimplementedGlobalRoutersServiceServer() {}
func (UnimplementedGlobalRoutersServiceServer) testEmbeddedByValue()                              {}

// UnsafeGlobalRoutersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlobalRoutersServiceServer will
// result in compilation errors.
type UnsafeGlobalRoutersServiceServer interface {
	mustEmbedUnimplementedGlobalRoutersServiceServer()
}

func RegisterGlobalRoutersServiceServer(s grpc.ServiceRegistrar, srv GlobalRoutersServiceServer) {
	// If the following call pancis, it indicates UnimplementedGlobalRoutersServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GlobalRoutersService_ServiceDesc, srv)
}

func _GlobalRoutersService_CreateGlobalRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGlobalRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalRoutersServiceServer).CreateGlobalRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalRoutersService_CreateGlobalRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalRoutersServiceServer).CreateGlobalRouter(ctx, req.(*CreateGlobalRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalRoutersService_ReplaceGlobalRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceGlobalRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalRoutersServiceServer).ReplaceGlobalRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalRoutersService_ReplaceGlobalRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalRoutersServiceServer).ReplaceGlobalRouter(ctx, req.(*ReplaceGlobalRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalRoutersService_CreateOrReplaceGlobalRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrReplaceGlobalRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalRoutersServiceServer).CreateOrReplaceGlobalRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalRoutersService_CreateOrReplaceGlobalRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalRoutersServiceServer).CreateOrReplaceGlobalRouter(ctx, req.(*CreateOrReplaceGlobalRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalRoutersService_DeleteGlobalRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGlobalRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalRoutersServiceServer).DeleteGlobalRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalRoutersService_DeleteGlobalRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalRoutersServiceServer).DeleteGlobalRouter(ctx, req.(*DeleteGlobalRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalRoutersService_GetGlobalRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGlobalRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalRoutersServiceServer).GetGlobalRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalRoutersService_GetGlobalRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalRoutersServiceServer).GetGlobalRouter(ctx, req.(*GetGlobalRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalRoutersService_ListGlobalRouters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGlobalRoutersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalRoutersServiceServer).ListGlobalRouters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalRoutersService_ListGlobalRouters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalRoutersServiceServer).ListGlobalRouters(ctx, req.(*ListGlobalRoutersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalRoutersService_BatchGetGlobalRouters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetGlobalRoutersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalRoutersServiceServer).BatchGetGlobalRouters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalRoutersService_BatchGetGlobalRouters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalRoutersServiceServer).BatchGetGlobalRouters(ctx, req.(*BatchGetGlobalRoutersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GlobalRoutersService_ServiceDesc is the grpc.ServiceDesc for GlobalRoutersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GlobalRoutersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogixapis.notification_center.routers.v1.GlobalRoutersService",
	HandlerType: (*GlobalRoutersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGlobalRouter",
			Handler:    _GlobalRoutersService_CreateGlobalRouter_Handler,
		},
		{
			MethodName: "ReplaceGlobalRouter",
			Handler:    _GlobalRoutersService_ReplaceGlobalRouter_Handler,
		},
		{
			MethodName: "CreateOrReplaceGlobalRouter",
			Handler:    _GlobalRoutersService_CreateOrReplaceGlobalRouter_Handler,
		},
		{
			MethodName: "DeleteGlobalRouter",
			Handler:    _GlobalRoutersService_DeleteGlobalRouter_Handler,
		},
		{
			MethodName: "GetGlobalRouter",
			Handler:    _GlobalRoutersService_GetGlobalRouter_Handler,
		},
		{
			MethodName: "ListGlobalRouters",
			Handler:    _GlobalRoutersService_ListGlobalRouters_Handler,
		},
		{
			MethodName: "BatchGetGlobalRouters",
			Handler:    _GlobalRoutersService_BatchGetGlobalRouters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogixapis/notification_center/routers/v1/global_routers_service.proto",
}
