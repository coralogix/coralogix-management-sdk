// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: com/coralogixapis/ai/v3/service.proto

package v3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AiEvaluationsService_CreateAiEvaluation_FullMethodName     = "/com.coralogixapis.ai.v3.AiEvaluationsService/CreateAiEvaluation"
	AiEvaluationsService_GetAiEvaluation_FullMethodName        = "/com.coralogixapis.ai.v3.AiEvaluationsService/GetAiEvaluation"
	AiEvaluationsService_UpdateAiEvaluation_FullMethodName     = "/com.coralogixapis.ai.v3.AiEvaluationsService/UpdateAiEvaluation"
	AiEvaluationsService_DeleteAiEvaluation_FullMethodName     = "/com.coralogixapis.ai.v3.AiEvaluationsService/DeleteAiEvaluation"
	AiEvaluationsService_ListAiEvaluations_FullMethodName      = "/com.coralogixapis.ai.v3.AiEvaluationsService/ListAiEvaluations"
	AiEvaluationsService_CountAiAppsPerEvalType_FullMethodName = "/com.coralogixapis.ai.v3.AiEvaluationsService/CountAiAppsPerEvalType"
)

// AiEvaluationsServiceClient is the client API for AiEvaluationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for managing ai evaluations
type AiEvaluationsServiceClient interface {
	// Create a new ai evaluation
	CreateAiEvaluation(ctx context.Context, in *CreateAiEvaluationRequest, opts ...grpc.CallOption) (*AiEvaluation, error)
	// Get an ai evaluation by its primary key
	GetAiEvaluation(ctx context.Context, in *GetAiEvaluationRequest, opts ...grpc.CallOption) (*AiEvaluation, error)
	// Update an existing ai evaluation
	UpdateAiEvaluation(ctx context.Context, in *UpdateAiEvaluationRequest, opts ...grpc.CallOption) (*AiEvaluation, error)
	// Delete an ai evaluation
	DeleteAiEvaluation(ctx context.Context, in *DeleteAiEvaluationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List ai evaluations with optional filters
	ListAiEvaluations(ctx context.Context, in *ListAiEvaluationsRequest, opts ...grpc.CallOption) (*ListAiEvaluationsResponse, error)
	// Count ai apps per evaluation type
	CountAiAppsPerEvalType(ctx context.Context, in *CountAiAppsPerEvalTypeRequest, opts ...grpc.CallOption) (*CountAiAppsPerEvalTypeResponse, error)
}

type aiEvaluationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAiEvaluationsServiceClient(cc grpc.ClientConnInterface) AiEvaluationsServiceClient {
	return &aiEvaluationsServiceClient{cc}
}

func (c *aiEvaluationsServiceClient) CreateAiEvaluation(ctx context.Context, in *CreateAiEvaluationRequest, opts ...grpc.CallOption) (*AiEvaluation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AiEvaluation)
	err := c.cc.Invoke(ctx, AiEvaluationsService_CreateAiEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiEvaluationsServiceClient) GetAiEvaluation(ctx context.Context, in *GetAiEvaluationRequest, opts ...grpc.CallOption) (*AiEvaluation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AiEvaluation)
	err := c.cc.Invoke(ctx, AiEvaluationsService_GetAiEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiEvaluationsServiceClient) UpdateAiEvaluation(ctx context.Context, in *UpdateAiEvaluationRequest, opts ...grpc.CallOption) (*AiEvaluation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AiEvaluation)
	err := c.cc.Invoke(ctx, AiEvaluationsService_UpdateAiEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiEvaluationsServiceClient) DeleteAiEvaluation(ctx context.Context, in *DeleteAiEvaluationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AiEvaluationsService_DeleteAiEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiEvaluationsServiceClient) ListAiEvaluations(ctx context.Context, in *ListAiEvaluationsRequest, opts ...grpc.CallOption) (*ListAiEvaluationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAiEvaluationsResponse)
	err := c.cc.Invoke(ctx, AiEvaluationsService_ListAiEvaluations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiEvaluationsServiceClient) CountAiAppsPerEvalType(ctx context.Context, in *CountAiAppsPerEvalTypeRequest, opts ...grpc.CallOption) (*CountAiAppsPerEvalTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountAiAppsPerEvalTypeResponse)
	err := c.cc.Invoke(ctx, AiEvaluationsService_CountAiAppsPerEvalType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AiEvaluationsServiceServer is the server API for AiEvaluationsService service.
// All implementations must embed UnimplementedAiEvaluationsServiceServer
// for forward compatibility.
//
// Service for managing ai evaluations
type AiEvaluationsServiceServer interface {
	// Create a new ai evaluation
	CreateAiEvaluation(context.Context, *CreateAiEvaluationRequest) (*AiEvaluation, error)
	// Get an ai evaluation by its primary key
	GetAiEvaluation(context.Context, *GetAiEvaluationRequest) (*AiEvaluation, error)
	// Update an existing ai evaluation
	UpdateAiEvaluation(context.Context, *UpdateAiEvaluationRequest) (*AiEvaluation, error)
	// Delete an ai evaluation
	DeleteAiEvaluation(context.Context, *DeleteAiEvaluationRequest) (*emptypb.Empty, error)
	// List ai evaluations with optional filters
	ListAiEvaluations(context.Context, *ListAiEvaluationsRequest) (*ListAiEvaluationsResponse, error)
	// Count ai apps per evaluation type
	CountAiAppsPerEvalType(context.Context, *CountAiAppsPerEvalTypeRequest) (*CountAiAppsPerEvalTypeResponse, error)
	mustEmbedUnimplementedAiEvaluationsServiceServer()
}

// UnimplementedAiEvaluationsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAiEvaluationsServiceServer struct{}

func (UnimplementedAiEvaluationsServiceServer) CreateAiEvaluation(context.Context, *CreateAiEvaluationRequest) (*AiEvaluation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAiEvaluation not implemented")
}
func (UnimplementedAiEvaluationsServiceServer) GetAiEvaluation(context.Context, *GetAiEvaluationRequest) (*AiEvaluation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAiEvaluation not implemented")
}
func (UnimplementedAiEvaluationsServiceServer) UpdateAiEvaluation(context.Context, *UpdateAiEvaluationRequest) (*AiEvaluation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAiEvaluation not implemented")
}
func (UnimplementedAiEvaluationsServiceServer) DeleteAiEvaluation(context.Context, *DeleteAiEvaluationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAiEvaluation not implemented")
}
func (UnimplementedAiEvaluationsServiceServer) ListAiEvaluations(context.Context, *ListAiEvaluationsRequest) (*ListAiEvaluationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAiEvaluations not implemented")
}
func (UnimplementedAiEvaluationsServiceServer) CountAiAppsPerEvalType(context.Context, *CountAiAppsPerEvalTypeRequest) (*CountAiAppsPerEvalTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAiAppsPerEvalType not implemented")
}
func (UnimplementedAiEvaluationsServiceServer) mustEmbedUnimplementedAiEvaluationsServiceServer() {}
func (UnimplementedAiEvaluationsServiceServer) testEmbeddedByValue()                              {}

// UnsafeAiEvaluationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AiEvaluationsServiceServer will
// result in compilation errors.
type UnsafeAiEvaluationsServiceServer interface {
	mustEmbedUnimplementedAiEvaluationsServiceServer()
}

func RegisterAiEvaluationsServiceServer(s grpc.ServiceRegistrar, srv AiEvaluationsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAiEvaluationsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AiEvaluationsService_ServiceDesc, srv)
}

func _AiEvaluationsService_CreateAiEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAiEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiEvaluationsServiceServer).CreateAiEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AiEvaluationsService_CreateAiEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiEvaluationsServiceServer).CreateAiEvaluation(ctx, req.(*CreateAiEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AiEvaluationsService_GetAiEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAiEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiEvaluationsServiceServer).GetAiEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AiEvaluationsService_GetAiEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiEvaluationsServiceServer).GetAiEvaluation(ctx, req.(*GetAiEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AiEvaluationsService_UpdateAiEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAiEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiEvaluationsServiceServer).UpdateAiEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AiEvaluationsService_UpdateAiEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiEvaluationsServiceServer).UpdateAiEvaluation(ctx, req.(*UpdateAiEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AiEvaluationsService_DeleteAiEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAiEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiEvaluationsServiceServer).DeleteAiEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AiEvaluationsService_DeleteAiEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiEvaluationsServiceServer).DeleteAiEvaluation(ctx, req.(*DeleteAiEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AiEvaluationsService_ListAiEvaluations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAiEvaluationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiEvaluationsServiceServer).ListAiEvaluations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AiEvaluationsService_ListAiEvaluations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiEvaluationsServiceServer).ListAiEvaluations(ctx, req.(*ListAiEvaluationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AiEvaluationsService_CountAiAppsPerEvalType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAiAppsPerEvalTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiEvaluationsServiceServer).CountAiAppsPerEvalType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AiEvaluationsService_CountAiAppsPerEvalType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiEvaluationsServiceServer).CountAiAppsPerEvalType(ctx, req.(*CountAiAppsPerEvalTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AiEvaluationsService_ServiceDesc is the grpc.ServiceDesc for AiEvaluationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AiEvaluationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogixapis.ai.v3.AiEvaluationsService",
	HandlerType: (*AiEvaluationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAiEvaluation",
			Handler:    _AiEvaluationsService_CreateAiEvaluation_Handler,
		},
		{
			MethodName: "GetAiEvaluation",
			Handler:    _AiEvaluationsService_GetAiEvaluation_Handler,
		},
		{
			MethodName: "UpdateAiEvaluation",
			Handler:    _AiEvaluationsService_UpdateAiEvaluation_Handler,
		},
		{
			MethodName: "DeleteAiEvaluation",
			Handler:    _AiEvaluationsService_DeleteAiEvaluation_Handler,
		},
		{
			MethodName: "ListAiEvaluations",
			Handler:    _AiEvaluationsService_ListAiEvaluations_Handler,
		},
		{
			MethodName: "CountAiAppsPerEvalType",
			Handler:    _AiEvaluationsService_CountAiAppsPerEvalType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogixapis/ai/v3/service.proto",
}

const (
	AiApplicationsService_ListAiApplications_FullMethodName = "/com.coralogixapis.ai.v3.AiApplicationsService/ListAiApplications"
)

// AiApplicationsServiceClient is the client API for AiApplicationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for managing ai applications
type AiApplicationsServiceClient interface {
	// List ai applications
	ListAiApplications(ctx context.Context, in *ListAiApplicationsRequest, opts ...grpc.CallOption) (*ListAiApplicationsResponse, error)
}

type aiApplicationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAiApplicationsServiceClient(cc grpc.ClientConnInterface) AiApplicationsServiceClient {
	return &aiApplicationsServiceClient{cc}
}

func (c *aiApplicationsServiceClient) ListAiApplications(ctx context.Context, in *ListAiApplicationsRequest, opts ...grpc.CallOption) (*ListAiApplicationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAiApplicationsResponse)
	err := c.cc.Invoke(ctx, AiApplicationsService_ListAiApplications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AiApplicationsServiceServer is the server API for AiApplicationsService service.
// All implementations must embed UnimplementedAiApplicationsServiceServer
// for forward compatibility.
//
// Service for managing ai applications
type AiApplicationsServiceServer interface {
	// List ai applications
	ListAiApplications(context.Context, *ListAiApplicationsRequest) (*ListAiApplicationsResponse, error)
	mustEmbedUnimplementedAiApplicationsServiceServer()
}

// UnimplementedAiApplicationsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAiApplicationsServiceServer struct{}

func (UnimplementedAiApplicationsServiceServer) ListAiApplications(context.Context, *ListAiApplicationsRequest) (*ListAiApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAiApplications not implemented")
}
func (UnimplementedAiApplicationsServiceServer) mustEmbedUnimplementedAiApplicationsServiceServer() {}
func (UnimplementedAiApplicationsServiceServer) testEmbeddedByValue()                               {}

// UnsafeAiApplicationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AiApplicationsServiceServer will
// result in compilation errors.
type UnsafeAiApplicationsServiceServer interface {
	mustEmbedUnimplementedAiApplicationsServiceServer()
}

func RegisterAiApplicationsServiceServer(s grpc.ServiceRegistrar, srv AiApplicationsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAiApplicationsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AiApplicationsService_ServiceDesc, srv)
}

func _AiApplicationsService_ListAiApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAiApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiApplicationsServiceServer).ListAiApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AiApplicationsService_ListAiApplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiApplicationsServiceServer).ListAiApplications(ctx, req.(*ListAiApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AiApplicationsService_ServiceDesc is the grpc.ServiceDesc for AiApplicationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AiApplicationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogixapis.ai.v3.AiApplicationsService",
	HandlerType: (*AiApplicationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAiApplications",
			Handler:    _AiApplicationsService_ListAiApplications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogixapis/ai/v3/service.proto",
}
