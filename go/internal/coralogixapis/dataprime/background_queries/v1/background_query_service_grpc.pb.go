// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: com/coralogixapis/dataprime/background_queries/v1/background_query_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackgroundQueryService_RunQuery_FullMethodName   = "/com.coralogixapis.dataprime.background_queries.v1.BackgroundQueryService/RunQuery"
	BackgroundQueryService_GetStatus_FullMethodName  = "/com.coralogixapis.dataprime.background_queries.v1.BackgroundQueryService/GetStatus"
	BackgroundQueryService_GetResults_FullMethodName = "/com.coralogixapis.dataprime.background_queries.v1.BackgroundQueryService/GetResults"
)

// BackgroundQueryServiceClient is the client API for BackgroundQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackgroundQueryServiceClient interface {
	RunQuery(ctx context.Context, in *RunQueryRequest, opts ...grpc.CallOption) (*RunQueryResponse, error)
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	GetResults(ctx context.Context, in *GetResultsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetResultsResponse], error)
}

type backgroundQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackgroundQueryServiceClient(cc grpc.ClientConnInterface) BackgroundQueryServiceClient {
	return &backgroundQueryServiceClient{cc}
}

func (c *backgroundQueryServiceClient) RunQuery(ctx context.Context, in *RunQueryRequest, opts ...grpc.CallOption) (*RunQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunQueryResponse)
	err := c.cc.Invoke(ctx, BackgroundQueryService_RunQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backgroundQueryServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, BackgroundQueryService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backgroundQueryServiceClient) GetResults(ctx context.Context, in *GetResultsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetResultsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BackgroundQueryService_ServiceDesc.Streams[0], BackgroundQueryService_GetResults_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetResultsRequest, GetResultsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BackgroundQueryService_GetResultsClient = grpc.ServerStreamingClient[GetResultsResponse]

// BackgroundQueryServiceServer is the server API for BackgroundQueryService service.
// All implementations must embed UnimplementedBackgroundQueryServiceServer
// for forward compatibility.
type BackgroundQueryServiceServer interface {
	RunQuery(context.Context, *RunQueryRequest) (*RunQueryResponse, error)
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	GetResults(*GetResultsRequest, grpc.ServerStreamingServer[GetResultsResponse]) error
	mustEmbedUnimplementedBackgroundQueryServiceServer()
}

// UnimplementedBackgroundQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackgroundQueryServiceServer struct{}

func (UnimplementedBackgroundQueryServiceServer) RunQuery(context.Context, *RunQueryRequest) (*RunQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunQuery not implemented")
}
func (UnimplementedBackgroundQueryServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedBackgroundQueryServiceServer) GetResults(*GetResultsRequest, grpc.ServerStreamingServer[GetResultsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetResults not implemented")
}
func (UnimplementedBackgroundQueryServiceServer) mustEmbedUnimplementedBackgroundQueryServiceServer() {
}
func (UnimplementedBackgroundQueryServiceServer) testEmbeddedByValue() {}

// UnsafeBackgroundQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackgroundQueryServiceServer will
// result in compilation errors.
type UnsafeBackgroundQueryServiceServer interface {
	mustEmbedUnimplementedBackgroundQueryServiceServer()
}

func RegisterBackgroundQueryServiceServer(s grpc.ServiceRegistrar, srv BackgroundQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedBackgroundQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackgroundQueryService_ServiceDesc, srv)
}

func _BackgroundQueryService_RunQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundQueryServiceServer).RunQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundQueryService_RunQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundQueryServiceServer).RunQuery(ctx, req.(*RunQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackgroundQueryService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundQueryServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundQueryService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundQueryServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackgroundQueryService_GetResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetResultsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BackgroundQueryServiceServer).GetResults(m, &grpc.GenericServerStream[GetResultsRequest, GetResultsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BackgroundQueryService_GetResultsServer = grpc.ServerStreamingServer[GetResultsResponse]

// BackgroundQueryService_ServiceDesc is the grpc.ServiceDesc for BackgroundQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackgroundQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogixapis.dataprime.background_queries.v1.BackgroundQueryService",
	HandlerType: (*BackgroundQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunQuery",
			Handler:    _BackgroundQueryService_RunQuery_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _BackgroundQueryService_GetStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetResults",
			Handler:       _BackgroundQueryService_GetResults_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/coralogixapis/dataprime/background_queries/v1/background_query_service.proto",
}
