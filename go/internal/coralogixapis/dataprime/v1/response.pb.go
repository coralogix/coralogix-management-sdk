// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.26.1
// source: com/coralogixapis/dataprime/v1/response.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// dataprime response for text query
type QueryResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*QueryResponse_Error
	//	*QueryResponse_Result
	//	*QueryResponse_Warning
	//	*QueryResponse_QueryId
	Message       isQueryResponse_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{0}
}

func (x *QueryResponse) GetMessage() isQueryResponse_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *QueryResponse) GetError() *DataprimeError {
	if x != nil {
		if x, ok := x.Message.(*QueryResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *QueryResponse) GetResult() *DataprimeResult {
	if x != nil {
		if x, ok := x.Message.(*QueryResponse_Result); ok {
			return x.Result
		}
	}
	return nil
}

func (x *QueryResponse) GetWarning() *DataprimeWarning {
	if x != nil {
		if x, ok := x.Message.(*QueryResponse_Warning); ok {
			return x.Warning
		}
	}
	return nil
}

func (x *QueryResponse) GetQueryId() *QueryId {
	if x != nil {
		if x, ok := x.Message.(*QueryResponse_QueryId); ok {
			return x.QueryId
		}
	}
	return nil
}

type isQueryResponse_Message interface {
	isQueryResponse_Message()
}

type QueryResponse_Error struct {
	Error *DataprimeError `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type QueryResponse_Result struct {
	Result *DataprimeResult `protobuf:"bytes,2,opt,name=result,proto3,oneof"`
}

type QueryResponse_Warning struct {
	Warning *DataprimeWarning `protobuf:"bytes,3,opt,name=warning,proto3,oneof"`
}

type QueryResponse_QueryId struct {
	QueryId *QueryId `protobuf:"bytes,4,opt,name=query_id,json=queryId,proto3,oneof"`
}

func (*QueryResponse_Error) isQueryResponse_Message() {}

func (*QueryResponse_Result) isQueryResponse_Message() {}

func (*QueryResponse_Warning) isQueryResponse_Message() {}

func (*QueryResponse_QueryId) isQueryResponse_Message() {}

// warning message
type DataprimeWarning struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to WarningType:
	//
	//	*DataprimeWarning_CompileWarning
	//	*DataprimeWarning_TimeRangeWarning
	//	*DataprimeWarning_NumberOfResultsLimitWarning
	//	*DataprimeWarning_BytesScannedLimitWarning
	//	*DataprimeWarning_DeprecationWarning
	//	*DataprimeWarning_BlocksLimitWarning
	//	*DataprimeWarning_AggregationBucketsLimitWarning
	//	*DataprimeWarning_ArchiveWarning
	//	*DataprimeWarning_ScrollTimeoutWarning
	//	*DataprimeWarning_FieldCountLimitWarning
	//	*DataprimeWarning_ShuffleFileSizeLimitReachedWarning
	WarningType   isDataprimeWarning_WarningType `protobuf_oneof:"warning_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataprimeWarning) Reset() {
	*x = DataprimeWarning{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataprimeWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataprimeWarning) ProtoMessage() {}

func (x *DataprimeWarning) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataprimeWarning.ProtoReflect.Descriptor instead.
func (*DataprimeWarning) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{1}
}

func (x *DataprimeWarning) GetWarningType() isDataprimeWarning_WarningType {
	if x != nil {
		return x.WarningType
	}
	return nil
}

func (x *DataprimeWarning) GetCompileWarning() *CompileWarning {
	if x != nil {
		if x, ok := x.WarningType.(*DataprimeWarning_CompileWarning); ok {
			return x.CompileWarning
		}
	}
	return nil
}

func (x *DataprimeWarning) GetTimeRangeWarning() *TimeRangeWarning {
	if x != nil {
		if x, ok := x.WarningType.(*DataprimeWarning_TimeRangeWarning); ok {
			return x.TimeRangeWarning
		}
	}
	return nil
}

func (x *DataprimeWarning) GetNumberOfResultsLimitWarning() *NumberOfResultsLimitWarning {
	if x != nil {
		if x, ok := x.WarningType.(*DataprimeWarning_NumberOfResultsLimitWarning); ok {
			return x.NumberOfResultsLimitWarning
		}
	}
	return nil
}

func (x *DataprimeWarning) GetBytesScannedLimitWarning() *BytesScannedLimitWarning {
	if x != nil {
		if x, ok := x.WarningType.(*DataprimeWarning_BytesScannedLimitWarning); ok {
			return x.BytesScannedLimitWarning
		}
	}
	return nil
}

func (x *DataprimeWarning) GetDeprecationWarning() *DeprecationWarning {
	if x != nil {
		if x, ok := x.WarningType.(*DataprimeWarning_DeprecationWarning); ok {
			return x.DeprecationWarning
		}
	}
	return nil
}

func (x *DataprimeWarning) GetBlocksLimitWarning() *BlocksLimitWarning {
	if x != nil {
		if x, ok := x.WarningType.(*DataprimeWarning_BlocksLimitWarning); ok {
			return x.BlocksLimitWarning
		}
	}
	return nil
}

func (x *DataprimeWarning) GetAggregationBucketsLimitWarning() *AggregationBucketsLimitWarning {
	if x != nil {
		if x, ok := x.WarningType.(*DataprimeWarning_AggregationBucketsLimitWarning); ok {
			return x.AggregationBucketsLimitWarning
		}
	}
	return nil
}

func (x *DataprimeWarning) GetArchiveWarning() *ArchiveWarning {
	if x != nil {
		if x, ok := x.WarningType.(*DataprimeWarning_ArchiveWarning); ok {
			return x.ArchiveWarning
		}
	}
	return nil
}

func (x *DataprimeWarning) GetScrollTimeoutWarning() *ScrollTimeoutWarning {
	if x != nil {
		if x, ok := x.WarningType.(*DataprimeWarning_ScrollTimeoutWarning); ok {
			return x.ScrollTimeoutWarning
		}
	}
	return nil
}

func (x *DataprimeWarning) GetFieldCountLimitWarning() *FieldCountLimitWarning {
	if x != nil {
		if x, ok := x.WarningType.(*DataprimeWarning_FieldCountLimitWarning); ok {
			return x.FieldCountLimitWarning
		}
	}
	return nil
}

func (x *DataprimeWarning) GetShuffleFileSizeLimitReachedWarning() *ShuffleFileSizeLimitReachedWarning {
	if x != nil {
		if x, ok := x.WarningType.(*DataprimeWarning_ShuffleFileSizeLimitReachedWarning); ok {
			return x.ShuffleFileSizeLimitReachedWarning
		}
	}
	return nil
}

type isDataprimeWarning_WarningType interface {
	isDataprimeWarning_WarningType()
}

type DataprimeWarning_CompileWarning struct {
	CompileWarning *CompileWarning `protobuf:"bytes,1,opt,name=compile_warning,json=compileWarning,proto3,oneof"`
}

type DataprimeWarning_TimeRangeWarning struct {
	TimeRangeWarning *TimeRangeWarning `protobuf:"bytes,2,opt,name=time_range_warning,json=timeRangeWarning,proto3,oneof"`
}

type DataprimeWarning_NumberOfResultsLimitWarning struct {
	NumberOfResultsLimitWarning *NumberOfResultsLimitWarning `protobuf:"bytes,3,opt,name=number_of_results_limit_warning,json=numberOfResultsLimitWarning,proto3,oneof"`
}

type DataprimeWarning_BytesScannedLimitWarning struct {
	BytesScannedLimitWarning *BytesScannedLimitWarning `protobuf:"bytes,4,opt,name=bytes_scanned_limit_warning,json=bytesScannedLimitWarning,proto3,oneof"`
}

type DataprimeWarning_DeprecationWarning struct {
	DeprecationWarning *DeprecationWarning `protobuf:"bytes,5,opt,name=deprecation_warning,json=deprecationWarning,proto3,oneof"`
}

type DataprimeWarning_BlocksLimitWarning struct {
	BlocksLimitWarning *BlocksLimitWarning `protobuf:"bytes,6,opt,name=blocks_limit_warning,json=blocksLimitWarning,proto3,oneof"`
}

type DataprimeWarning_AggregationBucketsLimitWarning struct {
	AggregationBucketsLimitWarning *AggregationBucketsLimitWarning `protobuf:"bytes,7,opt,name=aggregation_buckets_limit_warning,json=aggregationBucketsLimitWarning,proto3,oneof"`
}

type DataprimeWarning_ArchiveWarning struct {
	ArchiveWarning *ArchiveWarning `protobuf:"bytes,8,opt,name=archive_warning,json=archiveWarning,proto3,oneof"`
}

type DataprimeWarning_ScrollTimeoutWarning struct {
	ScrollTimeoutWarning *ScrollTimeoutWarning `protobuf:"bytes,9,opt,name=scroll_timeout_warning,json=scrollTimeoutWarning,proto3,oneof"`
}

type DataprimeWarning_FieldCountLimitWarning struct {
	FieldCountLimitWarning *FieldCountLimitWarning `protobuf:"bytes,10,opt,name=field_count_limit_warning,json=fieldCountLimitWarning,proto3,oneof"`
}

type DataprimeWarning_ShuffleFileSizeLimitReachedWarning struct {
	ShuffleFileSizeLimitReachedWarning *ShuffleFileSizeLimitReachedWarning `protobuf:"bytes,11,opt,name=shuffle_file_size_limit_reached_warning,json=shuffleFileSizeLimitReachedWarning,proto3,oneof"`
}

func (*DataprimeWarning_CompileWarning) isDataprimeWarning_WarningType() {}

func (*DataprimeWarning_TimeRangeWarning) isDataprimeWarning_WarningType() {}

func (*DataprimeWarning_NumberOfResultsLimitWarning) isDataprimeWarning_WarningType() {}

func (*DataprimeWarning_BytesScannedLimitWarning) isDataprimeWarning_WarningType() {}

func (*DataprimeWarning_DeprecationWarning) isDataprimeWarning_WarningType() {}

func (*DataprimeWarning_BlocksLimitWarning) isDataprimeWarning_WarningType() {}

func (*DataprimeWarning_AggregationBucketsLimitWarning) isDataprimeWarning_WarningType() {}

func (*DataprimeWarning_ArchiveWarning) isDataprimeWarning_WarningType() {}

func (*DataprimeWarning_ScrollTimeoutWarning) isDataprimeWarning_WarningType() {}

func (*DataprimeWarning_FieldCountLimitWarning) isDataprimeWarning_WarningType() {}

func (*DataprimeWarning_ShuffleFileSizeLimitReachedWarning) isDataprimeWarning_WarningType() {}

// warning from Dataprime compilation
type CompileWarning struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	WarningMessage string                 `protobuf:"bytes,1,opt,name=warning_message,json=warningMessage,proto3" json:"warning_message,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CompileWarning) Reset() {
	*x = CompileWarning{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompileWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileWarning) ProtoMessage() {}

func (x *CompileWarning) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileWarning.ProtoReflect.Descriptor instead.
func (*CompileWarning) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{2}
}

func (x *CompileWarning) GetWarningMessage() string {
	if x != nil {
		return x.WarningMessage
	}
	return ""
}

// warning from applying time range to query
type TimeRangeWarning struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	WarningMessage string                 `protobuf:"bytes,1,opt,name=warning_message,json=warningMessage,proto3" json:"warning_message,omitempty"`
	StartDate      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3,oneof" json:"start_date,omitempty"`
	EndDate        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3,oneof" json:"end_date,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TimeRangeWarning) Reset() {
	*x = TimeRangeWarning{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeRangeWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRangeWarning) ProtoMessage() {}

func (x *TimeRangeWarning) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRangeWarning.ProtoReflect.Descriptor instead.
func (*TimeRangeWarning) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{3}
}

func (x *TimeRangeWarning) GetWarningMessage() string {
	if x != nil {
		return x.WarningMessage
	}
	return ""
}

func (x *TimeRangeWarning) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *TimeRangeWarning) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

// warning from applying limit on number of results
type NumberOfResultsLimitWarning struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	NumberOfResultsLimit int32                  `protobuf:"varint,1,opt,name=number_of_results_limit,json=numberOfResultsLimit,proto3" json:"number_of_results_limit,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NumberOfResultsLimitWarning) Reset() {
	*x = NumberOfResultsLimitWarning{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NumberOfResultsLimitWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberOfResultsLimitWarning) ProtoMessage() {}

func (x *NumberOfResultsLimitWarning) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberOfResultsLimitWarning.ProtoReflect.Descriptor instead.
func (*NumberOfResultsLimitWarning) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{4}
}

func (x *NumberOfResultsLimitWarning) GetNumberOfResultsLimit() int32 {
	if x != nil {
		return x.NumberOfResultsLimit
	}
	return 0
}

// warning for reaching bytes scanned limit
type BytesScannedLimitWarning struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BytesScannedLimitWarning) Reset() {
	*x = BytesScannedLimitWarning{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BytesScannedLimitWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesScannedLimitWarning) ProtoMessage() {}

func (x *BytesScannedLimitWarning) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesScannedLimitWarning.ProtoReflect.Descriptor instead.
func (*BytesScannedLimitWarning) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{5}
}

// warning for reaching aggregation buckets limit
type AggregationBucketsLimitWarning struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	AggregationBucketsLimit int32                  `protobuf:"varint,1,opt,name=aggregation_buckets_limit,json=aggregationBucketsLimit,proto3" json:"aggregation_buckets_limit,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *AggregationBucketsLimitWarning) Reset() {
	*x = AggregationBucketsLimitWarning{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregationBucketsLimitWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationBucketsLimitWarning) ProtoMessage() {}

func (x *AggregationBucketsLimitWarning) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationBucketsLimitWarning.ProtoReflect.Descriptor instead.
func (*AggregationBucketsLimitWarning) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{6}
}

func (x *AggregationBucketsLimitWarning) GetAggregationBucketsLimit() int32 {
	if x != nil {
		return x.AggregationBucketsLimit
	}
	return 0
}

// warning about deprecated elements
type DeprecationWarning struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	WarningMessage string                 `protobuf:"bytes,1,opt,name=warning_message,json=warningMessage,proto3" json:"warning_message,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DeprecationWarning) Reset() {
	*x = DeprecationWarning{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeprecationWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeprecationWarning) ProtoMessage() {}

func (x *DeprecationWarning) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeprecationWarning.ProtoReflect.Descriptor instead.
func (*DeprecationWarning) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{7}
}

func (x *DeprecationWarning) GetWarningMessage() string {
	if x != nil {
		return x.WarningMessage
	}
	return ""
}

// Warning for when query has reached maximum number of parquet blocks
type BlocksLimitWarning struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlocksLimitWarning) Reset() {
	*x = BlocksLimitWarning{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlocksLimitWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlocksLimitWarning) ProtoMessage() {}

func (x *BlocksLimitWarning) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlocksLimitWarning.ProtoReflect.Descriptor instead.
func (*BlocksLimitWarning) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{8}
}

// batch of results
type DataprimeResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*DataprimeResults    `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataprimeResult) Reset() {
	*x = DataprimeResult{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataprimeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataprimeResult) ProtoMessage() {}

func (x *DataprimeResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataprimeResult.ProtoReflect.Descriptor instead.
func (*DataprimeResult) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{9}
}

func (x *DataprimeResult) GetResults() []*DataprimeResults {
	if x != nil {
		return x.Results
	}
	return nil
}

// wrapper for dataprime results
type DataprimeResults struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Metadata      []*DataprimeResults_KeyValue `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty"`
	Labels        []*DataprimeResults_KeyValue `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	UserData      string                       `protobuf:"bytes,3,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataprimeResults) Reset() {
	*x = DataprimeResults{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataprimeResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataprimeResults) ProtoMessage() {}

func (x *DataprimeResults) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataprimeResults.ProtoReflect.Descriptor instead.
func (*DataprimeResults) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{10}
}

func (x *DataprimeResults) GetMetadata() []*DataprimeResults_KeyValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DataprimeResults) GetLabels() []*DataprimeResults_KeyValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DataprimeResults) GetUserData() string {
	if x != nil {
		return x.UserData
	}
	return ""
}

// wrapper for dataprime error
type DataprimeError struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Message       *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code          *DataprimeError_Code    `protobuf:"bytes,2,opt,name=code,proto3,oneof" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataprimeError) Reset() {
	*x = DataprimeError{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataprimeError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataprimeError) ProtoMessage() {}

func (x *DataprimeError) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataprimeError.ProtoReflect.Descriptor instead.
func (*DataprimeError) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{11}
}

func (x *DataprimeError) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *DataprimeError) GetCode() *DataprimeError_Code {
	if x != nil {
		return x.Code
	}
	return nil
}

// wrapper for byte AST representation
type SerializedDataprime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SerializedDataprime) Reset() {
	*x = SerializedDataprime{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SerializedDataprime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerializedDataprime) ProtoMessage() {}

func (x *SerializedDataprime) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerializedDataprime.ProtoReflect.Descriptor instead.
func (*SerializedDataprime) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{12}
}

func (x *SerializedDataprime) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// internal identifier of the query. Can be used to simplify investigation of issues
type QueryId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueryId       string                 `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryId) Reset() {
	*x = QueryId{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryId) ProtoMessage() {}

func (x *QueryId) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryId.ProtoReflect.Descriptor instead.
func (*QueryId) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{13}
}

func (x *QueryId) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

// wrapper for archive related warnings
type ArchiveWarning struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to WarningType:
	//
	//	*ArchiveWarning_NoMetastoreData_
	//	*ArchiveWarning_BucketAccessDenied_
	//	*ArchiveWarning_BucketReadFailed_
	//	*ArchiveWarning_MissingData_
	WarningType   isArchiveWarning_WarningType `protobuf_oneof:"warning_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveWarning) Reset() {
	*x = ArchiveWarning{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveWarning) ProtoMessage() {}

func (x *ArchiveWarning) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveWarning.ProtoReflect.Descriptor instead.
func (*ArchiveWarning) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{14}
}

func (x *ArchiveWarning) GetWarningType() isArchiveWarning_WarningType {
	if x != nil {
		return x.WarningType
	}
	return nil
}

func (x *ArchiveWarning) GetNoMetastoreData() *ArchiveWarning_NoMetastoreData {
	if x != nil {
		if x, ok := x.WarningType.(*ArchiveWarning_NoMetastoreData_); ok {
			return x.NoMetastoreData
		}
	}
	return nil
}

func (x *ArchiveWarning) GetBucketAccessDenied() *ArchiveWarning_BucketAccessDenied {
	if x != nil {
		if x, ok := x.WarningType.(*ArchiveWarning_BucketAccessDenied_); ok {
			return x.BucketAccessDenied
		}
	}
	return nil
}

func (x *ArchiveWarning) GetBucketReadFailed() *ArchiveWarning_BucketReadFailed {
	if x != nil {
		if x, ok := x.WarningType.(*ArchiveWarning_BucketReadFailed_); ok {
			return x.BucketReadFailed
		}
	}
	return nil
}

func (x *ArchiveWarning) GetMissingData() *ArchiveWarning_MissingData {
	if x != nil {
		if x, ok := x.WarningType.(*ArchiveWarning_MissingData_); ok {
			return x.MissingData
		}
	}
	return nil
}

type isArchiveWarning_WarningType interface {
	isArchiveWarning_WarningType()
}

type ArchiveWarning_NoMetastoreData_ struct {
	NoMetastoreData *ArchiveWarning_NoMetastoreData `protobuf:"bytes,1,opt,name=no_metastore_data,json=noMetastoreData,proto3,oneof"`
}

type ArchiveWarning_BucketAccessDenied_ struct {
	BucketAccessDenied *ArchiveWarning_BucketAccessDenied `protobuf:"bytes,2,opt,name=bucket_access_denied,json=bucketAccessDenied,proto3,oneof"`
}

type ArchiveWarning_BucketReadFailed_ struct {
	BucketReadFailed *ArchiveWarning_BucketReadFailed `protobuf:"bytes,3,opt,name=bucket_read_failed,json=bucketReadFailed,proto3,oneof"`
}

type ArchiveWarning_MissingData_ struct {
	MissingData *ArchiveWarning_MissingData `protobuf:"bytes,4,opt,name=missing_data,json=missingData,proto3,oneof"`
}

func (*ArchiveWarning_NoMetastoreData_) isArchiveWarning_WarningType() {}

func (*ArchiveWarning_BucketAccessDenied_) isArchiveWarning_WarningType() {}

func (*ArchiveWarning_BucketReadFailed_) isArchiveWarning_WarningType() {}

func (*ArchiveWarning_MissingData_) isArchiveWarning_WarningType() {}

// warning for when OpenSearch scroll timeout is reached
type ScrollTimeoutWarning struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScrollTimeoutWarning) Reset() {
	*x = ScrollTimeoutWarning{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScrollTimeoutWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrollTimeoutWarning) ProtoMessage() {}

func (x *ScrollTimeoutWarning) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrollTimeoutWarning.ProtoReflect.Descriptor instead.
func (*ScrollTimeoutWarning) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{15}
}

// warning for when result contain entries where number of fields is truncated
type FieldCountLimitWarning struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldCountLimitWarning) Reset() {
	*x = FieldCountLimitWarning{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldCountLimitWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldCountLimitWarning) ProtoMessage() {}

func (x *FieldCountLimitWarning) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldCountLimitWarning.ProtoReflect.Descriptor instead.
func (*FieldCountLimitWarning) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{16}
}

// warning for when shuffle file size limit is reached - e.g. during a join with a large right side
type ShuffleFileSizeLimitReachedWarning struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShuffleFileSizeLimitReachedWarning) Reset() {
	*x = ShuffleFileSizeLimitReachedWarning{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShuffleFileSizeLimitReachedWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShuffleFileSizeLimitReachedWarning) ProtoMessage() {}

func (x *ShuffleFileSizeLimitReachedWarning) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShuffleFileSizeLimitReachedWarning.ProtoReflect.Descriptor instead.
func (*ShuffleFileSizeLimitReachedWarning) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{17}
}

type DataprimeResults_KeyValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataprimeResults_KeyValue) Reset() {
	*x = DataprimeResults_KeyValue{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataprimeResults_KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataprimeResults_KeyValue) ProtoMessage() {}

func (x *DataprimeResults_KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataprimeResults_KeyValue.ProtoReflect.Descriptor instead.
func (*DataprimeResults_KeyValue) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{10, 0}
}

func (x *DataprimeResults_KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DataprimeResults_KeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type DataprimeError_RateLimitReached struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataprimeError_RateLimitReached) Reset() {
	*x = DataprimeError_RateLimitReached{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataprimeError_RateLimitReached) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataprimeError_RateLimitReached) ProtoMessage() {}

func (x *DataprimeError_RateLimitReached) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataprimeError_RateLimitReached.ProtoReflect.Descriptor instead.
func (*DataprimeError_RateLimitReached) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{11, 0}
}

type DataprimeError_Code struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*DataprimeError_Code_RateLimitReached
	Message       isDataprimeError_Code_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataprimeError_Code) Reset() {
	*x = DataprimeError_Code{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataprimeError_Code) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataprimeError_Code) ProtoMessage() {}

func (x *DataprimeError_Code) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataprimeError_Code.ProtoReflect.Descriptor instead.
func (*DataprimeError_Code) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{11, 1}
}

func (x *DataprimeError_Code) GetMessage() isDataprimeError_Code_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *DataprimeError_Code) GetRateLimitReached() *DataprimeError_RateLimitReached {
	if x != nil {
		if x, ok := x.Message.(*DataprimeError_Code_RateLimitReached); ok {
			return x.RateLimitReached
		}
	}
	return nil
}

type isDataprimeError_Code_Message interface {
	isDataprimeError_Code_Message()
}

type DataprimeError_Code_RateLimitReached struct {
	RateLimitReached *DataprimeError_RateLimitReached `protobuf:"bytes,1,opt,name=rate_limit_reached,json=rateLimitReached,proto3,oneof"`
}

func (*DataprimeError_Code_RateLimitReached) isDataprimeError_Code_Message() {}

type ArchiveWarning_NoMetastoreData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveWarning_NoMetastoreData) Reset() {
	*x = ArchiveWarning_NoMetastoreData{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveWarning_NoMetastoreData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveWarning_NoMetastoreData) ProtoMessage() {}

func (x *ArchiveWarning_NoMetastoreData) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveWarning_NoMetastoreData.ProtoReflect.Descriptor instead.
func (*ArchiveWarning_NoMetastoreData) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{14, 0}
}

type ArchiveWarning_BucketAccessDenied struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveWarning_BucketAccessDenied) Reset() {
	*x = ArchiveWarning_BucketAccessDenied{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveWarning_BucketAccessDenied) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveWarning_BucketAccessDenied) ProtoMessage() {}

func (x *ArchiveWarning_BucketAccessDenied) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveWarning_BucketAccessDenied.ProtoReflect.Descriptor instead.
func (*ArchiveWarning_BucketAccessDenied) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{14, 1}
}

type ArchiveWarning_BucketReadFailed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveWarning_BucketReadFailed) Reset() {
	*x = ArchiveWarning_BucketReadFailed{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveWarning_BucketReadFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveWarning_BucketReadFailed) ProtoMessage() {}

func (x *ArchiveWarning_BucketReadFailed) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveWarning_BucketReadFailed.ProtoReflect.Descriptor instead.
func (*ArchiveWarning_BucketReadFailed) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{14, 2}
}

type ArchiveWarning_MissingData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveWarning_MissingData) Reset() {
	*x = ArchiveWarning_MissingData{}
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveWarning_MissingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveWarning_MissingData) ProtoMessage() {}

func (x *ArchiveWarning_MissingData) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveWarning_MissingData.ProtoReflect.Descriptor instead.
func (*ArchiveWarning_MissingData) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP(), []int{14, 3}
}

var File_com_coralogixapis_dataprime_v1_response_proto protoreflect.FileDescriptor

var file_com_coralogixapis_dataprime_v1_response_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc1, 0x02, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4c, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x48, 0x00,
	0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x97, 0x0a, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x59, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x60, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x1f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x1b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x79, 0x0a, 0x1b,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x18, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x65, 0x0a, 0x13, 0x64, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x66,
	0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x8b, 0x01, 0x0a, 0x21, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x1e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x59, 0x0a, 0x0f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x0e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x6c, 0x0a, 0x16, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x14, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x73, 0x0a,
	0x19, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x16, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x99, 0x01, 0x0a, 0x27, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x22, 0x73, 0x68, 0x75, 0x66,
	0x66, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x0e,
	0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x39,
	0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x27, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x10, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x27,
	0x0a, 0x0f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22,
	0x54, 0x0a, 0x1b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x35,
	0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x22, 0x5c, 0x0a, 0x1e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x3d, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x14,
	0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x22, 0x63, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x8d, 0x02, 0x0a, 0x10, 0x44, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x55,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x32, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb8, 0x02, 0x0a, 0x0e, 0x44, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x1a, 0x12, 0x0a, 0x10, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x1a, 0x82, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x6f, 0x0a, 0x12, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10,
	0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x29, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x24, 0x0a, 0x07, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0xa3, 0x04, 0x0a, 0x0e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x6c, 0x0a, 0x11, 0x6e, 0x6f, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x75, 0x0a, 0x14, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x48, 0x00, 0x52, 0x12, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x12, 0x6f, 0x0a,
	0x12, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x5f,
	0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x11, 0x0a, 0x0f, 0x4e, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x14, 0x0a, 0x12, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x1a, 0x12, 0x0a, 0x10, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x1a, 0x0d, 0x0a, 0x0b,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x53,
	0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x22, 0x18, 0x0a, 0x16, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x24, 0x0a,
	0x22, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_dataprime_v1_response_proto_rawDescOnce sync.Once
	file_com_coralogixapis_dataprime_v1_response_proto_rawDescData = file_com_coralogixapis_dataprime_v1_response_proto_rawDesc
)

func file_com_coralogixapis_dataprime_v1_response_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_dataprime_v1_response_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_dataprime_v1_response_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_dataprime_v1_response_proto_rawDescData)
	})
	return file_com_coralogixapis_dataprime_v1_response_proto_rawDescData
}

var file_com_coralogixapis_dataprime_v1_response_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_com_coralogixapis_dataprime_v1_response_proto_goTypes = []any{
	(*QueryResponse)(nil),                      // 0: com.coralogixapis.dataprime.v1.QueryResponse
	(*DataprimeWarning)(nil),                   // 1: com.coralogixapis.dataprime.v1.DataprimeWarning
	(*CompileWarning)(nil),                     // 2: com.coralogixapis.dataprime.v1.CompileWarning
	(*TimeRangeWarning)(nil),                   // 3: com.coralogixapis.dataprime.v1.TimeRangeWarning
	(*NumberOfResultsLimitWarning)(nil),        // 4: com.coralogixapis.dataprime.v1.NumberOfResultsLimitWarning
	(*BytesScannedLimitWarning)(nil),           // 5: com.coralogixapis.dataprime.v1.BytesScannedLimitWarning
	(*AggregationBucketsLimitWarning)(nil),     // 6: com.coralogixapis.dataprime.v1.AggregationBucketsLimitWarning
	(*DeprecationWarning)(nil),                 // 7: com.coralogixapis.dataprime.v1.DeprecationWarning
	(*BlocksLimitWarning)(nil),                 // 8: com.coralogixapis.dataprime.v1.BlocksLimitWarning
	(*DataprimeResult)(nil),                    // 9: com.coralogixapis.dataprime.v1.DataprimeResult
	(*DataprimeResults)(nil),                   // 10: com.coralogixapis.dataprime.v1.DataprimeResults
	(*DataprimeError)(nil),                     // 11: com.coralogixapis.dataprime.v1.DataprimeError
	(*SerializedDataprime)(nil),                // 12: com.coralogixapis.dataprime.v1.SerializedDataprime
	(*QueryId)(nil),                            // 13: com.coralogixapis.dataprime.v1.QueryId
	(*ArchiveWarning)(nil),                     // 14: com.coralogixapis.dataprime.v1.ArchiveWarning
	(*ScrollTimeoutWarning)(nil),               // 15: com.coralogixapis.dataprime.v1.ScrollTimeoutWarning
	(*FieldCountLimitWarning)(nil),             // 16: com.coralogixapis.dataprime.v1.FieldCountLimitWarning
	(*ShuffleFileSizeLimitReachedWarning)(nil), // 17: com.coralogixapis.dataprime.v1.ShuffleFileSizeLimitReachedWarning
	(*DataprimeResults_KeyValue)(nil),          // 18: com.coralogixapis.dataprime.v1.DataprimeResults.KeyValue
	(*DataprimeError_RateLimitReached)(nil),    // 19: com.coralogixapis.dataprime.v1.DataprimeError.RateLimitReached
	(*DataprimeError_Code)(nil),                // 20: com.coralogixapis.dataprime.v1.DataprimeError.Code
	(*ArchiveWarning_NoMetastoreData)(nil),     // 21: com.coralogixapis.dataprime.v1.ArchiveWarning.NoMetastoreData
	(*ArchiveWarning_BucketAccessDenied)(nil),  // 22: com.coralogixapis.dataprime.v1.ArchiveWarning.BucketAccessDenied
	(*ArchiveWarning_BucketReadFailed)(nil),    // 23: com.coralogixapis.dataprime.v1.ArchiveWarning.BucketReadFailed
	(*ArchiveWarning_MissingData)(nil),         // 24: com.coralogixapis.dataprime.v1.ArchiveWarning.MissingData
	(*timestamppb.Timestamp)(nil),              // 25: google.protobuf.Timestamp
	(*wrapperspb.StringValue)(nil),             // 26: google.protobuf.StringValue
}
var file_com_coralogixapis_dataprime_v1_response_proto_depIdxs = []int32{
	11, // 0: com.coralogixapis.dataprime.v1.QueryResponse.error:type_name -> com.coralogixapis.dataprime.v1.DataprimeError
	9,  // 1: com.coralogixapis.dataprime.v1.QueryResponse.result:type_name -> com.coralogixapis.dataprime.v1.DataprimeResult
	1,  // 2: com.coralogixapis.dataprime.v1.QueryResponse.warning:type_name -> com.coralogixapis.dataprime.v1.DataprimeWarning
	13, // 3: com.coralogixapis.dataprime.v1.QueryResponse.query_id:type_name -> com.coralogixapis.dataprime.v1.QueryId
	2,  // 4: com.coralogixapis.dataprime.v1.DataprimeWarning.compile_warning:type_name -> com.coralogixapis.dataprime.v1.CompileWarning
	3,  // 5: com.coralogixapis.dataprime.v1.DataprimeWarning.time_range_warning:type_name -> com.coralogixapis.dataprime.v1.TimeRangeWarning
	4,  // 6: com.coralogixapis.dataprime.v1.DataprimeWarning.number_of_results_limit_warning:type_name -> com.coralogixapis.dataprime.v1.NumberOfResultsLimitWarning
	5,  // 7: com.coralogixapis.dataprime.v1.DataprimeWarning.bytes_scanned_limit_warning:type_name -> com.coralogixapis.dataprime.v1.BytesScannedLimitWarning
	7,  // 8: com.coralogixapis.dataprime.v1.DataprimeWarning.deprecation_warning:type_name -> com.coralogixapis.dataprime.v1.DeprecationWarning
	8,  // 9: com.coralogixapis.dataprime.v1.DataprimeWarning.blocks_limit_warning:type_name -> com.coralogixapis.dataprime.v1.BlocksLimitWarning
	6,  // 10: com.coralogixapis.dataprime.v1.DataprimeWarning.aggregation_buckets_limit_warning:type_name -> com.coralogixapis.dataprime.v1.AggregationBucketsLimitWarning
	14, // 11: com.coralogixapis.dataprime.v1.DataprimeWarning.archive_warning:type_name -> com.coralogixapis.dataprime.v1.ArchiveWarning
	15, // 12: com.coralogixapis.dataprime.v1.DataprimeWarning.scroll_timeout_warning:type_name -> com.coralogixapis.dataprime.v1.ScrollTimeoutWarning
	16, // 13: com.coralogixapis.dataprime.v1.DataprimeWarning.field_count_limit_warning:type_name -> com.coralogixapis.dataprime.v1.FieldCountLimitWarning
	17, // 14: com.coralogixapis.dataprime.v1.DataprimeWarning.shuffle_file_size_limit_reached_warning:type_name -> com.coralogixapis.dataprime.v1.ShuffleFileSizeLimitReachedWarning
	25, // 15: com.coralogixapis.dataprime.v1.TimeRangeWarning.start_date:type_name -> google.protobuf.Timestamp
	25, // 16: com.coralogixapis.dataprime.v1.TimeRangeWarning.end_date:type_name -> google.protobuf.Timestamp
	10, // 17: com.coralogixapis.dataprime.v1.DataprimeResult.results:type_name -> com.coralogixapis.dataprime.v1.DataprimeResults
	18, // 18: com.coralogixapis.dataprime.v1.DataprimeResults.metadata:type_name -> com.coralogixapis.dataprime.v1.DataprimeResults.KeyValue
	18, // 19: com.coralogixapis.dataprime.v1.DataprimeResults.labels:type_name -> com.coralogixapis.dataprime.v1.DataprimeResults.KeyValue
	26, // 20: com.coralogixapis.dataprime.v1.DataprimeError.message:type_name -> google.protobuf.StringValue
	20, // 21: com.coralogixapis.dataprime.v1.DataprimeError.code:type_name -> com.coralogixapis.dataprime.v1.DataprimeError.Code
	21, // 22: com.coralogixapis.dataprime.v1.ArchiveWarning.no_metastore_data:type_name -> com.coralogixapis.dataprime.v1.ArchiveWarning.NoMetastoreData
	22, // 23: com.coralogixapis.dataprime.v1.ArchiveWarning.bucket_access_denied:type_name -> com.coralogixapis.dataprime.v1.ArchiveWarning.BucketAccessDenied
	23, // 24: com.coralogixapis.dataprime.v1.ArchiveWarning.bucket_read_failed:type_name -> com.coralogixapis.dataprime.v1.ArchiveWarning.BucketReadFailed
	24, // 25: com.coralogixapis.dataprime.v1.ArchiveWarning.missing_data:type_name -> com.coralogixapis.dataprime.v1.ArchiveWarning.MissingData
	19, // 26: com.coralogixapis.dataprime.v1.DataprimeError.Code.rate_limit_reached:type_name -> com.coralogixapis.dataprime.v1.DataprimeError.RateLimitReached
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_dataprime_v1_response_proto_init() }
func file_com_coralogixapis_dataprime_v1_response_proto_init() {
	if File_com_coralogixapis_dataprime_v1_response_proto != nil {
		return
	}
	file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[0].OneofWrappers = []any{
		(*QueryResponse_Error)(nil),
		(*QueryResponse_Result)(nil),
		(*QueryResponse_Warning)(nil),
		(*QueryResponse_QueryId)(nil),
	}
	file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[1].OneofWrappers = []any{
		(*DataprimeWarning_CompileWarning)(nil),
		(*DataprimeWarning_TimeRangeWarning)(nil),
		(*DataprimeWarning_NumberOfResultsLimitWarning)(nil),
		(*DataprimeWarning_BytesScannedLimitWarning)(nil),
		(*DataprimeWarning_DeprecationWarning)(nil),
		(*DataprimeWarning_BlocksLimitWarning)(nil),
		(*DataprimeWarning_AggregationBucketsLimitWarning)(nil),
		(*DataprimeWarning_ArchiveWarning)(nil),
		(*DataprimeWarning_ScrollTimeoutWarning)(nil),
		(*DataprimeWarning_FieldCountLimitWarning)(nil),
		(*DataprimeWarning_ShuffleFileSizeLimitReachedWarning)(nil),
	}
	file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[3].OneofWrappers = []any{}
	file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[11].OneofWrappers = []any{}
	file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[14].OneofWrappers = []any{
		(*ArchiveWarning_NoMetastoreData_)(nil),
		(*ArchiveWarning_BucketAccessDenied_)(nil),
		(*ArchiveWarning_BucketReadFailed_)(nil),
		(*ArchiveWarning_MissingData_)(nil),
	}
	file_com_coralogixapis_dataprime_v1_response_proto_msgTypes[20].OneofWrappers = []any{
		(*DataprimeError_Code_RateLimitReached)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_dataprime_v1_response_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogixapis_dataprime_v1_response_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_dataprime_v1_response_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_dataprime_v1_response_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_dataprime_v1_response_proto = out.File
	file_com_coralogixapis_dataprime_v1_response_proto_rawDesc = nil
	file_com_coralogixapis_dataprime_v1_response_proto_goTypes = nil
	file_com_coralogixapis_dataprime_v1_response_proto_depIdxs = nil
}
