// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: com/coralogixapis/dashboards/v1/ast/widgets/pie_chart.proto

package widgets

import (
	filters "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/dashboards/v1/ast/filters"
	common "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/dashboards/v1/ast/widgets/common"
	common1 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/dashboards/v1/common"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv3/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PieChart_LabelSource int32

const (
	PieChart_LABEL_SOURCE_UNSPECIFIED PieChart_LabelSource = 0
	PieChart_LABEL_SOURCE_INNER       PieChart_LabelSource = 1
	PieChart_LABEL_SOURCE_STACK       PieChart_LabelSource = 2
)

// Enum value maps for PieChart_LabelSource.
var (
	PieChart_LabelSource_name = map[int32]string{
		0: "LABEL_SOURCE_UNSPECIFIED",
		1: "LABEL_SOURCE_INNER",
		2: "LABEL_SOURCE_STACK",
	}
	PieChart_LabelSource_value = map[string]int32{
		"LABEL_SOURCE_UNSPECIFIED": 0,
		"LABEL_SOURCE_INNER":       1,
		"LABEL_SOURCE_STACK":       2,
	}
)

func (x PieChart_LabelSource) Enum() *PieChart_LabelSource {
	p := new(PieChart_LabelSource)
	*p = x
	return p
}

func (x PieChart_LabelSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PieChart_LabelSource) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_enumTypes[0].Descriptor()
}

func (PieChart_LabelSource) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_enumTypes[0]
}

func (x PieChart_LabelSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PieChart_LabelSource.Descriptor instead.
func (PieChart_LabelSource) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_rawDescGZIP(), []int{0, 0}
}

type PieChart struct {
	state              protoimpl.MessageState    `protogen:"open.v1"`
	Query              *PieChart_Query           `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	MaxSlicesPerChart  *wrapperspb.Int32Value    `protobuf:"bytes,2,opt,name=max_slices_per_chart,json=maxSlicesPerChart,proto3" json:"max_slices_per_chart,omitempty"`
	MinSlicePercentage *wrapperspb.Int32Value    `protobuf:"bytes,3,opt,name=min_slice_percentage,json=minSlicePercentage,proto3" json:"min_slice_percentage,omitempty"`
	StackDefinition    *PieChart_StackDefinition `protobuf:"bytes,4,opt,name=stack_definition,json=stackDefinition,proto3" json:"stack_definition,omitempty"`
	LabelDefinition    *PieChart_LabelDefinition `protobuf:"bytes,5,opt,name=label_definition,json=labelDefinition,proto3" json:"label_definition,omitempty"`
	// not used, to be deprecated
	ShowLegend        *wrapperspb.BoolValue   `protobuf:"bytes,6,opt,name=show_legend,json=showLegend,proto3" json:"show_legend,omitempty"`
	GroupNameTemplate *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=group_name_template,json=groupNameTemplate,proto3" json:"group_name_template,omitempty"`
	Unit              common.Unit             `protobuf:"varint,8,opt,name=unit,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.common.Unit" json:"unit,omitempty"`
	ColorScheme       *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=color_scheme,json=colorScheme,proto3" json:"color_scheme,omitempty"`
	DataModeType      common.DataModeType     `protobuf:"varint,10,opt,name=data_mode_type,json=dataModeType,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.common.DataModeType" json:"data_mode_type,omitempty"`
	CustomUnit        *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=custom_unit,json=customUnit,proto3" json:"custom_unit,omitempty"`
	Decimal           *wrapperspb.Int32Value  `protobuf:"bytes,12,opt,name=decimal,proto3" json:"decimal,omitempty"`
	Legend            *common.Legend          `protobuf:"bytes,13,opt,name=legend,proto3" json:"legend,omitempty"`
	HashColors        *wrapperspb.BoolValue   `protobuf:"bytes,14,opt,name=hash_colors,json=hashColors,proto3" json:"hash_colors,omitempty"`
	DecimalPrecision  *wrapperspb.BoolValue   `protobuf:"bytes,15,opt,name=decimal_precision,json=decimalPrecision,proto3" json:"decimal_precision,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PieChart) Reset() {
	*x = PieChart{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PieChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieChart) ProtoMessage() {}

func (x *PieChart) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieChart.ProtoReflect.Descriptor instead.
func (*PieChart) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_rawDescGZIP(), []int{0}
}

func (x *PieChart) GetQuery() *PieChart_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *PieChart) GetMaxSlicesPerChart() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxSlicesPerChart
	}
	return nil
}

func (x *PieChart) GetMinSlicePercentage() *wrapperspb.Int32Value {
	if x != nil {
		return x.MinSlicePercentage
	}
	return nil
}

func (x *PieChart) GetStackDefinition() *PieChart_StackDefinition {
	if x != nil {
		return x.StackDefinition
	}
	return nil
}

func (x *PieChart) GetLabelDefinition() *PieChart_LabelDefinition {
	if x != nil {
		return x.LabelDefinition
	}
	return nil
}

func (x *PieChart) GetShowLegend() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowLegend
	}
	return nil
}

func (x *PieChart) GetGroupNameTemplate() *wrapperspb.StringValue {
	if x != nil {
		return x.GroupNameTemplate
	}
	return nil
}

func (x *PieChart) GetUnit() common.Unit {
	if x != nil {
		return x.Unit
	}
	return common.Unit(0)
}

func (x *PieChart) GetColorScheme() *wrapperspb.StringValue {
	if x != nil {
		return x.ColorScheme
	}
	return nil
}

func (x *PieChart) GetDataModeType() common.DataModeType {
	if x != nil {
		return x.DataModeType
	}
	return common.DataModeType(0)
}

func (x *PieChart) GetCustomUnit() *wrapperspb.StringValue {
	if x != nil {
		return x.CustomUnit
	}
	return nil
}

func (x *PieChart) GetDecimal() *wrapperspb.Int32Value {
	if x != nil {
		return x.Decimal
	}
	return nil
}

func (x *PieChart) GetLegend() *common.Legend {
	if x != nil {
		return x.Legend
	}
	return nil
}

func (x *PieChart) GetHashColors() *wrapperspb.BoolValue {
	if x != nil {
		return x.HashColors
	}
	return nil
}

func (x *PieChart) GetDecimalPrecision() *wrapperspb.BoolValue {
	if x != nil {
		return x.DecimalPrecision
	}
	return nil
}

type PieChart_Query struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*PieChart_Query_Logs
	//	*PieChart_Query_Spans
	//	*PieChart_Query_Metrics
	//	*PieChart_Query_Dataprime
	Value         isPieChart_Query_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PieChart_Query) Reset() {
	*x = PieChart_Query{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PieChart_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieChart_Query) ProtoMessage() {}

func (x *PieChart_Query) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieChart_Query.ProtoReflect.Descriptor instead.
func (*PieChart_Query) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PieChart_Query) GetValue() isPieChart_Query_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PieChart_Query) GetLogs() *PieChart_LogsQuery {
	if x != nil {
		if x, ok := x.Value.(*PieChart_Query_Logs); ok {
			return x.Logs
		}
	}
	return nil
}

func (x *PieChart_Query) GetSpans() *PieChart_SpansQuery {
	if x != nil {
		if x, ok := x.Value.(*PieChart_Query_Spans); ok {
			return x.Spans
		}
	}
	return nil
}

func (x *PieChart_Query) GetMetrics() *PieChart_MetricsQuery {
	if x != nil {
		if x, ok := x.Value.(*PieChart_Query_Metrics); ok {
			return x.Metrics
		}
	}
	return nil
}

func (x *PieChart_Query) GetDataprime() *PieChart_DataprimeQuery {
	if x != nil {
		if x, ok := x.Value.(*PieChart_Query_Dataprime); ok {
			return x.Dataprime
		}
	}
	return nil
}

type isPieChart_Query_Value interface {
	isPieChart_Query_Value()
}

type PieChart_Query_Logs struct {
	Logs *PieChart_LogsQuery `protobuf:"bytes,1,opt,name=logs,proto3,oneof"`
}

type PieChart_Query_Spans struct {
	Spans *PieChart_SpansQuery `protobuf:"bytes,2,opt,name=spans,proto3,oneof"`
}

type PieChart_Query_Metrics struct {
	Metrics *PieChart_MetricsQuery `protobuf:"bytes,3,opt,name=metrics,proto3,oneof"`
}

type PieChart_Query_Dataprime struct {
	Dataprime *PieChart_DataprimeQuery `protobuf:"bytes,4,opt,name=dataprime,proto3,oneof"`
}

func (*PieChart_Query_Logs) isPieChart_Query_Value() {}

func (*PieChart_Query_Spans) isPieChart_Query_Value() {}

func (*PieChart_Query_Metrics) isPieChart_Query_Value() {}

func (*PieChart_Query_Dataprime) isPieChart_Query_Value() {}

type PieChart_StackDefinition struct {
	state             protoimpl.MessageState  `protogen:"open.v1"`
	MaxSlicesPerStack *wrapperspb.Int32Value  `protobuf:"bytes,1,opt,name=max_slices_per_stack,json=maxSlicesPerStack,proto3" json:"max_slices_per_stack,omitempty"`
	StackNameTemplate *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=stack_name_template,json=stackNameTemplate,proto3" json:"stack_name_template,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PieChart_StackDefinition) Reset() {
	*x = PieChart_StackDefinition{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PieChart_StackDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieChart_StackDefinition) ProtoMessage() {}

func (x *PieChart_StackDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieChart_StackDefinition.ProtoReflect.Descriptor instead.
func (*PieChart_StackDefinition) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PieChart_StackDefinition) GetMaxSlicesPerStack() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxSlicesPerStack
	}
	return nil
}

func (x *PieChart_StackDefinition) GetStackNameTemplate() *wrapperspb.StringValue {
	if x != nil {
		return x.StackNameTemplate
	}
	return nil
}

type PieChart_LabelDefinition struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	LabelSource    PieChart_LabelSource   `protobuf:"varint,1,opt,name=label_source,json=labelSource,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.PieChart_LabelSource" json:"label_source,omitempty"`
	IsVisible      *wrapperspb.BoolValue  `protobuf:"bytes,2,opt,name=is_visible,json=isVisible,proto3" json:"is_visible,omitempty"`
	ShowName       *wrapperspb.BoolValue  `protobuf:"bytes,3,opt,name=show_name,json=showName,proto3" json:"show_name,omitempty"`
	ShowValue      *wrapperspb.BoolValue  `protobuf:"bytes,4,opt,name=show_value,json=showValue,proto3" json:"show_value,omitempty"`
	ShowPercentage *wrapperspb.BoolValue  `protobuf:"bytes,5,opt,name=show_percentage,json=showPercentage,proto3" json:"show_percentage,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PieChart_LabelDefinition) Reset() {
	*x = PieChart_LabelDefinition{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PieChart_LabelDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieChart_LabelDefinition) ProtoMessage() {}

func (x *PieChart_LabelDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieChart_LabelDefinition.ProtoReflect.Descriptor instead.
func (*PieChart_LabelDefinition) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_rawDescGZIP(), []int{0, 2}
}

func (x *PieChart_LabelDefinition) GetLabelSource() PieChart_LabelSource {
	if x != nil {
		return x.LabelSource
	}
	return PieChart_LABEL_SOURCE_UNSPECIFIED
}

func (x *PieChart_LabelDefinition) GetIsVisible() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsVisible
	}
	return nil
}

func (x *PieChart_LabelDefinition) GetShowName() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowName
	}
	return nil
}

func (x *PieChart_LabelDefinition) GetShowValue() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowValue
	}
	return nil
}

func (x *PieChart_LabelDefinition) GetShowPercentage() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowPercentage
	}
	return nil
}

type PieChart_LogsQuery struct {
	state                 protoimpl.MessageState       `protogen:"open.v1"`
	LuceneQuery           *common1.LuceneQuery         `protobuf:"bytes,1,opt,name=lucene_query,json=luceneQuery,proto3" json:"lucene_query,omitempty"`
	Aggregation           *common1.LogsAggregation     `protobuf:"bytes,2,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
	Filters               []*filters.Filter_LogsFilter `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	GroupNames            []*wrapperspb.StringValue    `protobuf:"bytes,4,rep,name=group_names,json=groupNames,proto3" json:"group_names,omitempty"`
	StackedGroupName      *wrapperspb.StringValue      `protobuf:"bytes,5,opt,name=stacked_group_name,json=stackedGroupName,proto3" json:"stacked_group_name,omitempty"`
	GroupNamesFields      []*common1.ObservationField  `protobuf:"bytes,6,rep,name=group_names_fields,json=groupNamesFields,proto3" json:"group_names_fields,omitempty"`
	StackedGroupNameField *common1.ObservationField    `protobuf:"bytes,7,opt,name=stacked_group_name_field,json=stackedGroupNameField,proto3" json:"stacked_group_name_field,omitempty"`
	TimeFrame             *common1.TimeFrameSelect     `protobuf:"bytes,8,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PieChart_LogsQuery) Reset() {
	*x = PieChart_LogsQuery{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PieChart_LogsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieChart_LogsQuery) ProtoMessage() {}

func (x *PieChart_LogsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieChart_LogsQuery.ProtoReflect.Descriptor instead.
func (*PieChart_LogsQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_rawDescGZIP(), []int{0, 3}
}

func (x *PieChart_LogsQuery) GetLuceneQuery() *common1.LuceneQuery {
	if x != nil {
		return x.LuceneQuery
	}
	return nil
}

func (x *PieChart_LogsQuery) GetAggregation() *common1.LogsAggregation {
	if x != nil {
		return x.Aggregation
	}
	return nil
}

func (x *PieChart_LogsQuery) GetFilters() []*filters.Filter_LogsFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *PieChart_LogsQuery) GetGroupNames() []*wrapperspb.StringValue {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

func (x *PieChart_LogsQuery) GetStackedGroupName() *wrapperspb.StringValue {
	if x != nil {
		return x.StackedGroupName
	}
	return nil
}

func (x *PieChart_LogsQuery) GetGroupNamesFields() []*common1.ObservationField {
	if x != nil {
		return x.GroupNamesFields
	}
	return nil
}

func (x *PieChart_LogsQuery) GetStackedGroupNameField() *common1.ObservationField {
	if x != nil {
		return x.StackedGroupNameField
	}
	return nil
}

func (x *PieChart_LogsQuery) GetTimeFrame() *common1.TimeFrameSelect {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

type PieChart_SpansQuery struct {
	state                 protoimpl.MessageState          `protogen:"open.v1"`
	LuceneQuery           *common1.LuceneQuery            `protobuf:"bytes,1,opt,name=lucene_query,json=luceneQuery,proto3" json:"lucene_query,omitempty"`
	Aggregation           *common1.SpansAggregation       `protobuf:"bytes,2,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
	Filters               []*filters.Filter_SpansFilter   `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	GroupNames            []*common1.SpanField            `protobuf:"bytes,4,rep,name=group_names,json=groupNames,proto3" json:"group_names,omitempty"`
	StackedGroupName      *common1.SpanField              `protobuf:"bytes,5,opt,name=stacked_group_name,json=stackedGroupName,proto3" json:"stacked_group_name,omitempty"`
	TimeFrame             *common1.TimeFrameSelect        `protobuf:"bytes,6,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	GroupNamesFields      []*common1.SpanObservationField `protobuf:"bytes,7,rep,name=group_names_fields,json=groupNamesFields,proto3" json:"group_names_fields,omitempty"`
	StackedGroupNameField *common1.SpanObservationField   `protobuf:"bytes,8,opt,name=stacked_group_name_field,json=stackedGroupNameField,proto3" json:"stacked_group_name_field,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PieChart_SpansQuery) Reset() {
	*x = PieChart_SpansQuery{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PieChart_SpansQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieChart_SpansQuery) ProtoMessage() {}

func (x *PieChart_SpansQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieChart_SpansQuery.ProtoReflect.Descriptor instead.
func (*PieChart_SpansQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_rawDescGZIP(), []int{0, 4}
}

func (x *PieChart_SpansQuery) GetLuceneQuery() *common1.LuceneQuery {
	if x != nil {
		return x.LuceneQuery
	}
	return nil
}

func (x *PieChart_SpansQuery) GetAggregation() *common1.SpansAggregation {
	if x != nil {
		return x.Aggregation
	}
	return nil
}

func (x *PieChart_SpansQuery) GetFilters() []*filters.Filter_SpansFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *PieChart_SpansQuery) GetGroupNames() []*common1.SpanField {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

func (x *PieChart_SpansQuery) GetStackedGroupName() *common1.SpanField {
	if x != nil {
		return x.StackedGroupName
	}
	return nil
}

func (x *PieChart_SpansQuery) GetTimeFrame() *common1.TimeFrameSelect {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *PieChart_SpansQuery) GetGroupNamesFields() []*common1.SpanObservationField {
	if x != nil {
		return x.GroupNamesFields
	}
	return nil
}

func (x *PieChart_SpansQuery) GetStackedGroupNameField() *common1.SpanObservationField {
	if x != nil {
		return x.StackedGroupNameField
	}
	return nil
}

type PieChart_MetricsQuery struct {
	state            protoimpl.MessageState          `protogen:"open.v1"`
	PromqlQuery      *common1.PromQlQuery            `protobuf:"bytes,1,opt,name=promql_query,json=promqlQuery,proto3" json:"promql_query,omitempty"`
	Filters          []*filters.Filter_MetricsFilter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	GroupNames       []*wrapperspb.StringValue       `protobuf:"bytes,3,rep,name=group_names,json=groupNames,proto3" json:"group_names,omitempty"`
	StackedGroupName *wrapperspb.StringValue         `protobuf:"bytes,4,opt,name=stacked_group_name,json=stackedGroupName,proto3" json:"stacked_group_name,omitempty"`
	EditorMode       common.MetricsQueryEditorMode   `protobuf:"varint,5,opt,name=editor_mode,json=editorMode,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.common.MetricsQueryEditorMode" json:"editor_mode,omitempty"`
	TimeFrame        *common1.TimeFrameSelect        `protobuf:"bytes,6,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	PromqlQueryType  common1.PromQLQueryType         `protobuf:"varint,7,opt,name=promql_query_type,json=promqlQueryType,proto3,enum=com.coralogixapis.dashboards.v1.common.PromQLQueryType" json:"promql_query_type,omitempty"`
	Aggregation      common.Aggregation              `protobuf:"varint,8,opt,name=aggregation,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.common.Aggregation" json:"aggregation,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PieChart_MetricsQuery) Reset() {
	*x = PieChart_MetricsQuery{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PieChart_MetricsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieChart_MetricsQuery) ProtoMessage() {}

func (x *PieChart_MetricsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieChart_MetricsQuery.ProtoReflect.Descriptor instead.
func (*PieChart_MetricsQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_rawDescGZIP(), []int{0, 5}
}

func (x *PieChart_MetricsQuery) GetPromqlQuery() *common1.PromQlQuery {
	if x != nil {
		return x.PromqlQuery
	}
	return nil
}

func (x *PieChart_MetricsQuery) GetFilters() []*filters.Filter_MetricsFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *PieChart_MetricsQuery) GetGroupNames() []*wrapperspb.StringValue {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

func (x *PieChart_MetricsQuery) GetStackedGroupName() *wrapperspb.StringValue {
	if x != nil {
		return x.StackedGroupName
	}
	return nil
}

func (x *PieChart_MetricsQuery) GetEditorMode() common.MetricsQueryEditorMode {
	if x != nil {
		return x.EditorMode
	}
	return common.MetricsQueryEditorMode(0)
}

func (x *PieChart_MetricsQuery) GetTimeFrame() *common1.TimeFrameSelect {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *PieChart_MetricsQuery) GetPromqlQueryType() common1.PromQLQueryType {
	if x != nil {
		return x.PromqlQueryType
	}
	return common1.PromQLQueryType(0)
}

func (x *PieChart_MetricsQuery) GetAggregation() common.Aggregation {
	if x != nil {
		return x.Aggregation
	}
	return common.Aggregation(0)
}

type PieChart_DataprimeQuery struct {
	state            protoimpl.MessageState    `protogen:"open.v1"`
	DataprimeQuery   *common1.DataprimeQuery   `protobuf:"bytes,1,opt,name=dataprime_query,json=dataprimeQuery,proto3" json:"dataprime_query,omitempty"`
	Filters          []*filters.Filter_Source  `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	GroupNames       []*wrapperspb.StringValue `protobuf:"bytes,3,rep,name=group_names,json=groupNames,proto3" json:"group_names,omitempty"`
	StackedGroupName *wrapperspb.StringValue   `protobuf:"bytes,4,opt,name=stacked_group_name,json=stackedGroupName,proto3" json:"stacked_group_name,omitempty"`
	TimeFrame        *common1.TimeFrameSelect  `protobuf:"bytes,5,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PieChart_DataprimeQuery) Reset() {
	*x = PieChart_DataprimeQuery{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PieChart_DataprimeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieChart_DataprimeQuery) ProtoMessage() {}

func (x *PieChart_DataprimeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieChart_DataprimeQuery.ProtoReflect.Descriptor instead.
func (*PieChart_DataprimeQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_rawDescGZIP(), []int{0, 6}
}

func (x *PieChart_DataprimeQuery) GetDataprimeQuery() *common1.DataprimeQuery {
	if x != nil {
		return x.DataprimeQuery
	}
	return nil
}

func (x *PieChart_DataprimeQuery) GetFilters() []*filters.Filter_Source {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *PieChart_DataprimeQuery) GetGroupNames() []*wrapperspb.StringValue {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

func (x *PieChart_DataprimeQuery) GetStackedGroupName() *wrapperspb.StringValue {
	if x != nil {
		return x.StackedGroupName
	}
	return nil
}

func (x *PieChart_DataprimeQuery) GetTimeFrame() *common1.TimeFrameSelect {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

var File_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto protoreflect.FileDescriptor

const file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_rawDesc = "" +
	"\n" +
	";com/coralogixapis/dashboards/v1/ast/widgets/pie_chart.proto\x12+com.coralogixapis.dashboards.v1.ast.widgets\x1a8com/coralogixapis/dashboards/v1/ast/filters/filter.proto\x1aGcom/coralogixapis/dashboards/v1/ast/widgets/common/data_mode_type.proto\x1a?com/coralogixapis/dashboards/v1/ast/widgets/common/legend.proto\x1aQcom/coralogixapis/dashboards/v1/ast/widgets/common/metrics_aggregation_type.proto\x1aRcom/coralogixapis/dashboards/v1/ast/widgets/common/metrics_query_editor_mode.proto\x1a>com/coralogixapis/dashboards/v1/ast/widgets/common/units.proto\x1a=com/coralogixapis/dashboards/v1/common/logs_aggregation.proto\x1a>com/coralogixapis/dashboards/v1/common/observation_field.proto\x1a2com/coralogixapis/dashboards/v1/common/query.proto\x1a7com/coralogixapis/dashboards/v1/common/span_field.proto\x1a>com/coralogixapis/dashboards/v1/common/spans_aggregation.proto\x1a7com/coralogixapis/dashboards/v1/common/time_frame.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a.protoc-gen-openapiv3/options/annotations.proto\"\xc1?\n" +
	"\bPieChart\x12d\n" +
	"\x05query\x18\x01 \x01(\v2;.com.coralogixapis.dashboards.v1.ast.widgets.PieChart.QueryB\x11\x9aA\x0e2\fQuery objectR\x05query\x12z\n" +
	"\x14max_slices_per_chart\x18\x02 \x01(\v2\x1b.google.protobuf.Int32ValueB,\x9aA)2#Maximum number of slices on a chartJ\x0224R\x11maxSlicesPerChart\x12\x8e\x01\n" +
	"\x14min_slice_percentage\x18\x03 \x01(\v2\x1b.google.protobuf.Int32ValueB?\x9aA<27Minimum percentage threshold for slices to be displayedJ\x015R\x12minSlicePercentage\x12\x96\x01\n" +
	"\x10stack_definition\x18\x04 \x01(\v2E.com.coralogixapis.dashboards.v1.ast.widgets.PieChart.StackDefinitionB$\x9aA!2\x1fConfiguration of stacked slicesR\x0fstackDefinition\x12\x90\x01\n" +
	"\x10label_definition\x18\x05 \x01(\v2E.com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LabelDefinitionB\x1e\x9aA\x1b2\x19Settings for slice labelsR\x0flabelDefinition\x12i\n" +
	"\vshow_legend\x18\x06 \x01(\v2\x1a.google.protobuf.BoolValueB,\x9aA)2'Indicates whether to display the legendR\n" +
	"showLegend\x12\xb1\x01\n" +
	"\x13group_name_template\x18\a \x01(\v2\x1c.google.protobuf.StringValueBc\x9aA`27Custom template name for a group, can contain variablesJ%{ \"value\": \"Slice - {{ variable }}\" }R\x11groupNameTemplate\x12\x8f\x01\n" +
	"\x04unit\x18\b \x01(\x0e28.com.coralogixapis.dashboards.v1.ast.widgets.common.UnitBA\x9aA>29Unit of the value - one from a predefined list, or customJ\x010R\x04unit\x12\x90\x01\n" +
	"\fcolor_scheme\x18\t \x01(\v2\x1c.google.protobuf.StringValueBO\x9aAL22Applied color scheme, one of the predefined valuesJ\x16{ \"value\": \"classic\" }R\vcolorScheme\x12\x93\x01\n" +
	"\x0edata_mode_type\x18\n" +
	" \x01(\x0e2@.com.coralogixapis.dashboards.v1.ast.widgets.common.DataModeTypeB+\x9aA(2&Data mode type, either high or archiveR\fdataModeType\x12\xa0\x01\n" +
	"\vcustom_unit\x18\v \x01(\v2\x1c.google.protobuf.StringValueBa\x9aA^2HCustom unit (requires the unit field to be set to custom to take effect)J\x12{ \"value\": \"mph\" }R\n" +
	"customUnit\x12\x8f\x01\n" +
	"\adecimal\x18\f \x01(\v2\x1b.google.protobuf.Int32ValueBX\x9aAU2PNumber indicating the decimal precision of the numeric values, within range 0-15J\x015R\adecimal\x12q\n" +
	"\x06legend\x18\r \x01(\v2:.com.coralogixapis.dashboards.v1.ast.widgets.common.LegendB\x1d\x9aA\x1a2\x18Widget's legend settingsR\x06legend\x12\x88\x01\n" +
	"\vhash_colors\x18\x0e \x01(\v2\x1a.google.protobuf.BoolValueBK\x9aAH2?Whether to ignore color scheme and derive colors from algorithmJ\x05falseR\n" +
	"hashColors\x12\x89\x01\n" +
	"\x11decimal_precision\x18\x0f \x01(\v2\x1a.google.protobuf.BoolValueB@\x9aA=24Whether to render numeric value without abbreviationJ\x05falseR\x10decimalPrecision\x1a\x87\x03\n" +
	"\x05Query\x12U\n" +
	"\x04logs\x18\x01 \x01(\v2?.com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LogsQueryH\x00R\x04logs\x12X\n" +
	"\x05spans\x18\x02 \x01(\v2@.com.coralogixapis.dashboards.v1.ast.widgets.PieChart.SpansQueryH\x00R\x05spans\x12^\n" +
	"\ametrics\x18\x03 \x01(\v2B.com.coralogixapis.dashboards.v1.ast.widgets.PieChart.MetricsQueryH\x00R\ametrics\x12d\n" +
	"\tdataprime\x18\x04 \x01(\v2D.com.coralogixapis.dashboards.v1.ast.widgets.PieChart.DataprimeQueryH\x00R\tdataprimeB\a\n" +
	"\x05value\x1a\xe0\x02\n" +
	"\x0fStackDefinition\x12\x82\x01\n" +
	"\x14max_slices_per_stack\x18\x01 \x01(\v2\x1b.google.protobuf.Int32ValueB4\x9aA12/How many slices can fit in a single slice stackR\x11maxSlicesPerStack\x12\xc7\x01\n" +
	"\x13stack_name_template\x18\x02 \x01(\v2\x1c.google.protobuf.StringValueBy\x9aAv28Custom template name of an individual slice in the stackJ:{ \"value\": \"Slice {{ group }} - subslice {{ subgroup }}\" }R\x11stackNameTemplate\x1a\xc3\x04\n" +
	"\x0fLabelDefinition\x12~\n" +
	"\flabel_source\x18\x01 \x01(\x0e2A.com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LabelSourceB\x18\x9aA\x152\x13Source of the labelR\vlabelSource\x12R\n" +
	"\n" +
	"is_visible\x18\x02 \x01(\v2\x1a.google.protobuf.BoolValueB\x17\x9aA\x142\x12Are labels visibleR\tisVisible\x12l\n" +
	"\tshow_name\x18\x03 \x01(\v2\x1a.google.protobuf.BoolValueB3\x9aA02.Whether to show the name of slice in the labelR\bshowName\x12k\n" +
	"\n" +
	"show_value\x18\x04 \x01(\v2\x1a.google.protobuf.BoolValueB0\x9aA-2+Whether to show value of slice in the labelR\tshowValue\x12\x80\x01\n" +
	"\x0fshow_percentage\x18\x05 \x01(\v2\x1a.google.protobuf.BoolValueB;\x9aA826Whether to show percentage value of slice in the labelR\x0eshowPercentage\x1a\xf5\t\n" +
	"\tLogsQuery\x12\xba\x01\n" +
	"\flucene_query\x18\x01 \x01(\v23.com.coralogixapis.dashboards.v1.common.LuceneQueryBb\x9aA_2$A Lucene query string to search logsJ7{ \"value\": \"coralogix.metadata.subsystemName: cx_rum\" }R\vluceneQuery\x12z\n" +
	"\vaggregation\x18\x02 \x01(\v27.com.coralogixapis.dashboards.v1.common.LogsAggregationB\x1f\x9aA\x1c2\x1aQuery aggregation functionR\vaggregation\x12\x8d\x01\n" +
	"\afilters\x18\x03 \x03(\v2>.com.coralogixapis.dashboards.v1.ast.filters.Filter.LogsFilterB3\x9aA02.List of filters that narrow down query resultsR\afilters\x12r\n" +
	"\vgroup_names\x18\x04 \x03(\v2\x1c.google.protobuf.StringValueB3\x9aA02.List of field names to group the query resultsR\n" +
	"groupNames\x12\x8c\x01\n" +
	"\x12stacked_group_name\x18\x05 \x01(\v2\x1c.google.protobuf.StringValueB@\x9aA=2;Field name by which results are stacked in individual groupR\x10stackedGroupName\x12\x9c\x01\n" +
	"\x12group_names_fields\x18\x06 \x03(\v28.com.coralogixapis.dashboards.v1.common.ObservationFieldB4\x9aA12/List of observation fields to group the resultsR\x10groupNamesFields\x12\xab\x01\n" +
	"\x18stacked_group_name_field\x18\a \x01(\v28.com.coralogixapis.dashboards.v1.common.ObservationFieldB8\x9aA523Observation field by results are stacked in a groupR\x15stackedGroupNameField\x12\x9f\x01\n" +
	"\n" +
	"time_frame\x18\b \x01(\v27.com.coralogixapis.dashboards.v1.common.TimeFrameSelectBG\x9aAD2BSpecifies the time period for which the results should be returnedR\ttimeFrame:-\x9aA*\n" +
	"(*\tLogsQuery2\x1bA logs variant of the query\x1a\x91\n" +
	"\n" +
	"\n" +
	"SpansQuery\x12\x89\x01\n" +
	"\flucene_query\x18\x01 \x01(\v23.com.coralogixapis.dashboards.v1.common.LuceneQueryB1\x9aA.2,A Lucene query string to search span recordsR\vluceneQuery\x12\x80\x01\n" +
	"\vaggregation\x18\x02 \x01(\v28.com.coralogixapis.dashboards.v1.common.SpansAggregationB$\x9aA!2\x1fSpan query aggregation functionR\vaggregation\x12z\n" +
	"\afilters\x18\x03 \x03(\v2?.com.coralogixapis.dashboards.v1.ast.filters.Filter.SpansFilterB\x1f\x9aA\x1c2\x1aList of span query filtersR\afilters\x12\x86\x01\n" +
	"\vgroup_names\x18\x04 \x03(\v21.com.coralogixapis.dashboards.v1.common.SpanFieldB2\x9aA/2-List of field names to group the span recordsR\n" +
	"groupNames\x12\xa1\x01\n" +
	"\x12stacked_group_name\x18\x05 \x01(\v21.com.coralogixapis.dashboards.v1.common.SpanFieldB@\x9aA=2;Field name by which results are stacked in individual groupR\x10stackedGroupName\x12\x9f\x01\n" +
	"\n" +
	"time_frame\x18\x06 \x01(\v27.com.coralogixapis.dashboards.v1.common.TimeFrameSelectBG\x9aAD2BSpecifies the time period for which the records should be returnedR\ttimeFrame\x12\xb1\x01\n" +
	"\x12group_names_fields\x18\a \x03(\v2<.com.coralogixapis.dashboards.v1.common.SpanObservationFieldBE\x9aAB2@A list of observation fields definitions to group the records byR\x10groupNamesFields\x12\xc3\x01\n" +
	"\x18stacked_group_name_field\x18\b \x01(\v2<.com.coralogixapis.dashboards.v1.common.SpanObservationFieldBL\x9aAI2GObservation field definition by which groups are divided into subgroupsR\x15stackedGroupNameField:/\x9aA,\n" +
	"**\n" +
	"SpansQuery2\x1cA spans variant of the query\x1a\xfa\t\n" +
	"\fMetricsQuery\x12\xa3\x01\n" +
	"\fpromql_query\x18\x01 \x01(\v23.com.coralogixapis.dashboards.v1.common.PromQlQueryBK\x9aAH2(PromQL query string for querying metricsJ\x1c{ \"value\": \"up{job='abc'}\" }R\vpromqlQuery\x12y\n" +
	"\afilters\x18\x02 \x03(\v2A.com.coralogixapis.dashboards.v1.ast.filters.Filter.MetricsFilterB\x1c\x9aA\x192\x17List of metrics filtersR\afilters\x12{\n" +
	"\vgroup_names\x18\x03 \x03(\v2\x1c.google.protobuf.StringValueB<\x9aA927List of field names by which metric results are groupedR\n" +
	"groupNames\x12\x91\x01\n" +
	"\x12stacked_group_name\x18\x04 \x01(\v2\x1c.google.protobuf.StringValueBE\x9aAB2@Field name by which results in groups are divided into subgroupsR\x10stackedGroupName\x12\xc5\x01\n" +
	"\veditor_mode\x18\x05 \x01(\x0e2J.com.coralogixapis.dashboards.v1.ast.widgets.common.MetricsQueryEditorModeBX\x9aAU2PType of the query editor used to generate the query, can be text or builder modeJ\x011R\n" +
	"editorMode\x12\x9e\x01\n" +
	"\n" +
	"time_frame\x18\x06 \x01(\v27.com.coralogixapis.dashboards.v1.common.TimeFrameSelectBF\x9aAC2ASpecifies the time period for which the result should be returnedR\ttimeFrame\x12\x9b\x01\n" +
	"\x11promql_query_type\x18\a \x01(\x0e27.com.coralogixapis.dashboards.v1.common.PromQLQueryTypeB6\x9aA321Type of the PromQL query, can be Range or InstantR\x0fpromqlQueryType\x12|\n" +
	"\vaggregation\x18\b \x01(\x0e2?.com.coralogixapis.dashboards.v1.ast.widgets.common.AggregationB\x19\x9aA\x162\x14Aggregation functionR\vaggregation:3\x9aA0\n" +
	".*\fMetricsQuery2\x1eA metrics variant of the query\x1a\xe3\x05\n" +
	"\x0eDataprimeQuery\x12z\n" +
	"\x0fdataprime_query\x18\x01 \x01(\v26.com.coralogixapis.dashboards.v1.common.DataprimeQueryB\x19\x9aA\x162\x14Dataprime query textR\x0edataprimeQuery\x12p\n" +
	"\afilters\x18\x02 \x03(\v2:.com.coralogixapis.dashboards.v1.ast.filters.Filter.SourceB\x1a\x9aA\x172\x15List of query filtersR\afilters\x12t\n" +
	"\vgroup_names\x18\x03 \x03(\v2\x1c.google.protobuf.StringValueB5\x9aA220List of field names by which results are groupedR\n" +
	"groupNames\x12\x91\x01\n" +
	"\x12stacked_group_name\x18\x04 \x01(\v2\x1c.google.protobuf.StringValueBE\x9aAB2@Field name by which results in groups are divided into subgroupsR\x10stackedGroupName\x12\x9f\x01\n" +
	"\n" +
	"time_frame\x18\x05 \x01(\v27.com.coralogixapis.dashboards.v1.common.TimeFrameSelectBG\x9aAD2BSpecifies the time period for which the records should be returnedR\ttimeFrame:7\x9aA4\n" +
	"2*\x0eDataprimeQuery2 A Dataprime variant of the query\"[\n" +
	"\vLabelSource\x12\x1c\n" +
	"\x18LABEL_SOURCE_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12LABEL_SOURCE_INNER\x10\x01\x12\x16\n" +
	"\x12LABEL_SOURCE_STACK\x10\x02b\x06proto3"

var (
	file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_rawDescOnce sync.Once
	file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_rawDescData []byte
)

func file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_rawDesc), len(file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_rawDesc)))
	})
	return file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_rawDescData
}

var file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_goTypes = []any{
	(PieChart_LabelSource)(0),            // 0: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LabelSource
	(*PieChart)(nil),                     // 1: com.coralogixapis.dashboards.v1.ast.widgets.PieChart
	(*PieChart_Query)(nil),               // 2: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.Query
	(*PieChart_StackDefinition)(nil),     // 3: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.StackDefinition
	(*PieChart_LabelDefinition)(nil),     // 4: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LabelDefinition
	(*PieChart_LogsQuery)(nil),           // 5: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LogsQuery
	(*PieChart_SpansQuery)(nil),          // 6: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.SpansQuery
	(*PieChart_MetricsQuery)(nil),        // 7: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.MetricsQuery
	(*PieChart_DataprimeQuery)(nil),      // 8: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.DataprimeQuery
	(*wrapperspb.Int32Value)(nil),        // 9: google.protobuf.Int32Value
	(*wrapperspb.BoolValue)(nil),         // 10: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil),       // 11: google.protobuf.StringValue
	(common.Unit)(0),                     // 12: com.coralogixapis.dashboards.v1.ast.widgets.common.Unit
	(common.DataModeType)(0),             // 13: com.coralogixapis.dashboards.v1.ast.widgets.common.DataModeType
	(*common.Legend)(nil),                // 14: com.coralogixapis.dashboards.v1.ast.widgets.common.Legend
	(*common1.LuceneQuery)(nil),          // 15: com.coralogixapis.dashboards.v1.common.LuceneQuery
	(*common1.LogsAggregation)(nil),      // 16: com.coralogixapis.dashboards.v1.common.LogsAggregation
	(*filters.Filter_LogsFilter)(nil),    // 17: com.coralogixapis.dashboards.v1.ast.filters.Filter.LogsFilter
	(*common1.ObservationField)(nil),     // 18: com.coralogixapis.dashboards.v1.common.ObservationField
	(*common1.TimeFrameSelect)(nil),      // 19: com.coralogixapis.dashboards.v1.common.TimeFrameSelect
	(*common1.SpansAggregation)(nil),     // 20: com.coralogixapis.dashboards.v1.common.SpansAggregation
	(*filters.Filter_SpansFilter)(nil),   // 21: com.coralogixapis.dashboards.v1.ast.filters.Filter.SpansFilter
	(*common1.SpanField)(nil),            // 22: com.coralogixapis.dashboards.v1.common.SpanField
	(*common1.SpanObservationField)(nil), // 23: com.coralogixapis.dashboards.v1.common.SpanObservationField
	(*common1.PromQlQuery)(nil),          // 24: com.coralogixapis.dashboards.v1.common.PromQlQuery
	(*filters.Filter_MetricsFilter)(nil), // 25: com.coralogixapis.dashboards.v1.ast.filters.Filter.MetricsFilter
	(common.MetricsQueryEditorMode)(0),   // 26: com.coralogixapis.dashboards.v1.ast.widgets.common.MetricsQueryEditorMode
	(common1.PromQLQueryType)(0),         // 27: com.coralogixapis.dashboards.v1.common.PromQLQueryType
	(common.Aggregation)(0),              // 28: com.coralogixapis.dashboards.v1.ast.widgets.common.Aggregation
	(*common1.DataprimeQuery)(nil),       // 29: com.coralogixapis.dashboards.v1.common.DataprimeQuery
	(*filters.Filter_Source)(nil),        // 30: com.coralogixapis.dashboards.v1.ast.filters.Filter.Source
}
var file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_depIdxs = []int32{
	2,  // 0: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.query:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.PieChart.Query
	9,  // 1: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.max_slices_per_chart:type_name -> google.protobuf.Int32Value
	9,  // 2: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.min_slice_percentage:type_name -> google.protobuf.Int32Value
	3,  // 3: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.stack_definition:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.PieChart.StackDefinition
	4,  // 4: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.label_definition:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LabelDefinition
	10, // 5: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.show_legend:type_name -> google.protobuf.BoolValue
	11, // 6: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.group_name_template:type_name -> google.protobuf.StringValue
	12, // 7: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.unit:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.Unit
	11, // 8: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.color_scheme:type_name -> google.protobuf.StringValue
	13, // 9: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.data_mode_type:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.DataModeType
	11, // 10: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.custom_unit:type_name -> google.protobuf.StringValue
	9,  // 11: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.decimal:type_name -> google.protobuf.Int32Value
	14, // 12: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.legend:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.Legend
	10, // 13: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.hash_colors:type_name -> google.protobuf.BoolValue
	10, // 14: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.decimal_precision:type_name -> google.protobuf.BoolValue
	5,  // 15: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.Query.logs:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LogsQuery
	6,  // 16: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.Query.spans:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.PieChart.SpansQuery
	7,  // 17: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.Query.metrics:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.PieChart.MetricsQuery
	8,  // 18: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.Query.dataprime:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.PieChart.DataprimeQuery
	9,  // 19: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.StackDefinition.max_slices_per_stack:type_name -> google.protobuf.Int32Value
	11, // 20: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.StackDefinition.stack_name_template:type_name -> google.protobuf.StringValue
	0,  // 21: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LabelDefinition.label_source:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LabelSource
	10, // 22: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LabelDefinition.is_visible:type_name -> google.protobuf.BoolValue
	10, // 23: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LabelDefinition.show_name:type_name -> google.protobuf.BoolValue
	10, // 24: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LabelDefinition.show_value:type_name -> google.protobuf.BoolValue
	10, // 25: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LabelDefinition.show_percentage:type_name -> google.protobuf.BoolValue
	15, // 26: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LogsQuery.lucene_query:type_name -> com.coralogixapis.dashboards.v1.common.LuceneQuery
	16, // 27: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LogsQuery.aggregation:type_name -> com.coralogixapis.dashboards.v1.common.LogsAggregation
	17, // 28: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LogsQuery.filters:type_name -> com.coralogixapis.dashboards.v1.ast.filters.Filter.LogsFilter
	11, // 29: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LogsQuery.group_names:type_name -> google.protobuf.StringValue
	11, // 30: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LogsQuery.stacked_group_name:type_name -> google.protobuf.StringValue
	18, // 31: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LogsQuery.group_names_fields:type_name -> com.coralogixapis.dashboards.v1.common.ObservationField
	18, // 32: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LogsQuery.stacked_group_name_field:type_name -> com.coralogixapis.dashboards.v1.common.ObservationField
	19, // 33: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.LogsQuery.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrameSelect
	15, // 34: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.SpansQuery.lucene_query:type_name -> com.coralogixapis.dashboards.v1.common.LuceneQuery
	20, // 35: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.SpansQuery.aggregation:type_name -> com.coralogixapis.dashboards.v1.common.SpansAggregation
	21, // 36: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.SpansQuery.filters:type_name -> com.coralogixapis.dashboards.v1.ast.filters.Filter.SpansFilter
	22, // 37: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.SpansQuery.group_names:type_name -> com.coralogixapis.dashboards.v1.common.SpanField
	22, // 38: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.SpansQuery.stacked_group_name:type_name -> com.coralogixapis.dashboards.v1.common.SpanField
	19, // 39: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.SpansQuery.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrameSelect
	23, // 40: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.SpansQuery.group_names_fields:type_name -> com.coralogixapis.dashboards.v1.common.SpanObservationField
	23, // 41: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.SpansQuery.stacked_group_name_field:type_name -> com.coralogixapis.dashboards.v1.common.SpanObservationField
	24, // 42: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.MetricsQuery.promql_query:type_name -> com.coralogixapis.dashboards.v1.common.PromQlQuery
	25, // 43: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.MetricsQuery.filters:type_name -> com.coralogixapis.dashboards.v1.ast.filters.Filter.MetricsFilter
	11, // 44: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.MetricsQuery.group_names:type_name -> google.protobuf.StringValue
	11, // 45: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.MetricsQuery.stacked_group_name:type_name -> google.protobuf.StringValue
	26, // 46: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.MetricsQuery.editor_mode:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.MetricsQueryEditorMode
	19, // 47: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.MetricsQuery.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrameSelect
	27, // 48: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.MetricsQuery.promql_query_type:type_name -> com.coralogixapis.dashboards.v1.common.PromQLQueryType
	28, // 49: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.MetricsQuery.aggregation:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.Aggregation
	29, // 50: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.DataprimeQuery.dataprime_query:type_name -> com.coralogixapis.dashboards.v1.common.DataprimeQuery
	30, // 51: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.DataprimeQuery.filters:type_name -> com.coralogixapis.dashboards.v1.ast.filters.Filter.Source
	11, // 52: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.DataprimeQuery.group_names:type_name -> google.protobuf.StringValue
	11, // 53: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.DataprimeQuery.stacked_group_name:type_name -> google.protobuf.StringValue
	19, // 54: com.coralogixapis.dashboards.v1.ast.widgets.PieChart.DataprimeQuery.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrameSelect
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_init() }
func file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_init() {
	if File_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto != nil {
		return
	}
	file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_msgTypes[1].OneofWrappers = []any{
		(*PieChart_Query_Logs)(nil),
		(*PieChart_Query_Spans)(nil),
		(*PieChart_Query_Metrics)(nil),
		(*PieChart_Query_Dataprime)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_rawDesc), len(file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_depIdxs,
		EnumInfos:         file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_enumTypes,
		MessageInfos:      file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto = out.File
	file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_goTypes = nil
	file_com_coralogixapis_dashboards_v1_ast_widgets_pie_chart_proto_depIdxs = nil
}
