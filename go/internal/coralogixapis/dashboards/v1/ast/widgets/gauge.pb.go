// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: com/coralogixapis/dashboards/v1/ast/widgets/gauge.proto

package widgets

import (
	filters "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/dashboards/v1/ast/filters"
	common "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/dashboards/v1/ast/widgets/common"
	common1 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/dashboards/v1/common"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv3/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Gauge_Aggregation int32

const (
	Gauge_AGGREGATION_UNSPECIFIED Gauge_Aggregation = 0
	Gauge_AGGREGATION_LAST        Gauge_Aggregation = 1
	Gauge_AGGREGATION_MIN         Gauge_Aggregation = 2
	Gauge_AGGREGATION_MAX         Gauge_Aggregation = 3
	Gauge_AGGREGATION_AVG         Gauge_Aggregation = 4
	Gauge_AGGREGATION_SUM         Gauge_Aggregation = 5
)

// Enum value maps for Gauge_Aggregation.
var (
	Gauge_Aggregation_name = map[int32]string{
		0: "AGGREGATION_UNSPECIFIED",
		1: "AGGREGATION_LAST",
		2: "AGGREGATION_MIN",
		3: "AGGREGATION_MAX",
		4: "AGGREGATION_AVG",
		5: "AGGREGATION_SUM",
	}
	Gauge_Aggregation_value = map[string]int32{
		"AGGREGATION_UNSPECIFIED": 0,
		"AGGREGATION_LAST":        1,
		"AGGREGATION_MIN":         2,
		"AGGREGATION_MAX":         3,
		"AGGREGATION_AVG":         4,
		"AGGREGATION_SUM":         5,
	}
)

func (x Gauge_Aggregation) Enum() *Gauge_Aggregation {
	p := new(Gauge_Aggregation)
	*p = x
	return p
}

func (x Gauge_Aggregation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gauge_Aggregation) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_enumTypes[0].Descriptor()
}

func (Gauge_Aggregation) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_enumTypes[0]
}

func (x Gauge_Aggregation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gauge_Aggregation.Descriptor instead.
func (Gauge_Aggregation) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescGZIP(), []int{0, 0}
}

type Gauge_Unit int32

const (
	Gauge_UNIT_UNSPECIFIED          Gauge_Unit = 0
	Gauge_UNIT_NUMBER               Gauge_Unit = 1
	Gauge_UNIT_PERCENT              Gauge_Unit = 2
	Gauge_UNIT_MICROSECONDS         Gauge_Unit = 3
	Gauge_UNIT_MILLISECONDS         Gauge_Unit = 4
	Gauge_UNIT_SECONDS              Gauge_Unit = 5
	Gauge_UNIT_BYTES                Gauge_Unit = 6
	Gauge_UNIT_KBYTES               Gauge_Unit = 7
	Gauge_UNIT_MBYTES               Gauge_Unit = 8
	Gauge_UNIT_GBYTES               Gauge_Unit = 9
	Gauge_UNIT_BYTES_IEC            Gauge_Unit = 10
	Gauge_UNIT_KIBYTES              Gauge_Unit = 11
	Gauge_UNIT_MIBYTES              Gauge_Unit = 12
	Gauge_UNIT_GIBYTES              Gauge_Unit = 13
	Gauge_UNIT_EUR_CENTS            Gauge_Unit = 14
	Gauge_UNIT_EUR                  Gauge_Unit = 15
	Gauge_UNIT_USD_CENTS            Gauge_Unit = 16
	Gauge_UNIT_USD                  Gauge_Unit = 17
	Gauge_UNIT_CUSTOM               Gauge_Unit = 18
	Gauge_UNIT_PERCENT_ZERO_ONE     Gauge_Unit = 19
	Gauge_UNIT_PERCENT_ZERO_HUNDRED Gauge_Unit = 20
	Gauge_UNIT_NANOSECONDS          Gauge_Unit = 21
)

// Enum value maps for Gauge_Unit.
var (
	Gauge_Unit_name = map[int32]string{
		0:  "UNIT_UNSPECIFIED",
		1:  "UNIT_NUMBER",
		2:  "UNIT_PERCENT",
		3:  "UNIT_MICROSECONDS",
		4:  "UNIT_MILLISECONDS",
		5:  "UNIT_SECONDS",
		6:  "UNIT_BYTES",
		7:  "UNIT_KBYTES",
		8:  "UNIT_MBYTES",
		9:  "UNIT_GBYTES",
		10: "UNIT_BYTES_IEC",
		11: "UNIT_KIBYTES",
		12: "UNIT_MIBYTES",
		13: "UNIT_GIBYTES",
		14: "UNIT_EUR_CENTS",
		15: "UNIT_EUR",
		16: "UNIT_USD_CENTS",
		17: "UNIT_USD",
		18: "UNIT_CUSTOM",
		19: "UNIT_PERCENT_ZERO_ONE",
		20: "UNIT_PERCENT_ZERO_HUNDRED",
		21: "UNIT_NANOSECONDS",
	}
	Gauge_Unit_value = map[string]int32{
		"UNIT_UNSPECIFIED":          0,
		"UNIT_NUMBER":               1,
		"UNIT_PERCENT":              2,
		"UNIT_MICROSECONDS":         3,
		"UNIT_MILLISECONDS":         4,
		"UNIT_SECONDS":              5,
		"UNIT_BYTES":                6,
		"UNIT_KBYTES":               7,
		"UNIT_MBYTES":               8,
		"UNIT_GBYTES":               9,
		"UNIT_BYTES_IEC":            10,
		"UNIT_KIBYTES":              11,
		"UNIT_MIBYTES":              12,
		"UNIT_GIBYTES":              13,
		"UNIT_EUR_CENTS":            14,
		"UNIT_EUR":                  15,
		"UNIT_USD_CENTS":            16,
		"UNIT_USD":                  17,
		"UNIT_CUSTOM":               18,
		"UNIT_PERCENT_ZERO_ONE":     19,
		"UNIT_PERCENT_ZERO_HUNDRED": 20,
		"UNIT_NANOSECONDS":          21,
	}
)

func (x Gauge_Unit) Enum() *Gauge_Unit {
	p := new(Gauge_Unit)
	*p = x
	return p
}

func (x Gauge_Unit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gauge_Unit) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_enumTypes[1].Descriptor()
}

func (Gauge_Unit) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_enumTypes[1]
}

func (x Gauge_Unit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gauge_Unit.Descriptor instead.
func (Gauge_Unit) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescGZIP(), []int{0, 1}
}

type Gauge_ThresholdBy int32

const (
	Gauge_THRESHOLD_BY_UNSPECIFIED Gauge_ThresholdBy = 0
	Gauge_THRESHOLD_BY_VALUE       Gauge_ThresholdBy = 1
	Gauge_THRESHOLD_BY_BACKGROUND  Gauge_ThresholdBy = 2
)

// Enum value maps for Gauge_ThresholdBy.
var (
	Gauge_ThresholdBy_name = map[int32]string{
		0: "THRESHOLD_BY_UNSPECIFIED",
		1: "THRESHOLD_BY_VALUE",
		2: "THRESHOLD_BY_BACKGROUND",
	}
	Gauge_ThresholdBy_value = map[string]int32{
		"THRESHOLD_BY_UNSPECIFIED": 0,
		"THRESHOLD_BY_VALUE":       1,
		"THRESHOLD_BY_BACKGROUND":  2,
	}
)

func (x Gauge_ThresholdBy) Enum() *Gauge_ThresholdBy {
	p := new(Gauge_ThresholdBy)
	*p = x
	return p
}

func (x Gauge_ThresholdBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gauge_ThresholdBy) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_enumTypes[2].Descriptor()
}

func (Gauge_ThresholdBy) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_enumTypes[2]
}

func (x Gauge_ThresholdBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gauge_ThresholdBy.Descriptor instead.
func (Gauge_ThresholdBy) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescGZIP(), []int{0, 2}
}

type Gauge struct {
	state             protoimpl.MessageState  `protogen:"open.v1"`
	Query             *Gauge_Query            `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Min               *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=min,proto3" json:"min,omitempty"`
	Max               *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=max,proto3" json:"max,omitempty"`
	ShowInnerArc      *wrapperspb.BoolValue   `protobuf:"bytes,4,opt,name=show_inner_arc,json=showInnerArc,proto3" json:"show_inner_arc,omitempty"`
	ShowOuterArc      *wrapperspb.BoolValue   `protobuf:"bytes,5,opt,name=show_outer_arc,json=showOuterArc,proto3" json:"show_outer_arc,omitempty"`
	Unit              Gauge_Unit              `protobuf:"varint,6,opt,name=unit,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.Gauge_Unit" json:"unit,omitempty"`
	Thresholds        []*Gauge_Threshold      `protobuf:"bytes,7,rep,name=thresholds,proto3" json:"thresholds,omitempty"`
	DataModeType      common.DataModeType     `protobuf:"varint,8,opt,name=data_mode_type,json=dataModeType,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.common.DataModeType" json:"data_mode_type,omitempty"`
	ThresholdBy       Gauge_ThresholdBy       `protobuf:"varint,9,opt,name=threshold_by,json=thresholdBy,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.Gauge_ThresholdBy" json:"threshold_by,omitempty"`
	CustomUnit        *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=custom_unit,json=customUnit,proto3" json:"custom_unit,omitempty"`
	Decimal           *wrapperspb.Int32Value  `protobuf:"bytes,11,opt,name=decimal,proto3" json:"decimal,omitempty"`
	ThresholdType     common.ThresholdType    `protobuf:"varint,12,opt,name=threshold_type,json=thresholdType,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.common.ThresholdType" json:"threshold_type,omitempty"`
	Legend            *common.Legend          `protobuf:"bytes,13,opt,name=legend,proto3" json:"legend,omitempty"`
	LegendBy          common.LegendBy         `protobuf:"varint,14,opt,name=legend_by,json=legendBy,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.common.LegendBy" json:"legend_by,omitempty"`
	DisplaySeriesName *wrapperspb.BoolValue   `protobuf:"bytes,15,opt,name=display_series_name,json=displaySeriesName,proto3" json:"display_series_name,omitempty"`
	DecimalPrecision  *wrapperspb.BoolValue   `protobuf:"bytes,16,opt,name=decimal_precision,json=decimalPrecision,proto3" json:"decimal_precision,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Gauge) Reset() {
	*x = Gauge{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gauge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gauge) ProtoMessage() {}

func (x *Gauge) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gauge.ProtoReflect.Descriptor instead.
func (*Gauge) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescGZIP(), []int{0}
}

func (x *Gauge) GetQuery() *Gauge_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *Gauge) GetMin() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Gauge) GetMax() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Gauge) GetShowInnerArc() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowInnerArc
	}
	return nil
}

func (x *Gauge) GetShowOuterArc() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowOuterArc
	}
	return nil
}

func (x *Gauge) GetUnit() Gauge_Unit {
	if x != nil {
		return x.Unit
	}
	return Gauge_UNIT_UNSPECIFIED
}

func (x *Gauge) GetThresholds() []*Gauge_Threshold {
	if x != nil {
		return x.Thresholds
	}
	return nil
}

func (x *Gauge) GetDataModeType() common.DataModeType {
	if x != nil {
		return x.DataModeType
	}
	return common.DataModeType(0)
}

func (x *Gauge) GetThresholdBy() Gauge_ThresholdBy {
	if x != nil {
		return x.ThresholdBy
	}
	return Gauge_THRESHOLD_BY_UNSPECIFIED
}

func (x *Gauge) GetCustomUnit() *wrapperspb.StringValue {
	if x != nil {
		return x.CustomUnit
	}
	return nil
}

func (x *Gauge) GetDecimal() *wrapperspb.Int32Value {
	if x != nil {
		return x.Decimal
	}
	return nil
}

func (x *Gauge) GetThresholdType() common.ThresholdType {
	if x != nil {
		return x.ThresholdType
	}
	return common.ThresholdType(0)
}

func (x *Gauge) GetLegend() *common.Legend {
	if x != nil {
		return x.Legend
	}
	return nil
}

func (x *Gauge) GetLegendBy() common.LegendBy {
	if x != nil {
		return x.LegendBy
	}
	return common.LegendBy(0)
}

func (x *Gauge) GetDisplaySeriesName() *wrapperspb.BoolValue {
	if x != nil {
		return x.DisplaySeriesName
	}
	return nil
}

func (x *Gauge) GetDecimalPrecision() *wrapperspb.BoolValue {
	if x != nil {
		return x.DecimalPrecision
	}
	return nil
}

type Gauge_Query struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*Gauge_Query_Metrics
	//	*Gauge_Query_Logs
	//	*Gauge_Query_Spans
	//	*Gauge_Query_Dataprime
	Value         isGauge_Query_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Gauge_Query) Reset() {
	*x = Gauge_Query{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gauge_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gauge_Query) ProtoMessage() {}

func (x *Gauge_Query) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gauge_Query.ProtoReflect.Descriptor instead.
func (*Gauge_Query) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Gauge_Query) GetValue() isGauge_Query_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Gauge_Query) GetMetrics() *Gauge_MetricsQuery {
	if x != nil {
		if x, ok := x.Value.(*Gauge_Query_Metrics); ok {
			return x.Metrics
		}
	}
	return nil
}

func (x *Gauge_Query) GetLogs() *Gauge_LogsQuery {
	if x != nil {
		if x, ok := x.Value.(*Gauge_Query_Logs); ok {
			return x.Logs
		}
	}
	return nil
}

func (x *Gauge_Query) GetSpans() *Gauge_SpansQuery {
	if x != nil {
		if x, ok := x.Value.(*Gauge_Query_Spans); ok {
			return x.Spans
		}
	}
	return nil
}

func (x *Gauge_Query) GetDataprime() *Gauge_DataprimeQuery {
	if x != nil {
		if x, ok := x.Value.(*Gauge_Query_Dataprime); ok {
			return x.Dataprime
		}
	}
	return nil
}

type isGauge_Query_Value interface {
	isGauge_Query_Value()
}

type Gauge_Query_Metrics struct {
	Metrics *Gauge_MetricsQuery `protobuf:"bytes,1,opt,name=metrics,proto3,oneof"`
}

type Gauge_Query_Logs struct {
	Logs *Gauge_LogsQuery `protobuf:"bytes,2,opt,name=logs,proto3,oneof"`
}

type Gauge_Query_Spans struct {
	Spans *Gauge_SpansQuery `protobuf:"bytes,3,opt,name=spans,proto3,oneof"`
}

type Gauge_Query_Dataprime struct {
	Dataprime *Gauge_DataprimeQuery `protobuf:"bytes,4,opt,name=dataprime,proto3,oneof"`
}

func (*Gauge_Query_Metrics) isGauge_Query_Value() {}

func (*Gauge_Query_Logs) isGauge_Query_Value() {}

func (*Gauge_Query_Spans) isGauge_Query_Value() {}

func (*Gauge_Query_Dataprime) isGauge_Query_Value() {}

type Gauge_MetricsQuery struct {
	state           protoimpl.MessageState          `protogen:"open.v1"`
	PromqlQuery     *common1.PromQlQuery            `protobuf:"bytes,1,opt,name=promql_query,json=promqlQuery,proto3" json:"promql_query,omitempty"`
	Aggregation     Gauge_Aggregation               `protobuf:"varint,2,opt,name=aggregation,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.Gauge_Aggregation" json:"aggregation,omitempty"`
	Filters         []*filters.Filter_MetricsFilter `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	EditorMode      common.MetricsQueryEditorMode   `protobuf:"varint,4,opt,name=editor_mode,json=editorMode,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.common.MetricsQueryEditorMode" json:"editor_mode,omitempty"`
	TimeFrame       *common1.TimeFrameSelect        `protobuf:"bytes,5,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	PromqlQueryType common1.PromQLQueryType         `protobuf:"varint,6,opt,name=promql_query_type,json=promqlQueryType,proto3,enum=com.coralogixapis.dashboards.v1.common.PromQLQueryType" json:"promql_query_type,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Gauge_MetricsQuery) Reset() {
	*x = Gauge_MetricsQuery{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gauge_MetricsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gauge_MetricsQuery) ProtoMessage() {}

func (x *Gauge_MetricsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gauge_MetricsQuery.ProtoReflect.Descriptor instead.
func (*Gauge_MetricsQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Gauge_MetricsQuery) GetPromqlQuery() *common1.PromQlQuery {
	if x != nil {
		return x.PromqlQuery
	}
	return nil
}

func (x *Gauge_MetricsQuery) GetAggregation() Gauge_Aggregation {
	if x != nil {
		return x.Aggregation
	}
	return Gauge_AGGREGATION_UNSPECIFIED
}

func (x *Gauge_MetricsQuery) GetFilters() []*filters.Filter_MetricsFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Gauge_MetricsQuery) GetEditorMode() common.MetricsQueryEditorMode {
	if x != nil {
		return x.EditorMode
	}
	return common.MetricsQueryEditorMode(0)
}

func (x *Gauge_MetricsQuery) GetTimeFrame() *common1.TimeFrameSelect {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *Gauge_MetricsQuery) GetPromqlQueryType() common1.PromQLQueryType {
	if x != nil {
		return x.PromqlQueryType
	}
	return common1.PromQLQueryType(0)
}

type Gauge_LogsQuery struct {
	state           protoimpl.MessageState   `protogen:"open.v1"`
	LuceneQuery     *common1.LuceneQuery     `protobuf:"bytes,1,opt,name=lucene_query,json=luceneQuery,proto3" json:"lucene_query,omitempty"`
	LogsAggregation *common1.LogsAggregation `protobuf:"bytes,2,opt,name=logs_aggregation,json=logsAggregation,proto3" json:"logs_aggregation,omitempty"`
	// Deprecated: Marked as deprecated in com/coralogixapis/dashboards/v1/ast/widgets/gauge.proto.
	Aggregation   Gauge_Aggregation            `protobuf:"varint,3,opt,name=aggregation,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.Gauge_Aggregation" json:"aggregation,omitempty"`
	Filters       []*filters.Filter_LogsFilter `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	GroupBy       []*common1.ObservationField  `protobuf:"bytes,5,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	TimeFrame     *common1.TimeFrameSelect     `protobuf:"bytes,6,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Gauge_LogsQuery) Reset() {
	*x = Gauge_LogsQuery{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gauge_LogsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gauge_LogsQuery) ProtoMessage() {}

func (x *Gauge_LogsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gauge_LogsQuery.ProtoReflect.Descriptor instead.
func (*Gauge_LogsQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Gauge_LogsQuery) GetLuceneQuery() *common1.LuceneQuery {
	if x != nil {
		return x.LuceneQuery
	}
	return nil
}

func (x *Gauge_LogsQuery) GetLogsAggregation() *common1.LogsAggregation {
	if x != nil {
		return x.LogsAggregation
	}
	return nil
}

// Deprecated: Marked as deprecated in com/coralogixapis/dashboards/v1/ast/widgets/gauge.proto.
func (x *Gauge_LogsQuery) GetAggregation() Gauge_Aggregation {
	if x != nil {
		return x.Aggregation
	}
	return Gauge_AGGREGATION_UNSPECIFIED
}

func (x *Gauge_LogsQuery) GetFilters() []*filters.Filter_LogsFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Gauge_LogsQuery) GetGroupBy() []*common1.ObservationField {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *Gauge_LogsQuery) GetTimeFrame() *common1.TimeFrameSelect {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

type Gauge_SpansQuery struct {
	state            protoimpl.MessageState    `protogen:"open.v1"`
	LuceneQuery      *common1.LuceneQuery      `protobuf:"bytes,1,opt,name=lucene_query,json=luceneQuery,proto3" json:"lucene_query,omitempty"`
	SpansAggregation *common1.SpansAggregation `protobuf:"bytes,2,opt,name=spans_aggregation,json=spansAggregation,proto3" json:"spans_aggregation,omitempty"`
	// Deprecated: Marked as deprecated in com/coralogixapis/dashboards/v1/ast/widgets/gauge.proto.
	Aggregation   Gauge_Aggregation               `protobuf:"varint,3,opt,name=aggregation,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.Gauge_Aggregation" json:"aggregation,omitempty"`
	Filters       []*filters.Filter_SpansFilter   `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	GroupBy       []*common1.SpanField            `protobuf:"bytes,5,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	TimeFrame     *common1.TimeFrameSelect        `protobuf:"bytes,6,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	GroupBys      []*common1.SpanObservationField `protobuf:"bytes,7,rep,name=group_bys,json=groupBys,proto3" json:"group_bys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Gauge_SpansQuery) Reset() {
	*x = Gauge_SpansQuery{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gauge_SpansQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gauge_SpansQuery) ProtoMessage() {}

func (x *Gauge_SpansQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gauge_SpansQuery.ProtoReflect.Descriptor instead.
func (*Gauge_SpansQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Gauge_SpansQuery) GetLuceneQuery() *common1.LuceneQuery {
	if x != nil {
		return x.LuceneQuery
	}
	return nil
}

func (x *Gauge_SpansQuery) GetSpansAggregation() *common1.SpansAggregation {
	if x != nil {
		return x.SpansAggregation
	}
	return nil
}

// Deprecated: Marked as deprecated in com/coralogixapis/dashboards/v1/ast/widgets/gauge.proto.
func (x *Gauge_SpansQuery) GetAggregation() Gauge_Aggregation {
	if x != nil {
		return x.Aggregation
	}
	return Gauge_AGGREGATION_UNSPECIFIED
}

func (x *Gauge_SpansQuery) GetFilters() []*filters.Filter_SpansFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Gauge_SpansQuery) GetGroupBy() []*common1.SpanField {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *Gauge_SpansQuery) GetTimeFrame() *common1.TimeFrameSelect {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *Gauge_SpansQuery) GetGroupBys() []*common1.SpanObservationField {
	if x != nil {
		return x.GroupBys
	}
	return nil
}

type Gauge_DataprimeQuery struct {
	state          protoimpl.MessageState   `protogen:"open.v1"`
	DataprimeQuery *common1.DataprimeQuery  `protobuf:"bytes,1,opt,name=dataprime_query,json=dataprimeQuery,proto3" json:"dataprime_query,omitempty"`
	Filters        []*filters.Filter_Source `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	TimeFrame      *common1.TimeFrameSelect `protobuf:"bytes,3,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Gauge_DataprimeQuery) Reset() {
	*x = Gauge_DataprimeQuery{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gauge_DataprimeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gauge_DataprimeQuery) ProtoMessage() {}

func (x *Gauge_DataprimeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gauge_DataprimeQuery.ProtoReflect.Descriptor instead.
func (*Gauge_DataprimeQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Gauge_DataprimeQuery) GetDataprimeQuery() *common1.DataprimeQuery {
	if x != nil {
		return x.DataprimeQuery
	}
	return nil
}

func (x *Gauge_DataprimeQuery) GetFilters() []*filters.Filter_Source {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Gauge_DataprimeQuery) GetTimeFrame() *common1.TimeFrameSelect {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

type Gauge_Threshold struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	From          *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Color         *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	Label         *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Gauge_Threshold) Reset() {
	*x = Gauge_Threshold{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gauge_Threshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gauge_Threshold) ProtoMessage() {}

func (x *Gauge_Threshold) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gauge_Threshold.ProtoReflect.Descriptor instead.
func (*Gauge_Threshold) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Gauge_Threshold) GetFrom() *wrapperspb.DoubleValue {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Gauge_Threshold) GetColor() *wrapperspb.StringValue {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Gauge_Threshold) GetLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.Label
	}
	return nil
}

var File_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto protoreflect.FileDescriptor

const file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDesc = "" +
	"\n" +
	"7com/coralogixapis/dashboards/v1/ast/widgets/gauge.proto\x12+com.coralogixapis.dashboards.v1.ast.widgets\x1a8com/coralogixapis/dashboards/v1/ast/filters/filter.proto\x1aGcom/coralogixapis/dashboards/v1/ast/widgets/common/data_mode_type.proto\x1a?com/coralogixapis/dashboards/v1/ast/widgets/common/legend.proto\x1aRcom/coralogixapis/dashboards/v1/ast/widgets/common/metrics_query_editor_mode.proto\x1aCcom/coralogixapis/dashboards/v1/ast/widgets/common/thresholds.proto\x1a=com/coralogixapis/dashboards/v1/common/logs_aggregation.proto\x1a>com/coralogixapis/dashboards/v1/common/observation_field.proto\x1a2com/coralogixapis/dashboards/v1/common/query.proto\x1a7com/coralogixapis/dashboards/v1/common/span_field.proto\x1a>com/coralogixapis/dashboards/v1/common/spans_aggregation.proto\x1a7com/coralogixapis/dashboards/v1/common/time_frame.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a.protoc-gen-openapiv3/options/annotations.proto\"\xdb9\n" +
	"\x05Gauge\x12\x7f\n" +
	"\x05query\x18\x01 \x01(\v28.com.coralogixapis.dashboards.v1.ast.widgets.Gauge.QueryB/\x9aA,2*A query object containing query definitionR\x05query\x12\x9a\x01\n" +
	"\x03min\x18\x02 \x01(\v2\x1c.google.protobuf.DoubleValueBj\x9aAg2bA minimum gauge value used in percentage threshold calculation and for visual value representationJ\x010R\x03min\x12\x9f\x01\n" +
	"\x03max\x18\x03 \x01(\v2\x1c.google.protobuf.DoubleValueBo\x9aAl2bA maximum gauge value used in percentage threshold calculation and for visual value representationJ\x06150000R\x03max\x12\x9b\x01\n" +
	"\x0eshow_inner_arc\x18\x04 \x01(\v2\x1a.google.protobuf.BoolValueBY\x9aAV2MWhether to show the inner arc of gauge which graphically represents the valueJ\x05falseR\fshowInnerArc\x12\xa2\x01\n" +
	"\x0eshow_outer_arc\x18\x05 \x01(\v2\x1a.google.protobuf.BoolValueB`\x9aA]2UWhether to show the outer arc of gauge which graphically represents the min/max rangeJ\x04trueR\fshowOuterArc\x12\x90\x01\n" +
	"\x04unit\x18\x06 \x01(\x0e27.com.coralogixapis.dashboards.v1.ast.widgets.Gauge.UnitBC\x9aA@2;Unit of the value - one from a predefined list, or 'custom'J\x013R\x04unit\x12\xb1\x01\n" +
	"\n" +
	"thresholds\x18\a \x03(\v2<.com.coralogixapis.dashboards.v1.ast.widgets.Gauge.ThresholdBS\x9aAP2NList of value thresholds, each with a certain color and an optional name labelR\n" +
	"thresholds\x12\x93\x01\n" +
	"\x0edata_mode_type\x18\b \x01(\x0e2@.com.coralogixapis.dashboards.v1.ast.widgets.common.DataModeTypeB+\x9aA(2&Data mode type, either high or archiveR\fdataModeType\x12\xcf\x01\n" +
	"\fthreshold_by\x18\t \x01(\x0e2>.com.coralogixapis.dashboards.v1.ast.widgets.Gauge.ThresholdByBl\x9aAi2gIndicates which widget element should be colorized as the threshold, either the value or the backgroundR\vthresholdBy\x12\xa0\x01\n" +
	"\vcustom_unit\x18\n" +
	" \x01(\v2\x1c.google.protobuf.StringValueBa\x9aA^2HCustom unit (requires to have unit field set as 'custom' to take effect)J\x12{ \"value\": \"kvs\" }R\n" +
	"customUnit\x12\x8f\x01\n" +
	"\adecimal\x18\v \x01(\v2\x1b.google.protobuf.Int32ValueBX\x9aAU2PNumber indicating the decimal precision of the numeric values, within range 0-15J\x013R\adecimal\x12\x9a\x01\n" +
	"\x0ethreshold_type\x18\f \x01(\x0e2A.com.coralogixapis.dashboards.v1.ast.widgets.common.ThresholdTypeB0\x9aA-2+Type of the threshold, relative or absoluteR\rthresholdType\x12q\n" +
	"\x06legend\x18\r \x01(\v2:.com.coralogixapis.dashboards.v1.ast.widgets.common.LegendB\x1d\x9aA\x1a2\x18Widget's legend settingsR\x06legend\x12\xd0\x01\n" +
	"\tlegend_by\x18\x0e \x01(\x0e2<.com.coralogixapis.dashboards.v1.ast.widgets.common.LegendByBu\x9aAr2p(multigauge display only) Indicates how to group the legend elements, either by thresholds or by standard groupsR\blegendBy\x12\x9b\x01\n" +
	"\x13display_series_name\x18\x0f \x01(\v2\x1a.google.protobuf.BoolValueBO\x9aAL2J(multigauge display only) Whether to show the series names above the valueR\x11displaySeriesName\x12\x89\x01\n" +
	"\x11decimal_precision\x18\x10 \x01(\v2\x1a.google.protobuf.BoolValueB@\x9aA=24Whether to render numeric value without abbreviationJ\x05falseR\x10decimalPrecision\x1a\xfb\x02\n" +
	"\x05Query\x12[\n" +
	"\ametrics\x18\x01 \x01(\v2?.com.coralogixapis.dashboards.v1.ast.widgets.Gauge.MetricsQueryH\x00R\ametrics\x12R\n" +
	"\x04logs\x18\x02 \x01(\v2<.com.coralogixapis.dashboards.v1.ast.widgets.Gauge.LogsQueryH\x00R\x04logs\x12U\n" +
	"\x05spans\x18\x03 \x01(\v2=.com.coralogixapis.dashboards.v1.ast.widgets.Gauge.SpansQueryH\x00R\x05spans\x12a\n" +
	"\tdataprime\x18\x04 \x01(\v2A.com.coralogixapis.dashboards.v1.ast.widgets.Gauge.DataprimeQueryH\x00R\tdataprimeB\a\n" +
	"\x05value\x1a\xe9\a\n" +
	"\fMetricsQuery\x12\xa3\x01\n" +
	"\fpromql_query\x18\x01 \x01(\v23.com.coralogixapis.dashboards.v1.common.PromQlQueryBK\x9aAH2(PromQL query string for querying metricsJ\x1c{ \"value\": \"up{job='abc'}\" }R\vpromqlQuery\x12{\n" +
	"\vaggregation\x18\x02 \x01(\x0e2>.com.coralogixapis.dashboards.v1.ast.widgets.Gauge.AggregationB\x19\x9aA\x162\x14Aggregation functionR\vaggregation\x12y\n" +
	"\afilters\x18\x03 \x03(\v2A.com.coralogixapis.dashboards.v1.ast.filters.Filter.MetricsFilterB\x1c\x9aA\x192\x17List of metrics filtersR\afilters\x12\xc6\x01\n" +
	"\veditor_mode\x18\x04 \x01(\x0e2J.com.coralogixapis.dashboards.v1.ast.widgets.common.MetricsQueryEditorModeBY\x9aAV2QType of the query editor used to generate the query, can be text or builder basedJ\x012R\n" +
	"editorMode\x12\x9e\x01\n" +
	"\n" +
	"time_frame\x18\x05 \x01(\v27.com.coralogixapis.dashboards.v1.common.TimeFrameSelectBF\x9aAC2ASpecifies the time period for which the result should be returnedR\ttimeFrame\x12\x9b\x01\n" +
	"\x11promql_query_type\x18\x06 \x01(\x0e27.com.coralogixapis.dashboards.v1.common.PromQLQueryTypeB6\x9aA321Type of the PromQL query, can be Range or InstantR\x0fpromqlQueryType:3\x9aA0\n" +
	".*\fMetricsQuery2\x1eA metrics variant of the query\x1a\xa4\a\n" +
	"\tLogsQuery\x12\xba\x01\n" +
	"\flucene_query\x18\x01 \x01(\v23.com.coralogixapis.dashboards.v1.common.LuceneQueryBb\x9aA_2$A Lucene query string to search logsJ7{ \"value\": \"coralogix.metadata.subsystemName: cx_rum\" }R\vluceneQuery\x12}\n" +
	"\x10logs_aggregation\x18\x02 \x01(\v27.com.coralogixapis.dashboards.v1.common.LogsAggregationB\x19\x9aA\x162\x14Aggregation functionR\x0flogsAggregation\x12d\n" +
	"\vaggregation\x18\x03 \x01(\x0e2>.com.coralogixapis.dashboards.v1.ast.widgets.Gauge.AggregationB\x02\x18\x01R\vaggregation\x12\x8d\x01\n" +
	"\afilters\x18\x04 \x03(\v2>.com.coralogixapis.dashboards.v1.ast.filters.Filter.LogsFilterB3\x9aA02.List of filters that narrow down query resultsR\afilters\x12\x94\x01\n" +
	"\bgroup_by\x18\x05 \x03(\v28.com.coralogixapis.dashboards.v1.common.ObservationFieldB?\x9aA<2:A list of observation fields by which to group the resultsR\agroupBy\x12\x9e\x01\n" +
	"\n" +
	"time_frame\x18\x06 \x01(\v27.com.coralogixapis.dashboards.v1.common.TimeFrameSelectBF\x9aAC2ASpecifies the time period for which the result should be returnedR\ttimeFrame:-\x9aA*\n" +
	"(*\tLogsQuery2\x1bA logs variant of the query\x1a\xf3\a\n" +
	"\n" +
	"SpansQuery\x12\x87\x01\n" +
	"\flucene_query\x18\x01 \x01(\v23.com.coralogixapis.dashboards.v1.common.LuceneQueryB/\x9aA,2*Lucene query string to search span recordsR\vluceneQuery\x12\x8b\x01\n" +
	"\x11spans_aggregation\x18\x02 \x01(\v28.com.coralogixapis.dashboards.v1.common.SpansAggregationB$\x9aA!2\x1fSpan query aggregation functionR\x10spansAggregation\x12d\n" +
	"\vaggregation\x18\x03 \x01(\x0e2>.com.coralogixapis.dashboards.v1.ast.widgets.Gauge.AggregationB\x02\x18\x01R\vaggregation\x12z\n" +
	"\afilters\x18\x04 \x03(\v2?.com.coralogixapis.dashboards.v1.ast.filters.Filter.SpansFilterB\x1f\x9aA\x1c2\x1aList of span query filtersR\afilters\x12\x80\x01\n" +
	"\bgroup_by\x18\x05 \x03(\v21.com.coralogixapis.dashboards.v1.common.SpanFieldB2\x9aA/2-List of field names to group the span recordsR\agroupBy\x12\x9f\x01\n" +
	"\n" +
	"time_frame\x18\x06 \x01(\v27.com.coralogixapis.dashboards.v1.common.TimeFrameSelectBG\x9aAD2BSpecifies the time period for which the records should be returnedR\ttimeFrame\x12\x94\x01\n" +
	"\tgroup_bys\x18\a \x03(\v2<.com.coralogixapis.dashboards.v1.common.SpanObservationFieldB9\x9aA624A list of observation fields to group the records byR\bgroupBys:/\x9aA,\n" +
	"**\n" +
	"SpansQuery2\x1cA spans variant of the query\x1a\xd9\x03\n" +
	"\x0eDataprimeQuery\x12z\n" +
	"\x0fdataprime_query\x18\x01 \x01(\v26.com.coralogixapis.dashboards.v1.common.DataprimeQueryB\x19\x9aA\x162\x14Dataprime query textR\x0edataprimeQuery\x12p\n" +
	"\afilters\x18\x02 \x03(\v2:.com.coralogixapis.dashboards.v1.ast.filters.Filter.SourceB\x1a\x9aA\x172\x15List of query filtersR\afilters\x12\x9f\x01\n" +
	"\n" +
	"time_frame\x18\x03 \x01(\v27.com.coralogixapis.dashboards.v1.common.TimeFrameSelectBG\x9aAD2BSpecifies the time period for which the records should be returnedR\ttimeFrame:7\x9aA4\n" +
	"2*\x0eDataprimeQuery2 A Dataprime variant of the query\x1a\xcd\x02\n" +
	"\tThreshold\x12[\n" +
	"\x04from\x18\x01 \x01(\v2\x1c.google.protobuf.DoubleValueB)\x9aA&2$Minimum bound value of the thresholdR\x04from\x12O\n" +
	"\x05color\x18\x02 \x01(\v2\x1c.google.protobuf.StringValueB\x1b\x9aA\x182\x16Color of the thresholdR\x05color\x12X\n" +
	"\x05label\x18\x03 \x01(\v2\x1c.google.protobuf.StringValueB$\x9aA!2\x1fOptional label of the thresholdR\x05label:8\x9aA5\n" +
	"3*\tThreshold2&Definition of a single gauge threshold\"\x94\x01\n" +
	"\vAggregation\x12\x1b\n" +
	"\x17AGGREGATION_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10AGGREGATION_LAST\x10\x01\x12\x13\n" +
	"\x0fAGGREGATION_MIN\x10\x02\x12\x13\n" +
	"\x0fAGGREGATION_MAX\x10\x03\x12\x13\n" +
	"\x0fAGGREGATION_AVG\x10\x04\x12\x13\n" +
	"\x0fAGGREGATION_SUM\x10\x05\"\xb1\x03\n" +
	"\x04Unit\x12\x14\n" +
	"\x10UNIT_UNSPECIFIED\x10\x00\x12\x0f\n" +
	"\vUNIT_NUMBER\x10\x01\x12\x10\n" +
	"\fUNIT_PERCENT\x10\x02\x12\x15\n" +
	"\x11UNIT_MICROSECONDS\x10\x03\x12\x15\n" +
	"\x11UNIT_MILLISECONDS\x10\x04\x12\x10\n" +
	"\fUNIT_SECONDS\x10\x05\x12\x0e\n" +
	"\n" +
	"UNIT_BYTES\x10\x06\x12\x0f\n" +
	"\vUNIT_KBYTES\x10\a\x12\x0f\n" +
	"\vUNIT_MBYTES\x10\b\x12\x0f\n" +
	"\vUNIT_GBYTES\x10\t\x12\x12\n" +
	"\x0eUNIT_BYTES_IEC\x10\n" +
	"\x12\x10\n" +
	"\fUNIT_KIBYTES\x10\v\x12\x10\n" +
	"\fUNIT_MIBYTES\x10\f\x12\x10\n" +
	"\fUNIT_GIBYTES\x10\r\x12\x12\n" +
	"\x0eUNIT_EUR_CENTS\x10\x0e\x12\f\n" +
	"\bUNIT_EUR\x10\x0f\x12\x12\n" +
	"\x0eUNIT_USD_CENTS\x10\x10\x12\f\n" +
	"\bUNIT_USD\x10\x11\x12\x0f\n" +
	"\vUNIT_CUSTOM\x10\x12\x12\x19\n" +
	"\x15UNIT_PERCENT_ZERO_ONE\x10\x13\x12\x1d\n" +
	"\x19UNIT_PERCENT_ZERO_HUNDRED\x10\x14\x12\x14\n" +
	"\x10UNIT_NANOSECONDS\x10\x15\"`\n" +
	"\vThresholdBy\x12\x1c\n" +
	"\x18THRESHOLD_BY_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12THRESHOLD_BY_VALUE\x10\x01\x12\x1b\n" +
	"\x17THRESHOLD_BY_BACKGROUND\x10\x02b\x06proto3"

var (
	file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescOnce sync.Once
	file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescData []byte
)

func file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDesc), len(file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDesc)))
	})
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescData
}

var file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_goTypes = []any{
	(Gauge_Aggregation)(0),               // 0: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Aggregation
	(Gauge_Unit)(0),                      // 1: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Unit
	(Gauge_ThresholdBy)(0),               // 2: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.ThresholdBy
	(*Gauge)(nil),                        // 3: com.coralogixapis.dashboards.v1.ast.widgets.Gauge
	(*Gauge_Query)(nil),                  // 4: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Query
	(*Gauge_MetricsQuery)(nil),           // 5: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.MetricsQuery
	(*Gauge_LogsQuery)(nil),              // 6: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.LogsQuery
	(*Gauge_SpansQuery)(nil),             // 7: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.SpansQuery
	(*Gauge_DataprimeQuery)(nil),         // 8: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.DataprimeQuery
	(*Gauge_Threshold)(nil),              // 9: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Threshold
	(*wrapperspb.DoubleValue)(nil),       // 10: google.protobuf.DoubleValue
	(*wrapperspb.BoolValue)(nil),         // 11: google.protobuf.BoolValue
	(common.DataModeType)(0),             // 12: com.coralogixapis.dashboards.v1.ast.widgets.common.DataModeType
	(*wrapperspb.StringValue)(nil),       // 13: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),        // 14: google.protobuf.Int32Value
	(common.ThresholdType)(0),            // 15: com.coralogixapis.dashboards.v1.ast.widgets.common.ThresholdType
	(*common.Legend)(nil),                // 16: com.coralogixapis.dashboards.v1.ast.widgets.common.Legend
	(common.LegendBy)(0),                 // 17: com.coralogixapis.dashboards.v1.ast.widgets.common.LegendBy
	(*common1.PromQlQuery)(nil),          // 18: com.coralogixapis.dashboards.v1.common.PromQlQuery
	(*filters.Filter_MetricsFilter)(nil), // 19: com.coralogixapis.dashboards.v1.ast.filters.Filter.MetricsFilter
	(common.MetricsQueryEditorMode)(0),   // 20: com.coralogixapis.dashboards.v1.ast.widgets.common.MetricsQueryEditorMode
	(*common1.TimeFrameSelect)(nil),      // 21: com.coralogixapis.dashboards.v1.common.TimeFrameSelect
	(common1.PromQLQueryType)(0),         // 22: com.coralogixapis.dashboards.v1.common.PromQLQueryType
	(*common1.LuceneQuery)(nil),          // 23: com.coralogixapis.dashboards.v1.common.LuceneQuery
	(*common1.LogsAggregation)(nil),      // 24: com.coralogixapis.dashboards.v1.common.LogsAggregation
	(*filters.Filter_LogsFilter)(nil),    // 25: com.coralogixapis.dashboards.v1.ast.filters.Filter.LogsFilter
	(*common1.ObservationField)(nil),     // 26: com.coralogixapis.dashboards.v1.common.ObservationField
	(*common1.SpansAggregation)(nil),     // 27: com.coralogixapis.dashboards.v1.common.SpansAggregation
	(*filters.Filter_SpansFilter)(nil),   // 28: com.coralogixapis.dashboards.v1.ast.filters.Filter.SpansFilter
	(*common1.SpanField)(nil),            // 29: com.coralogixapis.dashboards.v1.common.SpanField
	(*common1.SpanObservationField)(nil), // 30: com.coralogixapis.dashboards.v1.common.SpanObservationField
	(*common1.DataprimeQuery)(nil),       // 31: com.coralogixapis.dashboards.v1.common.DataprimeQuery
	(*filters.Filter_Source)(nil),        // 32: com.coralogixapis.dashboards.v1.ast.filters.Filter.Source
}
var file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_depIdxs = []int32{
	4,  // 0: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.query:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Query
	10, // 1: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.min:type_name -> google.protobuf.DoubleValue
	10, // 2: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.max:type_name -> google.protobuf.DoubleValue
	11, // 3: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.show_inner_arc:type_name -> google.protobuf.BoolValue
	11, // 4: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.show_outer_arc:type_name -> google.protobuf.BoolValue
	1,  // 5: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.unit:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Unit
	9,  // 6: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.thresholds:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Threshold
	12, // 7: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.data_mode_type:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.DataModeType
	2,  // 8: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.threshold_by:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.Gauge.ThresholdBy
	13, // 9: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.custom_unit:type_name -> google.protobuf.StringValue
	14, // 10: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.decimal:type_name -> google.protobuf.Int32Value
	15, // 11: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.threshold_type:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.ThresholdType
	16, // 12: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.legend:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.Legend
	17, // 13: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.legend_by:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.LegendBy
	11, // 14: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.display_series_name:type_name -> google.protobuf.BoolValue
	11, // 15: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.decimal_precision:type_name -> google.protobuf.BoolValue
	5,  // 16: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Query.metrics:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.Gauge.MetricsQuery
	6,  // 17: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Query.logs:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.Gauge.LogsQuery
	7,  // 18: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Query.spans:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.Gauge.SpansQuery
	8,  // 19: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Query.dataprime:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.Gauge.DataprimeQuery
	18, // 20: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.MetricsQuery.promql_query:type_name -> com.coralogixapis.dashboards.v1.common.PromQlQuery
	0,  // 21: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.MetricsQuery.aggregation:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Aggregation
	19, // 22: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.MetricsQuery.filters:type_name -> com.coralogixapis.dashboards.v1.ast.filters.Filter.MetricsFilter
	20, // 23: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.MetricsQuery.editor_mode:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.MetricsQueryEditorMode
	21, // 24: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.MetricsQuery.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrameSelect
	22, // 25: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.MetricsQuery.promql_query_type:type_name -> com.coralogixapis.dashboards.v1.common.PromQLQueryType
	23, // 26: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.LogsQuery.lucene_query:type_name -> com.coralogixapis.dashboards.v1.common.LuceneQuery
	24, // 27: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.LogsQuery.logs_aggregation:type_name -> com.coralogixapis.dashboards.v1.common.LogsAggregation
	0,  // 28: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.LogsQuery.aggregation:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Aggregation
	25, // 29: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.LogsQuery.filters:type_name -> com.coralogixapis.dashboards.v1.ast.filters.Filter.LogsFilter
	26, // 30: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.LogsQuery.group_by:type_name -> com.coralogixapis.dashboards.v1.common.ObservationField
	21, // 31: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.LogsQuery.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrameSelect
	23, // 32: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.SpansQuery.lucene_query:type_name -> com.coralogixapis.dashboards.v1.common.LuceneQuery
	27, // 33: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.SpansQuery.spans_aggregation:type_name -> com.coralogixapis.dashboards.v1.common.SpansAggregation
	0,  // 34: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.SpansQuery.aggregation:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Aggregation
	28, // 35: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.SpansQuery.filters:type_name -> com.coralogixapis.dashboards.v1.ast.filters.Filter.SpansFilter
	29, // 36: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.SpansQuery.group_by:type_name -> com.coralogixapis.dashboards.v1.common.SpanField
	21, // 37: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.SpansQuery.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrameSelect
	30, // 38: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.SpansQuery.group_bys:type_name -> com.coralogixapis.dashboards.v1.common.SpanObservationField
	31, // 39: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.DataprimeQuery.dataprime_query:type_name -> com.coralogixapis.dashboards.v1.common.DataprimeQuery
	32, // 40: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.DataprimeQuery.filters:type_name -> com.coralogixapis.dashboards.v1.ast.filters.Filter.Source
	21, // 41: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.DataprimeQuery.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrameSelect
	10, // 42: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Threshold.from:type_name -> google.protobuf.DoubleValue
	13, // 43: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Threshold.color:type_name -> google.protobuf.StringValue
	13, // 44: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Threshold.label:type_name -> google.protobuf.StringValue
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_init() }
func file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_init() {
	if File_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto != nil {
		return
	}
	file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[1].OneofWrappers = []any{
		(*Gauge_Query_Metrics)(nil),
		(*Gauge_Query_Logs)(nil),
		(*Gauge_Query_Spans)(nil),
		(*Gauge_Query_Dataprime)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDesc), len(file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_depIdxs,
		EnumInfos:         file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_enumTypes,
		MessageInfos:      file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto = out.File
	file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_goTypes = nil
	file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_depIdxs = nil
}
