// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: com/coralogixapis/dashboards/v1/ast/widgets/line_chart.proto

package widgets

import (
	filters "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/dashboards/v1/ast/filters"
	common "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/dashboards/v1/ast/widgets/common"
	common1 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/dashboards/v1/common"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LineChart_TooltipType int32

const (
	LineChart_TOOLTIP_TYPE_UNSPECIFIED LineChart_TooltipType = 0
	LineChart_TOOLTIP_TYPE_ALL         LineChart_TooltipType = 1
	LineChart_TOOLTIP_TYPE_SINGLE      LineChart_TooltipType = 2
)

// Enum value maps for LineChart_TooltipType.
var (
	LineChart_TooltipType_name = map[int32]string{
		0: "TOOLTIP_TYPE_UNSPECIFIED",
		1: "TOOLTIP_TYPE_ALL",
		2: "TOOLTIP_TYPE_SINGLE",
	}
	LineChart_TooltipType_value = map[string]int32{
		"TOOLTIP_TYPE_UNSPECIFIED": 0,
		"TOOLTIP_TYPE_ALL":         1,
		"TOOLTIP_TYPE_SINGLE":      2,
	}
)

func (x LineChart_TooltipType) Enum() *LineChart_TooltipType {
	p := new(LineChart_TooltipType)
	*p = x
	return p
}

func (x LineChart_TooltipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LineChart_TooltipType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_enumTypes[0].Descriptor()
}

func (LineChart_TooltipType) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_enumTypes[0]
}

func (x LineChart_TooltipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LineChart_TooltipType.Descriptor instead.
func (LineChart_TooltipType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescGZIP(), []int{0, 0}
}

type LineChart_StackedLine int32

const (
	LineChart_STACKED_LINE_UNSPECIFIED LineChart_StackedLine = 0
	LineChart_STACKED_LINE_ABSOLUTE    LineChart_StackedLine = 1
	LineChart_STACKED_LINE_RELATIVE    LineChart_StackedLine = 2
)

// Enum value maps for LineChart_StackedLine.
var (
	LineChart_StackedLine_name = map[int32]string{
		0: "STACKED_LINE_UNSPECIFIED",
		1: "STACKED_LINE_ABSOLUTE",
		2: "STACKED_LINE_RELATIVE",
	}
	LineChart_StackedLine_value = map[string]int32{
		"STACKED_LINE_UNSPECIFIED": 0,
		"STACKED_LINE_ABSOLUTE":    1,
		"STACKED_LINE_RELATIVE":    2,
	}
)

func (x LineChart_StackedLine) Enum() *LineChart_StackedLine {
	p := new(LineChart_StackedLine)
	*p = x
	return p
}

func (x LineChart_StackedLine) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LineChart_StackedLine) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_enumTypes[1].Descriptor()
}

func (LineChart_StackedLine) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_enumTypes[1]
}

func (x LineChart_StackedLine) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LineChart_StackedLine.Descriptor instead.
func (LineChart_StackedLine) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescGZIP(), []int{0, 1}
}

type LineChart struct {
	state            protoimpl.MessageState       `protogen:"open.v1"`
	Legend           *common.Legend               `protobuf:"bytes,2,opt,name=legend,proto3" json:"legend,omitempty"`
	Tooltip          *LineChart_Tooltip           `protobuf:"bytes,6,opt,name=tooltip,proto3" json:"tooltip,omitempty"`
	QueryDefinitions []*LineChart_QueryDefinition `protobuf:"bytes,7,rep,name=query_definitions,json=queryDefinitions,proto3" json:"query_definitions,omitempty"`
	StackedLine      LineChart_StackedLine        `protobuf:"varint,9,opt,name=stacked_line,json=stackedLine,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.LineChart_StackedLine" json:"stacked_line,omitempty"`
	ConnectNulls     *wrapperspb.BoolValue        `protobuf:"bytes,10,opt,name=connect_nulls,json=connectNulls,proto3" json:"connect_nulls,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LineChart) Reset() {
	*x = LineChart{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LineChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineChart) ProtoMessage() {}

func (x *LineChart) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineChart.ProtoReflect.Descriptor instead.
func (*LineChart) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescGZIP(), []int{0}
}

func (x *LineChart) GetLegend() *common.Legend {
	if x != nil {
		return x.Legend
	}
	return nil
}

func (x *LineChart) GetTooltip() *LineChart_Tooltip {
	if x != nil {
		return x.Tooltip
	}
	return nil
}

func (x *LineChart) GetQueryDefinitions() []*LineChart_QueryDefinition {
	if x != nil {
		return x.QueryDefinitions
	}
	return nil
}

func (x *LineChart) GetStackedLine() LineChart_StackedLine {
	if x != nil {
		return x.StackedLine
	}
	return LineChart_STACKED_LINE_UNSPECIFIED
}

func (x *LineChart) GetConnectNulls() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConnectNulls
	}
	return nil
}

type LineChart_QueryDefinition struct {
	state              protoimpl.MessageState  `protogen:"open.v1"`
	Id                 *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Query              *LineChart_Query        `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	SeriesNameTemplate *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=series_name_template,json=seriesNameTemplate,proto3" json:"series_name_template,omitempty"`
	SeriesCountLimit   *wrapperspb.Int64Value  `protobuf:"bytes,4,opt,name=series_count_limit,json=seriesCountLimit,proto3" json:"series_count_limit,omitempty"`
	Unit               common.Unit             `protobuf:"varint,5,opt,name=unit,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.common.Unit" json:"unit,omitempty"`
	ScaleType          common.ScaleType        `protobuf:"varint,6,opt,name=scale_type,json=scaleType,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.common.ScaleType" json:"scale_type,omitempty"`
	Name               *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	IsVisible          *wrapperspb.BoolValue   `protobuf:"bytes,8,opt,name=is_visible,json=isVisible,proto3" json:"is_visible,omitempty"`
	ColorScheme        *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=color_scheme,json=colorScheme,proto3" json:"color_scheme,omitempty"`
	Resolution         *LineChart_Resolution   `protobuf:"bytes,10,opt,name=resolution,proto3" json:"resolution,omitempty"`
	DataModeType       common.DataModeType     `protobuf:"varint,11,opt,name=data_mode_type,json=dataModeType,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.common.DataModeType" json:"data_mode_type,omitempty"`
	CustomUnit         *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=custom_unit,json=customUnit,proto3" json:"custom_unit,omitempty"`
	Decimal            *wrapperspb.Int32Value  `protobuf:"bytes,13,opt,name=decimal,proto3" json:"decimal,omitempty"`
	HashColors         *wrapperspb.BoolValue   `protobuf:"bytes,14,opt,name=hash_colors,json=hashColors,proto3" json:"hash_colors,omitempty"`
	YAxisMin           *wrapperspb.FloatValue  `protobuf:"bytes,15,opt,name=y_axis_min,json=yAxisMin,proto3" json:"y_axis_min,omitempty"`
	YAxisMax           *wrapperspb.FloatValue  `protobuf:"bytes,16,opt,name=y_axis_max,json=yAxisMax,proto3" json:"y_axis_max,omitempty"`
	DecimalPrecision   *wrapperspb.BoolValue   `protobuf:"bytes,17,opt,name=decimal_precision,json=decimalPrecision,proto3" json:"decimal_precision,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *LineChart_QueryDefinition) Reset() {
	*x = LineChart_QueryDefinition{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LineChart_QueryDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineChart_QueryDefinition) ProtoMessage() {}

func (x *LineChart_QueryDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineChart_QueryDefinition.ProtoReflect.Descriptor instead.
func (*LineChart_QueryDefinition) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescGZIP(), []int{0, 0}
}

func (x *LineChart_QueryDefinition) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LineChart_QueryDefinition) GetQuery() *LineChart_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *LineChart_QueryDefinition) GetSeriesNameTemplate() *wrapperspb.StringValue {
	if x != nil {
		return x.SeriesNameTemplate
	}
	return nil
}

func (x *LineChart_QueryDefinition) GetSeriesCountLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.SeriesCountLimit
	}
	return nil
}

func (x *LineChart_QueryDefinition) GetUnit() common.Unit {
	if x != nil {
		return x.Unit
	}
	return common.Unit(0)
}

func (x *LineChart_QueryDefinition) GetScaleType() common.ScaleType {
	if x != nil {
		return x.ScaleType
	}
	return common.ScaleType(0)
}

func (x *LineChart_QueryDefinition) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *LineChart_QueryDefinition) GetIsVisible() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsVisible
	}
	return nil
}

func (x *LineChart_QueryDefinition) GetColorScheme() *wrapperspb.StringValue {
	if x != nil {
		return x.ColorScheme
	}
	return nil
}

func (x *LineChart_QueryDefinition) GetResolution() *LineChart_Resolution {
	if x != nil {
		return x.Resolution
	}
	return nil
}

func (x *LineChart_QueryDefinition) GetDataModeType() common.DataModeType {
	if x != nil {
		return x.DataModeType
	}
	return common.DataModeType(0)
}

func (x *LineChart_QueryDefinition) GetCustomUnit() *wrapperspb.StringValue {
	if x != nil {
		return x.CustomUnit
	}
	return nil
}

func (x *LineChart_QueryDefinition) GetDecimal() *wrapperspb.Int32Value {
	if x != nil {
		return x.Decimal
	}
	return nil
}

func (x *LineChart_QueryDefinition) GetHashColors() *wrapperspb.BoolValue {
	if x != nil {
		return x.HashColors
	}
	return nil
}

func (x *LineChart_QueryDefinition) GetYAxisMin() *wrapperspb.FloatValue {
	if x != nil {
		return x.YAxisMin
	}
	return nil
}

func (x *LineChart_QueryDefinition) GetYAxisMax() *wrapperspb.FloatValue {
	if x != nil {
		return x.YAxisMax
	}
	return nil
}

func (x *LineChart_QueryDefinition) GetDecimalPrecision() *wrapperspb.BoolValue {
	if x != nil {
		return x.DecimalPrecision
	}
	return nil
}

type LineChart_Query struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*LineChart_Query_Logs
	//	*LineChart_Query_Metrics
	//	*LineChart_Query_Spans
	//	*LineChart_Query_Dataprime
	Value         isLineChart_Query_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LineChart_Query) Reset() {
	*x = LineChart_Query{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LineChart_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineChart_Query) ProtoMessage() {}

func (x *LineChart_Query) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineChart_Query.ProtoReflect.Descriptor instead.
func (*LineChart_Query) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescGZIP(), []int{0, 1}
}

func (x *LineChart_Query) GetValue() isLineChart_Query_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *LineChart_Query) GetLogs() *LineChart_LogsQuery {
	if x != nil {
		if x, ok := x.Value.(*LineChart_Query_Logs); ok {
			return x.Logs
		}
	}
	return nil
}

func (x *LineChart_Query) GetMetrics() *LineChart_MetricsQuery {
	if x != nil {
		if x, ok := x.Value.(*LineChart_Query_Metrics); ok {
			return x.Metrics
		}
	}
	return nil
}

func (x *LineChart_Query) GetSpans() *LineChart_SpansQuery {
	if x != nil {
		if x, ok := x.Value.(*LineChart_Query_Spans); ok {
			return x.Spans
		}
	}
	return nil
}

func (x *LineChart_Query) GetDataprime() *LineChart_DataprimeQuery {
	if x != nil {
		if x, ok := x.Value.(*LineChart_Query_Dataprime); ok {
			return x.Dataprime
		}
	}
	return nil
}

type isLineChart_Query_Value interface {
	isLineChart_Query_Value()
}

type LineChart_Query_Logs struct {
	Logs *LineChart_LogsQuery `protobuf:"bytes,1,opt,name=logs,proto3,oneof"`
}

type LineChart_Query_Metrics struct {
	Metrics *LineChart_MetricsQuery `protobuf:"bytes,2,opt,name=metrics,proto3,oneof"`
}

type LineChart_Query_Spans struct {
	Spans *LineChart_SpansQuery `protobuf:"bytes,3,opt,name=spans,proto3,oneof"`
}

type LineChart_Query_Dataprime struct {
	Dataprime *LineChart_DataprimeQuery `protobuf:"bytes,5,opt,name=dataprime,proto3,oneof"`
}

func (*LineChart_Query_Logs) isLineChart_Query_Value() {}

func (*LineChart_Query_Metrics) isLineChart_Query_Value() {}

func (*LineChart_Query_Spans) isLineChart_Query_Value() {}

func (*LineChart_Query_Dataprime) isLineChart_Query_Value() {}

type LineChart_Tooltip struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShowLabels    *wrapperspb.BoolValue  `protobuf:"bytes,1,opt,name=show_labels,json=showLabels,proto3" json:"show_labels,omitempty"`
	Type          LineChart_TooltipType  `protobuf:"varint,2,opt,name=type,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.LineChart_TooltipType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LineChart_Tooltip) Reset() {
	*x = LineChart_Tooltip{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LineChart_Tooltip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineChart_Tooltip) ProtoMessage() {}

func (x *LineChart_Tooltip) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineChart_Tooltip.ProtoReflect.Descriptor instead.
func (*LineChart_Tooltip) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescGZIP(), []int{0, 2}
}

func (x *LineChart_Tooltip) GetShowLabels() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowLabels
	}
	return nil
}

func (x *LineChart_Tooltip) GetType() LineChart_TooltipType {
	if x != nil {
		return x.Type
	}
	return LineChart_TOOLTIP_TYPE_UNSPECIFIED
}

type LineChart_LogsQuery struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	LuceneQuery   *common1.LuceneQuery         `protobuf:"bytes,1,opt,name=lucene_query,json=luceneQuery,proto3" json:"lucene_query,omitempty"`
	GroupBy       []*wrapperspb.StringValue    `protobuf:"bytes,2,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Aggregations  []*common1.LogsAggregation   `protobuf:"bytes,3,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
	Filters       []*filters.Filter_LogsFilter `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	GroupBys      []*common1.ObservationField  `protobuf:"bytes,5,rep,name=group_bys,json=groupBys,proto3" json:"group_bys,omitempty"`
	TimeFrame     *common1.TimeFrameSelect     `protobuf:"bytes,6,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LineChart_LogsQuery) Reset() {
	*x = LineChart_LogsQuery{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LineChart_LogsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineChart_LogsQuery) ProtoMessage() {}

func (x *LineChart_LogsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineChart_LogsQuery.ProtoReflect.Descriptor instead.
func (*LineChart_LogsQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescGZIP(), []int{0, 3}
}

func (x *LineChart_LogsQuery) GetLuceneQuery() *common1.LuceneQuery {
	if x != nil {
		return x.LuceneQuery
	}
	return nil
}

func (x *LineChart_LogsQuery) GetGroupBy() []*wrapperspb.StringValue {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *LineChart_LogsQuery) GetAggregations() []*common1.LogsAggregation {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

func (x *LineChart_LogsQuery) GetFilters() []*filters.Filter_LogsFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *LineChart_LogsQuery) GetGroupBys() []*common1.ObservationField {
	if x != nil {
		return x.GroupBys
	}
	return nil
}

func (x *LineChart_LogsQuery) GetTimeFrame() *common1.TimeFrameSelect {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

type LineChart_MetricsQuery struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	PromqlQuery   *common1.PromQlQuery            `protobuf:"bytes,1,opt,name=promql_query,json=promqlQuery,proto3" json:"promql_query,omitempty"`
	Filters       []*filters.Filter_MetricsFilter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	EditorMode    common.MetricsQueryEditorMode   `protobuf:"varint,3,opt,name=editor_mode,json=editorMode,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.common.MetricsQueryEditorMode" json:"editor_mode,omitempty"`
	TimeFrame     *common1.TimeFrameSelect        `protobuf:"bytes,4,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LineChart_MetricsQuery) Reset() {
	*x = LineChart_MetricsQuery{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LineChart_MetricsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineChart_MetricsQuery) ProtoMessage() {}

func (x *LineChart_MetricsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineChart_MetricsQuery.ProtoReflect.Descriptor instead.
func (*LineChart_MetricsQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescGZIP(), []int{0, 4}
}

func (x *LineChart_MetricsQuery) GetPromqlQuery() *common1.PromQlQuery {
	if x != nil {
		return x.PromqlQuery
	}
	return nil
}

func (x *LineChart_MetricsQuery) GetFilters() []*filters.Filter_MetricsFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *LineChart_MetricsQuery) GetEditorMode() common.MetricsQueryEditorMode {
	if x != nil {
		return x.EditorMode
	}
	return common.MetricsQueryEditorMode(0)
}

func (x *LineChart_MetricsQuery) GetTimeFrame() *common1.TimeFrameSelect {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

type LineChart_SpansQuery struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	LuceneQuery   *common1.LuceneQuery            `protobuf:"bytes,1,opt,name=lucene_query,json=luceneQuery,proto3" json:"lucene_query,omitempty"`
	GroupBy       []*common1.SpanField            `protobuf:"bytes,2,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Aggregations  []*common1.SpansAggregation     `protobuf:"bytes,3,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
	Filters       []*filters.Filter_SpansFilter   `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	TimeFrame     *common1.TimeFrameSelect        `protobuf:"bytes,5,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	GroupBys      []*common1.SpanObservationField `protobuf:"bytes,6,rep,name=group_bys,json=groupBys,proto3" json:"group_bys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LineChart_SpansQuery) Reset() {
	*x = LineChart_SpansQuery{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LineChart_SpansQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineChart_SpansQuery) ProtoMessage() {}

func (x *LineChart_SpansQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineChart_SpansQuery.ProtoReflect.Descriptor instead.
func (*LineChart_SpansQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescGZIP(), []int{0, 5}
}

func (x *LineChart_SpansQuery) GetLuceneQuery() *common1.LuceneQuery {
	if x != nil {
		return x.LuceneQuery
	}
	return nil
}

func (x *LineChart_SpansQuery) GetGroupBy() []*common1.SpanField {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *LineChart_SpansQuery) GetAggregations() []*common1.SpansAggregation {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

func (x *LineChart_SpansQuery) GetFilters() []*filters.Filter_SpansFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *LineChart_SpansQuery) GetTimeFrame() *common1.TimeFrameSelect {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *LineChart_SpansQuery) GetGroupBys() []*common1.SpanObservationField {
	if x != nil {
		return x.GroupBys
	}
	return nil
}

type LineChart_DataprimeQuery struct {
	state          protoimpl.MessageState   `protogen:"open.v1"`
	DataprimeQuery *common1.DataprimeQuery  `protobuf:"bytes,1,opt,name=dataprime_query,json=dataprimeQuery,proto3" json:"dataprime_query,omitempty"`
	Filters        []*filters.Filter_Source `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	TimeFrame      *common1.TimeFrameSelect `protobuf:"bytes,3,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LineChart_DataprimeQuery) Reset() {
	*x = LineChart_DataprimeQuery{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LineChart_DataprimeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineChart_DataprimeQuery) ProtoMessage() {}

func (x *LineChart_DataprimeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineChart_DataprimeQuery.ProtoReflect.Descriptor instead.
func (*LineChart_DataprimeQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescGZIP(), []int{0, 6}
}

func (x *LineChart_DataprimeQuery) GetDataprimeQuery() *common1.DataprimeQuery {
	if x != nil {
		return x.DataprimeQuery
	}
	return nil
}

func (x *LineChart_DataprimeQuery) GetFilters() []*filters.Filter_Source {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *LineChart_DataprimeQuery) GetTimeFrame() *common1.TimeFrameSelect {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

type LineChart_Resolution struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// it should be oneof i think
	Interval         *durationpb.Duration   `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	BucketsPresented *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=buckets_presented,json=bucketsPresented,proto3" json:"buckets_presented,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LineChart_Resolution) Reset() {
	*x = LineChart_Resolution{}
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LineChart_Resolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineChart_Resolution) ProtoMessage() {}

func (x *LineChart_Resolution) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineChart_Resolution.ProtoReflect.Descriptor instead.
func (*LineChart_Resolution) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescGZIP(), []int{0, 7}
}

func (x *LineChart_Resolution) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *LineChart_Resolution) GetBucketsPresented() *wrapperspb.Int32Value {
	if x != nil {
		return x.BucketsPresented
	}
	return nil
}

var File_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto protoreflect.FileDescriptor

const file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDesc = "" +
	"\n" +
	"<com/coralogixapis/dashboards/v1/ast/widgets/line_chart.proto\x12+com.coralogixapis.dashboards.v1.ast.widgets\x1a8com/coralogixapis/dashboards/v1/ast/filters/filter.proto\x1aGcom/coralogixapis/dashboards/v1/ast/widgets/common/data_mode_type.proto\x1a?com/coralogixapis/dashboards/v1/ast/widgets/common/legend.proto\x1aRcom/coralogixapis/dashboards/v1/ast/widgets/common/metrics_query_editor_mode.proto\x1a>com/coralogixapis/dashboards/v1/ast/widgets/common/scale.proto\x1a>com/coralogixapis/dashboards/v1/ast/widgets/common/units.proto\x1a=com/coralogixapis/dashboards/v1/common/logs_aggregation.proto\x1a>com/coralogixapis/dashboards/v1/common/observation_field.proto\x1a2com/coralogixapis/dashboards/v1/common/query.proto\x1a7com/coralogixapis/dashboards/v1/common/span_field.proto\x1a>com/coralogixapis/dashboards/v1/common/spans_aggregation.proto\x1a7com/coralogixapis/dashboards/v1/common/time_frame.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\"\xe69\n" +
	"\tLineChart\x12q\n" +
	"\x06legend\x18\x02 \x01(\v2:.com.coralogixapis.dashboards.v1.ast.widgets.common.LegendB\x1d\x92A\x1a2\x18Widget's legend settingsR\x06legend\x12o\n" +
	"\atooltip\x18\x06 \x01(\v2>.com.coralogixapis.dashboards.v1.ast.widgets.LineChart.TooltipB\x15\x92A\x122\x10Tooltip settingsR\atooltip\x12\x97\x01\n" +
	"\x11query_definitions\x18\a \x03(\v2F.com.coralogixapis.dashboards.v1.ast.widgets.LineChart.QueryDefinitionB\"\x92A\x1f2\x1dDefinitions of widget queriesR\x10queryDefinitions\x12\xa8\x01\n" +
	"\fstacked_line\x18\t \x01(\x0e2B.com.coralogixapis.dashboards.v1.ast.widgets.LineChart.StackedLineBA\x92A>2<Type of stacked line, can be undefined, absolute or relativeR\vstackedLine\x12\xc4\x01\n" +
	"\rconnect_nulls\x18\n" +
	" \x01(\v2\x1a.google.protobuf.BoolValueB\x82\x01\x92A\x7f2vWhether the line should remain connected instead of producing scattered points when null values are present in betweenJ\x05falseR\fconnectNulls\x1a\xeb\x12\n" +
	"\x0fQueryDefinition\x12\x89\x01\n" +
	"\x02id\x18\x01 \x01(\v2\x1c.google.protobuf.StringValueB[\x92AX2!Unique id of the query definitionJ3{ \"value\": \"73c65643-91d5-dba2-35cd-baa49dc65331\" }R\x02id\x12e\n" +
	"\x05query\x18\x02 \x01(\v2<.com.coralogixapis.dashboards.v1.ast.widgets.LineChart.QueryB\x11\x92A\x0e2\fQuery objectR\x05query\x12\xa3\x01\n" +
	"\x14series_name_template\x18\x03 \x01(\v2\x1c.google.protobuf.StringValueBS\x92AP2#Custom template for the series nameJ){ \"value\": \"Trace of {{ application }}\" }R\x12seriesNameTemplate\x12\x82\x01\n" +
	"\x12series_count_limit\x18\x04 \x01(\v2\x1b.google.protobuf.Int64ValueB7\x92A42!Max count of the series per queryJ\x0f{ \"value\": 50 }R\x10seriesCountLimit\x12\x97\x01\n" +
	"\x04unit\x18\x05 \x01(\x0e28.com.coralogixapis.dashboards.v1.ast.widgets.common.UnitBI\x92AF2AUnit of the query results - one from a predefined list, or customJ\x013R\x04unit\x12\x82\x01\n" +
	"\n" +
	"scale_type\x18\x06 \x01(\x0e2=.com.coralogixapis.dashboards.v1.ast.widgets.common.ScaleTypeB$\x92A!2\x1fScale type - linear/logarithmicR\tscaleType\x12g\n" +
	"\x04name\x18\a \x01(\v2\x1c.google.protobuf.StringValueB5\x92A22\x18Custom name of the queryJ\x16{ \"value\": \"Query A\" }R\x04name\x12Z\n" +
	"\n" +
	"is_visible\x18\b \x01(\v2\x1a.google.protobuf.BoolValueB\x1f\x92A\x1c2\x14Is the query visibleJ\x04trueR\tisVisible\x12\x9f\x01\n" +
	"\fcolor_scheme\x18\t \x01(\v2\x1c.google.protobuf.StringValueB^\x92A[2AApplied color scheme for this query, one of the predefined valuesJ\x16{ \"value\": \"classic\" }R\vcolorScheme\x12\x8f\x01\n" +
	"\n" +
	"resolution\x18\n" +
	" \x01(\v2A.com.coralogixapis.dashboards.v1.ast.widgets.LineChart.ResolutionB,\x92A)2'Resolution settings of the query valuesR\n" +
	"resolution\x12\x93\x01\n" +
	"\x0edata_mode_type\x18\v \x01(\x0e2@.com.coralogixapis.dashboards.v1.ast.widgets.common.DataModeTypeB+\x92A(2&Data mode type, either high or archiveR\fdataModeType\x12\x9c\x01\n" +
	"\vcustom_unit\x18\f \x01(\v2\x1c.google.protobuf.StringValueB]\x92AZ2DCustom unit (requires to have unit field as 'custom' to take effect)J\x12{ \"value\": \"rpm\" }R\n" +
	"customUnit\x12\x8f\x01\n" +
	"\adecimal\x18\r \x01(\v2\x1b.google.protobuf.Int32ValueBX\x92AU2PNumber indicating the decimal precision of the numeric values, within range 0-15J\x014R\adecimal\x12\x88\x01\n" +
	"\vhash_colors\x18\x0e \x01(\v2\x1a.google.protobuf.BoolValueBK\x92AH2?Whether to ignore color scheme and derive colors from algorithmJ\x05falseR\n" +
	"hashColors\x12r\n" +
	"\n" +
	"y_axis_min\x18\x0f \x01(\v2\x1b.google.protobuf.FloatValueB7\x92A42+Number indicating the lower band for y axisJ\x05-1000R\byAxisMin\x12q\n" +
	"\n" +
	"y_axis_max\x18\x10 \x01(\v2\x1b.google.protobuf.FloatValueB6\x92A32+Number indicating the upper band for y axisJ\x041000R\byAxisMax\x12\x89\x01\n" +
	"\x11decimal_precision\x18\x11 \x01(\v2\x1a.google.protobuf.BoolValueB@\x92A=24Whether to render numeric value without abbreviationJ\x05falseR\x10decimalPrecision:]\x92AZ\n" +
	"X*\tLineChart2>LineChart represents the configuration of a line chart widget.\xd2\x01\x02id\xd2\x01\x05query\x1a\x8b\x03\n" +
	"\x05Query\x12V\n" +
	"\x04logs\x18\x01 \x01(\v2@.com.coralogixapis.dashboards.v1.ast.widgets.LineChart.LogsQueryH\x00R\x04logs\x12_\n" +
	"\ametrics\x18\x02 \x01(\v2C.com.coralogixapis.dashboards.v1.ast.widgets.LineChart.MetricsQueryH\x00R\ametrics\x12Y\n" +
	"\x05spans\x18\x03 \x01(\v2A.com.coralogixapis.dashboards.v1.ast.widgets.LineChart.SpansQueryH\x00R\x05spans\x12e\n" +
	"\tdataprime\x18\x05 \x01(\v2E.com.coralogixapis.dashboards.v1.ast.widgets.LineChart.DataprimeQueryH\x00R\tdataprimeB\a\n" +
	"\x05value\x1a\x8d\x02\n" +
	"\aTooltip\x12F\n" +
	"\vshow_labels\x18\x01 \x01(\v2\x1a.google.protobuf.BoolValueB\t\x92A\x06J\x04trueR\n" +
	"showLabels\x12\xb9\x01\n" +
	"\x04type\x18\x02 \x01(\x0e2B.com.coralogixapis.dashboards.v1.ast.widgets.LineChart.TooltipTypeBa\x92A^2\\Type of the tooltip display, can be showing single series value or all series values at onceR\x04type\x1a\xaa\a\n" +
	"\tLogsQuery\x12\xba\x01\n" +
	"\flucene_query\x18\x01 \x01(\v23.com.coralogixapis.dashboards.v1.common.LuceneQueryBb\x92A_2$A Lucene query string to search logsJ7{ \"value\": \"coralogix.metadata.subsystemName: cx_rum\" }R\vluceneQuery\x12l\n" +
	"\bgroup_by\x18\x02 \x03(\v2\x1c.google.protobuf.StringValueB3\x92A02.List of field names to group the query resultsR\agroupBy\x12\xa9\x01\n" +
	"\faggregations\x18\x03 \x03(\v27.com.coralogixapis.dashboards.v1.common.LogsAggregationBL\x92AI2GList of query aggregation functions, it should contain only one elementR\faggregations\x12\x8d\x01\n" +
	"\afilters\x18\x04 \x03(\v2>.com.coralogixapis.dashboards.v1.ast.filters.Filter.LogsFilterB3\x92A02.List of filters that narrow down query resultsR\afilters\x12\x93\x01\n" +
	"\tgroup_bys\x18\x05 \x03(\v28.com.coralogixapis.dashboards.v1.common.ObservationFieldB<\x92A927A list of observation fields to group the query resultsR\bgroupBys\x12\x9f\x01\n" +
	"\n" +
	"time_frame\x18\x06 \x01(\v27.com.coralogixapis.dashboards.v1.common.TimeFrameSelectBG\x92AD2BSpecifies the time period for which the results should be returnedR\ttimeFrame\x1a\x9a\x05\n" +
	"\fMetricsQuery\x12\xa3\x01\n" +
	"\fpromql_query\x18\x01 \x01(\v23.com.coralogixapis.dashboards.v1.common.PromQlQueryBK\x92AH2(PromQL query string for querying metricsJ\x1c{ \"value\": \"up{job='abc'}\" }R\vpromqlQuery\x12y\n" +
	"\afilters\x18\x02 \x03(\v2A.com.coralogixapis.dashboards.v1.ast.filters.Filter.MetricsFilterB\x1c\x92A\x192\x17List of metrics filtersR\afilters\x12\xc6\x01\n" +
	"\veditor_mode\x18\x03 \x01(\x0e2J.com.coralogixapis.dashboards.v1.ast.widgets.common.MetricsQueryEditorModeBY\x92AV2QType of the query editor used to generate the query, can be text or builder basedJ\x011R\n" +
	"editorMode\x12\x9f\x01\n" +
	"\n" +
	"time_frame\x18\x04 \x01(\v27.com.coralogixapis.dashboards.v1.common.TimeFrameSelectBG\x92AD2BSpecifies the time period for which the results should be returnedR\ttimeFrame\x1a\x80\a\n" +
	"\n" +
	"SpansQuery\x12\x87\x01\n" +
	"\flucene_query\x18\x01 \x01(\v23.com.coralogixapis.dashboards.v1.common.LuceneQueryB/\x92A,2*Lucene query string to search span recordsR\vluceneQuery\x12\x80\x01\n" +
	"\bgroup_by\x18\x02 \x03(\v21.com.coralogixapis.dashboards.v1.common.SpanFieldB2\x92A/2-List of field names to group the span recordsR\agroupBy\x12\xaf\x01\n" +
	"\faggregations\x18\x03 \x03(\v28.com.coralogixapis.dashboards.v1.common.SpansAggregationBQ\x92AN2LList of span query aggregation functions, it should contain only one elementR\faggregations\x12z\n" +
	"\afilters\x18\x04 \x03(\v2?.com.coralogixapis.dashboards.v1.ast.filters.Filter.SpansFilterB\x1f\x92A\x1c2\x1aList of span query filtersR\afilters\x12\x9f\x01\n" +
	"\n" +
	"time_frame\x18\x05 \x01(\v27.com.coralogixapis.dashboards.v1.common.TimeFrameSelectBG\x92AD2BSpecifies the time period for which the records should be returnedR\ttimeFrame\x12\x94\x01\n" +
	"\tgroup_bys\x18\x06 \x03(\v2<.com.coralogixapis.dashboards.v1.common.SpanObservationFieldB9\x92A624A list of observation fields to group the records byR\bgroupBys\x1a\xad\x03\n" +
	"\x0eDataprimeQuery\x12\x86\x01\n" +
	"\x0fdataprime_query\x18\x01 \x01(\v26.com.coralogixapis.dashboards.v1.common.DataprimeQueryB%\x92A\"2 Dataprime query string to searchR\x0edataprimeQuery\x12p\n" +
	"\afilters\x18\x02 \x03(\v2:.com.coralogixapis.dashboards.v1.ast.filters.Filter.SourceB\x1a\x92A\x172\x15List of query filtersR\afilters\x12\x9f\x01\n" +
	"\n" +
	"time_frame\x18\x03 \x01(\v27.com.coralogixapis.dashboards.v1.common.TimeFrameSelectBG\x92AD2BSpecifies the time period for which the records should be returnedR\ttimeFrame\x1a\x9c\x02\n" +
	"\n" +
	"Resolution\x12\x86\x01\n" +
	"\binterval\x18\x01 \x01(\v2\x19.google.protobuf.DurationBO\x92AL2JInterval of value sampling, i.e. every 5 minutes, every 1 second and so onR\binterval\x12\x84\x01\n" +
	"\x11buckets_presented\x18\x02 \x01(\v2\x1b.google.protobuf.Int32ValueB:\x92A725How many buckets to present in the selected timeframeR\x10bucketsPresented\"Z\n" +
	"\vTooltipType\x12\x1c\n" +
	"\x18TOOLTIP_TYPE_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10TOOLTIP_TYPE_ALL\x10\x01\x12\x17\n" +
	"\x13TOOLTIP_TYPE_SINGLE\x10\x02\"a\n" +
	"\vStackedLine\x12\x1c\n" +
	"\x18STACKED_LINE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15STACKED_LINE_ABSOLUTE\x10\x01\x12\x19\n" +
	"\x15STACKED_LINE_RELATIVE\x10\x02:d\x92Aa\n" +
	"_*\tLineChart2>LineChart represents the configuration of a line chart widget.\xd2\x01\x11query_definitionsJ\x04\b\x01\x10\x02J\x04\b\x03\x10\x04J\x04\b\x04\x10\x05J\x04\b\x05\x10\x06J\x04\b\b\x10\tb\x06proto3"

var (
	file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescOnce sync.Once
	file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescData []byte
)

func file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDesc), len(file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDesc)))
	})
	return file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescData
}

var file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_goTypes = []any{
	(LineChart_TooltipType)(0),           // 0: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.TooltipType
	(LineChart_StackedLine)(0),           // 1: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.StackedLine
	(*LineChart)(nil),                    // 2: com.coralogixapis.dashboards.v1.ast.widgets.LineChart
	(*LineChart_QueryDefinition)(nil),    // 3: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.QueryDefinition
	(*LineChart_Query)(nil),              // 4: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.Query
	(*LineChart_Tooltip)(nil),            // 5: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.Tooltip
	(*LineChart_LogsQuery)(nil),          // 6: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.LogsQuery
	(*LineChart_MetricsQuery)(nil),       // 7: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.MetricsQuery
	(*LineChart_SpansQuery)(nil),         // 8: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.SpansQuery
	(*LineChart_DataprimeQuery)(nil),     // 9: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.DataprimeQuery
	(*LineChart_Resolution)(nil),         // 10: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.Resolution
	(*common.Legend)(nil),                // 11: com.coralogixapis.dashboards.v1.ast.widgets.common.Legend
	(*wrapperspb.BoolValue)(nil),         // 12: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil),       // 13: google.protobuf.StringValue
	(*wrapperspb.Int64Value)(nil),        // 14: google.protobuf.Int64Value
	(common.Unit)(0),                     // 15: com.coralogixapis.dashboards.v1.ast.widgets.common.Unit
	(common.ScaleType)(0),                // 16: com.coralogixapis.dashboards.v1.ast.widgets.common.ScaleType
	(common.DataModeType)(0),             // 17: com.coralogixapis.dashboards.v1.ast.widgets.common.DataModeType
	(*wrapperspb.Int32Value)(nil),        // 18: google.protobuf.Int32Value
	(*wrapperspb.FloatValue)(nil),        // 19: google.protobuf.FloatValue
	(*common1.LuceneQuery)(nil),          // 20: com.coralogixapis.dashboards.v1.common.LuceneQuery
	(*common1.LogsAggregation)(nil),      // 21: com.coralogixapis.dashboards.v1.common.LogsAggregation
	(*filters.Filter_LogsFilter)(nil),    // 22: com.coralogixapis.dashboards.v1.ast.filters.Filter.LogsFilter
	(*common1.ObservationField)(nil),     // 23: com.coralogixapis.dashboards.v1.common.ObservationField
	(*common1.TimeFrameSelect)(nil),      // 24: com.coralogixapis.dashboards.v1.common.TimeFrameSelect
	(*common1.PromQlQuery)(nil),          // 25: com.coralogixapis.dashboards.v1.common.PromQlQuery
	(*filters.Filter_MetricsFilter)(nil), // 26: com.coralogixapis.dashboards.v1.ast.filters.Filter.MetricsFilter
	(common.MetricsQueryEditorMode)(0),   // 27: com.coralogixapis.dashboards.v1.ast.widgets.common.MetricsQueryEditorMode
	(*common1.SpanField)(nil),            // 28: com.coralogixapis.dashboards.v1.common.SpanField
	(*common1.SpansAggregation)(nil),     // 29: com.coralogixapis.dashboards.v1.common.SpansAggregation
	(*filters.Filter_SpansFilter)(nil),   // 30: com.coralogixapis.dashboards.v1.ast.filters.Filter.SpansFilter
	(*common1.SpanObservationField)(nil), // 31: com.coralogixapis.dashboards.v1.common.SpanObservationField
	(*common1.DataprimeQuery)(nil),       // 32: com.coralogixapis.dashboards.v1.common.DataprimeQuery
	(*filters.Filter_Source)(nil),        // 33: com.coralogixapis.dashboards.v1.ast.filters.Filter.Source
	(*durationpb.Duration)(nil),          // 34: google.protobuf.Duration
}
var file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_depIdxs = []int32{
	11, // 0: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.legend:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.Legend
	5,  // 1: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.tooltip:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.LineChart.Tooltip
	3,  // 2: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.query_definitions:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.LineChart.QueryDefinition
	1,  // 3: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.stacked_line:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.LineChart.StackedLine
	12, // 4: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.connect_nulls:type_name -> google.protobuf.BoolValue
	13, // 5: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.QueryDefinition.id:type_name -> google.protobuf.StringValue
	4,  // 6: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.QueryDefinition.query:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.LineChart.Query
	13, // 7: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.QueryDefinition.series_name_template:type_name -> google.protobuf.StringValue
	14, // 8: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.QueryDefinition.series_count_limit:type_name -> google.protobuf.Int64Value
	15, // 9: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.QueryDefinition.unit:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.Unit
	16, // 10: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.QueryDefinition.scale_type:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.ScaleType
	13, // 11: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.QueryDefinition.name:type_name -> google.protobuf.StringValue
	12, // 12: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.QueryDefinition.is_visible:type_name -> google.protobuf.BoolValue
	13, // 13: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.QueryDefinition.color_scheme:type_name -> google.protobuf.StringValue
	10, // 14: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.QueryDefinition.resolution:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.LineChart.Resolution
	17, // 15: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.QueryDefinition.data_mode_type:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.DataModeType
	13, // 16: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.QueryDefinition.custom_unit:type_name -> google.protobuf.StringValue
	18, // 17: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.QueryDefinition.decimal:type_name -> google.protobuf.Int32Value
	12, // 18: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.QueryDefinition.hash_colors:type_name -> google.protobuf.BoolValue
	19, // 19: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.QueryDefinition.y_axis_min:type_name -> google.protobuf.FloatValue
	19, // 20: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.QueryDefinition.y_axis_max:type_name -> google.protobuf.FloatValue
	12, // 21: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.QueryDefinition.decimal_precision:type_name -> google.protobuf.BoolValue
	6,  // 22: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.Query.logs:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.LineChart.LogsQuery
	7,  // 23: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.Query.metrics:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.LineChart.MetricsQuery
	8,  // 24: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.Query.spans:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.LineChart.SpansQuery
	9,  // 25: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.Query.dataprime:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.LineChart.DataprimeQuery
	12, // 26: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.Tooltip.show_labels:type_name -> google.protobuf.BoolValue
	0,  // 27: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.Tooltip.type:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.LineChart.TooltipType
	20, // 28: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.LogsQuery.lucene_query:type_name -> com.coralogixapis.dashboards.v1.common.LuceneQuery
	13, // 29: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.LogsQuery.group_by:type_name -> google.protobuf.StringValue
	21, // 30: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.LogsQuery.aggregations:type_name -> com.coralogixapis.dashboards.v1.common.LogsAggregation
	22, // 31: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.LogsQuery.filters:type_name -> com.coralogixapis.dashboards.v1.ast.filters.Filter.LogsFilter
	23, // 32: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.LogsQuery.group_bys:type_name -> com.coralogixapis.dashboards.v1.common.ObservationField
	24, // 33: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.LogsQuery.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrameSelect
	25, // 34: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.MetricsQuery.promql_query:type_name -> com.coralogixapis.dashboards.v1.common.PromQlQuery
	26, // 35: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.MetricsQuery.filters:type_name -> com.coralogixapis.dashboards.v1.ast.filters.Filter.MetricsFilter
	27, // 36: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.MetricsQuery.editor_mode:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.MetricsQueryEditorMode
	24, // 37: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.MetricsQuery.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrameSelect
	20, // 38: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.SpansQuery.lucene_query:type_name -> com.coralogixapis.dashboards.v1.common.LuceneQuery
	28, // 39: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.SpansQuery.group_by:type_name -> com.coralogixapis.dashboards.v1.common.SpanField
	29, // 40: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.SpansQuery.aggregations:type_name -> com.coralogixapis.dashboards.v1.common.SpansAggregation
	30, // 41: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.SpansQuery.filters:type_name -> com.coralogixapis.dashboards.v1.ast.filters.Filter.SpansFilter
	24, // 42: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.SpansQuery.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrameSelect
	31, // 43: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.SpansQuery.group_bys:type_name -> com.coralogixapis.dashboards.v1.common.SpanObservationField
	32, // 44: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.DataprimeQuery.dataprime_query:type_name -> com.coralogixapis.dashboards.v1.common.DataprimeQuery
	33, // 45: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.DataprimeQuery.filters:type_name -> com.coralogixapis.dashboards.v1.ast.filters.Filter.Source
	24, // 46: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.DataprimeQuery.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrameSelect
	34, // 47: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.Resolution.interval:type_name -> google.protobuf.Duration
	18, // 48: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.Resolution.buckets_presented:type_name -> google.protobuf.Int32Value
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_init() }
func file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_init() {
	if File_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto != nil {
		return
	}
	file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[2].OneofWrappers = []any{
		(*LineChart_Query_Logs)(nil),
		(*LineChart_Query_Metrics)(nil),
		(*LineChart_Query_Spans)(nil),
		(*LineChart_Query_Dataprime)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDesc), len(file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_depIdxs,
		EnumInfos:         file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_enumTypes,
		MessageInfos:      file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto = out.File
	file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_goTypes = nil
	file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_depIdxs = nil
}
