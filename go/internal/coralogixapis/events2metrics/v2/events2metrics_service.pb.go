// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.1
// source: com/coralogixapis/events2metrics/v2/events2metrics_service.proto

package v2

import (
	_ "github.com/coralogix/coralogix-management-sdk/go/internal/coralogix/common/v1"
	v21 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/logs2metrics/v2"
	v2 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/spans2metrics/v2"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// represents e2m create request
type CreateE2MRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	E2M           *E2MCreateParams       `protobuf:"bytes,1,opt,name=e2m,proto3" json:"e2m,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateE2MRequest) Reset() {
	*x = CreateE2MRequest{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateE2MRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateE2MRequest) ProtoMessage() {}

func (x *CreateE2MRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateE2MRequest.ProtoReflect.Descriptor instead.
func (*CreateE2MRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateE2MRequest) GetE2M() *E2MCreateParams {
	if x != nil {
		return x.E2M
	}
	return nil
}

// represents e2m create response
type CreateE2MResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	E2M           *E2M                   `protobuf:"bytes,1,opt,name=e2m,proto3" json:"e2m,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateE2MResponse) Reset() {
	*x = CreateE2MResponse{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateE2MResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateE2MResponse) ProtoMessage() {}

func (x *CreateE2MResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateE2MResponse.ProtoReflect.Descriptor instead.
func (*CreateE2MResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateE2MResponse) GetE2M() *E2M {
	if x != nil {
		return x.E2M
	}
	return nil
}

// represents e2m get list request
type ListE2MRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListE2MRequest) Reset() {
	*x = ListE2MRequest{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListE2MRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListE2MRequest) ProtoMessage() {}

func (x *ListE2MRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListE2MRequest.ProtoReflect.Descriptor instead.
func (*ListE2MRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescGZIP(), []int{2}
}

// represents response of
type ListE2MResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of event to metrics definitions
	E2M           []*E2M `protobuf:"bytes,1,rep,name=e2m,proto3" json:"e2m,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListE2MResponse) Reset() {
	*x = ListE2MResponse{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListE2MResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListE2MResponse) ProtoMessage() {}

func (x *ListE2MResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListE2MResponse.ProtoReflect.Descriptor instead.
func (*ListE2MResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListE2MResponse) GetE2M() []*E2M {
	if x != nil {
		return x.E2M
	}
	return nil
}

// represents e2m replace request
type ReplaceE2MRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	E2M           *E2M                   `protobuf:"bytes,1,opt,name=e2m,proto3" json:"e2m,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplaceE2MRequest) Reset() {
	*x = ReplaceE2MRequest{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceE2MRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceE2MRequest) ProtoMessage() {}

func (x *ReplaceE2MRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceE2MRequest.ProtoReflect.Descriptor instead.
func (*ReplaceE2MRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescGZIP(), []int{4}
}

func (x *ReplaceE2MRequest) GetE2M() *E2M {
	if x != nil {
		return x.E2M
	}
	return nil
}

// represents e2m replace response
type ReplaceE2MResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	E2M           *E2M                   `protobuf:"bytes,1,opt,name=e2m,proto3" json:"e2m,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplaceE2MResponse) Reset() {
	*x = ReplaceE2MResponse{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceE2MResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceE2MResponse) ProtoMessage() {}

func (x *ReplaceE2MResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceE2MResponse.ProtoReflect.Descriptor instead.
func (*ReplaceE2MResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescGZIP(), []int{5}
}

func (x *ReplaceE2MResponse) GetE2M() *E2M {
	if x != nil {
		return x.E2M
	}
	return nil
}

// represents get request for a single e2m by id
type GetE2MRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Id            *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetE2MRequest) Reset() {
	*x = GetE2MRequest{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetE2MRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetE2MRequest) ProtoMessage() {}

func (x *GetE2MRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetE2MRequest.ProtoReflect.Descriptor instead.
func (*GetE2MRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetE2MRequest) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

// represents response for a single e2m by id
type GetE2MResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	E2M           *E2M                   `protobuf:"bytes,1,opt,name=e2m,proto3" json:"e2m,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetE2MResponse) Reset() {
	*x = GetE2MResponse{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetE2MResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetE2MResponse) ProtoMessage() {}

func (x *GetE2MResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetE2MResponse.ProtoReflect.Descriptor instead.
func (*GetE2MResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetE2MResponse) GetE2M() *E2M {
	if x != nil {
		return x.E2M
	}
	return nil
}

// represents e2m delete request
type DeleteE2MRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id of e2m to be deleted
	Id            *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteE2MRequest) Reset() {
	*x = DeleteE2MRequest{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteE2MRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteE2MRequest) ProtoMessage() {}

func (x *DeleteE2MRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteE2MRequest.ProtoReflect.Descriptor instead.
func (*DeleteE2MRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteE2MRequest) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

// represents e2m delete response
type DeleteE2MResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id of deleted e2m
	Id            *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteE2MResponse) Reset() {
	*x = DeleteE2MResponse{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteE2MResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteE2MResponse) ProtoMessage() {}

func (x *DeleteE2MResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteE2MResponse.ProtoReflect.Descriptor instead.
func (*DeleteE2MResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteE2MResponse) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

// represents one of e2m actions create/replace/delete
type E2MExecutionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*E2MExecutionRequest_Create
	//	*E2MExecutionRequest_Replace
	//	*E2MExecutionRequest_Delete
	Request       isE2MExecutionRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *E2MExecutionRequest) Reset() {
	*x = E2MExecutionRequest{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *E2MExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2MExecutionRequest) ProtoMessage() {}

func (x *E2MExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2MExecutionRequest.ProtoReflect.Descriptor instead.
func (*E2MExecutionRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescGZIP(), []int{10}
}

func (x *E2MExecutionRequest) GetRequest() isE2MExecutionRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *E2MExecutionRequest) GetCreate() *CreateE2MRequest {
	if x != nil {
		if x, ok := x.Request.(*E2MExecutionRequest_Create); ok {
			return x.Create
		}
	}
	return nil
}

func (x *E2MExecutionRequest) GetReplace() *ReplaceE2MRequest {
	if x != nil {
		if x, ok := x.Request.(*E2MExecutionRequest_Replace); ok {
			return x.Replace
		}
	}
	return nil
}

func (x *E2MExecutionRequest) GetDelete() *DeleteE2MRequest {
	if x != nil {
		if x, ok := x.Request.(*E2MExecutionRequest_Delete); ok {
			return x.Delete
		}
	}
	return nil
}

type isE2MExecutionRequest_Request interface {
	isE2MExecutionRequest_Request()
}

type E2MExecutionRequest_Create struct {
	Create *CreateE2MRequest `protobuf:"bytes,1,opt,name=create,proto3,oneof"`
}

type E2MExecutionRequest_Replace struct {
	Replace *ReplaceE2MRequest `protobuf:"bytes,2,opt,name=replace,proto3,oneof"`
}

type E2MExecutionRequest_Delete struct {
	Delete *DeleteE2MRequest `protobuf:"bytes,3,opt,name=delete,proto3,oneof"`
}

func (*E2MExecutionRequest_Create) isE2MExecutionRequest_Request() {}

func (*E2MExecutionRequest_Replace) isE2MExecutionRequest_Request() {}

func (*E2MExecutionRequest_Delete) isE2MExecutionRequest_Request() {}

// an atomic list of e2m action that are executed in the same request
type AtomicBatchExecuteE2MRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Requests      []*E2MExecutionRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AtomicBatchExecuteE2MRequest) Reset() {
	*x = AtomicBatchExecuteE2MRequest{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AtomicBatchExecuteE2MRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtomicBatchExecuteE2MRequest) ProtoMessage() {}

func (x *AtomicBatchExecuteE2MRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtomicBatchExecuteE2MRequest.ProtoReflect.Descriptor instead.
func (*AtomicBatchExecuteE2MRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescGZIP(), []int{11}
}

func (x *AtomicBatchExecuteE2MRequest) GetRequests() []*E2MExecutionRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

// represents a response of e2m execution
type E2MExecutionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*E2MExecutionResponse_Created
	//	*E2MExecutionResponse_Replaced
	//	*E2MExecutionResponse_Deleted
	Response      isE2MExecutionResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *E2MExecutionResponse) Reset() {
	*x = E2MExecutionResponse{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *E2MExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2MExecutionResponse) ProtoMessage() {}

func (x *E2MExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2MExecutionResponse.ProtoReflect.Descriptor instead.
func (*E2MExecutionResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescGZIP(), []int{12}
}

func (x *E2MExecutionResponse) GetResponse() isE2MExecutionResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *E2MExecutionResponse) GetCreated() *CreateE2MResponse {
	if x != nil {
		if x, ok := x.Response.(*E2MExecutionResponse_Created); ok {
			return x.Created
		}
	}
	return nil
}

func (x *E2MExecutionResponse) GetReplaced() *ReplaceE2MResponse {
	if x != nil {
		if x, ok := x.Response.(*E2MExecutionResponse_Replaced); ok {
			return x.Replaced
		}
	}
	return nil
}

func (x *E2MExecutionResponse) GetDeleted() *DeleteE2MResponse {
	if x != nil {
		if x, ok := x.Response.(*E2MExecutionResponse_Deleted); ok {
			return x.Deleted
		}
	}
	return nil
}

type isE2MExecutionResponse_Response interface {
	isE2MExecutionResponse_Response()
}

type E2MExecutionResponse_Created struct {
	Created *CreateE2MResponse `protobuf:"bytes,1,opt,name=created,proto3,oneof"`
}

type E2MExecutionResponse_Replaced struct {
	Replaced *ReplaceE2MResponse `protobuf:"bytes,2,opt,name=replaced,proto3,oneof"`
}

type E2MExecutionResponse_Deleted struct {
	Deleted *DeleteE2MResponse `protobuf:"bytes,3,opt,name=deleted,proto3,oneof"`
}

func (*E2MExecutionResponse_Created) isE2MExecutionResponse_Response() {}

func (*E2MExecutionResponse_Replaced) isE2MExecutionResponse_Response() {}

func (*E2MExecutionResponse_Deleted) isE2MExecutionResponse_Response() {}

// represents a response to atomic list of e2m actions
type AtomicBatchExecuteE2MResponse struct {
	state             protoimpl.MessageState  `protogen:"open.v1"`
	MatchingResponses []*E2MExecutionResponse `protobuf:"bytes,1,rep,name=matching_responses,json=matchingResponses,proto3" json:"matching_responses,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AtomicBatchExecuteE2MResponse) Reset() {
	*x = AtomicBatchExecuteE2MResponse{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AtomicBatchExecuteE2MResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtomicBatchExecuteE2MResponse) ProtoMessage() {}

func (x *AtomicBatchExecuteE2MResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtomicBatchExecuteE2MResponse.ProtoReflect.Descriptor instead.
func (*AtomicBatchExecuteE2MResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescGZIP(), []int{13}
}

func (x *AtomicBatchExecuteE2MResponse) GetMatchingResponses() []*E2MExecutionResponse {
	if x != nil {
		return x.MatchingResponses
	}
	return nil
}

// represents a request of list label cardinality
type ListLabelsCardinalityRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Query:
	//
	//	*ListLabelsCardinalityRequest_SpansQuery
	//	*ListLabelsCardinalityRequest_LogsQuery
	Query         isListLabelsCardinalityRequest_Query `protobuf_oneof:"query"`
	MetricLabels  []*MetricLabel                       `protobuf:"bytes,3,rep,name=metric_labels,json=metricLabels,proto3" json:"metric_labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListLabelsCardinalityRequest) Reset() {
	*x = ListLabelsCardinalityRequest{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLabelsCardinalityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabelsCardinalityRequest) ProtoMessage() {}

func (x *ListLabelsCardinalityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabelsCardinalityRequest.ProtoReflect.Descriptor instead.
func (*ListLabelsCardinalityRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListLabelsCardinalityRequest) GetQuery() isListLabelsCardinalityRequest_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ListLabelsCardinalityRequest) GetSpansQuery() *v2.SpansQuery {
	if x != nil {
		if x, ok := x.Query.(*ListLabelsCardinalityRequest_SpansQuery); ok {
			return x.SpansQuery
		}
	}
	return nil
}

func (x *ListLabelsCardinalityRequest) GetLogsQuery() *v21.LogsQuery {
	if x != nil {
		if x, ok := x.Query.(*ListLabelsCardinalityRequest_LogsQuery); ok {
			return x.LogsQuery
		}
	}
	return nil
}

func (x *ListLabelsCardinalityRequest) GetMetricLabels() []*MetricLabel {
	if x != nil {
		return x.MetricLabels
	}
	return nil
}

type isListLabelsCardinalityRequest_Query interface {
	isListLabelsCardinalityRequest_Query()
}

type ListLabelsCardinalityRequest_SpansQuery struct {
	SpansQuery *v2.SpansQuery `protobuf:"bytes,1,opt,name=spans_query,json=spansQuery,proto3,oneof"`
}

type ListLabelsCardinalityRequest_LogsQuery struct {
	LogsQuery *v21.LogsQuery `protobuf:"bytes,2,opt,name=logs_query,json=logsQuery,proto3,oneof"`
}

func (*ListLabelsCardinalityRequest_SpansQuery) isListLabelsCardinalityRequest_Query() {}

func (*ListLabelsCardinalityRequest_LogsQuery) isListLabelsCardinalityRequest_Query() {}

// represents labels permutation cardinality
type LabelsPermutationsCardinalityDay struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Day           string                 `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`
	Permutations  int32                  `protobuf:"varint,2,opt,name=permutations,proto3" json:"permutations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LabelsPermutationsCardinalityDay) Reset() {
	*x = LabelsPermutationsCardinalityDay{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelsPermutationsCardinalityDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelsPermutationsCardinalityDay) ProtoMessage() {}

func (x *LabelsPermutationsCardinalityDay) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelsPermutationsCardinalityDay.ProtoReflect.Descriptor instead.
func (*LabelsPermutationsCardinalityDay) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescGZIP(), []int{15}
}

func (x *LabelsPermutationsCardinalityDay) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *LabelsPermutationsCardinalityDay) GetPermutations() int32 {
	if x != nil {
		return x.Permutations
	}
	return 0
}

// response  represented by list of labels permutation cardinality
type ListLabelsCardinalityResponse struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Permutations  []*LabelsPermutationsCardinalityDay `protobuf:"bytes,1,rep,name=permutations,proto3" json:"permutations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListLabelsCardinalityResponse) Reset() {
	*x = ListLabelsCardinalityResponse{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLabelsCardinalityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabelsCardinalityResponse) ProtoMessage() {}

func (x *ListLabelsCardinalityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabelsCardinalityResponse.ProtoReflect.Descriptor instead.
func (*ListLabelsCardinalityResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescGZIP(), []int{16}
}

func (x *ListLabelsCardinalityResponse) GetPermutations() []*LabelsPermutationsCardinalityDay {
	if x != nil {
		return x.Permutations
	}
	return nil
}

// get e2m limits request
type GetLimitsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLimitsRequest) Reset() {
	*x = GetLimitsRequest{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLimitsRequest) ProtoMessage() {}

func (x *GetLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLimitsRequest.ProtoReflect.Descriptor instead.
func (*GetLimitsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescGZIP(), []int{17}
}

// get e2m limits response
type GetLimitsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// company id
	CompanyId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// labels limit
	LabelsLimit int32 `protobuf:"varint,2,opt,name=labels_limit,json=labelsLimit,proto3" json:"labels_limit,omitempty"`
	// permutation limit/used
	PermutationsLimit *GetLimitsResponse_LimitUsage `protobuf:"bytes,3,opt,name=permutations_limit,json=permutationsLimit,proto3" json:"permutations_limit,omitempty"`
	// metrics limit/used5
	MetricsLimit  *GetLimitsResponse_LimitUsage `protobuf:"bytes,4,opt,name=metrics_limit,json=metricsLimit,proto3" json:"metrics_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLimitsResponse) Reset() {
	*x = GetLimitsResponse{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLimitsResponse) ProtoMessage() {}

func (x *GetLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLimitsResponse.ProtoReflect.Descriptor instead.
func (*GetLimitsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetLimitsResponse) GetCompanyId() *wrapperspb.StringValue {
	if x != nil {
		return x.CompanyId
	}
	return nil
}

func (x *GetLimitsResponse) GetLabelsLimit() int32 {
	if x != nil {
		return x.LabelsLimit
	}
	return 0
}

func (x *GetLimitsResponse) GetPermutationsLimit() *GetLimitsResponse_LimitUsage {
	if x != nil {
		return x.PermutationsLimit
	}
	return nil
}

func (x *GetLimitsResponse) GetMetricsLimit() *GetLimitsResponse_LimitUsage {
	if x != nil {
		return x.MetricsLimit
	}
	return nil
}

type GetLimitsResponse_LimitUsage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the limit number of e2m creation
	Limit *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// how many e2m's were created
	Used          *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=used,proto3" json:"used,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLimitsResponse_LimitUsage) Reset() {
	*x = GetLimitsResponse_LimitUsage{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLimitsResponse_LimitUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLimitsResponse_LimitUsage) ProtoMessage() {}

func (x *GetLimitsResponse_LimitUsage) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLimitsResponse_LimitUsage.ProtoReflect.Descriptor instead.
func (*GetLimitsResponse_LimitUsage) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescGZIP(), []int{18, 0}
}

func (x *GetLimitsResponse_LimitUsage) GetLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *GetLimitsResponse_LimitUsage) GetUsed() *wrapperspb.Int32Value {
	if x != nil {
		return x.Used
	}
	return nil
}

var File_com_coralogixapis_events2metrics_v2_events2metrics_service_proto protoreflect.FileDescriptor

var file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDesc = []byte{
	0x0a, 0x40, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x1a, 0x43, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x32, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x70, 0x61,
	0x6e, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x70,
	0x61, 0x6e, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x02,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x32, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x46, 0x0a, 0x03, 0x65, 0x32, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x32, 0x4d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x03, 0x65, 0x32, 0x6d, 0x3a, 0xcf, 0x01, 0x92, 0x41, 0xcb,
	0x01, 0x0a, 0x53, 0x2a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x45, 0x32, 0x4d, 0x20,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x37, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73,
	0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0xd2, 0x01, 0x03, 0x65, 0x32, 0x6d, 0x2a, 0x74, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f,
	0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4e, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2d,
	0x61, 0x6e, 0x64, 0x2d, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x22, 0x4f, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x32, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x03, 0x65, 0x32, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x32, 0x4d, 0x52, 0x03, 0x65, 0x32, 0x6d, 0x22, 0x10, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x32, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xb1, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x32, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x65, 0x32, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x32, 0x4d, 0x52, 0x03, 0x65, 0x32, 0x6d, 0x3a,
	0xe1, 0x01, 0x92, 0x41, 0xdd, 0x01, 0x0a, 0x65, 0x2a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x45,
	0x32, 0x4d, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x4a, 0x54, 0x68, 0x69,
	0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x20, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xd2, 0x01, 0x03, 0x65, 0x32, 0x6d, 0x2a, 0x74, 0x0a,
	0x22, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x4e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x69, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2f, 0x22, 0xb8, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x45,
	0x32, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x03, 0x65, 0x32, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x32, 0x4d,
	0x52, 0x03, 0x65, 0x32, 0x6d, 0x3a, 0xe6, 0x01, 0x92, 0x41, 0xe2, 0x01, 0x0a, 0x6a, 0x2a, 0x13,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x45, 0x32, 0x4d, 0x20, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x4d, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f,
	0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0xd2, 0x01, 0x03, 0x65, 0x32, 0x6d, 0x2a, 0x74, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64,
	0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4e,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d,
	0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x22, 0xc2,
	0x02, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x45, 0x32, 0x4d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x65, 0x32, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x32, 0x4d, 0x52, 0x03, 0x65, 0x32,
	0x6d, 0x3a, 0xef, 0x01, 0x92, 0x41, 0xeb, 0x01, 0x0a, 0x73, 0x2a, 0x14, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x20, 0x45, 0x32, 0x4d, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x55, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x03, 0x65, 0x32, 0x6d, 0x2a, 0x74, 0x0a,
	0x22, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x4e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x69, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2f, 0x22, 0xd0, 0x02, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45, 0x32, 0x4d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x2b, 0x92, 0x41, 0x28, 0x4a, 0x26, 0x22, 0x64, 0x36, 0x61, 0x33, 0x36, 0x35, 0x38, 0x65, 0x2d,
	0x37, 0x38, 0x64, 0x32, 0x2d, 0x34, 0x37, 0x64, 0x30, 0x2d, 0x39, 0x62, 0x38, 0x31, 0x2d, 0x62,
	0x32, 0x63, 0x35, 0x35, 0x31, 0x66, 0x30, 0x31, 0x62, 0x30, 0x39, 0x22, 0x52, 0x02, 0x69, 0x64,
	0x3a, 0xe3, 0x01, 0x92, 0x41, 0xdf, 0x01, 0x0a, 0x67, 0x2a, 0x10, 0x47, 0x65, 0x74, 0x20, 0x45,
	0x32, 0x4d, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x4e, 0x54, 0x68, 0x69,
	0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x02, 0x69, 0x64,
	0x2a, 0x74, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72,
	0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f,
	0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x22, 0xbb, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45, 0x32,
	0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x65, 0x32, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x32, 0x4d,
	0x52, 0x03, 0x65, 0x32, 0x6d, 0x3a, 0xec, 0x01, 0x92, 0x41, 0xe8, 0x01, 0x0a, 0x70, 0x2a, 0x10,
	0x47, 0x65, 0x74, 0x20, 0x45, 0x32, 0x4d, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x56, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x69, 0x6e,
	0x67, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x03, 0x65, 0x32, 0x6d, 0x2a, 0x74,
	0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x4e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x69, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2f, 0x22, 0xd3, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x32, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x4a, 0x26, 0x22, 0x64, 0x36, 0x61, 0x33, 0x36,
	0x35, 0x38, 0x65, 0x2d, 0x37, 0x38, 0x64, 0x32, 0x2d, 0x34, 0x37, 0x64, 0x30, 0x2d, 0x39, 0x62,
	0x38, 0x31, 0x2d, 0x62, 0x32, 0x63, 0x35, 0x35, 0x31, 0x66, 0x30, 0x31, 0x62, 0x30, 0x39, 0x22,
	0x52, 0x02, 0x69, 0x64, 0x3a, 0xe3, 0x01, 0x92, 0x41, 0xdf, 0x01, 0x0a, 0x67, 0x2a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x45, 0x32, 0x4d, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x4c, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74,
	0x6f, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xd2,
	0x01, 0x02, 0x69, 0x64, 0x2a, 0x74, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74,
	0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4e, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64,
	0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x61, 0x6e,
	0x64, 0x2d, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x22, 0xaf, 0x02, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x32, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x3a, 0xeb,
	0x01, 0x92, 0x41, 0xe7, 0x01, 0x0a, 0x6f, 0x2a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20,
	0x45, 0x32, 0x4d, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x54, 0x54, 0x68, 0x69,
	0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65,
	0x6e, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x2a, 0x74, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f,
	0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4e, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2d,
	0x61, 0x6e, 0x64, 0x2d, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x22, 0x96, 0x02, 0x0a,
	0x13, 0x45, 0x32, 0x4d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x32, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x45, 0x32, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x32, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x74, 0x0a, 0x1c, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x32, 0x4d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x32,
	0x4d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xa1, 0x02, 0x0a, 0x14,
	0x45, 0x32, 0x4d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x32, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x45, 0x32, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12,
	0x52, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x32, 0x4d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x89, 0x01, 0x0a, 0x1d, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x32, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x68, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x32, 0x4d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x1c,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x0b,
	0x73, 0x70, 0x61, 0x6e, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x4d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x32, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x55,
	0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x58,
	0x0a, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44,
	0x61, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x64, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x6d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x6d,
	0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x0c, 0x70, 0x65,
	0x72, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x50, 0x65, 0x72,
	0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x44, 0x61, 0x79, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x6d, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbf, 0x03, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x70, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x11,
	0x70, 0x65, 0x72, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x66, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x70, 0x0a, 0x0a, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x32, 0x9f, 0x0c, 0x0a, 0x14,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xb3, 0x01, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x32, 0x4d, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x32, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x32, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x37, 0xca, 0xb8, 0x02, 0x10, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x6e, 0x65, 0x77, 0x20, 0x45, 0x32, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x03, 0x65,
	0x32, 0x6d, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x07, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x32, 0x4d, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x32, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x32, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x30, 0xca, 0xb8, 0x02, 0x0e, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c,
	0x6c, 0x20, 0x45, 0x32, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x45,
	0x32, 0x4d, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x45, 0x32, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x45, 0x32, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x34, 0xca, 0xb8, 0x02, 0x0d, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x20, 0x45, 0x32, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x03, 0x65, 0x32,
	0x6d, 0x1a, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x45, 0x32, 0x4d, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x32,
	0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x32, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0xca,
	0xb8, 0x02, 0x09, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x20, 0x45, 0x32, 0x4d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0xaf, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x32, 0x4d, 0x12, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x32, 0x4d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x32, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0xca, 0xb8,
	0x02, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x45, 0x32, 0x4d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0xf4, 0x01, 0x0a, 0x15, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x32, 0x4d, 0x12, 0x41, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x45, 0x32, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x32, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x54, 0xca, 0xb8, 0x02, 0x1a, 0x0a, 0x18, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63,
	0x20, 0x42, 0x61, 0x74, 0x63, 0x68, 0x20, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x20, 0x45,
	0x32, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2f, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0xee, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0xca, 0xb8, 0x02, 0x19, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x43, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0xb1, 0x01, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0xca, 0xb8, 0x02, 0x0c, 0x0a, 0x0a, 0x67, 0x65,
	0x74, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescOnce sync.Once
	file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescData = file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDesc
)

func file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescData)
	})
	return file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDescData
}

var file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_goTypes = []any{
	(*CreateE2MRequest)(nil),                 // 0: com.coralogixapis.events2metrics.v2.CreateE2MRequest
	(*CreateE2MResponse)(nil),                // 1: com.coralogixapis.events2metrics.v2.CreateE2MResponse
	(*ListE2MRequest)(nil),                   // 2: com.coralogixapis.events2metrics.v2.ListE2MRequest
	(*ListE2MResponse)(nil),                  // 3: com.coralogixapis.events2metrics.v2.ListE2MResponse
	(*ReplaceE2MRequest)(nil),                // 4: com.coralogixapis.events2metrics.v2.ReplaceE2MRequest
	(*ReplaceE2MResponse)(nil),               // 5: com.coralogixapis.events2metrics.v2.ReplaceE2MResponse
	(*GetE2MRequest)(nil),                    // 6: com.coralogixapis.events2metrics.v2.GetE2MRequest
	(*GetE2MResponse)(nil),                   // 7: com.coralogixapis.events2metrics.v2.GetE2MResponse
	(*DeleteE2MRequest)(nil),                 // 8: com.coralogixapis.events2metrics.v2.DeleteE2MRequest
	(*DeleteE2MResponse)(nil),                // 9: com.coralogixapis.events2metrics.v2.DeleteE2MResponse
	(*E2MExecutionRequest)(nil),              // 10: com.coralogixapis.events2metrics.v2.E2MExecutionRequest
	(*AtomicBatchExecuteE2MRequest)(nil),     // 11: com.coralogixapis.events2metrics.v2.AtomicBatchExecuteE2MRequest
	(*E2MExecutionResponse)(nil),             // 12: com.coralogixapis.events2metrics.v2.E2MExecutionResponse
	(*AtomicBatchExecuteE2MResponse)(nil),    // 13: com.coralogixapis.events2metrics.v2.AtomicBatchExecuteE2MResponse
	(*ListLabelsCardinalityRequest)(nil),     // 14: com.coralogixapis.events2metrics.v2.ListLabelsCardinalityRequest
	(*LabelsPermutationsCardinalityDay)(nil), // 15: com.coralogixapis.events2metrics.v2.LabelsPermutationsCardinalityDay
	(*ListLabelsCardinalityResponse)(nil),    // 16: com.coralogixapis.events2metrics.v2.ListLabelsCardinalityResponse
	(*GetLimitsRequest)(nil),                 // 17: com.coralogixapis.events2metrics.v2.GetLimitsRequest
	(*GetLimitsResponse)(nil),                // 18: com.coralogixapis.events2metrics.v2.GetLimitsResponse
	(*GetLimitsResponse_LimitUsage)(nil),     // 19: com.coralogixapis.events2metrics.v2.GetLimitsResponse.LimitUsage
	(*E2MCreateParams)(nil),                  // 20: com.coralogixapis.events2metrics.v2.E2MCreateParams
	(*E2M)(nil),                              // 21: com.coralogixapis.events2metrics.v2.E2M
	(*wrapperspb.StringValue)(nil),           // 22: google.protobuf.StringValue
	(*v2.SpansQuery)(nil),                    // 23: com.coralogixapis.spans2metrics.v2.SpansQuery
	(*v21.LogsQuery)(nil),                    // 24: com.coralogixapis.logs2metrics.v2.LogsQuery
	(*MetricLabel)(nil),                      // 25: com.coralogixapis.events2metrics.v2.MetricLabel
	(*wrapperspb.Int32Value)(nil),            // 26: google.protobuf.Int32Value
}
var file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_depIdxs = []int32{
	20, // 0: com.coralogixapis.events2metrics.v2.CreateE2MRequest.e2m:type_name -> com.coralogixapis.events2metrics.v2.E2MCreateParams
	21, // 1: com.coralogixapis.events2metrics.v2.CreateE2MResponse.e2m:type_name -> com.coralogixapis.events2metrics.v2.E2M
	21, // 2: com.coralogixapis.events2metrics.v2.ListE2MResponse.e2m:type_name -> com.coralogixapis.events2metrics.v2.E2M
	21, // 3: com.coralogixapis.events2metrics.v2.ReplaceE2MRequest.e2m:type_name -> com.coralogixapis.events2metrics.v2.E2M
	21, // 4: com.coralogixapis.events2metrics.v2.ReplaceE2MResponse.e2m:type_name -> com.coralogixapis.events2metrics.v2.E2M
	22, // 5: com.coralogixapis.events2metrics.v2.GetE2MRequest.id:type_name -> google.protobuf.StringValue
	21, // 6: com.coralogixapis.events2metrics.v2.GetE2MResponse.e2m:type_name -> com.coralogixapis.events2metrics.v2.E2M
	22, // 7: com.coralogixapis.events2metrics.v2.DeleteE2MRequest.id:type_name -> google.protobuf.StringValue
	22, // 8: com.coralogixapis.events2metrics.v2.DeleteE2MResponse.id:type_name -> google.protobuf.StringValue
	0,  // 9: com.coralogixapis.events2metrics.v2.E2MExecutionRequest.create:type_name -> com.coralogixapis.events2metrics.v2.CreateE2MRequest
	4,  // 10: com.coralogixapis.events2metrics.v2.E2MExecutionRequest.replace:type_name -> com.coralogixapis.events2metrics.v2.ReplaceE2MRequest
	8,  // 11: com.coralogixapis.events2metrics.v2.E2MExecutionRequest.delete:type_name -> com.coralogixapis.events2metrics.v2.DeleteE2MRequest
	10, // 12: com.coralogixapis.events2metrics.v2.AtomicBatchExecuteE2MRequest.requests:type_name -> com.coralogixapis.events2metrics.v2.E2MExecutionRequest
	1,  // 13: com.coralogixapis.events2metrics.v2.E2MExecutionResponse.created:type_name -> com.coralogixapis.events2metrics.v2.CreateE2MResponse
	5,  // 14: com.coralogixapis.events2metrics.v2.E2MExecutionResponse.replaced:type_name -> com.coralogixapis.events2metrics.v2.ReplaceE2MResponse
	9,  // 15: com.coralogixapis.events2metrics.v2.E2MExecutionResponse.deleted:type_name -> com.coralogixapis.events2metrics.v2.DeleteE2MResponse
	12, // 16: com.coralogixapis.events2metrics.v2.AtomicBatchExecuteE2MResponse.matching_responses:type_name -> com.coralogixapis.events2metrics.v2.E2MExecutionResponse
	23, // 17: com.coralogixapis.events2metrics.v2.ListLabelsCardinalityRequest.spans_query:type_name -> com.coralogixapis.spans2metrics.v2.SpansQuery
	24, // 18: com.coralogixapis.events2metrics.v2.ListLabelsCardinalityRequest.logs_query:type_name -> com.coralogixapis.logs2metrics.v2.LogsQuery
	25, // 19: com.coralogixapis.events2metrics.v2.ListLabelsCardinalityRequest.metric_labels:type_name -> com.coralogixapis.events2metrics.v2.MetricLabel
	15, // 20: com.coralogixapis.events2metrics.v2.ListLabelsCardinalityResponse.permutations:type_name -> com.coralogixapis.events2metrics.v2.LabelsPermutationsCardinalityDay
	22, // 21: com.coralogixapis.events2metrics.v2.GetLimitsResponse.company_id:type_name -> google.protobuf.StringValue
	19, // 22: com.coralogixapis.events2metrics.v2.GetLimitsResponse.permutations_limit:type_name -> com.coralogixapis.events2metrics.v2.GetLimitsResponse.LimitUsage
	19, // 23: com.coralogixapis.events2metrics.v2.GetLimitsResponse.metrics_limit:type_name -> com.coralogixapis.events2metrics.v2.GetLimitsResponse.LimitUsage
	26, // 24: com.coralogixapis.events2metrics.v2.GetLimitsResponse.LimitUsage.limit:type_name -> google.protobuf.Int32Value
	26, // 25: com.coralogixapis.events2metrics.v2.GetLimitsResponse.LimitUsage.used:type_name -> google.protobuf.Int32Value
	0,  // 26: com.coralogixapis.events2metrics.v2.Events2MetricService.CreateE2M:input_type -> com.coralogixapis.events2metrics.v2.CreateE2MRequest
	2,  // 27: com.coralogixapis.events2metrics.v2.Events2MetricService.ListE2M:input_type -> com.coralogixapis.events2metrics.v2.ListE2MRequest
	4,  // 28: com.coralogixapis.events2metrics.v2.Events2MetricService.ReplaceE2M:input_type -> com.coralogixapis.events2metrics.v2.ReplaceE2MRequest
	6,  // 29: com.coralogixapis.events2metrics.v2.Events2MetricService.GetE2M:input_type -> com.coralogixapis.events2metrics.v2.GetE2MRequest
	8,  // 30: com.coralogixapis.events2metrics.v2.Events2MetricService.DeleteE2M:input_type -> com.coralogixapis.events2metrics.v2.DeleteE2MRequest
	11, // 31: com.coralogixapis.events2metrics.v2.Events2MetricService.AtomicBatchExecuteE2M:input_type -> com.coralogixapis.events2metrics.v2.AtomicBatchExecuteE2MRequest
	14, // 32: com.coralogixapis.events2metrics.v2.Events2MetricService.ListLabelsCardinality:input_type -> com.coralogixapis.events2metrics.v2.ListLabelsCardinalityRequest
	17, // 33: com.coralogixapis.events2metrics.v2.Events2MetricService.GetLimits:input_type -> com.coralogixapis.events2metrics.v2.GetLimitsRequest
	1,  // 34: com.coralogixapis.events2metrics.v2.Events2MetricService.CreateE2M:output_type -> com.coralogixapis.events2metrics.v2.CreateE2MResponse
	3,  // 35: com.coralogixapis.events2metrics.v2.Events2MetricService.ListE2M:output_type -> com.coralogixapis.events2metrics.v2.ListE2MResponse
	5,  // 36: com.coralogixapis.events2metrics.v2.Events2MetricService.ReplaceE2M:output_type -> com.coralogixapis.events2metrics.v2.ReplaceE2MResponse
	7,  // 37: com.coralogixapis.events2metrics.v2.Events2MetricService.GetE2M:output_type -> com.coralogixapis.events2metrics.v2.GetE2MResponse
	9,  // 38: com.coralogixapis.events2metrics.v2.Events2MetricService.DeleteE2M:output_type -> com.coralogixapis.events2metrics.v2.DeleteE2MResponse
	13, // 39: com.coralogixapis.events2metrics.v2.Events2MetricService.AtomicBatchExecuteE2M:output_type -> com.coralogixapis.events2metrics.v2.AtomicBatchExecuteE2MResponse
	16, // 40: com.coralogixapis.events2metrics.v2.Events2MetricService.ListLabelsCardinality:output_type -> com.coralogixapis.events2metrics.v2.ListLabelsCardinalityResponse
	18, // 41: com.coralogixapis.events2metrics.v2.Events2MetricService.GetLimits:output_type -> com.coralogixapis.events2metrics.v2.GetLimitsResponse
	34, // [34:42] is the sub-list for method output_type
	26, // [26:34] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_init() }
func file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_init() {
	if File_com_coralogixapis_events2metrics_v2_events2metrics_service_proto != nil {
		return
	}
	file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_init()
	file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[10].OneofWrappers = []any{
		(*E2MExecutionRequest_Create)(nil),
		(*E2MExecutionRequest_Replace)(nil),
		(*E2MExecutionRequest_Delete)(nil),
	}
	file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[12].OneofWrappers = []any{
		(*E2MExecutionResponse_Created)(nil),
		(*E2MExecutionResponse_Replaced)(nil),
		(*E2MExecutionResponse_Deleted)(nil),
	}
	file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes[14].OneofWrappers = []any{
		(*ListLabelsCardinalityRequest_SpansQuery)(nil),
		(*ListLabelsCardinalityRequest_LogsQuery)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_events2metrics_v2_events2metrics_service_proto = out.File
	file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_rawDesc = nil
	file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_goTypes = nil
	file_com_coralogixapis_events2metrics_v2_events2metrics_service_proto_depIdxs = nil
}
