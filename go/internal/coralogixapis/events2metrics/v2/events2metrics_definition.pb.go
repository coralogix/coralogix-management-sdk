// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: com/coralogixapis/events2metrics/v2/events2metrics_definition.proto

package v2

import (
	v21 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/logs2metrics/v2"
	v2 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/spans2metrics/v2"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum defining e2m type
type E2MType int32

const (
	E2MType_E2M_TYPE_UNSPECIFIED   E2MType = 0
	E2MType_E2M_TYPE_LOGS2METRICS  E2MType = 1
	E2MType_E2M_TYPE_SPANS2METRICS E2MType = 2
)

// Enum value maps for E2MType.
var (
	E2MType_name = map[int32]string{
		0: "E2M_TYPE_UNSPECIFIED",
		1: "E2M_TYPE_LOGS2METRICS",
		2: "E2M_TYPE_SPANS2METRICS",
	}
	E2MType_value = map[string]int32{
		"E2M_TYPE_UNSPECIFIED":   0,
		"E2M_TYPE_LOGS2METRICS":  1,
		"E2M_TYPE_SPANS2METRICS": 2,
	}
)

func (x E2MType) Enum() *E2MType {
	p := new(E2MType)
	*p = x
	return p
}

func (x E2MType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E2MType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_enumTypes[0].Descriptor()
}

func (E2MType) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_enumTypes[0]
}

func (x E2MType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E2MType.Descriptor instead.
func (E2MType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{0}
}

// Enum - Aggregation type
type Aggregation_AggType int32

const (
	Aggregation_AGG_TYPE_UNSPECIFIED Aggregation_AggType = 0
	Aggregation_AGG_TYPE_MIN         Aggregation_AggType = 1
	Aggregation_AGG_TYPE_MAX         Aggregation_AggType = 2
	Aggregation_AGG_TYPE_COUNT       Aggregation_AggType = 3
	Aggregation_AGG_TYPE_AVG         Aggregation_AggType = 4
	Aggregation_AGG_TYPE_SUM         Aggregation_AggType = 5
	Aggregation_AGG_TYPE_HISTOGRAM   Aggregation_AggType = 6
	Aggregation_AGG_TYPE_SAMPLES     Aggregation_AggType = 7
)

// Enum value maps for Aggregation_AggType.
var (
	Aggregation_AggType_name = map[int32]string{
		0: "AGG_TYPE_UNSPECIFIED",
		1: "AGG_TYPE_MIN",
		2: "AGG_TYPE_MAX",
		3: "AGG_TYPE_COUNT",
		4: "AGG_TYPE_AVG",
		5: "AGG_TYPE_SUM",
		6: "AGG_TYPE_HISTOGRAM",
		7: "AGG_TYPE_SAMPLES",
	}
	Aggregation_AggType_value = map[string]int32{
		"AGG_TYPE_UNSPECIFIED": 0,
		"AGG_TYPE_MIN":         1,
		"AGG_TYPE_MAX":         2,
		"AGG_TYPE_COUNT":       3,
		"AGG_TYPE_AVG":         4,
		"AGG_TYPE_SUM":         5,
		"AGG_TYPE_HISTOGRAM":   6,
		"AGG_TYPE_SAMPLES":     7,
	}
)

func (x Aggregation_AggType) Enum() *Aggregation_AggType {
	p := new(Aggregation_AggType)
	*p = x
	return p
}

func (x Aggregation_AggType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Aggregation_AggType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_enumTypes[1].Descriptor()
}

func (Aggregation_AggType) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_enumTypes[1]
}

func (x Aggregation_AggType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Aggregation_AggType.Descriptor instead.
func (Aggregation_AggType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{5, 0}
}

// Enum of aggregate type
type E2MAggSamples_SampleType int32

const (
	E2MAggSamples_SAMPLE_TYPE_UNSPECIFIED E2MAggSamples_SampleType = 0
	E2MAggSamples_SAMPLE_TYPE_MIN         E2MAggSamples_SampleType = 1
	E2MAggSamples_SAMPLE_TYPE_MAX         E2MAggSamples_SampleType = 2
)

// Enum value maps for E2MAggSamples_SampleType.
var (
	E2MAggSamples_SampleType_name = map[int32]string{
		0: "SAMPLE_TYPE_UNSPECIFIED",
		1: "SAMPLE_TYPE_MIN",
		2: "SAMPLE_TYPE_MAX",
	}
	E2MAggSamples_SampleType_value = map[string]int32{
		"SAMPLE_TYPE_UNSPECIFIED": 0,
		"SAMPLE_TYPE_MIN":         1,
		"SAMPLE_TYPE_MAX":         2,
	}
)

func (x E2MAggSamples_SampleType) Enum() *E2MAggSamples_SampleType {
	p := new(E2MAggSamples_SampleType)
	*p = x
	return p
}

func (x E2MAggSamples_SampleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E2MAggSamples_SampleType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_enumTypes[2].Descriptor()
}

func (E2MAggSamples_SampleType) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_enumTypes[2]
}

func (x E2MAggSamples_SampleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E2MAggSamples_SampleType.Descriptor instead.
func (E2MAggSamples_SampleType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{6, 0}
}

// E2M represents the Event to metrics base model.
type E2M struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	//E2M unique ID, required on update requests
	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the E2M
	Name *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the E2M
	Description *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// E2M create time
	CreateTime *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// E2M update time
	UpdateTime *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Represents the limit of the permutations and if the limit was exceeded
	Permutations *E2MPermutations `protobuf:"bytes,6,opt,name=permutations,proto3" json:"permutations,omitempty"`
	// E2M metric labels
	MetricLabels []*MetricLabel `protobuf:"bytes,7,rep,name=metric_labels,json=metricLabels,proto3" json:"metric_labels,omitempty"`
	// E2M metric fields
	MetricFields []*MetricField `protobuf:"bytes,8,rep,name=metric_fields,json=metricFields,proto3" json:"metric_fields,omitempty"`
	// E2M type logs2metrics/spans2metrics
	Type E2MType `protobuf:"varint,9,opt,name=type,proto3,enum=com.coralogixapis.events2metrics.v2.E2MType" json:"type,omitempty"`
	// Spans or logs type query
	//
	// Types that are valid to be assigned to Query:
	//
	//	*E2M_SpansQuery
	//	*E2M_LogsQuery
	Query isE2M_Query `protobuf_oneof:"query"`
	// A flag that represents if the e2m is for internal usage
	IsInternal    *wrapperspb.BoolValue `protobuf:"bytes,12,opt,name=is_internal,json=isInternal,proto3" json:"is_internal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *E2M) Reset() {
	*x = E2M{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *E2M) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2M) ProtoMessage() {}

func (x *E2M) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2M.ProtoReflect.Descriptor instead.
func (*E2M) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{0}
}

func (x *E2M) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *E2M) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *E2M) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *E2M) GetCreateTime() *wrapperspb.StringValue {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *E2M) GetUpdateTime() *wrapperspb.StringValue {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *E2M) GetPermutations() *E2MPermutations {
	if x != nil {
		return x.Permutations
	}
	return nil
}

func (x *E2M) GetMetricLabels() []*MetricLabel {
	if x != nil {
		return x.MetricLabels
	}
	return nil
}

func (x *E2M) GetMetricFields() []*MetricField {
	if x != nil {
		return x.MetricFields
	}
	return nil
}

func (x *E2M) GetType() E2MType {
	if x != nil {
		return x.Type
	}
	return E2MType_E2M_TYPE_UNSPECIFIED
}

func (x *E2M) GetQuery() isE2M_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *E2M) GetSpansQuery() *v2.SpansQuery {
	if x != nil {
		if x, ok := x.Query.(*E2M_SpansQuery); ok {
			return x.SpansQuery
		}
	}
	return nil
}

func (x *E2M) GetLogsQuery() *v21.LogsQuery {
	if x != nil {
		if x, ok := x.Query.(*E2M_LogsQuery); ok {
			return x.LogsQuery
		}
	}
	return nil
}

func (x *E2M) GetIsInternal() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsInternal
	}
	return nil
}

type isE2M_Query interface {
	isE2M_Query()
}

type E2M_SpansQuery struct {
	// E2M spans query
	SpansQuery *v2.SpansQuery `protobuf:"bytes,10,opt,name=spans_query,json=spansQuery,proto3,oneof"`
}

type E2M_LogsQuery struct {
	//  E2M logs query
	LogsQuery *v21.LogsQuery `protobuf:"bytes,11,opt,name=logs_query,json=logsQuery,proto3,oneof"`
}

func (*E2M_SpansQuery) isE2M_Query() {}

func (*E2M_LogsQuery) isE2M_Query() {}

// E2M Create message
type E2MCreateParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of E2M to create
	Name *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of E2M to create
	Description *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The permutation limit of the E2M
	PermutationsLimit *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=permutations_limit,json=permutationsLimit,proto3" json:"permutations_limit,omitempty"`
	// E2M metric labels
	MetricLabels []*MetricLabel `protobuf:"bytes,4,rep,name=metric_labels,json=metricLabels,proto3" json:"metric_labels,omitempty"`
	// E2M metric fields
	MetricFields []*MetricField `protobuf:"bytes,5,rep,name=metric_fields,json=metricFields,proto3" json:"metric_fields,omitempty"`
	// E2M type
	Type E2MType `protobuf:"varint,6,opt,name=type,proto3,enum=com.coralogixapis.events2metrics.v2.E2MType" json:"type,omitempty"`
	// E2M spans or logs query type
	//
	// Types that are valid to be assigned to Query:
	//
	//	*E2MCreateParams_SpansQuery
	//	*E2MCreateParams_LogsQuery
	Query         isE2MCreateParams_Query `protobuf_oneof:"query"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *E2MCreateParams) Reset() {
	*x = E2MCreateParams{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *E2MCreateParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2MCreateParams) ProtoMessage() {}

func (x *E2MCreateParams) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2MCreateParams.ProtoReflect.Descriptor instead.
func (*E2MCreateParams) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{1}
}

func (x *E2MCreateParams) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *E2MCreateParams) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *E2MCreateParams) GetPermutationsLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.PermutationsLimit
	}
	return nil
}

func (x *E2MCreateParams) GetMetricLabels() []*MetricLabel {
	if x != nil {
		return x.MetricLabels
	}
	return nil
}

func (x *E2MCreateParams) GetMetricFields() []*MetricField {
	if x != nil {
		return x.MetricFields
	}
	return nil
}

func (x *E2MCreateParams) GetType() E2MType {
	if x != nil {
		return x.Type
	}
	return E2MType_E2M_TYPE_UNSPECIFIED
}

func (x *E2MCreateParams) GetQuery() isE2MCreateParams_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *E2MCreateParams) GetSpansQuery() *v2.SpansQuery {
	if x != nil {
		if x, ok := x.Query.(*E2MCreateParams_SpansQuery); ok {
			return x.SpansQuery
		}
	}
	return nil
}

func (x *E2MCreateParams) GetLogsQuery() *v21.LogsQuery {
	if x != nil {
		if x, ok := x.Query.(*E2MCreateParams_LogsQuery); ok {
			return x.LogsQuery
		}
	}
	return nil
}

type isE2MCreateParams_Query interface {
	isE2MCreateParams_Query()
}

type E2MCreateParams_SpansQuery struct {
	// E2M span query
	SpansQuery *v2.SpansQuery `protobuf:"bytes,7,opt,name=spans_query,json=spansQuery,proto3,oneof"`
}

type E2MCreateParams_LogsQuery struct {
	// E2M logs query
	LogsQuery *v21.LogsQuery `protobuf:"bytes,8,opt,name=logs_query,json=logsQuery,proto3,oneof"`
}

func (*E2MCreateParams_SpansQuery) isE2MCreateParams_Query() {}

func (*E2MCreateParams_LogsQuery) isE2MCreateParams_Query() {}

// Represents e2m permutation limit
type E2MPermutations struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// E2M permutation limit
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Flag to indicate if limit was exceeded
	HasExceededLimit bool `protobuf:"varint,2,opt,name=has_exceeded_limit,json=hasExceededLimit,proto3" json:"has_exceeded_limit,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *E2MPermutations) Reset() {
	*x = E2MPermutations{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *E2MPermutations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2MPermutations) ProtoMessage() {}

func (x *E2MPermutations) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2MPermutations.ProtoReflect.Descriptor instead.
func (*E2MPermutations) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{2}
}

func (x *E2MPermutations) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *E2MPermutations) GetHasExceededLimit() bool {
	if x != nil {
		return x.HasExceededLimit
	}
	return false
}

// E2M metric label
type MetricLabel struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metric label target alias name
	TargetLabel *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=target_label,json=targetLabel,proto3" json:"target_label,omitempty"`
	// Metric label source field
	SourceField   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=source_field,json=sourceField,proto3" json:"source_field,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricLabel) Reset() {
	*x = MetricLabel{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricLabel) ProtoMessage() {}

func (x *MetricLabel) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricLabel.ProtoReflect.Descriptor instead.
func (*MetricLabel) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{3}
}

func (x *MetricLabel) GetTargetLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.TargetLabel
	}
	return nil
}

func (x *MetricLabel) GetSourceField() *wrapperspb.StringValue {
	if x != nil {
		return x.SourceField
	}
	return nil
}

//E2M metric field
type MetricField struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Target metric field alias name
	TargetBaseMetricName *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=target_base_metric_name,json=targetBaseMetricName,proto3" json:"target_base_metric_name,omitempty"`
	// Source field
	SourceField *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=source_field,json=sourceField,proto3" json:"source_field,omitempty"`
	// Represents Aggregation type list
	Aggregations  []*Aggregation `protobuf:"bytes,7,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricField) Reset() {
	*x = MetricField{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricField) ProtoMessage() {}

func (x *MetricField) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricField.ProtoReflect.Descriptor instead.
func (*MetricField) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{4}
}

func (x *MetricField) GetTargetBaseMetricName() *wrapperspb.StringValue {
	if x != nil {
		return x.TargetBaseMetricName
	}
	return nil
}

func (x *MetricField) GetSourceField() *wrapperspb.StringValue {
	if x != nil {
		return x.SourceField
	}
	return nil
}

func (x *MetricField) GetAggregations() []*Aggregation {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

// E2M aggregation
type Aggregation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Is enabled
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Aggregation type
	AggType Aggregation_AggType `protobuf:"varint,2,opt,name=agg_type,json=aggType,proto3,enum=com.coralogixapis.events2metrics.v2.Aggregation_AggType" json:"agg_type,omitempty"`
	// Target metric field alias name
	TargetMetricName string `protobuf:"bytes,3,opt,name=target_metric_name,json=targetMetricName,proto3" json:"target_metric_name,omitempty"`
	// Aggregate metadata, samples or histogram type
	//
	// Types that are valid to be assigned to AggMetadata:
	//
	//	*Aggregation_Samples
	//	*Aggregation_Histogram
	AggMetadata   isAggregation_AggMetadata `protobuf_oneof:"agg_metadata"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Aggregation) Reset() {
	*x = Aggregation{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Aggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggregation) ProtoMessage() {}

func (x *Aggregation) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggregation.ProtoReflect.Descriptor instead.
func (*Aggregation) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{5}
}

func (x *Aggregation) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Aggregation) GetAggType() Aggregation_AggType {
	if x != nil {
		return x.AggType
	}
	return Aggregation_AGG_TYPE_UNSPECIFIED
}

func (x *Aggregation) GetTargetMetricName() string {
	if x != nil {
		return x.TargetMetricName
	}
	return ""
}

func (x *Aggregation) GetAggMetadata() isAggregation_AggMetadata {
	if x != nil {
		return x.AggMetadata
	}
	return nil
}

func (x *Aggregation) GetSamples() *E2MAggSamples {
	if x != nil {
		if x, ok := x.AggMetadata.(*Aggregation_Samples); ok {
			return x.Samples
		}
	}
	return nil
}

func (x *Aggregation) GetHistogram() *E2MAggHistogram {
	if x != nil {
		if x, ok := x.AggMetadata.(*Aggregation_Histogram); ok {
			return x.Histogram
		}
	}
	return nil
}

type isAggregation_AggMetadata interface {
	isAggregation_AggMetadata()
}

type Aggregation_Samples struct {
	// E2M sample type metadata
	Samples *E2MAggSamples `protobuf:"bytes,4,opt,name=samples,proto3,oneof"`
}

type Aggregation_Histogram struct {
	// E2M aggregate histogram type metadata
	Histogram *E2MAggHistogram `protobuf:"bytes,5,opt,name=histogram,proto3,oneof"`
}

func (*Aggregation_Samples) isAggregation_AggMetadata() {}

func (*Aggregation_Histogram) isAggregation_AggMetadata() {}

// E2M aggregate sample type
type E2MAggSamples struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Sample type min/max
	SampleType    E2MAggSamples_SampleType `protobuf:"varint,2,opt,name=sample_type,json=sampleType,proto3,enum=com.coralogixapis.events2metrics.v2.E2MAggSamples_SampleType" json:"sample_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *E2MAggSamples) Reset() {
	*x = E2MAggSamples{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *E2MAggSamples) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2MAggSamples) ProtoMessage() {}

func (x *E2MAggSamples) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2MAggSamples.ProtoReflect.Descriptor instead.
func (*E2MAggSamples) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{6}
}

func (x *E2MAggSamples) GetSampleType() E2MAggSamples_SampleType {
	if x != nil {
		return x.SampleType
	}
	return E2MAggSamples_SAMPLE_TYPE_UNSPECIFIED
}

// Represents the e2m aggregate histogram
type E2MAggHistogram struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Buckets of the E2M
	Buckets       []float32 `protobuf:"fixed32,1,rep,packed,name=buckets,proto3" json:"buckets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *E2MAggHistogram) Reset() {
	*x = E2MAggHistogram{}
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *E2MAggHistogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2MAggHistogram) ProtoMessage() {}

func (x *E2MAggHistogram) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2MAggHistogram.ProtoReflect.Descriptor instead.
func (*E2MAggHistogram) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{7}
}

func (x *E2MAggHistogram) GetBuckets() []float32 {
	if x != nil {
		return x.Buckets
	}
	return nil
}

var File_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto protoreflect.FileDescriptor

const file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDesc = "" +
	"\n" +
	"Ccom/coralogixapis/events2metrics/v2/events2metrics_definition.proto\x12#com.coralogixapis.events2metrics.v2\x1a2com/coralogixapis/logs2metrics/v2/logs_query.proto\x1a4com/coralogixapis/spans2metrics/v2/spans_query.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\"\xbb\n" +
	"\n" +
	"\x03E2M\x12\xa6\x01\n" +
	"\x02id\x18\x01 \x01(\v2\x1c.google.protobuf.StringValueBx\x92AuJ&\"d6a3658e-78d2-47d0-9b81-b2c551f01b09\"x$\x80\x01$\x8a\x01>^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\xa2\x02\x04uuidR\x02id\x12P\n" +
	"\x04name\x18\x02 \x01(\v2\x1c.google.protobuf.StringValueB\x1e\x92A\x1bJ\x19\"Service_catalog_latency\"R\x04name\x12q\n" +
	"\vdescription\x18\x03 \x01(\v2\x1c.google.protobuf.StringValueB1\x92A.J,\"avg and max the latency of catalog service\"R\vdescription\x12[\n" +
	"\vcreate_time\x18\x04 \x01(\v2\x1c.google.protobuf.StringValueB\x1c\x92A\x19J\x17\"2022-06-30T12:30:00Z'\"R\n" +
	"createTime\x12[\n" +
	"\vupdate_time\x18\x05 \x01(\v2\x1c.google.protobuf.StringValueB\x1c\x92A\x19J\x17\"2022-06-30T12:30:00Z'\"R\n" +
	"updateTime\x12X\n" +
	"\fpermutations\x18\x06 \x01(\v24.com.coralogixapis.events2metrics.v2.E2MPermutationsR\fpermutations\x12U\n" +
	"\rmetric_labels\x18\a \x03(\v20.com.coralogixapis.events2metrics.v2.MetricLabelR\fmetricLabels\x12]\n" +
	"\rmetric_fields\x18\b \x03(\v20.com.coralogixapis.events2metrics.v2.MetricFieldB\x06\x92A\x03\xa0\x01\n" +
	"R\fmetricFields\x12@\n" +
	"\x04type\x18\t \x01(\x0e2,.com.coralogixapis.events2metrics.v2.E2MTypeR\x04type\x12Q\n" +
	"\vspans_query\x18\n" +
	" \x01(\v2..com.coralogixapis.spans2metrics.v2.SpansQueryH\x00R\n" +
	"spansQuery\x12M\n" +
	"\n" +
	"logs_query\x18\v \x01(\v2,.com.coralogixapis.logs2metrics.v2.LogsQueryH\x00R\tlogsQuery\x12;\n" +
	"\vis_internal\x18\f \x01(\v2\x1a.google.protobuf.BoolValueR\n" +
	"isInternal:\xd1\x01\x92A\xcd\x01\n" +
	"U*\x03E2M2@This data structure represents an Event to Metrics (E2M) object.\xd2\x01\x04name\xd2\x01\x04type*t\n" +
	"\"Find out more about events2metrics\x12Nhttps://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/B\a\n" +
	"\x05query\"\xaa\a\n" +
	"\x0fE2MCreateParams\x12P\n" +
	"\x04name\x18\x01 \x01(\v2\x1c.google.protobuf.StringValueB\x1e\x92A\x1bJ\x19\"Service catalog latency\"R\x04name\x12q\n" +
	"\vdescription\x18\x02 \x01(\v2\x1c.google.protobuf.StringValueB1\x92A.J,\"avg and max the latency of catalog service\"R\vdescription\x12V\n" +
	"\x12permutations_limit\x18\x03 \x01(\v2\x1b.google.protobuf.Int32ValueB\n" +
	"\x92A\aJ\x0530000R\x11permutationsLimit\x12U\n" +
	"\rmetric_labels\x18\x04 \x03(\v20.com.coralogixapis.events2metrics.v2.MetricLabelR\fmetricLabels\x12U\n" +
	"\rmetric_fields\x18\x05 \x03(\v20.com.coralogixapis.events2metrics.v2.MetricFieldR\fmetricFields\x12@\n" +
	"\x04type\x18\x06 \x01(\x0e2,.com.coralogixapis.events2metrics.v2.E2MTypeR\x04type\x12Q\n" +
	"\vspans_query\x18\a \x01(\v2..com.coralogixapis.spans2metrics.v2.SpansQueryH\x00R\n" +
	"spansQuery\x12M\n" +
	"\n" +
	"logs_query\x18\b \x01(\v2,.com.coralogixapis.logs2metrics.v2.LogsQueryH\x00R\tlogsQuery:\xde\x01\x92A\xda\x01\n" +
	"b*\x11E2M Create Params2FThis data structure is used to create a new event to metric definition\xd2\x01\x04name*t\n" +
	"\"Find out more about events2metrics\x12Nhttps://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/B\a\n" +
	"\x05query\"\xf7\x02\n" +
	"\x0fE2MPermutations\x12 \n" +
	"\x05limit\x18\x01 \x01(\x05B\n" +
	"\x92A\aJ\x0530000R\x05limit\x12,\n" +
	"\x12has_exceeded_limit\x18\x02 \x01(\bR\x10hasExceededLimit:\x93\x02\x92A\x8f\x02\n" +
	"\x96\x01*\x10E2M Permutations2eThis data structure represents the limit of events2metrics permutations and if the limit was exceeded\xd2\x01\x05limit\xd2\x01\x12has_exceeded_limit*t\n" +
	"\"Find out more about events2metrics\x12Nhttps://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/\"\xab\x03\n" +
	"\vMetricLabel\x12d\n" +
	"\ftarget_label\x18\x01 \x01(\v2\x1c.google.protobuf.StringValueB#\x92A J\x12\"alias_label_name\"\x8a\x01\t^[\\w/-]+$R\vtargetLabel\x12\\\n" +
	"\fsource_field\x18\x02 \x01(\v2\x1c.google.protobuf.StringValueB\x1b\x92A\x18J\x16\"log_obj.string_value\"R\vsourceField:\xd7\x01\x92A\xd3\x01\n" +
	"[*\fMetric Label2-This data structure represents a metric label\xd2\x01\ftarget_label\xd2\x01\fsource_field*t\n" +
	"\"Find out more about events2metrics\x12Nhttps://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/\"\xb0\x04\n" +
	"\vMetricField\x12x\n" +
	"\x17target_base_metric_name\x18\x01 \x01(\v2\x1c.google.protobuf.StringValueB#\x92A J\x12\"alias_field_name\"\x8a\x01\t^[\\w/-]+$R\x14targetBaseMetricName\x12]\n" +
	"\fsource_field\x18\x02 \x01(\v2\x1c.google.protobuf.StringValueB\x1c\x92A\x19J\x17\"log_obj.numeric_field\"R\vsourceField\x12T\n" +
	"\faggregations\x18\a \x03(\v20.com.coralogixapis.events2metrics.v2.AggregationR\faggregations:\xf1\x01\x92A\xed\x01\n" +
	"u*\fMetric Field2-This data structure represents a metric field\xd2\x01\x17target_base_metric_name\xd2\x01\fsource_field\xd2\x01\faggregations*t\n" +
	"\"Find out more about events2metrics\x12Nhttps://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/\"\x9d\x06\n" +
	"\vAggregation\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12S\n" +
	"\bagg_type\x18\x02 \x01(\x0e28.com.coralogixapis.events2metrics.v2.Aggregation.AggTypeR\aaggType\x12N\n" +
	"\x12target_metric_name\x18\x03 \x01(\tB \x92A\x1dJ\x1b\"alias_field_name_agg_func\"R\x10targetMetricName\x12N\n" +
	"\asamples\x18\x04 \x01(\v22.com.coralogixapis.events2metrics.v2.E2MAggSamplesH\x00R\asamples\x12\x83\x01\n" +
	"\thistogram\x18\x05 \x01(\v24.com.coralogixapis.events2metrics.v2.E2MAggHistogramB-\x92A*2%e2m aggregate histogram type metadata\xa8\x01\x01H\x00R\thistogram\"\xad\x01\n" +
	"\aAggType\x12\x18\n" +
	"\x14AGG_TYPE_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fAGG_TYPE_MIN\x10\x01\x12\x10\n" +
	"\fAGG_TYPE_MAX\x10\x02\x12\x12\n" +
	"\x0eAGG_TYPE_COUNT\x10\x03\x12\x10\n" +
	"\fAGG_TYPE_AVG\x10\x04\x12\x10\n" +
	"\fAGG_TYPE_SUM\x10\x05\x12\x16\n" +
	"\x12AGG_TYPE_HISTOGRAM\x10\x06\x12\x14\n" +
	"\x10AGG_TYPE_SAMPLES\x10\a:\xb8\x01\x92A\xb4\x01\n" +
	"<*\vAggregation2-This data structure represents an aggregation*t\n" +
	"\"Find out more about events2metrics\x12Nhttps://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/B\x0e\n" +
	"\fagg_metadata\"\x94\x03\n" +
	"\rE2MAggSamples\x12^\n" +
	"\vsample_type\x18\x02 \x01(\x0e2=.com.coralogixapis.events2metrics.v2.E2MAggSamples.SampleTypeR\n" +
	"sampleType\"S\n" +
	"\n" +
	"SampleType\x12\x1b\n" +
	"\x17SAMPLE_TYPE_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fSAMPLE_TYPE_MIN\x10\x01\x12\x13\n" +
	"\x0fSAMPLE_TYPE_MAX\x10\x02:\xcd\x01\x92A\xc9\x01\n" +
	"Q*\x15E2M Aggregate Samples28This data structure represents the e2m aggregate samples*t\n" +
	"\"Find out more about events2metrics\x12Nhttps://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/\"\x87\x02\n" +
	"\x0fE2MAggHistogram\x12 \n" +
	"\abuckets\x18\x01 \x03(\x02B\x06\x92A\x03J\x012R\abuckets:\xd1\x01\x92A\xcd\x01\n" +
	"U*\x17E2M Aggregate Histogram2:This data structure represents the e2m aggregate histogram*t\n" +
	"\"Find out more about events2metrics\x12Nhttps://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/*Z\n" +
	"\aE2MType\x12\x18\n" +
	"\x14E2M_TYPE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15E2M_TYPE_LOGS2METRICS\x10\x01\x12\x1a\n" +
	"\x16E2M_TYPE_SPANS2METRICS\x10\x02b\x06proto3"

var (
	file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescOnce sync.Once
	file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescData []byte
)

func file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDesc), len(file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDesc)))
	})
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescData
}

var file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_goTypes = []any{
	(E2MType)(0),                   // 0: com.coralogixapis.events2metrics.v2.E2MType
	(Aggregation_AggType)(0),       // 1: com.coralogixapis.events2metrics.v2.Aggregation.AggType
	(E2MAggSamples_SampleType)(0),  // 2: com.coralogixapis.events2metrics.v2.E2MAggSamples.SampleType
	(*E2M)(nil),                    // 3: com.coralogixapis.events2metrics.v2.E2M
	(*E2MCreateParams)(nil),        // 4: com.coralogixapis.events2metrics.v2.E2MCreateParams
	(*E2MPermutations)(nil),        // 5: com.coralogixapis.events2metrics.v2.E2MPermutations
	(*MetricLabel)(nil),            // 6: com.coralogixapis.events2metrics.v2.MetricLabel
	(*MetricField)(nil),            // 7: com.coralogixapis.events2metrics.v2.MetricField
	(*Aggregation)(nil),            // 8: com.coralogixapis.events2metrics.v2.Aggregation
	(*E2MAggSamples)(nil),          // 9: com.coralogixapis.events2metrics.v2.E2MAggSamples
	(*E2MAggHistogram)(nil),        // 10: com.coralogixapis.events2metrics.v2.E2MAggHistogram
	(*wrapperspb.StringValue)(nil), // 11: google.protobuf.StringValue
	(*v2.SpansQuery)(nil),          // 12: com.coralogixapis.spans2metrics.v2.SpansQuery
	(*v21.LogsQuery)(nil),          // 13: com.coralogixapis.logs2metrics.v2.LogsQuery
	(*wrapperspb.BoolValue)(nil),   // 14: google.protobuf.BoolValue
	(*wrapperspb.Int32Value)(nil),  // 15: google.protobuf.Int32Value
}
var file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_depIdxs = []int32{
	11, // 0: com.coralogixapis.events2metrics.v2.E2M.id:type_name -> google.protobuf.StringValue
	11, // 1: com.coralogixapis.events2metrics.v2.E2M.name:type_name -> google.protobuf.StringValue
	11, // 2: com.coralogixapis.events2metrics.v2.E2M.description:type_name -> google.protobuf.StringValue
	11, // 3: com.coralogixapis.events2metrics.v2.E2M.create_time:type_name -> google.protobuf.StringValue
	11, // 4: com.coralogixapis.events2metrics.v2.E2M.update_time:type_name -> google.protobuf.StringValue
	5,  // 5: com.coralogixapis.events2metrics.v2.E2M.permutations:type_name -> com.coralogixapis.events2metrics.v2.E2MPermutations
	6,  // 6: com.coralogixapis.events2metrics.v2.E2M.metric_labels:type_name -> com.coralogixapis.events2metrics.v2.MetricLabel
	7,  // 7: com.coralogixapis.events2metrics.v2.E2M.metric_fields:type_name -> com.coralogixapis.events2metrics.v2.MetricField
	0,  // 8: com.coralogixapis.events2metrics.v2.E2M.type:type_name -> com.coralogixapis.events2metrics.v2.E2MType
	12, // 9: com.coralogixapis.events2metrics.v2.E2M.spans_query:type_name -> com.coralogixapis.spans2metrics.v2.SpansQuery
	13, // 10: com.coralogixapis.events2metrics.v2.E2M.logs_query:type_name -> com.coralogixapis.logs2metrics.v2.LogsQuery
	14, // 11: com.coralogixapis.events2metrics.v2.E2M.is_internal:type_name -> google.protobuf.BoolValue
	11, // 12: com.coralogixapis.events2metrics.v2.E2MCreateParams.name:type_name -> google.protobuf.StringValue
	11, // 13: com.coralogixapis.events2metrics.v2.E2MCreateParams.description:type_name -> google.protobuf.StringValue
	15, // 14: com.coralogixapis.events2metrics.v2.E2MCreateParams.permutations_limit:type_name -> google.protobuf.Int32Value
	6,  // 15: com.coralogixapis.events2metrics.v2.E2MCreateParams.metric_labels:type_name -> com.coralogixapis.events2metrics.v2.MetricLabel
	7,  // 16: com.coralogixapis.events2metrics.v2.E2MCreateParams.metric_fields:type_name -> com.coralogixapis.events2metrics.v2.MetricField
	0,  // 17: com.coralogixapis.events2metrics.v2.E2MCreateParams.type:type_name -> com.coralogixapis.events2metrics.v2.E2MType
	12, // 18: com.coralogixapis.events2metrics.v2.E2MCreateParams.spans_query:type_name -> com.coralogixapis.spans2metrics.v2.SpansQuery
	13, // 19: com.coralogixapis.events2metrics.v2.E2MCreateParams.logs_query:type_name -> com.coralogixapis.logs2metrics.v2.LogsQuery
	11, // 20: com.coralogixapis.events2metrics.v2.MetricLabel.target_label:type_name -> google.protobuf.StringValue
	11, // 21: com.coralogixapis.events2metrics.v2.MetricLabel.source_field:type_name -> google.protobuf.StringValue
	11, // 22: com.coralogixapis.events2metrics.v2.MetricField.target_base_metric_name:type_name -> google.protobuf.StringValue
	11, // 23: com.coralogixapis.events2metrics.v2.MetricField.source_field:type_name -> google.protobuf.StringValue
	8,  // 24: com.coralogixapis.events2metrics.v2.MetricField.aggregations:type_name -> com.coralogixapis.events2metrics.v2.Aggregation
	1,  // 25: com.coralogixapis.events2metrics.v2.Aggregation.agg_type:type_name -> com.coralogixapis.events2metrics.v2.Aggregation.AggType
	9,  // 26: com.coralogixapis.events2metrics.v2.Aggregation.samples:type_name -> com.coralogixapis.events2metrics.v2.E2MAggSamples
	10, // 27: com.coralogixapis.events2metrics.v2.Aggregation.histogram:type_name -> com.coralogixapis.events2metrics.v2.E2MAggHistogram
	2,  // 28: com.coralogixapis.events2metrics.v2.E2MAggSamples.sample_type:type_name -> com.coralogixapis.events2metrics.v2.E2MAggSamples.SampleType
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_init() }
func file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_init() {
	if File_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto != nil {
		return
	}
	file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[0].OneofWrappers = []any{
		(*E2M_SpansQuery)(nil),
		(*E2M_LogsQuery)(nil),
	}
	file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[1].OneofWrappers = []any{
		(*E2MCreateParams_SpansQuery)(nil),
		(*E2MCreateParams_LogsQuery)(nil),
	}
	file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[5].OneofWrappers = []any{
		(*Aggregation_Samples)(nil),
		(*Aggregation_Histogram)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDesc), len(file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_depIdxs,
		EnumInfos:         file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_enumTypes,
		MessageInfos:      file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto = out.File
	file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_goTypes = nil
	file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_depIdxs = nil
}
