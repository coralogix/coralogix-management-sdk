// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: com/coralogixapis/alerts/v3/alert_def.proto

package v3

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Represents An Existing or Created Alert Definition
type AlertDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertDefProperties *AlertDefProperties     `protobuf:"bytes,1,opt,name=alert_def_properties,json=alertDefProperties,proto3" json:"alert_def_properties,omitempty"`
	Id                 *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                                                  // This is the Alert Definition's Persistent ID (does not change on replace) , AKA UniqueIdentifier
	AlertVersionId     *wrapperspb.StringValue `protobuf:"bytes,20,opt,name=alert_version_id,json=alertVersionId,proto3" json:"alert_version_id,omitempty"` // the old alertId
	CreatedTime        *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	UpdatedTime        *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
}

func (x *AlertDef) Reset() {
	*x = AlertDef{}
	mi := &file_com_coralogixapis_alerts_v3_alert_def_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlertDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertDef) ProtoMessage() {}

func (x *AlertDef) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_alerts_v3_alert_def_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertDef.ProtoReflect.Descriptor instead.
func (*AlertDef) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_alerts_v3_alert_def_proto_rawDescGZIP(), []int{0}
}

func (x *AlertDef) GetAlertDefProperties() *AlertDefProperties {
	if x != nil {
		return x.AlertDefProperties
	}
	return nil
}

func (x *AlertDef) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AlertDef) GetAlertVersionId() *wrapperspb.StringValue {
	if x != nil {
		return x.AlertVersionId
	}
	return nil
}

func (x *AlertDef) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *AlertDef) GetUpdatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedTime
	}
	return nil
}

// *
// Represents The non generated alert definition properties (the ones that are set by the user)
type AlertDefProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Enabled     *wrapperspb.BoolValue   `protobuf:"bytes,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Priority    AlertDefPriority        `protobuf:"varint,4,opt,name=priority,proto3,enum=com.coralogixapis.alerts.v3.AlertDefPriority" json:"priority,omitempty"`
	// Types that are assignable to Schedule:
	//
	//	*AlertDefProperties_ActiveOn
	Schedule isAlertDefProperties_Schedule `protobuf_oneof:"schedule"`
	Type     AlertDefType                  `protobuf:"varint,6,opt,name=type,proto3,enum=com.coralogixapis.alerts.v3.AlertDefType" json:"type,omitempty"`
	// Types that are assignable to TypeDefinition:
	//
	//	*AlertDefProperties_LogsImmediate
	//	*AlertDefProperties_TracingImmediate
	//	*AlertDefProperties_LogsThreshold
	//	*AlertDefProperties_LogsRatioThreshold
	//	*AlertDefProperties_LogsTimeRelativeThreshold
	//	*AlertDefProperties_MetricThreshold
	//	*AlertDefProperties_TracingThreshold
	//	*AlertDefProperties_Flow
	//	*AlertDefProperties_LogsAnomaly
	//	*AlertDefProperties_MetricAnomaly
	//	*AlertDefProperties_LogsNewValue
	//	*AlertDefProperties_LogsUniqueCount
	TypeDefinition    isAlertDefProperties_TypeDefinition `protobuf_oneof:"type_definition"`
	GroupByKeys       []*wrapperspb.StringValue           `protobuf:"bytes,7,rep,name=group_by_keys,json=groupByKeys,proto3" json:"group_by_keys,omitempty"`
	IncidentsSettings *AlertDefIncidentSettings           `protobuf:"bytes,8,opt,name=incidents_settings,json=incidentsSettings,proto3" json:"incidents_settings,omitempty"`
	NotificationGroup *AlertDefNotificationGroup          `protobuf:"bytes,9,opt,name=notification_group,json=notificationGroup,proto3" json:"notification_group,omitempty"`
	// Deprecated: Marked as deprecated in com/coralogixapis/alerts/v3/alert_def.proto.
	NotificationGroupExcess []*AlertDefNotificationGroup `protobuf:"bytes,210,rep,name=notification_group_excess,json=notificationGroupExcess,proto3" json:"notification_group_excess,omitempty"`
	EntityLabels            map[string]string            `protobuf:"bytes,10,rep,name=entity_labels,json=entityLabels,proto3" json:"entity_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PhantomMode             *wrapperspb.BoolValue        `protobuf:"bytes,11,opt,name=phantom_mode,json=phantomMode,proto3" json:"phantom_mode,omitempty"`
	Deleted                 *wrapperspb.BoolValue        `protobuf:"bytes,12,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *AlertDefProperties) Reset() {
	*x = AlertDefProperties{}
	mi := &file_com_coralogixapis_alerts_v3_alert_def_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlertDefProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertDefProperties) ProtoMessage() {}

func (x *AlertDefProperties) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_alerts_v3_alert_def_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertDefProperties.ProtoReflect.Descriptor instead.
func (*AlertDefProperties) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_alerts_v3_alert_def_proto_rawDescGZIP(), []int{1}
}

func (x *AlertDefProperties) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AlertDefProperties) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *AlertDefProperties) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AlertDefProperties) GetPriority() AlertDefPriority {
	if x != nil {
		return x.Priority
	}
	return AlertDefPriority_ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED
}

func (m *AlertDefProperties) GetSchedule() isAlertDefProperties_Schedule {
	if m != nil {
		return m.Schedule
	}
	return nil
}

func (x *AlertDefProperties) GetActiveOn() *ActivitySchedule {
	if x, ok := x.GetSchedule().(*AlertDefProperties_ActiveOn); ok {
		return x.ActiveOn
	}
	return nil
}

func (x *AlertDefProperties) GetType() AlertDefType {
	if x != nil {
		return x.Type
	}
	return AlertDefType_ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED
}

func (m *AlertDefProperties) GetTypeDefinition() isAlertDefProperties_TypeDefinition {
	if m != nil {
		return m.TypeDefinition
	}
	return nil
}

func (x *AlertDefProperties) GetLogsImmediate() *LogsImmediateType {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_LogsImmediate); ok {
		return x.LogsImmediate
	}
	return nil
}

func (x *AlertDefProperties) GetTracingImmediate() *TracingImmediateType {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_TracingImmediate); ok {
		return x.TracingImmediate
	}
	return nil
}

func (x *AlertDefProperties) GetLogsThreshold() *LogsThresholdType {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_LogsThreshold); ok {
		return x.LogsThreshold
	}
	return nil
}

func (x *AlertDefProperties) GetLogsRatioThreshold() *LogsRatioThresholdType {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_LogsRatioThreshold); ok {
		return x.LogsRatioThreshold
	}
	return nil
}

func (x *AlertDefProperties) GetLogsTimeRelativeThreshold() *LogsTimeRelativeThresholdType {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_LogsTimeRelativeThreshold); ok {
		return x.LogsTimeRelativeThreshold
	}
	return nil
}

func (x *AlertDefProperties) GetMetricThreshold() *MetricThresholdType {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_MetricThreshold); ok {
		return x.MetricThreshold
	}
	return nil
}

func (x *AlertDefProperties) GetTracingThreshold() *TracingThresholdType {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_TracingThreshold); ok {
		return x.TracingThreshold
	}
	return nil
}

func (x *AlertDefProperties) GetFlow() *FlowType {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_Flow); ok {
		return x.Flow
	}
	return nil
}

func (x *AlertDefProperties) GetLogsAnomaly() *LogsAnomalyType {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_LogsAnomaly); ok {
		return x.LogsAnomaly
	}
	return nil
}

func (x *AlertDefProperties) GetMetricAnomaly() *MetricAnomalyType {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_MetricAnomaly); ok {
		return x.MetricAnomaly
	}
	return nil
}

func (x *AlertDefProperties) GetLogsNewValue() *LogsNewValueType {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_LogsNewValue); ok {
		return x.LogsNewValue
	}
	return nil
}

func (x *AlertDefProperties) GetLogsUniqueCount() *LogsUniqueCountType {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_LogsUniqueCount); ok {
		return x.LogsUniqueCount
	}
	return nil
}

func (x *AlertDefProperties) GetGroupByKeys() []*wrapperspb.StringValue {
	if x != nil {
		return x.GroupByKeys
	}
	return nil
}

func (x *AlertDefProperties) GetIncidentsSettings() *AlertDefIncidentSettings {
	if x != nil {
		return x.IncidentsSettings
	}
	return nil
}

func (x *AlertDefProperties) GetNotificationGroup() *AlertDefNotificationGroup {
	if x != nil {
		return x.NotificationGroup
	}
	return nil
}

// Deprecated: Marked as deprecated in com/coralogixapis/alerts/v3/alert_def.proto.
func (x *AlertDefProperties) GetNotificationGroupExcess() []*AlertDefNotificationGroup {
	if x != nil {
		return x.NotificationGroupExcess
	}
	return nil
}

func (x *AlertDefProperties) GetEntityLabels() map[string]string {
	if x != nil {
		return x.EntityLabels
	}
	return nil
}

func (x *AlertDefProperties) GetPhantomMode() *wrapperspb.BoolValue {
	if x != nil {
		return x.PhantomMode
	}
	return nil
}

func (x *AlertDefProperties) GetDeleted() *wrapperspb.BoolValue {
	if x != nil {
		return x.Deleted
	}
	return nil
}

type isAlertDefProperties_Schedule interface {
	isAlertDefProperties_Schedule()
}

type AlertDefProperties_ActiveOn struct {
	ActiveOn *ActivitySchedule `protobuf:"bytes,5,opt,name=active_on,json=activeOn,proto3,oneof"`
}

func (*AlertDefProperties_ActiveOn) isAlertDefProperties_Schedule() {}

type isAlertDefProperties_TypeDefinition interface {
	isAlertDefProperties_TypeDefinition()
}

type AlertDefProperties_LogsImmediate struct {
	LogsImmediate *LogsImmediateType `protobuf:"bytes,101,opt,name=logs_immediate,json=logsImmediate,proto3,oneof"`
}

type AlertDefProperties_TracingImmediate struct {
	TracingImmediate *TracingImmediateType `protobuf:"bytes,102,opt,name=tracing_immediate,json=tracingImmediate,proto3,oneof"`
}

type AlertDefProperties_LogsThreshold struct {
	LogsThreshold *LogsThresholdType `protobuf:"bytes,103,opt,name=logs_threshold,json=logsThreshold,proto3,oneof"`
}

type AlertDefProperties_LogsRatioThreshold struct {
	LogsRatioThreshold *LogsRatioThresholdType `protobuf:"bytes,104,opt,name=logs_ratio_threshold,json=logsRatioThreshold,proto3,oneof"`
}

type AlertDefProperties_LogsTimeRelativeThreshold struct {
	LogsTimeRelativeThreshold *LogsTimeRelativeThresholdType `protobuf:"bytes,105,opt,name=logs_time_relative_threshold,json=logsTimeRelativeThreshold,proto3,oneof"`
}

type AlertDefProperties_MetricThreshold struct {
	MetricThreshold *MetricThresholdType `protobuf:"bytes,106,opt,name=metric_threshold,json=metricThreshold,proto3,oneof"`
}

type AlertDefProperties_TracingThreshold struct {
	TracingThreshold *TracingThresholdType `protobuf:"bytes,107,opt,name=tracing_threshold,json=tracingThreshold,proto3,oneof"`
}

type AlertDefProperties_Flow struct {
	Flow *FlowType `protobuf:"bytes,108,opt,name=flow,proto3,oneof"`
}

type AlertDefProperties_LogsAnomaly struct {
	LogsAnomaly *LogsAnomalyType `protobuf:"bytes,109,opt,name=logs_anomaly,json=logsAnomaly,proto3,oneof"`
}

type AlertDefProperties_MetricAnomaly struct {
	MetricAnomaly *MetricAnomalyType `protobuf:"bytes,110,opt,name=metric_anomaly,json=metricAnomaly,proto3,oneof"`
}

type AlertDefProperties_LogsNewValue struct {
	LogsNewValue *LogsNewValueType `protobuf:"bytes,111,opt,name=logs_new_value,json=logsNewValue,proto3,oneof"`
}

type AlertDefProperties_LogsUniqueCount struct {
	LogsUniqueCount *LogsUniqueCountType `protobuf:"bytes,112,opt,name=logs_unique_count,json=logsUniqueCount,proto3,oneof"`
}

func (*AlertDefProperties_LogsImmediate) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_TracingImmediate) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_LogsThreshold) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_LogsRatioThreshold) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_LogsTimeRelativeThreshold) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_MetricThreshold) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_TracingThreshold) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_Flow) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_LogsAnomaly) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_MetricAnomaly) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_LogsNewValue) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_LogsUniqueCount) isAlertDefProperties_TypeDefinition() {}

var File_com_coralogixapis_alerts_v3_alert_def_proto protoreflect.FileDescriptor

var file_com_coralogixapis_alerts_v3_alert_def_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x1a, 0x3e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65,
	0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65,
	0x66, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x36, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x55, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65,
	0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x63, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x61, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x6f, 0x6d,
	0x61, 0x6c, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x5f, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x65, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65,
	0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x5f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x6c, 0x6f,
	0x67, 0x73, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x5f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x6c,
	0x6f, 0x67, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x5d, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f,
	0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x6d, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x6c,
	0x6f, 0x67, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x65, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x2f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x65, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x62, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x73,
	0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x02, 0x0a, 0x08, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65,
	0x66, 0x12, 0x61, 0x0a, 0x14, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x44, 0x65, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x12, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x46, 0x0a, 0x10, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb6, 0x11, 0x0a, 0x12, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x44, 0x65, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x66,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x2e, 0x76, 0x33, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x6e,
	0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x44, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x57, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x73, 0x49,
	0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x12, 0x60, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76,
	0x33, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x6c, 0x6f,
	0x67, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33,
	0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x01, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x67, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e,
	0x4c, 0x6f, 0x67, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x12, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x7d, 0x0a, 0x1c,
	0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x69, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33,
	0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01,
	0x52, 0x19, 0x6c, 0x6f, 0x67, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x5d, 0x0a, 0x10, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x60, 0x0a, 0x11, 0x74, 0x72,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x04,
	0x66, 0x6c, 0x6f, 0x77, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x01, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x51, 0x0a, 0x0c, 0x6c, 0x6f, 0x67,
	0x73, 0x5f, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f,
	0x67, 0x73, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52,
	0x0b, 0x6c, 0x6f, 0x67, 0x73, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x12, 0x57, 0x0a, 0x0e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e,
	0x76, 0x33, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x6e,
	0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x12, 0x55, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x6e, 0x65,
	0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f, 0x67, 0x73,
	0x4e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0c,
	0x6c, 0x6f, 0x67, 0x73, 0x4e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5e, 0x0a, 0x11,
	0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0f, 0x6c, 0x6f, 0x67,
	0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x64,
	0x0a, 0x12, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65,
	0x66, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x65, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x66, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x77, 0x0a, 0x19, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x18, 0xd2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x44, 0x65, 0x66, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x02, 0x18, 0x01, 0x52, 0x17, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x66, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44,
	0x65, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0c,
	0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x1a, 0x3f, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_alerts_v3_alert_def_proto_rawDescOnce sync.Once
	file_com_coralogixapis_alerts_v3_alert_def_proto_rawDescData = file_com_coralogixapis_alerts_v3_alert_def_proto_rawDesc
)

func file_com_coralogixapis_alerts_v3_alert_def_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_alerts_v3_alert_def_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_alerts_v3_alert_def_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_alerts_v3_alert_def_proto_rawDescData)
	})
	return file_com_coralogixapis_alerts_v3_alert_def_proto_rawDescData
}

var file_com_coralogixapis_alerts_v3_alert_def_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_com_coralogixapis_alerts_v3_alert_def_proto_goTypes = []any{
	(*AlertDef)(nil),                      // 0: com.coralogixapis.alerts.v3.AlertDef
	(*AlertDefProperties)(nil),            // 1: com.coralogixapis.alerts.v3.AlertDefProperties
	nil,                                   // 2: com.coralogixapis.alerts.v3.AlertDefProperties.EntityLabelsEntry
	(*wrapperspb.StringValue)(nil),        // 3: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),         // 4: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),          // 5: google.protobuf.BoolValue
	(AlertDefPriority)(0),                 // 6: com.coralogixapis.alerts.v3.AlertDefPriority
	(*ActivitySchedule)(nil),              // 7: com.coralogixapis.alerts.v3.ActivitySchedule
	(AlertDefType)(0),                     // 8: com.coralogixapis.alerts.v3.AlertDefType
	(*LogsImmediateType)(nil),             // 9: com.coralogixapis.alerts.v3.LogsImmediateType
	(*TracingImmediateType)(nil),          // 10: com.coralogixapis.alerts.v3.TracingImmediateType
	(*LogsThresholdType)(nil),             // 11: com.coralogixapis.alerts.v3.LogsThresholdType
	(*LogsRatioThresholdType)(nil),        // 12: com.coralogixapis.alerts.v3.LogsRatioThresholdType
	(*LogsTimeRelativeThresholdType)(nil), // 13: com.coralogixapis.alerts.v3.LogsTimeRelativeThresholdType
	(*MetricThresholdType)(nil),           // 14: com.coralogixapis.alerts.v3.MetricThresholdType
	(*TracingThresholdType)(nil),          // 15: com.coralogixapis.alerts.v3.TracingThresholdType
	(*FlowType)(nil),                      // 16: com.coralogixapis.alerts.v3.FlowType
	(*LogsAnomalyType)(nil),               // 17: com.coralogixapis.alerts.v3.LogsAnomalyType
	(*MetricAnomalyType)(nil),             // 18: com.coralogixapis.alerts.v3.MetricAnomalyType
	(*LogsNewValueType)(nil),              // 19: com.coralogixapis.alerts.v3.LogsNewValueType
	(*LogsUniqueCountType)(nil),           // 20: com.coralogixapis.alerts.v3.LogsUniqueCountType
	(*AlertDefIncidentSettings)(nil),      // 21: com.coralogixapis.alerts.v3.AlertDefIncidentSettings
	(*AlertDefNotificationGroup)(nil),     // 22: com.coralogixapis.alerts.v3.AlertDefNotificationGroup
}
var file_com_coralogixapis_alerts_v3_alert_def_proto_depIdxs = []int32{
	1,  // 0: com.coralogixapis.alerts.v3.AlertDef.alert_def_properties:type_name -> com.coralogixapis.alerts.v3.AlertDefProperties
	3,  // 1: com.coralogixapis.alerts.v3.AlertDef.id:type_name -> google.protobuf.StringValue
	3,  // 2: com.coralogixapis.alerts.v3.AlertDef.alert_version_id:type_name -> google.protobuf.StringValue
	4,  // 3: com.coralogixapis.alerts.v3.AlertDef.created_time:type_name -> google.protobuf.Timestamp
	4,  // 4: com.coralogixapis.alerts.v3.AlertDef.updated_time:type_name -> google.protobuf.Timestamp
	3,  // 5: com.coralogixapis.alerts.v3.AlertDefProperties.name:type_name -> google.protobuf.StringValue
	3,  // 6: com.coralogixapis.alerts.v3.AlertDefProperties.description:type_name -> google.protobuf.StringValue
	5,  // 7: com.coralogixapis.alerts.v3.AlertDefProperties.enabled:type_name -> google.protobuf.BoolValue
	6,  // 8: com.coralogixapis.alerts.v3.AlertDefProperties.priority:type_name -> com.coralogixapis.alerts.v3.AlertDefPriority
	7,  // 9: com.coralogixapis.alerts.v3.AlertDefProperties.active_on:type_name -> com.coralogixapis.alerts.v3.ActivitySchedule
	8,  // 10: com.coralogixapis.alerts.v3.AlertDefProperties.type:type_name -> com.coralogixapis.alerts.v3.AlertDefType
	9,  // 11: com.coralogixapis.alerts.v3.AlertDefProperties.logs_immediate:type_name -> com.coralogixapis.alerts.v3.LogsImmediateType
	10, // 12: com.coralogixapis.alerts.v3.AlertDefProperties.tracing_immediate:type_name -> com.coralogixapis.alerts.v3.TracingImmediateType
	11, // 13: com.coralogixapis.alerts.v3.AlertDefProperties.logs_threshold:type_name -> com.coralogixapis.alerts.v3.LogsThresholdType
	12, // 14: com.coralogixapis.alerts.v3.AlertDefProperties.logs_ratio_threshold:type_name -> com.coralogixapis.alerts.v3.LogsRatioThresholdType
	13, // 15: com.coralogixapis.alerts.v3.AlertDefProperties.logs_time_relative_threshold:type_name -> com.coralogixapis.alerts.v3.LogsTimeRelativeThresholdType
	14, // 16: com.coralogixapis.alerts.v3.AlertDefProperties.metric_threshold:type_name -> com.coralogixapis.alerts.v3.MetricThresholdType
	15, // 17: com.coralogixapis.alerts.v3.AlertDefProperties.tracing_threshold:type_name -> com.coralogixapis.alerts.v3.TracingThresholdType
	16, // 18: com.coralogixapis.alerts.v3.AlertDefProperties.flow:type_name -> com.coralogixapis.alerts.v3.FlowType
	17, // 19: com.coralogixapis.alerts.v3.AlertDefProperties.logs_anomaly:type_name -> com.coralogixapis.alerts.v3.LogsAnomalyType
	18, // 20: com.coralogixapis.alerts.v3.AlertDefProperties.metric_anomaly:type_name -> com.coralogixapis.alerts.v3.MetricAnomalyType
	19, // 21: com.coralogixapis.alerts.v3.AlertDefProperties.logs_new_value:type_name -> com.coralogixapis.alerts.v3.LogsNewValueType
	20, // 22: com.coralogixapis.alerts.v3.AlertDefProperties.logs_unique_count:type_name -> com.coralogixapis.alerts.v3.LogsUniqueCountType
	3,  // 23: com.coralogixapis.alerts.v3.AlertDefProperties.group_by_keys:type_name -> google.protobuf.StringValue
	21, // 24: com.coralogixapis.alerts.v3.AlertDefProperties.incidents_settings:type_name -> com.coralogixapis.alerts.v3.AlertDefIncidentSettings
	22, // 25: com.coralogixapis.alerts.v3.AlertDefProperties.notification_group:type_name -> com.coralogixapis.alerts.v3.AlertDefNotificationGroup
	22, // 26: com.coralogixapis.alerts.v3.AlertDefProperties.notification_group_excess:type_name -> com.coralogixapis.alerts.v3.AlertDefNotificationGroup
	2,  // 27: com.coralogixapis.alerts.v3.AlertDefProperties.entity_labels:type_name -> com.coralogixapis.alerts.v3.AlertDefProperties.EntityLabelsEntry
	5,  // 28: com.coralogixapis.alerts.v3.AlertDefProperties.phantom_mode:type_name -> google.protobuf.BoolValue
	5,  // 29: com.coralogixapis.alerts.v3.AlertDefProperties.deleted:type_name -> google.protobuf.BoolValue
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_alerts_v3_alert_def_proto_init() }
func file_com_coralogixapis_alerts_v3_alert_def_proto_init() {
	if File_com_coralogixapis_alerts_v3_alert_def_proto != nil {
		return
	}
	file_com_coralogixapis_alerts_v3_alert_def_notification_group_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_priority_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_scheduling_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_flow_flow_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_metric_metric_threshold_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_metric_metric_anomaly_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_logs_logs_new_value_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_logs_logs_ratio_threshold_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_logs_logs_immediate_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_logs_logs_threshold_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_logs_logs_anomaly_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_logs_logs_time_relative_threshold_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_tracing_tracing_immediate_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_tracing_tracing_threshold_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_logs_logs_unique_count_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_proto_msgTypes[1].OneofWrappers = []any{
		(*AlertDefProperties_ActiveOn)(nil),
		(*AlertDefProperties_LogsImmediate)(nil),
		(*AlertDefProperties_TracingImmediate)(nil),
		(*AlertDefProperties_LogsThreshold)(nil),
		(*AlertDefProperties_LogsRatioThreshold)(nil),
		(*AlertDefProperties_LogsTimeRelativeThreshold)(nil),
		(*AlertDefProperties_MetricThreshold)(nil),
		(*AlertDefProperties_TracingThreshold)(nil),
		(*AlertDefProperties_Flow)(nil),
		(*AlertDefProperties_LogsAnomaly)(nil),
		(*AlertDefProperties_MetricAnomaly)(nil),
		(*AlertDefProperties_LogsNewValue)(nil),
		(*AlertDefProperties_LogsUniqueCount)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_alerts_v3_alert_def_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogixapis_alerts_v3_alert_def_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_alerts_v3_alert_def_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_alerts_v3_alert_def_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_alerts_v3_alert_def_proto = out.File
	file_com_coralogixapis_alerts_v3_alert_def_proto_rawDesc = nil
	file_com_coralogixapis_alerts_v3_alert_def_proto_goTypes = nil
	file_com_coralogixapis_alerts_v3_alert_def_proto_depIdxs = nil
}
