// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: com/coralogixapis/views/v1/services/legacy_views_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LegacyViewsService_CreateLegacyView_FullMethodName    = "/com.coralogixapis.views.v1.services.LegacyViewsService/CreateLegacyView"
	LegacyViewsService_ReplaceLegacyView_FullMethodName   = "/com.coralogixapis.views.v1.services.LegacyViewsService/ReplaceLegacyView"
	LegacyViewsService_DeleteLegacyView_FullMethodName    = "/com.coralogixapis.views.v1.services.LegacyViewsService/DeleteLegacyView"
	LegacyViewsService_ListTeamLegacyViews_FullMethodName = "/com.coralogixapis.views.v1.services.LegacyViewsService/ListTeamLegacyViews"
	LegacyViewsService_ListUserLegacyViews_FullMethodName = "/com.coralogixapis.views.v1.services.LegacyViewsService/ListUserLegacyViews"
)

// LegacyViewsServiceClient is the client API for LegacyViewsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LegacyViewsServiceClient interface {
	CreateLegacyView(ctx context.Context, in *CreateLegacyViewRequest, opts ...grpc.CallOption) (*CreateLegacyViewResponse, error)
	ReplaceLegacyView(ctx context.Context, in *ReplaceLegacyViewRequest, opts ...grpc.CallOption) (*ReplaceLegacyViewResponse, error)
	DeleteLegacyView(ctx context.Context, in *DeleteLegacyViewRequest, opts ...grpc.CallOption) (*DeleteLegacyViewResponse, error)
	ListTeamLegacyViews(ctx context.Context, in *ListTeamLegacyViewsRequest, opts ...grpc.CallOption) (*ListTeamLegacyViewsResponse, error)
	ListUserLegacyViews(ctx context.Context, in *ListUserLegacyViewsRequest, opts ...grpc.CallOption) (*ListUserLegacyViewsResponse, error)
}

type legacyViewsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLegacyViewsServiceClient(cc grpc.ClientConnInterface) LegacyViewsServiceClient {
	return &legacyViewsServiceClient{cc}
}

func (c *legacyViewsServiceClient) CreateLegacyView(ctx context.Context, in *CreateLegacyViewRequest, opts ...grpc.CallOption) (*CreateLegacyViewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLegacyViewResponse)
	err := c.cc.Invoke(ctx, LegacyViewsService_CreateLegacyView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *legacyViewsServiceClient) ReplaceLegacyView(ctx context.Context, in *ReplaceLegacyViewRequest, opts ...grpc.CallOption) (*ReplaceLegacyViewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceLegacyViewResponse)
	err := c.cc.Invoke(ctx, LegacyViewsService_ReplaceLegacyView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *legacyViewsServiceClient) DeleteLegacyView(ctx context.Context, in *DeleteLegacyViewRequest, opts ...grpc.CallOption) (*DeleteLegacyViewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLegacyViewResponse)
	err := c.cc.Invoke(ctx, LegacyViewsService_DeleteLegacyView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *legacyViewsServiceClient) ListTeamLegacyViews(ctx context.Context, in *ListTeamLegacyViewsRequest, opts ...grpc.CallOption) (*ListTeamLegacyViewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTeamLegacyViewsResponse)
	err := c.cc.Invoke(ctx, LegacyViewsService_ListTeamLegacyViews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *legacyViewsServiceClient) ListUserLegacyViews(ctx context.Context, in *ListUserLegacyViewsRequest, opts ...grpc.CallOption) (*ListUserLegacyViewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserLegacyViewsResponse)
	err := c.cc.Invoke(ctx, LegacyViewsService_ListUserLegacyViews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LegacyViewsServiceServer is the server API for LegacyViewsService service.
// All implementations must embed UnimplementedLegacyViewsServiceServer
// for forward compatibility
type LegacyViewsServiceServer interface {
	CreateLegacyView(context.Context, *CreateLegacyViewRequest) (*CreateLegacyViewResponse, error)
	ReplaceLegacyView(context.Context, *ReplaceLegacyViewRequest) (*ReplaceLegacyViewResponse, error)
	DeleteLegacyView(context.Context, *DeleteLegacyViewRequest) (*DeleteLegacyViewResponse, error)
	ListTeamLegacyViews(context.Context, *ListTeamLegacyViewsRequest) (*ListTeamLegacyViewsResponse, error)
	ListUserLegacyViews(context.Context, *ListUserLegacyViewsRequest) (*ListUserLegacyViewsResponse, error)
	mustEmbedUnimplementedLegacyViewsServiceServer()
}

// UnimplementedLegacyViewsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLegacyViewsServiceServer struct {
}

func (UnimplementedLegacyViewsServiceServer) CreateLegacyView(context.Context, *CreateLegacyViewRequest) (*CreateLegacyViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLegacyView not implemented")
}
func (UnimplementedLegacyViewsServiceServer) ReplaceLegacyView(context.Context, *ReplaceLegacyViewRequest) (*ReplaceLegacyViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceLegacyView not implemented")
}
func (UnimplementedLegacyViewsServiceServer) DeleteLegacyView(context.Context, *DeleteLegacyViewRequest) (*DeleteLegacyViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLegacyView not implemented")
}
func (UnimplementedLegacyViewsServiceServer) ListTeamLegacyViews(context.Context, *ListTeamLegacyViewsRequest) (*ListTeamLegacyViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeamLegacyViews not implemented")
}
func (UnimplementedLegacyViewsServiceServer) ListUserLegacyViews(context.Context, *ListUserLegacyViewsRequest) (*ListUserLegacyViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserLegacyViews not implemented")
}
func (UnimplementedLegacyViewsServiceServer) mustEmbedUnimplementedLegacyViewsServiceServer() {}

// UnsafeLegacyViewsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LegacyViewsServiceServer will
// result in compilation errors.
type UnsafeLegacyViewsServiceServer interface {
	mustEmbedUnimplementedLegacyViewsServiceServer()
}

func RegisterLegacyViewsServiceServer(s grpc.ServiceRegistrar, srv LegacyViewsServiceServer) {
	s.RegisterService(&LegacyViewsService_ServiceDesc, srv)
}

func _LegacyViewsService_CreateLegacyView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLegacyViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegacyViewsServiceServer).CreateLegacyView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LegacyViewsService_CreateLegacyView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegacyViewsServiceServer).CreateLegacyView(ctx, req.(*CreateLegacyViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LegacyViewsService_ReplaceLegacyView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceLegacyViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegacyViewsServiceServer).ReplaceLegacyView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LegacyViewsService_ReplaceLegacyView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegacyViewsServiceServer).ReplaceLegacyView(ctx, req.(*ReplaceLegacyViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LegacyViewsService_DeleteLegacyView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLegacyViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegacyViewsServiceServer).DeleteLegacyView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LegacyViewsService_DeleteLegacyView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegacyViewsServiceServer).DeleteLegacyView(ctx, req.(*DeleteLegacyViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LegacyViewsService_ListTeamLegacyViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamLegacyViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegacyViewsServiceServer).ListTeamLegacyViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LegacyViewsService_ListTeamLegacyViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegacyViewsServiceServer).ListTeamLegacyViews(ctx, req.(*ListTeamLegacyViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LegacyViewsService_ListUserLegacyViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserLegacyViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegacyViewsServiceServer).ListUserLegacyViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LegacyViewsService_ListUserLegacyViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegacyViewsServiceServer).ListUserLegacyViews(ctx, req.(*ListUserLegacyViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LegacyViewsService_ServiceDesc is the grpc.ServiceDesc for LegacyViewsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LegacyViewsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogixapis.views.v1.services.LegacyViewsService",
	HandlerType: (*LegacyViewsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLegacyView",
			Handler:    _LegacyViewsService_CreateLegacyView_Handler,
		},
		{
			MethodName: "ReplaceLegacyView",
			Handler:    _LegacyViewsService_ReplaceLegacyView_Handler,
		},
		{
			MethodName: "DeleteLegacyView",
			Handler:    _LegacyViewsService_DeleteLegacyView_Handler,
		},
		{
			MethodName: "ListTeamLegacyViews",
			Handler:    _LegacyViewsService_ListTeamLegacyViews_Handler,
		},
		{
			MethodName: "ListUserLegacyViews",
			Handler:    _LegacyViewsService_ListUserLegacyViews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogixapis/views/v1/services/legacy_views_service.proto",
}
