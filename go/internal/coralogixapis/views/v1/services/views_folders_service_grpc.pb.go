// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: com/coralogixapis/views/v1/services/views_folders_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ViewsFoldersService_ListViewFolders_FullMethodName   = "/com.coralogixapis.views.v1.services.ViewsFoldersService/ListViewFolders"
	ViewsFoldersService_GetViewFolder_FullMethodName     = "/com.coralogixapis.views.v1.services.ViewsFoldersService/GetViewFolder"
	ViewsFoldersService_CreateViewFolder_FullMethodName  = "/com.coralogixapis.views.v1.services.ViewsFoldersService/CreateViewFolder"
	ViewsFoldersService_DeleteViewFolder_FullMethodName  = "/com.coralogixapis.views.v1.services.ViewsFoldersService/DeleteViewFolder"
	ViewsFoldersService_ReplaceViewFolder_FullMethodName = "/com.coralogixapis.views.v1.services.ViewsFoldersService/ReplaceViewFolder"
)

// ViewsFoldersServiceClient is the client API for ViewsFoldersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ViewsFoldersServiceClient interface {
	ListViewFolders(ctx context.Context, in *ListViewFoldersRequest, opts ...grpc.CallOption) (*ListViewFoldersResponse, error)
	GetViewFolder(ctx context.Context, in *GetViewFolderRequest, opts ...grpc.CallOption) (*GetViewFolderResponse, error)
	CreateViewFolder(ctx context.Context, in *CreateViewFolderRequest, opts ...grpc.CallOption) (*CreateViewFolderResponse, error)
	DeleteViewFolder(ctx context.Context, in *DeleteViewFolderRequest, opts ...grpc.CallOption) (*DeleteViewFolderResponse, error)
	ReplaceViewFolder(ctx context.Context, in *ReplaceViewFolderRequest, opts ...grpc.CallOption) (*ReplaceViewFolderResponse, error)
}

type viewsFoldersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewViewsFoldersServiceClient(cc grpc.ClientConnInterface) ViewsFoldersServiceClient {
	return &viewsFoldersServiceClient{cc}
}

func (c *viewsFoldersServiceClient) ListViewFolders(ctx context.Context, in *ListViewFoldersRequest, opts ...grpc.CallOption) (*ListViewFoldersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListViewFoldersResponse)
	err := c.cc.Invoke(ctx, ViewsFoldersService_ListViewFolders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewsFoldersServiceClient) GetViewFolder(ctx context.Context, in *GetViewFolderRequest, opts ...grpc.CallOption) (*GetViewFolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetViewFolderResponse)
	err := c.cc.Invoke(ctx, ViewsFoldersService_GetViewFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewsFoldersServiceClient) CreateViewFolder(ctx context.Context, in *CreateViewFolderRequest, opts ...grpc.CallOption) (*CreateViewFolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateViewFolderResponse)
	err := c.cc.Invoke(ctx, ViewsFoldersService_CreateViewFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewsFoldersServiceClient) DeleteViewFolder(ctx context.Context, in *DeleteViewFolderRequest, opts ...grpc.CallOption) (*DeleteViewFolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteViewFolderResponse)
	err := c.cc.Invoke(ctx, ViewsFoldersService_DeleteViewFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewsFoldersServiceClient) ReplaceViewFolder(ctx context.Context, in *ReplaceViewFolderRequest, opts ...grpc.CallOption) (*ReplaceViewFolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceViewFolderResponse)
	err := c.cc.Invoke(ctx, ViewsFoldersService_ReplaceViewFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ViewsFoldersServiceServer is the server API for ViewsFoldersService service.
// All implementations must embed UnimplementedViewsFoldersServiceServer
// for forward compatibility.
type ViewsFoldersServiceServer interface {
	ListViewFolders(context.Context, *ListViewFoldersRequest) (*ListViewFoldersResponse, error)
	GetViewFolder(context.Context, *GetViewFolderRequest) (*GetViewFolderResponse, error)
	CreateViewFolder(context.Context, *CreateViewFolderRequest) (*CreateViewFolderResponse, error)
	DeleteViewFolder(context.Context, *DeleteViewFolderRequest) (*DeleteViewFolderResponse, error)
	ReplaceViewFolder(context.Context, *ReplaceViewFolderRequest) (*ReplaceViewFolderResponse, error)
	mustEmbedUnimplementedViewsFoldersServiceServer()
}

// UnimplementedViewsFoldersServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedViewsFoldersServiceServer struct{}

func (UnimplementedViewsFoldersServiceServer) ListViewFolders(context.Context, *ListViewFoldersRequest) (*ListViewFoldersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListViewFolders not implemented")
}
func (UnimplementedViewsFoldersServiceServer) GetViewFolder(context.Context, *GetViewFolderRequest) (*GetViewFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViewFolder not implemented")
}
func (UnimplementedViewsFoldersServiceServer) CreateViewFolder(context.Context, *CreateViewFolderRequest) (*CreateViewFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateViewFolder not implemented")
}
func (UnimplementedViewsFoldersServiceServer) DeleteViewFolder(context.Context, *DeleteViewFolderRequest) (*DeleteViewFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteViewFolder not implemented")
}
func (UnimplementedViewsFoldersServiceServer) ReplaceViewFolder(context.Context, *ReplaceViewFolderRequest) (*ReplaceViewFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceViewFolder not implemented")
}
func (UnimplementedViewsFoldersServiceServer) mustEmbedUnimplementedViewsFoldersServiceServer() {}
func (UnimplementedViewsFoldersServiceServer) testEmbeddedByValue()                             {}

// UnsafeViewsFoldersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ViewsFoldersServiceServer will
// result in compilation errors.
type UnsafeViewsFoldersServiceServer interface {
	mustEmbedUnimplementedViewsFoldersServiceServer()
}

func RegisterViewsFoldersServiceServer(s grpc.ServiceRegistrar, srv ViewsFoldersServiceServer) {
	// If the following call pancis, it indicates UnimplementedViewsFoldersServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ViewsFoldersService_ServiceDesc, srv)
}

func _ViewsFoldersService_ListViewFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListViewFoldersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewsFoldersServiceServer).ListViewFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewsFoldersService_ListViewFolders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewsFoldersServiceServer).ListViewFolders(ctx, req.(*ListViewFoldersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewsFoldersService_GetViewFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetViewFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewsFoldersServiceServer).GetViewFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewsFoldersService_GetViewFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewsFoldersServiceServer).GetViewFolder(ctx, req.(*GetViewFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewsFoldersService_CreateViewFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateViewFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewsFoldersServiceServer).CreateViewFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewsFoldersService_CreateViewFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewsFoldersServiceServer).CreateViewFolder(ctx, req.(*CreateViewFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewsFoldersService_DeleteViewFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteViewFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewsFoldersServiceServer).DeleteViewFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewsFoldersService_DeleteViewFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewsFoldersServiceServer).DeleteViewFolder(ctx, req.(*DeleteViewFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewsFoldersService_ReplaceViewFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceViewFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewsFoldersServiceServer).ReplaceViewFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewsFoldersService_ReplaceViewFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewsFoldersServiceServer).ReplaceViewFolder(ctx, req.(*ReplaceViewFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ViewsFoldersService_ServiceDesc is the grpc.ServiceDesc for ViewsFoldersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ViewsFoldersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogixapis.views.v1.services.ViewsFoldersService",
	HandlerType: (*ViewsFoldersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListViewFolders",
			Handler:    _ViewsFoldersService_ListViewFolders_Handler,
		},
		{
			MethodName: "GetViewFolder",
			Handler:    _ViewsFoldersService_GetViewFolder_Handler,
		},
		{
			MethodName: "CreateViewFolder",
			Handler:    _ViewsFoldersService_CreateViewFolder_Handler,
		},
		{
			MethodName: "DeleteViewFolder",
			Handler:    _ViewsFoldersService_DeleteViewFolder_Handler,
		},
		{
			MethodName: "ReplaceViewFolder",
			Handler:    _ViewsFoldersService_ReplaceViewFolder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogixapis/views/v1/services/views_folders_service.proto",
}
