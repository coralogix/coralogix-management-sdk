// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.1
// source: com/coralogixapis/service_catalog/v1/error-tracking/error_tracking_drill_down_service.proto

package v1

import (
	v2 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/common/v2"
	_ "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/widgets/v1"
	common "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm_shared/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetErrorStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRange             *v2.TimeRange             `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	ServiceName           *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceCatalogFilters []*ApmFilter              `protobuf:"bytes,3,rep,name=service_catalog_filters,json=serviceCatalogFilters,proto3" json:"service_catalog_filters,omitempty"`
	StatusCode            *wrapperspb.StringValue   `protobuf:"bytes,4,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	ErrorMessageSource    ErrorMessageSource        `protobuf:"varint,5,opt,name=error_message_source,json=errorMessageSource,proto3,enum=com.coralogixapis.service_catalog.v1.ErrorMessageSource" json:"error_message_source,omitempty"`
	DataSource            ErrorDataSource           `protobuf:"varint,6,opt,name=data_source,json=dataSource,proto3,enum=com.coralogixapis.service_catalog.v1.ErrorDataSource" json:"data_source,omitempty"`
	Operations            []*wrapperspb.StringValue `protobuf:"bytes,7,rep,name=operations,proto3" json:"operations,omitempty"`
	Method                *wrapperspb.StringValue   `protobuf:"bytes,10,opt,name=method,proto3" json:"method,omitempty"`
	OperationSpanKinds    []SpanKind                `protobuf:"varint,8,rep,packed,name=operation_span_kinds,json=operationSpanKinds,proto3,enum=com.coralogix.catalog.v1.SpanKind" json:"operation_span_kinds,omitempty"`
	ApmSource             ApmSource                 `protobuf:"varint,9,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
}

func (x *GetErrorStatsRequest) Reset() {
	*x = GetErrorStatsRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetErrorStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetErrorStatsRequest) ProtoMessage() {}

func (x *GetErrorStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetErrorStatsRequest.ProtoReflect.Descriptor instead.
func (*GetErrorStatsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetErrorStatsRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetErrorStatsRequest) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *GetErrorStatsRequest) GetServiceCatalogFilters() []*ApmFilter {
	if x != nil {
		return x.ServiceCatalogFilters
	}
	return nil
}

func (x *GetErrorStatsRequest) GetStatusCode() *wrapperspb.StringValue {
	if x != nil {
		return x.StatusCode
	}
	return nil
}

func (x *GetErrorStatsRequest) GetErrorMessageSource() ErrorMessageSource {
	if x != nil {
		return x.ErrorMessageSource
	}
	return ErrorMessageSource_ERROR_MESSAGE_SOURCE_UNSPECIFIED
}

func (x *GetErrorStatsRequest) GetDataSource() ErrorDataSource {
	if x != nil {
		return x.DataSource
	}
	return ErrorDataSource_ERROR_DATA_SOURCE_UNSPECIFIED
}

func (x *GetErrorStatsRequest) GetOperations() []*wrapperspb.StringValue {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *GetErrorStatsRequest) GetMethod() *wrapperspb.StringValue {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *GetErrorStatsRequest) GetOperationSpanKinds() []SpanKind {
	if x != nil {
		return x.OperationSpanKinds
	}
	return nil
}

func (x *GetErrorStatsRequest) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

type GetErrorStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstAppearance  *UnitValue `protobuf:"bytes,1,opt,name=first_appearance,json=firstAppearance,proto3" json:"first_appearance,omitempty"`
	LastAppearance   *UnitValue `protobuf:"bytes,2,opt,name=last_appearance,json=lastAppearance,proto3" json:"last_appearance,omitempty"`
	P95Latency       *UnitValue `protobuf:"bytes,3,opt,name=p95_latency,json=p95Latency,proto3" json:"p95_latency,omitempty"`
	P99Latency       *UnitValue `protobuf:"bytes,4,opt,name=p99_latency,json=p99Latency,proto3" json:"p99_latency,omitempty"`
	ErrorAmount      *UnitValue `protobuf:"bytes,5,opt,name=error_amount,json=errorAmount,proto3" json:"error_amount,omitempty"`
	ErrorsPercentage *UnitValue `protobuf:"bytes,6,opt,name=errors_percentage,json=errorsPercentage,proto3" json:"errors_percentage,omitempty"`
}

func (x *GetErrorStatsResponse) Reset() {
	*x = GetErrorStatsResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetErrorStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetErrorStatsResponse) ProtoMessage() {}

func (x *GetErrorStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetErrorStatsResponse.ProtoReflect.Descriptor instead.
func (*GetErrorStatsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetErrorStatsResponse) GetFirstAppearance() *UnitValue {
	if x != nil {
		return x.FirstAppearance
	}
	return nil
}

func (x *GetErrorStatsResponse) GetLastAppearance() *UnitValue {
	if x != nil {
		return x.LastAppearance
	}
	return nil
}

func (x *GetErrorStatsResponse) GetP95Latency() *UnitValue {
	if x != nil {
		return x.P95Latency
	}
	return nil
}

func (x *GetErrorStatsResponse) GetP99Latency() *UnitValue {
	if x != nil {
		return x.P99Latency
	}
	return nil
}

func (x *GetErrorStatsResponse) GetErrorAmount() *UnitValue {
	if x != nil {
		return x.ErrorAmount
	}
	return nil
}

func (x *GetErrorStatsResponse) GetErrorsPercentage() *UnitValue {
	if x != nil {
		return x.ErrorsPercentage
	}
	return nil
}

type DrillDownSubFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRange             *v2.TimeRange           `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	ServiceName           *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceCatalogFilters []*ApmFilter            `protobuf:"bytes,3,rep,name=service_catalog_filters,json=serviceCatalogFilters,proto3" json:"service_catalog_filters,omitempty"`
	OperationSpanKinds    []SpanKind              `protobuf:"varint,4,rep,packed,name=operation_span_kinds,json=operationSpanKinds,proto3,enum=com.coralogix.catalog.v1.SpanKind" json:"operation_span_kinds,omitempty"`
	StatusCode            *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	ErrorMessageSource    ErrorMessageSource      `protobuf:"varint,6,opt,name=error_message_source,json=errorMessageSource,proto3,enum=com.coralogixapis.service_catalog.v1.ErrorMessageSource" json:"error_message_source,omitempty"`
	DataSource            ErrorDataSource         `protobuf:"varint,7,opt,name=data_source,json=dataSource,proto3,enum=com.coralogixapis.service_catalog.v1.ErrorDataSource" json:"data_source,omitempty"`
}

func (x *DrillDownSubFiltersRequest) Reset() {
	*x = DrillDownSubFiltersRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrillDownSubFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrillDownSubFiltersRequest) ProtoMessage() {}

func (x *DrillDownSubFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrillDownSubFiltersRequest.ProtoReflect.Descriptor instead.
func (*DrillDownSubFiltersRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_rawDescGZIP(), []int{2}
}

func (x *DrillDownSubFiltersRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *DrillDownSubFiltersRequest) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *DrillDownSubFiltersRequest) GetServiceCatalogFilters() []*ApmFilter {
	if x != nil {
		return x.ServiceCatalogFilters
	}
	return nil
}

func (x *DrillDownSubFiltersRequest) GetOperationSpanKinds() []SpanKind {
	if x != nil {
		return x.OperationSpanKinds
	}
	return nil
}

func (x *DrillDownSubFiltersRequest) GetStatusCode() *wrapperspb.StringValue {
	if x != nil {
		return x.StatusCode
	}
	return nil
}

func (x *DrillDownSubFiltersRequest) GetErrorMessageSource() ErrorMessageSource {
	if x != nil {
		return x.ErrorMessageSource
	}
	return ErrorMessageSource_ERROR_MESSAGE_SOURCE_UNSPECIFIED
}

func (x *DrillDownSubFiltersRequest) GetDataSource() ErrorDataSource {
	if x != nil {
		return x.DataSource
	}
	return ErrorDataSource_ERROR_DATA_SOURCE_UNSPECIFIED
}

type DrillDownSubFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation   *ApmFilter          `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	QueriesInfo []*common.QueryInfo `protobuf:"bytes,2,rep,name=queriesInfo,proto3" json:"queriesInfo,omitempty"`
}

func (x *DrillDownSubFilterResponse) Reset() {
	*x = DrillDownSubFilterResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrillDownSubFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrillDownSubFilterResponse) ProtoMessage() {}

func (x *DrillDownSubFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrillDownSubFilterResponse.ProtoReflect.Descriptor instead.
func (*DrillDownSubFilterResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_rawDescGZIP(), []int{3}
}

func (x *DrillDownSubFilterResponse) GetOperation() *ApmFilter {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *DrillDownSubFilterResponse) GetQueriesInfo() []*common.QueryInfo {
	if x != nil {
		return x.QueriesInfo
	}
	return nil
}

type GetServiceErrorTrackingDrillDownGraphRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRange             *v2.TimeRange           `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	ServiceName           *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceCatalogFilters []*ApmFilter            `protobuf:"bytes,3,rep,name=service_catalog_filters,json=serviceCatalogFilters,proto3" json:"service_catalog_filters,omitempty"`
	GroupBy               GroupBy                 `protobuf:"varint,4,opt,name=group_by,json=groupBy,proto3,enum=com.coralogixapis.service_catalog.v1.GroupBy" json:"group_by,omitempty"`
	DataSource            ErrorDataSource         `protobuf:"varint,6,opt,name=data_source,json=dataSource,proto3,enum=com.coralogixapis.service_catalog.v1.ErrorDataSource" json:"data_source,omitempty"`
	OperationSpanKinds    []SpanKind              `protobuf:"varint,7,rep,packed,name=operation_span_kinds,json=operationSpanKinds,proto3,enum=com.coralogix.catalog.v1.SpanKind" json:"operation_span_kinds,omitempty"`
	ApmSource             ApmSource               `protobuf:"varint,8,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	Topk                  *wrapperspb.UInt64Value `protobuf:"bytes,9,opt,name=topk,proto3" json:"topk,omitempty"`
	StatusCode            *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Method                *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=method,proto3" json:"method,omitempty"`
	ErrorMessageSource    ErrorMessageSource      `protobuf:"varint,12,opt,name=error_message_source,json=errorMessageSource,proto3,enum=com.coralogixapis.service_catalog.v1.ErrorMessageSource" json:"error_message_source,omitempty"`
}

func (x *GetServiceErrorTrackingDrillDownGraphRequest) Reset() {
	*x = GetServiceErrorTrackingDrillDownGraphRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceErrorTrackingDrillDownGraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceErrorTrackingDrillDownGraphRequest) ProtoMessage() {}

func (x *GetServiceErrorTrackingDrillDownGraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceErrorTrackingDrillDownGraphRequest.ProtoReflect.Descriptor instead.
func (*GetServiceErrorTrackingDrillDownGraphRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetServiceErrorTrackingDrillDownGraphRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetServiceErrorTrackingDrillDownGraphRequest) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *GetServiceErrorTrackingDrillDownGraphRequest) GetServiceCatalogFilters() []*ApmFilter {
	if x != nil {
		return x.ServiceCatalogFilters
	}
	return nil
}

func (x *GetServiceErrorTrackingDrillDownGraphRequest) GetGroupBy() GroupBy {
	if x != nil {
		return x.GroupBy
	}
	return GroupBy_GROUP_BY_UNSPECIFIED
}

func (x *GetServiceErrorTrackingDrillDownGraphRequest) GetDataSource() ErrorDataSource {
	if x != nil {
		return x.DataSource
	}
	return ErrorDataSource_ERROR_DATA_SOURCE_UNSPECIFIED
}

func (x *GetServiceErrorTrackingDrillDownGraphRequest) GetOperationSpanKinds() []SpanKind {
	if x != nil {
		return x.OperationSpanKinds
	}
	return nil
}

func (x *GetServiceErrorTrackingDrillDownGraphRequest) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

func (x *GetServiceErrorTrackingDrillDownGraphRequest) GetTopk() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Topk
	}
	return nil
}

func (x *GetServiceErrorTrackingDrillDownGraphRequest) GetStatusCode() *wrapperspb.StringValue {
	if x != nil {
		return x.StatusCode
	}
	return nil
}

func (x *GetServiceErrorTrackingDrillDownGraphRequest) GetMethod() *wrapperspb.StringValue {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *GetServiceErrorTrackingDrillDownGraphRequest) GetErrorMessageSource() ErrorMessageSource {
	if x != nil {
		return x.ErrorMessageSource
	}
	return ErrorMessageSource_ERROR_MESSAGE_SOURCE_UNSPECIFIED
}

type GetServiceErrorTrackingDrillDownGraphResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operations  *RepeatedLineChart      `protobuf:"bytes,1,opt,name=operations,proto3" json:"operations,omitempty"`
	TotalAmount *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
}

func (x *GetServiceErrorTrackingDrillDownGraphResponse) Reset() {
	*x = GetServiceErrorTrackingDrillDownGraphResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceErrorTrackingDrillDownGraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceErrorTrackingDrillDownGraphResponse) ProtoMessage() {}

func (x *GetServiceErrorTrackingDrillDownGraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceErrorTrackingDrillDownGraphResponse.ProtoReflect.Descriptor instead.
func (*GetServiceErrorTrackingDrillDownGraphResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetServiceErrorTrackingDrillDownGraphResponse) GetOperations() *RepeatedLineChart {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *GetServiceErrorTrackingDrillDownGraphResponse) GetTotalAmount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.TotalAmount
	}
	return nil
}

var File_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto protoreflect.FileDescriptor

var file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_rawDesc = []byte{
	0x0a, 0x5b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x72, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x1a, 0x25, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70,
	0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4f,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x3b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x77, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x06, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x17, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x6a, 0x0a, 0x14, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x54, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x61,
	0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x6e,
	0x4b, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x61, 0x70, 0x6d, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xa3, 0x04, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5a, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x65, 0x61,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x70, 0x39, 0x35, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x39, 0x35,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x50, 0x0a, 0x0b, 0x70, 0x39, 0x39, 0x5f, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70,
	0x39, 0x39, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x52, 0x0a, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5c, 0x0a,
	0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0xde, 0x04, 0x0a, 0x1a,
	0x44, 0x72, 0x69, 0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x53, 0x75, 0x62, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x15, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61,
	0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x6a, 0x0a, 0x14, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xad, 0x01, 0x0a,
	0x1a, 0x44, 0x72, 0x69, 0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x53, 0x75, 0x62, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf2, 0x06, 0x0a,
	0x2c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x69, 0x6c, 0x6c, 0x44, 0x6f, 0x77,
	0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x17, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x12, 0x56, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x4e,
	0x0a, 0x0a, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x09, 0x61, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x30,
	0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6b,
	0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x34, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x6a, 0x0a, 0x14, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x12, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0xc9, 0x01, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x69,
	0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x81, 0x05,
	0x0a, 0x1d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x44,
	0x72, 0x69, 0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xa8, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0xc2, 0xb8, 0x02, 0x1a,
	0x0a, 0x18, 0x67, 0x65, 0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xbe, 0x01, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x44, 0x72, 0x69, 0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x53, 0x75, 0x62, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x69,
	0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x53, 0x75, 0x62, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x72, 0x69, 0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x53, 0x75, 0x62, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0xc2, 0xb8, 0x02, 0x1c, 0x0a,
	0x1a, 0x67, 0x65, 0x74, 0x20, 0x64, 0x72, 0x69, 0x6c, 0x6c, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x20,
	0x73, 0x75, 0x62, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0xf3, 0x01, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x52, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x69, 0x6c, 0x6c, 0x44,
	0x6f, 0x77, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x53, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x72,
	0x69, 0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0xc2, 0xb8, 0x02, 0x27, 0x0a, 0x25, 0x67, 0x65, 0x74, 0x20,
	0x64, 0x72, 0x69, 0x6c, 0x6c, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_rawDescOnce sync.Once
	file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_rawDescData = file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_rawDesc
)

func file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_rawDescData)
	})
	return file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_rawDescData
}

var file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_goTypes = []any{
	(*GetErrorStatsRequest)(nil),                          // 0: com.coralogixapis.service_catalog.v1.GetErrorStatsRequest
	(*GetErrorStatsResponse)(nil),                         // 1: com.coralogixapis.service_catalog.v1.GetErrorStatsResponse
	(*DrillDownSubFiltersRequest)(nil),                    // 2: com.coralogixapis.service_catalog.v1.DrillDownSubFiltersRequest
	(*DrillDownSubFilterResponse)(nil),                    // 3: com.coralogixapis.service_catalog.v1.DrillDownSubFilterResponse
	(*GetServiceErrorTrackingDrillDownGraphRequest)(nil),  // 4: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingDrillDownGraphRequest
	(*GetServiceErrorTrackingDrillDownGraphResponse)(nil), // 5: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingDrillDownGraphResponse
	(*v2.TimeRange)(nil),                                  // 6: com.coralogixapis.apm.common.v2.TimeRange
	(*wrapperspb.StringValue)(nil),                        // 7: google.protobuf.StringValue
	(*ApmFilter)(nil),                                     // 8: com.coralogix.catalog.v1.ApmFilter
	(ErrorMessageSource)(0),                               // 9: com.coralogixapis.service_catalog.v1.ErrorMessageSource
	(ErrorDataSource)(0),                                  // 10: com.coralogixapis.service_catalog.v1.ErrorDataSource
	(SpanKind)(0),                                         // 11: com.coralogix.catalog.v1.SpanKind
	(ApmSource)(0),                                        // 12: com.coralogixapis.service_catalog.v1.ApmSource
	(*UnitValue)(nil),                                     // 13: com.coralogixapis.service_catalog.v1.UnitValue
	(*common.QueryInfo)(nil),                              // 14: com.coralogixapis.apm.common.v2.QueryInfo
	(GroupBy)(0),                                          // 15: com.coralogixapis.service_catalog.v1.GroupBy
	(*wrapperspb.UInt64Value)(nil),                        // 16: google.protobuf.UInt64Value
	(*RepeatedLineChart)(nil),                             // 17: com.coralogixapis.service_catalog.v1.RepeatedLineChart
}
var file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_depIdxs = []int32{
	6,  // 0: com.coralogixapis.service_catalog.v1.GetErrorStatsRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	7,  // 1: com.coralogixapis.service_catalog.v1.GetErrorStatsRequest.service_name:type_name -> google.protobuf.StringValue
	8,  // 2: com.coralogixapis.service_catalog.v1.GetErrorStatsRequest.service_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	7,  // 3: com.coralogixapis.service_catalog.v1.GetErrorStatsRequest.status_code:type_name -> google.protobuf.StringValue
	9,  // 4: com.coralogixapis.service_catalog.v1.GetErrorStatsRequest.error_message_source:type_name -> com.coralogixapis.service_catalog.v1.ErrorMessageSource
	10, // 5: com.coralogixapis.service_catalog.v1.GetErrorStatsRequest.data_source:type_name -> com.coralogixapis.service_catalog.v1.ErrorDataSource
	7,  // 6: com.coralogixapis.service_catalog.v1.GetErrorStatsRequest.operations:type_name -> google.protobuf.StringValue
	7,  // 7: com.coralogixapis.service_catalog.v1.GetErrorStatsRequest.method:type_name -> google.protobuf.StringValue
	11, // 8: com.coralogixapis.service_catalog.v1.GetErrorStatsRequest.operation_span_kinds:type_name -> com.coralogix.catalog.v1.SpanKind
	12, // 9: com.coralogixapis.service_catalog.v1.GetErrorStatsRequest.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	13, // 10: com.coralogixapis.service_catalog.v1.GetErrorStatsResponse.first_appearance:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	13, // 11: com.coralogixapis.service_catalog.v1.GetErrorStatsResponse.last_appearance:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	13, // 12: com.coralogixapis.service_catalog.v1.GetErrorStatsResponse.p95_latency:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	13, // 13: com.coralogixapis.service_catalog.v1.GetErrorStatsResponse.p99_latency:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	13, // 14: com.coralogixapis.service_catalog.v1.GetErrorStatsResponse.error_amount:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	13, // 15: com.coralogixapis.service_catalog.v1.GetErrorStatsResponse.errors_percentage:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	6,  // 16: com.coralogixapis.service_catalog.v1.DrillDownSubFiltersRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	7,  // 17: com.coralogixapis.service_catalog.v1.DrillDownSubFiltersRequest.service_name:type_name -> google.protobuf.StringValue
	8,  // 18: com.coralogixapis.service_catalog.v1.DrillDownSubFiltersRequest.service_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	11, // 19: com.coralogixapis.service_catalog.v1.DrillDownSubFiltersRequest.operation_span_kinds:type_name -> com.coralogix.catalog.v1.SpanKind
	7,  // 20: com.coralogixapis.service_catalog.v1.DrillDownSubFiltersRequest.status_code:type_name -> google.protobuf.StringValue
	9,  // 21: com.coralogixapis.service_catalog.v1.DrillDownSubFiltersRequest.error_message_source:type_name -> com.coralogixapis.service_catalog.v1.ErrorMessageSource
	10, // 22: com.coralogixapis.service_catalog.v1.DrillDownSubFiltersRequest.data_source:type_name -> com.coralogixapis.service_catalog.v1.ErrorDataSource
	8,  // 23: com.coralogixapis.service_catalog.v1.DrillDownSubFilterResponse.operation:type_name -> com.coralogix.catalog.v1.ApmFilter
	14, // 24: com.coralogixapis.service_catalog.v1.DrillDownSubFilterResponse.queriesInfo:type_name -> com.coralogixapis.apm.common.v2.QueryInfo
	6,  // 25: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingDrillDownGraphRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	7,  // 26: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingDrillDownGraphRequest.service_name:type_name -> google.protobuf.StringValue
	8,  // 27: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingDrillDownGraphRequest.service_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	15, // 28: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingDrillDownGraphRequest.group_by:type_name -> com.coralogixapis.service_catalog.v1.GroupBy
	10, // 29: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingDrillDownGraphRequest.data_source:type_name -> com.coralogixapis.service_catalog.v1.ErrorDataSource
	11, // 30: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingDrillDownGraphRequest.operation_span_kinds:type_name -> com.coralogix.catalog.v1.SpanKind
	12, // 31: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingDrillDownGraphRequest.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	16, // 32: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingDrillDownGraphRequest.topk:type_name -> google.protobuf.UInt64Value
	7,  // 33: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingDrillDownGraphRequest.status_code:type_name -> google.protobuf.StringValue
	7,  // 34: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingDrillDownGraphRequest.method:type_name -> google.protobuf.StringValue
	9,  // 35: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingDrillDownGraphRequest.error_message_source:type_name -> com.coralogixapis.service_catalog.v1.ErrorMessageSource
	17, // 36: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingDrillDownGraphResponse.operations:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	16, // 37: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingDrillDownGraphResponse.total_amount:type_name -> google.protobuf.UInt64Value
	0,  // 38: com.coralogixapis.service_catalog.v1.ErrorTrackingDrillDownService.GetErrorStats:input_type -> com.coralogixapis.service_catalog.v1.GetErrorStatsRequest
	2,  // 39: com.coralogixapis.service_catalog.v1.ErrorTrackingDrillDownService.GetDrillDownSubFilters:input_type -> com.coralogixapis.service_catalog.v1.DrillDownSubFiltersRequest
	4,  // 40: com.coralogixapis.service_catalog.v1.ErrorTrackingDrillDownService.GetDrillDownOperationsGraph:input_type -> com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingDrillDownGraphRequest
	1,  // 41: com.coralogixapis.service_catalog.v1.ErrorTrackingDrillDownService.GetErrorStats:output_type -> com.coralogixapis.service_catalog.v1.GetErrorStatsResponse
	3,  // 42: com.coralogixapis.service_catalog.v1.ErrorTrackingDrillDownService.GetDrillDownSubFilters:output_type -> com.coralogixapis.service_catalog.v1.DrillDownSubFilterResponse
	5,  // 43: com.coralogixapis.service_catalog.v1.ErrorTrackingDrillDownService.GetDrillDownOperationsGraph:output_type -> com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingDrillDownGraphResponse
	41, // [41:44] is the sub-list for method output_type
	38, // [38:41] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() {
	file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_init()
}
func file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_init() {
	if File_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto != nil {
		return
	}
	file_com_coralogix_catalog_v1_common_proto_init()
	file_com_coralogix_catalog_v1_span_kind_proto_init()
	file_com_coralogixapis_service_catalog_v1_apm_source_proto_init()
	file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_shared_proto_init()
	file_com_coralogixapis_service_catalog_v1_repeated_widgets_proto_init()
	file_com_coralogixapis_service_catalog_v1_transaction_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto = out.File
	file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_rawDesc = nil
	file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_goTypes = nil
	file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_drill_down_service_proto_depIdxs = nil
}
