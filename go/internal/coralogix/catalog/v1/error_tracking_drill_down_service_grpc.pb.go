// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: com/coralogixapis/service_catalog/v1/error-tracking/error_tracking_drill_down_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ErrorTrackingDrillDownService_GetErrorStats_FullMethodName               = "/com.coralogixapis.service_catalog.v1.ErrorTrackingDrillDownService/GetErrorStats"
	ErrorTrackingDrillDownService_GetDrillDownSubFilters_FullMethodName      = "/com.coralogixapis.service_catalog.v1.ErrorTrackingDrillDownService/GetDrillDownSubFilters"
	ErrorTrackingDrillDownService_GetDrillDownOperationsGraph_FullMethodName = "/com.coralogixapis.service_catalog.v1.ErrorTrackingDrillDownService/GetDrillDownOperationsGraph"
)

// ErrorTrackingDrillDownServiceClient is the client API for ErrorTrackingDrillDownService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ErrorTrackingDrillDownServiceClient interface {
	GetErrorStats(ctx context.Context, in *GetErrorStatsRequest, opts ...grpc.CallOption) (*GetErrorStatsResponse, error)
	GetDrillDownSubFilters(ctx context.Context, in *DrillDownSubFiltersRequest, opts ...grpc.CallOption) (*DrillDownSubFilterResponse, error)
	GetDrillDownOperationsGraph(ctx context.Context, in *GetServiceErrorTrackingDrillDownGraphRequest, opts ...grpc.CallOption) (*GetServiceErrorTrackingDrillDownGraphResponse, error)
}

type errorTrackingDrillDownServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewErrorTrackingDrillDownServiceClient(cc grpc.ClientConnInterface) ErrorTrackingDrillDownServiceClient {
	return &errorTrackingDrillDownServiceClient{cc}
}

func (c *errorTrackingDrillDownServiceClient) GetErrorStats(ctx context.Context, in *GetErrorStatsRequest, opts ...grpc.CallOption) (*GetErrorStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetErrorStatsResponse)
	err := c.cc.Invoke(ctx, ErrorTrackingDrillDownService_GetErrorStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errorTrackingDrillDownServiceClient) GetDrillDownSubFilters(ctx context.Context, in *DrillDownSubFiltersRequest, opts ...grpc.CallOption) (*DrillDownSubFilterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DrillDownSubFilterResponse)
	err := c.cc.Invoke(ctx, ErrorTrackingDrillDownService_GetDrillDownSubFilters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errorTrackingDrillDownServiceClient) GetDrillDownOperationsGraph(ctx context.Context, in *GetServiceErrorTrackingDrillDownGraphRequest, opts ...grpc.CallOption) (*GetServiceErrorTrackingDrillDownGraphResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServiceErrorTrackingDrillDownGraphResponse)
	err := c.cc.Invoke(ctx, ErrorTrackingDrillDownService_GetDrillDownOperationsGraph_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ErrorTrackingDrillDownServiceServer is the server API for ErrorTrackingDrillDownService service.
// All implementations must embed UnimplementedErrorTrackingDrillDownServiceServer
// for forward compatibility.
type ErrorTrackingDrillDownServiceServer interface {
	GetErrorStats(context.Context, *GetErrorStatsRequest) (*GetErrorStatsResponse, error)
	GetDrillDownSubFilters(context.Context, *DrillDownSubFiltersRequest) (*DrillDownSubFilterResponse, error)
	GetDrillDownOperationsGraph(context.Context, *GetServiceErrorTrackingDrillDownGraphRequest) (*GetServiceErrorTrackingDrillDownGraphResponse, error)
	mustEmbedUnimplementedErrorTrackingDrillDownServiceServer()
}

// UnimplementedErrorTrackingDrillDownServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedErrorTrackingDrillDownServiceServer struct{}

func (UnimplementedErrorTrackingDrillDownServiceServer) GetErrorStats(context.Context, *GetErrorStatsRequest) (*GetErrorStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetErrorStats not implemented")
}
func (UnimplementedErrorTrackingDrillDownServiceServer) GetDrillDownSubFilters(context.Context, *DrillDownSubFiltersRequest) (*DrillDownSubFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrillDownSubFilters not implemented")
}
func (UnimplementedErrorTrackingDrillDownServiceServer) GetDrillDownOperationsGraph(context.Context, *GetServiceErrorTrackingDrillDownGraphRequest) (*GetServiceErrorTrackingDrillDownGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrillDownOperationsGraph not implemented")
}
func (UnimplementedErrorTrackingDrillDownServiceServer) mustEmbedUnimplementedErrorTrackingDrillDownServiceServer() {
}
func (UnimplementedErrorTrackingDrillDownServiceServer) testEmbeddedByValue() {}

// UnsafeErrorTrackingDrillDownServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ErrorTrackingDrillDownServiceServer will
// result in compilation errors.
type UnsafeErrorTrackingDrillDownServiceServer interface {
	mustEmbedUnimplementedErrorTrackingDrillDownServiceServer()
}

func RegisterErrorTrackingDrillDownServiceServer(s grpc.ServiceRegistrar, srv ErrorTrackingDrillDownServiceServer) {
	// If the following call pancis, it indicates UnimplementedErrorTrackingDrillDownServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ErrorTrackingDrillDownService_ServiceDesc, srv)
}

func _ErrorTrackingDrillDownService_GetErrorStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetErrorStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorTrackingDrillDownServiceServer).GetErrorStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErrorTrackingDrillDownService_GetErrorStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorTrackingDrillDownServiceServer).GetErrorStats(ctx, req.(*GetErrorStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErrorTrackingDrillDownService_GetDrillDownSubFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrillDownSubFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorTrackingDrillDownServiceServer).GetDrillDownSubFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErrorTrackingDrillDownService_GetDrillDownSubFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorTrackingDrillDownServiceServer).GetDrillDownSubFilters(ctx, req.(*DrillDownSubFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErrorTrackingDrillDownService_GetDrillDownOperationsGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceErrorTrackingDrillDownGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorTrackingDrillDownServiceServer).GetDrillDownOperationsGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErrorTrackingDrillDownService_GetDrillDownOperationsGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorTrackingDrillDownServiceServer).GetDrillDownOperationsGraph(ctx, req.(*GetServiceErrorTrackingDrillDownGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ErrorTrackingDrillDownService_ServiceDesc is the grpc.ServiceDesc for ErrorTrackingDrillDownService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ErrorTrackingDrillDownService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogixapis.service_catalog.v1.ErrorTrackingDrillDownService",
	HandlerType: (*ErrorTrackingDrillDownServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetErrorStats",
			Handler:    _ErrorTrackingDrillDownService_GetErrorStats_Handler,
		},
		{
			MethodName: "GetDrillDownSubFilters",
			Handler:    _ErrorTrackingDrillDownService_GetDrillDownSubFilters_Handler,
		},
		{
			MethodName: "GetDrillDownOperationsGraph",
			Handler:    _ErrorTrackingDrillDownService_GetDrillDownOperationsGraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogixapis/service_catalog/v1/error-tracking/error_tracking_drill_down_service.proto",
}
