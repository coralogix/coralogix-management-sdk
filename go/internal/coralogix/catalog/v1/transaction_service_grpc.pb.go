// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: com/coralogixapis/service_catalog/v1/transaction_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionService_GetTransactionsMetricStream_FullMethodName        = "/com.coralogixapis.service_catalog.v1.TransactionService/GetTransactionsMetricStream"
	TransactionService_GetTransaction_FullMethodName                     = "/com.coralogixapis.service_catalog.v1.TransactionService/GetTransaction"
	TransactionService_ListTransactions_FullMethodName                   = "/com.coralogixapis.service_catalog.v1.TransactionService/ListTransactions"
	TransactionService_GetTransactionMetricStream_FullMethodName         = "/com.coralogixapis.service_catalog.v1.TransactionService/GetTransactionMetricStream"
	TransactionService_GetTransactionsResponseTime_FullMethodName        = "/com.coralogixapis.service_catalog.v1.TransactionService/GetTransactionsResponseTime"
	TransactionService_GetTransactionsErrors_FullMethodName              = "/com.coralogixapis.service_catalog.v1.TransactionService/GetTransactionsErrors"
	TransactionService_GetTransactionsThroughput_FullMethodName          = "/com.coralogixapis.service_catalog.v1.TransactionService/GetTransactionsThroughput"
	TransactionService_GetExampleTraceID_FullMethodName                  = "/com.coralogixapis.service_catalog.v1.TransactionService/GetExampleTraceID"
	TransactionService_ListSegments_FullMethodName                       = "/com.coralogixapis.service_catalog.v1.TransactionService/ListSegments"
	TransactionService_ListSegmentsBreakdown_FullMethodName              = "/com.coralogixapis.service_catalog.v1.TransactionService/ListSegmentsBreakdown"
	TransactionService_GetTransactionSegmentsResponseTime_FullMethodName = "/com.coralogixapis.service_catalog.v1.TransactionService/GetTransactionSegmentsResponseTime"
	TransactionService_GetTransactionSegmentsError_FullMethodName        = "/com.coralogixapis.service_catalog.v1.TransactionService/GetTransactionSegmentsError"
	TransactionService_GetTransactionThroughput_FullMethodName           = "/com.coralogixapis.service_catalog.v1.TransactionService/GetTransactionThroughput"
	TransactionService_GetSegmentPercentiles_FullMethodName              = "/com.coralogixapis.service_catalog.v1.TransactionService/GetSegmentPercentiles"
	TransactionService_GetSegmentPercentilesGraph_FullMethodName         = "/com.coralogixapis.service_catalog.v1.TransactionService/GetSegmentPercentilesGraph"
	TransactionService_GetSegmentRequestsAndErrors_FullMethodName        = "/com.coralogixapis.service_catalog.v1.TransactionService/GetSegmentRequestsAndErrors"
	TransactionService_GetSegmentStats_FullMethodName                    = "/com.coralogixapis.service_catalog.v1.TransactionService/GetSegmentStats"
	TransactionService_GetTransactionsErrorsStream_FullMethodName        = "/com.coralogixapis.service_catalog.v1.TransactionService/GetTransactionsErrorsStream"
	TransactionService_GetTransactionSegmentsErrorStream_FullMethodName  = "/com.coralogixapis.service_catalog.v1.TransactionService/GetTransactionSegmentsErrorStream"
	TransactionService_GetTransactionLatencyGraphStream_FullMethodName   = "/com.coralogixapis.service_catalog.v1.TransactionService/GetTransactionLatencyGraphStream"
	TransactionService_GetTransactionsTimeConsumingGraph_FullMethodName  = "/com.coralogixapis.service_catalog.v1.TransactionService/GetTransactionsTimeConsumingGraph"
)

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionServiceClient interface {
	GetTransactionsMetricStream(ctx context.Context, in *GetTransactionsMetricStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetTransactionsMetricStreamResponse], error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error)
	GetTransactionMetricStream(ctx context.Context, in *GetTransactionMetricStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetTransactionMetricStreamResponse], error)
	GetTransactionsResponseTime(ctx context.Context, in *GetTransactionsResponseTimeRequest, opts ...grpc.CallOption) (*GetTransactionsResponseTimeResponse, error)
	GetTransactionsErrors(ctx context.Context, in *GetTransactionsErrorsRequest, opts ...grpc.CallOption) (*GetTransactionsErrorsResponse, error)
	GetTransactionsThroughput(ctx context.Context, in *GetTransactionsThroughputRequest, opts ...grpc.CallOption) (*GetTransactionsThroughputResponse, error)
	GetExampleTraceID(ctx context.Context, in *GetExampleTraceIDRequest, opts ...grpc.CallOption) (*GetExampleTraceIDResponse, error)
	ListSegments(ctx context.Context, in *ListSegmentsRequest, opts ...grpc.CallOption) (*ListSegmentsResponse, error)
	ListSegmentsBreakdown(ctx context.Context, in *ListSegmentsBreakdownRequest, opts ...grpc.CallOption) (*ListSegmentsBreakdownResponse, error)
	GetTransactionSegmentsResponseTime(ctx context.Context, in *GetTransactionSegmentsResponseTimeRequest, opts ...grpc.CallOption) (*GetTransactionSegmentsResponseTimeResponse, error)
	GetTransactionSegmentsError(ctx context.Context, in *GetTransactionSegmentsErrorRequest, opts ...grpc.CallOption) (*GetTransactionSegmentsErrorResponse, error)
	GetTransactionThroughput(ctx context.Context, in *GetTransactionThroughputRequest, opts ...grpc.CallOption) (*GetTransactionThroughputResponse, error)
	GetSegmentPercentiles(ctx context.Context, in *GetSegmentPercentilesRequest, opts ...grpc.CallOption) (*GetSegmentPercentilesResponse, error)
	GetSegmentPercentilesGraph(ctx context.Context, in *GetSegmentPercentilesGraphRequest, opts ...grpc.CallOption) (*GetSegmentPercentilesGraphResponse, error)
	GetSegmentRequestsAndErrors(ctx context.Context, in *GetSegmentRequestsAndErrorsRequest, opts ...grpc.CallOption) (*GetSegmentRequestsAndErrorsResponse, error)
	GetSegmentStats(ctx context.Context, in *GetSegmentStatsRequest, opts ...grpc.CallOption) (*GetSegmentStatsResponse, error)
	GetTransactionsErrorsStream(ctx context.Context, in *GetTransactionsErrorsStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetTransactionsErrorsStreamResponse], error)
	GetTransactionSegmentsErrorStream(ctx context.Context, in *GetTransactionSegmentsErrorStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetTransactionSegmentsErrorStreamResponse], error)
	GetTransactionLatencyGraphStream(ctx context.Context, in *GetTransactionLatencyGraphStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetTransactionLatencyGraphStreamResponse], error)
	GetTransactionsTimeConsumingGraph(ctx context.Context, in *GetTransactionsTimeConsumingGraphRequest, opts ...grpc.CallOption) (*GetTransactionsTimeConsumingGraphResponse, error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) GetTransactionsMetricStream(ctx context.Context, in *GetTransactionsMetricStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetTransactionsMetricStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransactionService_ServiceDesc.Streams[0], TransactionService_GetTransactionsMetricStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetTransactionsMetricStreamRequest, GetTransactionsMetricStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionService_GetTransactionsMetricStreamClient = grpc.ServerStreamingClient[GetTransactionsMetricStreamResponse]

func (c *transactionServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTransactionsResponse)
	err := c.cc.Invoke(ctx, TransactionService_ListTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactionMetricStream(ctx context.Context, in *GetTransactionMetricStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetTransactionMetricStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransactionService_ServiceDesc.Streams[1], TransactionService_GetTransactionMetricStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetTransactionMetricStreamRequest, GetTransactionMetricStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionService_GetTransactionMetricStreamClient = grpc.ServerStreamingClient[GetTransactionMetricStreamResponse]

func (c *transactionServiceClient) GetTransactionsResponseTime(ctx context.Context, in *GetTransactionsResponseTimeRequest, opts ...grpc.CallOption) (*GetTransactionsResponseTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionsResponseTimeResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetTransactionsResponseTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactionsErrors(ctx context.Context, in *GetTransactionsErrorsRequest, opts ...grpc.CallOption) (*GetTransactionsErrorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionsErrorsResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetTransactionsErrors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactionsThroughput(ctx context.Context, in *GetTransactionsThroughputRequest, opts ...grpc.CallOption) (*GetTransactionsThroughputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionsThroughputResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetTransactionsThroughput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetExampleTraceID(ctx context.Context, in *GetExampleTraceIDRequest, opts ...grpc.CallOption) (*GetExampleTraceIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExampleTraceIDResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetExampleTraceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListSegments(ctx context.Context, in *ListSegmentsRequest, opts ...grpc.CallOption) (*ListSegmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSegmentsResponse)
	err := c.cc.Invoke(ctx, TransactionService_ListSegments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListSegmentsBreakdown(ctx context.Context, in *ListSegmentsBreakdownRequest, opts ...grpc.CallOption) (*ListSegmentsBreakdownResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSegmentsBreakdownResponse)
	err := c.cc.Invoke(ctx, TransactionService_ListSegmentsBreakdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactionSegmentsResponseTime(ctx context.Context, in *GetTransactionSegmentsResponseTimeRequest, opts ...grpc.CallOption) (*GetTransactionSegmentsResponseTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionSegmentsResponseTimeResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetTransactionSegmentsResponseTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactionSegmentsError(ctx context.Context, in *GetTransactionSegmentsErrorRequest, opts ...grpc.CallOption) (*GetTransactionSegmentsErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionSegmentsErrorResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetTransactionSegmentsError_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactionThroughput(ctx context.Context, in *GetTransactionThroughputRequest, opts ...grpc.CallOption) (*GetTransactionThroughputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionThroughputResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetTransactionThroughput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetSegmentPercentiles(ctx context.Context, in *GetSegmentPercentilesRequest, opts ...grpc.CallOption) (*GetSegmentPercentilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSegmentPercentilesResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetSegmentPercentiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetSegmentPercentilesGraph(ctx context.Context, in *GetSegmentPercentilesGraphRequest, opts ...grpc.CallOption) (*GetSegmentPercentilesGraphResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSegmentPercentilesGraphResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetSegmentPercentilesGraph_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetSegmentRequestsAndErrors(ctx context.Context, in *GetSegmentRequestsAndErrorsRequest, opts ...grpc.CallOption) (*GetSegmentRequestsAndErrorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSegmentRequestsAndErrorsResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetSegmentRequestsAndErrors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetSegmentStats(ctx context.Context, in *GetSegmentStatsRequest, opts ...grpc.CallOption) (*GetSegmentStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSegmentStatsResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetSegmentStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactionsErrorsStream(ctx context.Context, in *GetTransactionsErrorsStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetTransactionsErrorsStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransactionService_ServiceDesc.Streams[2], TransactionService_GetTransactionsErrorsStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetTransactionsErrorsStreamRequest, GetTransactionsErrorsStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionService_GetTransactionsErrorsStreamClient = grpc.ServerStreamingClient[GetTransactionsErrorsStreamResponse]

func (c *transactionServiceClient) GetTransactionSegmentsErrorStream(ctx context.Context, in *GetTransactionSegmentsErrorStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetTransactionSegmentsErrorStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransactionService_ServiceDesc.Streams[3], TransactionService_GetTransactionSegmentsErrorStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetTransactionSegmentsErrorStreamRequest, GetTransactionSegmentsErrorStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionService_GetTransactionSegmentsErrorStreamClient = grpc.ServerStreamingClient[GetTransactionSegmentsErrorStreamResponse]

func (c *transactionServiceClient) GetTransactionLatencyGraphStream(ctx context.Context, in *GetTransactionLatencyGraphStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetTransactionLatencyGraphStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransactionService_ServiceDesc.Streams[4], TransactionService_GetTransactionLatencyGraphStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetTransactionLatencyGraphStreamRequest, GetTransactionLatencyGraphStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionService_GetTransactionLatencyGraphStreamClient = grpc.ServerStreamingClient[GetTransactionLatencyGraphStreamResponse]

func (c *transactionServiceClient) GetTransactionsTimeConsumingGraph(ctx context.Context, in *GetTransactionsTimeConsumingGraphRequest, opts ...grpc.CallOption) (*GetTransactionsTimeConsumingGraphResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionsTimeConsumingGraphResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetTransactionsTimeConsumingGraph_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
// All implementations must embed UnimplementedTransactionServiceServer
// for forward compatibility.
type TransactionServiceServer interface {
	GetTransactionsMetricStream(*GetTransactionsMetricStreamRequest, grpc.ServerStreamingServer[GetTransactionsMetricStreamResponse]) error
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error)
	GetTransactionMetricStream(*GetTransactionMetricStreamRequest, grpc.ServerStreamingServer[GetTransactionMetricStreamResponse]) error
	GetTransactionsResponseTime(context.Context, *GetTransactionsResponseTimeRequest) (*GetTransactionsResponseTimeResponse, error)
	GetTransactionsErrors(context.Context, *GetTransactionsErrorsRequest) (*GetTransactionsErrorsResponse, error)
	GetTransactionsThroughput(context.Context, *GetTransactionsThroughputRequest) (*GetTransactionsThroughputResponse, error)
	GetExampleTraceID(context.Context, *GetExampleTraceIDRequest) (*GetExampleTraceIDResponse, error)
	ListSegments(context.Context, *ListSegmentsRequest) (*ListSegmentsResponse, error)
	ListSegmentsBreakdown(context.Context, *ListSegmentsBreakdownRequest) (*ListSegmentsBreakdownResponse, error)
	GetTransactionSegmentsResponseTime(context.Context, *GetTransactionSegmentsResponseTimeRequest) (*GetTransactionSegmentsResponseTimeResponse, error)
	GetTransactionSegmentsError(context.Context, *GetTransactionSegmentsErrorRequest) (*GetTransactionSegmentsErrorResponse, error)
	GetTransactionThroughput(context.Context, *GetTransactionThroughputRequest) (*GetTransactionThroughputResponse, error)
	GetSegmentPercentiles(context.Context, *GetSegmentPercentilesRequest) (*GetSegmentPercentilesResponse, error)
	GetSegmentPercentilesGraph(context.Context, *GetSegmentPercentilesGraphRequest) (*GetSegmentPercentilesGraphResponse, error)
	GetSegmentRequestsAndErrors(context.Context, *GetSegmentRequestsAndErrorsRequest) (*GetSegmentRequestsAndErrorsResponse, error)
	GetSegmentStats(context.Context, *GetSegmentStatsRequest) (*GetSegmentStatsResponse, error)
	GetTransactionsErrorsStream(*GetTransactionsErrorsStreamRequest, grpc.ServerStreamingServer[GetTransactionsErrorsStreamResponse]) error
	GetTransactionSegmentsErrorStream(*GetTransactionSegmentsErrorStreamRequest, grpc.ServerStreamingServer[GetTransactionSegmentsErrorStreamResponse]) error
	GetTransactionLatencyGraphStream(*GetTransactionLatencyGraphStreamRequest, grpc.ServerStreamingServer[GetTransactionLatencyGraphStreamResponse]) error
	GetTransactionsTimeConsumingGraph(context.Context, *GetTransactionsTimeConsumingGraphRequest) (*GetTransactionsTimeConsumingGraphResponse, error)
	mustEmbedUnimplementedTransactionServiceServer()
}

// UnimplementedTransactionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionServiceServer struct{}

func (UnimplementedTransactionServiceServer) GetTransactionsMetricStream(*GetTransactionsMetricStreamRequest, grpc.ServerStreamingServer[GetTransactionsMetricStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetTransactionsMetricStream not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransactionMetricStream(*GetTransactionMetricStreamRequest, grpc.ServerStreamingServer[GetTransactionMetricStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetTransactionMetricStream not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransactionsResponseTime(context.Context, *GetTransactionsResponseTimeRequest) (*GetTransactionsResponseTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsResponseTime not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransactionsErrors(context.Context, *GetTransactionsErrorsRequest) (*GetTransactionsErrorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsErrors not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransactionsThroughput(context.Context, *GetTransactionsThroughputRequest) (*GetTransactionsThroughputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsThroughput not implemented")
}
func (UnimplementedTransactionServiceServer) GetExampleTraceID(context.Context, *GetExampleTraceIDRequest) (*GetExampleTraceIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExampleTraceID not implemented")
}
func (UnimplementedTransactionServiceServer) ListSegments(context.Context, *ListSegmentsRequest) (*ListSegmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSegments not implemented")
}
func (UnimplementedTransactionServiceServer) ListSegmentsBreakdown(context.Context, *ListSegmentsBreakdownRequest) (*ListSegmentsBreakdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSegmentsBreakdown not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransactionSegmentsResponseTime(context.Context, *GetTransactionSegmentsResponseTimeRequest) (*GetTransactionSegmentsResponseTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionSegmentsResponseTime not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransactionSegmentsError(context.Context, *GetTransactionSegmentsErrorRequest) (*GetTransactionSegmentsErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionSegmentsError not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransactionThroughput(context.Context, *GetTransactionThroughputRequest) (*GetTransactionThroughputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionThroughput not implemented")
}
func (UnimplementedTransactionServiceServer) GetSegmentPercentiles(context.Context, *GetSegmentPercentilesRequest) (*GetSegmentPercentilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentPercentiles not implemented")
}
func (UnimplementedTransactionServiceServer) GetSegmentPercentilesGraph(context.Context, *GetSegmentPercentilesGraphRequest) (*GetSegmentPercentilesGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentPercentilesGraph not implemented")
}
func (UnimplementedTransactionServiceServer) GetSegmentRequestsAndErrors(context.Context, *GetSegmentRequestsAndErrorsRequest) (*GetSegmentRequestsAndErrorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentRequestsAndErrors not implemented")
}
func (UnimplementedTransactionServiceServer) GetSegmentStats(context.Context, *GetSegmentStatsRequest) (*GetSegmentStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentStats not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransactionsErrorsStream(*GetTransactionsErrorsStreamRequest, grpc.ServerStreamingServer[GetTransactionsErrorsStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetTransactionsErrorsStream not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransactionSegmentsErrorStream(*GetTransactionSegmentsErrorStreamRequest, grpc.ServerStreamingServer[GetTransactionSegmentsErrorStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetTransactionSegmentsErrorStream not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransactionLatencyGraphStream(*GetTransactionLatencyGraphStreamRequest, grpc.ServerStreamingServer[GetTransactionLatencyGraphStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetTransactionLatencyGraphStream not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransactionsTimeConsumingGraph(context.Context, *GetTransactionsTimeConsumingGraphRequest) (*GetTransactionsTimeConsumingGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsTimeConsumingGraph not implemented")
}
func (UnimplementedTransactionServiceServer) mustEmbedUnimplementedTransactionServiceServer() {}
func (UnimplementedTransactionServiceServer) testEmbeddedByValue()                            {}

// UnsafeTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServiceServer will
// result in compilation errors.
type UnsafeTransactionServiceServer interface {
	mustEmbedUnimplementedTransactionServiceServer()
}

func RegisterTransactionServiceServer(s grpc.ServiceRegistrar, srv TransactionServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionService_ServiceDesc, srv)
}

func _TransactionService_GetTransactionsMetricStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTransactionsMetricStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServiceServer).GetTransactionsMetricStream(m, &grpc.GenericServerStream[GetTransactionsMetricStreamRequest, GetTransactionsMetricStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionService_GetTransactionsMetricStreamServer = grpc.ServerStreamingServer[GetTransactionsMetricStreamResponse]

func _TransactionService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_ListTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListTransactions(ctx, req.(*ListTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactionMetricStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTransactionMetricStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServiceServer).GetTransactionMetricStream(m, &grpc.GenericServerStream[GetTransactionMetricStreamRequest, GetTransactionMetricStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionService_GetTransactionMetricStreamServer = grpc.ServerStreamingServer[GetTransactionMetricStreamResponse]

func _TransactionService_GetTransactionsResponseTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsResponseTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionsResponseTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetTransactionsResponseTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionsResponseTime(ctx, req.(*GetTransactionsResponseTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactionsErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsErrorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionsErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetTransactionsErrors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionsErrors(ctx, req.(*GetTransactionsErrorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactionsThroughput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsThroughputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionsThroughput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetTransactionsThroughput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionsThroughput(ctx, req.(*GetTransactionsThroughputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetExampleTraceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExampleTraceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetExampleTraceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetExampleTraceID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetExampleTraceID(ctx, req.(*GetExampleTraceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_ListSegments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListSegments(ctx, req.(*ListSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListSegmentsBreakdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSegmentsBreakdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListSegmentsBreakdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_ListSegmentsBreakdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListSegmentsBreakdown(ctx, req.(*ListSegmentsBreakdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactionSegmentsResponseTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionSegmentsResponseTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionSegmentsResponseTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetTransactionSegmentsResponseTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionSegmentsResponseTime(ctx, req.(*GetTransactionSegmentsResponseTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactionSegmentsError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionSegmentsErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionSegmentsError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetTransactionSegmentsError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionSegmentsError(ctx, req.(*GetTransactionSegmentsErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactionThroughput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionThroughputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionThroughput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetTransactionThroughput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionThroughput(ctx, req.(*GetTransactionThroughputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetSegmentPercentiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentPercentilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetSegmentPercentiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetSegmentPercentiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetSegmentPercentiles(ctx, req.(*GetSegmentPercentilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetSegmentPercentilesGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentPercentilesGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetSegmentPercentilesGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetSegmentPercentilesGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetSegmentPercentilesGraph(ctx, req.(*GetSegmentPercentilesGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetSegmentRequestsAndErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentRequestsAndErrorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetSegmentRequestsAndErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetSegmentRequestsAndErrors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetSegmentRequestsAndErrors(ctx, req.(*GetSegmentRequestsAndErrorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetSegmentStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetSegmentStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetSegmentStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetSegmentStats(ctx, req.(*GetSegmentStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactionsErrorsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTransactionsErrorsStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServiceServer).GetTransactionsErrorsStream(m, &grpc.GenericServerStream[GetTransactionsErrorsStreamRequest, GetTransactionsErrorsStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionService_GetTransactionsErrorsStreamServer = grpc.ServerStreamingServer[GetTransactionsErrorsStreamResponse]

func _TransactionService_GetTransactionSegmentsErrorStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTransactionSegmentsErrorStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServiceServer).GetTransactionSegmentsErrorStream(m, &grpc.GenericServerStream[GetTransactionSegmentsErrorStreamRequest, GetTransactionSegmentsErrorStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionService_GetTransactionSegmentsErrorStreamServer = grpc.ServerStreamingServer[GetTransactionSegmentsErrorStreamResponse]

func _TransactionService_GetTransactionLatencyGraphStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTransactionLatencyGraphStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServiceServer).GetTransactionLatencyGraphStream(m, &grpc.GenericServerStream[GetTransactionLatencyGraphStreamRequest, GetTransactionLatencyGraphStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionService_GetTransactionLatencyGraphStreamServer = grpc.ServerStreamingServer[GetTransactionLatencyGraphStreamResponse]

func _TransactionService_GetTransactionsTimeConsumingGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsTimeConsumingGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionsTimeConsumingGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetTransactionsTimeConsumingGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionsTimeConsumingGraph(ctx, req.(*GetTransactionsTimeConsumingGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionService_ServiceDesc is the grpc.ServiceDesc for TransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogixapis.service_catalog.v1.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransaction",
			Handler:    _TransactionService_GetTransaction_Handler,
		},
		{
			MethodName: "ListTransactions",
			Handler:    _TransactionService_ListTransactions_Handler,
		},
		{
			MethodName: "GetTransactionsResponseTime",
			Handler:    _TransactionService_GetTransactionsResponseTime_Handler,
		},
		{
			MethodName: "GetTransactionsErrors",
			Handler:    _TransactionService_GetTransactionsErrors_Handler,
		},
		{
			MethodName: "GetTransactionsThroughput",
			Handler:    _TransactionService_GetTransactionsThroughput_Handler,
		},
		{
			MethodName: "GetExampleTraceID",
			Handler:    _TransactionService_GetExampleTraceID_Handler,
		},
		{
			MethodName: "ListSegments",
			Handler:    _TransactionService_ListSegments_Handler,
		},
		{
			MethodName: "ListSegmentsBreakdown",
			Handler:    _TransactionService_ListSegmentsBreakdown_Handler,
		},
		{
			MethodName: "GetTransactionSegmentsResponseTime",
			Handler:    _TransactionService_GetTransactionSegmentsResponseTime_Handler,
		},
		{
			MethodName: "GetTransactionSegmentsError",
			Handler:    _TransactionService_GetTransactionSegmentsError_Handler,
		},
		{
			MethodName: "GetTransactionThroughput",
			Handler:    _TransactionService_GetTransactionThroughput_Handler,
		},
		{
			MethodName: "GetSegmentPercentiles",
			Handler:    _TransactionService_GetSegmentPercentiles_Handler,
		},
		{
			MethodName: "GetSegmentPercentilesGraph",
			Handler:    _TransactionService_GetSegmentPercentilesGraph_Handler,
		},
		{
			MethodName: "GetSegmentRequestsAndErrors",
			Handler:    _TransactionService_GetSegmentRequestsAndErrors_Handler,
		},
		{
			MethodName: "GetSegmentStats",
			Handler:    _TransactionService_GetSegmentStats_Handler,
		},
		{
			MethodName: "GetTransactionsTimeConsumingGraph",
			Handler:    _TransactionService_GetTransactionsTimeConsumingGraph_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTransactionsMetricStream",
			Handler:       _TransactionService_GetTransactionsMetricStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTransactionMetricStream",
			Handler:       _TransactionService_GetTransactionMetricStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTransactionsErrorsStream",
			Handler:       _TransactionService_GetTransactionsErrorsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTransactionSegmentsErrorStream",
			Handler:       _TransactionService_GetTransactionSegmentsErrorStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTransactionLatencyGraphStream",
			Handler:       _TransactionService_GetTransactionLatencyGraphStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/coralogixapis/service_catalog/v1/transaction_service.proto",
}
