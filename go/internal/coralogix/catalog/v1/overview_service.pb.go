// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: com/coralogixapis/service_catalog/v1/overview_service.proto

package v1

import (
	_ "github.com/coralogix/coralogix-management-sdk/go/internal/coralogix/common/v1"
	v2 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/common/v2"
	v1 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/widgets/v1"
	common "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm_shared/common"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetOverviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName *wrapperspb.StringValue        `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	TimeRange   *v2.TimeRange                  `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Filters     map[string]*structpb.ListValue `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ApmSource   ApmSource                      `protobuf:"varint,4,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
}

func (x *GetOverviewRequest) Reset() {
	*x = GetOverviewRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_overview_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOverviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOverviewRequest) ProtoMessage() {}

func (x *GetOverviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_overview_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOverviewRequest.ProtoReflect.Descriptor instead.
func (*GetOverviewRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_overview_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetOverviewRequest) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *GetOverviewRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetOverviewRequest) GetFilters() map[string]*structpb.ListValue {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetOverviewRequest) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

type GetOverviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slo                               *v1.MultiStat      `protobuf:"bytes,1,opt,name=slo,proto3" json:"slo,omitempty"`
	AvgLatency                        *v1.Stat           `protobuf:"bytes,2,opt,name=avg_latency,json=avgLatency,proto3" json:"avg_latency,omitempty"`
	Throughput                        *v1.Stat           `protobuf:"bytes,3,opt,name=throughput,proto3" json:"throughput,omitempty"`
	ErrorPercentage                   *v1.Stat           `protobuf:"bytes,4,opt,name=error_percentage,json=errorPercentage,proto3" json:"error_percentage,omitempty"`
	RequestsAndErrors                 []*v1.LineChart    `protobuf:"bytes,5,rep,name=requests_and_errors,json=requestsAndErrors,proto3" json:"requests_and_errors,omitempty"`
	Errors                            []*v1.LineChart    `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
	ErrorRate                         []*v1.LineChart    `protobuf:"bytes,7,rep,name=error_rate,json=errorRate,proto3" json:"error_rate,omitempty"`
	ApdexScore                        *v1.LineChart      `protobuf:"bytes,8,opt,name=apdex_score,json=apdexScore,proto3" json:"apdex_score,omitempty"`
	TimeConsumingActions              *v1.Topk           `protobuf:"bytes,9,opt,name=time_consuming_actions,json=timeConsumingActions,proto3" json:"time_consuming_actions,omitempty"`
	LatencyPercentiles                []*v1.LineChart    `protobuf:"bytes,10,rep,name=latency_percentiles,json=latencyPercentiles,proto3" json:"latency_percentiles,omitempty"`
	TimeConsumingDependencies         *v1.Topk           `protobuf:"bytes,11,opt,name=time_consuming_dependencies,json=timeConsumingDependencies,proto3" json:"time_consuming_dependencies,omitempty"`
	ApmSource                         ApmSource          `protobuf:"varint,12,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	AvgLatencyTrend                   *v1.Stat           `protobuf:"bytes,13,opt,name=avg_latency_trend,json=avgLatencyTrend,proto3" json:"avg_latency_trend,omitempty"`
	ThroughputTrend                   *v1.Stat           `protobuf:"bytes,14,opt,name=throughput_trend,json=throughputTrend,proto3" json:"throughput_trend,omitempty"`
	ErrorPercentageTrend              *v1.Stat           `protobuf:"bytes,15,opt,name=error_percentage_trend,json=errorPercentageTrend,proto3" json:"error_percentage_trend,omitempty"`
	AvgLatencyWithOffset              *v1.Stat           `protobuf:"bytes,16,opt,name=avg_latency_with_offset,json=avgLatencyWithOffset,proto3" json:"avg_latency_with_offset,omitempty"`
	ThroughputWithOffset              *v1.Stat           `protobuf:"bytes,17,opt,name=throughput_with_offset,json=throughputWithOffset,proto3" json:"throughput_with_offset,omitempty"`
	ErrorPercentageWithOffset         *v1.Stat           `protobuf:"bytes,18,opt,name=error_percentage_with_offset,json=errorPercentageWithOffset,proto3" json:"error_percentage_with_offset,omitempty"`
	ErrorsPerSeconds                  []*v1.LineChart    `protobuf:"bytes,19,rep,name=errors_per_seconds,json=errorsPerSeconds,proto3" json:"errors_per_seconds,omitempty"`
	RequestsAndErrorsByServiceVersion *RepeatedLineChart `protobuf:"bytes,20,opt,name=requests_and_errors_by_service_version,json=requestsAndErrorsByServiceVersion,proto3" json:"requests_and_errors_by_service_version,omitempty"`
	ApdexScoreByServiceVersion        *RepeatedLineChart `protobuf:"bytes,21,opt,name=apdex_score_by_service_version,json=apdexScoreByServiceVersion,proto3" json:"apdex_score_by_service_version,omitempty"`
	ErrorsByServiceVersion            *RepeatedLineChart `protobuf:"bytes,22,opt,name=errors_by_service_version,json=errorsByServiceVersion,proto3" json:"errors_by_service_version,omitempty"`
	ErrorRateByServiceVersion         *RepeatedLineChart `protobuf:"bytes,23,opt,name=error_rate_by_service_version,json=errorRateByServiceVersion,proto3" json:"error_rate_by_service_version,omitempty"`
	ErrorsPerSecondsByServiceVersion  *RepeatedLineChart `protobuf:"bytes,24,opt,name=errors_per_seconds_by_service_version,json=errorsPerSecondsByServiceVersion,proto3" json:"errors_per_seconds_by_service_version,omitempty"`
	LatencyP99ByServiceVersion        *RepeatedLineChart `protobuf:"bytes,25,opt,name=latency_p99_by_service_version,json=latencyP99ByServiceVersion,proto3" json:"latency_p99_by_service_version,omitempty"`
	LatencyP95ByServiceVersion        *RepeatedLineChart `protobuf:"bytes,26,opt,name=latency_p95_by_service_version,json=latencyP95ByServiceVersion,proto3" json:"latency_p95_by_service_version,omitempty"`
	LatencyP75ByServiceVersion        *RepeatedLineChart `protobuf:"bytes,27,opt,name=latency_p75_by_service_version,json=latencyP75ByServiceVersion,proto3" json:"latency_p75_by_service_version,omitempty"`
	LatencyAvgByServiceVersion        *RepeatedLineChart `protobuf:"bytes,28,opt,name=latency_avg_by_service_version,json=latencyAvgByServiceVersion,proto3" json:"latency_avg_by_service_version,omitempty"`
}

func (x *GetOverviewResponse) Reset() {
	*x = GetOverviewResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_overview_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOverviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOverviewResponse) ProtoMessage() {}

func (x *GetOverviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_overview_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOverviewResponse.ProtoReflect.Descriptor instead.
func (*GetOverviewResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_overview_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetOverviewResponse) GetSlo() *v1.MultiStat {
	if x != nil {
		return x.Slo
	}
	return nil
}

func (x *GetOverviewResponse) GetAvgLatency() *v1.Stat {
	if x != nil {
		return x.AvgLatency
	}
	return nil
}

func (x *GetOverviewResponse) GetThroughput() *v1.Stat {
	if x != nil {
		return x.Throughput
	}
	return nil
}

func (x *GetOverviewResponse) GetErrorPercentage() *v1.Stat {
	if x != nil {
		return x.ErrorPercentage
	}
	return nil
}

func (x *GetOverviewResponse) GetRequestsAndErrors() []*v1.LineChart {
	if x != nil {
		return x.RequestsAndErrors
	}
	return nil
}

func (x *GetOverviewResponse) GetErrors() []*v1.LineChart {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetOverviewResponse) GetErrorRate() []*v1.LineChart {
	if x != nil {
		return x.ErrorRate
	}
	return nil
}

func (x *GetOverviewResponse) GetApdexScore() *v1.LineChart {
	if x != nil {
		return x.ApdexScore
	}
	return nil
}

func (x *GetOverviewResponse) GetTimeConsumingActions() *v1.Topk {
	if x != nil {
		return x.TimeConsumingActions
	}
	return nil
}

func (x *GetOverviewResponse) GetLatencyPercentiles() []*v1.LineChart {
	if x != nil {
		return x.LatencyPercentiles
	}
	return nil
}

func (x *GetOverviewResponse) GetTimeConsumingDependencies() *v1.Topk {
	if x != nil {
		return x.TimeConsumingDependencies
	}
	return nil
}

func (x *GetOverviewResponse) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

func (x *GetOverviewResponse) GetAvgLatencyTrend() *v1.Stat {
	if x != nil {
		return x.AvgLatencyTrend
	}
	return nil
}

func (x *GetOverviewResponse) GetThroughputTrend() *v1.Stat {
	if x != nil {
		return x.ThroughputTrend
	}
	return nil
}

func (x *GetOverviewResponse) GetErrorPercentageTrend() *v1.Stat {
	if x != nil {
		return x.ErrorPercentageTrend
	}
	return nil
}

func (x *GetOverviewResponse) GetAvgLatencyWithOffset() *v1.Stat {
	if x != nil {
		return x.AvgLatencyWithOffset
	}
	return nil
}

func (x *GetOverviewResponse) GetThroughputWithOffset() *v1.Stat {
	if x != nil {
		return x.ThroughputWithOffset
	}
	return nil
}

func (x *GetOverviewResponse) GetErrorPercentageWithOffset() *v1.Stat {
	if x != nil {
		return x.ErrorPercentageWithOffset
	}
	return nil
}

func (x *GetOverviewResponse) GetErrorsPerSeconds() []*v1.LineChart {
	if x != nil {
		return x.ErrorsPerSeconds
	}
	return nil
}

func (x *GetOverviewResponse) GetRequestsAndErrorsByServiceVersion() *RepeatedLineChart {
	if x != nil {
		return x.RequestsAndErrorsByServiceVersion
	}
	return nil
}

func (x *GetOverviewResponse) GetApdexScoreByServiceVersion() *RepeatedLineChart {
	if x != nil {
		return x.ApdexScoreByServiceVersion
	}
	return nil
}

func (x *GetOverviewResponse) GetErrorsByServiceVersion() *RepeatedLineChart {
	if x != nil {
		return x.ErrorsByServiceVersion
	}
	return nil
}

func (x *GetOverviewResponse) GetErrorRateByServiceVersion() *RepeatedLineChart {
	if x != nil {
		return x.ErrorRateByServiceVersion
	}
	return nil
}

func (x *GetOverviewResponse) GetErrorsPerSecondsByServiceVersion() *RepeatedLineChart {
	if x != nil {
		return x.ErrorsPerSecondsByServiceVersion
	}
	return nil
}

func (x *GetOverviewResponse) GetLatencyP99ByServiceVersion() *RepeatedLineChart {
	if x != nil {
		return x.LatencyP99ByServiceVersion
	}
	return nil
}

func (x *GetOverviewResponse) GetLatencyP95ByServiceVersion() *RepeatedLineChart {
	if x != nil {
		return x.LatencyP95ByServiceVersion
	}
	return nil
}

func (x *GetOverviewResponse) GetLatencyP75ByServiceVersion() *RepeatedLineChart {
	if x != nil {
		return x.LatencyP75ByServiceVersion
	}
	return nil
}

func (x *GetOverviewResponse) GetLatencyAvgByServiceVersion() *RepeatedLineChart {
	if x != nil {
		return x.LatencyAvgByServiceVersion
	}
	return nil
}

type GetOverviewStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName *wrapperspb.StringValue        `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	TimeRange   *v2.TimeRange                  `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Filters     map[string]*structpb.ListValue `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ApmSource   ApmSource                      `protobuf:"varint,4,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	TrendOffset *wrapperspb.Int64Value         `protobuf:"bytes,5,opt,name=trend_offset,json=trendOffset,proto3" json:"trend_offset,omitempty"`
	Widgets     []*wrapperspb.StringValue      `protobuf:"bytes,6,rep,name=widgets,proto3" json:"widgets,omitempty"`
}

func (x *GetOverviewStreamRequest) Reset() {
	*x = GetOverviewStreamRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_overview_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOverviewStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOverviewStreamRequest) ProtoMessage() {}

func (x *GetOverviewStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_overview_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOverviewStreamRequest.ProtoReflect.Descriptor instead.
func (*GetOverviewStreamRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_overview_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetOverviewStreamRequest) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *GetOverviewStreamRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetOverviewStreamRequest) GetFilters() map[string]*structpb.ListValue {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetOverviewStreamRequest) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

func (x *GetOverviewStreamRequest) GetTrendOffset() *wrapperspb.Int64Value {
	if x != nil {
		return x.TrendOffset
	}
	return nil
}

func (x *GetOverviewStreamRequest) GetWidgets() []*wrapperspb.StringValue {
	if x != nil {
		return x.Widgets
	}
	return nil
}

type GetOverviewStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApmSource ApmSource `protobuf:"varint,12,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	// Types that are assignable to Widget:
	//
	//	*GetOverviewStreamResponse_Slo
	//	*GetOverviewStreamResponse_AvgLatency
	//	*GetOverviewStreamResponse_Throughput
	//	*GetOverviewStreamResponse_ErrorPercentage
	//	*GetOverviewStreamResponse_RequestsAndErrors
	//	*GetOverviewStreamResponse_Errors
	//	*GetOverviewStreamResponse_ErrorRate
	//	*GetOverviewStreamResponse_ApdexScore
	//	*GetOverviewStreamResponse_TimeConsumingActions
	//	*GetOverviewStreamResponse_LatencyPercentiles
	//	*GetOverviewStreamResponse_TimeConsumingDependencies
	//	*GetOverviewStreamResponse_AvgLatencyTrend
	//	*GetOverviewStreamResponse_ThroughputTrend
	//	*GetOverviewStreamResponse_ErrorPercentageTrend
	//	*GetOverviewStreamResponse_AvgLatencyWithOffset
	//	*GetOverviewStreamResponse_ThroughputWithOffset
	//	*GetOverviewStreamResponse_ErrorPercentageWithOffset
	//	*GetOverviewStreamResponse_ErrorsPerSeconds
	//	*GetOverviewStreamResponse_RequestsAndErrorsByServiceVersion
	//	*GetOverviewStreamResponse_ApdexScoreByServiceVersion
	//	*GetOverviewStreamResponse_ErrorsByServiceVersion
	//	*GetOverviewStreamResponse_ErrorRateByServiceVersion
	//	*GetOverviewStreamResponse_ErrorsPerSecondsByServiceVersion
	//	*GetOverviewStreamResponse_LatencyP99ByServiceVersion
	//	*GetOverviewStreamResponse_LatencyP95ByServiceVersion
	//	*GetOverviewStreamResponse_LatencyP75ByServiceVersion
	//	*GetOverviewStreamResponse_LatencyAvgByServiceVersion
	Widget isGetOverviewStreamResponse_Widget `protobuf_oneof:"widget"`
}

func (x *GetOverviewStreamResponse) Reset() {
	*x = GetOverviewStreamResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_overview_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOverviewStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOverviewStreamResponse) ProtoMessage() {}

func (x *GetOverviewStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_overview_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOverviewStreamResponse.ProtoReflect.Descriptor instead.
func (*GetOverviewStreamResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_overview_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetOverviewStreamResponse) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

func (m *GetOverviewStreamResponse) GetWidget() isGetOverviewStreamResponse_Widget {
	if m != nil {
		return m.Widget
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetSlo() *v1.MultiStat {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_Slo); ok {
		return x.Slo
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetAvgLatency() *v1.Stat {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_AvgLatency); ok {
		return x.AvgLatency
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetThroughput() *v1.Stat {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_Throughput); ok {
		return x.Throughput
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetErrorPercentage() *v1.Stat {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_ErrorPercentage); ok {
		return x.ErrorPercentage
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetRequestsAndErrors() *RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_RequestsAndErrors); ok {
		return x.RequestsAndErrors
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetErrors() *RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_Errors); ok {
		return x.Errors
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetErrorRate() *RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_ErrorRate); ok {
		return x.ErrorRate
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetApdexScore() *v1.LineChart {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_ApdexScore); ok {
		return x.ApdexScore
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetTimeConsumingActions() *v1.Topk {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_TimeConsumingActions); ok {
		return x.TimeConsumingActions
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetLatencyPercentiles() *RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_LatencyPercentiles); ok {
		return x.LatencyPercentiles
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetTimeConsumingDependencies() *v1.Topk {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_TimeConsumingDependencies); ok {
		return x.TimeConsumingDependencies
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetAvgLatencyTrend() *v1.Stat {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_AvgLatencyTrend); ok {
		return x.AvgLatencyTrend
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetThroughputTrend() *v1.Stat {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_ThroughputTrend); ok {
		return x.ThroughputTrend
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetErrorPercentageTrend() *v1.Stat {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_ErrorPercentageTrend); ok {
		return x.ErrorPercentageTrend
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetAvgLatencyWithOffset() *v1.Stat {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_AvgLatencyWithOffset); ok {
		return x.AvgLatencyWithOffset
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetThroughputWithOffset() *v1.Stat {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_ThroughputWithOffset); ok {
		return x.ThroughputWithOffset
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetErrorPercentageWithOffset() *v1.Stat {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_ErrorPercentageWithOffset); ok {
		return x.ErrorPercentageWithOffset
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetErrorsPerSeconds() *RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_ErrorsPerSeconds); ok {
		return x.ErrorsPerSeconds
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetRequestsAndErrorsByServiceVersion() *RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_RequestsAndErrorsByServiceVersion); ok {
		return x.RequestsAndErrorsByServiceVersion
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetApdexScoreByServiceVersion() *RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_ApdexScoreByServiceVersion); ok {
		return x.ApdexScoreByServiceVersion
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetErrorsByServiceVersion() *RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_ErrorsByServiceVersion); ok {
		return x.ErrorsByServiceVersion
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetErrorRateByServiceVersion() *RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_ErrorRateByServiceVersion); ok {
		return x.ErrorRateByServiceVersion
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetErrorsPerSecondsByServiceVersion() *RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_ErrorsPerSecondsByServiceVersion); ok {
		return x.ErrorsPerSecondsByServiceVersion
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetLatencyP99ByServiceVersion() *RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_LatencyP99ByServiceVersion); ok {
		return x.LatencyP99ByServiceVersion
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetLatencyP95ByServiceVersion() *RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_LatencyP95ByServiceVersion); ok {
		return x.LatencyP95ByServiceVersion
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetLatencyP75ByServiceVersion() *RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_LatencyP75ByServiceVersion); ok {
		return x.LatencyP75ByServiceVersion
	}
	return nil
}

func (x *GetOverviewStreamResponse) GetLatencyAvgByServiceVersion() *RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetOverviewStreamResponse_LatencyAvgByServiceVersion); ok {
		return x.LatencyAvgByServiceVersion
	}
	return nil
}

type isGetOverviewStreamResponse_Widget interface {
	isGetOverviewStreamResponse_Widget()
}

type GetOverviewStreamResponse_Slo struct {
	Slo *v1.MultiStat `protobuf:"bytes,1,opt,name=slo,proto3,oneof"`
}

type GetOverviewStreamResponse_AvgLatency struct {
	AvgLatency *v1.Stat `protobuf:"bytes,2,opt,name=avg_latency,json=avgLatency,proto3,oneof"`
}

type GetOverviewStreamResponse_Throughput struct {
	Throughput *v1.Stat `protobuf:"bytes,3,opt,name=throughput,proto3,oneof"`
}

type GetOverviewStreamResponse_ErrorPercentage struct {
	ErrorPercentage *v1.Stat `protobuf:"bytes,4,opt,name=error_percentage,json=errorPercentage,proto3,oneof"`
}

type GetOverviewStreamResponse_RequestsAndErrors struct {
	RequestsAndErrors *RepeatedLineChart `protobuf:"bytes,5,opt,name=requests_and_errors,json=requestsAndErrors,proto3,oneof"`
}

type GetOverviewStreamResponse_Errors struct {
	Errors *RepeatedLineChart `protobuf:"bytes,6,opt,name=errors,proto3,oneof"`
}

type GetOverviewStreamResponse_ErrorRate struct {
	ErrorRate *RepeatedLineChart `protobuf:"bytes,7,opt,name=error_rate,json=errorRate,proto3,oneof"`
}

type GetOverviewStreamResponse_ApdexScore struct {
	ApdexScore *v1.LineChart `protobuf:"bytes,8,opt,name=apdex_score,json=apdexScore,proto3,oneof"`
}

type GetOverviewStreamResponse_TimeConsumingActions struct {
	TimeConsumingActions *v1.Topk `protobuf:"bytes,9,opt,name=time_consuming_actions,json=timeConsumingActions,proto3,oneof"`
}

type GetOverviewStreamResponse_LatencyPercentiles struct {
	LatencyPercentiles *RepeatedLineChart `protobuf:"bytes,10,opt,name=latency_percentiles,json=latencyPercentiles,proto3,oneof"`
}

type GetOverviewStreamResponse_TimeConsumingDependencies struct {
	TimeConsumingDependencies *v1.Topk `protobuf:"bytes,11,opt,name=time_consuming_dependencies,json=timeConsumingDependencies,proto3,oneof"`
}

type GetOverviewStreamResponse_AvgLatencyTrend struct {
	AvgLatencyTrend *v1.Stat `protobuf:"bytes,13,opt,name=avg_latency_trend,json=avgLatencyTrend,proto3,oneof"`
}

type GetOverviewStreamResponse_ThroughputTrend struct {
	ThroughputTrend *v1.Stat `protobuf:"bytes,14,opt,name=throughput_trend,json=throughputTrend,proto3,oneof"`
}

type GetOverviewStreamResponse_ErrorPercentageTrend struct {
	ErrorPercentageTrend *v1.Stat `protobuf:"bytes,15,opt,name=error_percentage_trend,json=errorPercentageTrend,proto3,oneof"`
}

type GetOverviewStreamResponse_AvgLatencyWithOffset struct {
	AvgLatencyWithOffset *v1.Stat `protobuf:"bytes,16,opt,name=avg_latency_with_offset,json=avgLatencyWithOffset,proto3,oneof"`
}

type GetOverviewStreamResponse_ThroughputWithOffset struct {
	ThroughputWithOffset *v1.Stat `protobuf:"bytes,17,opt,name=throughput_with_offset,json=throughputWithOffset,proto3,oneof"`
}

type GetOverviewStreamResponse_ErrorPercentageWithOffset struct {
	ErrorPercentageWithOffset *v1.Stat `protobuf:"bytes,18,opt,name=error_percentage_with_offset,json=errorPercentageWithOffset,proto3,oneof"`
}

type GetOverviewStreamResponse_ErrorsPerSeconds struct {
	ErrorsPerSeconds *RepeatedLineChart `protobuf:"bytes,19,opt,name=errors_per_seconds,json=errorsPerSeconds,proto3,oneof"`
}

type GetOverviewStreamResponse_RequestsAndErrorsByServiceVersion struct {
	RequestsAndErrorsByServiceVersion *RepeatedLineChart `protobuf:"bytes,20,opt,name=requests_and_errors_by_service_version,json=requestsAndErrorsByServiceVersion,proto3,oneof"`
}

type GetOverviewStreamResponse_ApdexScoreByServiceVersion struct {
	ApdexScoreByServiceVersion *RepeatedLineChart `protobuf:"bytes,21,opt,name=apdex_score_by_service_version,json=apdexScoreByServiceVersion,proto3,oneof"`
}

type GetOverviewStreamResponse_ErrorsByServiceVersion struct {
	ErrorsByServiceVersion *RepeatedLineChart `protobuf:"bytes,22,opt,name=errors_by_service_version,json=errorsByServiceVersion,proto3,oneof"`
}

type GetOverviewStreamResponse_ErrorRateByServiceVersion struct {
	ErrorRateByServiceVersion *RepeatedLineChart `protobuf:"bytes,23,opt,name=error_rate_by_service_version,json=errorRateByServiceVersion,proto3,oneof"`
}

type GetOverviewStreamResponse_ErrorsPerSecondsByServiceVersion struct {
	ErrorsPerSecondsByServiceVersion *RepeatedLineChart `protobuf:"bytes,24,opt,name=errors_per_seconds_by_service_version,json=errorsPerSecondsByServiceVersion,proto3,oneof"`
}

type GetOverviewStreamResponse_LatencyP99ByServiceVersion struct {
	LatencyP99ByServiceVersion *RepeatedLineChart `protobuf:"bytes,25,opt,name=latency_p99_by_service_version,json=latencyP99ByServiceVersion,proto3,oneof"`
}

type GetOverviewStreamResponse_LatencyP95ByServiceVersion struct {
	LatencyP95ByServiceVersion *RepeatedLineChart `protobuf:"bytes,26,opt,name=latency_p95_by_service_version,json=latencyP95ByServiceVersion,proto3,oneof"`
}

type GetOverviewStreamResponse_LatencyP75ByServiceVersion struct {
	LatencyP75ByServiceVersion *RepeatedLineChart `protobuf:"bytes,27,opt,name=latency_p75_by_service_version,json=latencyP75ByServiceVersion,proto3,oneof"`
}

type GetOverviewStreamResponse_LatencyAvgByServiceVersion struct {
	LatencyAvgByServiceVersion *RepeatedLineChart `protobuf:"bytes,28,opt,name=latency_avg_by_service_version,json=latencyAvgByServiceVersion,proto3,oneof"`
}

func (*GetOverviewStreamResponse_Slo) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_AvgLatency) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_Throughput) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_ErrorPercentage) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_RequestsAndErrors) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_Errors) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_ErrorRate) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_ApdexScore) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_TimeConsumingActions) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_LatencyPercentiles) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_TimeConsumingDependencies) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_AvgLatencyTrend) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_ThroughputTrend) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_ErrorPercentageTrend) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_AvgLatencyWithOffset) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_ThroughputWithOffset) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_ErrorPercentageWithOffset) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_ErrorsPerSeconds) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_RequestsAndErrorsByServiceVersion) isGetOverviewStreamResponse_Widget() {
}

func (*GetOverviewStreamResponse_ApdexScoreByServiceVersion) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_ErrorsByServiceVersion) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_ErrorRateByServiceVersion) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_ErrorsPerSecondsByServiceVersion) isGetOverviewStreamResponse_Widget() {
}

func (*GetOverviewStreamResponse_LatencyP99ByServiceVersion) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_LatencyP95ByServiceVersion) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_LatencyP75ByServiceVersion) isGetOverviewStreamResponse_Widget() {}

func (*GetOverviewStreamResponse_LatencyAvgByServiceVersion) isGetOverviewStreamResponse_Widget() {}

type GetApdexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName *wrapperspb.StringValue        `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	TimeRange   *v2.TimeRange                  `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Filters     map[string]*structpb.ListValue `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetApdexRequest) Reset() {
	*x = GetApdexRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_overview_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetApdexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApdexRequest) ProtoMessage() {}

func (x *GetApdexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_overview_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApdexRequest.ProtoReflect.Descriptor instead.
func (*GetApdexRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_overview_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetApdexRequest) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *GetApdexRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetApdexRequest) GetFilters() map[string]*structpb.ListValue {
	if x != nil {
		return x.Filters
	}
	return nil
}

var File_com_coralogixapis_service_catalog_v1_overview_service_proto protoreflect.FileDescriptor

var file_com_coralogixapis_service_catalog_v1_overview_service_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x30, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x32, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x77, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x77, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x70, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x35, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70,
	0x64, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x04, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5f, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x61,
	0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x09, 0x61, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x56, 0x0a, 0x0c, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x3a, 0x74, 0x92, 0x41, 0x71, 0x0a, 0x6d, 0x2a, 0x14, 0x47, 0x65, 0x74, 0x20,
	0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x39, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73,
	0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65,
	0x74, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0xd2, 0x01, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2a, 0x00, 0x22, 0xc2, 0x16, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x03, 0x73, 0x6c, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x74, 0x61, 0x74, 0x52, 0x03, 0x73, 0x6c, 0x6f,
	0x12, 0x47, 0x0a, 0x0b, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a, 0x61,
	0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x46, 0x0a, 0x0a, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75,
	0x74, 0x12, 0x51, 0x0a, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x11,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x43, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61,
	0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x61, 0x70, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x52, 0x0a, 0x61, 0x70, 0x64, 0x65, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x5c, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6b, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5c,
	0x0a, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x1b,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6b, 0x52, 0x19, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x61, 0x70, 0x6d, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0f, 0x61, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x51, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x5c, 0x0a, 0x16, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x14, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x5d, 0x0a, 0x17, 0x61, 0x76, 0x67,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61,
	0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x14, 0x61, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x57, 0x69,
	0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x5c, 0x0a, 0x16, 0x74, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d,
	0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x52, 0x14, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x67, 0x0a, 0x1c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x52, 0x19, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x59, 0x0a, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x26, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x52, 0x21, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x41, 0x6e,
	0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x1e, 0x61, 0x70, 0x64, 0x65, 0x78,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x1a, 0x61, 0x70, 0x64, 0x65, 0x78, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x72, 0x0a, 0x19, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x62,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x52, 0x16, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x1d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x19, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x88, 0x01, 0x0a, 0x25, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x20, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7b,
	0x0a, 0x1e, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x39, 0x39, 0x5f, 0x62, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x1a, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x39, 0x39, 0x42, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x1e, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x39, 0x35, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x1a, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x39, 0x35, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x1e, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x70, 0x37, 0x35, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x1a, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x50, 0x37, 0x35, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x1e, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x61, 0x76, 0x67, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x1a, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x41,
	0x76, 0x67, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x5a, 0x92, 0x41, 0x57, 0x0a, 0x53, 0x2a, 0x15, 0x47, 0x65, 0x74, 0x20, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x3a, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73,
	0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x67,
	0x65, 0x74, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x2a, 0x00, 0x22, 0xb2,
	0x05, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4e,
	0x0a, 0x0a, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x09, 0x61, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3e,
	0x0a, 0x0c, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x36,
	0x0a, 0x07, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x1a, 0x56, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x82,
	0x01, 0x92, 0x41, 0x7f, 0x0a, 0x7b, 0x2a, 0x1b, 0x47, 0x65, 0x74, 0x20, 0x4f, 0x76, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x40, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f,
	0x20, 0x67, 0x65, 0x74, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x20, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0xd2, 0x01, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x2a, 0x00, 0x22, 0xd2, 0x17, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x61, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x3f, 0x0a, 0x03, 0x73, 0x6c, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73,
	0x6c, 0x6f, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x61, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x48, 0x0a,
	0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x53, 0x0a, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x69, 0x0a, 0x13,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x41, 0x6e,
	0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x51, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x58, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69,
	0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x61, 0x70, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70,
	0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x70, 0x64, 0x65, 0x78, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x5e, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6b, 0x48, 0x00, 0x52, 0x14,
	0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6a, 0x0a, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x12, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x68, 0x0a, 0x1b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6b, 0x48, 0x00, 0x52,
	0x19, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x11, 0x61, 0x76,
	0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x61, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x72, 0x65, 0x6e, 0x64,
	0x12, 0x53, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x74,
	0x72, 0x65, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61,
	0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74,
	0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x5e, 0x0a, 0x16, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52,
	0x14, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x5f, 0x0a, 0x17, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00,
	0x52, 0x14, 0x61, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x5e, 0x0a, 0x16, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x70, 0x75, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00,
	0x52, 0x14, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x69, 0x0a, 0x1c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x19, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x67, 0x0a, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x26, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x21, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x41, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x1e, 0x61, 0x70, 0x64,
	0x65, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x61, 0x70,
	0x64, 0x65, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x19, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x16, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7b,
	0x0a, 0x1d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x19, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x8a, 0x01, 0x0a, 0x25,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x1e, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x70, 0x39, 0x39, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x50, 0x39, 0x39, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x1e, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x70, 0x39, 0x35, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x50, 0x39, 0x35, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x1e, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x70, 0x37, 0x35, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69,
	0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x50, 0x37, 0x35, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x1e, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x61, 0x76, 0x67, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x41, 0x76, 0x67, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x68, 0x92, 0x41, 0x65, 0x0a, 0x61, 0x2a, 0x1c, 0x47, 0x65, 0x74,
	0x20, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x41, 0x54, 0x68, 0x69, 0x73, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x4f, 0x76, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x2a, 0x00, 0x42, 0x08,
	0x0a, 0x06, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x22, 0xd6, 0x03, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5c, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x56, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x80,
	0x01, 0x92, 0x41, 0x7d, 0x0a, 0x79, 0x2a, 0x1a, 0x47, 0x65, 0x74, 0x20, 0x4f, 0x76, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x20, 0x41, 0x70, 0x64, 0x65, 0x78, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x3f, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x67, 0x65, 0x74, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x20, 0x41, 0x70, 0x64,
	0x65, 0x78, 0x2e, 0xd2, 0x01, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0xd2, 0x01, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2a,
	0x00, 0x32, 0xaf, 0x04, 0x0a, 0x0f, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0xca, 0xb8, 0x02, 0x0e,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x12, 0xcc, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0xca, 0xb8, 0x02, 0x15, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x20, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x30,
	0x01, 0x12, 0x9f, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x70, 0x64, 0x65, 0x78, 0x12, 0x35,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0xca, 0xb8, 0x02, 0x0b, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x20, 0x41, 0x70, 0x64, 0x65, 0x78, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12,
	0x12, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x61, 0x70,
	0x64, 0x65, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_service_catalog_v1_overview_service_proto_rawDescOnce sync.Once
	file_com_coralogixapis_service_catalog_v1_overview_service_proto_rawDescData = file_com_coralogixapis_service_catalog_v1_overview_service_proto_rawDesc
)

func file_com_coralogixapis_service_catalog_v1_overview_service_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_service_catalog_v1_overview_service_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_service_catalog_v1_overview_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_service_catalog_v1_overview_service_proto_rawDescData)
	})
	return file_com_coralogixapis_service_catalog_v1_overview_service_proto_rawDescData
}

var file_com_coralogixapis_service_catalog_v1_overview_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_com_coralogixapis_service_catalog_v1_overview_service_proto_goTypes = []any{
	(*GetOverviewRequest)(nil),        // 0: com.coralogixapis.service_catalog.v1.GetOverviewRequest
	(*GetOverviewResponse)(nil),       // 1: com.coralogixapis.service_catalog.v1.GetOverviewResponse
	(*GetOverviewStreamRequest)(nil),  // 2: com.coralogixapis.service_catalog.v1.GetOverviewStreamRequest
	(*GetOverviewStreamResponse)(nil), // 3: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse
	(*GetApdexRequest)(nil),           // 4: com.coralogixapis.service_catalog.v1.GetApdexRequest
	nil,                               // 5: com.coralogixapis.service_catalog.v1.GetOverviewRequest.FiltersEntry
	nil,                               // 6: com.coralogixapis.service_catalog.v1.GetOverviewStreamRequest.FiltersEntry
	nil,                               // 7: com.coralogixapis.service_catalog.v1.GetApdexRequest.FiltersEntry
	(*wrapperspb.StringValue)(nil),    // 8: google.protobuf.StringValue
	(*v2.TimeRange)(nil),              // 9: com.coralogixapis.apm.common.v2.TimeRange
	(ApmSource)(0),                    // 10: com.coralogixapis.service_catalog.v1.ApmSource
	(*v1.MultiStat)(nil),              // 11: com.coralogixapis.apm.widgets.v1.MultiStat
	(*v1.Stat)(nil),                   // 12: com.coralogixapis.apm.widgets.v1.Stat
	(*v1.LineChart)(nil),              // 13: com.coralogixapis.apm.widgets.v1.LineChart
	(*v1.Topk)(nil),                   // 14: com.coralogixapis.apm.widgets.v1.Topk
	(*RepeatedLineChart)(nil),         // 15: com.coralogixapis.service_catalog.v1.RepeatedLineChart
	(*wrapperspb.Int64Value)(nil),     // 16: google.protobuf.Int64Value
	(*structpb.ListValue)(nil),        // 17: google.protobuf.ListValue
	(*common.GetApdexResponse)(nil),   // 18: com.coralogixapis.apm.common.v2.GetApdexResponse
}
var file_com_coralogixapis_service_catalog_v1_overview_service_proto_depIdxs = []int32{
	8,  // 0: com.coralogixapis.service_catalog.v1.GetOverviewRequest.service_name:type_name -> google.protobuf.StringValue
	9,  // 1: com.coralogixapis.service_catalog.v1.GetOverviewRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	5,  // 2: com.coralogixapis.service_catalog.v1.GetOverviewRequest.filters:type_name -> com.coralogixapis.service_catalog.v1.GetOverviewRequest.FiltersEntry
	10, // 3: com.coralogixapis.service_catalog.v1.GetOverviewRequest.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	11, // 4: com.coralogixapis.service_catalog.v1.GetOverviewResponse.slo:type_name -> com.coralogixapis.apm.widgets.v1.MultiStat
	12, // 5: com.coralogixapis.service_catalog.v1.GetOverviewResponse.avg_latency:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	12, // 6: com.coralogixapis.service_catalog.v1.GetOverviewResponse.throughput:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	12, // 7: com.coralogixapis.service_catalog.v1.GetOverviewResponse.error_percentage:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	13, // 8: com.coralogixapis.service_catalog.v1.GetOverviewResponse.requests_and_errors:type_name -> com.coralogixapis.apm.widgets.v1.LineChart
	13, // 9: com.coralogixapis.service_catalog.v1.GetOverviewResponse.errors:type_name -> com.coralogixapis.apm.widgets.v1.LineChart
	13, // 10: com.coralogixapis.service_catalog.v1.GetOverviewResponse.error_rate:type_name -> com.coralogixapis.apm.widgets.v1.LineChart
	13, // 11: com.coralogixapis.service_catalog.v1.GetOverviewResponse.apdex_score:type_name -> com.coralogixapis.apm.widgets.v1.LineChart
	14, // 12: com.coralogixapis.service_catalog.v1.GetOverviewResponse.time_consuming_actions:type_name -> com.coralogixapis.apm.widgets.v1.Topk
	13, // 13: com.coralogixapis.service_catalog.v1.GetOverviewResponse.latency_percentiles:type_name -> com.coralogixapis.apm.widgets.v1.LineChart
	14, // 14: com.coralogixapis.service_catalog.v1.GetOverviewResponse.time_consuming_dependencies:type_name -> com.coralogixapis.apm.widgets.v1.Topk
	10, // 15: com.coralogixapis.service_catalog.v1.GetOverviewResponse.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	12, // 16: com.coralogixapis.service_catalog.v1.GetOverviewResponse.avg_latency_trend:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	12, // 17: com.coralogixapis.service_catalog.v1.GetOverviewResponse.throughput_trend:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	12, // 18: com.coralogixapis.service_catalog.v1.GetOverviewResponse.error_percentage_trend:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	12, // 19: com.coralogixapis.service_catalog.v1.GetOverviewResponse.avg_latency_with_offset:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	12, // 20: com.coralogixapis.service_catalog.v1.GetOverviewResponse.throughput_with_offset:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	12, // 21: com.coralogixapis.service_catalog.v1.GetOverviewResponse.error_percentage_with_offset:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	13, // 22: com.coralogixapis.service_catalog.v1.GetOverviewResponse.errors_per_seconds:type_name -> com.coralogixapis.apm.widgets.v1.LineChart
	15, // 23: com.coralogixapis.service_catalog.v1.GetOverviewResponse.requests_and_errors_by_service_version:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	15, // 24: com.coralogixapis.service_catalog.v1.GetOverviewResponse.apdex_score_by_service_version:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	15, // 25: com.coralogixapis.service_catalog.v1.GetOverviewResponse.errors_by_service_version:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	15, // 26: com.coralogixapis.service_catalog.v1.GetOverviewResponse.error_rate_by_service_version:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	15, // 27: com.coralogixapis.service_catalog.v1.GetOverviewResponse.errors_per_seconds_by_service_version:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	15, // 28: com.coralogixapis.service_catalog.v1.GetOverviewResponse.latency_p99_by_service_version:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	15, // 29: com.coralogixapis.service_catalog.v1.GetOverviewResponse.latency_p95_by_service_version:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	15, // 30: com.coralogixapis.service_catalog.v1.GetOverviewResponse.latency_p75_by_service_version:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	15, // 31: com.coralogixapis.service_catalog.v1.GetOverviewResponse.latency_avg_by_service_version:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	8,  // 32: com.coralogixapis.service_catalog.v1.GetOverviewStreamRequest.service_name:type_name -> google.protobuf.StringValue
	9,  // 33: com.coralogixapis.service_catalog.v1.GetOverviewStreamRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	6,  // 34: com.coralogixapis.service_catalog.v1.GetOverviewStreamRequest.filters:type_name -> com.coralogixapis.service_catalog.v1.GetOverviewStreamRequest.FiltersEntry
	10, // 35: com.coralogixapis.service_catalog.v1.GetOverviewStreamRequest.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	16, // 36: com.coralogixapis.service_catalog.v1.GetOverviewStreamRequest.trend_offset:type_name -> google.protobuf.Int64Value
	8,  // 37: com.coralogixapis.service_catalog.v1.GetOverviewStreamRequest.widgets:type_name -> google.protobuf.StringValue
	10, // 38: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	11, // 39: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.slo:type_name -> com.coralogixapis.apm.widgets.v1.MultiStat
	12, // 40: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.avg_latency:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	12, // 41: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.throughput:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	12, // 42: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.error_percentage:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	15, // 43: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.requests_and_errors:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	15, // 44: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.errors:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	15, // 45: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.error_rate:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	13, // 46: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.apdex_score:type_name -> com.coralogixapis.apm.widgets.v1.LineChart
	14, // 47: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.time_consuming_actions:type_name -> com.coralogixapis.apm.widgets.v1.Topk
	15, // 48: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.latency_percentiles:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	14, // 49: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.time_consuming_dependencies:type_name -> com.coralogixapis.apm.widgets.v1.Topk
	12, // 50: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.avg_latency_trend:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	12, // 51: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.throughput_trend:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	12, // 52: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.error_percentage_trend:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	12, // 53: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.avg_latency_with_offset:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	12, // 54: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.throughput_with_offset:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	12, // 55: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.error_percentage_with_offset:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	15, // 56: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.errors_per_seconds:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	15, // 57: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.requests_and_errors_by_service_version:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	15, // 58: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.apdex_score_by_service_version:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	15, // 59: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.errors_by_service_version:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	15, // 60: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.error_rate_by_service_version:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	15, // 61: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.errors_per_seconds_by_service_version:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	15, // 62: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.latency_p99_by_service_version:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	15, // 63: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.latency_p95_by_service_version:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	15, // 64: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.latency_p75_by_service_version:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	15, // 65: com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse.latency_avg_by_service_version:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	8,  // 66: com.coralogixapis.service_catalog.v1.GetApdexRequest.service_name:type_name -> google.protobuf.StringValue
	9,  // 67: com.coralogixapis.service_catalog.v1.GetApdexRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	7,  // 68: com.coralogixapis.service_catalog.v1.GetApdexRequest.filters:type_name -> com.coralogixapis.service_catalog.v1.GetApdexRequest.FiltersEntry
	17, // 69: com.coralogixapis.service_catalog.v1.GetOverviewRequest.FiltersEntry.value:type_name -> google.protobuf.ListValue
	17, // 70: com.coralogixapis.service_catalog.v1.GetOverviewStreamRequest.FiltersEntry.value:type_name -> google.protobuf.ListValue
	17, // 71: com.coralogixapis.service_catalog.v1.GetApdexRequest.FiltersEntry.value:type_name -> google.protobuf.ListValue
	0,  // 72: com.coralogixapis.service_catalog.v1.OverviewService.GetOverview:input_type -> com.coralogixapis.service_catalog.v1.GetOverviewRequest
	2,  // 73: com.coralogixapis.service_catalog.v1.OverviewService.GetOverviewStream:input_type -> com.coralogixapis.service_catalog.v1.GetOverviewStreamRequest
	4,  // 74: com.coralogixapis.service_catalog.v1.OverviewService.GetApdex:input_type -> com.coralogixapis.service_catalog.v1.GetApdexRequest
	1,  // 75: com.coralogixapis.service_catalog.v1.OverviewService.GetOverview:output_type -> com.coralogixapis.service_catalog.v1.GetOverviewResponse
	3,  // 76: com.coralogixapis.service_catalog.v1.OverviewService.GetOverviewStream:output_type -> com.coralogixapis.service_catalog.v1.GetOverviewStreamResponse
	18, // 77: com.coralogixapis.service_catalog.v1.OverviewService.GetApdex:output_type -> com.coralogixapis.apm.common.v2.GetApdexResponse
	75, // [75:78] is the sub-list for method output_type
	72, // [72:75] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_service_catalog_v1_overview_service_proto_init() }
func file_com_coralogixapis_service_catalog_v1_overview_service_proto_init() {
	if File_com_coralogixapis_service_catalog_v1_overview_service_proto != nil {
		return
	}
	file_com_coralogixapis_service_catalog_v1_repeated_widgets_proto_init()
	file_com_coralogixapis_service_catalog_v1_apm_source_proto_init()
	file_com_coralogixapis_service_catalog_v1_overview_service_proto_msgTypes[3].OneofWrappers = []any{
		(*GetOverviewStreamResponse_Slo)(nil),
		(*GetOverviewStreamResponse_AvgLatency)(nil),
		(*GetOverviewStreamResponse_Throughput)(nil),
		(*GetOverviewStreamResponse_ErrorPercentage)(nil),
		(*GetOverviewStreamResponse_RequestsAndErrors)(nil),
		(*GetOverviewStreamResponse_Errors)(nil),
		(*GetOverviewStreamResponse_ErrorRate)(nil),
		(*GetOverviewStreamResponse_ApdexScore)(nil),
		(*GetOverviewStreamResponse_TimeConsumingActions)(nil),
		(*GetOverviewStreamResponse_LatencyPercentiles)(nil),
		(*GetOverviewStreamResponse_TimeConsumingDependencies)(nil),
		(*GetOverviewStreamResponse_AvgLatencyTrend)(nil),
		(*GetOverviewStreamResponse_ThroughputTrend)(nil),
		(*GetOverviewStreamResponse_ErrorPercentageTrend)(nil),
		(*GetOverviewStreamResponse_AvgLatencyWithOffset)(nil),
		(*GetOverviewStreamResponse_ThroughputWithOffset)(nil),
		(*GetOverviewStreamResponse_ErrorPercentageWithOffset)(nil),
		(*GetOverviewStreamResponse_ErrorsPerSeconds)(nil),
		(*GetOverviewStreamResponse_RequestsAndErrorsByServiceVersion)(nil),
		(*GetOverviewStreamResponse_ApdexScoreByServiceVersion)(nil),
		(*GetOverviewStreamResponse_ErrorsByServiceVersion)(nil),
		(*GetOverviewStreamResponse_ErrorRateByServiceVersion)(nil),
		(*GetOverviewStreamResponse_ErrorsPerSecondsByServiceVersion)(nil),
		(*GetOverviewStreamResponse_LatencyP99ByServiceVersion)(nil),
		(*GetOverviewStreamResponse_LatencyP95ByServiceVersion)(nil),
		(*GetOverviewStreamResponse_LatencyP75ByServiceVersion)(nil),
		(*GetOverviewStreamResponse_LatencyAvgByServiceVersion)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_service_catalog_v1_overview_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogixapis_service_catalog_v1_overview_service_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_service_catalog_v1_overview_service_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_service_catalog_v1_overview_service_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_service_catalog_v1_overview_service_proto = out.File
	file_com_coralogixapis_service_catalog_v1_overview_service_proto_rawDesc = nil
	file_com_coralogixapis_service_catalog_v1_overview_service_proto_goTypes = nil
	file_com_coralogixapis_service_catalog_v1_overview_service_proto_depIdxs = nil
}
