// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.26.1
// source: com/coralogixapis/service_catalog/v1/operation.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Operation struct {
	state                   protoimpl.MessageState  `protogen:"open.v1"`
	Operation               *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	Method                  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	P99ResponseTime         *UnitValue              `protobuf:"bytes,3,opt,name=p99_response_time,json=p99ResponseTime,proto3" json:"p99_response_time,omitempty"`
	P90ResponseTime         *UnitValue              `protobuf:"bytes,21,opt,name=p90_response_time,json=p90ResponseTime,proto3" json:"p90_response_time,omitempty"`
	P75ResponseTime         *UnitValue              `protobuf:"bytes,22,opt,name=p75_response_time,json=p75ResponseTime,proto3" json:"p75_response_time,omitempty"`
	P50ResponseTime         *UnitValue              `protobuf:"bytes,23,opt,name=p50_response_time,json=p50ResponseTime,proto3" json:"p50_response_time,omitempty"`
	AvgResponseTime         *UnitValue              `protobuf:"bytes,24,opt,name=avg_response_time,json=avgResponseTime,proto3" json:"avg_response_time,omitempty"`
	Requests                *UnitValue              `protobuf:"bytes,4,opt,name=requests,proto3" json:"requests,omitempty"`
	Throughput              *UnitValue              `protobuf:"bytes,25,opt,name=throughput,proto3" json:"throughput,omitempty"`
	MaxThroughput           *UnitValue              `protobuf:"bytes,26,opt,name=max_throughput,json=maxThroughput,proto3" json:"max_throughput,omitempty"`
	Errors                  *UnitValue              `protobuf:"bytes,5,opt,name=errors,proto3" json:"errors,omitempty"`
	ErrorsPerMinute         *UnitValue              `protobuf:"bytes,27,opt,name=errors_per_minute,json=errorsPerMinute,proto3" json:"errors_per_minute,omitempty"`
	MaxErrorsPerMinute      *UnitValue              `protobuf:"bytes,28,opt,name=max_errors_per_minute,json=maxErrorsPerMinute,proto3" json:"max_errors_per_minute,omitempty"`
	ErrorsPerSecond         *UnitValue              `protobuf:"bytes,29,opt,name=errors_per_second,json=errorsPerSecond,proto3" json:"errors_per_second,omitempty"`
	TimeConsuming           *UnitValue              `protobuf:"bytes,6,opt,name=time_consuming,json=timeConsuming,proto3" json:"time_consuming,omitempty"`
	TimeConsumingPercentage *UnitValue              `protobuf:"bytes,7,opt,name=time_consuming_percentage,json=timeConsumingPercentage,proto3" json:"time_consuming_percentage,omitempty"`
	P95ResponseTime         *UnitValue              `protobuf:"bytes,8,opt,name=p95_response_time,json=p95ResponseTime,proto3" json:"p95_response_time,omitempty"`
	ErrorsPercentage        *UnitValue              `protobuf:"bytes,9,opt,name=errors_percentage,json=errorsPercentage,proto3" json:"errors_percentage,omitempty"`
	// Fields with _with_offset
	P99ResponseTimeWithOffset         *UnitValue `protobuf:"bytes,16,opt,name=p99_response_time_with_offset,json=p99ResponseTimeWithOffset,proto3" json:"p99_response_time_with_offset,omitempty"`
	P90ResponseTimeWithOffset         *UnitValue `protobuf:"bytes,30,opt,name=p90_response_time_with_offset,json=p90ResponseTimeWithOffset,proto3" json:"p90_response_time_with_offset,omitempty"`
	P75ResponseTimeWithOffset         *UnitValue `protobuf:"bytes,31,opt,name=p75_response_time_with_offset,json=p75ResponseTimeWithOffset,proto3" json:"p75_response_time_with_offset,omitempty"`
	P50ResponseTimeWithOffset         *UnitValue `protobuf:"bytes,32,opt,name=p50_response_time_with_offset,json=p50ResponseTimeWithOffset,proto3" json:"p50_response_time_with_offset,omitempty"`
	AvgResponseTimeWithOffset         *UnitValue `protobuf:"bytes,33,opt,name=avg_response_time_with_offset,json=avgResponseTimeWithOffset,proto3" json:"avg_response_time_with_offset,omitempty"`
	RequestsWithOffset                *UnitValue `protobuf:"bytes,17,opt,name=requests_with_offset,json=requestsWithOffset,proto3" json:"requests_with_offset,omitempty"`
	ThroughputWithOffset              *UnitValue `protobuf:"bytes,34,opt,name=throughput_with_offset,json=throughputWithOffset,proto3" json:"throughput_with_offset,omitempty"`
	MaxThroughputWithOffset           *UnitValue `protobuf:"bytes,35,opt,name=max_throughput_with_offset,json=maxThroughputWithOffset,proto3" json:"max_throughput_with_offset,omitempty"`
	ErrorsWithOffset                  *UnitValue `protobuf:"bytes,18,opt,name=errors_with_offset,json=errorsWithOffset,proto3" json:"errors_with_offset,omitempty"`
	ErrorsPerMinuteWithOffset         *UnitValue `protobuf:"bytes,36,opt,name=errors_per_minute_with_offset,json=errorsPerMinuteWithOffset,proto3" json:"errors_per_minute_with_offset,omitempty"`
	MaxErrorsPerMinuteWithOffset      *UnitValue `protobuf:"bytes,37,opt,name=max_errors_per_minute_with_offset,json=maxErrorsPerMinuteWithOffset,proto3" json:"max_errors_per_minute_with_offset,omitempty"`
	ErrorsPerSecondWithOffset         *UnitValue `protobuf:"bytes,38,opt,name=errors_per_second_with_offset,json=errorsPerSecondWithOffset,proto3" json:"errors_per_second_with_offset,omitempty"`
	TimeConsumingWithOffset           *UnitValue `protobuf:"bytes,39,opt,name=time_consuming_with_offset,json=timeConsumingWithOffset,proto3" json:"time_consuming_with_offset,omitempty"`
	TimeConsumingPercentageWithOffset *UnitValue `protobuf:"bytes,40,opt,name=time_consuming_percentage_with_offset,json=timeConsumingPercentageWithOffset,proto3" json:"time_consuming_percentage_with_offset,omitempty"`
	P95ResponseTimeWithOffset         *UnitValue `protobuf:"bytes,19,opt,name=p95_response_time_with_offset,json=p95ResponseTimeWithOffset,proto3" json:"p95_response_time_with_offset,omitempty"`
	ErrorsPercentageWithOffset        *UnitValue `protobuf:"bytes,20,opt,name=errors_percentage_with_offset,json=errorsPercentageWithOffset,proto3" json:"errors_percentage_with_offset,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *Operation) Reset() {
	*x = Operation{}
	mi := &file_com_coralogixapis_service_catalog_v1_operation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_operation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_operation_proto_rawDescGZIP(), []int{0}
}

func (x *Operation) GetOperation() *wrapperspb.StringValue {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *Operation) GetMethod() *wrapperspb.StringValue {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Operation) GetP99ResponseTime() *UnitValue {
	if x != nil {
		return x.P99ResponseTime
	}
	return nil
}

func (x *Operation) GetP90ResponseTime() *UnitValue {
	if x != nil {
		return x.P90ResponseTime
	}
	return nil
}

func (x *Operation) GetP75ResponseTime() *UnitValue {
	if x != nil {
		return x.P75ResponseTime
	}
	return nil
}

func (x *Operation) GetP50ResponseTime() *UnitValue {
	if x != nil {
		return x.P50ResponseTime
	}
	return nil
}

func (x *Operation) GetAvgResponseTime() *UnitValue {
	if x != nil {
		return x.AvgResponseTime
	}
	return nil
}

func (x *Operation) GetRequests() *UnitValue {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *Operation) GetThroughput() *UnitValue {
	if x != nil {
		return x.Throughput
	}
	return nil
}

func (x *Operation) GetMaxThroughput() *UnitValue {
	if x != nil {
		return x.MaxThroughput
	}
	return nil
}

func (x *Operation) GetErrors() *UnitValue {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *Operation) GetErrorsPerMinute() *UnitValue {
	if x != nil {
		return x.ErrorsPerMinute
	}
	return nil
}

func (x *Operation) GetMaxErrorsPerMinute() *UnitValue {
	if x != nil {
		return x.MaxErrorsPerMinute
	}
	return nil
}

func (x *Operation) GetErrorsPerSecond() *UnitValue {
	if x != nil {
		return x.ErrorsPerSecond
	}
	return nil
}

func (x *Operation) GetTimeConsuming() *UnitValue {
	if x != nil {
		return x.TimeConsuming
	}
	return nil
}

func (x *Operation) GetTimeConsumingPercentage() *UnitValue {
	if x != nil {
		return x.TimeConsumingPercentage
	}
	return nil
}

func (x *Operation) GetP95ResponseTime() *UnitValue {
	if x != nil {
		return x.P95ResponseTime
	}
	return nil
}

func (x *Operation) GetErrorsPercentage() *UnitValue {
	if x != nil {
		return x.ErrorsPercentage
	}
	return nil
}

func (x *Operation) GetP99ResponseTimeWithOffset() *UnitValue {
	if x != nil {
		return x.P99ResponseTimeWithOffset
	}
	return nil
}

func (x *Operation) GetP90ResponseTimeWithOffset() *UnitValue {
	if x != nil {
		return x.P90ResponseTimeWithOffset
	}
	return nil
}

func (x *Operation) GetP75ResponseTimeWithOffset() *UnitValue {
	if x != nil {
		return x.P75ResponseTimeWithOffset
	}
	return nil
}

func (x *Operation) GetP50ResponseTimeWithOffset() *UnitValue {
	if x != nil {
		return x.P50ResponseTimeWithOffset
	}
	return nil
}

func (x *Operation) GetAvgResponseTimeWithOffset() *UnitValue {
	if x != nil {
		return x.AvgResponseTimeWithOffset
	}
	return nil
}

func (x *Operation) GetRequestsWithOffset() *UnitValue {
	if x != nil {
		return x.RequestsWithOffset
	}
	return nil
}

func (x *Operation) GetThroughputWithOffset() *UnitValue {
	if x != nil {
		return x.ThroughputWithOffset
	}
	return nil
}

func (x *Operation) GetMaxThroughputWithOffset() *UnitValue {
	if x != nil {
		return x.MaxThroughputWithOffset
	}
	return nil
}

func (x *Operation) GetErrorsWithOffset() *UnitValue {
	if x != nil {
		return x.ErrorsWithOffset
	}
	return nil
}

func (x *Operation) GetErrorsPerMinuteWithOffset() *UnitValue {
	if x != nil {
		return x.ErrorsPerMinuteWithOffset
	}
	return nil
}

func (x *Operation) GetMaxErrorsPerMinuteWithOffset() *UnitValue {
	if x != nil {
		return x.MaxErrorsPerMinuteWithOffset
	}
	return nil
}

func (x *Operation) GetErrorsPerSecondWithOffset() *UnitValue {
	if x != nil {
		return x.ErrorsPerSecondWithOffset
	}
	return nil
}

func (x *Operation) GetTimeConsumingWithOffset() *UnitValue {
	if x != nil {
		return x.TimeConsumingWithOffset
	}
	return nil
}

func (x *Operation) GetTimeConsumingPercentageWithOffset() *UnitValue {
	if x != nil {
		return x.TimeConsumingPercentageWithOffset
	}
	return nil
}

func (x *Operation) GetP95ResponseTimeWithOffset() *UnitValue {
	if x != nil {
		return x.P95ResponseTimeWithOffset
	}
	return nil
}

func (x *Operation) GetErrorsPercentageWithOffset() *UnitValue {
	if x != nil {
		return x.ErrorsPercentageWithOffset
	}
	return nil
}

var File_com_coralogixapis_service_catalog_v1_operation_proto protoreflect.FileDescriptor

var file_com_coralogixapis_service_catalog_v1_operation_proto_rawDesc = []byte{
	0x0a, 0x34, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x1a, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x5b, 0x0a, 0x11, 0x70, 0x39, 0x39, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x70, 0x39, 0x39, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x5b, 0x0a, 0x11, 0x70, 0x39, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70,
	0x39, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5b,
	0x0a, 0x11, 0x70, 0x37, 0x35, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x37, 0x35, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x11, 0x70,
	0x35, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x35, 0x30, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x11, 0x61, 0x76, 0x67, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x61, 0x76, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x4f, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x70, 0x75, 0x74, 0x12, 0x56, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6d, 0x61,
	0x78, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x12, 0x62, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x12, 0x56, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x6b, 0x0a, 0x19, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17,
	0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x11, 0x70, 0x39, 0x35, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x39, 0x35, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x71, 0x0a, 0x1d, 0x70, 0x39, 0x39, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x70, 0x39, 0x39, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x71, 0x0a, 0x1d, 0x70, 0x39, 0x30, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x70,
	0x39, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x71, 0x0a, 0x1d, 0x70, 0x37, 0x35, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x19, 0x70, 0x37, 0x35, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x71, 0x0a, 0x1d, 0x70,
	0x35, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x19, 0x70, 0x35, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x71,
	0x0a, 0x1d, 0x61, 0x76, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x61, 0x76, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x61, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x65, 0x0a, 0x16, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70,
	0x75, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x6c, 0x0a, 0x1a, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x17, 0x6d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x5d, 0x0a, 0x12, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x71, 0x0a, 0x1d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x19, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x78, 0x0a, 0x21, 0x6d,
	0x61, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x6d, 0x61, 0x78, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x71, 0x0a, 0x1d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x6c, 0x0a, 0x1a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x74,
	0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x25, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x71, 0x0a, 0x1d, 0x70, 0x39,
	0x35, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x19, 0x70, 0x39, 0x35, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x72, 0x0a,
	0x1d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_service_catalog_v1_operation_proto_rawDescOnce sync.Once
	file_com_coralogixapis_service_catalog_v1_operation_proto_rawDescData = file_com_coralogixapis_service_catalog_v1_operation_proto_rawDesc
)

func file_com_coralogixapis_service_catalog_v1_operation_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_service_catalog_v1_operation_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_service_catalog_v1_operation_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_service_catalog_v1_operation_proto_rawDescData)
	})
	return file_com_coralogixapis_service_catalog_v1_operation_proto_rawDescData
}

var file_com_coralogixapis_service_catalog_v1_operation_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_com_coralogixapis_service_catalog_v1_operation_proto_goTypes = []any{
	(*Operation)(nil),              // 0: com.coralogixapis.service_catalog.v1.Operation
	(*wrapperspb.StringValue)(nil), // 1: google.protobuf.StringValue
	(*UnitValue)(nil),              // 2: com.coralogixapis.service_catalog.v1.UnitValue
}
var file_com_coralogixapis_service_catalog_v1_operation_proto_depIdxs = []int32{
	1,  // 0: com.coralogixapis.service_catalog.v1.Operation.operation:type_name -> google.protobuf.StringValue
	1,  // 1: com.coralogixapis.service_catalog.v1.Operation.method:type_name -> google.protobuf.StringValue
	2,  // 2: com.coralogixapis.service_catalog.v1.Operation.p99_response_time:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 3: com.coralogixapis.service_catalog.v1.Operation.p90_response_time:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 4: com.coralogixapis.service_catalog.v1.Operation.p75_response_time:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 5: com.coralogixapis.service_catalog.v1.Operation.p50_response_time:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 6: com.coralogixapis.service_catalog.v1.Operation.avg_response_time:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 7: com.coralogixapis.service_catalog.v1.Operation.requests:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 8: com.coralogixapis.service_catalog.v1.Operation.throughput:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 9: com.coralogixapis.service_catalog.v1.Operation.max_throughput:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 10: com.coralogixapis.service_catalog.v1.Operation.errors:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 11: com.coralogixapis.service_catalog.v1.Operation.errors_per_minute:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 12: com.coralogixapis.service_catalog.v1.Operation.max_errors_per_minute:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 13: com.coralogixapis.service_catalog.v1.Operation.errors_per_second:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 14: com.coralogixapis.service_catalog.v1.Operation.time_consuming:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 15: com.coralogixapis.service_catalog.v1.Operation.time_consuming_percentage:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 16: com.coralogixapis.service_catalog.v1.Operation.p95_response_time:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 17: com.coralogixapis.service_catalog.v1.Operation.errors_percentage:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 18: com.coralogixapis.service_catalog.v1.Operation.p99_response_time_with_offset:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 19: com.coralogixapis.service_catalog.v1.Operation.p90_response_time_with_offset:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 20: com.coralogixapis.service_catalog.v1.Operation.p75_response_time_with_offset:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 21: com.coralogixapis.service_catalog.v1.Operation.p50_response_time_with_offset:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 22: com.coralogixapis.service_catalog.v1.Operation.avg_response_time_with_offset:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 23: com.coralogixapis.service_catalog.v1.Operation.requests_with_offset:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 24: com.coralogixapis.service_catalog.v1.Operation.throughput_with_offset:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 25: com.coralogixapis.service_catalog.v1.Operation.max_throughput_with_offset:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 26: com.coralogixapis.service_catalog.v1.Operation.errors_with_offset:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 27: com.coralogixapis.service_catalog.v1.Operation.errors_per_minute_with_offset:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 28: com.coralogixapis.service_catalog.v1.Operation.max_errors_per_minute_with_offset:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 29: com.coralogixapis.service_catalog.v1.Operation.errors_per_second_with_offset:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 30: com.coralogixapis.service_catalog.v1.Operation.time_consuming_with_offset:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 31: com.coralogixapis.service_catalog.v1.Operation.time_consuming_percentage_with_offset:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 32: com.coralogixapis.service_catalog.v1.Operation.p95_response_time_with_offset:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	2,  // 33: com.coralogixapis.service_catalog.v1.Operation.errors_percentage_with_offset:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_service_catalog_v1_operation_proto_init() }
func file_com_coralogixapis_service_catalog_v1_operation_proto_init() {
	if File_com_coralogixapis_service_catalog_v1_operation_proto != nil {
		return
	}
	file_com_coralogixapis_service_catalog_v1_transaction_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_service_catalog_v1_operation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogixapis_service_catalog_v1_operation_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_service_catalog_v1_operation_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_service_catalog_v1_operation_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_service_catalog_v1_operation_proto = out.File
	file_com_coralogixapis_service_catalog_v1_operation_proto_rawDesc = nil
	file_com_coralogixapis_service_catalog_v1_operation_proto_goTypes = nil
	file_com_coralogixapis_service_catalog_v1_operation_proto_depIdxs = nil
}
