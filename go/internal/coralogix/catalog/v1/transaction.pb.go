// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.1
// source: com/coralogixapis/service_catalog/v1/transaction.proto

package v1

import (
	v1 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/widgets/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Source int32

const (
	Source_SOURCE_UNSPECIFIED Source = 0
	Source_SOURCE_WEB         Source = 1
	Source_SOURCE_EXTERNAL    Source = 2
	Source_SOURCE_INTERNAL    Source = 3
)

// Enum value maps for Source.
var (
	Source_name = map[int32]string{
		0: "SOURCE_UNSPECIFIED",
		1: "SOURCE_WEB",
		2: "SOURCE_EXTERNAL",
		3: "SOURCE_INTERNAL",
	}
	Source_value = map[string]int32{
		"SOURCE_UNSPECIFIED": 0,
		"SOURCE_WEB":         1,
		"SOURCE_EXTERNAL":    2,
		"SOURCE_INTERNAL":    3,
	}
)

func (x Source) Enum() *Source {
	p := new(Source)
	*p = x
	return p
}

func (x Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Source) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_service_catalog_v1_transaction_proto_enumTypes[0].Descriptor()
}

func (Source) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_service_catalog_v1_transaction_proto_enumTypes[0]
}

func (x Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Source.Descriptor instead.
func (Source) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_transaction_proto_rawDescGZIP(), []int{0}
}

type UnitValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  v1.Unit                 `protobuf:"varint,2,opt,name=unit,proto3,enum=com.coralogixapis.apm.widgets.v1.Unit" json:"unit,omitempty"`
	Query *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *UnitValue) Reset() {
	*x = UnitValue{}
	mi := &file_com_coralogixapis_service_catalog_v1_transaction_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnitValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitValue) ProtoMessage() {}

func (x *UnitValue) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_transaction_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitValue.ProtoReflect.Descriptor instead.
func (*UnitValue) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *UnitValue) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UnitValue) GetUnit() v1.Unit {
	if x != nil {
		return x.Unit
	}
	return v1.Unit(0)
}

func (x *UnitValue) GetQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.Query
	}
	return nil
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionName         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=transaction_name,json=transactionName,proto3" json:"transaction_name,omitempty"`
	Source                  Source                  `protobuf:"varint,2,opt,name=source,proto3,enum=com.coralogixapis.service_catalog.v1.Source" json:"source,omitempty"`
	AvgResponseTime         *UnitValue              `protobuf:"bytes,3,opt,name=avg_response_time,json=avgResponseTime,proto3" json:"avg_response_time,omitempty"`
	P95ResponseTime         *UnitValue              `protobuf:"bytes,4,opt,name=p95_response_time,json=p95ResponseTime,proto3" json:"p95_response_time,omitempty"`
	P99ResponseTime         *UnitValue              `protobuf:"bytes,5,opt,name=p99_response_time,json=p99ResponseTime,proto3" json:"p99_response_time,omitempty"`
	P90ResponseTime         *UnitValue              `protobuf:"bytes,13,opt,name=p90_response_time,json=p90ResponseTime,proto3" json:"p90_response_time,omitempty"`
	P75ResponseTime         *UnitValue              `protobuf:"bytes,14,opt,name=p75_response_time,json=p75ResponseTime,proto3" json:"p75_response_time,omitempty"`
	P50ResponseTime         *UnitValue              `protobuf:"bytes,15,opt,name=p50_response_time,json=p50ResponseTime,proto3" json:"p50_response_time,omitempty"`
	AvgThroughput           *UnitValue              `protobuf:"bytes,6,opt,name=avg_throughput,json=avgThroughput,proto3" json:"avg_throughput,omitempty"`
	MaxThroughput           *UnitValue              `protobuf:"bytes,16,opt,name=max_throughput,json=maxThroughput,proto3" json:"max_throughput,omitempty"`
	AvgErrorRate            *UnitValue              `protobuf:"bytes,7,opt,name=avg_error_rate,json=avgErrorRate,proto3" json:"avg_error_rate,omitempty"`
	MaxErrorRate            *UnitValue              `protobuf:"bytes,17,opt,name=max_error_rate,json=maxErrorRate,proto3" json:"max_error_rate,omitempty"`
	AvgErrorRateSeconds     *UnitValue              `protobuf:"bytes,18,opt,name=avg_error_rate_seconds,json=avgErrorRateSeconds,proto3" json:"avg_error_rate_seconds,omitempty"`
	TotalRequests           *UnitValue              `protobuf:"bytes,8,opt,name=total_requests,json=totalRequests,proto3" json:"total_requests,omitempty"`
	TotalErrors             *UnitValue              `protobuf:"bytes,9,opt,name=total_errors,json=totalErrors,proto3" json:"total_errors,omitempty"`
	ErrorsPercentage        *UnitValue              `protobuf:"bytes,10,opt,name=errors_percentage,json=errorsPercentage,proto3" json:"errors_percentage,omitempty"`
	TimeConsumingPercentage *UnitValue              `protobuf:"bytes,11,opt,name=time_consuming_percentage,json=timeConsumingPercentage,proto3" json:"time_consuming_percentage,omitempty"`
	Method                  *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=method,proto3" json:"method,omitempty"`
	SubflowCount            *UnitValue              `protobuf:"bytes,19,opt,name=subflow_count,json=subflowCount,proto3" json:"subflow_count,omitempty"`
	TotalResponseTime       *UnitValue              `protobuf:"bytes,20,opt,name=total_response_time,json=totalResponseTime,proto3" json:"total_response_time,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_com_coralogixapis_service_catalog_v1_transaction_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_transaction_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *Transaction) GetTransactionName() *wrapperspb.StringValue {
	if x != nil {
		return x.TransactionName
	}
	return nil
}

func (x *Transaction) GetSource() Source {
	if x != nil {
		return x.Source
	}
	return Source_SOURCE_UNSPECIFIED
}

func (x *Transaction) GetAvgResponseTime() *UnitValue {
	if x != nil {
		return x.AvgResponseTime
	}
	return nil
}

func (x *Transaction) GetP95ResponseTime() *UnitValue {
	if x != nil {
		return x.P95ResponseTime
	}
	return nil
}

func (x *Transaction) GetP99ResponseTime() *UnitValue {
	if x != nil {
		return x.P99ResponseTime
	}
	return nil
}

func (x *Transaction) GetP90ResponseTime() *UnitValue {
	if x != nil {
		return x.P90ResponseTime
	}
	return nil
}

func (x *Transaction) GetP75ResponseTime() *UnitValue {
	if x != nil {
		return x.P75ResponseTime
	}
	return nil
}

func (x *Transaction) GetP50ResponseTime() *UnitValue {
	if x != nil {
		return x.P50ResponseTime
	}
	return nil
}

func (x *Transaction) GetAvgThroughput() *UnitValue {
	if x != nil {
		return x.AvgThroughput
	}
	return nil
}

func (x *Transaction) GetMaxThroughput() *UnitValue {
	if x != nil {
		return x.MaxThroughput
	}
	return nil
}

func (x *Transaction) GetAvgErrorRate() *UnitValue {
	if x != nil {
		return x.AvgErrorRate
	}
	return nil
}

func (x *Transaction) GetMaxErrorRate() *UnitValue {
	if x != nil {
		return x.MaxErrorRate
	}
	return nil
}

func (x *Transaction) GetAvgErrorRateSeconds() *UnitValue {
	if x != nil {
		return x.AvgErrorRateSeconds
	}
	return nil
}

func (x *Transaction) GetTotalRequests() *UnitValue {
	if x != nil {
		return x.TotalRequests
	}
	return nil
}

func (x *Transaction) GetTotalErrors() *UnitValue {
	if x != nil {
		return x.TotalErrors
	}
	return nil
}

func (x *Transaction) GetErrorsPercentage() *UnitValue {
	if x != nil {
		return x.ErrorsPercentage
	}
	return nil
}

func (x *Transaction) GetTimeConsumingPercentage() *UnitValue {
	if x != nil {
		return x.TimeConsumingPercentage
	}
	return nil
}

func (x *Transaction) GetMethod() *wrapperspb.StringValue {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Transaction) GetSubflowCount() *UnitValue {
	if x != nil {
		return x.SubflowCount
	}
	return nil
}

func (x *Transaction) GetTotalResponseTime() *UnitValue {
	if x != nil {
		return x.TotalResponseTime
	}
	return nil
}

type SegmentBreakDown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentName         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=segment_name,json=segmentName,proto3" json:"segment_name,omitempty"`
	AvgThroughput       *UnitValue              `protobuf:"bytes,2,opt,name=avg_throughput,json=avgThroughput,proto3" json:"avg_throughput,omitempty"`
	MaxThroughput       *UnitValue              `protobuf:"bytes,15,opt,name=max_throughput,json=maxThroughput,proto3" json:"max_throughput,omitempty"`
	AvgResponseTime     *UnitValue              `protobuf:"bytes,3,opt,name=avg_response_time,json=avgResponseTime,proto3" json:"avg_response_time,omitempty"`
	AvgErrorRate        *UnitValue              `protobuf:"bytes,4,opt,name=avg_error_rate,json=avgErrorRate,proto3" json:"avg_error_rate,omitempty"`
	MaxErrorRate        *UnitValue              `protobuf:"bytes,16,opt,name=max_error_rate,json=maxErrorRate,proto3" json:"max_error_rate,omitempty"`
	AvgErrorRateSeconds *UnitValue              `protobuf:"bytes,17,opt,name=avg_error_rate_seconds,json=avgErrorRateSeconds,proto3" json:"avg_error_rate_seconds,omitempty"`
	// Deprecated: Marked as deprecated in com/coralogixapis/service_catalog/v1/transaction.proto.
	AvgTransactionPercentage *UnitValue `protobuf:"bytes,5,opt,name=avg_transaction_percentage,json=avgTransactionPercentage,proto3" json:"avg_transaction_percentage,omitempty"`
	// Deprecated: Marked as deprecated in com/coralogixapis/service_catalog/v1/transaction.proto.
	Errors                  *UnitValue              `protobuf:"bytes,6,opt,name=errors,proto3" json:"errors,omitempty"`
	P95ResponseTime         *UnitValue              `protobuf:"bytes,7,opt,name=p95_response_time,json=p95ResponseTime,proto3" json:"p95_response_time,omitempty"`
	P99ResponseTime         *UnitValue              `protobuf:"bytes,8,opt,name=p99_response_time,json=p99ResponseTime,proto3" json:"p99_response_time,omitempty"`
	P90ResponseTime         *UnitValue              `protobuf:"bytes,18,opt,name=p90_response_time,json=p90ResponseTime,proto3" json:"p90_response_time,omitempty"`
	P75ResponseTime         *UnitValue              `protobuf:"bytes,19,opt,name=p75_response_time,json=p75ResponseTime,proto3" json:"p75_response_time,omitempty"`
	P50ResponseTime         *UnitValue              `protobuf:"bytes,20,opt,name=p50_response_time,json=p50ResponseTime,proto3" json:"p50_response_time,omitempty"`
	SubflowCount            *UnitValue              `protobuf:"bytes,21,opt,name=subflow_count,json=subflowCount,proto3" json:"subflow_count,omitempty"`
	Method                  *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=method,proto3" json:"method,omitempty"`
	TotalRequests           *UnitValue              `protobuf:"bytes,10,opt,name=total_requests,json=totalRequests,proto3" json:"total_requests,omitempty"`
	TotalErrors             *UnitValue              `protobuf:"bytes,11,opt,name=total_errors,json=totalErrors,proto3" json:"total_errors,omitempty"`
	ErrorsPercentage        *UnitValue              `protobuf:"bytes,12,opt,name=errors_percentage,json=errorsPercentage,proto3" json:"errors_percentage,omitempty"`
	TimeConsumingPercentage *UnitValue              `protobuf:"bytes,13,opt,name=time_consuming_percentage,json=timeConsumingPercentage,proto3" json:"time_consuming_percentage,omitempty"`
	IsTransactionRoot       *wrapperspb.BoolValue   `protobuf:"bytes,14,opt,name=is_transaction_root,json=isTransactionRoot,proto3" json:"is_transaction_root,omitempty"`
	TotalResponseTime       *UnitValue              `protobuf:"bytes,22,opt,name=total_response_time,json=totalResponseTime,proto3" json:"total_response_time,omitempty"`
}

func (x *SegmentBreakDown) Reset() {
	*x = SegmentBreakDown{}
	mi := &file_com_coralogixapis_service_catalog_v1_transaction_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SegmentBreakDown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentBreakDown) ProtoMessage() {}

func (x *SegmentBreakDown) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_transaction_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentBreakDown.ProtoReflect.Descriptor instead.
func (*SegmentBreakDown) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *SegmentBreakDown) GetSegmentName() *wrapperspb.StringValue {
	if x != nil {
		return x.SegmentName
	}
	return nil
}

func (x *SegmentBreakDown) GetAvgThroughput() *UnitValue {
	if x != nil {
		return x.AvgThroughput
	}
	return nil
}

func (x *SegmentBreakDown) GetMaxThroughput() *UnitValue {
	if x != nil {
		return x.MaxThroughput
	}
	return nil
}

func (x *SegmentBreakDown) GetAvgResponseTime() *UnitValue {
	if x != nil {
		return x.AvgResponseTime
	}
	return nil
}

func (x *SegmentBreakDown) GetAvgErrorRate() *UnitValue {
	if x != nil {
		return x.AvgErrorRate
	}
	return nil
}

func (x *SegmentBreakDown) GetMaxErrorRate() *UnitValue {
	if x != nil {
		return x.MaxErrorRate
	}
	return nil
}

func (x *SegmentBreakDown) GetAvgErrorRateSeconds() *UnitValue {
	if x != nil {
		return x.AvgErrorRateSeconds
	}
	return nil
}

// Deprecated: Marked as deprecated in com/coralogixapis/service_catalog/v1/transaction.proto.
func (x *SegmentBreakDown) GetAvgTransactionPercentage() *UnitValue {
	if x != nil {
		return x.AvgTransactionPercentage
	}
	return nil
}

// Deprecated: Marked as deprecated in com/coralogixapis/service_catalog/v1/transaction.proto.
func (x *SegmentBreakDown) GetErrors() *UnitValue {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *SegmentBreakDown) GetP95ResponseTime() *UnitValue {
	if x != nil {
		return x.P95ResponseTime
	}
	return nil
}

func (x *SegmentBreakDown) GetP99ResponseTime() *UnitValue {
	if x != nil {
		return x.P99ResponseTime
	}
	return nil
}

func (x *SegmentBreakDown) GetP90ResponseTime() *UnitValue {
	if x != nil {
		return x.P90ResponseTime
	}
	return nil
}

func (x *SegmentBreakDown) GetP75ResponseTime() *UnitValue {
	if x != nil {
		return x.P75ResponseTime
	}
	return nil
}

func (x *SegmentBreakDown) GetP50ResponseTime() *UnitValue {
	if x != nil {
		return x.P50ResponseTime
	}
	return nil
}

func (x *SegmentBreakDown) GetSubflowCount() *UnitValue {
	if x != nil {
		return x.SubflowCount
	}
	return nil
}

func (x *SegmentBreakDown) GetMethod() *wrapperspb.StringValue {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *SegmentBreakDown) GetTotalRequests() *UnitValue {
	if x != nil {
		return x.TotalRequests
	}
	return nil
}

func (x *SegmentBreakDown) GetTotalErrors() *UnitValue {
	if x != nil {
		return x.TotalErrors
	}
	return nil
}

func (x *SegmentBreakDown) GetErrorsPercentage() *UnitValue {
	if x != nil {
		return x.ErrorsPercentage
	}
	return nil
}

func (x *SegmentBreakDown) GetTimeConsumingPercentage() *UnitValue {
	if x != nil {
		return x.TimeConsumingPercentage
	}
	return nil
}

func (x *SegmentBreakDown) GetIsTransactionRoot() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsTransactionRoot
	}
	return nil
}

func (x *SegmentBreakDown) GetTotalResponseTime() *UnitValue {
	if x != nil {
		return x.TotalResponseTime
	}
	return nil
}

var File_com_coralogixapis_service_catalog_v1_transaction_proto protoreflect.FileDescriptor

var file_com_coralogixapis_service_catalog_v1_transaction_proto_rawDesc = []byte{
	0x0a, 0x36, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x01, 0x0a,
	0x09, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a,
	0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xf2,
	0x0d, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47,
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5b, 0x0a,
	0x11, 0x61, 0x76, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x61, 0x76, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x11, 0x70, 0x39,
	0x35, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x39, 0x35, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x11, 0x70, 0x39, 0x39, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x39, 0x39, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x11, 0x70, 0x39, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x70, 0x39, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x5b, 0x0a, 0x11, 0x70, 0x37, 0x35, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70,
	0x37, 0x35, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5b,
	0x0a, 0x11, 0x70, 0x35, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x35, 0x30, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x0e, 0x61,
	0x76, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x76, 0x67, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x70, 0x75, 0x74, 0x12, 0x56, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6d, 0x61,
	0x78, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x55, 0x0a, 0x0e, 0x61,
	0x76, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x78,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x64, 0x0a, 0x16, 0x61, 0x76, 0x67,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x61, 0x76, 0x67, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x56, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x11, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x6b, 0x0a, 0x19, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x74,
	0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x54, 0x0a, 0x0d,
	0x73, 0x75, 0x62, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xb5, 0x0f, 0x0a, 0x10, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x0e, 0x61, 0x76, 0x67,
	0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x61, 0x76, 0x67, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75,
	0x74, 0x12, 0x56, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x70, 0x75, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x54,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x5b, 0x0a, 0x11, 0x61, 0x76, 0x67,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x61, 0x76, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x61, 0x76, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a,
	0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x64, 0x0a, 0x16, 0x61, 0x76, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x61, 0x76, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x71, 0x0a, 0x1a, 0x61, 0x76,
	0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x18, 0x61, 0x76, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x11, 0x70, 0x39,
	0x35, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x39, 0x35, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x11, 0x70, 0x39, 0x39, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x39, 0x39, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x11, 0x70, 0x39, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x70, 0x39, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x5b, 0x0a, 0x11, 0x70, 0x37, 0x35, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70,
	0x37, 0x35, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5b,
	0x0a, 0x11, 0x70, 0x35, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x35, 0x30, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x56, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x52, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x6b, 0x0a, 0x19, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x4a,
	0x0a, 0x13, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x5f, 0x0a, 0x13, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x5a, 0x0a, 0x06, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_service_catalog_v1_transaction_proto_rawDescOnce sync.Once
	file_com_coralogixapis_service_catalog_v1_transaction_proto_rawDescData = file_com_coralogixapis_service_catalog_v1_transaction_proto_rawDesc
)

func file_com_coralogixapis_service_catalog_v1_transaction_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_service_catalog_v1_transaction_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_service_catalog_v1_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_service_catalog_v1_transaction_proto_rawDescData)
	})
	return file_com_coralogixapis_service_catalog_v1_transaction_proto_rawDescData
}

var file_com_coralogixapis_service_catalog_v1_transaction_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_coralogixapis_service_catalog_v1_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_com_coralogixapis_service_catalog_v1_transaction_proto_goTypes = []any{
	(Source)(0),                    // 0: com.coralogixapis.service_catalog.v1.Source
	(*UnitValue)(nil),              // 1: com.coralogixapis.service_catalog.v1.UnitValue
	(*Transaction)(nil),            // 2: com.coralogixapis.service_catalog.v1.Transaction
	(*SegmentBreakDown)(nil),       // 3: com.coralogixapis.service_catalog.v1.SegmentBreakDown
	(*wrapperspb.StringValue)(nil), // 4: google.protobuf.StringValue
	(v1.Unit)(0),                   // 5: com.coralogixapis.apm.widgets.v1.Unit
	(*wrapperspb.BoolValue)(nil),   // 6: google.protobuf.BoolValue
}
var file_com_coralogixapis_service_catalog_v1_transaction_proto_depIdxs = []int32{
	4,  // 0: com.coralogixapis.service_catalog.v1.UnitValue.value:type_name -> google.protobuf.StringValue
	5,  // 1: com.coralogixapis.service_catalog.v1.UnitValue.unit:type_name -> com.coralogixapis.apm.widgets.v1.Unit
	4,  // 2: com.coralogixapis.service_catalog.v1.UnitValue.query:type_name -> google.protobuf.StringValue
	4,  // 3: com.coralogixapis.service_catalog.v1.Transaction.transaction_name:type_name -> google.protobuf.StringValue
	0,  // 4: com.coralogixapis.service_catalog.v1.Transaction.source:type_name -> com.coralogixapis.service_catalog.v1.Source
	1,  // 5: com.coralogixapis.service_catalog.v1.Transaction.avg_response_time:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 6: com.coralogixapis.service_catalog.v1.Transaction.p95_response_time:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 7: com.coralogixapis.service_catalog.v1.Transaction.p99_response_time:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 8: com.coralogixapis.service_catalog.v1.Transaction.p90_response_time:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 9: com.coralogixapis.service_catalog.v1.Transaction.p75_response_time:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 10: com.coralogixapis.service_catalog.v1.Transaction.p50_response_time:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 11: com.coralogixapis.service_catalog.v1.Transaction.avg_throughput:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 12: com.coralogixapis.service_catalog.v1.Transaction.max_throughput:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 13: com.coralogixapis.service_catalog.v1.Transaction.avg_error_rate:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 14: com.coralogixapis.service_catalog.v1.Transaction.max_error_rate:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 15: com.coralogixapis.service_catalog.v1.Transaction.avg_error_rate_seconds:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 16: com.coralogixapis.service_catalog.v1.Transaction.total_requests:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 17: com.coralogixapis.service_catalog.v1.Transaction.total_errors:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 18: com.coralogixapis.service_catalog.v1.Transaction.errors_percentage:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 19: com.coralogixapis.service_catalog.v1.Transaction.time_consuming_percentage:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	4,  // 20: com.coralogixapis.service_catalog.v1.Transaction.method:type_name -> google.protobuf.StringValue
	1,  // 21: com.coralogixapis.service_catalog.v1.Transaction.subflow_count:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 22: com.coralogixapis.service_catalog.v1.Transaction.total_response_time:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	4,  // 23: com.coralogixapis.service_catalog.v1.SegmentBreakDown.segment_name:type_name -> google.protobuf.StringValue
	1,  // 24: com.coralogixapis.service_catalog.v1.SegmentBreakDown.avg_throughput:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 25: com.coralogixapis.service_catalog.v1.SegmentBreakDown.max_throughput:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 26: com.coralogixapis.service_catalog.v1.SegmentBreakDown.avg_response_time:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 27: com.coralogixapis.service_catalog.v1.SegmentBreakDown.avg_error_rate:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 28: com.coralogixapis.service_catalog.v1.SegmentBreakDown.max_error_rate:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 29: com.coralogixapis.service_catalog.v1.SegmentBreakDown.avg_error_rate_seconds:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 30: com.coralogixapis.service_catalog.v1.SegmentBreakDown.avg_transaction_percentage:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 31: com.coralogixapis.service_catalog.v1.SegmentBreakDown.errors:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 32: com.coralogixapis.service_catalog.v1.SegmentBreakDown.p95_response_time:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 33: com.coralogixapis.service_catalog.v1.SegmentBreakDown.p99_response_time:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 34: com.coralogixapis.service_catalog.v1.SegmentBreakDown.p90_response_time:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 35: com.coralogixapis.service_catalog.v1.SegmentBreakDown.p75_response_time:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 36: com.coralogixapis.service_catalog.v1.SegmentBreakDown.p50_response_time:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 37: com.coralogixapis.service_catalog.v1.SegmentBreakDown.subflow_count:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	4,  // 38: com.coralogixapis.service_catalog.v1.SegmentBreakDown.method:type_name -> google.protobuf.StringValue
	1,  // 39: com.coralogixapis.service_catalog.v1.SegmentBreakDown.total_requests:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 40: com.coralogixapis.service_catalog.v1.SegmentBreakDown.total_errors:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 41: com.coralogixapis.service_catalog.v1.SegmentBreakDown.errors_percentage:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	1,  // 42: com.coralogixapis.service_catalog.v1.SegmentBreakDown.time_consuming_percentage:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	6,  // 43: com.coralogixapis.service_catalog.v1.SegmentBreakDown.is_transaction_root:type_name -> google.protobuf.BoolValue
	1,  // 44: com.coralogixapis.service_catalog.v1.SegmentBreakDown.total_response_time:type_name -> com.coralogixapis.service_catalog.v1.UnitValue
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_service_catalog_v1_transaction_proto_init() }
func file_com_coralogixapis_service_catalog_v1_transaction_proto_init() {
	if File_com_coralogixapis_service_catalog_v1_transaction_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_service_catalog_v1_transaction_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogixapis_service_catalog_v1_transaction_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_service_catalog_v1_transaction_proto_depIdxs,
		EnumInfos:         file_com_coralogixapis_service_catalog_v1_transaction_proto_enumTypes,
		MessageInfos:      file_com_coralogixapis_service_catalog_v1_transaction_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_service_catalog_v1_transaction_proto = out.File
	file_com_coralogixapis_service_catalog_v1_transaction_proto_rawDesc = nil
	file_com_coralogixapis_service_catalog_v1_transaction_proto_goTypes = nil
	file_com_coralogixapis_service_catalog_v1_transaction_proto_depIdxs = nil
}
