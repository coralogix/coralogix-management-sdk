// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.26.1
// source: com/coralogix/catalog/v1/service_catalog_sevice.proto

package v1

import (
	v1 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogix/schemastore/v1"
	v3 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/alerts/v3"
	v2 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/common/v2"
	_ "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/widgets/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetServicesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *ServiceQuery          `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServicesRequest) Reset() {
	*x = GetServicesRequest{}
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesRequest) ProtoMessage() {}

func (x *GetServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesRequest.ProtoReflect.Descriptor instead.
func (*GetServicesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDescGZIP(), []int{0}
}

func (x *GetServicesRequest) GetQuery() *ServiceQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type GetServicesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Services      []*Service             `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServicesResponse) Reset() {
	*x = GetServicesResponse{}
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesResponse) ProtoMessage() {}

func (x *GetServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesResponse.ProtoReflect.Descriptor instead.
func (*GetServicesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDescGZIP(), []int{1}
}

func (x *GetServicesResponse) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

type GetServiceRequest struct {
	state                 protoimpl.MessageState  `protogen:"open.v1"`
	ServiceId             *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ServiceName           *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	TimeRange             *TimeRange              `protobuf:"bytes,3,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	ServiceCatalogFilters []*ApmFilter            `protobuf:"bytes,4,rep,name=service_catalog_filters,json=serviceCatalogFilters,proto3" json:"service_catalog_filters,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetServiceRequest) Reset() {
	*x = GetServiceRequest{}
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceRequest) ProtoMessage() {}

func (x *GetServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceRequest.ProtoReflect.Descriptor instead.
func (*GetServiceRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDescGZIP(), []int{2}
}

func (x *GetServiceRequest) GetServiceId() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceId
	}
	return nil
}

func (x *GetServiceRequest) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *GetServiceRequest) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetServiceRequest) GetServiceCatalogFilters() []*ApmFilter {
	if x != nil {
		return x.ServiceCatalogFilters
	}
	return nil
}

type GetServiceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Service       *Service               `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServiceResponse) Reset() {
	*x = GetServiceResponse{}
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceResponse) ProtoMessage() {}

func (x *GetServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceResponse.ProtoReflect.Descriptor instead.
func (*GetServiceResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDescGZIP(), []int{3}
}

func (x *GetServiceResponse) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

type UpdateServiceCatalogFiltersRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ServiceCatalogFilters []*ApmFilter           `protobuf:"bytes,1,rep,name=service_catalog_filters,json=serviceCatalogFilters,proto3" json:"service_catalog_filters,omitempty"`
	ApmSource             ApmSource              `protobuf:"varint,2,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	AlertLabelFilters     []*v2.AlertMetaLabel   `protobuf:"bytes,3,rep,name=alert_label_filters,json=alertLabelFilters,proto3" json:"alert_label_filters,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *UpdateServiceCatalogFiltersRequest) Reset() {
	*x = UpdateServiceCatalogFiltersRequest{}
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateServiceCatalogFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceCatalogFiltersRequest) ProtoMessage() {}

func (x *UpdateServiceCatalogFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceCatalogFiltersRequest.ProtoReflect.Descriptor instead.
func (*UpdateServiceCatalogFiltersRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateServiceCatalogFiltersRequest) GetServiceCatalogFilters() []*ApmFilter {
	if x != nil {
		return x.ServiceCatalogFilters
	}
	return nil
}

func (x *UpdateServiceCatalogFiltersRequest) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

func (x *UpdateServiceCatalogFiltersRequest) GetAlertLabelFilters() []*v2.AlertMetaLabel {
	if x != nil {
		return x.AlertLabelFilters
	}
	return nil
}

type UpdateServiceCatalogFiltersResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ServiceCatalogFilters []*ApmFilter           `protobuf:"bytes,1,rep,name=service_catalog_filters,json=serviceCatalogFilters,proto3" json:"service_catalog_filters,omitempty"`
	ApmSource             ApmSource              `protobuf:"varint,2,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *UpdateServiceCatalogFiltersResponse) Reset() {
	*x = UpdateServiceCatalogFiltersResponse{}
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateServiceCatalogFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceCatalogFiltersResponse) ProtoMessage() {}

func (x *UpdateServiceCatalogFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceCatalogFiltersResponse.ProtoReflect.Descriptor instead.
func (*UpdateServiceCatalogFiltersResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateServiceCatalogFiltersResponse) GetServiceCatalogFilters() []*ApmFilter {
	if x != nil {
		return x.ServiceCatalogFilters
	}
	return nil
}

func (x *UpdateServiceCatalogFiltersResponse) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

type GetServiceCatalogFiltersRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	ServiceName   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ApmSource     ApmSource               `protobuf:"varint,2,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	TimeRange     *TimeRange              `protobuf:"bytes,3,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	OnlyErrors    *wrapperspb.BoolValue   `protobuf:"bytes,4,opt,name=only_errors,json=onlyErrors,proto3" json:"only_errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServiceCatalogFiltersRequest) Reset() {
	*x = GetServiceCatalogFiltersRequest{}
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceCatalogFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceCatalogFiltersRequest) ProtoMessage() {}

func (x *GetServiceCatalogFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceCatalogFiltersRequest.ProtoReflect.Descriptor instead.
func (*GetServiceCatalogFiltersRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDescGZIP(), []int{6}
}

func (x *GetServiceCatalogFiltersRequest) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *GetServiceCatalogFiltersRequest) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

func (x *GetServiceCatalogFiltersRequest) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetServiceCatalogFiltersRequest) GetOnlyErrors() *wrapperspb.BoolValue {
	if x != nil {
		return x.OnlyErrors
	}
	return nil
}

type GetServiceCatalogFiltersResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ServiceCatalogFilters []*ApmFilter           `protobuf:"bytes,1,rep,name=service_catalog_filters,json=serviceCatalogFilters,proto3" json:"service_catalog_filters,omitempty"`
	ApmSource             ApmSource              `protobuf:"varint,2,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetServiceCatalogFiltersResponse) Reset() {
	*x = GetServiceCatalogFiltersResponse{}
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceCatalogFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceCatalogFiltersResponse) ProtoMessage() {}

func (x *GetServiceCatalogFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceCatalogFiltersResponse.ProtoReflect.Descriptor instead.
func (*GetServiceCatalogFiltersResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDescGZIP(), []int{7}
}

func (x *GetServiceCatalogFiltersResponse) GetServiceCatalogFilters() []*ApmFilter {
	if x != nil {
		return x.ServiceCatalogFilters
	}
	return nil
}

func (x *GetServiceCatalogFiltersResponse) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

type GetServicesColumnsStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *ServiceQuery          `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	ApmSource     ApmSource              `protobuf:"varint,2,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServicesColumnsStreamRequest) Reset() {
	*x = GetServicesColumnsStreamRequest{}
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServicesColumnsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesColumnsStreamRequest) ProtoMessage() {}

func (x *GetServicesColumnsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesColumnsStreamRequest.ProtoReflect.Descriptor instead.
func (*GetServicesColumnsStreamRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDescGZIP(), []int{8}
}

func (x *GetServicesColumnsStreamRequest) GetQuery() *ServiceQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *GetServicesColumnsStreamRequest) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

type GetServicesColumnsStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Services      []*ServiceData         `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	ApmSource     ApmSource              `protobuf:"varint,2,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServicesColumnsStreamResponse) Reset() {
	*x = GetServicesColumnsStreamResponse{}
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServicesColumnsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesColumnsStreamResponse) ProtoMessage() {}

func (x *GetServicesColumnsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesColumnsStreamResponse.ProtoReflect.Descriptor instead.
func (*GetServicesColumnsStreamResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDescGZIP(), []int{9}
}

func (x *GetServicesColumnsStreamResponse) GetServices() []*ServiceData {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *GetServicesColumnsStreamResponse) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

type GetSpanMetricBucketsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpanMetricBucketsRequest) Reset() {
	*x = GetSpanMetricBucketsRequest{}
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpanMetricBucketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpanMetricBucketsRequest) ProtoMessage() {}

func (x *GetSpanMetricBucketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpanMetricBucketsRequest.ProtoReflect.Descriptor instead.
func (*GetSpanMetricBucketsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDescGZIP(), []int{10}
}

type GetSpanMetricBucketsResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	MetricBuckets []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=metricBuckets,proto3" json:"metricBuckets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpanMetricBucketsResponse) Reset() {
	*x = GetSpanMetricBucketsResponse{}
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpanMetricBucketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpanMetricBucketsResponse) ProtoMessage() {}

func (x *GetSpanMetricBucketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpanMetricBucketsResponse.ProtoReflect.Descriptor instead.
func (*GetSpanMetricBucketsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDescGZIP(), []int{11}
}

func (x *GetSpanMetricBucketsResponse) GetMetricBuckets() []*wrapperspb.StringValue {
	if x != nil {
		return x.MetricBuckets
	}
	return nil
}

type GetAffectedAlertsRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ServiceCatalogFilters []*ApmFilter           `protobuf:"bytes,1,rep,name=service_catalog_filters,json=serviceCatalogFilters,proto3" json:"service_catalog_filters,omitempty"`
	AlertLabelFilters     []*v2.AlertMetaLabel   `protobuf:"bytes,2,rep,name=alert_label_filters,json=alertLabelFilters,proto3" json:"alert_label_filters,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetAffectedAlertsRequest) Reset() {
	*x = GetAffectedAlertsRequest{}
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAffectedAlertsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAffectedAlertsRequest) ProtoMessage() {}

func (x *GetAffectedAlertsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAffectedAlertsRequest.ProtoReflect.Descriptor instead.
func (*GetAffectedAlertsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDescGZIP(), []int{12}
}

func (x *GetAffectedAlertsRequest) GetServiceCatalogFilters() []*ApmFilter {
	if x != nil {
		return x.ServiceCatalogFilters
	}
	return nil
}

func (x *GetAffectedAlertsRequest) GetAlertLabelFilters() []*v2.AlertMetaLabel {
	if x != nil {
		return x.AlertLabelFilters
	}
	return nil
}

type GetAffectedAlertsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Alerts        []*v3.AlertDef         `protobuf:"bytes,1,rep,name=alerts,proto3" json:"alerts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAffectedAlertsResponse) Reset() {
	*x = GetAffectedAlertsResponse{}
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAffectedAlertsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAffectedAlertsResponse) ProtoMessage() {}

func (x *GetAffectedAlertsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAffectedAlertsResponse.ProtoReflect.Descriptor instead.
func (*GetAffectedAlertsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDescGZIP(), []int{13}
}

func (x *GetAffectedAlertsResponse) GetAlerts() []*v3.AlertDef {
	if x != nil {
		return x.Alerts
	}
	return nil
}

var File_com_coralogix_catalog_v1_service_catalog_sevice_proto protoreflect.FileDescriptor

var file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDesc = []byte{
	0x0a, 0x35, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x1a, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x25, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2c, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x31, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x35, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61,
	0x70, 0x6d, 0x2f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x54, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x22, 0xb2, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x17, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x51, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x22, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5b, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4e,
	0x0a, 0x0a, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x09, 0x61, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5f,
	0x0a, 0x13, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x11, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22,
	0xd2, 0x01, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x15, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x61, 0x70, 0x6d, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x70, 0x6d,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09,
	0x61, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5b, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4e, 0x0a, 0x0a,
	0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x09, 0x61, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xaf, 0x01, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4e,
	0x0a, 0x0a, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x09, 0x61, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xb5,
	0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x61, 0x70, 0x6d,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61,
	0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x6e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x15, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x5f, 0x0a, 0x13, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x11, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x22, 0x5a, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x66, 0x52, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x32, 0xd6, 0x0a, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7e, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0xc2, 0xb8, 0x02, 0x0e, 0x0a, 0x0c, 0x67, 0x65,
	0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20,
	0xc2, 0xb8, 0x02, 0x1c, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x30, 0x01, 0x12, 0x7a, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0xc2, 0xb8, 0x02,
	0x0d, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb4,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x39, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x21, 0xc2, 0xb8, 0x02, 0x1d, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0xc0, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x24, 0xc2, 0xb8, 0x02, 0x20, 0x0a, 0x1e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0xb9, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x32, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0xc2, 0xb8, 0x02, 0x38, 0x0a, 0x36, 0x67, 0x65,
	0x74, 0x20, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0xa4, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x6e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x6e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0xc2, 0xb8,
	0x02, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x20, 0x53, 0x70, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x20, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0xc2, 0xb8, 0x02, 0x29,
	0x0a, 0x27, 0x47, 0x65, 0x74, 0x20, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x20, 0x42, 0x79, 0x20, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDescOnce sync.Once
	file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDescData = file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDesc
)

func file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDescGZIP() []byte {
	file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDescOnce.Do(func() {
		file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDescData)
	})
	return file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDescData
}

var file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_com_coralogix_catalog_v1_service_catalog_sevice_proto_goTypes = []any{
	(*GetServicesRequest)(nil),                  // 0: com.coralogix.catalog.v1.GetServicesRequest
	(*GetServicesResponse)(nil),                 // 1: com.coralogix.catalog.v1.GetServicesResponse
	(*GetServiceRequest)(nil),                   // 2: com.coralogix.catalog.v1.GetServiceRequest
	(*GetServiceResponse)(nil),                  // 3: com.coralogix.catalog.v1.GetServiceResponse
	(*UpdateServiceCatalogFiltersRequest)(nil),  // 4: com.coralogix.catalog.v1.UpdateServiceCatalogFiltersRequest
	(*UpdateServiceCatalogFiltersResponse)(nil), // 5: com.coralogix.catalog.v1.UpdateServiceCatalogFiltersResponse
	(*GetServiceCatalogFiltersRequest)(nil),     // 6: com.coralogix.catalog.v1.GetServiceCatalogFiltersRequest
	(*GetServiceCatalogFiltersResponse)(nil),    // 7: com.coralogix.catalog.v1.GetServiceCatalogFiltersResponse
	(*GetServicesColumnsStreamRequest)(nil),     // 8: com.coralogix.catalog.v1.GetServicesColumnsStreamRequest
	(*GetServicesColumnsStreamResponse)(nil),    // 9: com.coralogix.catalog.v1.GetServicesColumnsStreamResponse
	(*GetSpanMetricBucketsRequest)(nil),         // 10: com.coralogix.catalog.v1.GetSpanMetricBucketsRequest
	(*GetSpanMetricBucketsResponse)(nil),        // 11: com.coralogix.catalog.v1.GetSpanMetricBucketsResponse
	(*GetAffectedAlertsRequest)(nil),            // 12: com.coralogix.catalog.v1.GetAffectedAlertsRequest
	(*GetAffectedAlertsResponse)(nil),           // 13: com.coralogix.catalog.v1.GetAffectedAlertsResponse
	(*ServiceQuery)(nil),                        // 14: com.coralogix.catalog.v1.ServiceQuery
	(*Service)(nil),                             // 15: com.coralogix.catalog.v1.Service
	(*wrapperspb.StringValue)(nil),              // 16: google.protobuf.StringValue
	(*TimeRange)(nil),                           // 17: com.coralogix.catalog.v1.TimeRange
	(*ApmFilter)(nil),                           // 18: com.coralogix.catalog.v1.ApmFilter
	(ApmSource)(0),                              // 19: com.coralogixapis.service_catalog.v1.ApmSource
	(*v2.AlertMetaLabel)(nil),                   // 20: com.coralogixapis.apm.common.v2.AlertMetaLabel
	(*wrapperspb.BoolValue)(nil),                // 21: google.protobuf.BoolValue
	(*ServiceData)(nil),                         // 22: com.coralogix.catalog.v1.ServiceData
	(*v3.AlertDef)(nil),                         // 23: com.coralogixapis.alerts.v3.AlertDef
	(*v1.TracingFieldsRequest)(nil),             // 24: com.coralogix.schemastore.v1.TracingFieldsRequest
	(*v1.TracingFieldsResponse)(nil),            // 25: com.coralogix.schemastore.v1.TracingFieldsResponse
}
var file_com_coralogix_catalog_v1_service_catalog_sevice_proto_depIdxs = []int32{
	14, // 0: com.coralogix.catalog.v1.GetServicesRequest.query:type_name -> com.coralogix.catalog.v1.ServiceQuery
	15, // 1: com.coralogix.catalog.v1.GetServicesResponse.services:type_name -> com.coralogix.catalog.v1.Service
	16, // 2: com.coralogix.catalog.v1.GetServiceRequest.service_id:type_name -> google.protobuf.StringValue
	16, // 3: com.coralogix.catalog.v1.GetServiceRequest.service_name:type_name -> google.protobuf.StringValue
	17, // 4: com.coralogix.catalog.v1.GetServiceRequest.time_range:type_name -> com.coralogix.catalog.v1.TimeRange
	18, // 5: com.coralogix.catalog.v1.GetServiceRequest.service_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	15, // 6: com.coralogix.catalog.v1.GetServiceResponse.service:type_name -> com.coralogix.catalog.v1.Service
	18, // 7: com.coralogix.catalog.v1.UpdateServiceCatalogFiltersRequest.service_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	19, // 8: com.coralogix.catalog.v1.UpdateServiceCatalogFiltersRequest.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	20, // 9: com.coralogix.catalog.v1.UpdateServiceCatalogFiltersRequest.alert_label_filters:type_name -> com.coralogixapis.apm.common.v2.AlertMetaLabel
	18, // 10: com.coralogix.catalog.v1.UpdateServiceCatalogFiltersResponse.service_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	19, // 11: com.coralogix.catalog.v1.UpdateServiceCatalogFiltersResponse.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	16, // 12: com.coralogix.catalog.v1.GetServiceCatalogFiltersRequest.service_name:type_name -> google.protobuf.StringValue
	19, // 13: com.coralogix.catalog.v1.GetServiceCatalogFiltersRequest.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	17, // 14: com.coralogix.catalog.v1.GetServiceCatalogFiltersRequest.time_range:type_name -> com.coralogix.catalog.v1.TimeRange
	21, // 15: com.coralogix.catalog.v1.GetServiceCatalogFiltersRequest.only_errors:type_name -> google.protobuf.BoolValue
	18, // 16: com.coralogix.catalog.v1.GetServiceCatalogFiltersResponse.service_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	19, // 17: com.coralogix.catalog.v1.GetServiceCatalogFiltersResponse.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	14, // 18: com.coralogix.catalog.v1.GetServicesColumnsStreamRequest.query:type_name -> com.coralogix.catalog.v1.ServiceQuery
	19, // 19: com.coralogix.catalog.v1.GetServicesColumnsStreamRequest.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	22, // 20: com.coralogix.catalog.v1.GetServicesColumnsStreamResponse.services:type_name -> com.coralogix.catalog.v1.ServiceData
	19, // 21: com.coralogix.catalog.v1.GetServicesColumnsStreamResponse.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	16, // 22: com.coralogix.catalog.v1.GetSpanMetricBucketsResponse.metricBuckets:type_name -> google.protobuf.StringValue
	18, // 23: com.coralogix.catalog.v1.GetAffectedAlertsRequest.service_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	20, // 24: com.coralogix.catalog.v1.GetAffectedAlertsRequest.alert_label_filters:type_name -> com.coralogixapis.apm.common.v2.AlertMetaLabel
	23, // 25: com.coralogix.catalog.v1.GetAffectedAlertsResponse.alerts:type_name -> com.coralogixapis.alerts.v3.AlertDef
	0,  // 26: com.coralogix.catalog.v1.ServiceCatalogService.GetServices:input_type -> com.coralogix.catalog.v1.GetServicesRequest
	8,  // 27: com.coralogix.catalog.v1.ServiceCatalogService.GetServicesColumnsStream:input_type -> com.coralogix.catalog.v1.GetServicesColumnsStreamRequest
	2,  // 28: com.coralogix.catalog.v1.ServiceCatalogService.GetService:input_type -> com.coralogix.catalog.v1.GetServiceRequest
	6,  // 29: com.coralogix.catalog.v1.ServiceCatalogService.GetServiceCatalogFilters:input_type -> com.coralogix.catalog.v1.GetServiceCatalogFiltersRequest
	4,  // 30: com.coralogix.catalog.v1.ServiceCatalogService.UpdateServiceCatalogFilters:input_type -> com.coralogix.catalog.v1.UpdateServiceCatalogFiltersRequest
	24, // 31: com.coralogix.catalog.v1.ServiceCatalogService.GetTracingLabels:input_type -> com.coralogix.schemastore.v1.TracingFieldsRequest
	10, // 32: com.coralogix.catalog.v1.ServiceCatalogService.GetSpanMetricBuckets:input_type -> com.coralogix.catalog.v1.GetSpanMetricBucketsRequest
	12, // 33: com.coralogix.catalog.v1.ServiceCatalogService.GetAffectedAlerts:input_type -> com.coralogix.catalog.v1.GetAffectedAlertsRequest
	1,  // 34: com.coralogix.catalog.v1.ServiceCatalogService.GetServices:output_type -> com.coralogix.catalog.v1.GetServicesResponse
	9,  // 35: com.coralogix.catalog.v1.ServiceCatalogService.GetServicesColumnsStream:output_type -> com.coralogix.catalog.v1.GetServicesColumnsStreamResponse
	3,  // 36: com.coralogix.catalog.v1.ServiceCatalogService.GetService:output_type -> com.coralogix.catalog.v1.GetServiceResponse
	7,  // 37: com.coralogix.catalog.v1.ServiceCatalogService.GetServiceCatalogFilters:output_type -> com.coralogix.catalog.v1.GetServiceCatalogFiltersResponse
	5,  // 38: com.coralogix.catalog.v1.ServiceCatalogService.UpdateServiceCatalogFilters:output_type -> com.coralogix.catalog.v1.UpdateServiceCatalogFiltersResponse
	25, // 39: com.coralogix.catalog.v1.ServiceCatalogService.GetTracingLabels:output_type -> com.coralogix.schemastore.v1.TracingFieldsResponse
	11, // 40: com.coralogix.catalog.v1.ServiceCatalogService.GetSpanMetricBuckets:output_type -> com.coralogix.catalog.v1.GetSpanMetricBucketsResponse
	13, // 41: com.coralogix.catalog.v1.ServiceCatalogService.GetAffectedAlerts:output_type -> com.coralogix.catalog.v1.GetAffectedAlertsResponse
	34, // [34:42] is the sub-list for method output_type
	26, // [26:34] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_com_coralogix_catalog_v1_service_catalog_sevice_proto_init() }
func file_com_coralogix_catalog_v1_service_catalog_sevice_proto_init() {
	if File_com_coralogix_catalog_v1_service_catalog_sevice_proto != nil {
		return
	}
	file_com_coralogix_catalog_v1_common_proto_init()
	file_com_coralogix_catalog_v1_service_proto_init()
	file_com_coralogix_catalog_v1_service_query_proto_init()
	file_com_coralogixapis_service_catalog_v1_apm_source_proto_init()
	file_com_coralogixapis_service_catalog_v1_repeated_widgets_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogix_catalog_v1_service_catalog_sevice_proto_goTypes,
		DependencyIndexes: file_com_coralogix_catalog_v1_service_catalog_sevice_proto_depIdxs,
		MessageInfos:      file_com_coralogix_catalog_v1_service_catalog_sevice_proto_msgTypes,
	}.Build()
	File_com_coralogix_catalog_v1_service_catalog_sevice_proto = out.File
	file_com_coralogix_catalog_v1_service_catalog_sevice_proto_rawDesc = nil
	file_com_coralogix_catalog_v1_service_catalog_sevice_proto_goTypes = nil
	file_com_coralogix_catalog_v1_service_catalog_sevice_proto_depIdxs = nil
}
