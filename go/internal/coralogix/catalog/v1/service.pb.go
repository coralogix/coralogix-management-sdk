// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.1
// source: com/coralogix/catalog/v1/service.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServiceSlisStatus struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OkCount           *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=ok_count,json=okCount,proto3" json:"ok_count,omitempty"`
	BreachCount       *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=breach_count,json=breachCount,proto3" json:"breach_count,omitempty"`
	NotAvailableCount *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=not_available_count,json=notAvailableCount,proto3" json:"not_available_count,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ServiceSlisStatus) Reset() {
	*x = ServiceSlisStatus{}
	mi := &file_com_coralogix_catalog_v1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceSlisStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceSlisStatus) ProtoMessage() {}

func (x *ServiceSlisStatus) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceSlisStatus.ProtoReflect.Descriptor instead.
func (*ServiceSlisStatus) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceSlisStatus) GetOkCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.OkCount
	}
	return nil
}

func (x *ServiceSlisStatus) GetBreachCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.BreachCount
	}
	return nil
}

func (x *ServiceSlisStatus) GetNotAvailableCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.NotAvailableCount
	}
	return nil
}

type SliData struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ServiceSlisStatus *ServiceSlisStatus     `protobuf:"bytes,1,opt,name=service_slis_status,json=serviceSlisStatus,proto3" json:"service_slis_status,omitempty"`
	HasBucketsError   *wrapperspb.BoolValue  `protobuf:"bytes,2,opt,name=has_buckets_error,json=hasBucketsError,proto3" json:"has_buckets_error,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SliData) Reset() {
	*x = SliData{}
	mi := &file_com_coralogix_catalog_v1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SliData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliData) ProtoMessage() {}

func (x *SliData) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliData.ProtoReflect.Descriptor instead.
func (*SliData) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *SliData) GetServiceSlisStatus() *ServiceSlisStatus {
	if x != nil {
		return x.ServiceSlisStatus
	}
	return nil
}

func (x *SliData) GetHasBucketsError() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasBucketsError
	}
	return nil
}

type Service struct {
	state            protoimpl.MessageState    `protogen:"open.v1"`
	ServiceId        *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ServiceName      *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceType      *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	RequestPerSecond *wrapperspb.Int64Value    `protobuf:"bytes,4,opt,name=request_per_second,json=requestPerSecond,proto3" json:"request_per_second,omitempty"`
	ErrorRate        *wrapperspb.Int64Value    `protobuf:"bytes,5,opt,name=error_rate,json=errorRate,proto3" json:"error_rate,omitempty"`
	P95Latency       *wrapperspb.Int64Value    `protobuf:"bytes,6,opt,name=p95_latency,json=p95Latency,proto3" json:"p95_latency,omitempty"`
	Deployments      []*wrapperspb.StringValue `protobuf:"bytes,7,rep,name=deployments,proto3" json:"deployments,omitempty"`
	// Deprecated: Marked as deprecated in com/coralogix/catalog/v1/service.proto.
	ServiceSlisStatus *ServiceSlisStatus      `protobuf:"bytes,8,opt,name=service_slis_status,json=serviceSlisStatus,proto3" json:"service_slis_status,omitempty"`
	ServiceLanguage   *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=service_language,json=serviceLanguage,proto3" json:"service_language,omitempty"`
	SliData           *SliData                `protobuf:"bytes,10,opt,name=sli_data,json=sliData,proto3" json:"sli_data,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Service) Reset() {
	*x = Service{}
	mi := &file_com_coralogix_catalog_v1_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *Service) GetServiceId() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceId
	}
	return nil
}

func (x *Service) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *Service) GetServiceType() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceType
	}
	return nil
}

func (x *Service) GetRequestPerSecond() *wrapperspb.Int64Value {
	if x != nil {
		return x.RequestPerSecond
	}
	return nil
}

func (x *Service) GetErrorRate() *wrapperspb.Int64Value {
	if x != nil {
		return x.ErrorRate
	}
	return nil
}

func (x *Service) GetP95Latency() *wrapperspb.Int64Value {
	if x != nil {
		return x.P95Latency
	}
	return nil
}

func (x *Service) GetDeployments() []*wrapperspb.StringValue {
	if x != nil {
		return x.Deployments
	}
	return nil
}

// Deprecated: Marked as deprecated in com/coralogix/catalog/v1/service.proto.
func (x *Service) GetServiceSlisStatus() *ServiceSlisStatus {
	if x != nil {
		return x.ServiceSlisStatus
	}
	return nil
}

func (x *Service) GetServiceLanguage() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceLanguage
	}
	return nil
}

func (x *Service) GetSliData() *SliData {
	if x != nil {
		return x.SliData
	}
	return nil
}

type BaseService struct {
	state           protoimpl.MessageState    `protogen:"open.v1"`
	ServiceId       *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ServiceType     *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	ServiceLanguage *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=service_language,json=serviceLanguage,proto3" json:"service_language,omitempty"`
	Deployments     []*wrapperspb.StringValue `protobuf:"bytes,4,rep,name=deployments,proto3" json:"deployments,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BaseService) Reset() {
	*x = BaseService{}
	mi := &file_com_coralogix_catalog_v1_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseService) ProtoMessage() {}

func (x *BaseService) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseService.ProtoReflect.Descriptor instead.
func (*BaseService) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *BaseService) GetServiceId() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceId
	}
	return nil
}

func (x *BaseService) GetServiceType() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceType
	}
	return nil
}

func (x *BaseService) GetServiceLanguage() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceLanguage
	}
	return nil
}

func (x *BaseService) GetDeployments() []*wrapperspb.StringValue {
	if x != nil {
		return x.Deployments
	}
	return nil
}

type ServiceData struct {
	state       protoimpl.MessageState  `protogen:"open.v1"`
	ServiceName *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Types that are valid to be assigned to ServiceData:
	//
	//	*ServiceData_BaseService
	//	*ServiceData_RequestPerSecond
	//	*ServiceData_ErrorRate
	//	*ServiceData_P99Latency
	//	*ServiceData_P95Latency
	//	*ServiceData_P90Latency
	//	*ServiceData_P75Latency
	//	*ServiceData_P50Latency
	//	*ServiceData_AvgLatency
	//	*ServiceData_MaxLatency
	//	*ServiceData_ServiceSlisStatus
	//	*ServiceData_Errors
	//	*ServiceData_ErrorsPercentage
	//	*ServiceData_ErrorsPerMinute
	//	*ServiceData_MaxErrorsPerMinute
	//	*ServiceData_ErrorsPerSecond
	//	*ServiceData_Requests
	//	*ServiceData_OutgoingRequests
	//	*ServiceData_IncomingRequests
	//	*ServiceData_InternalRequests
	//	*ServiceData_Throughput
	//	*ServiceData_MaxThroughput
	//	*ServiceData_SliData
	//	*ServiceData_P95LatencyTrend
	//	*ServiceData_MaxLatencyTrend
	//	*ServiceData_ErrorsTrend
	//	*ServiceData_OutgoingRequestsTrend
	//	*ServiceData_IncomingRequestsTrend
	//	*ServiceData_InternalRequestsTrend
	//	*ServiceData_P95LatencyWithOffset
	//	*ServiceData_MaxLatencyWithOffset
	//	*ServiceData_ErrorsWithOffset
	//	*ServiceData_OutgoingRequestsWithOffset
	//	*ServiceData_IncomingRequestsWithOffset
	//	*ServiceData_InternalRequestsWithOffset
	ServiceData   isServiceData_ServiceData `protobuf_oneof:"service_data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceData) Reset() {
	*x = ServiceData{}
	mi := &file_com_coralogix_catalog_v1_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceData) ProtoMessage() {}

func (x *ServiceData) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceData.ProtoReflect.Descriptor instead.
func (*ServiceData) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *ServiceData) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *ServiceData) GetServiceData() isServiceData_ServiceData {
	if x != nil {
		return x.ServiceData
	}
	return nil
}

func (x *ServiceData) GetBaseService() *BaseService {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_BaseService); ok {
			return x.BaseService
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in com/coralogix/catalog/v1/service.proto.
func (x *ServiceData) GetRequestPerSecond() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_RequestPerSecond); ok {
			return x.RequestPerSecond
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in com/coralogix/catalog/v1/service.proto.
func (x *ServiceData) GetErrorRate() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_ErrorRate); ok {
			return x.ErrorRate
		}
	}
	return nil
}

func (x *ServiceData) GetP99Latency() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_P99Latency); ok {
			return x.P99Latency
		}
	}
	return nil
}

func (x *ServiceData) GetP95Latency() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_P95Latency); ok {
			return x.P95Latency
		}
	}
	return nil
}

func (x *ServiceData) GetP90Latency() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_P90Latency); ok {
			return x.P90Latency
		}
	}
	return nil
}

func (x *ServiceData) GetP75Latency() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_P75Latency); ok {
			return x.P75Latency
		}
	}
	return nil
}

func (x *ServiceData) GetP50Latency() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_P50Latency); ok {
			return x.P50Latency
		}
	}
	return nil
}

func (x *ServiceData) GetAvgLatency() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_AvgLatency); ok {
			return x.AvgLatency
		}
	}
	return nil
}

func (x *ServiceData) GetMaxLatency() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_MaxLatency); ok {
			return x.MaxLatency
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in com/coralogix/catalog/v1/service.proto.
func (x *ServiceData) GetServiceSlisStatus() *ServiceSlisStatus {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_ServiceSlisStatus); ok {
			return x.ServiceSlisStatus
		}
	}
	return nil
}

func (x *ServiceData) GetErrors() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_Errors); ok {
			return x.Errors
		}
	}
	return nil
}

func (x *ServiceData) GetErrorsPercentage() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_ErrorsPercentage); ok {
			return x.ErrorsPercentage
		}
	}
	return nil
}

func (x *ServiceData) GetErrorsPerMinute() *wrapperspb.FloatValue {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_ErrorsPerMinute); ok {
			return x.ErrorsPerMinute
		}
	}
	return nil
}

func (x *ServiceData) GetMaxErrorsPerMinute() *wrapperspb.FloatValue {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_MaxErrorsPerMinute); ok {
			return x.MaxErrorsPerMinute
		}
	}
	return nil
}

func (x *ServiceData) GetErrorsPerSecond() *wrapperspb.FloatValue {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_ErrorsPerSecond); ok {
			return x.ErrorsPerSecond
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in com/coralogix/catalog/v1/service.proto.
func (x *ServiceData) GetRequests() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_Requests); ok {
			return x.Requests
		}
	}
	return nil
}

func (x *ServiceData) GetOutgoingRequests() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_OutgoingRequests); ok {
			return x.OutgoingRequests
		}
	}
	return nil
}

func (x *ServiceData) GetIncomingRequests() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_IncomingRequests); ok {
			return x.IncomingRequests
		}
	}
	return nil
}

func (x *ServiceData) GetInternalRequests() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_InternalRequests); ok {
			return x.InternalRequests
		}
	}
	return nil
}

func (x *ServiceData) GetThroughput() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_Throughput); ok {
			return x.Throughput
		}
	}
	return nil
}

func (x *ServiceData) GetMaxThroughput() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_MaxThroughput); ok {
			return x.MaxThroughput
		}
	}
	return nil
}

func (x *ServiceData) GetSliData() *SliData {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_SliData); ok {
			return x.SliData
		}
	}
	return nil
}

func (x *ServiceData) GetP95LatencyTrend() *wrapperspb.FloatValue {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_P95LatencyTrend); ok {
			return x.P95LatencyTrend
		}
	}
	return nil
}

func (x *ServiceData) GetMaxLatencyTrend() *wrapperspb.FloatValue {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_MaxLatencyTrend); ok {
			return x.MaxLatencyTrend
		}
	}
	return nil
}

func (x *ServiceData) GetErrorsTrend() *wrapperspb.FloatValue {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_ErrorsTrend); ok {
			return x.ErrorsTrend
		}
	}
	return nil
}

func (x *ServiceData) GetOutgoingRequestsTrend() *wrapperspb.FloatValue {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_OutgoingRequestsTrend); ok {
			return x.OutgoingRequestsTrend
		}
	}
	return nil
}

func (x *ServiceData) GetIncomingRequestsTrend() *wrapperspb.FloatValue {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_IncomingRequestsTrend); ok {
			return x.IncomingRequestsTrend
		}
	}
	return nil
}

func (x *ServiceData) GetInternalRequestsTrend() *wrapperspb.FloatValue {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_InternalRequestsTrend); ok {
			return x.InternalRequestsTrend
		}
	}
	return nil
}

func (x *ServiceData) GetP95LatencyWithOffset() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_P95LatencyWithOffset); ok {
			return x.P95LatencyWithOffset
		}
	}
	return nil
}

func (x *ServiceData) GetMaxLatencyWithOffset() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_MaxLatencyWithOffset); ok {
			return x.MaxLatencyWithOffset
		}
	}
	return nil
}

func (x *ServiceData) GetErrorsWithOffset() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_ErrorsWithOffset); ok {
			return x.ErrorsWithOffset
		}
	}
	return nil
}

func (x *ServiceData) GetOutgoingRequestsWithOffset() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_OutgoingRequestsWithOffset); ok {
			return x.OutgoingRequestsWithOffset
		}
	}
	return nil
}

func (x *ServiceData) GetIncomingRequestsWithOffset() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_IncomingRequestsWithOffset); ok {
			return x.IncomingRequestsWithOffset
		}
	}
	return nil
}

func (x *ServiceData) GetInternalRequestsWithOffset() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ServiceData.(*ServiceData_InternalRequestsWithOffset); ok {
			return x.InternalRequestsWithOffset
		}
	}
	return nil
}

type isServiceData_ServiceData interface {
	isServiceData_ServiceData()
}

type ServiceData_BaseService struct {
	BaseService *BaseService `protobuf:"bytes,2,opt,name=base_service,json=baseService,proto3,oneof"`
}

type ServiceData_RequestPerSecond struct {
	// Deprecated: Marked as deprecated in com/coralogix/catalog/v1/service.proto.
	RequestPerSecond *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=request_per_second,json=requestPerSecond,proto3,oneof"`
}

type ServiceData_ErrorRate struct {
	// Deprecated: Marked as deprecated in com/coralogix/catalog/v1/service.proto.
	ErrorRate *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=error_rate,json=errorRate,proto3,oneof"`
}

type ServiceData_P99Latency struct {
	P99Latency *wrapperspb.Int64Value `protobuf:"bytes,26,opt,name=p99_latency,json=p99Latency,proto3,oneof"`
}

type ServiceData_P95Latency struct {
	P95Latency *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=p95_latency,json=p95Latency,proto3,oneof"`
}

type ServiceData_P90Latency struct {
	P90Latency *wrapperspb.Int64Value `protobuf:"bytes,27,opt,name=p90_latency,json=p90Latency,proto3,oneof"`
}

type ServiceData_P75Latency struct {
	P75Latency *wrapperspb.Int64Value `protobuf:"bytes,28,opt,name=p75_latency,json=p75Latency,proto3,oneof"`
}

type ServiceData_P50Latency struct {
	P50Latency *wrapperspb.Int64Value `protobuf:"bytes,29,opt,name=p50_latency,json=p50Latency,proto3,oneof"`
}

type ServiceData_AvgLatency struct {
	AvgLatency *wrapperspb.Int64Value `protobuf:"bytes,30,opt,name=avg_latency,json=avgLatency,proto3,oneof"`
}

type ServiceData_MaxLatency struct {
	MaxLatency *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=max_latency,json=maxLatency,proto3,oneof"`
}

type ServiceData_ServiceSlisStatus struct {
	// Deprecated: Marked as deprecated in com/coralogix/catalog/v1/service.proto.
	ServiceSlisStatus *ServiceSlisStatus `protobuf:"bytes,7,opt,name=service_slis_status,json=serviceSlisStatus,proto3,oneof"`
}

type ServiceData_Errors struct {
	Errors *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=errors,proto3,oneof"`
}

type ServiceData_ErrorsPercentage struct {
	ErrorsPercentage *wrapperspb.Int64Value `protobuf:"bytes,31,opt,name=errors_percentage,json=errorsPercentage,proto3,oneof"`
}

type ServiceData_ErrorsPerMinute struct {
	ErrorsPerMinute *wrapperspb.FloatValue `protobuf:"bytes,32,opt,name=errors_per_minute,json=errorsPerMinute,proto3,oneof"`
}

type ServiceData_MaxErrorsPerMinute struct {
	MaxErrorsPerMinute *wrapperspb.FloatValue `protobuf:"bytes,33,opt,name=max_errors_per_minute,json=maxErrorsPerMinute,proto3,oneof"`
}

type ServiceData_ErrorsPerSecond struct {
	ErrorsPerSecond *wrapperspb.FloatValue `protobuf:"bytes,34,opt,name=errors_per_second,json=errorsPerSecond,proto3,oneof"`
}

type ServiceData_Requests struct {
	// Deprecated: Marked as deprecated in com/coralogix/catalog/v1/service.proto.
	Requests *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=requests,proto3,oneof"`
}

type ServiceData_OutgoingRequests struct {
	OutgoingRequests *wrapperspb.Int64Value `protobuf:"bytes,10,opt,name=outgoing_requests,json=outgoingRequests,proto3,oneof"`
}

type ServiceData_IncomingRequests struct {
	IncomingRequests *wrapperspb.Int64Value `protobuf:"bytes,11,opt,name=incoming_requests,json=incomingRequests,proto3,oneof"`
}

type ServiceData_InternalRequests struct {
	InternalRequests *wrapperspb.Int64Value `protobuf:"bytes,12,opt,name=internal_requests,json=internalRequests,proto3,oneof"`
}

type ServiceData_Throughput struct {
	Throughput *wrapperspb.Int64Value `protobuf:"bytes,35,opt,name=throughput,proto3,oneof"`
}

type ServiceData_MaxThroughput struct {
	MaxThroughput *wrapperspb.Int64Value `protobuf:"bytes,36,opt,name=max_throughput,json=maxThroughput,proto3,oneof"`
}

type ServiceData_SliData struct {
	SliData *SliData `protobuf:"bytes,13,opt,name=sli_data,json=sliData,proto3,oneof"`
}

type ServiceData_P95LatencyTrend struct {
	P95LatencyTrend *wrapperspb.FloatValue `protobuf:"bytes,14,opt,name=p95_latency_trend,json=p95LatencyTrend,proto3,oneof"`
}

type ServiceData_MaxLatencyTrend struct {
	MaxLatencyTrend *wrapperspb.FloatValue `protobuf:"bytes,15,opt,name=max_latency_trend,json=maxLatencyTrend,proto3,oneof"`
}

type ServiceData_ErrorsTrend struct {
	ErrorsTrend *wrapperspb.FloatValue `protobuf:"bytes,16,opt,name=errors_trend,json=errorsTrend,proto3,oneof"`
}

type ServiceData_OutgoingRequestsTrend struct {
	OutgoingRequestsTrend *wrapperspb.FloatValue `protobuf:"bytes,17,opt,name=outgoing_requests_trend,json=outgoingRequestsTrend,proto3,oneof"`
}

type ServiceData_IncomingRequestsTrend struct {
	IncomingRequestsTrend *wrapperspb.FloatValue `protobuf:"bytes,18,opt,name=incoming_requests_trend,json=incomingRequestsTrend,proto3,oneof"`
}

type ServiceData_InternalRequestsTrend struct {
	InternalRequestsTrend *wrapperspb.FloatValue `protobuf:"bytes,19,opt,name=internal_requests_trend,json=internalRequestsTrend,proto3,oneof"`
}

type ServiceData_P95LatencyWithOffset struct {
	P95LatencyWithOffset *wrapperspb.Int64Value `protobuf:"bytes,20,opt,name=p95_latency_with_offset,json=p95LatencyWithOffset,proto3,oneof"`
}

type ServiceData_MaxLatencyWithOffset struct {
	MaxLatencyWithOffset *wrapperspb.Int64Value `protobuf:"bytes,21,opt,name=max_latency_with_offset,json=maxLatencyWithOffset,proto3,oneof"`
}

type ServiceData_ErrorsWithOffset struct {
	ErrorsWithOffset *wrapperspb.Int64Value `protobuf:"bytes,22,opt,name=errors_with_offset,json=errorsWithOffset,proto3,oneof"`
}

type ServiceData_OutgoingRequestsWithOffset struct {
	OutgoingRequestsWithOffset *wrapperspb.Int64Value `protobuf:"bytes,23,opt,name=outgoing_requests_with_offset,json=outgoingRequestsWithOffset,proto3,oneof"`
}

type ServiceData_IncomingRequestsWithOffset struct {
	IncomingRequestsWithOffset *wrapperspb.Int64Value `protobuf:"bytes,24,opt,name=incoming_requests_with_offset,json=incomingRequestsWithOffset,proto3,oneof"`
}

type ServiceData_InternalRequestsWithOffset struct {
	InternalRequestsWithOffset *wrapperspb.Int64Value `protobuf:"bytes,25,opt,name=internal_requests_with_offset,json=internalRequestsWithOffset,proto3,oneof"`
}

func (*ServiceData_BaseService) isServiceData_ServiceData() {}

func (*ServiceData_RequestPerSecond) isServiceData_ServiceData() {}

func (*ServiceData_ErrorRate) isServiceData_ServiceData() {}

func (*ServiceData_P99Latency) isServiceData_ServiceData() {}

func (*ServiceData_P95Latency) isServiceData_ServiceData() {}

func (*ServiceData_P90Latency) isServiceData_ServiceData() {}

func (*ServiceData_P75Latency) isServiceData_ServiceData() {}

func (*ServiceData_P50Latency) isServiceData_ServiceData() {}

func (*ServiceData_AvgLatency) isServiceData_ServiceData() {}

func (*ServiceData_MaxLatency) isServiceData_ServiceData() {}

func (*ServiceData_ServiceSlisStatus) isServiceData_ServiceData() {}

func (*ServiceData_Errors) isServiceData_ServiceData() {}

func (*ServiceData_ErrorsPercentage) isServiceData_ServiceData() {}

func (*ServiceData_ErrorsPerMinute) isServiceData_ServiceData() {}

func (*ServiceData_MaxErrorsPerMinute) isServiceData_ServiceData() {}

func (*ServiceData_ErrorsPerSecond) isServiceData_ServiceData() {}

func (*ServiceData_Requests) isServiceData_ServiceData() {}

func (*ServiceData_OutgoingRequests) isServiceData_ServiceData() {}

func (*ServiceData_IncomingRequests) isServiceData_ServiceData() {}

func (*ServiceData_InternalRequests) isServiceData_ServiceData() {}

func (*ServiceData_Throughput) isServiceData_ServiceData() {}

func (*ServiceData_MaxThroughput) isServiceData_ServiceData() {}

func (*ServiceData_SliData) isServiceData_ServiceData() {}

func (*ServiceData_P95LatencyTrend) isServiceData_ServiceData() {}

func (*ServiceData_MaxLatencyTrend) isServiceData_ServiceData() {}

func (*ServiceData_ErrorsTrend) isServiceData_ServiceData() {}

func (*ServiceData_OutgoingRequestsTrend) isServiceData_ServiceData() {}

func (*ServiceData_IncomingRequestsTrend) isServiceData_ServiceData() {}

func (*ServiceData_InternalRequestsTrend) isServiceData_ServiceData() {}

func (*ServiceData_P95LatencyWithOffset) isServiceData_ServiceData() {}

func (*ServiceData_MaxLatencyWithOffset) isServiceData_ServiceData() {}

func (*ServiceData_ErrorsWithOffset) isServiceData_ServiceData() {}

func (*ServiceData_OutgoingRequestsWithOffset) isServiceData_ServiceData() {}

func (*ServiceData_IncomingRequestsWithOffset) isServiceData_ServiceData() {}

func (*ServiceData_InternalRequestsWithOffset) isServiceData_ServiceData() {}

var File_com_coralogix_catalog_v1_service_proto protoreflect.FileDescriptor

var file_com_coralogix_catalog_v1_service_proto_rawDesc = []byte{
	0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd8, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6c,
	0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x6b, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6f, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3e, 0x0a, 0x0c, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x4b, 0x0a, 0x13, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xae, 0x01,
	0x0a, 0x07, 0x53, 0x6c, 0x69, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5b, 0x0a, 0x13, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6c, 0x69, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6c, 0x69, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x68,
	0x61, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb5,
	0x05, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x39, 0x35, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x70, 0x39, 0x35, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3e,
	0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5f,
	0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6c,
	0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6c, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x47, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x69, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x73,
	0x6c, 0x69, 0x44, 0x61, 0x74, 0x61, 0x22, 0x94, 0x02, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a,
	0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xaf, 0x15,
	0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a,
	0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01,
	0x48, 0x00, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a,
	0x0b, 0x70, 0x39, 0x39, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x70, 0x39, 0x39, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3e, 0x0a,
	0x0b, 0x70, 0x39, 0x35, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x70, 0x39, 0x35, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3e, 0x0a,
	0x0b, 0x70, 0x39, 0x30, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x70, 0x39, 0x30, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3e, 0x0a,
	0x0b, 0x70, 0x37, 0x35, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x70, 0x37, 0x35, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3e, 0x0a,
	0x0b, 0x70, 0x35, 0x30, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x70, 0x35, 0x30, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3e, 0x0a,
	0x0b, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x61, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3e, 0x0a,
	0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x61, 0x0a,
	0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6c, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x11, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6c, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x35, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x50,
	0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x61,
	0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x12, 0x49, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x6f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x10, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3d,
	0x0a, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x44, 0x0a,
	0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x70, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6c, 0x69, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x73, 0x6c, 0x69, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x11, 0x70, 0x39, 0x35, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x70,
	0x39, 0x35, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x49,
	0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x72,
	0x65, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x55, 0x0a, 0x17, 0x6f,
	0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x15, 0x6f, 0x75, 0x74,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x54, 0x72, 0x65,
	0x6e, 0x64, 0x12, 0x55, 0x0a, 0x17, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x15, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x55, 0x0a, 0x17, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x74,
	0x72, 0x65, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64,
	0x12, 0x54, 0x0a, 0x17, 0x70, 0x39, 0x35, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x14, 0x70, 0x39, 0x35, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x54, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x12,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x60, 0x0a, 0x1d, 0x6f, 0x75, 0x74,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x1a, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x60, 0x0a, 0x1d, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x1a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x60, 0x0a,
	0x1d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_catalog_v1_service_proto_rawDescOnce sync.Once
	file_com_coralogix_catalog_v1_service_proto_rawDescData = file_com_coralogix_catalog_v1_service_proto_rawDesc
)

func file_com_coralogix_catalog_v1_service_proto_rawDescGZIP() []byte {
	file_com_coralogix_catalog_v1_service_proto_rawDescOnce.Do(func() {
		file_com_coralogix_catalog_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_catalog_v1_service_proto_rawDescData)
	})
	return file_com_coralogix_catalog_v1_service_proto_rawDescData
}

var file_com_coralogix_catalog_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_com_coralogix_catalog_v1_service_proto_goTypes = []any{
	(*ServiceSlisStatus)(nil),      // 0: com.coralogix.catalog.v1.ServiceSlisStatus
	(*SliData)(nil),                // 1: com.coralogix.catalog.v1.SliData
	(*Service)(nil),                // 2: com.coralogix.catalog.v1.Service
	(*BaseService)(nil),            // 3: com.coralogix.catalog.v1.BaseService
	(*ServiceData)(nil),            // 4: com.coralogix.catalog.v1.ServiceData
	(*wrapperspb.Int64Value)(nil),  // 5: google.protobuf.Int64Value
	(*wrapperspb.BoolValue)(nil),   // 6: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil), // 7: google.protobuf.StringValue
	(*wrapperspb.FloatValue)(nil),  // 8: google.protobuf.FloatValue
}
var file_com_coralogix_catalog_v1_service_proto_depIdxs = []int32{
	5,  // 0: com.coralogix.catalog.v1.ServiceSlisStatus.ok_count:type_name -> google.protobuf.Int64Value
	5,  // 1: com.coralogix.catalog.v1.ServiceSlisStatus.breach_count:type_name -> google.protobuf.Int64Value
	5,  // 2: com.coralogix.catalog.v1.ServiceSlisStatus.not_available_count:type_name -> google.protobuf.Int64Value
	0,  // 3: com.coralogix.catalog.v1.SliData.service_slis_status:type_name -> com.coralogix.catalog.v1.ServiceSlisStatus
	6,  // 4: com.coralogix.catalog.v1.SliData.has_buckets_error:type_name -> google.protobuf.BoolValue
	7,  // 5: com.coralogix.catalog.v1.Service.service_id:type_name -> google.protobuf.StringValue
	7,  // 6: com.coralogix.catalog.v1.Service.service_name:type_name -> google.protobuf.StringValue
	7,  // 7: com.coralogix.catalog.v1.Service.service_type:type_name -> google.protobuf.StringValue
	5,  // 8: com.coralogix.catalog.v1.Service.request_per_second:type_name -> google.protobuf.Int64Value
	5,  // 9: com.coralogix.catalog.v1.Service.error_rate:type_name -> google.protobuf.Int64Value
	5,  // 10: com.coralogix.catalog.v1.Service.p95_latency:type_name -> google.protobuf.Int64Value
	7,  // 11: com.coralogix.catalog.v1.Service.deployments:type_name -> google.protobuf.StringValue
	0,  // 12: com.coralogix.catalog.v1.Service.service_slis_status:type_name -> com.coralogix.catalog.v1.ServiceSlisStatus
	7,  // 13: com.coralogix.catalog.v1.Service.service_language:type_name -> google.protobuf.StringValue
	1,  // 14: com.coralogix.catalog.v1.Service.sli_data:type_name -> com.coralogix.catalog.v1.SliData
	7,  // 15: com.coralogix.catalog.v1.BaseService.service_id:type_name -> google.protobuf.StringValue
	7,  // 16: com.coralogix.catalog.v1.BaseService.service_type:type_name -> google.protobuf.StringValue
	7,  // 17: com.coralogix.catalog.v1.BaseService.service_language:type_name -> google.protobuf.StringValue
	7,  // 18: com.coralogix.catalog.v1.BaseService.deployments:type_name -> google.protobuf.StringValue
	7,  // 19: com.coralogix.catalog.v1.ServiceData.service_name:type_name -> google.protobuf.StringValue
	3,  // 20: com.coralogix.catalog.v1.ServiceData.base_service:type_name -> com.coralogix.catalog.v1.BaseService
	5,  // 21: com.coralogix.catalog.v1.ServiceData.request_per_second:type_name -> google.protobuf.Int64Value
	5,  // 22: com.coralogix.catalog.v1.ServiceData.error_rate:type_name -> google.protobuf.Int64Value
	5,  // 23: com.coralogix.catalog.v1.ServiceData.p99_latency:type_name -> google.protobuf.Int64Value
	5,  // 24: com.coralogix.catalog.v1.ServiceData.p95_latency:type_name -> google.protobuf.Int64Value
	5,  // 25: com.coralogix.catalog.v1.ServiceData.p90_latency:type_name -> google.protobuf.Int64Value
	5,  // 26: com.coralogix.catalog.v1.ServiceData.p75_latency:type_name -> google.protobuf.Int64Value
	5,  // 27: com.coralogix.catalog.v1.ServiceData.p50_latency:type_name -> google.protobuf.Int64Value
	5,  // 28: com.coralogix.catalog.v1.ServiceData.avg_latency:type_name -> google.protobuf.Int64Value
	5,  // 29: com.coralogix.catalog.v1.ServiceData.max_latency:type_name -> google.protobuf.Int64Value
	0,  // 30: com.coralogix.catalog.v1.ServiceData.service_slis_status:type_name -> com.coralogix.catalog.v1.ServiceSlisStatus
	5,  // 31: com.coralogix.catalog.v1.ServiceData.errors:type_name -> google.protobuf.Int64Value
	5,  // 32: com.coralogix.catalog.v1.ServiceData.errors_percentage:type_name -> google.protobuf.Int64Value
	8,  // 33: com.coralogix.catalog.v1.ServiceData.errors_per_minute:type_name -> google.protobuf.FloatValue
	8,  // 34: com.coralogix.catalog.v1.ServiceData.max_errors_per_minute:type_name -> google.protobuf.FloatValue
	8,  // 35: com.coralogix.catalog.v1.ServiceData.errors_per_second:type_name -> google.protobuf.FloatValue
	5,  // 36: com.coralogix.catalog.v1.ServiceData.requests:type_name -> google.protobuf.Int64Value
	5,  // 37: com.coralogix.catalog.v1.ServiceData.outgoing_requests:type_name -> google.protobuf.Int64Value
	5,  // 38: com.coralogix.catalog.v1.ServiceData.incoming_requests:type_name -> google.protobuf.Int64Value
	5,  // 39: com.coralogix.catalog.v1.ServiceData.internal_requests:type_name -> google.protobuf.Int64Value
	5,  // 40: com.coralogix.catalog.v1.ServiceData.throughput:type_name -> google.protobuf.Int64Value
	5,  // 41: com.coralogix.catalog.v1.ServiceData.max_throughput:type_name -> google.protobuf.Int64Value
	1,  // 42: com.coralogix.catalog.v1.ServiceData.sli_data:type_name -> com.coralogix.catalog.v1.SliData
	8,  // 43: com.coralogix.catalog.v1.ServiceData.p95_latency_trend:type_name -> google.protobuf.FloatValue
	8,  // 44: com.coralogix.catalog.v1.ServiceData.max_latency_trend:type_name -> google.protobuf.FloatValue
	8,  // 45: com.coralogix.catalog.v1.ServiceData.errors_trend:type_name -> google.protobuf.FloatValue
	8,  // 46: com.coralogix.catalog.v1.ServiceData.outgoing_requests_trend:type_name -> google.protobuf.FloatValue
	8,  // 47: com.coralogix.catalog.v1.ServiceData.incoming_requests_trend:type_name -> google.protobuf.FloatValue
	8,  // 48: com.coralogix.catalog.v1.ServiceData.internal_requests_trend:type_name -> google.protobuf.FloatValue
	5,  // 49: com.coralogix.catalog.v1.ServiceData.p95_latency_with_offset:type_name -> google.protobuf.Int64Value
	5,  // 50: com.coralogix.catalog.v1.ServiceData.max_latency_with_offset:type_name -> google.protobuf.Int64Value
	5,  // 51: com.coralogix.catalog.v1.ServiceData.errors_with_offset:type_name -> google.protobuf.Int64Value
	5,  // 52: com.coralogix.catalog.v1.ServiceData.outgoing_requests_with_offset:type_name -> google.protobuf.Int64Value
	5,  // 53: com.coralogix.catalog.v1.ServiceData.incoming_requests_with_offset:type_name -> google.protobuf.Int64Value
	5,  // 54: com.coralogix.catalog.v1.ServiceData.internal_requests_with_offset:type_name -> google.protobuf.Int64Value
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_com_coralogix_catalog_v1_service_proto_init() }
func file_com_coralogix_catalog_v1_service_proto_init() {
	if File_com_coralogix_catalog_v1_service_proto != nil {
		return
	}
	file_com_coralogix_catalog_v1_service_proto_msgTypes[4].OneofWrappers = []any{
		(*ServiceData_BaseService)(nil),
		(*ServiceData_RequestPerSecond)(nil),
		(*ServiceData_ErrorRate)(nil),
		(*ServiceData_P99Latency)(nil),
		(*ServiceData_P95Latency)(nil),
		(*ServiceData_P90Latency)(nil),
		(*ServiceData_P75Latency)(nil),
		(*ServiceData_P50Latency)(nil),
		(*ServiceData_AvgLatency)(nil),
		(*ServiceData_MaxLatency)(nil),
		(*ServiceData_ServiceSlisStatus)(nil),
		(*ServiceData_Errors)(nil),
		(*ServiceData_ErrorsPercentage)(nil),
		(*ServiceData_ErrorsPerMinute)(nil),
		(*ServiceData_MaxErrorsPerMinute)(nil),
		(*ServiceData_ErrorsPerSecond)(nil),
		(*ServiceData_Requests)(nil),
		(*ServiceData_OutgoingRequests)(nil),
		(*ServiceData_IncomingRequests)(nil),
		(*ServiceData_InternalRequests)(nil),
		(*ServiceData_Throughput)(nil),
		(*ServiceData_MaxThroughput)(nil),
		(*ServiceData_SliData)(nil),
		(*ServiceData_P95LatencyTrend)(nil),
		(*ServiceData_MaxLatencyTrend)(nil),
		(*ServiceData_ErrorsTrend)(nil),
		(*ServiceData_OutgoingRequestsTrend)(nil),
		(*ServiceData_IncomingRequestsTrend)(nil),
		(*ServiceData_InternalRequestsTrend)(nil),
		(*ServiceData_P95LatencyWithOffset)(nil),
		(*ServiceData_MaxLatencyWithOffset)(nil),
		(*ServiceData_ErrorsWithOffset)(nil),
		(*ServiceData_OutgoingRequestsWithOffset)(nil),
		(*ServiceData_IncomingRequestsWithOffset)(nil),
		(*ServiceData_InternalRequestsWithOffset)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_catalog_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_catalog_v1_service_proto_goTypes,
		DependencyIndexes: file_com_coralogix_catalog_v1_service_proto_depIdxs,
		MessageInfos:      file_com_coralogix_catalog_v1_service_proto_msgTypes,
	}.Build()
	File_com_coralogix_catalog_v1_service_proto = out.File
	file_com_coralogix_catalog_v1_service_proto_rawDesc = nil
	file_com_coralogix_catalog_v1_service_proto_goTypes = nil
	file_com_coralogix_catalog_v1_service_proto_depIdxs = nil
}
