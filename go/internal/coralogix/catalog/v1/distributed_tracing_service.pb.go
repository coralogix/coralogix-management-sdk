// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.1
// source: com/coralogixapis/service_catalog/v1/distributed_tracing_service.proto

package v1

import (
	_ "github.com/coralogix/coralogix-management-sdk/go/internal/coralogix/common/v1"
	v2 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/common/v2"
	v1 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/widgets/v1"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetTimeConsumingRequest struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	ServiceName   *wrapperspb.StringValue        `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	TimeRange     *v2.TimeRange                  `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Filters       map[string]*structpb.ListValue `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SpanKind      []SpanKind                     `protobuf:"varint,4,rep,packed,name=span_kind,json=spanKind,proto3,enum=com.coralogix.catalog.v1.SpanKind" json:"span_kind,omitempty"`
	Topk          *wrapperspb.UInt64Value        `protobuf:"bytes,5,opt,name=topk,proto3" json:"topk,omitempty"`
	ApmSource     ApmSource                      `protobuf:"varint,6,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTimeConsumingRequest) Reset() {
	*x = GetTimeConsumingRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTimeConsumingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimeConsumingRequest) ProtoMessage() {}

func (x *GetTimeConsumingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimeConsumingRequest.ProtoReflect.Descriptor instead.
func (*GetTimeConsumingRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetTimeConsumingRequest) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *GetTimeConsumingRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetTimeConsumingRequest) GetFilters() map[string]*structpb.ListValue {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetTimeConsumingRequest) GetSpanKind() []SpanKind {
	if x != nil {
		return x.SpanKind
	}
	return nil
}

func (x *GetTimeConsumingRequest) GetTopk() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Topk
	}
	return nil
}

func (x *GetTimeConsumingRequest) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

type GetTimeConsumingResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	TimeConsuming []*v1.LineChart         `protobuf:"bytes,1,rep,name=time_consuming,json=timeConsuming,proto3" json:"time_consuming,omitempty"`
	TotalAmount   *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	ApmSource     ApmSource               `protobuf:"varint,3,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTimeConsumingResponse) Reset() {
	*x = GetTimeConsumingResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTimeConsumingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimeConsumingResponse) ProtoMessage() {}

func (x *GetTimeConsumingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimeConsumingResponse.ProtoReflect.Descriptor instead.
func (*GetTimeConsumingResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetTimeConsumingResponse) GetTimeConsuming() []*v1.LineChart {
	if x != nil {
		return x.TimeConsuming
	}
	return nil
}

func (x *GetTimeConsumingResponse) GetTotalAmount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.TotalAmount
	}
	return nil
}

func (x *GetTimeConsumingResponse) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

type GetThroughputRequest struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	ServiceName   *wrapperspb.StringValue        `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	TimeRange     *v2.TimeRange                  `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Filters       map[string]*structpb.ListValue `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SpanKind      []SpanKind                     `protobuf:"varint,4,rep,packed,name=span_kind,json=spanKind,proto3,enum=com.coralogix.catalog.v1.SpanKind" json:"span_kind,omitempty"`
	Topk          *wrapperspb.UInt64Value        `protobuf:"bytes,5,opt,name=topk,proto3" json:"topk,omitempty"`
	ApmSource     ApmSource                      `protobuf:"varint,6,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThroughputRequest) Reset() {
	*x = GetThroughputRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThroughputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThroughputRequest) ProtoMessage() {}

func (x *GetThroughputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThroughputRequest.ProtoReflect.Descriptor instead.
func (*GetThroughputRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetThroughputRequest) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *GetThroughputRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetThroughputRequest) GetFilters() map[string]*structpb.ListValue {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetThroughputRequest) GetSpanKind() []SpanKind {
	if x != nil {
		return x.SpanKind
	}
	return nil
}

func (x *GetThroughputRequest) GetTopk() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Topk
	}
	return nil
}

func (x *GetThroughputRequest) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

type GetThroughputResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Throughput    []*v1.LineChart         `protobuf:"bytes,1,rep,name=throughput,proto3" json:"throughput,omitempty"`
	TotalAmount   *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	ApmSource     ApmSource               `protobuf:"varint,3,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThroughputResponse) Reset() {
	*x = GetThroughputResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThroughputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThroughputResponse) ProtoMessage() {}

func (x *GetThroughputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThroughputResponse.ProtoReflect.Descriptor instead.
func (*GetThroughputResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetThroughputResponse) GetThroughput() []*v1.LineChart {
	if x != nil {
		return x.Throughput
	}
	return nil
}

func (x *GetThroughputResponse) GetTotalAmount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.TotalAmount
	}
	return nil
}

func (x *GetThroughputResponse) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

type GetErrorsRequest struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	ServiceName   *wrapperspb.StringValue        `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	TimeRange     *v2.TimeRange                  `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Filters       map[string]*structpb.ListValue `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SpanKind      []SpanKind                     `protobuf:"varint,4,rep,packed,name=span_kind,json=spanKind,proto3,enum=com.coralogix.catalog.v1.SpanKind" json:"span_kind,omitempty"`
	Topk          *wrapperspb.UInt64Value        `protobuf:"bytes,5,opt,name=topk,proto3" json:"topk,omitempty"`
	ApmSource     ApmSource                      `protobuf:"varint,6,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetErrorsRequest) Reset() {
	*x = GetErrorsRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetErrorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetErrorsRequest) ProtoMessage() {}

func (x *GetErrorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetErrorsRequest.ProtoReflect.Descriptor instead.
func (*GetErrorsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetErrorsRequest) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *GetErrorsRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetErrorsRequest) GetFilters() map[string]*structpb.ListValue {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetErrorsRequest) GetSpanKind() []SpanKind {
	if x != nil {
		return x.SpanKind
	}
	return nil
}

func (x *GetErrorsRequest) GetTopk() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Topk
	}
	return nil
}

func (x *GetErrorsRequest) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

type GetErrorsResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Errors        []*v1.LineChart         `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	TotalAmount   *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	ApmSource     ApmSource               `protobuf:"varint,3,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetErrorsResponse) Reset() {
	*x = GetErrorsResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetErrorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetErrorsResponse) ProtoMessage() {}

func (x *GetErrorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetErrorsResponse.ProtoReflect.Descriptor instead.
func (*GetErrorsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetErrorsResponse) GetErrors() []*v1.LineChart {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetErrorsResponse) GetTotalAmount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.TotalAmount
	}
	return nil
}

func (x *GetErrorsResponse) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

type GetErrorsStreamRequest struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	ServiceName   *wrapperspb.StringValue        `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	TimeRange     *v2.TimeRange                  `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Filters       map[string]*structpb.ListValue `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SpanKind      []SpanKind                     `protobuf:"varint,4,rep,packed,name=span_kind,json=spanKind,proto3,enum=com.coralogix.catalog.v1.SpanKind" json:"span_kind,omitempty"`
	Topk          *wrapperspb.UInt64Value        `protobuf:"bytes,5,opt,name=topk,proto3" json:"topk,omitempty"`
	ApmSource     ApmSource                      `protobuf:"varint,6,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetErrorsStreamRequest) Reset() {
	*x = GetErrorsStreamRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetErrorsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetErrorsStreamRequest) ProtoMessage() {}

func (x *GetErrorsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetErrorsStreamRequest.ProtoReflect.Descriptor instead.
func (*GetErrorsStreamRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetErrorsStreamRequest) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *GetErrorsStreamRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetErrorsStreamRequest) GetFilters() map[string]*structpb.ListValue {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetErrorsStreamRequest) GetSpanKind() []SpanKind {
	if x != nil {
		return x.SpanKind
	}
	return nil
}

func (x *GetErrorsStreamRequest) GetTopk() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Topk
	}
	return nil
}

func (x *GetErrorsStreamRequest) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

type GetErrorsStreamResponse struct {
	state       protoimpl.MessageState  `protogen:"open.v1"`
	TotalAmount *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// Types that are valid to be assigned to Widget:
	//
	//	*GetErrorsStreamResponse_Errors
	//	*GetErrorsStreamResponse_ErrorsPerSeconds
	//	*GetErrorsStreamResponse_ErrorPercentage
	Widget        isGetErrorsStreamResponse_Widget `protobuf_oneof:"widget"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetErrorsStreamResponse) Reset() {
	*x = GetErrorsStreamResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetErrorsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetErrorsStreamResponse) ProtoMessage() {}

func (x *GetErrorsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetErrorsStreamResponse.ProtoReflect.Descriptor instead.
func (*GetErrorsStreamResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetErrorsStreamResponse) GetTotalAmount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.TotalAmount
	}
	return nil
}

func (x *GetErrorsStreamResponse) GetWidget() isGetErrorsStreamResponse_Widget {
	if x != nil {
		return x.Widget
	}
	return nil
}

func (x *GetErrorsStreamResponse) GetErrors() *RepeatedLineChart {
	if x != nil {
		if x, ok := x.Widget.(*GetErrorsStreamResponse_Errors); ok {
			return x.Errors
		}
	}
	return nil
}

func (x *GetErrorsStreamResponse) GetErrorsPerSeconds() *RepeatedLineChart {
	if x != nil {
		if x, ok := x.Widget.(*GetErrorsStreamResponse_ErrorsPerSeconds); ok {
			return x.ErrorsPerSeconds
		}
	}
	return nil
}

func (x *GetErrorsStreamResponse) GetErrorPercentage() *RepeatedLineChart {
	if x != nil {
		if x, ok := x.Widget.(*GetErrorsStreamResponse_ErrorPercentage); ok {
			return x.ErrorPercentage
		}
	}
	return nil
}

type isGetErrorsStreamResponse_Widget interface {
	isGetErrorsStreamResponse_Widget()
}

type GetErrorsStreamResponse_Errors struct {
	Errors *RepeatedLineChart `protobuf:"bytes,2,opt,name=errors,proto3,oneof"`
}

type GetErrorsStreamResponse_ErrorsPerSeconds struct {
	ErrorsPerSeconds *RepeatedLineChart `protobuf:"bytes,3,opt,name=errors_per_seconds,json=errorsPerSeconds,proto3,oneof"`
}

type GetErrorsStreamResponse_ErrorPercentage struct {
	ErrorPercentage *RepeatedLineChart `protobuf:"bytes,4,opt,name=error_percentage,json=errorPercentage,proto3,oneof"`
}

func (*GetErrorsStreamResponse_Errors) isGetErrorsStreamResponse_Widget() {}

func (*GetErrorsStreamResponse_ErrorsPerSeconds) isGetErrorsStreamResponse_Widget() {}

func (*GetErrorsStreamResponse_ErrorPercentage) isGetErrorsStreamResponse_Widget() {}

type GetP99LatencyRequest struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	ServiceName   *wrapperspb.StringValue        `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	TimeRange     *v2.TimeRange                  `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Filters       map[string]*structpb.ListValue `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SpanKind      []SpanKind                     `protobuf:"varint,4,rep,packed,name=span_kind,json=spanKind,proto3,enum=com.coralogix.catalog.v1.SpanKind" json:"span_kind,omitempty"`
	Topk          *wrapperspb.UInt64Value        `protobuf:"bytes,5,opt,name=topk,proto3" json:"topk,omitempty"`
	ApmSource     ApmSource                      `protobuf:"varint,6,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetP99LatencyRequest) Reset() {
	*x = GetP99LatencyRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetP99LatencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetP99LatencyRequest) ProtoMessage() {}

func (x *GetP99LatencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetP99LatencyRequest.ProtoReflect.Descriptor instead.
func (*GetP99LatencyRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetP99LatencyRequest) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *GetP99LatencyRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetP99LatencyRequest) GetFilters() map[string]*structpb.ListValue {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetP99LatencyRequest) GetSpanKind() []SpanKind {
	if x != nil {
		return x.SpanKind
	}
	return nil
}

func (x *GetP99LatencyRequest) GetTopk() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Topk
	}
	return nil
}

func (x *GetP99LatencyRequest) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

type GetP99LatencyResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	P99Latency    []*v1.LineChart         `protobuf:"bytes,1,rep,name=p99_latency,json=p99Latency,proto3" json:"p99_latency,omitempty"`
	TotalAmount   *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	ApmSource     ApmSource               `protobuf:"varint,3,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetP99LatencyResponse) Reset() {
	*x = GetP99LatencyResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetP99LatencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetP99LatencyResponse) ProtoMessage() {}

func (x *GetP99LatencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetP99LatencyResponse.ProtoReflect.Descriptor instead.
func (*GetP99LatencyResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetP99LatencyResponse) GetP99Latency() []*v1.LineChart {
	if x != nil {
		return x.P99Latency
	}
	return nil
}

func (x *GetP99LatencyResponse) GetTotalAmount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.TotalAmount
	}
	return nil
}

func (x *GetP99LatencyResponse) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

type ListOperationsRequest struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	ServiceName   *wrapperspb.StringValue        `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	TimeRange     *v2.TimeRange                  `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Filters       map[string]*structpb.ListValue `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SpanKind      []SpanKind                     `protobuf:"varint,4,rep,packed,name=span_kind,json=spanKind,proto3,enum=com.coralogix.catalog.v1.SpanKind" json:"span_kind,omitempty"`
	ApmSource     ApmSource                      `protobuf:"varint,5,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	TrendOffset   *wrapperspb.Int64Value         `protobuf:"bytes,6,opt,name=trend_offset,json=trendOffset,proto3" json:"trend_offset,omitempty"`
	Columns       []*wrapperspb.StringValue      `protobuf:"bytes,7,rep,name=columns,proto3" json:"columns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOperationsRequest) Reset() {
	*x = ListOperationsRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOperationsRequest) ProtoMessage() {}

func (x *ListOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListOperationsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListOperationsRequest) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *ListOperationsRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *ListOperationsRequest) GetFilters() map[string]*structpb.ListValue {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListOperationsRequest) GetSpanKind() []SpanKind {
	if x != nil {
		return x.SpanKind
	}
	return nil
}

func (x *ListOperationsRequest) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

func (x *ListOperationsRequest) GetTrendOffset() *wrapperspb.Int64Value {
	if x != nil {
		return x.TrendOffset
	}
	return nil
}

func (x *ListOperationsRequest) GetColumns() []*wrapperspb.StringValue {
	if x != nil {
		return x.Columns
	}
	return nil
}

type OperationsColumnsStreamRequest struct {
	state                 protoimpl.MessageState    `protogen:"open.v1"`
	ServiceName           *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	TimeRange             *v2.TimeRange             `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	ServiceCatalogFilters []*ApmFilter              `protobuf:"bytes,3,rep,name=service_catalog_filters,json=serviceCatalogFilters,proto3" json:"service_catalog_filters,omitempty"`
	OperationSpanKinds    []SpanKind                `protobuf:"varint,4,rep,packed,name=operation_span_kinds,json=operationSpanKinds,proto3,enum=com.coralogix.catalog.v1.SpanKind" json:"operation_span_kinds,omitempty"`
	ApmSource             ApmSource                 `protobuf:"varint,5,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	TrendOffset           *wrapperspb.Int64Value    `protobuf:"bytes,6,opt,name=trend_offset,json=trendOffset,proto3" json:"trend_offset,omitempty"`
	Columns               []*wrapperspb.StringValue `protobuf:"bytes,7,rep,name=columns,proto3" json:"columns,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *OperationsColumnsStreamRequest) Reset() {
	*x = OperationsColumnsStreamRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationsColumnsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationsColumnsStreamRequest) ProtoMessage() {}

func (x *OperationsColumnsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationsColumnsStreamRequest.ProtoReflect.Descriptor instead.
func (*OperationsColumnsStreamRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescGZIP(), []int{11}
}

func (x *OperationsColumnsStreamRequest) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *OperationsColumnsStreamRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *OperationsColumnsStreamRequest) GetServiceCatalogFilters() []*ApmFilter {
	if x != nil {
		return x.ServiceCatalogFilters
	}
	return nil
}

func (x *OperationsColumnsStreamRequest) GetOperationSpanKinds() []SpanKind {
	if x != nil {
		return x.OperationSpanKinds
	}
	return nil
}

func (x *OperationsColumnsStreamRequest) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

func (x *OperationsColumnsStreamRequest) GetTrendOffset() *wrapperspb.Int64Value {
	if x != nil {
		return x.TrendOffset
	}
	return nil
}

func (x *OperationsColumnsStreamRequest) GetColumns() []*wrapperspb.StringValue {
	if x != nil {
		return x.Columns
	}
	return nil
}

type OperationsColumnsStreamResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Operations    []*OperationData          `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	Queries       []*wrapperspb.StringValue `protobuf:"bytes,3,rep,name=queries,proto3" json:"queries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationsColumnsStreamResponse) Reset() {
	*x = OperationsColumnsStreamResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationsColumnsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationsColumnsStreamResponse) ProtoMessage() {}

func (x *OperationsColumnsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationsColumnsStreamResponse.ProtoReflect.Descriptor instead.
func (*OperationsColumnsStreamResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescGZIP(), []int{12}
}

func (x *OperationsColumnsStreamResponse) GetOperations() []*OperationData {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *OperationsColumnsStreamResponse) GetQueries() []*wrapperspb.StringValue {
	if x != nil {
		return x.Queries
	}
	return nil
}

type ListOperationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Operations    []*Operation           `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	ApmSource     ApmSource              `protobuf:"varint,2,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOperationsResponse) Reset() {
	*x = ListOperationsResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOperationsResponse) ProtoMessage() {}

func (x *ListOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListOperationsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListOperationsResponse) GetOperations() []*Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListOperationsResponse) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

type GetLatencyGraphRequest struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	ServiceName   *wrapperspb.StringValue        `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	TimeRange     *v2.TimeRange                  `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Filters       map[string]*structpb.ListValue `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SpanKind      []SpanKind                     `protobuf:"varint,4,rep,packed,name=span_kind,json=spanKind,proto3,enum=com.coralogix.catalog.v1.SpanKind" json:"span_kind,omitempty"`
	Topk          *wrapperspb.UInt64Value        `protobuf:"bytes,5,opt,name=topk,proto3" json:"topk,omitempty"`
	ApmSource     ApmSource                      `protobuf:"varint,6,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLatencyGraphRequest) Reset() {
	*x = GetLatencyGraphRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLatencyGraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatencyGraphRequest) ProtoMessage() {}

func (x *GetLatencyGraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatencyGraphRequest.ProtoReflect.Descriptor instead.
func (*GetLatencyGraphRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetLatencyGraphRequest) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *GetLatencyGraphRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetLatencyGraphRequest) GetFilters() map[string]*structpb.ListValue {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetLatencyGraphRequest) GetSpanKind() []SpanKind {
	if x != nil {
		return x.SpanKind
	}
	return nil
}

func (x *GetLatencyGraphRequest) GetTopk() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Topk
	}
	return nil
}

func (x *GetLatencyGraphRequest) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

type GetLatencyGraphResponse struct {
	state       protoimpl.MessageState  `protogen:"open.v1"`
	TotalAmount *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// Types that are valid to be assigned to Widget:
	//
	//	*GetLatencyGraphResponse_P50Latency
	//	*GetLatencyGraphResponse_P75Latency
	//	*GetLatencyGraphResponse_P95Latency
	//	*GetLatencyGraphResponse_P99Latency
	//	*GetLatencyGraphResponse_AvgLatency
	Widget        isGetLatencyGraphResponse_Widget `protobuf_oneof:"widget"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLatencyGraphResponse) Reset() {
	*x = GetLatencyGraphResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLatencyGraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatencyGraphResponse) ProtoMessage() {}

func (x *GetLatencyGraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatencyGraphResponse.ProtoReflect.Descriptor instead.
func (*GetLatencyGraphResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetLatencyGraphResponse) GetTotalAmount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.TotalAmount
	}
	return nil
}

func (x *GetLatencyGraphResponse) GetWidget() isGetLatencyGraphResponse_Widget {
	if x != nil {
		return x.Widget
	}
	return nil
}

func (x *GetLatencyGraphResponse) GetP50Latency() *RepeatedLineChart {
	if x != nil {
		if x, ok := x.Widget.(*GetLatencyGraphResponse_P50Latency); ok {
			return x.P50Latency
		}
	}
	return nil
}

func (x *GetLatencyGraphResponse) GetP75Latency() *RepeatedLineChart {
	if x != nil {
		if x, ok := x.Widget.(*GetLatencyGraphResponse_P75Latency); ok {
			return x.P75Latency
		}
	}
	return nil
}

func (x *GetLatencyGraphResponse) GetP95Latency() *RepeatedLineChart {
	if x != nil {
		if x, ok := x.Widget.(*GetLatencyGraphResponse_P95Latency); ok {
			return x.P95Latency
		}
	}
	return nil
}

func (x *GetLatencyGraphResponse) GetP99Latency() *RepeatedLineChart {
	if x != nil {
		if x, ok := x.Widget.(*GetLatencyGraphResponse_P99Latency); ok {
			return x.P99Latency
		}
	}
	return nil
}

func (x *GetLatencyGraphResponse) GetAvgLatency() *RepeatedLineChart {
	if x != nil {
		if x, ok := x.Widget.(*GetLatencyGraphResponse_AvgLatency); ok {
			return x.AvgLatency
		}
	}
	return nil
}

type isGetLatencyGraphResponse_Widget interface {
	isGetLatencyGraphResponse_Widget()
}

type GetLatencyGraphResponse_P50Latency struct {
	P50Latency *RepeatedLineChart `protobuf:"bytes,2,opt,name=p50_latency,json=p50Latency,proto3,oneof"`
}

type GetLatencyGraphResponse_P75Latency struct {
	P75Latency *RepeatedLineChart `protobuf:"bytes,3,opt,name=p75_latency,json=p75Latency,proto3,oneof"`
}

type GetLatencyGraphResponse_P95Latency struct {
	P95Latency *RepeatedLineChart `protobuf:"bytes,4,opt,name=p95_latency,json=p95Latency,proto3,oneof"`
}

type GetLatencyGraphResponse_P99Latency struct {
	P99Latency *RepeatedLineChart `protobuf:"bytes,5,opt,name=p99_latency,json=p99Latency,proto3,oneof"`
}

type GetLatencyGraphResponse_AvgLatency struct {
	AvgLatency *RepeatedLineChart `protobuf:"bytes,6,opt,name=avg_latency,json=avgLatency,proto3,oneof"`
}

func (*GetLatencyGraphResponse_P50Latency) isGetLatencyGraphResponse_Widget() {}

func (*GetLatencyGraphResponse_P75Latency) isGetLatencyGraphResponse_Widget() {}

func (*GetLatencyGraphResponse_P95Latency) isGetLatencyGraphResponse_Widget() {}

func (*GetLatencyGraphResponse_P99Latency) isGetLatencyGraphResponse_Widget() {}

func (*GetLatencyGraphResponse_AvgLatency) isGetLatencyGraphResponse_Widget() {}

var File_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto protoreflect.FileDescriptor

var file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDesc = []byte{
	0x0a, 0x46, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x25,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x30, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x32, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x31, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x6d, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x3b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x05, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x64, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x70, 0x61,
	0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x08, 0x73, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x6f,
	0x70, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x12, 0x4e, 0x0a, 0x0a,
	0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x09, 0x61, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x56, 0x0a, 0x0c,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x3a, 0x8e, 0x01, 0x92, 0x41, 0x8a, 0x01, 0x0a, 0x85, 0x01, 0x2a, 0x1a,
	0x47, 0x65, 0x74, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69,
	0x6e, 0x67, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x3f, 0x54, 0x68, 0x69, 0x73,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20,
	0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0xd2, 0x01, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0xd2, 0x01, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6b,
	0x69, 0x6e, 0x64, 0x2a, 0x00, 0x22, 0xe7, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x52, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61,
	0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x70, 0x6d, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x61, 0x70,
	0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x66, 0x92, 0x41, 0x63, 0x0a, 0x5f, 0x2a, 0x1b,
	0x47, 0x65, 0x74, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69,
	0x6e, 0x67, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x40, 0x54, 0x68, 0x69,
	0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x74, 0x69,
	0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x2a, 0x00, 0x22,
	0xa8, 0x05, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x61, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x08,
	0x73, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x70,
	0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x09, 0x61, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x56, 0x0a, 0x0c, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x3a, 0x85, 0x01, 0x92, 0x41, 0x81, 0x01, 0x0a, 0x7d, 0x2a, 0x16, 0x47, 0x65, 0x74,
	0x20, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x20, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x3b, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f,
	0x20, 0x67, 0x65, 0x74, 0x20, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x2e,
	0xd2, 0x01, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2,
	0x01, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0xd2, 0x01, 0x09, 0x73,
	0x70, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2a, 0x00, 0x22, 0xd5, 0x02, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70,
	0x75, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d,
	0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75,
	0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x61, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x3a, 0x5e, 0x92, 0x41, 0x5b, 0x0a, 0x57, 0x2a, 0x17, 0x47, 0x65, 0x74, 0x20, 0x54,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x3c, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f,
	0x20, 0x67, 0x65, 0x74, 0x20, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x2e,
	0x2a, 0x00, 0x22, 0x96, 0x05, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x08, 0x73, 0x70, 0x61, 0x6e, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x74, 0x6f, 0x70, 0x6b, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x61, 0x70, 0x6d, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x56, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x7c, 0x92,
	0x41, 0x79, 0x0a, 0x75, 0x2a, 0x12, 0x47, 0x65, 0x74, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x37, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x2e, 0xd2, 0x01, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0xd2, 0x01, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0xd2, 0x01, 0x09,
	0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2a, 0x00, 0x22, 0xc0, 0x02, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x70, 0x6d, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x61, 0x70,
	0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x55, 0x92, 0x41, 0x52, 0x0a, 0x4e, 0x2a, 0x12,
	0x47, 0x65, 0x74, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x38, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f,
	0x20, 0x67, 0x65, 0x74, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x2a, 0x00, 0x22, 0xba,
	0x05, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x63, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x70,
	0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x08, 0x73, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74,
	0x6f, 0x70, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x12, 0x4e, 0x0a,
	0x0a, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x09, 0x61, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x56, 0x0a,
	0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x93, 0x01, 0x92, 0x41, 0x8f, 0x01, 0x0a, 0x8a, 0x01, 0x2a,
	0x27, 0x47, 0x65, 0x74, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x57, 0x69, 0x74, 0x68, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x37, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x2e, 0xd2, 0x01, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0xd2, 0x01, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0xd2, 0x01, 0x09,
	0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2a, 0x00, 0x22, 0xec, 0x03, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x67, 0x0a, 0x12, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x48, 0x00, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x64, 0x0a, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69,
	0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x3a, 0x64, 0x92, 0x41, 0x61, 0x0a,
	0x5d, 0x2a, 0x1a, 0x47, 0x65, 0x74, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x3f, 0x54,
	0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20,
	0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x2a, 0x00,
	0x42, 0x08, 0x0a, 0x06, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x22, 0xaa, 0x05, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x50, 0x39, 0x39, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x61, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x39, 0x39, 0x4c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x08, 0x73, 0x70, 0x61, 0x6e, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x74, 0x6f, 0x70, 0x6b, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x61, 0x70, 0x6d, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x56, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x87, 0x01,
	0x92, 0x41, 0x83, 0x01, 0x0a, 0x7f, 0x2a, 0x17, 0x47, 0x65, 0x74, 0x20, 0x50, 0x39, 0x39, 0x20,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x3c, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20,
	0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74,
	0x20, 0x50, 0x39, 0x39, 0x20, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0xd2, 0x01, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0xd2, 0x01, 0x09, 0x73, 0x70, 0x61, 0x6e,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2a, 0x00, 0x22, 0x83, 0x03, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50,
	0x39, 0x39, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x39, 0x39, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x52, 0x0a, 0x70, 0x39, 0x39, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x3f, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x61, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x3a, 0x8a, 0x01, 0x92, 0x41, 0x86, 0x01, 0x0a, 0x81, 0x01, 0x2a, 0x18, 0x47, 0x65, 0x74, 0x20,
	0x50, 0x39, 0x39, 0x20, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x3d, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20,
	0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x50, 0x39, 0x39, 0x20, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0xd2, 0x01, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0xd2, 0x01, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0xd2,
	0x01, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2a, 0x00, 0x22, 0x81, 0x06,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x62, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x08,
	0x73, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x70, 0x6d, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x61,
	0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x72, 0x65, 0x6e,
	0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x65,
	0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x1a, 0x56, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x96, 0x01, 0x92, 0x41, 0x92, 0x01, 0x0a,
	0x8d, 0x01, 0x2a, 0x1e, 0x47, 0x65, 0x74, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x4f, 0x66, 0x20,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x43, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x67, 0x65, 0x74, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x4f, 0x66, 0x20, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0xd2, 0x01, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0xd2, 0x01, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2a,
	0x00, 0x22, 0xce, 0x05, 0x0a, 0x1e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70,
	0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x5b, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x54, 0x0a,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69,
	0x6e, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x61, 0x70, 0x6d, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x3a, 0xa4, 0x01, 0x92, 0x41,
	0xa0, 0x01, 0x0a, 0x9b, 0x01, 0x2a, 0x25, 0x47, 0x65, 0x74, 0x20, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x20, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x4a, 0x54, 0x68,
	0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0xd2, 0x01, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0xd2, 0x01, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64,
	0x2a, 0x00, 0x22, 0xac, 0x02, 0x0a, 0x1f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x3a, 0x7c, 0x92, 0x41, 0x79, 0x0a, 0x75, 0x2a, 0x26, 0x47, 0x65, 0x74, 0x20,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x4b, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f,
	0x20, 0x67, 0x65, 0x74, 0x20, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x2a,
	0x00, 0x22, 0xa9, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a,
	0x0a, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x09, 0x61, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x6e, 0x92,
	0x41, 0x6b, 0x0a, 0x67, 0x2a, 0x1f, 0x47, 0x65, 0x74, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x4f,
	0x66, 0x20, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x44, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x4f, 0x66, 0x20,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x2a, 0x00, 0x22, 0xb3, 0x05,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x63, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x70, 0x61,
	0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x08, 0x73, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x6f,
	0x70, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x12, 0x4e, 0x0a, 0x0a,
	0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x09, 0x61, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x56, 0x0a, 0x0c,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x3a, 0x8c, 0x01, 0x92, 0x41, 0x88, 0x01, 0x0a, 0x83, 0x01, 0x2a, 0x19,
	0x47, 0x65, 0x74, 0x20, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x3e, 0x54, 0x68, 0x69, 0x73, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x20, 0x47, 0x72, 0x61, 0x70, 0x68, 0x2e, 0xd2, 0x01, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0xd2, 0x01, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x2a, 0x00, 0x22, 0x96, 0x05, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x5a, 0x0a, 0x0b, 0x70, 0x35, 0x30, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x70, 0x35, 0x30, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x5a, 0x0a, 0x0b,
	0x70, 0x37, 0x35, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x37,
	0x35, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x5a, 0x0a, 0x0b, 0x70, 0x39, 0x35, 0x5f,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x39, 0x35, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x5a, 0x0a, 0x0b, 0x70, 0x39, 0x39, 0x5f, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x39, 0x39, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x5a, 0x0a, 0x0b, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x61, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x3a, 0x64, 0x92, 0x41,
	0x61, 0x0a, 0x5d, 0x2a, 0x1a, 0x47, 0x65, 0x74, 0x20, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x20, 0x47, 0x72, 0x61, 0x70, 0x68, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x3f, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20,
	0x61, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65,
	0x74, 0x20, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x47, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x2a, 0x00, 0x42, 0x08, 0x0a, 0x06, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x32, 0xcf, 0x0d, 0x0a,
	0x19, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xd9, 0x01, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x12,
	0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46,
	0xca, 0xb8, 0x02, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x2d,
	0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0xc8, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3e, 0xca, 0xb8, 0x02, 0x10, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x20, 0x54, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x74,
	0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75,
	0x74, 0x12, 0xb4, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x36, 0xca, 0xb8, 0x02, 0x0c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x20, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0xdb, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0xca, 0xb8, 0x02, 0x18, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x50, 0x65, 0x72, 0x20,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x74,
	0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2d, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x30, 0x01, 0x12, 0xca, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x39,
	0x39, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x39, 0x39, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x39, 0x39, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x40, 0xca, 0xb8, 0x02, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x20, 0x50, 0x39, 0x39,
	0x20, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x2d,
	0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x39, 0x39, 0x2d, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0xd1, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x44, 0xca, 0xb8, 0x02, 0x11, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x2d,
	0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xf7, 0x01, 0x0a, 0x17, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4d, 0xca, 0xb8, 0x02, 0x18, 0x0a, 0x16, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x20,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x30,
	0x01, 0x12, 0xda, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x48, 0xca, 0xb8, 0x02, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x20, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x47, 0x72, 0x61, 0x70, 0x68, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2f, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x2d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x30, 0x01, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescOnce sync.Once
	file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescData = file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDesc
)

func file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescData)
	})
	return file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDescData
}

var file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_goTypes = []any{
	(*GetTimeConsumingRequest)(nil),         // 0: com.coralogixapis.service_catalog.v1.GetTimeConsumingRequest
	(*GetTimeConsumingResponse)(nil),        // 1: com.coralogixapis.service_catalog.v1.GetTimeConsumingResponse
	(*GetThroughputRequest)(nil),            // 2: com.coralogixapis.service_catalog.v1.GetThroughputRequest
	(*GetThroughputResponse)(nil),           // 3: com.coralogixapis.service_catalog.v1.GetThroughputResponse
	(*GetErrorsRequest)(nil),                // 4: com.coralogixapis.service_catalog.v1.GetErrorsRequest
	(*GetErrorsResponse)(nil),               // 5: com.coralogixapis.service_catalog.v1.GetErrorsResponse
	(*GetErrorsStreamRequest)(nil),          // 6: com.coralogixapis.service_catalog.v1.GetErrorsStreamRequest
	(*GetErrorsStreamResponse)(nil),         // 7: com.coralogixapis.service_catalog.v1.GetErrorsStreamResponse
	(*GetP99LatencyRequest)(nil),            // 8: com.coralogixapis.service_catalog.v1.GetP99LatencyRequest
	(*GetP99LatencyResponse)(nil),           // 9: com.coralogixapis.service_catalog.v1.GetP99LatencyResponse
	(*ListOperationsRequest)(nil),           // 10: com.coralogixapis.service_catalog.v1.ListOperationsRequest
	(*OperationsColumnsStreamRequest)(nil),  // 11: com.coralogixapis.service_catalog.v1.operationsColumnsStreamRequest
	(*OperationsColumnsStreamResponse)(nil), // 12: com.coralogixapis.service_catalog.v1.operationsColumnsStreamResponse
	(*ListOperationsResponse)(nil),          // 13: com.coralogixapis.service_catalog.v1.ListOperationsResponse
	(*GetLatencyGraphRequest)(nil),          // 14: com.coralogixapis.service_catalog.v1.GetLatencyGraphRequest
	(*GetLatencyGraphResponse)(nil),         // 15: com.coralogixapis.service_catalog.v1.GetLatencyGraphResponse
	nil,                                     // 16: com.coralogixapis.service_catalog.v1.GetTimeConsumingRequest.FiltersEntry
	nil,                                     // 17: com.coralogixapis.service_catalog.v1.GetThroughputRequest.FiltersEntry
	nil,                                     // 18: com.coralogixapis.service_catalog.v1.GetErrorsRequest.FiltersEntry
	nil,                                     // 19: com.coralogixapis.service_catalog.v1.GetErrorsStreamRequest.FiltersEntry
	nil,                                     // 20: com.coralogixapis.service_catalog.v1.GetP99LatencyRequest.FiltersEntry
	nil,                                     // 21: com.coralogixapis.service_catalog.v1.ListOperationsRequest.FiltersEntry
	nil,                                     // 22: com.coralogixapis.service_catalog.v1.GetLatencyGraphRequest.FiltersEntry
	(*wrapperspb.StringValue)(nil),          // 23: google.protobuf.StringValue
	(*v2.TimeRange)(nil),                    // 24: com.coralogixapis.apm.common.v2.TimeRange
	(SpanKind)(0),                           // 25: com.coralogix.catalog.v1.SpanKind
	(*wrapperspb.UInt64Value)(nil),          // 26: google.protobuf.UInt64Value
	(ApmSource)(0),                          // 27: com.coralogixapis.service_catalog.v1.ApmSource
	(*v1.LineChart)(nil),                    // 28: com.coralogixapis.apm.widgets.v1.LineChart
	(*RepeatedLineChart)(nil),               // 29: com.coralogixapis.service_catalog.v1.RepeatedLineChart
	(*wrapperspb.Int64Value)(nil),           // 30: google.protobuf.Int64Value
	(*ApmFilter)(nil),                       // 31: com.coralogix.catalog.v1.ApmFilter
	(*OperationData)(nil),                   // 32: com.coralogixapis.service_catalog.v1.OperationData
	(*Operation)(nil),                       // 33: com.coralogixapis.service_catalog.v1.Operation
	(*structpb.ListValue)(nil),              // 34: google.protobuf.ListValue
}
var file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_depIdxs = []int32{
	23, // 0: com.coralogixapis.service_catalog.v1.GetTimeConsumingRequest.service_name:type_name -> google.protobuf.StringValue
	24, // 1: com.coralogixapis.service_catalog.v1.GetTimeConsumingRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	16, // 2: com.coralogixapis.service_catalog.v1.GetTimeConsumingRequest.filters:type_name -> com.coralogixapis.service_catalog.v1.GetTimeConsumingRequest.FiltersEntry
	25, // 3: com.coralogixapis.service_catalog.v1.GetTimeConsumingRequest.span_kind:type_name -> com.coralogix.catalog.v1.SpanKind
	26, // 4: com.coralogixapis.service_catalog.v1.GetTimeConsumingRequest.topk:type_name -> google.protobuf.UInt64Value
	27, // 5: com.coralogixapis.service_catalog.v1.GetTimeConsumingRequest.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	28, // 6: com.coralogixapis.service_catalog.v1.GetTimeConsumingResponse.time_consuming:type_name -> com.coralogixapis.apm.widgets.v1.LineChart
	26, // 7: com.coralogixapis.service_catalog.v1.GetTimeConsumingResponse.total_amount:type_name -> google.protobuf.UInt64Value
	27, // 8: com.coralogixapis.service_catalog.v1.GetTimeConsumingResponse.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	23, // 9: com.coralogixapis.service_catalog.v1.GetThroughputRequest.service_name:type_name -> google.protobuf.StringValue
	24, // 10: com.coralogixapis.service_catalog.v1.GetThroughputRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	17, // 11: com.coralogixapis.service_catalog.v1.GetThroughputRequest.filters:type_name -> com.coralogixapis.service_catalog.v1.GetThroughputRequest.FiltersEntry
	25, // 12: com.coralogixapis.service_catalog.v1.GetThroughputRequest.span_kind:type_name -> com.coralogix.catalog.v1.SpanKind
	26, // 13: com.coralogixapis.service_catalog.v1.GetThroughputRequest.topk:type_name -> google.protobuf.UInt64Value
	27, // 14: com.coralogixapis.service_catalog.v1.GetThroughputRequest.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	28, // 15: com.coralogixapis.service_catalog.v1.GetThroughputResponse.throughput:type_name -> com.coralogixapis.apm.widgets.v1.LineChart
	26, // 16: com.coralogixapis.service_catalog.v1.GetThroughputResponse.total_amount:type_name -> google.protobuf.UInt64Value
	27, // 17: com.coralogixapis.service_catalog.v1.GetThroughputResponse.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	23, // 18: com.coralogixapis.service_catalog.v1.GetErrorsRequest.service_name:type_name -> google.protobuf.StringValue
	24, // 19: com.coralogixapis.service_catalog.v1.GetErrorsRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	18, // 20: com.coralogixapis.service_catalog.v1.GetErrorsRequest.filters:type_name -> com.coralogixapis.service_catalog.v1.GetErrorsRequest.FiltersEntry
	25, // 21: com.coralogixapis.service_catalog.v1.GetErrorsRequest.span_kind:type_name -> com.coralogix.catalog.v1.SpanKind
	26, // 22: com.coralogixapis.service_catalog.v1.GetErrorsRequest.topk:type_name -> google.protobuf.UInt64Value
	27, // 23: com.coralogixapis.service_catalog.v1.GetErrorsRequest.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	28, // 24: com.coralogixapis.service_catalog.v1.GetErrorsResponse.errors:type_name -> com.coralogixapis.apm.widgets.v1.LineChart
	26, // 25: com.coralogixapis.service_catalog.v1.GetErrorsResponse.total_amount:type_name -> google.protobuf.UInt64Value
	27, // 26: com.coralogixapis.service_catalog.v1.GetErrorsResponse.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	23, // 27: com.coralogixapis.service_catalog.v1.GetErrorsStreamRequest.service_name:type_name -> google.protobuf.StringValue
	24, // 28: com.coralogixapis.service_catalog.v1.GetErrorsStreamRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	19, // 29: com.coralogixapis.service_catalog.v1.GetErrorsStreamRequest.filters:type_name -> com.coralogixapis.service_catalog.v1.GetErrorsStreamRequest.FiltersEntry
	25, // 30: com.coralogixapis.service_catalog.v1.GetErrorsStreamRequest.span_kind:type_name -> com.coralogix.catalog.v1.SpanKind
	26, // 31: com.coralogixapis.service_catalog.v1.GetErrorsStreamRequest.topk:type_name -> google.protobuf.UInt64Value
	27, // 32: com.coralogixapis.service_catalog.v1.GetErrorsStreamRequest.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	26, // 33: com.coralogixapis.service_catalog.v1.GetErrorsStreamResponse.total_amount:type_name -> google.protobuf.UInt64Value
	29, // 34: com.coralogixapis.service_catalog.v1.GetErrorsStreamResponse.errors:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	29, // 35: com.coralogixapis.service_catalog.v1.GetErrorsStreamResponse.errors_per_seconds:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	29, // 36: com.coralogixapis.service_catalog.v1.GetErrorsStreamResponse.error_percentage:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	23, // 37: com.coralogixapis.service_catalog.v1.GetP99LatencyRequest.service_name:type_name -> google.protobuf.StringValue
	24, // 38: com.coralogixapis.service_catalog.v1.GetP99LatencyRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	20, // 39: com.coralogixapis.service_catalog.v1.GetP99LatencyRequest.filters:type_name -> com.coralogixapis.service_catalog.v1.GetP99LatencyRequest.FiltersEntry
	25, // 40: com.coralogixapis.service_catalog.v1.GetP99LatencyRequest.span_kind:type_name -> com.coralogix.catalog.v1.SpanKind
	26, // 41: com.coralogixapis.service_catalog.v1.GetP99LatencyRequest.topk:type_name -> google.protobuf.UInt64Value
	27, // 42: com.coralogixapis.service_catalog.v1.GetP99LatencyRequest.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	28, // 43: com.coralogixapis.service_catalog.v1.GetP99LatencyResponse.p99_latency:type_name -> com.coralogixapis.apm.widgets.v1.LineChart
	26, // 44: com.coralogixapis.service_catalog.v1.GetP99LatencyResponse.total_amount:type_name -> google.protobuf.UInt64Value
	27, // 45: com.coralogixapis.service_catalog.v1.GetP99LatencyResponse.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	23, // 46: com.coralogixapis.service_catalog.v1.ListOperationsRequest.service_name:type_name -> google.protobuf.StringValue
	24, // 47: com.coralogixapis.service_catalog.v1.ListOperationsRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	21, // 48: com.coralogixapis.service_catalog.v1.ListOperationsRequest.filters:type_name -> com.coralogixapis.service_catalog.v1.ListOperationsRequest.FiltersEntry
	25, // 49: com.coralogixapis.service_catalog.v1.ListOperationsRequest.span_kind:type_name -> com.coralogix.catalog.v1.SpanKind
	27, // 50: com.coralogixapis.service_catalog.v1.ListOperationsRequest.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	30, // 51: com.coralogixapis.service_catalog.v1.ListOperationsRequest.trend_offset:type_name -> google.protobuf.Int64Value
	23, // 52: com.coralogixapis.service_catalog.v1.ListOperationsRequest.columns:type_name -> google.protobuf.StringValue
	23, // 53: com.coralogixapis.service_catalog.v1.operationsColumnsStreamRequest.service_name:type_name -> google.protobuf.StringValue
	24, // 54: com.coralogixapis.service_catalog.v1.operationsColumnsStreamRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	31, // 55: com.coralogixapis.service_catalog.v1.operationsColumnsStreamRequest.service_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	25, // 56: com.coralogixapis.service_catalog.v1.operationsColumnsStreamRequest.operation_span_kinds:type_name -> com.coralogix.catalog.v1.SpanKind
	27, // 57: com.coralogixapis.service_catalog.v1.operationsColumnsStreamRequest.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	30, // 58: com.coralogixapis.service_catalog.v1.operationsColumnsStreamRequest.trend_offset:type_name -> google.protobuf.Int64Value
	23, // 59: com.coralogixapis.service_catalog.v1.operationsColumnsStreamRequest.columns:type_name -> google.protobuf.StringValue
	32, // 60: com.coralogixapis.service_catalog.v1.operationsColumnsStreamResponse.operations:type_name -> com.coralogixapis.service_catalog.v1.OperationData
	23, // 61: com.coralogixapis.service_catalog.v1.operationsColumnsStreamResponse.queries:type_name -> google.protobuf.StringValue
	33, // 62: com.coralogixapis.service_catalog.v1.ListOperationsResponse.operations:type_name -> com.coralogixapis.service_catalog.v1.Operation
	27, // 63: com.coralogixapis.service_catalog.v1.ListOperationsResponse.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	23, // 64: com.coralogixapis.service_catalog.v1.GetLatencyGraphRequest.service_name:type_name -> google.protobuf.StringValue
	24, // 65: com.coralogixapis.service_catalog.v1.GetLatencyGraphRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	22, // 66: com.coralogixapis.service_catalog.v1.GetLatencyGraphRequest.filters:type_name -> com.coralogixapis.service_catalog.v1.GetLatencyGraphRequest.FiltersEntry
	25, // 67: com.coralogixapis.service_catalog.v1.GetLatencyGraphRequest.span_kind:type_name -> com.coralogix.catalog.v1.SpanKind
	26, // 68: com.coralogixapis.service_catalog.v1.GetLatencyGraphRequest.topk:type_name -> google.protobuf.UInt64Value
	27, // 69: com.coralogixapis.service_catalog.v1.GetLatencyGraphRequest.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	26, // 70: com.coralogixapis.service_catalog.v1.GetLatencyGraphResponse.total_amount:type_name -> google.protobuf.UInt64Value
	29, // 71: com.coralogixapis.service_catalog.v1.GetLatencyGraphResponse.p50_latency:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	29, // 72: com.coralogixapis.service_catalog.v1.GetLatencyGraphResponse.p75_latency:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	29, // 73: com.coralogixapis.service_catalog.v1.GetLatencyGraphResponse.p95_latency:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	29, // 74: com.coralogixapis.service_catalog.v1.GetLatencyGraphResponse.p99_latency:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	29, // 75: com.coralogixapis.service_catalog.v1.GetLatencyGraphResponse.avg_latency:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	34, // 76: com.coralogixapis.service_catalog.v1.GetTimeConsumingRequest.FiltersEntry.value:type_name -> google.protobuf.ListValue
	34, // 77: com.coralogixapis.service_catalog.v1.GetThroughputRequest.FiltersEntry.value:type_name -> google.protobuf.ListValue
	34, // 78: com.coralogixapis.service_catalog.v1.GetErrorsRequest.FiltersEntry.value:type_name -> google.protobuf.ListValue
	34, // 79: com.coralogixapis.service_catalog.v1.GetErrorsStreamRequest.FiltersEntry.value:type_name -> google.protobuf.ListValue
	34, // 80: com.coralogixapis.service_catalog.v1.GetP99LatencyRequest.FiltersEntry.value:type_name -> google.protobuf.ListValue
	34, // 81: com.coralogixapis.service_catalog.v1.ListOperationsRequest.FiltersEntry.value:type_name -> google.protobuf.ListValue
	34, // 82: com.coralogixapis.service_catalog.v1.GetLatencyGraphRequest.FiltersEntry.value:type_name -> google.protobuf.ListValue
	0,  // 83: com.coralogixapis.service_catalog.v1.DistributedTracingService.GetTimeConsuming:input_type -> com.coralogixapis.service_catalog.v1.GetTimeConsumingRequest
	2,  // 84: com.coralogixapis.service_catalog.v1.DistributedTracingService.GetThroughput:input_type -> com.coralogixapis.service_catalog.v1.GetThroughputRequest
	4,  // 85: com.coralogixapis.service_catalog.v1.DistributedTracingService.GetErrors:input_type -> com.coralogixapis.service_catalog.v1.GetErrorsRequest
	6,  // 86: com.coralogixapis.service_catalog.v1.DistributedTracingService.GetErrorsStream:input_type -> com.coralogixapis.service_catalog.v1.GetErrorsStreamRequest
	8,  // 87: com.coralogixapis.service_catalog.v1.DistributedTracingService.GetP99Latency:input_type -> com.coralogixapis.service_catalog.v1.GetP99LatencyRequest
	10, // 88: com.coralogixapis.service_catalog.v1.DistributedTracingService.ListOperations:input_type -> com.coralogixapis.service_catalog.v1.ListOperationsRequest
	11, // 89: com.coralogixapis.service_catalog.v1.DistributedTracingService.operationsColumnsStream:input_type -> com.coralogixapis.service_catalog.v1.operationsColumnsStreamRequest
	14, // 90: com.coralogixapis.service_catalog.v1.DistributedTracingService.GetLatencyGraph:input_type -> com.coralogixapis.service_catalog.v1.GetLatencyGraphRequest
	1,  // 91: com.coralogixapis.service_catalog.v1.DistributedTracingService.GetTimeConsuming:output_type -> com.coralogixapis.service_catalog.v1.GetTimeConsumingResponse
	3,  // 92: com.coralogixapis.service_catalog.v1.DistributedTracingService.GetThroughput:output_type -> com.coralogixapis.service_catalog.v1.GetThroughputResponse
	5,  // 93: com.coralogixapis.service_catalog.v1.DistributedTracingService.GetErrors:output_type -> com.coralogixapis.service_catalog.v1.GetErrorsResponse
	7,  // 94: com.coralogixapis.service_catalog.v1.DistributedTracingService.GetErrorsStream:output_type -> com.coralogixapis.service_catalog.v1.GetErrorsStreamResponse
	9,  // 95: com.coralogixapis.service_catalog.v1.DistributedTracingService.GetP99Latency:output_type -> com.coralogixapis.service_catalog.v1.GetP99LatencyResponse
	13, // 96: com.coralogixapis.service_catalog.v1.DistributedTracingService.ListOperations:output_type -> com.coralogixapis.service_catalog.v1.ListOperationsResponse
	12, // 97: com.coralogixapis.service_catalog.v1.DistributedTracingService.operationsColumnsStream:output_type -> com.coralogixapis.service_catalog.v1.operationsColumnsStreamResponse
	15, // 98: com.coralogixapis.service_catalog.v1.DistributedTracingService.GetLatencyGraph:output_type -> com.coralogixapis.service_catalog.v1.GetLatencyGraphResponse
	91, // [91:99] is the sub-list for method output_type
	83, // [83:91] is the sub-list for method input_type
	83, // [83:83] is the sub-list for extension type_name
	83, // [83:83] is the sub-list for extension extendee
	0,  // [0:83] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_init() }
func file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_init() {
	if File_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto != nil {
		return
	}
	file_com_coralogix_catalog_v1_common_proto_init()
	file_com_coralogix_catalog_v1_span_kind_proto_init()
	file_com_coralogixapis_service_catalog_v1_apm_source_proto_init()
	file_com_coralogixapis_service_catalog_v1_operation_proto_init()
	file_com_coralogixapis_service_catalog_v1_repeated_widgets_proto_init()
	file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[7].OneofWrappers = []any{
		(*GetErrorsStreamResponse_Errors)(nil),
		(*GetErrorsStreamResponse_ErrorsPerSeconds)(nil),
		(*GetErrorsStreamResponse_ErrorPercentage)(nil),
	}
	file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes[15].OneofWrappers = []any{
		(*GetLatencyGraphResponse_P50Latency)(nil),
		(*GetLatencyGraphResponse_P75Latency)(nil),
		(*GetLatencyGraphResponse_P95Latency)(nil),
		(*GetLatencyGraphResponse_P99Latency)(nil),
		(*GetLatencyGraphResponse_AvgLatency)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto = out.File
	file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_rawDesc = nil
	file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_goTypes = nil
	file_com_coralogixapis_service_catalog_v1_distributed_tracing_service_proto_depIdxs = nil
}
