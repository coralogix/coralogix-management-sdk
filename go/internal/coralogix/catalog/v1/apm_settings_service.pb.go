// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.1
// source: com/coralogixapis/service_catalog/v1/apm_settings_service.proto

package v1

import (
	_ "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/common/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetApmSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Catalog Catalog `protobuf:"varint,1,opt,name=catalog,proto3,enum=com.coralogixapis.service_catalog.v1.Catalog" json:"catalog,omitempty"`
}

func (x *GetApmSettingsRequest) Reset() {
	*x = GetApmSettingsRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetApmSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApmSettingsRequest) ProtoMessage() {}

func (x *GetApmSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApmSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetApmSettingsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetApmSettingsRequest) GetCatalog() Catalog {
	if x != nil {
		return x.Catalog
	}
	return Catalog_CATALOG_UNSPECIFIED
}

type GetApmSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApmSettings *ApmSettings `protobuf:"bytes,1,opt,name=apm_settings,json=apmSettings,proto3" json:"apm_settings,omitempty"`
}

func (x *GetApmSettingsResponse) Reset() {
	*x = GetApmSettingsResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetApmSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApmSettingsResponse) ProtoMessage() {}

func (x *GetApmSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApmSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetApmSettingsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetApmSettingsResponse) GetApmSettings() *ApmSettings {
	if x != nil {
		return x.ApmSettings
	}
	return nil
}

type ReplaceApmSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApmSettings *ApmSettings `protobuf:"bytes,1,opt,name=apm_settings,json=apmSettings,proto3" json:"apm_settings,omitempty"`
}

func (x *ReplaceApmSettingsRequest) Reset() {
	*x = ReplaceApmSettingsRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceApmSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceApmSettingsRequest) ProtoMessage() {}

func (x *ReplaceApmSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceApmSettingsRequest.ProtoReflect.Descriptor instead.
func (*ReplaceApmSettingsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescGZIP(), []int{2}
}

func (x *ReplaceApmSettingsRequest) GetApmSettings() *ApmSettings {
	if x != nil {
		return x.ApmSettings
	}
	return nil
}

type ReplaceApmSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApmSettings *ApmSettings `protobuf:"bytes,1,opt,name=apm_settings,json=apmSettings,proto3" json:"apm_settings,omitempty"`
}

func (x *ReplaceApmSettingsResponse) Reset() {
	*x = ReplaceApmSettingsResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceApmSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceApmSettingsResponse) ProtoMessage() {}

func (x *ReplaceApmSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceApmSettingsResponse.ProtoReflect.Descriptor instead.
func (*ReplaceApmSettingsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescGZIP(), []int{3}
}

func (x *ReplaceApmSettingsResponse) GetApmSettings() *ApmSettings {
	if x != nil {
		return x.ApmSettings
	}
	return nil
}

type ValidateApmSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source ApmSource `protobuf:"varint,1,opt,name=source,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"source,omitempty"`
}

func (x *ValidateApmSourceRequest) Reset() {
	*x = ValidateApmSourceRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateApmSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateApmSourceRequest) ProtoMessage() {}

func (x *ValidateApmSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateApmSourceRequest.ProtoReflect.Descriptor instead.
func (*ValidateApmSourceRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescGZIP(), []int{4}
}

func (x *ValidateApmSourceRequest) GetSource() ApmSource {
	if x != nil {
		return x.Source
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricName    string   `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	Exists        bool     `protobuf:"varint,2,opt,name=exists,proto3" json:"exists,omitempty"`
	MissingLabels []string `protobuf:"bytes,3,rep,name=missing_labels,json=missingLabels,proto3" json:"missing_labels,omitempty"`
	PresentLabels []string `protobuf:"bytes,4,rep,name=present_labels,json=presentLabels,proto3" json:"present_labels,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescGZIP(), []int{5}
}

func (x *Metric) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *Metric) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *Metric) GetMissingLabels() []string {
	if x != nil {
		return x.MissingLabels
	}
	return nil
}

func (x *Metric) GetPresentLabels() []string {
	if x != nil {
		return x.PresentLabels
	}
	return nil
}

type ValidateApmSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid bool      `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Metrics []*Metric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *ValidateApmSourceResponse) Reset() {
	*x = ValidateApmSourceResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateApmSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateApmSourceResponse) ProtoMessage() {}

func (x *ValidateApmSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateApmSourceResponse.ProtoReflect.Descriptor instead.
func (*ValidateApmSourceResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescGZIP(), []int{6}
}

func (x *ValidateApmSourceResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ValidateApmSourceResponse) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type ReplaceRetentionPeriodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetentionPeriodInDays *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=retention_period_in_days,json=retentionPeriodInDays,proto3" json:"retention_period_in_days,omitempty"`
	Catalog               Catalog                `protobuf:"varint,2,opt,name=catalog,proto3,enum=com.coralogixapis.service_catalog.v1.Catalog" json:"catalog,omitempty"`
}

func (x *ReplaceRetentionPeriodRequest) Reset() {
	*x = ReplaceRetentionPeriodRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceRetentionPeriodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceRetentionPeriodRequest) ProtoMessage() {}

func (x *ReplaceRetentionPeriodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceRetentionPeriodRequest.ProtoReflect.Descriptor instead.
func (*ReplaceRetentionPeriodRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescGZIP(), []int{7}
}

func (x *ReplaceRetentionPeriodRequest) GetRetentionPeriodInDays() *wrapperspb.Int32Value {
	if x != nil {
		return x.RetentionPeriodInDays
	}
	return nil
}

func (x *ReplaceRetentionPeriodRequest) GetCatalog() Catalog {
	if x != nil {
		return x.Catalog
	}
	return Catalog_CATALOG_UNSPECIFIED
}

type ReplaceRetentionPeriodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetentionPeriodInDays *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=retention_period_in_days,json=retentionPeriodInDays,proto3" json:"retention_period_in_days,omitempty"`
}

func (x *ReplaceRetentionPeriodResponse) Reset() {
	*x = ReplaceRetentionPeriodResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceRetentionPeriodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceRetentionPeriodResponse) ProtoMessage() {}

func (x *ReplaceRetentionPeriodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceRetentionPeriodResponse.ProtoReflect.Descriptor instead.
func (*ReplaceRetentionPeriodResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescGZIP(), []int{8}
}

func (x *ReplaceRetentionPeriodResponse) GetRetentionPeriodInDays() *wrapperspb.Int32Value {
	if x != nil {
		return x.RetentionPeriodInDays
	}
	return nil
}

type GetApmSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Catalog Catalog `protobuf:"varint,1,opt,name=catalog,proto3,enum=com.coralogixapis.service_catalog.v1.Catalog" json:"catalog,omitempty"`
}

func (x *GetApmSourceRequest) Reset() {
	*x = GetApmSourceRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetApmSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApmSourceRequest) ProtoMessage() {}

func (x *GetApmSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApmSourceRequest.ProtoReflect.Descriptor instead.
func (*GetApmSourceRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetApmSourceRequest) GetCatalog() Catalog {
	if x != nil {
		return x.Catalog
	}
	return Catalog_CATALOG_UNSPECIFIED
}

type GetApmSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApmSource ApmSource `protobuf:"varint,1,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
}

func (x *GetApmSourceResponse) Reset() {
	*x = GetApmSourceResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetApmSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApmSourceResponse) ProtoMessage() {}

func (x *GetApmSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApmSourceResponse.ProtoReflect.Descriptor instead.
func (*GetApmSourceResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetApmSourceResponse) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

type GetSpanMetricDimensionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Catalog Catalog `protobuf:"varint,1,opt,name=catalog,proto3,enum=com.coralogixapis.service_catalog.v1.Catalog" json:"catalog,omitempty"`
}

func (x *GetSpanMetricDimensionsRequest) Reset() {
	*x = GetSpanMetricDimensionsRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpanMetricDimensionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpanMetricDimensionsRequest) ProtoMessage() {}

func (x *GetSpanMetricDimensionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpanMetricDimensionsRequest.ProtoReflect.Descriptor instead.
func (*GetSpanMetricDimensionsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetSpanMetricDimensionsRequest) GetCatalog() Catalog {
	if x != nil {
		return x.Catalog
	}
	return Catalog_CATALOG_UNSPECIFIED
}

type GetSpanMetricDimensionsByServiceNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceNames []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=service_names,json=serviceNames,proto3" json:"service_names,omitempty"`
}

func (x *GetSpanMetricDimensionsByServiceNamesRequest) Reset() {
	*x = GetSpanMetricDimensionsByServiceNamesRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpanMetricDimensionsByServiceNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpanMetricDimensionsByServiceNamesRequest) ProtoMessage() {}

func (x *GetSpanMetricDimensionsByServiceNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpanMetricDimensionsByServiceNamesRequest.ProtoReflect.Descriptor instead.
func (*GetSpanMetricDimensionsByServiceNamesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetSpanMetricDimensionsByServiceNamesRequest) GetServiceNames() []*wrapperspb.StringValue {
	if x != nil {
		return x.ServiceNames
	}
	return nil
}

type GetSpanMetricDimensionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dimensions       []*wrapperspb.StringValue      `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	DimensionsValues map[string]*structpb.ListValue `protobuf:"bytes,2,rep,name=dimensions_values,json=dimensionsValues,proto3" json:"dimensions_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSpanMetricDimensionsResponse) Reset() {
	*x = GetSpanMetricDimensionsResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpanMetricDimensionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpanMetricDimensionsResponse) ProtoMessage() {}

func (x *GetSpanMetricDimensionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpanMetricDimensionsResponse.ProtoReflect.Descriptor instead.
func (*GetSpanMetricDimensionsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetSpanMetricDimensionsResponse) GetDimensions() []*wrapperspb.StringValue {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *GetSpanMetricDimensionsResponse) GetDimensionsValues() map[string]*structpb.ListValue {
	if x != nil {
		return x.DimensionsValues
	}
	return nil
}

type GetSpanMetricDimensionsByServiceNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dimensions []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
}

func (x *GetSpanMetricDimensionsByServiceNamesResponse) Reset() {
	*x = GetSpanMetricDimensionsByServiceNamesResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpanMetricDimensionsByServiceNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpanMetricDimensionsByServiceNamesResponse) ProtoMessage() {}

func (x *GetSpanMetricDimensionsByServiceNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpanMetricDimensionsByServiceNamesResponse.ProtoReflect.Descriptor instead.
func (*GetSpanMetricDimensionsByServiceNamesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetSpanMetricDimensionsByServiceNamesResponse) GetDimensions() []*wrapperspb.StringValue {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

var File_com_coralogixapis_service_catalog_v1_apm_settings_service_proto protoreflect.FileDescriptor

var file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDesc = []byte{
	0x0a, 0x3f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x6d, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x35, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x60, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x6e, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0c, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x0b, 0x61, 0x70, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x71, 0x0a, 0x19,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x70, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x61, 0x70, 0x6d,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x0b, 0x61, 0x70, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0x72, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x70, 0x6d, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a,
	0x0c, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x61, 0x70, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0x63, 0x0a, 0x18, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x47, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x7e, 0x0a, 0x19, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x46, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x1d, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x18,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x49, 0x6e, 0x44, 0x61,
	0x79, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x76, 0x0a, 0x1e, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a,
	0x18, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x49, 0x6e, 0x44,
	0x61, 0x79, 0x73, 0x22, 0x5e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x22, 0x66, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x61,
	0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x09, 0x61, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x69, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x07, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x71, 0x0a, 0x2c, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61,
	0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xcb, 0x02, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x53, 0x70, 0x61, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x11,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x5f, 0x0a, 0x15, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6d, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x53, 0x70,
	0x61, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0xde, 0x0a, 0x0a, 0x12, 0x41, 0x70, 0x6d, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa3, 0x01,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x6d, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0xc2, 0xb8, 0x02,
	0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x20, 0x41, 0x70, 0x6d, 0x20, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41,
	0x70, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x70, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x70, 0x6d, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0xc2,
	0xb8, 0x02, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x41, 0x70, 0x6d,
	0x20, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x11, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x19, 0xc2, 0xb8, 0x02, 0x15, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x20, 0x41, 0x70, 0x6d, 0x20, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xc3, 0x01, 0x0a, 0x16,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1e, 0xc2, 0xb8, 0x02, 0x1a, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x20, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0xa3, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x6d,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0xc2, 0xb8, 0x02, 0x18, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x20, 0x41, 0x70, 0x6d, 0x20, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xc8, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53,
	0x70, 0x61, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70,
	0x61, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x20, 0xc2, 0xb8, 0x02, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x20, 0x53, 0x70, 0x61, 0x6e,
	0x20, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x82, 0x02, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x52, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x53, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0xc2, 0xb8, 0x02, 0x2c, 0x0a, 0x2a, 0x47, 0x65, 0x74,
	0x20, 0x53, 0x70, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x42, 0x79, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescOnce sync.Once
	file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescData = file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDesc
)

func file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescData)
	})
	return file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDescData
}

var file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_goTypes = []any{
	(*GetApmSettingsRequest)(nil),                         // 0: com.coralogixapis.service_catalog.v1.GetApmSettingsRequest
	(*GetApmSettingsResponse)(nil),                        // 1: com.coralogixapis.service_catalog.v1.GetApmSettingsResponse
	(*ReplaceApmSettingsRequest)(nil),                     // 2: com.coralogixapis.service_catalog.v1.ReplaceApmSettingsRequest
	(*ReplaceApmSettingsResponse)(nil),                    // 3: com.coralogixapis.service_catalog.v1.ReplaceApmSettingsResponse
	(*ValidateApmSourceRequest)(nil),                      // 4: com.coralogixapis.service_catalog.v1.ValidateApmSourceRequest
	(*Metric)(nil),                                        // 5: com.coralogixapis.service_catalog.v1.Metric
	(*ValidateApmSourceResponse)(nil),                     // 6: com.coralogixapis.service_catalog.v1.ValidateApmSourceResponse
	(*ReplaceRetentionPeriodRequest)(nil),                 // 7: com.coralogixapis.service_catalog.v1.ReplaceRetentionPeriodRequest
	(*ReplaceRetentionPeriodResponse)(nil),                // 8: com.coralogixapis.service_catalog.v1.ReplaceRetentionPeriodResponse
	(*GetApmSourceRequest)(nil),                           // 9: com.coralogixapis.service_catalog.v1.GetApmSourceRequest
	(*GetApmSourceResponse)(nil),                          // 10: com.coralogixapis.service_catalog.v1.GetApmSourceResponse
	(*GetSpanMetricDimensionsRequest)(nil),                // 11: com.coralogixapis.service_catalog.v1.GetSpanMetricDimensionsRequest
	(*GetSpanMetricDimensionsByServiceNamesRequest)(nil),  // 12: com.coralogixapis.service_catalog.v1.GetSpanMetricDimensionsByServiceNamesRequest
	(*GetSpanMetricDimensionsResponse)(nil),               // 13: com.coralogixapis.service_catalog.v1.GetSpanMetricDimensionsResponse
	(*GetSpanMetricDimensionsByServiceNamesResponse)(nil), // 14: com.coralogixapis.service_catalog.v1.GetSpanMetricDimensionsByServiceNamesResponse
	nil,                            // 15: com.coralogixapis.service_catalog.v1.GetSpanMetricDimensionsResponse.DimensionsValuesEntry
	(Catalog)(0),                   // 16: com.coralogixapis.service_catalog.v1.Catalog
	(*ApmSettings)(nil),            // 17: com.coralogixapis.service_catalog.v1.ApmSettings
	(ApmSource)(0),                 // 18: com.coralogixapis.service_catalog.v1.ApmSource
	(*wrapperspb.Int32Value)(nil),  // 19: google.protobuf.Int32Value
	(*wrapperspb.StringValue)(nil), // 20: google.protobuf.StringValue
	(*structpb.ListValue)(nil),     // 21: google.protobuf.ListValue
}
var file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_depIdxs = []int32{
	16, // 0: com.coralogixapis.service_catalog.v1.GetApmSettingsRequest.catalog:type_name -> com.coralogixapis.service_catalog.v1.Catalog
	17, // 1: com.coralogixapis.service_catalog.v1.GetApmSettingsResponse.apm_settings:type_name -> com.coralogixapis.service_catalog.v1.ApmSettings
	17, // 2: com.coralogixapis.service_catalog.v1.ReplaceApmSettingsRequest.apm_settings:type_name -> com.coralogixapis.service_catalog.v1.ApmSettings
	17, // 3: com.coralogixapis.service_catalog.v1.ReplaceApmSettingsResponse.apm_settings:type_name -> com.coralogixapis.service_catalog.v1.ApmSettings
	18, // 4: com.coralogixapis.service_catalog.v1.ValidateApmSourceRequest.source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	5,  // 5: com.coralogixapis.service_catalog.v1.ValidateApmSourceResponse.metrics:type_name -> com.coralogixapis.service_catalog.v1.Metric
	19, // 6: com.coralogixapis.service_catalog.v1.ReplaceRetentionPeriodRequest.retention_period_in_days:type_name -> google.protobuf.Int32Value
	16, // 7: com.coralogixapis.service_catalog.v1.ReplaceRetentionPeriodRequest.catalog:type_name -> com.coralogixapis.service_catalog.v1.Catalog
	19, // 8: com.coralogixapis.service_catalog.v1.ReplaceRetentionPeriodResponse.retention_period_in_days:type_name -> google.protobuf.Int32Value
	16, // 9: com.coralogixapis.service_catalog.v1.GetApmSourceRequest.catalog:type_name -> com.coralogixapis.service_catalog.v1.Catalog
	18, // 10: com.coralogixapis.service_catalog.v1.GetApmSourceResponse.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	16, // 11: com.coralogixapis.service_catalog.v1.GetSpanMetricDimensionsRequest.catalog:type_name -> com.coralogixapis.service_catalog.v1.Catalog
	20, // 12: com.coralogixapis.service_catalog.v1.GetSpanMetricDimensionsByServiceNamesRequest.service_names:type_name -> google.protobuf.StringValue
	20, // 13: com.coralogixapis.service_catalog.v1.GetSpanMetricDimensionsResponse.dimensions:type_name -> google.protobuf.StringValue
	15, // 14: com.coralogixapis.service_catalog.v1.GetSpanMetricDimensionsResponse.dimensions_values:type_name -> com.coralogixapis.service_catalog.v1.GetSpanMetricDimensionsResponse.DimensionsValuesEntry
	20, // 15: com.coralogixapis.service_catalog.v1.GetSpanMetricDimensionsByServiceNamesResponse.dimensions:type_name -> google.protobuf.StringValue
	21, // 16: com.coralogixapis.service_catalog.v1.GetSpanMetricDimensionsResponse.DimensionsValuesEntry.value:type_name -> google.protobuf.ListValue
	0,  // 17: com.coralogixapis.service_catalog.v1.ApmSettingsService.GetApmSettings:input_type -> com.coralogixapis.service_catalog.v1.GetApmSettingsRequest
	2,  // 18: com.coralogixapis.service_catalog.v1.ApmSettingsService.ReplaceApmSettings:input_type -> com.coralogixapis.service_catalog.v1.ReplaceApmSettingsRequest
	4,  // 19: com.coralogixapis.service_catalog.v1.ApmSettingsService.ValidateApmSource:input_type -> com.coralogixapis.service_catalog.v1.ValidateApmSourceRequest
	7,  // 20: com.coralogixapis.service_catalog.v1.ApmSettingsService.ReplaceRetentionPeriod:input_type -> com.coralogixapis.service_catalog.v1.ReplaceRetentionPeriodRequest
	9,  // 21: com.coralogixapis.service_catalog.v1.ApmSettingsService.GetApmSource:input_type -> com.coralogixapis.service_catalog.v1.GetApmSourceRequest
	11, // 22: com.coralogixapis.service_catalog.v1.ApmSettingsService.GetSpanMetricDimensions:input_type -> com.coralogixapis.service_catalog.v1.GetSpanMetricDimensionsRequest
	12, // 23: com.coralogixapis.service_catalog.v1.ApmSettingsService.GetSpanMetricDimensionsByServiceNames:input_type -> com.coralogixapis.service_catalog.v1.GetSpanMetricDimensionsByServiceNamesRequest
	1,  // 24: com.coralogixapis.service_catalog.v1.ApmSettingsService.GetApmSettings:output_type -> com.coralogixapis.service_catalog.v1.GetApmSettingsResponse
	3,  // 25: com.coralogixapis.service_catalog.v1.ApmSettingsService.ReplaceApmSettings:output_type -> com.coralogixapis.service_catalog.v1.ReplaceApmSettingsResponse
	6,  // 26: com.coralogixapis.service_catalog.v1.ApmSettingsService.ValidateApmSource:output_type -> com.coralogixapis.service_catalog.v1.ValidateApmSourceResponse
	8,  // 27: com.coralogixapis.service_catalog.v1.ApmSettingsService.ReplaceRetentionPeriod:output_type -> com.coralogixapis.service_catalog.v1.ReplaceRetentionPeriodResponse
	10, // 28: com.coralogixapis.service_catalog.v1.ApmSettingsService.GetApmSource:output_type -> com.coralogixapis.service_catalog.v1.GetApmSourceResponse
	13, // 29: com.coralogixapis.service_catalog.v1.ApmSettingsService.GetSpanMetricDimensions:output_type -> com.coralogixapis.service_catalog.v1.GetSpanMetricDimensionsResponse
	14, // 30: com.coralogixapis.service_catalog.v1.ApmSettingsService.GetSpanMetricDimensionsByServiceNames:output_type -> com.coralogixapis.service_catalog.v1.GetSpanMetricDimensionsByServiceNamesResponse
	24, // [24:31] is the sub-list for method output_type
	17, // [17:24] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_init() }
func file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_init() {
	if File_com_coralogixapis_service_catalog_v1_apm_settings_service_proto != nil {
		return
	}
	file_com_coralogixapis_service_catalog_v1_apm_settings_proto_init()
	file_com_coralogixapis_service_catalog_v1_apm_source_proto_init()
	file_com_coralogixapis_service_catalog_v1_catalog_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_service_catalog_v1_apm_settings_service_proto = out.File
	file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_rawDesc = nil
	file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_goTypes = nil
	file_com_coralogixapis_service_catalog_v1_apm_settings_service_proto_depIdxs = nil
}
