// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: com/coralogixapis/service_catalog/v1/resources.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ResourcesService_GetServiceContainerDataSources_FullMethodName = "/com.coralogix.catalog.v1.ResourcesService/GetServiceContainerDataSources"
)

// ResourcesServiceClient is the client API for ResourcesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourcesServiceClient interface {
	GetServiceContainerDataSources(ctx context.Context, in *GetServiceContainerDataSourcesRequest, opts ...grpc.CallOption) (*GetServiceContainerDataSourcesResponse, error)
}

type resourcesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourcesServiceClient(cc grpc.ClientConnInterface) ResourcesServiceClient {
	return &resourcesServiceClient{cc}
}

func (c *resourcesServiceClient) GetServiceContainerDataSources(ctx context.Context, in *GetServiceContainerDataSourcesRequest, opts ...grpc.CallOption) (*GetServiceContainerDataSourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServiceContainerDataSourcesResponse)
	err := c.cc.Invoke(ctx, ResourcesService_GetServiceContainerDataSources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourcesServiceServer is the server API for ResourcesService service.
// All implementations must embed UnimplementedResourcesServiceServer
// for forward compatibility.
type ResourcesServiceServer interface {
	GetServiceContainerDataSources(context.Context, *GetServiceContainerDataSourcesRequest) (*GetServiceContainerDataSourcesResponse, error)
	mustEmbedUnimplementedResourcesServiceServer()
}

// UnimplementedResourcesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResourcesServiceServer struct{}

func (UnimplementedResourcesServiceServer) GetServiceContainerDataSources(context.Context, *GetServiceContainerDataSourcesRequest) (*GetServiceContainerDataSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceContainerDataSources not implemented")
}
func (UnimplementedResourcesServiceServer) mustEmbedUnimplementedResourcesServiceServer() {}
func (UnimplementedResourcesServiceServer) testEmbeddedByValue()                          {}

// UnsafeResourcesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourcesServiceServer will
// result in compilation errors.
type UnsafeResourcesServiceServer interface {
	mustEmbedUnimplementedResourcesServiceServer()
}

func RegisterResourcesServiceServer(s grpc.ServiceRegistrar, srv ResourcesServiceServer) {
	// If the following call pancis, it indicates UnimplementedResourcesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResourcesService_ServiceDesc, srv)
}

func _ResourcesService_GetServiceContainerDataSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceContainerDataSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServiceServer).GetServiceContainerDataSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcesService_GetServiceContainerDataSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServiceServer).GetServiceContainerDataSources(ctx, req.(*GetServiceContainerDataSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourcesService_ServiceDesc is the grpc.ServiceDesc for ResourcesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourcesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.catalog.v1.ResourcesService",
	HandlerType: (*ResourcesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceContainerDataSources",
			Handler:    _ResourcesService_GetServiceContainerDataSources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogixapis/service_catalog/v1/resources.proto",
}
