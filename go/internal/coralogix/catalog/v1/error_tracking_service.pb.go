// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.2
// source: com/coralogixapis/service_catalog/v1/error-tracking/error_tracking_service.proto

package v1

import (
	v2 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/common/v2"
	v1 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/widgets/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetServiceErrorTrackingOverviewRequest struct {
	state                 protoimpl.MessageState  `protogen:"open.v1"`
	TimeRange             *v2.TimeRange           `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	ServiceName           *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceCatalogFilters []*ApmFilter            `protobuf:"bytes,3,rep,name=service_catalog_filters,json=serviceCatalogFilters,proto3" json:"service_catalog_filters,omitempty"`
	GroupBy               GroupBy                 `protobuf:"varint,4,opt,name=group_by,json=groupBy,proto3,enum=com.coralogixapis.service_catalog.v1.GroupBy" json:"group_by,omitempty"`
	TrendOffset           *wrapperspb.Int64Value  `protobuf:"bytes,5,opt,name=trend_offset,json=trendOffset,proto3" json:"trend_offset,omitempty"`
	DataSource            ErrorDataSource         `protobuf:"varint,6,opt,name=data_source,json=dataSource,proto3,enum=com.coralogixapis.service_catalog.v1.ErrorDataSource" json:"data_source,omitempty"`
	OperationSpanKinds    []SpanKind              `protobuf:"varint,7,rep,packed,name=operation_span_kinds,json=operationSpanKinds,proto3,enum=com.coralogix.catalog.v1.SpanKind" json:"operation_span_kinds,omitempty"`
	ApmSource             ApmSource               `protobuf:"varint,8,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	Topk                  *wrapperspb.UInt64Value `protobuf:"bytes,9,opt,name=topk,proto3" json:"topk,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetServiceErrorTrackingOverviewRequest) Reset() {
	*x = GetServiceErrorTrackingOverviewRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceErrorTrackingOverviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceErrorTrackingOverviewRequest) ProtoMessage() {}

func (x *GetServiceErrorTrackingOverviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceErrorTrackingOverviewRequest.ProtoReflect.Descriptor instead.
func (*GetServiceErrorTrackingOverviewRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetServiceErrorTrackingOverviewRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetServiceErrorTrackingOverviewRequest) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *GetServiceErrorTrackingOverviewRequest) GetServiceCatalogFilters() []*ApmFilter {
	if x != nil {
		return x.ServiceCatalogFilters
	}
	return nil
}

func (x *GetServiceErrorTrackingOverviewRequest) GetGroupBy() GroupBy {
	if x != nil {
		return x.GroupBy
	}
	return GroupBy_GROUP_BY_UNSPECIFIED
}

func (x *GetServiceErrorTrackingOverviewRequest) GetTrendOffset() *wrapperspb.Int64Value {
	if x != nil {
		return x.TrendOffset
	}
	return nil
}

func (x *GetServiceErrorTrackingOverviewRequest) GetDataSource() ErrorDataSource {
	if x != nil {
		return x.DataSource
	}
	return ErrorDataSource_ERROR_DATA_SOURCE_UNSPECIFIED
}

func (x *GetServiceErrorTrackingOverviewRequest) GetOperationSpanKinds() []SpanKind {
	if x != nil {
		return x.OperationSpanKinds
	}
	return nil
}

func (x *GetServiceErrorTrackingOverviewRequest) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

func (x *GetServiceErrorTrackingOverviewRequest) GetTopk() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Topk
	}
	return nil
}

type GetServiceErrorTrackingOverviewResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Widget:
	//
	//	*GetServiceErrorTrackingOverviewResponse_ErrorGroups
	//	*GetServiceErrorTrackingOverviewResponse_TotalErrors
	//	*GetServiceErrorTrackingOverviewResponse_ErrorsPercentage
	//	*GetServiceErrorTrackingOverviewResponse_Errors
	//	*GetServiceErrorTrackingOverviewResponse_ErrorsPercentages
	Widget        isGetServiceErrorTrackingOverviewResponse_Widget `protobuf_oneof:"widget"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServiceErrorTrackingOverviewResponse) Reset() {
	*x = GetServiceErrorTrackingOverviewResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceErrorTrackingOverviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceErrorTrackingOverviewResponse) ProtoMessage() {}

func (x *GetServiceErrorTrackingOverviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceErrorTrackingOverviewResponse.ProtoReflect.Descriptor instead.
func (*GetServiceErrorTrackingOverviewResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetServiceErrorTrackingOverviewResponse) GetWidget() isGetServiceErrorTrackingOverviewResponse_Widget {
	if x != nil {
		return x.Widget
	}
	return nil
}

func (x *GetServiceErrorTrackingOverviewResponse) GetErrorGroups() *v1.Stat {
	if x != nil {
		if x, ok := x.Widget.(*GetServiceErrorTrackingOverviewResponse_ErrorGroups); ok {
			return x.ErrorGroups
		}
	}
	return nil
}

func (x *GetServiceErrorTrackingOverviewResponse) GetTotalErrors() *v1.Stat {
	if x != nil {
		if x, ok := x.Widget.(*GetServiceErrorTrackingOverviewResponse_TotalErrors); ok {
			return x.TotalErrors
		}
	}
	return nil
}

func (x *GetServiceErrorTrackingOverviewResponse) GetErrorsPercentage() *v1.Stat {
	if x != nil {
		if x, ok := x.Widget.(*GetServiceErrorTrackingOverviewResponse_ErrorsPercentage); ok {
			return x.ErrorsPercentage
		}
	}
	return nil
}

func (x *GetServiceErrorTrackingOverviewResponse) GetErrors() *RepeatedLineChart {
	if x != nil {
		if x, ok := x.Widget.(*GetServiceErrorTrackingOverviewResponse_Errors); ok {
			return x.Errors
		}
	}
	return nil
}

func (x *GetServiceErrorTrackingOverviewResponse) GetErrorsPercentages() *RepeatedLineChart {
	if x != nil {
		if x, ok := x.Widget.(*GetServiceErrorTrackingOverviewResponse_ErrorsPercentages); ok {
			return x.ErrorsPercentages
		}
	}
	return nil
}

type isGetServiceErrorTrackingOverviewResponse_Widget interface {
	isGetServiceErrorTrackingOverviewResponse_Widget()
}

type GetServiceErrorTrackingOverviewResponse_ErrorGroups struct {
	ErrorGroups *v1.Stat `protobuf:"bytes,1,opt,name=error_groups,json=errorGroups,proto3,oneof"`
}

type GetServiceErrorTrackingOverviewResponse_TotalErrors struct {
	TotalErrors *v1.Stat `protobuf:"bytes,2,opt,name=total_errors,json=totalErrors,proto3,oneof"`
}

type GetServiceErrorTrackingOverviewResponse_ErrorsPercentage struct {
	ErrorsPercentage *v1.Stat `protobuf:"bytes,3,opt,name=errors_percentage,json=errorsPercentage,proto3,oneof"`
}

type GetServiceErrorTrackingOverviewResponse_Errors struct {
	Errors *RepeatedLineChart `protobuf:"bytes,4,opt,name=errors,proto3,oneof"`
}

type GetServiceErrorTrackingOverviewResponse_ErrorsPercentages struct {
	ErrorsPercentages *RepeatedLineChart `protobuf:"bytes,5,opt,name=errors_percentages,json=errorsPercentages,proto3,oneof"`
}

func (*GetServiceErrorTrackingOverviewResponse_ErrorGroups) isGetServiceErrorTrackingOverviewResponse_Widget() {
}

func (*GetServiceErrorTrackingOverviewResponse_TotalErrors) isGetServiceErrorTrackingOverviewResponse_Widget() {
}

func (*GetServiceErrorTrackingOverviewResponse_ErrorsPercentage) isGetServiceErrorTrackingOverviewResponse_Widget() {
}

func (*GetServiceErrorTrackingOverviewResponse_Errors) isGetServiceErrorTrackingOverviewResponse_Widget() {
}

func (*GetServiceErrorTrackingOverviewResponse_ErrorsPercentages) isGetServiceErrorTrackingOverviewResponse_Widget() {
}

type GetServiceErrorTrackingListRequest struct {
	state                 protoimpl.MessageState  `protogen:"open.v1"`
	TimeRange             *v2.TimeRange           `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	ServiceName           *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceCatalogFilters []*ApmFilter            `protobuf:"bytes,3,rep,name=service_catalog_filters,json=serviceCatalogFilters,proto3" json:"service_catalog_filters,omitempty"`
	GroupBy               GroupBy                 `protobuf:"varint,4,opt,name=group_by,json=groupBy,proto3,enum=com.coralogixapis.service_catalog.v1.GroupBy" json:"group_by,omitempty"`
	TrendOffset           *wrapperspb.Int64Value  `protobuf:"bytes,5,opt,name=trend_offset,json=trendOffset,proto3" json:"trend_offset,omitempty"`
	DataSource            ErrorDataSource         `protobuf:"varint,6,opt,name=data_source,json=dataSource,proto3,enum=com.coralogixapis.service_catalog.v1.ErrorDataSource" json:"data_source,omitempty"`
	OperationSpanKinds    []SpanKind              `protobuf:"varint,7,rep,packed,name=operation_span_kinds,json=operationSpanKinds,proto3,enum=com.coralogix.catalog.v1.SpanKind" json:"operation_span_kinds,omitempty"`
	ApmSource             ApmSource               `protobuf:"varint,8,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetServiceErrorTrackingListRequest) Reset() {
	*x = GetServiceErrorTrackingListRequest{}
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceErrorTrackingListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceErrorTrackingListRequest) ProtoMessage() {}

func (x *GetServiceErrorTrackingListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceErrorTrackingListRequest.ProtoReflect.Descriptor instead.
func (*GetServiceErrorTrackingListRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetServiceErrorTrackingListRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetServiceErrorTrackingListRequest) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *GetServiceErrorTrackingListRequest) GetServiceCatalogFilters() []*ApmFilter {
	if x != nil {
		return x.ServiceCatalogFilters
	}
	return nil
}

func (x *GetServiceErrorTrackingListRequest) GetGroupBy() GroupBy {
	if x != nil {
		return x.GroupBy
	}
	return GroupBy_GROUP_BY_UNSPECIFIED
}

func (x *GetServiceErrorTrackingListRequest) GetTrendOffset() *wrapperspb.Int64Value {
	if x != nil {
		return x.TrendOffset
	}
	return nil
}

func (x *GetServiceErrorTrackingListRequest) GetDataSource() ErrorDataSource {
	if x != nil {
		return x.DataSource
	}
	return ErrorDataSource_ERROR_DATA_SOURCE_UNSPECIFIED
}

func (x *GetServiceErrorTrackingListRequest) GetOperationSpanKinds() []SpanKind {
	if x != nil {
		return x.OperationSpanKinds
	}
	return nil
}

func (x *GetServiceErrorTrackingListRequest) GetApmSource() ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return ApmSource_APM_SOURCE_UNSPECIFIED
}

type OperationDetails struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Operation     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	Method        *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Occurrences   *wrapperspb.Int64Value  `protobuf:"bytes,2,opt,name=occurrences,proto3" json:"occurrences,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationDetails) Reset() {
	*x = OperationDetails{}
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDetails) ProtoMessage() {}

func (x *OperationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDetails.ProtoReflect.Descriptor instead.
func (*OperationDetails) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_rawDescGZIP(), []int{3}
}

func (x *OperationDetails) GetOperation() *wrapperspb.StringValue {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *OperationDetails) GetMethod() *wrapperspb.StringValue {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *OperationDetails) GetOccurrences() *wrapperspb.Int64Value {
	if x != nil {
		return x.Occurrences
	}
	return nil
}

type GetServiceErrorTrackingListResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Query         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	ErrorDetails  []*ErrorDetails         `protobuf:"bytes,2,rep,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
	GroupBy       GroupBy                 `protobuf:"varint,3,opt,name=group_by,json=groupBy,proto3,enum=com.coralogixapis.service_catalog.v1.GroupBy" json:"group_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServiceErrorTrackingListResponse) Reset() {
	*x = GetServiceErrorTrackingListResponse{}
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceErrorTrackingListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceErrorTrackingListResponse) ProtoMessage() {}

func (x *GetServiceErrorTrackingListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceErrorTrackingListResponse.ProtoReflect.Descriptor instead.
func (*GetServiceErrorTrackingListResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetServiceErrorTrackingListResponse) GetQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *GetServiceErrorTrackingListResponse) GetErrorDetails() []*ErrorDetails {
	if x != nil {
		return x.ErrorDetails
	}
	return nil
}

func (x *GetServiceErrorTrackingListResponse) GetGroupBy() GroupBy {
	if x != nil {
		return x.GroupBy
	}
	return GroupBy_GROUP_BY_UNSPECIFIED
}

type Operations struct {
	state          protoimpl.MessageState            `protogen:"open.v1"`
	Operations     map[string]*wrapperspb.Int64Value `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	OperationsList []*OperationDetails               `protobuf:"bytes,2,rep,name=operations_list,json=operationsList,proto3" json:"operations_list,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Operations) Reset() {
	*x = Operations{}
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Operations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operations) ProtoMessage() {}

func (x *Operations) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operations.ProtoReflect.Descriptor instead.
func (*Operations) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_rawDescGZIP(), []int{5}
}

func (x *Operations) GetOperations() map[string]*wrapperspb.Int64Value {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *Operations) GetOperationsList() []*OperationDetails {
	if x != nil {
		return x.OperationsList
	}
	return nil
}

type ErrorDetails struct {
	state              protoimpl.MessageState  `protogen:"open.v1"`
	ErrorMessage       *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	ErrorMessageSource ErrorMessageSource      `protobuf:"varint,2,opt,name=error_message_source,json=errorMessageSource,proto3,enum=com.coralogixapis.service_catalog.v1.ErrorMessageSource" json:"error_message_source,omitempty"`
	StatusCode         *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	// Types that are valid to be assigned to ErrorDetails:
	//
	//	*ErrorDetails_Operations
	//	*ErrorDetails_FirstAppearance
	//	*ErrorDetails_LastAppearance
	//	*ErrorDetails_Occurrences
	//	*ErrorDetails_ErrorPercentage
	ErrorDetails  isErrorDetails_ErrorDetails `protobuf_oneof:"error_details"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorDetails) Reset() {
	*x = ErrorDetails{}
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetails) ProtoMessage() {}

func (x *ErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetails.ProtoReflect.Descriptor instead.
func (*ErrorDetails) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_rawDescGZIP(), []int{6}
}

func (x *ErrorDetails) GetErrorMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.ErrorMessage
	}
	return nil
}

func (x *ErrorDetails) GetErrorMessageSource() ErrorMessageSource {
	if x != nil {
		return x.ErrorMessageSource
	}
	return ErrorMessageSource_ERROR_MESSAGE_SOURCE_UNSPECIFIED
}

func (x *ErrorDetails) GetStatusCode() *wrapperspb.StringValue {
	if x != nil {
		return x.StatusCode
	}
	return nil
}

func (x *ErrorDetails) GetErrorDetails() isErrorDetails_ErrorDetails {
	if x != nil {
		return x.ErrorDetails
	}
	return nil
}

func (x *ErrorDetails) GetOperations() *Operations {
	if x != nil {
		if x, ok := x.ErrorDetails.(*ErrorDetails_Operations); ok {
			return x.Operations
		}
	}
	return nil
}

func (x *ErrorDetails) GetFirstAppearance() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ErrorDetails.(*ErrorDetails_FirstAppearance); ok {
			return x.FirstAppearance
		}
	}
	return nil
}

func (x *ErrorDetails) GetLastAppearance() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ErrorDetails.(*ErrorDetails_LastAppearance); ok {
			return x.LastAppearance
		}
	}
	return nil
}

func (x *ErrorDetails) GetOccurrences() *wrapperspb.Int64Value {
	if x != nil {
		if x, ok := x.ErrorDetails.(*ErrorDetails_Occurrences); ok {
			return x.Occurrences
		}
	}
	return nil
}

func (x *ErrorDetails) GetErrorPercentage() *wrapperspb.FloatValue {
	if x != nil {
		if x, ok := x.ErrorDetails.(*ErrorDetails_ErrorPercentage); ok {
			return x.ErrorPercentage
		}
	}
	return nil
}

type isErrorDetails_ErrorDetails interface {
	isErrorDetails_ErrorDetails()
}

type ErrorDetails_Operations struct {
	Operations *Operations `protobuf:"bytes,4,opt,name=operations,proto3,oneof"`
}

type ErrorDetails_FirstAppearance struct {
	FirstAppearance *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=first_appearance,json=firstAppearance,proto3,oneof"`
}

type ErrorDetails_LastAppearance struct {
	LastAppearance *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=last_appearance,json=lastAppearance,proto3,oneof"`
}

type ErrorDetails_Occurrences struct {
	Occurrences *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=occurrences,proto3,oneof"`
}

type ErrorDetails_ErrorPercentage struct {
	ErrorPercentage *wrapperspb.FloatValue `protobuf:"bytes,8,opt,name=error_percentage,json=errorPercentage,proto3,oneof"`
}

func (*ErrorDetails_Operations) isErrorDetails_ErrorDetails() {}

func (*ErrorDetails_FirstAppearance) isErrorDetails_ErrorDetails() {}

func (*ErrorDetails_LastAppearance) isErrorDetails_ErrorDetails() {}

func (*ErrorDetails_Occurrences) isErrorDetails_ErrorDetails() {}

func (*ErrorDetails_ErrorPercentage) isErrorDetails_ErrorDetails() {}

var File_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto protoreflect.FileDescriptor

var file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_rawDesc = string([]byte{
	0x0a, 0x50, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x25, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x28, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6b,
	0x69, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70,
	0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x61, 0x70, 0x6d, 0x2f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x4f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x3b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x05,
	0x0a, 0x26, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x48, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x74,
	0x72, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x74, 0x72, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x56, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61,
	0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x70, 0x6d,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09,
	0x61, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x6f, 0x70,
	0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x22, 0xe1, 0x03, 0x0a, 0x27,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61,
	0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x55, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x68, 0x0a, 0x12, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x48, 0x00, 0x52, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x22,
	0x95, 0x05, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61,
	0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x48, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x72, 0x65,
	0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x72,
	0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x56, 0x0a, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x54, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x70, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x70, 0x6d, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x61, 0x70,
	0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3d,
	0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xfc, 0x01,
	0x0a, 0x23, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x57, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x22, 0xab, 0x02, 0x0a,
	0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x60, 0x0a, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5f, 0x0a,
	0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x5a,
	0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfe, 0x04, 0x0a, 0x0c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6a,
	0x0a, 0x14, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x00, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a,
	0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x3f, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x48, 0x0a, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x32, 0xee, 0x03, 0x0a, 0x14,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xf1, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x4c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0xc2, 0xb8, 0x02,
	0x25, 0x0a, 0x23, 0x67, 0x65, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x30, 0x01, 0x12, 0xe1, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x48,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x25, 0xc2, 0xb8, 0x02, 0x21, 0x0a, 0x1f, 0x67, 0x65, 0x74, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_rawDescOnce sync.Once
	file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_rawDescData []byte
)

func file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_rawDesc), len(file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_rawDesc)))
	})
	return file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_rawDescData
}

var file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_goTypes = []any{
	(*GetServiceErrorTrackingOverviewRequest)(nil),  // 0: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingOverviewRequest
	(*GetServiceErrorTrackingOverviewResponse)(nil), // 1: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingOverviewResponse
	(*GetServiceErrorTrackingListRequest)(nil),      // 2: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingListRequest
	(*OperationDetails)(nil),                        // 3: com.coralogixapis.service_catalog.v1.OperationDetails
	(*GetServiceErrorTrackingListResponse)(nil),     // 4: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingListResponse
	(*Operations)(nil),                              // 5: com.coralogixapis.service_catalog.v1.Operations
	(*ErrorDetails)(nil),                            // 6: com.coralogixapis.service_catalog.v1.ErrorDetails
	nil,                                             // 7: com.coralogixapis.service_catalog.v1.Operations.OperationsEntry
	(*v2.TimeRange)(nil),                            // 8: com.coralogixapis.apm.common.v2.TimeRange
	(*wrapperspb.StringValue)(nil),                  // 9: google.protobuf.StringValue
	(*ApmFilter)(nil),                               // 10: com.coralogix.catalog.v1.ApmFilter
	(GroupBy)(0),                                    // 11: com.coralogixapis.service_catalog.v1.GroupBy
	(*wrapperspb.Int64Value)(nil),                   // 12: google.protobuf.Int64Value
	(ErrorDataSource)(0),                            // 13: com.coralogixapis.service_catalog.v1.ErrorDataSource
	(SpanKind)(0),                                   // 14: com.coralogix.catalog.v1.SpanKind
	(ApmSource)(0),                                  // 15: com.coralogixapis.service_catalog.v1.ApmSource
	(*wrapperspb.UInt64Value)(nil),                  // 16: google.protobuf.UInt64Value
	(*v1.Stat)(nil),                                 // 17: com.coralogixapis.apm.widgets.v1.Stat
	(*RepeatedLineChart)(nil),                       // 18: com.coralogixapis.service_catalog.v1.RepeatedLineChart
	(ErrorMessageSource)(0),                         // 19: com.coralogixapis.service_catalog.v1.ErrorMessageSource
	(*wrapperspb.FloatValue)(nil),                   // 20: google.protobuf.FloatValue
}
var file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_depIdxs = []int32{
	8,  // 0: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingOverviewRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	9,  // 1: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingOverviewRequest.service_name:type_name -> google.protobuf.StringValue
	10, // 2: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingOverviewRequest.service_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	11, // 3: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingOverviewRequest.group_by:type_name -> com.coralogixapis.service_catalog.v1.GroupBy
	12, // 4: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingOverviewRequest.trend_offset:type_name -> google.protobuf.Int64Value
	13, // 5: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingOverviewRequest.data_source:type_name -> com.coralogixapis.service_catalog.v1.ErrorDataSource
	14, // 6: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingOverviewRequest.operation_span_kinds:type_name -> com.coralogix.catalog.v1.SpanKind
	15, // 7: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingOverviewRequest.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	16, // 8: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingOverviewRequest.topk:type_name -> google.protobuf.UInt64Value
	17, // 9: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingOverviewResponse.error_groups:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	17, // 10: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingOverviewResponse.total_errors:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	17, // 11: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingOverviewResponse.errors_percentage:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	18, // 12: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingOverviewResponse.errors:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	18, // 13: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingOverviewResponse.errors_percentages:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	8,  // 14: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingListRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	9,  // 15: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingListRequest.service_name:type_name -> google.protobuf.StringValue
	10, // 16: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingListRequest.service_catalog_filters:type_name -> com.coralogix.catalog.v1.ApmFilter
	11, // 17: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingListRequest.group_by:type_name -> com.coralogixapis.service_catalog.v1.GroupBy
	12, // 18: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingListRequest.trend_offset:type_name -> google.protobuf.Int64Value
	13, // 19: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingListRequest.data_source:type_name -> com.coralogixapis.service_catalog.v1.ErrorDataSource
	14, // 20: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingListRequest.operation_span_kinds:type_name -> com.coralogix.catalog.v1.SpanKind
	15, // 21: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingListRequest.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	9,  // 22: com.coralogixapis.service_catalog.v1.OperationDetails.operation:type_name -> google.protobuf.StringValue
	9,  // 23: com.coralogixapis.service_catalog.v1.OperationDetails.method:type_name -> google.protobuf.StringValue
	12, // 24: com.coralogixapis.service_catalog.v1.OperationDetails.occurrences:type_name -> google.protobuf.Int64Value
	9,  // 25: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingListResponse.query:type_name -> google.protobuf.StringValue
	6,  // 26: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingListResponse.error_details:type_name -> com.coralogixapis.service_catalog.v1.ErrorDetails
	11, // 27: com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingListResponse.group_by:type_name -> com.coralogixapis.service_catalog.v1.GroupBy
	7,  // 28: com.coralogixapis.service_catalog.v1.Operations.operations:type_name -> com.coralogixapis.service_catalog.v1.Operations.OperationsEntry
	3,  // 29: com.coralogixapis.service_catalog.v1.Operations.operations_list:type_name -> com.coralogixapis.service_catalog.v1.OperationDetails
	9,  // 30: com.coralogixapis.service_catalog.v1.ErrorDetails.error_message:type_name -> google.protobuf.StringValue
	19, // 31: com.coralogixapis.service_catalog.v1.ErrorDetails.error_message_source:type_name -> com.coralogixapis.service_catalog.v1.ErrorMessageSource
	9,  // 32: com.coralogixapis.service_catalog.v1.ErrorDetails.status_code:type_name -> google.protobuf.StringValue
	5,  // 33: com.coralogixapis.service_catalog.v1.ErrorDetails.operations:type_name -> com.coralogixapis.service_catalog.v1.Operations
	12, // 34: com.coralogixapis.service_catalog.v1.ErrorDetails.first_appearance:type_name -> google.protobuf.Int64Value
	12, // 35: com.coralogixapis.service_catalog.v1.ErrorDetails.last_appearance:type_name -> google.protobuf.Int64Value
	12, // 36: com.coralogixapis.service_catalog.v1.ErrorDetails.occurrences:type_name -> google.protobuf.Int64Value
	20, // 37: com.coralogixapis.service_catalog.v1.ErrorDetails.error_percentage:type_name -> google.protobuf.FloatValue
	12, // 38: com.coralogixapis.service_catalog.v1.Operations.OperationsEntry.value:type_name -> google.protobuf.Int64Value
	0,  // 39: com.coralogixapis.service_catalog.v1.ErrorTrackingService.GetServiceErrorTrackingOverviewStream:input_type -> com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingOverviewRequest
	2,  // 40: com.coralogixapis.service_catalog.v1.ErrorTrackingService.GetServiceErrorTrackingListStream:input_type -> com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingListRequest
	1,  // 41: com.coralogixapis.service_catalog.v1.ErrorTrackingService.GetServiceErrorTrackingOverviewStream:output_type -> com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingOverviewResponse
	4,  // 42: com.coralogixapis.service_catalog.v1.ErrorTrackingService.GetServiceErrorTrackingListStream:output_type -> com.coralogixapis.service_catalog.v1.GetServiceErrorTrackingListResponse
	41, // [41:43] is the sub-list for method output_type
	39, // [39:41] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() {
	file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_init()
}
func file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_init() {
	if File_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto != nil {
		return
	}
	file_com_coralogix_catalog_v1_common_proto_init()
	file_com_coralogix_catalog_v1_span_kind_proto_init()
	file_com_coralogixapis_service_catalog_v1_apm_source_proto_init()
	file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_shared_proto_init()
	file_com_coralogixapis_service_catalog_v1_repeated_widgets_proto_init()
	file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_msgTypes[1].OneofWrappers = []any{
		(*GetServiceErrorTrackingOverviewResponse_ErrorGroups)(nil),
		(*GetServiceErrorTrackingOverviewResponse_TotalErrors)(nil),
		(*GetServiceErrorTrackingOverviewResponse_ErrorsPercentage)(nil),
		(*GetServiceErrorTrackingOverviewResponse_Errors)(nil),
		(*GetServiceErrorTrackingOverviewResponse_ErrorsPercentages)(nil),
	}
	file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_msgTypes[6].OneofWrappers = []any{
		(*ErrorDetails_Operations)(nil),
		(*ErrorDetails_FirstAppearance)(nil),
		(*ErrorDetails_LastAppearance)(nil),
		(*ErrorDetails_Occurrences)(nil),
		(*ErrorDetails_ErrorPercentage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_rawDesc), len(file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto = out.File
	file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_goTypes = nil
	file_com_coralogixapis_service_catalog_v1_error_tracking_error_tracking_service_proto_depIdxs = nil
}
