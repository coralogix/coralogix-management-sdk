// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: com/coralogix/catalog/v1/error_tracking_service.proto

package v1

import (
	v2 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/common/v2"
	v11 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/widgets/v1"
	v1 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/service_catalog/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GroupBy int32

const (
	GroupBy_GROUP_BY_UNSPECIFIED  GroupBy = 0
	GroupBy_ERROR_MESSAGE         GroupBy = 1
	GroupBy_HTTP_GRPC_STATUS_CODE GroupBy = 2
)

// Enum value maps for GroupBy.
var (
	GroupBy_name = map[int32]string{
		0: "GROUP_BY_UNSPECIFIED",
		1: "ERROR_MESSAGE",
		2: "HTTP_GRPC_STATUS_CODE",
	}
	GroupBy_value = map[string]int32{
		"GROUP_BY_UNSPECIFIED":  0,
		"ERROR_MESSAGE":         1,
		"HTTP_GRPC_STATUS_CODE": 2,
	}
)

func (x GroupBy) Enum() *GroupBy {
	p := new(GroupBy)
	*p = x
	return p
}

func (x GroupBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupBy) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_catalog_v1_error_tracking_service_proto_enumTypes[0].Descriptor()
}

func (GroupBy) Type() protoreflect.EnumType {
	return &file_com_coralogix_catalog_v1_error_tracking_service_proto_enumTypes[0]
}

func (x GroupBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupBy.Descriptor instead.
func (GroupBy) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_error_tracking_service_proto_rawDescGZIP(), []int{0}
}

type Source int32

const (
	Source_SOURCE_UNSPECIFIED Source = 0
	Source_LOGS               Source = 1
	Source_SPANS              Source = 2
)

// Enum value maps for Source.
var (
	Source_name = map[int32]string{
		0: "SOURCE_UNSPECIFIED",
		1: "LOGS",
		2: "SPANS",
	}
	Source_value = map[string]int32{
		"SOURCE_UNSPECIFIED": 0,
		"LOGS":               1,
		"SPANS":              2,
	}
)

func (x Source) Enum() *Source {
	p := new(Source)
	*p = x
	return p
}

func (x Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Source) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_catalog_v1_error_tracking_service_proto_enumTypes[1].Descriptor()
}

func (Source) Type() protoreflect.EnumType {
	return &file_com_coralogix_catalog_v1_error_tracking_service_proto_enumTypes[1]
}

func (x Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Source.Descriptor instead.
func (Source) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_error_tracking_service_proto_rawDescGZIP(), []int{1}
}

type GetServiceErrorTrackingOverviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRange   *v2.TimeRange                  `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	ServiceName *wrapperspb.StringValue        `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Filters     map[string]*structpb.ListValue `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GroupBy     GroupBy                        `protobuf:"varint,4,opt,name=group_by,json=groupBy,proto3,enum=com.coralogix.catalog.v1.GroupBy" json:"group_by,omitempty"`
	TrendOffset *wrapperspb.Int64Value         `protobuf:"bytes,5,opt,name=trend_offset,json=trendOffset,proto3" json:"trend_offset,omitempty"`
	Source      Source                         `protobuf:"varint,6,opt,name=source,proto3,enum=com.coralogix.catalog.v1.Source" json:"source,omitempty"`
	SpanKinds   []v1.SpanKind                  `protobuf:"varint,7,rep,packed,name=span_kinds,json=spanKinds,proto3,enum=com.coralogixapis.service_catalog.v1.SpanKind" json:"span_kinds,omitempty"`
	ApmSource   v1.ApmSource                   `protobuf:"varint,8,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
	Topk        *wrapperspb.UInt64Value        `protobuf:"bytes,9,opt,name=topk,proto3" json:"topk,omitempty"`
}

func (x *GetServiceErrorTrackingOverviewRequest) Reset() {
	*x = GetServiceErrorTrackingOverviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceErrorTrackingOverviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceErrorTrackingOverviewRequest) ProtoMessage() {}

func (x *GetServiceErrorTrackingOverviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceErrorTrackingOverviewRequest.ProtoReflect.Descriptor instead.
func (*GetServiceErrorTrackingOverviewRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_error_tracking_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetServiceErrorTrackingOverviewRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetServiceErrorTrackingOverviewRequest) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *GetServiceErrorTrackingOverviewRequest) GetFilters() map[string]*structpb.ListValue {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetServiceErrorTrackingOverviewRequest) GetGroupBy() GroupBy {
	if x != nil {
		return x.GroupBy
	}
	return GroupBy_GROUP_BY_UNSPECIFIED
}

func (x *GetServiceErrorTrackingOverviewRequest) GetTrendOffset() *wrapperspb.Int64Value {
	if x != nil {
		return x.TrendOffset
	}
	return nil
}

func (x *GetServiceErrorTrackingOverviewRequest) GetSource() Source {
	if x != nil {
		return x.Source
	}
	return Source_SOURCE_UNSPECIFIED
}

func (x *GetServiceErrorTrackingOverviewRequest) GetSpanKinds() []v1.SpanKind {
	if x != nil {
		return x.SpanKinds
	}
	return nil
}

func (x *GetServiceErrorTrackingOverviewRequest) GetApmSource() v1.ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return v1.ApmSource(0)
}

func (x *GetServiceErrorTrackingOverviewRequest) GetTopk() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Topk
	}
	return nil
}

type GetServiceErrorTrackingOverviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Widget:
	//
	//	*GetServiceErrorTrackingOverviewResponse_ErrorGroups
	//	*GetServiceErrorTrackingOverviewResponse_TotalErrors
	//	*GetServiceErrorTrackingOverviewResponse_ErrorsPercentage
	//	*GetServiceErrorTrackingOverviewResponse_Errors
	//	*GetServiceErrorTrackingOverviewResponse_ErrorsPercentages
	Widget isGetServiceErrorTrackingOverviewResponse_Widget `protobuf_oneof:"widget"`
}

func (x *GetServiceErrorTrackingOverviewResponse) Reset() {
	*x = GetServiceErrorTrackingOverviewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceErrorTrackingOverviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceErrorTrackingOverviewResponse) ProtoMessage() {}

func (x *GetServiceErrorTrackingOverviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceErrorTrackingOverviewResponse.ProtoReflect.Descriptor instead.
func (*GetServiceErrorTrackingOverviewResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_error_tracking_service_proto_rawDescGZIP(), []int{1}
}

func (m *GetServiceErrorTrackingOverviewResponse) GetWidget() isGetServiceErrorTrackingOverviewResponse_Widget {
	if m != nil {
		return m.Widget
	}
	return nil
}

func (x *GetServiceErrorTrackingOverviewResponse) GetErrorGroups() *v11.Stat {
	if x, ok := x.GetWidget().(*GetServiceErrorTrackingOverviewResponse_ErrorGroups); ok {
		return x.ErrorGroups
	}
	return nil
}

func (x *GetServiceErrorTrackingOverviewResponse) GetTotalErrors() *v11.Stat {
	if x, ok := x.GetWidget().(*GetServiceErrorTrackingOverviewResponse_TotalErrors); ok {
		return x.TotalErrors
	}
	return nil
}

func (x *GetServiceErrorTrackingOverviewResponse) GetErrorsPercentage() *v11.Stat {
	if x, ok := x.GetWidget().(*GetServiceErrorTrackingOverviewResponse_ErrorsPercentage); ok {
		return x.ErrorsPercentage
	}
	return nil
}

func (x *GetServiceErrorTrackingOverviewResponse) GetErrors() *v1.RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetServiceErrorTrackingOverviewResponse_Errors); ok {
		return x.Errors
	}
	return nil
}

func (x *GetServiceErrorTrackingOverviewResponse) GetErrorsPercentages() *v1.RepeatedLineChart {
	if x, ok := x.GetWidget().(*GetServiceErrorTrackingOverviewResponse_ErrorsPercentages); ok {
		return x.ErrorsPercentages
	}
	return nil
}

type isGetServiceErrorTrackingOverviewResponse_Widget interface {
	isGetServiceErrorTrackingOverviewResponse_Widget()
}

type GetServiceErrorTrackingOverviewResponse_ErrorGroups struct {
	ErrorGroups *v11.Stat `protobuf:"bytes,1,opt,name=error_groups,json=errorGroups,proto3,oneof"`
}

type GetServiceErrorTrackingOverviewResponse_TotalErrors struct {
	TotalErrors *v11.Stat `protobuf:"bytes,2,opt,name=total_errors,json=totalErrors,proto3,oneof"`
}

type GetServiceErrorTrackingOverviewResponse_ErrorsPercentage struct {
	ErrorsPercentage *v11.Stat `protobuf:"bytes,3,opt,name=errors_percentage,json=errorsPercentage,proto3,oneof"`
}

type GetServiceErrorTrackingOverviewResponse_Errors struct {
	Errors *v1.RepeatedLineChart `protobuf:"bytes,4,opt,name=errors,proto3,oneof"`
}

type GetServiceErrorTrackingOverviewResponse_ErrorsPercentages struct {
	ErrorsPercentages *v1.RepeatedLineChart `protobuf:"bytes,5,opt,name=errors_percentages,json=errorsPercentages,proto3,oneof"`
}

func (*GetServiceErrorTrackingOverviewResponse_ErrorGroups) isGetServiceErrorTrackingOverviewResponse_Widget() {
}

func (*GetServiceErrorTrackingOverviewResponse_TotalErrors) isGetServiceErrorTrackingOverviewResponse_Widget() {
}

func (*GetServiceErrorTrackingOverviewResponse_ErrorsPercentage) isGetServiceErrorTrackingOverviewResponse_Widget() {
}

func (*GetServiceErrorTrackingOverviewResponse_Errors) isGetServiceErrorTrackingOverviewResponse_Widget() {
}

func (*GetServiceErrorTrackingOverviewResponse_ErrorsPercentages) isGetServiceErrorTrackingOverviewResponse_Widget() {
}

type GetServiceErrorTrackingListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRange   *v2.TimeRange                  `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	ServiceName *wrapperspb.StringValue        `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Filters     map[string]*structpb.ListValue `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GroupBy     GroupBy                        `protobuf:"varint,4,opt,name=group_by,json=groupBy,proto3,enum=com.coralogix.catalog.v1.GroupBy" json:"group_by,omitempty"`
	TrendOffset *wrapperspb.Int64Value         `protobuf:"bytes,5,opt,name=trend_offset,json=trendOffset,proto3" json:"trend_offset,omitempty"`
	Source      Source                         `protobuf:"varint,6,opt,name=source,proto3,enum=com.coralogix.catalog.v1.Source" json:"source,omitempty"`
	SpanKinds   []v1.SpanKind                  `protobuf:"varint,7,rep,packed,name=span_kinds,json=spanKinds,proto3,enum=com.coralogixapis.service_catalog.v1.SpanKind" json:"span_kinds,omitempty"`
	ApmSource   v1.ApmSource                   `protobuf:"varint,8,opt,name=apm_source,json=apmSource,proto3,enum=com.coralogixapis.service_catalog.v1.ApmSource" json:"apm_source,omitempty"`
}

func (x *GetServiceErrorTrackingListRequest) Reset() {
	*x = GetServiceErrorTrackingListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceErrorTrackingListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceErrorTrackingListRequest) ProtoMessage() {}

func (x *GetServiceErrorTrackingListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceErrorTrackingListRequest.ProtoReflect.Descriptor instead.
func (*GetServiceErrorTrackingListRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_error_tracking_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetServiceErrorTrackingListRequest) GetTimeRange() *v2.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetServiceErrorTrackingListRequest) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *GetServiceErrorTrackingListRequest) GetFilters() map[string]*structpb.ListValue {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetServiceErrorTrackingListRequest) GetGroupBy() GroupBy {
	if x != nil {
		return x.GroupBy
	}
	return GroupBy_GROUP_BY_UNSPECIFIED
}

func (x *GetServiceErrorTrackingListRequest) GetTrendOffset() *wrapperspb.Int64Value {
	if x != nil {
		return x.TrendOffset
	}
	return nil
}

func (x *GetServiceErrorTrackingListRequest) GetSource() Source {
	if x != nil {
		return x.Source
	}
	return Source_SOURCE_UNSPECIFIED
}

func (x *GetServiceErrorTrackingListRequest) GetSpanKinds() []v1.SpanKind {
	if x != nil {
		return x.SpanKinds
	}
	return nil
}

func (x *GetServiceErrorTrackingListRequest) GetApmSource() v1.ApmSource {
	if x != nil {
		return x.ApmSource
	}
	return v1.ApmSource(0)
}

type GetServiceErrorTrackingListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorDetails []*ErrorDetails `protobuf:"bytes,1,rep,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
	GroupBy      GroupBy         `protobuf:"varint,2,opt,name=group_by,json=groupBy,proto3,enum=com.coralogix.catalog.v1.GroupBy" json:"group_by,omitempty"`
}

func (x *GetServiceErrorTrackingListResponse) Reset() {
	*x = GetServiceErrorTrackingListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceErrorTrackingListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceErrorTrackingListResponse) ProtoMessage() {}

func (x *GetServiceErrorTrackingListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceErrorTrackingListResponse.ProtoReflect.Descriptor instead.
func (*GetServiceErrorTrackingListResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_error_tracking_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetServiceErrorTrackingListResponse) GetErrorDetails() []*ErrorDetails {
	if x != nil {
		return x.ErrorDetails
	}
	return nil
}

func (x *GetServiceErrorTrackingListResponse) GetGroupBy() GroupBy {
	if x != nil {
		return x.GroupBy
	}
	return GroupBy_GROUP_BY_UNSPECIFIED
}

type Operations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operations []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *Operations) Reset() {
	*x = Operations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operations) ProtoMessage() {}

func (x *Operations) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operations.ProtoReflect.Descriptor instead.
func (*Operations) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_error_tracking_service_proto_rawDescGZIP(), []int{4}
}

func (x *Operations) GetOperations() []*wrapperspb.StringValue {
	if x != nil {
		return x.Operations
	}
	return nil
}

type ErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Types that are assignable to ErrorDetails:
	//
	//	*ErrorDetails_Operations
	//	*ErrorDetails_FirstAppearance
	//	*ErrorDetails_LastAppearance
	//	*ErrorDetails_Occurrences
	//	*ErrorDetails_ErrorPercentage
	ErrorDetails isErrorDetails_ErrorDetails `protobuf_oneof:"error_details"`
}

func (x *ErrorDetails) Reset() {
	*x = ErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetails) ProtoMessage() {}

func (x *ErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetails.ProtoReflect.Descriptor instead.
func (*ErrorDetails) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_error_tracking_service_proto_rawDescGZIP(), []int{5}
}

func (x *ErrorDetails) GetErrorMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.ErrorMessage
	}
	return nil
}

func (m *ErrorDetails) GetErrorDetails() isErrorDetails_ErrorDetails {
	if m != nil {
		return m.ErrorDetails
	}
	return nil
}

func (x *ErrorDetails) GetOperations() *Operations {
	if x, ok := x.GetErrorDetails().(*ErrorDetails_Operations); ok {
		return x.Operations
	}
	return nil
}

func (x *ErrorDetails) GetFirstAppearance() *wrapperspb.Int64Value {
	if x, ok := x.GetErrorDetails().(*ErrorDetails_FirstAppearance); ok {
		return x.FirstAppearance
	}
	return nil
}

func (x *ErrorDetails) GetLastAppearance() *wrapperspb.Int64Value {
	if x, ok := x.GetErrorDetails().(*ErrorDetails_LastAppearance); ok {
		return x.LastAppearance
	}
	return nil
}

func (x *ErrorDetails) GetOccurrences() *wrapperspb.Int64Value {
	if x, ok := x.GetErrorDetails().(*ErrorDetails_Occurrences); ok {
		return x.Occurrences
	}
	return nil
}

func (x *ErrorDetails) GetErrorPercentage() *wrapperspb.FloatValue {
	if x, ok := x.GetErrorDetails().(*ErrorDetails_ErrorPercentage); ok {
		return x.ErrorPercentage
	}
	return nil
}

type isErrorDetails_ErrorDetails interface {
	isErrorDetails_ErrorDetails()
}

type ErrorDetails_Operations struct {
	Operations *Operations `protobuf:"bytes,2,opt,name=operations,proto3,oneof"`
}

type ErrorDetails_FirstAppearance struct {
	FirstAppearance *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=first_appearance,json=firstAppearance,proto3,oneof"`
}

type ErrorDetails_LastAppearance struct {
	LastAppearance *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=last_appearance,json=lastAppearance,proto3,oneof"`
}

type ErrorDetails_Occurrences struct {
	Occurrences *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=occurrences,proto3,oneof"`
}

type ErrorDetails_ErrorPercentage struct {
	ErrorPercentage *wrapperspb.FloatValue `protobuf:"bytes,6,opt,name=error_percentage,json=errorPercentage,proto3,oneof"`
}

func (*ErrorDetails_Operations) isErrorDetails_ErrorDetails() {}

func (*ErrorDetails_FirstAppearance) isErrorDetails_ErrorDetails() {}

func (*ErrorDetails_LastAppearance) isErrorDetails_ErrorDetails() {}

func (*ErrorDetails_Occurrences) isErrorDetails_ErrorDetails() {}

func (*ErrorDetails_ErrorPercentage) isErrorDetails_ErrorDetails() {}

var File_com_coralogix_catalog_v1_error_tracking_service_proto protoreflect.FileDescriptor

var file_com_coralogix_catalog_v1_error_tracking_service_proto_rawDesc = []byte{
	0x0a, 0x35, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x1a, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x25, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x46, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xfe, 0x05, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x67, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x73,
	0x70, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x09, 0x73, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x70,
	0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x09, 0x61, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x6f,
	0x70, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x1a, 0x56, 0x0a, 0x0c,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1, 0x03, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x4b, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x51, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x68, 0x0a, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x11, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x73, 0x42, 0x08,
	0x0a, 0x06, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x22, 0xc4, 0x05, 0x0a, 0x22, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x3c, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x3e,
	0x0a, 0x0c, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x38,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x6e,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x09, 0x73, 0x70,
	0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x70, 0x6d, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x61, 0x70,
	0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x56, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xb0, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x22, 0x4a, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3c, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc7,
	0x03, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x41, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70,
	0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0b,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x48, 0x0a,
	0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2a, 0x51, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x2a, 0x35, 0x0a, 0x06, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x4f, 0x47, 0x53, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x50, 0x41, 0x4e, 0x53,
	0x10, 0x02, 0x32, 0xbe, 0x03, 0x0a, 0x14, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xd9, 0x01, 0x0a, 0x25,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0xc2, 0xb8, 0x02, 0x25,
	0x0a, 0x23, 0x67, 0x65, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x30, 0x01, 0x12, 0xc9, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0xc2, 0xb8, 0x02, 0x21,
	0x0a, 0x1f, 0x67, 0x65, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_catalog_v1_error_tracking_service_proto_rawDescOnce sync.Once
	file_com_coralogix_catalog_v1_error_tracking_service_proto_rawDescData = file_com_coralogix_catalog_v1_error_tracking_service_proto_rawDesc
)

func file_com_coralogix_catalog_v1_error_tracking_service_proto_rawDescGZIP() []byte {
	file_com_coralogix_catalog_v1_error_tracking_service_proto_rawDescOnce.Do(func() {
		file_com_coralogix_catalog_v1_error_tracking_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_catalog_v1_error_tracking_service_proto_rawDescData)
	})
	return file_com_coralogix_catalog_v1_error_tracking_service_proto_rawDescData
}

var file_com_coralogix_catalog_v1_error_tracking_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_com_coralogix_catalog_v1_error_tracking_service_proto_goTypes = []any{
	(GroupBy)(0), // 0: com.coralogix.catalog.v1.GroupBy
	(Source)(0),  // 1: com.coralogix.catalog.v1.Source
	(*GetServiceErrorTrackingOverviewRequest)(nil),  // 2: com.coralogix.catalog.v1.GetServiceErrorTrackingOverviewRequest
	(*GetServiceErrorTrackingOverviewResponse)(nil), // 3: com.coralogix.catalog.v1.GetServiceErrorTrackingOverviewResponse
	(*GetServiceErrorTrackingListRequest)(nil),      // 4: com.coralogix.catalog.v1.GetServiceErrorTrackingListRequest
	(*GetServiceErrorTrackingListResponse)(nil),     // 5: com.coralogix.catalog.v1.GetServiceErrorTrackingListResponse
	(*Operations)(nil),                              // 6: com.coralogix.catalog.v1.Operations
	(*ErrorDetails)(nil),                            // 7: com.coralogix.catalog.v1.ErrorDetails
	nil,                                             // 8: com.coralogix.catalog.v1.GetServiceErrorTrackingOverviewRequest.FiltersEntry
	nil,                                             // 9: com.coralogix.catalog.v1.GetServiceErrorTrackingListRequest.FiltersEntry
	(*v2.TimeRange)(nil),                            // 10: com.coralogixapis.apm.common.v2.TimeRange
	(*wrapperspb.StringValue)(nil),                  // 11: google.protobuf.StringValue
	(*wrapperspb.Int64Value)(nil),                   // 12: google.protobuf.Int64Value
	(v1.SpanKind)(0),                                // 13: com.coralogixapis.service_catalog.v1.SpanKind
	(v1.ApmSource)(0),                               // 14: com.coralogixapis.service_catalog.v1.ApmSource
	(*wrapperspb.UInt64Value)(nil),                  // 15: google.protobuf.UInt64Value
	(*v11.Stat)(nil),                                // 16: com.coralogixapis.apm.widgets.v1.Stat
	(*v1.RepeatedLineChart)(nil),                    // 17: com.coralogixapis.service_catalog.v1.RepeatedLineChart
	(*wrapperspb.FloatValue)(nil),                   // 18: google.protobuf.FloatValue
	(*structpb.ListValue)(nil),                      // 19: google.protobuf.ListValue
}
var file_com_coralogix_catalog_v1_error_tracking_service_proto_depIdxs = []int32{
	10, // 0: com.coralogix.catalog.v1.GetServiceErrorTrackingOverviewRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	11, // 1: com.coralogix.catalog.v1.GetServiceErrorTrackingOverviewRequest.service_name:type_name -> google.protobuf.StringValue
	8,  // 2: com.coralogix.catalog.v1.GetServiceErrorTrackingOverviewRequest.filters:type_name -> com.coralogix.catalog.v1.GetServiceErrorTrackingOverviewRequest.FiltersEntry
	0,  // 3: com.coralogix.catalog.v1.GetServiceErrorTrackingOverviewRequest.group_by:type_name -> com.coralogix.catalog.v1.GroupBy
	12, // 4: com.coralogix.catalog.v1.GetServiceErrorTrackingOverviewRequest.trend_offset:type_name -> google.protobuf.Int64Value
	1,  // 5: com.coralogix.catalog.v1.GetServiceErrorTrackingOverviewRequest.source:type_name -> com.coralogix.catalog.v1.Source
	13, // 6: com.coralogix.catalog.v1.GetServiceErrorTrackingOverviewRequest.span_kinds:type_name -> com.coralogixapis.service_catalog.v1.SpanKind
	14, // 7: com.coralogix.catalog.v1.GetServiceErrorTrackingOverviewRequest.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	15, // 8: com.coralogix.catalog.v1.GetServiceErrorTrackingOverviewRequest.topk:type_name -> google.protobuf.UInt64Value
	16, // 9: com.coralogix.catalog.v1.GetServiceErrorTrackingOverviewResponse.error_groups:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	16, // 10: com.coralogix.catalog.v1.GetServiceErrorTrackingOverviewResponse.total_errors:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	16, // 11: com.coralogix.catalog.v1.GetServiceErrorTrackingOverviewResponse.errors_percentage:type_name -> com.coralogixapis.apm.widgets.v1.Stat
	17, // 12: com.coralogix.catalog.v1.GetServiceErrorTrackingOverviewResponse.errors:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	17, // 13: com.coralogix.catalog.v1.GetServiceErrorTrackingOverviewResponse.errors_percentages:type_name -> com.coralogixapis.service_catalog.v1.RepeatedLineChart
	10, // 14: com.coralogix.catalog.v1.GetServiceErrorTrackingListRequest.time_range:type_name -> com.coralogixapis.apm.common.v2.TimeRange
	11, // 15: com.coralogix.catalog.v1.GetServiceErrorTrackingListRequest.service_name:type_name -> google.protobuf.StringValue
	9,  // 16: com.coralogix.catalog.v1.GetServiceErrorTrackingListRequest.filters:type_name -> com.coralogix.catalog.v1.GetServiceErrorTrackingListRequest.FiltersEntry
	0,  // 17: com.coralogix.catalog.v1.GetServiceErrorTrackingListRequest.group_by:type_name -> com.coralogix.catalog.v1.GroupBy
	12, // 18: com.coralogix.catalog.v1.GetServiceErrorTrackingListRequest.trend_offset:type_name -> google.protobuf.Int64Value
	1,  // 19: com.coralogix.catalog.v1.GetServiceErrorTrackingListRequest.source:type_name -> com.coralogix.catalog.v1.Source
	13, // 20: com.coralogix.catalog.v1.GetServiceErrorTrackingListRequest.span_kinds:type_name -> com.coralogixapis.service_catalog.v1.SpanKind
	14, // 21: com.coralogix.catalog.v1.GetServiceErrorTrackingListRequest.apm_source:type_name -> com.coralogixapis.service_catalog.v1.ApmSource
	7,  // 22: com.coralogix.catalog.v1.GetServiceErrorTrackingListResponse.error_details:type_name -> com.coralogix.catalog.v1.ErrorDetails
	0,  // 23: com.coralogix.catalog.v1.GetServiceErrorTrackingListResponse.group_by:type_name -> com.coralogix.catalog.v1.GroupBy
	11, // 24: com.coralogix.catalog.v1.Operations.operations:type_name -> google.protobuf.StringValue
	11, // 25: com.coralogix.catalog.v1.ErrorDetails.error_message:type_name -> google.protobuf.StringValue
	6,  // 26: com.coralogix.catalog.v1.ErrorDetails.operations:type_name -> com.coralogix.catalog.v1.Operations
	12, // 27: com.coralogix.catalog.v1.ErrorDetails.first_appearance:type_name -> google.protobuf.Int64Value
	12, // 28: com.coralogix.catalog.v1.ErrorDetails.last_appearance:type_name -> google.protobuf.Int64Value
	12, // 29: com.coralogix.catalog.v1.ErrorDetails.occurrences:type_name -> google.protobuf.Int64Value
	18, // 30: com.coralogix.catalog.v1.ErrorDetails.error_percentage:type_name -> google.protobuf.FloatValue
	19, // 31: com.coralogix.catalog.v1.GetServiceErrorTrackingOverviewRequest.FiltersEntry.value:type_name -> google.protobuf.ListValue
	19, // 32: com.coralogix.catalog.v1.GetServiceErrorTrackingListRequest.FiltersEntry.value:type_name -> google.protobuf.ListValue
	2,  // 33: com.coralogix.catalog.v1.ErrorTrackingService.GetServiceErrorTrackingOverviewStream:input_type -> com.coralogix.catalog.v1.GetServiceErrorTrackingOverviewRequest
	4,  // 34: com.coralogix.catalog.v1.ErrorTrackingService.GetServiceErrorTrackingListStream:input_type -> com.coralogix.catalog.v1.GetServiceErrorTrackingListRequest
	3,  // 35: com.coralogix.catalog.v1.ErrorTrackingService.GetServiceErrorTrackingOverviewStream:output_type -> com.coralogix.catalog.v1.GetServiceErrorTrackingOverviewResponse
	5,  // 36: com.coralogix.catalog.v1.ErrorTrackingService.GetServiceErrorTrackingListStream:output_type -> com.coralogix.catalog.v1.GetServiceErrorTrackingListResponse
	35, // [35:37] is the sub-list for method output_type
	33, // [33:35] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_com_coralogix_catalog_v1_error_tracking_service_proto_init() }
func file_com_coralogix_catalog_v1_error_tracking_service_proto_init() {
	if File_com_coralogix_catalog_v1_error_tracking_service_proto != nil {
		return
	}
	file_com_coralogix_catalog_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetServiceErrorTrackingOverviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetServiceErrorTrackingOverviewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetServiceErrorTrackingListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetServiceErrorTrackingListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Operations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes[1].OneofWrappers = []any{
		(*GetServiceErrorTrackingOverviewResponse_ErrorGroups)(nil),
		(*GetServiceErrorTrackingOverviewResponse_TotalErrors)(nil),
		(*GetServiceErrorTrackingOverviewResponse_ErrorsPercentage)(nil),
		(*GetServiceErrorTrackingOverviewResponse_Errors)(nil),
		(*GetServiceErrorTrackingOverviewResponse_ErrorsPercentages)(nil),
	}
	file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes[5].OneofWrappers = []any{
		(*ErrorDetails_Operations)(nil),
		(*ErrorDetails_FirstAppearance)(nil),
		(*ErrorDetails_LastAppearance)(nil),
		(*ErrorDetails_Occurrences)(nil),
		(*ErrorDetails_ErrorPercentage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_catalog_v1_error_tracking_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogix_catalog_v1_error_tracking_service_proto_goTypes,
		DependencyIndexes: file_com_coralogix_catalog_v1_error_tracking_service_proto_depIdxs,
		EnumInfos:         file_com_coralogix_catalog_v1_error_tracking_service_proto_enumTypes,
		MessageInfos:      file_com_coralogix_catalog_v1_error_tracking_service_proto_msgTypes,
	}.Build()
	File_com_coralogix_catalog_v1_error_tracking_service_proto = out.File
	file_com_coralogix_catalog_v1_error_tracking_service_proto_rawDesc = nil
	file_com_coralogix_catalog_v1_error_tracking_service_proto_goTypes = nil
	file_com_coralogix_catalog_v1_error_tracking_service_proto_depIdxs = nil
}
