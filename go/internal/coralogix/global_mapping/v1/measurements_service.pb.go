// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: com/coralogix/global_mapping/v1/measurements_service.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetMeasurementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeasurementNames []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=measurement_names,json=measurementNames,proto3" json:"measurement_names,omitempty"`
	DataSourceTypes  []DataSourceType          `protobuf:"varint,2,rep,packed,name=data_source_types,json=dataSourceTypes,proto3,enum=com.coralogix.global_mapping.v1.DataSourceType" json:"data_source_types,omitempty"`
	Labels           []*wrapperspb.StringValue `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	DataSources      []*DataSource             `protobuf:"bytes,5,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty"`
}

func (x *GetMeasurementsRequest) Reset() {
	*x = GetMeasurementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeasurementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeasurementsRequest) ProtoMessage() {}

func (x *GetMeasurementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeasurementsRequest.ProtoReflect.Descriptor instead.
func (*GetMeasurementsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetMeasurementsRequest) GetMeasurementNames() []*wrapperspb.StringValue {
	if x != nil {
		return x.MeasurementNames
	}
	return nil
}

func (x *GetMeasurementsRequest) GetDataSourceTypes() []DataSourceType {
	if x != nil {
		return x.DataSourceTypes
	}
	return nil
}

func (x *GetMeasurementsRequest) GetLabels() []*wrapperspb.StringValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetMeasurementsRequest) GetDataSources() []*DataSource {
	if x != nil {
		return x.DataSources
	}
	return nil
}

type GetMeasurementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Measurements []*Measurement `protobuf:"bytes,1,rep,name=measurements,proto3" json:"measurements,omitempty"`
}

func (x *GetMeasurementsResponse) Reset() {
	*x = GetMeasurementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeasurementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeasurementsResponse) ProtoMessage() {}

func (x *GetMeasurementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeasurementsResponse.ProtoReflect.Descriptor instead.
func (*GetMeasurementsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetMeasurementsResponse) GetMeasurements() []*Measurement {
	if x != nil {
		return x.Measurements
	}
	return nil
}

type UpsertMeasurementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Measurements []*Measurement `protobuf:"bytes,1,rep,name=measurements,proto3" json:"measurements,omitempty"`
}

func (x *UpsertMeasurementsRequest) Reset() {
	*x = UpsertMeasurementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertMeasurementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertMeasurementsRequest) ProtoMessage() {}

func (x *UpsertMeasurementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertMeasurementsRequest.ProtoReflect.Descriptor instead.
func (*UpsertMeasurementsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpsertMeasurementsRequest) GetMeasurements() []*Measurement {
	if x != nil {
		return x.Measurements
	}
	return nil
}

type UpsertMeasurementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Measurements []*Measurement `protobuf:"bytes,1,rep,name=measurements,proto3" json:"measurements,omitempty"`
}

func (x *UpsertMeasurementsResponse) Reset() {
	*x = UpsertMeasurementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertMeasurementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertMeasurementsResponse) ProtoMessage() {}

func (x *UpsertMeasurementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertMeasurementsResponse.ProtoReflect.Descriptor instead.
func (*UpsertMeasurementsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescGZIP(), []int{3}
}

func (x *UpsertMeasurementsResponse) GetMeasurements() []*Measurement {
	if x != nil {
		return x.Measurements
	}
	return nil
}

type RemoveMeasurementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeasurementIds []string `protobuf:"bytes,1,rep,name=measurement_ids,json=measurementIds,proto3" json:"measurement_ids,omitempty"`
}

func (x *RemoveMeasurementsRequest) Reset() {
	*x = RemoveMeasurementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMeasurementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMeasurementsRequest) ProtoMessage() {}

func (x *RemoveMeasurementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMeasurementsRequest.ProtoReflect.Descriptor instead.
func (*RemoveMeasurementsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescGZIP(), []int{4}
}

func (x *RemoveMeasurementsRequest) GetMeasurementIds() []string {
	if x != nil {
		return x.MeasurementIds
	}
	return nil
}

type RemoveMeasurementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberOfDeletedMeasurements *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=number_of_deleted_measurements,json=numberOfDeletedMeasurements,proto3" json:"number_of_deleted_measurements,omitempty"`
}

func (x *RemoveMeasurementsResponse) Reset() {
	*x = RemoveMeasurementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMeasurementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMeasurementsResponse) ProtoMessage() {}

func (x *RemoveMeasurementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMeasurementsResponse.ProtoReflect.Descriptor instead.
func (*RemoveMeasurementsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescGZIP(), []int{5}
}

func (x *RemoveMeasurementsResponse) GetNumberOfDeletedMeasurements() *wrapperspb.Int32Value {
	if x != nil {
		return x.NumberOfDeletedMeasurements
	}
	return nil
}

type InsertCompanyMeasurementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeasurementIds []string `protobuf:"bytes,1,rep,name=measurement_ids,json=measurementIds,proto3" json:"measurement_ids,omitempty"`
}

func (x *InsertCompanyMeasurementsRequest) Reset() {
	*x = InsertCompanyMeasurementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertCompanyMeasurementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertCompanyMeasurementsRequest) ProtoMessage() {}

func (x *InsertCompanyMeasurementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertCompanyMeasurementsRequest.ProtoReflect.Descriptor instead.
func (*InsertCompanyMeasurementsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescGZIP(), []int{6}
}

func (x *InsertCompanyMeasurementsRequest) GetMeasurementIds() []string {
	if x != nil {
		return x.MeasurementIds
	}
	return nil
}

type InsertCompanyMeasurementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Measurements []*Measurement `protobuf:"bytes,1,rep,name=measurements,proto3" json:"measurements,omitempty"`
}

func (x *InsertCompanyMeasurementsResponse) Reset() {
	*x = InsertCompanyMeasurementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertCompanyMeasurementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertCompanyMeasurementsResponse) ProtoMessage() {}

func (x *InsertCompanyMeasurementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertCompanyMeasurementsResponse.ProtoReflect.Descriptor instead.
func (*InsertCompanyMeasurementsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescGZIP(), []int{7}
}

func (x *InsertCompanyMeasurementsResponse) GetMeasurements() []*Measurement {
	if x != nil {
		return x.Measurements
	}
	return nil
}

type RemoveCompanyMeasurementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeasurementIds []string `protobuf:"bytes,1,rep,name=measurement_ids,json=measurementIds,proto3" json:"measurement_ids,omitempty"`
}

func (x *RemoveCompanyMeasurementsRequest) Reset() {
	*x = RemoveCompanyMeasurementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCompanyMeasurementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCompanyMeasurementsRequest) ProtoMessage() {}

func (x *RemoveCompanyMeasurementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCompanyMeasurementsRequest.ProtoReflect.Descriptor instead.
func (*RemoveCompanyMeasurementsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveCompanyMeasurementsRequest) GetMeasurementIds() []string {
	if x != nil {
		return x.MeasurementIds
	}
	return nil
}

type RemoveCompanyMeasurementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Measurements []*Measurement `protobuf:"bytes,1,rep,name=measurements,proto3" json:"measurements,omitempty"`
}

func (x *RemoveCompanyMeasurementsResponse) Reset() {
	*x = RemoveCompanyMeasurementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCompanyMeasurementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCompanyMeasurementsResponse) ProtoMessage() {}

func (x *RemoveCompanyMeasurementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCompanyMeasurementsResponse.ProtoReflect.Descriptor instead.
func (*RemoveCompanyMeasurementsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescGZIP(), []int{9}
}

func (x *RemoveCompanyMeasurementsResponse) GetMeasurements() []*Measurement {
	if x != nil {
		return x.Measurements
	}
	return nil
}

type RecreateCompanyMeasurementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeasurementIds []string `protobuf:"bytes,1,rep,name=measurement_ids,json=measurementIds,proto3" json:"measurement_ids,omitempty"`
}

func (x *RecreateCompanyMeasurementsRequest) Reset() {
	*x = RecreateCompanyMeasurementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecreateCompanyMeasurementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecreateCompanyMeasurementsRequest) ProtoMessage() {}

func (x *RecreateCompanyMeasurementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecreateCompanyMeasurementsRequest.ProtoReflect.Descriptor instead.
func (*RecreateCompanyMeasurementsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescGZIP(), []int{10}
}

func (x *RecreateCompanyMeasurementsRequest) GetMeasurementIds() []string {
	if x != nil {
		return x.MeasurementIds
	}
	return nil
}

type RecreateCompanyMeasurementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Measurements []*Measurement `protobuf:"bytes,1,rep,name=measurements,proto3" json:"measurements,omitempty"`
}

func (x *RecreateCompanyMeasurementsResponse) Reset() {
	*x = RecreateCompanyMeasurementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecreateCompanyMeasurementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecreateCompanyMeasurementsResponse) ProtoMessage() {}

func (x *RecreateCompanyMeasurementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecreateCompanyMeasurementsResponse.ProtoReflect.Descriptor instead.
func (*RecreateCompanyMeasurementsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescGZIP(), []int{11}
}

func (x *RecreateCompanyMeasurementsResponse) GetMeasurements() []*Measurement {
	if x != nil {
		return x.Measurements
	}
	return nil
}

type GetQueriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtractedLabels  []*ExtractedLabel       `protobuf:"bytes,1,rep,name=extracted_labels,json=extractedLabels,proto3" json:"extracted_labels,omitempty"`
	MeasurementNames []string                `protobuf:"bytes,2,rep,name=measurement_names,json=measurementNames,proto3" json:"measurement_names,omitempty"`
	StartTimeSeconds *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=start_time_seconds,json=startTimeSeconds,proto3" json:"start_time_seconds,omitempty"`
	EndTimeSeconds   *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=end_time_seconds,json=endTimeSeconds,proto3" json:"end_time_seconds,omitempty"`
	Topk             *wrapperspb.Int32Value  `protobuf:"bytes,5,opt,name=topk,proto3" json:"topk,omitempty"`
	// Deprecated: Marked as deprecated in com/coralogix/global_mapping/v1/measurements_service.proto.
	OrderingLabel       *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=ordering_label,json=orderingLabel,proto3" json:"ordering_label,omitempty"`
	MeasurementMetadata []*MeasurementMetadata  `protobuf:"bytes,7,rep,name=measurement_metadata,json=measurementMetadata,proto3" json:"measurement_metadata,omitempty"`
	SubjectLabel        *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=subject_label,json=subjectLabel,proto3" json:"subject_label,omitempty"`
	DataSource          *DataSource             `protobuf:"bytes,10,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
}

func (x *GetQueriesRequest) Reset() {
	*x = GetQueriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueriesRequest) ProtoMessage() {}

func (x *GetQueriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueriesRequest.ProtoReflect.Descriptor instead.
func (*GetQueriesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetQueriesRequest) GetExtractedLabels() []*ExtractedLabel {
	if x != nil {
		return x.ExtractedLabels
	}
	return nil
}

func (x *GetQueriesRequest) GetMeasurementNames() []string {
	if x != nil {
		return x.MeasurementNames
	}
	return nil
}

func (x *GetQueriesRequest) GetStartTimeSeconds() *wrapperspb.StringValue {
	if x != nil {
		return x.StartTimeSeconds
	}
	return nil
}

func (x *GetQueriesRequest) GetEndTimeSeconds() *wrapperspb.StringValue {
	if x != nil {
		return x.EndTimeSeconds
	}
	return nil
}

func (x *GetQueriesRequest) GetTopk() *wrapperspb.Int32Value {
	if x != nil {
		return x.Topk
	}
	return nil
}

// Deprecated: Marked as deprecated in com/coralogix/global_mapping/v1/measurements_service.proto.
func (x *GetQueriesRequest) GetOrderingLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.OrderingLabel
	}
	return nil
}

func (x *GetQueriesRequest) GetMeasurementMetadata() []*MeasurementMetadata {
	if x != nil {
		return x.MeasurementMetadata
	}
	return nil
}

func (x *GetQueriesRequest) GetSubjectLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.SubjectLabel
	}
	return nil
}

func (x *GetQueriesRequest) GetDataSource() *DataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

type GetQueriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []*MeasurementQuery `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *GetQueriesResponse) Reset() {
	*x = GetQueriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueriesResponse) ProtoMessage() {}

func (x *GetQueriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueriesResponse.ProtoReflect.Descriptor instead.
func (*GetQueriesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetQueriesResponse) GetQueries() []*MeasurementQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

type GetMeasurementsTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in com/coralogix/global_mapping/v1/measurements_service.proto.
	RowLabelValues      *LabelValues            `protobuf:"bytes,1,opt,name=row_label_values,json=rowLabelValues,proto3" json:"row_label_values,omitempty"`
	MeasurementNames    []string                `protobuf:"bytes,2,rep,name=measurement_names,json=measurementNames,proto3" json:"measurement_names,omitempty"`
	StartTimeSeconds    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=start_time_seconds,json=startTimeSeconds,proto3" json:"start_time_seconds,omitempty"`
	EndTimeSeconds      *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=end_time_seconds,json=endTimeSeconds,proto3" json:"end_time_seconds,omitempty"`
	Topk                *wrapperspb.Int32Value  `protobuf:"bytes,5,opt,name=topk,proto3" json:"topk,omitempty"`
	OrderingLabel       *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=ordering_label,json=orderingLabel,proto3" json:"ordering_label,omitempty"`
	MeasurementMetadata []*MeasurementMetadata  `protobuf:"bytes,7,rep,name=measurement_metadata,json=measurementMetadata,proto3" json:"measurement_metadata,omitempty"`
	PaginationData      *PaginationData         `protobuf:"bytes,8,opt,name=pagination_data,json=paginationData,proto3" json:"pagination_data,omitempty"`
	SubjectLabel        *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=subject_label,json=subjectLabel,proto3" json:"subject_label,omitempty"`
	LabelValues         []*LabelValues          `protobuf:"bytes,11,rep,name=label_values,json=labelValues,proto3" json:"label_values,omitempty"`
	DataSource          *DataSource             `protobuf:"bytes,12,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
}

func (x *GetMeasurementsTableRequest) Reset() {
	*x = GetMeasurementsTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeasurementsTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeasurementsTableRequest) ProtoMessage() {}

func (x *GetMeasurementsTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeasurementsTableRequest.ProtoReflect.Descriptor instead.
func (*GetMeasurementsTableRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescGZIP(), []int{14}
}

// Deprecated: Marked as deprecated in com/coralogix/global_mapping/v1/measurements_service.proto.
func (x *GetMeasurementsTableRequest) GetRowLabelValues() *LabelValues {
	if x != nil {
		return x.RowLabelValues
	}
	return nil
}

func (x *GetMeasurementsTableRequest) GetMeasurementNames() []string {
	if x != nil {
		return x.MeasurementNames
	}
	return nil
}

func (x *GetMeasurementsTableRequest) GetStartTimeSeconds() *wrapperspb.StringValue {
	if x != nil {
		return x.StartTimeSeconds
	}
	return nil
}

func (x *GetMeasurementsTableRequest) GetEndTimeSeconds() *wrapperspb.StringValue {
	if x != nil {
		return x.EndTimeSeconds
	}
	return nil
}

func (x *GetMeasurementsTableRequest) GetTopk() *wrapperspb.Int32Value {
	if x != nil {
		return x.Topk
	}
	return nil
}

func (x *GetMeasurementsTableRequest) GetOrderingLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.OrderingLabel
	}
	return nil
}

func (x *GetMeasurementsTableRequest) GetMeasurementMetadata() []*MeasurementMetadata {
	if x != nil {
		return x.MeasurementMetadata
	}
	return nil
}

func (x *GetMeasurementsTableRequest) GetPaginationData() *PaginationData {
	if x != nil {
		return x.PaginationData
	}
	return nil
}

func (x *GetMeasurementsTableRequest) GetSubjectLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.SubjectLabel
	}
	return nil
}

func (x *GetMeasurementsTableRequest) GetLabelValues() []*LabelValues {
	if x != nil {
		return x.LabelValues
	}
	return nil
}

func (x *GetMeasurementsTableRequest) GetDataSource() *DataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

type GetMeasurementsTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize        *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageIndex       *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty"`
	Rows            []*TableRow            `protobuf:"bytes,3,rep,name=rows,proto3" json:"rows,omitempty"`
	TotalRowCount   *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=total_row_count,json=totalRowCount,proto3" json:"total_row_count,omitempty"`
	ExistingColumns []string               `protobuf:"bytes,5,rep,name=existing_columns,json=existingColumns,proto3" json:"existing_columns,omitempty"`
}

func (x *GetMeasurementsTableResponse) Reset() {
	*x = GetMeasurementsTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeasurementsTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeasurementsTableResponse) ProtoMessage() {}

func (x *GetMeasurementsTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeasurementsTableResponse.ProtoReflect.Descriptor instead.
func (*GetMeasurementsTableResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetMeasurementsTableResponse) GetPageSize() *wrapperspb.Int32Value {
	if x != nil {
		return x.PageSize
	}
	return nil
}

func (x *GetMeasurementsTableResponse) GetPageIndex() *wrapperspb.Int32Value {
	if x != nil {
		return x.PageIndex
	}
	return nil
}

func (x *GetMeasurementsTableResponse) GetRows() []*TableRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *GetMeasurementsTableResponse) GetTotalRowCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.TotalRowCount
	}
	return nil
}

func (x *GetMeasurementsTableResponse) GetExistingColumns() []string {
	if x != nil {
		return x.ExistingColumns
	}
	return nil
}

type UpsertCompanyProvidersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in com/coralogix/global_mapping/v1/measurements_service.proto.
	Providers   []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
	DataSources []*DataSource             `protobuf:"bytes,2,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty"`
}

func (x *UpsertCompanyProvidersRequest) Reset() {
	*x = UpsertCompanyProvidersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertCompanyProvidersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertCompanyProvidersRequest) ProtoMessage() {}

func (x *UpsertCompanyProvidersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertCompanyProvidersRequest.ProtoReflect.Descriptor instead.
func (*UpsertCompanyProvidersRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescGZIP(), []int{16}
}

// Deprecated: Marked as deprecated in com/coralogix/global_mapping/v1/measurements_service.proto.
func (x *UpsertCompanyProvidersRequest) GetProviders() []*wrapperspb.StringValue {
	if x != nil {
		return x.Providers
	}
	return nil
}

func (x *UpsertCompanyProvidersRequest) GetDataSources() []*DataSource {
	if x != nil {
		return x.DataSources
	}
	return nil
}

type UpsertCompanyProvidersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in com/coralogix/global_mapping/v1/measurements_service.proto.
	Providers   []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
	DataSources []*DataSource             `protobuf:"bytes,2,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty"`
}

func (x *UpsertCompanyProvidersResponse) Reset() {
	*x = UpsertCompanyProvidersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertCompanyProvidersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertCompanyProvidersResponse) ProtoMessage() {}

func (x *UpsertCompanyProvidersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertCompanyProvidersResponse.ProtoReflect.Descriptor instead.
func (*UpsertCompanyProvidersResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescGZIP(), []int{17}
}

// Deprecated: Marked as deprecated in com/coralogix/global_mapping/v1/measurements_service.proto.
func (x *UpsertCompanyProvidersResponse) GetProviders() []*wrapperspb.StringValue {
	if x != nil {
		return x.Providers
	}
	return nil
}

func (x *UpsertCompanyProvidersResponse) GetDataSources() []*DataSource {
	if x != nil {
		return x.DataSources
	}
	return nil
}

var File_com_coralogix_global_mapping_v1_measurements_service_proto protoreflect.FileDescriptor

var file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x36, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x37, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x32, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x5b,
	0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x52, 0x15, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x22, 0x6b,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x19, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x6e, 0x0a, 0x1a, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x44, 0x0a, 0x19, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73,
	0x22, 0x7e, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60,
	0x0a, 0x1e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x4b, 0x0a, 0x20, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x75, 0x0a,
	0x21, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x4b, 0x0a, 0x20, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x22, 0x75, 0x0a, 0x21, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x22, 0x52, 0x65, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x77, 0x0a, 0x23, 0x52, 0x65, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xc0, 0x05, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x4a, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x74, 0x6f, 0x70, 0x6b, 0x12, 0x47, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x67, 0x0a,
	0x14, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x13, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x4c, 0x0a, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x52, 0x14, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0xf1, 0x06, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x10, 0x72, 0x6f, 0x77, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0e, 0x72, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x4a, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x74, 0x6f, 0x70, 0x6b, 0x12, 0x43, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x67, 0x0a, 0x14, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x58, 0x0a, 0x0f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0d,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x4f, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x4c, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a, 0x04,
	0x08, 0x09, 0x10, 0x0a, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xc3, 0x02, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x12, 0x43, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x22, 0xaf, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x32, 0xae, 0x05, 0x0a, 0x13, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9c, 0x01,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0xc2, 0xb8, 0x02, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x20,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xb9, 0x01, 0x0a,
	0x16, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0xc2, 0xb8, 0x02, 0x1a, 0x0a, 0x18,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x11, 0xc2, 0xb8, 0x02, 0x0d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x20, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0xc2, 0xb8, 0x02, 0x17, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x20, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x20, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescOnce sync.Once
	file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescData = file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDesc
)

func file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescGZIP() []byte {
	file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescOnce.Do(func() {
		file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescData)
	})
	return file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDescData
}

var file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_com_coralogix_global_mapping_v1_measurements_service_proto_goTypes = []any{
	(*GetMeasurementsRequest)(nil),              // 0: com.coralogix.global_mapping.v1.GetMeasurementsRequest
	(*GetMeasurementsResponse)(nil),             // 1: com.coralogix.global_mapping.v1.GetMeasurementsResponse
	(*UpsertMeasurementsRequest)(nil),           // 2: com.coralogix.global_mapping.v1.UpsertMeasurementsRequest
	(*UpsertMeasurementsResponse)(nil),          // 3: com.coralogix.global_mapping.v1.UpsertMeasurementsResponse
	(*RemoveMeasurementsRequest)(nil),           // 4: com.coralogix.global_mapping.v1.RemoveMeasurementsRequest
	(*RemoveMeasurementsResponse)(nil),          // 5: com.coralogix.global_mapping.v1.RemoveMeasurementsResponse
	(*InsertCompanyMeasurementsRequest)(nil),    // 6: com.coralogix.global_mapping.v1.InsertCompanyMeasurementsRequest
	(*InsertCompanyMeasurementsResponse)(nil),   // 7: com.coralogix.global_mapping.v1.InsertCompanyMeasurementsResponse
	(*RemoveCompanyMeasurementsRequest)(nil),    // 8: com.coralogix.global_mapping.v1.RemoveCompanyMeasurementsRequest
	(*RemoveCompanyMeasurementsResponse)(nil),   // 9: com.coralogix.global_mapping.v1.RemoveCompanyMeasurementsResponse
	(*RecreateCompanyMeasurementsRequest)(nil),  // 10: com.coralogix.global_mapping.v1.RecreateCompanyMeasurementsRequest
	(*RecreateCompanyMeasurementsResponse)(nil), // 11: com.coralogix.global_mapping.v1.RecreateCompanyMeasurementsResponse
	(*GetQueriesRequest)(nil),                   // 12: com.coralogix.global_mapping.v1.GetQueriesRequest
	(*GetQueriesResponse)(nil),                  // 13: com.coralogix.global_mapping.v1.GetQueriesResponse
	(*GetMeasurementsTableRequest)(nil),         // 14: com.coralogix.global_mapping.v1.GetMeasurementsTableRequest
	(*GetMeasurementsTableResponse)(nil),        // 15: com.coralogix.global_mapping.v1.GetMeasurementsTableResponse
	(*UpsertCompanyProvidersRequest)(nil),       // 16: com.coralogix.global_mapping.v1.UpsertCompanyProvidersRequest
	(*UpsertCompanyProvidersResponse)(nil),      // 17: com.coralogix.global_mapping.v1.UpsertCompanyProvidersResponse
	(*wrapperspb.StringValue)(nil),              // 18: google.protobuf.StringValue
	(DataSourceType)(0),                         // 19: com.coralogix.global_mapping.v1.DataSourceType
	(*DataSource)(nil),                          // 20: com.coralogix.global_mapping.v1.DataSource
	(*Measurement)(nil),                         // 21: com.coralogix.global_mapping.v1.Measurement
	(*wrapperspb.Int32Value)(nil),               // 22: google.protobuf.Int32Value
	(*ExtractedLabel)(nil),                      // 23: com.coralogix.global_mapping.v1.ExtractedLabel
	(*MeasurementMetadata)(nil),                 // 24: com.coralogix.global_mapping.v1.MeasurementMetadata
	(*MeasurementQuery)(nil),                    // 25: com.coralogix.global_mapping.v1.MeasurementQuery
	(*LabelValues)(nil),                         // 26: com.coralogix.global_mapping.v1.LabelValues
	(*PaginationData)(nil),                      // 27: com.coralogix.global_mapping.v1.PaginationData
	(*TableRow)(nil),                            // 28: com.coralogix.global_mapping.v1.TableRow
}
var file_com_coralogix_global_mapping_v1_measurements_service_proto_depIdxs = []int32{
	18, // 0: com.coralogix.global_mapping.v1.GetMeasurementsRequest.measurement_names:type_name -> google.protobuf.StringValue
	19, // 1: com.coralogix.global_mapping.v1.GetMeasurementsRequest.data_source_types:type_name -> com.coralogix.global_mapping.v1.DataSourceType
	18, // 2: com.coralogix.global_mapping.v1.GetMeasurementsRequest.labels:type_name -> google.protobuf.StringValue
	20, // 3: com.coralogix.global_mapping.v1.GetMeasurementsRequest.data_sources:type_name -> com.coralogix.global_mapping.v1.DataSource
	21, // 4: com.coralogix.global_mapping.v1.GetMeasurementsResponse.measurements:type_name -> com.coralogix.global_mapping.v1.Measurement
	21, // 5: com.coralogix.global_mapping.v1.UpsertMeasurementsRequest.measurements:type_name -> com.coralogix.global_mapping.v1.Measurement
	21, // 6: com.coralogix.global_mapping.v1.UpsertMeasurementsResponse.measurements:type_name -> com.coralogix.global_mapping.v1.Measurement
	22, // 7: com.coralogix.global_mapping.v1.RemoveMeasurementsResponse.number_of_deleted_measurements:type_name -> google.protobuf.Int32Value
	21, // 8: com.coralogix.global_mapping.v1.InsertCompanyMeasurementsResponse.measurements:type_name -> com.coralogix.global_mapping.v1.Measurement
	21, // 9: com.coralogix.global_mapping.v1.RemoveCompanyMeasurementsResponse.measurements:type_name -> com.coralogix.global_mapping.v1.Measurement
	21, // 10: com.coralogix.global_mapping.v1.RecreateCompanyMeasurementsResponse.measurements:type_name -> com.coralogix.global_mapping.v1.Measurement
	23, // 11: com.coralogix.global_mapping.v1.GetQueriesRequest.extracted_labels:type_name -> com.coralogix.global_mapping.v1.ExtractedLabel
	18, // 12: com.coralogix.global_mapping.v1.GetQueriesRequest.start_time_seconds:type_name -> google.protobuf.StringValue
	18, // 13: com.coralogix.global_mapping.v1.GetQueriesRequest.end_time_seconds:type_name -> google.protobuf.StringValue
	22, // 14: com.coralogix.global_mapping.v1.GetQueriesRequest.topk:type_name -> google.protobuf.Int32Value
	18, // 15: com.coralogix.global_mapping.v1.GetQueriesRequest.ordering_label:type_name -> google.protobuf.StringValue
	24, // 16: com.coralogix.global_mapping.v1.GetQueriesRequest.measurement_metadata:type_name -> com.coralogix.global_mapping.v1.MeasurementMetadata
	18, // 17: com.coralogix.global_mapping.v1.GetQueriesRequest.subject_label:type_name -> google.protobuf.StringValue
	20, // 18: com.coralogix.global_mapping.v1.GetQueriesRequest.data_source:type_name -> com.coralogix.global_mapping.v1.DataSource
	25, // 19: com.coralogix.global_mapping.v1.GetQueriesResponse.queries:type_name -> com.coralogix.global_mapping.v1.MeasurementQuery
	26, // 20: com.coralogix.global_mapping.v1.GetMeasurementsTableRequest.row_label_values:type_name -> com.coralogix.global_mapping.v1.LabelValues
	18, // 21: com.coralogix.global_mapping.v1.GetMeasurementsTableRequest.start_time_seconds:type_name -> google.protobuf.StringValue
	18, // 22: com.coralogix.global_mapping.v1.GetMeasurementsTableRequest.end_time_seconds:type_name -> google.protobuf.StringValue
	22, // 23: com.coralogix.global_mapping.v1.GetMeasurementsTableRequest.topk:type_name -> google.protobuf.Int32Value
	18, // 24: com.coralogix.global_mapping.v1.GetMeasurementsTableRequest.ordering_label:type_name -> google.protobuf.StringValue
	24, // 25: com.coralogix.global_mapping.v1.GetMeasurementsTableRequest.measurement_metadata:type_name -> com.coralogix.global_mapping.v1.MeasurementMetadata
	27, // 26: com.coralogix.global_mapping.v1.GetMeasurementsTableRequest.pagination_data:type_name -> com.coralogix.global_mapping.v1.PaginationData
	18, // 27: com.coralogix.global_mapping.v1.GetMeasurementsTableRequest.subject_label:type_name -> google.protobuf.StringValue
	26, // 28: com.coralogix.global_mapping.v1.GetMeasurementsTableRequest.label_values:type_name -> com.coralogix.global_mapping.v1.LabelValues
	20, // 29: com.coralogix.global_mapping.v1.GetMeasurementsTableRequest.data_source:type_name -> com.coralogix.global_mapping.v1.DataSource
	22, // 30: com.coralogix.global_mapping.v1.GetMeasurementsTableResponse.page_size:type_name -> google.protobuf.Int32Value
	22, // 31: com.coralogix.global_mapping.v1.GetMeasurementsTableResponse.page_index:type_name -> google.protobuf.Int32Value
	28, // 32: com.coralogix.global_mapping.v1.GetMeasurementsTableResponse.rows:type_name -> com.coralogix.global_mapping.v1.TableRow
	22, // 33: com.coralogix.global_mapping.v1.GetMeasurementsTableResponse.total_row_count:type_name -> google.protobuf.Int32Value
	18, // 34: com.coralogix.global_mapping.v1.UpsertCompanyProvidersRequest.providers:type_name -> google.protobuf.StringValue
	20, // 35: com.coralogix.global_mapping.v1.UpsertCompanyProvidersRequest.data_sources:type_name -> com.coralogix.global_mapping.v1.DataSource
	18, // 36: com.coralogix.global_mapping.v1.UpsertCompanyProvidersResponse.providers:type_name -> google.protobuf.StringValue
	20, // 37: com.coralogix.global_mapping.v1.UpsertCompanyProvidersResponse.data_sources:type_name -> com.coralogix.global_mapping.v1.DataSource
	0,  // 38: com.coralogix.global_mapping.v1.MeasurementsService.GetMeasurements:input_type -> com.coralogix.global_mapping.v1.GetMeasurementsRequest
	16, // 39: com.coralogix.global_mapping.v1.MeasurementsService.UpsertCompanyProviders:input_type -> com.coralogix.global_mapping.v1.UpsertCompanyProvidersRequest
	12, // 40: com.coralogix.global_mapping.v1.MeasurementsService.GetQueries:input_type -> com.coralogix.global_mapping.v1.GetQueriesRequest
	14, // 41: com.coralogix.global_mapping.v1.MeasurementsService.GetMeasurementsTable:input_type -> com.coralogix.global_mapping.v1.GetMeasurementsTableRequest
	1,  // 42: com.coralogix.global_mapping.v1.MeasurementsService.GetMeasurements:output_type -> com.coralogix.global_mapping.v1.GetMeasurementsResponse
	17, // 43: com.coralogix.global_mapping.v1.MeasurementsService.UpsertCompanyProviders:output_type -> com.coralogix.global_mapping.v1.UpsertCompanyProvidersResponse
	13, // 44: com.coralogix.global_mapping.v1.MeasurementsService.GetQueries:output_type -> com.coralogix.global_mapping.v1.GetQueriesResponse
	15, // 45: com.coralogix.global_mapping.v1.MeasurementsService.GetMeasurementsTable:output_type -> com.coralogix.global_mapping.v1.GetMeasurementsTableResponse
	42, // [42:46] is the sub-list for method output_type
	38, // [38:42] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_com_coralogix_global_mapping_v1_measurements_service_proto_init() }
func file_com_coralogix_global_mapping_v1_measurements_service_proto_init() {
	if File_com_coralogix_global_mapping_v1_measurements_service_proto != nil {
		return
	}
	file_com_coralogix_global_mapping_v1_measurement_proto_init()
	file_com_coralogix_global_mapping_v1_audit_log_proto_init()
	file_com_coralogix_global_mapping_v1_data_source_type_proto_init()
	file_com_coralogix_global_mapping_v1_extracted_label_proto_init()
	file_com_coralogix_global_mapping_v1_measurement_query_proto_init()
	file_com_coralogix_global_mapping_v1_query_pagination_proto_init()
	file_com_coralogix_global_mapping_v1_label_values_proto_init()
	file_com_coralogix_global_mapping_v1_data_source_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetMeasurementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetMeasurementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*UpsertMeasurementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UpsertMeasurementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveMeasurementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveMeasurementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*InsertCompanyMeasurementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*InsertCompanyMeasurementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveCompanyMeasurementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveCompanyMeasurementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*RecreateCompanyMeasurementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*RecreateCompanyMeasurementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GetQueriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GetQueriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*GetMeasurementsTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*GetMeasurementsTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*UpsertCompanyProvidersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*UpsertCompanyProvidersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogix_global_mapping_v1_measurements_service_proto_goTypes,
		DependencyIndexes: file_com_coralogix_global_mapping_v1_measurements_service_proto_depIdxs,
		MessageInfos:      file_com_coralogix_global_mapping_v1_measurements_service_proto_msgTypes,
	}.Build()
	File_com_coralogix_global_mapping_v1_measurements_service_proto = out.File
	file_com_coralogix_global_mapping_v1_measurements_service_proto_rawDesc = nil
	file_com_coralogix_global_mapping_v1_measurements_service_proto_goTypes = nil
	file_com_coralogix_global_mapping_v1_measurements_service_proto_depIdxs = nil
}
