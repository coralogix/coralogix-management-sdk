// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.1
// source: com/coralogix/global_mapping/v1/data_source_internal_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CompanyDataSourcesInternalService_GetCompanyDataSourcesInternal_FullMethodName = "/com.coralogix.global_mapping.v1.CompanyDataSourcesInternalService/GetCompanyDataSourcesInternal"
)

// CompanyDataSourcesInternalServiceClient is the client API for CompanyDataSourcesInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyDataSourcesInternalServiceClient interface {
	GetCompanyDataSourcesInternal(ctx context.Context, in *GetCompanyDataSourcesInternalRequest, opts ...grpc.CallOption) (*GetCompanyDataSourcesInternalResponse, error)
}

type companyDataSourcesInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyDataSourcesInternalServiceClient(cc grpc.ClientConnInterface) CompanyDataSourcesInternalServiceClient {
	return &companyDataSourcesInternalServiceClient{cc}
}

func (c *companyDataSourcesInternalServiceClient) GetCompanyDataSourcesInternal(ctx context.Context, in *GetCompanyDataSourcesInternalRequest, opts ...grpc.CallOption) (*GetCompanyDataSourcesInternalResponse, error) {
	out := new(GetCompanyDataSourcesInternalResponse)
	err := c.cc.Invoke(ctx, CompanyDataSourcesInternalService_GetCompanyDataSourcesInternal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyDataSourcesInternalServiceServer is the server API for CompanyDataSourcesInternalService service.
// All implementations must embed UnimplementedCompanyDataSourcesInternalServiceServer
// for forward compatibility
type CompanyDataSourcesInternalServiceServer interface {
	GetCompanyDataSourcesInternal(context.Context, *GetCompanyDataSourcesInternalRequest) (*GetCompanyDataSourcesInternalResponse, error)
	mustEmbedUnimplementedCompanyDataSourcesInternalServiceServer()
}

// UnimplementedCompanyDataSourcesInternalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyDataSourcesInternalServiceServer struct {
}

func (UnimplementedCompanyDataSourcesInternalServiceServer) GetCompanyDataSourcesInternal(context.Context, *GetCompanyDataSourcesInternalRequest) (*GetCompanyDataSourcesInternalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyDataSourcesInternal not implemented")
}
func (UnimplementedCompanyDataSourcesInternalServiceServer) mustEmbedUnimplementedCompanyDataSourcesInternalServiceServer() {
}

// UnsafeCompanyDataSourcesInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyDataSourcesInternalServiceServer will
// result in compilation errors.
type UnsafeCompanyDataSourcesInternalServiceServer interface {
	mustEmbedUnimplementedCompanyDataSourcesInternalServiceServer()
}

func RegisterCompanyDataSourcesInternalServiceServer(s grpc.ServiceRegistrar, srv CompanyDataSourcesInternalServiceServer) {
	s.RegisterService(&CompanyDataSourcesInternalService_ServiceDesc, srv)
}

func _CompanyDataSourcesInternalService_GetCompanyDataSourcesInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyDataSourcesInternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyDataSourcesInternalServiceServer).GetCompanyDataSourcesInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyDataSourcesInternalService_GetCompanyDataSourcesInternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyDataSourcesInternalServiceServer).GetCompanyDataSourcesInternal(ctx, req.(*GetCompanyDataSourcesInternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyDataSourcesInternalService_ServiceDesc is the grpc.ServiceDesc for CompanyDataSourcesInternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyDataSourcesInternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.global_mapping.v1.CompanyDataSourcesInternalService",
	HandlerType: (*CompanyDataSourcesInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompanyDataSourcesInternal",
			Handler:    _CompanyDataSourcesInternalService_GetCompanyDataSourcesInternal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/global_mapping/v1/data_source_internal_service.proto",
}
